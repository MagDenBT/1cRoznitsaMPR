
#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийПодключаемогоОборудования

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(Штрихкод) Тогда
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(Штрихкод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоМагнитномуКоду(ТекКод, ДополнительныеПараметры) Экспорт
	
	Если Не ПустаяСтрока(ТекКод) Тогда
		СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораДанныхПоиска(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбработатьДанныеПоКодуСервер(Результат);
		ОбработатьДанныеПоКодуКлиент(Результат)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолученМагнитныйКод(МагнитныйКод) Экспорт 
	
	СтруктураРезультат = ДанныеПоискаПоМагнитномуКодуСервер(МагнитныйКод);
	Возврат ПодключаемоеОборудованиеРТКлиент.ПолученМагнитныйКод(ЭтотОбъект, СтруктураРезультат);
	
КонецФункции

&НаКлиенте
Функция ПолученШтрихкодИзСШК(Штрихкод) Экспорт
	
	СтруктураРезультат = ДанныеПоискаПоШтрихкодуСервер(Штрихкод);
	Возврат ПодключаемоеОборудованиеРТКлиент.ПолученШтрихкодИзСШК(ЭтотОбъект, СтруктураРезультат);
	
КонецФункции

&НаСервере
Процедура ОбработатьДанныеПоКодуСервер(СтруктураРезультат) Экспорт
	
	СтрокаРезультата = СтруктураРезультат.ЗначенияПоиска[0];
	
	Если СтрокаРезультата.Свойство("Карта") Тогда
		
		ПодключаемоеОборудованиеРТ.ВставитьПредупреждениеОНевозможностиОбработкиКарт(СтруктураРезультат, СтрокаРезультата);
		
	Иначе
		
		ЭтотОбъект.ТекущийЭлемент = Элементы.Список;
		Элементы.Список.ТекущаяСтрока = СтрокаРезультата.Номенклатура;
		
	КонецЕсли;
	
	Если СтрокаРезультата.Свойство("ТекстПредупреждения") Тогда
		СтруктураРезультат.Вставить("ТекстПредупреждения", СтрокаРезультата.ТекстПредупреждения);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента) Экспорт
	
	ОткрытаБлокирующаяФорма = Ложь;
	ПодключаемоеОборудованиеРТКлиент.ОбработатьДанныеПоКоду(ЭтотОбъект, СтруктураПараметровКлиента, ОткрытаБлокирующаяФорма);
	
КонецПроцедуры

&НаСервере
Функция ДанныеПоискаПоМагнитномуКодуСервер(МагнитныйКод)
	
	Возврат ПодключаемоеОборудованиеРТ.ДанныеПоискаПоМагнитномуКоду(МагнитныйКод, ЭтотОбъект);
	
КонецФункции

&НаСервере
Функция ДанныеПоискаПоШтрихкодуСервер(Штрихкод)
	
	Возврат ПодключаемоеОборудованиеРТ.ДанныеПоискаПоШтрихкоду(Штрихкод, ЭтотОбъект);
	
КонецФункции

&НаКлиенте
Процедура ОповещениеОбработатьДанныеПоКоду(СтруктураРезультат, ДополнительныеПараметры) Экспорт
	
	ОбработатьДанныеПоКодуСервер(СтруктураРезультат);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.КоманднаяПанельФормы;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	РаботаСоШтрихкодамиПереопределяемый.ОпределитьФильтрПоискаШтрихкода(ЭтотОбъект);
	
	ИспользоватьПолнотекстовыйПоиск = ПолучитьФункциональнуюОпцию("ИспользоватьПолнотекстовыйПоиск");
	
	ИнформационнаяБазаФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	ДополнительныеКолонкиНоменклатуры = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ДополнительнаяКолонкаПриОтображенииНоменклатуры");
	
	УстановитьДополнительныеКолонкиНоменклатуры();
	
	Если ИспользоватьПолнотекстовыйПоиск Тогда
		
		Если ПолнотекстовыйПоиск.ПолучитьРежимПолнотекстовогоПоиска() = РежимПолнотекстовогоПоиска.Разрешить Тогда
			
			ИндексПолнотекстовогоПоискаАктуален = ПолнотекстовыйПоиск.ИндексАктуален();
			
		Иначе
			
			Элементы.СтрокаПоиска.Видимость 	= Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// ПодключаемоеОборудование
	ПараметрыСобытийПО = Новый Структура;
	ПараметрыСобытийПО.Вставить("РегистрацияНовойНоменклатуры", Истина);
	ПодключаемоеОборудованиеРТ.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
	// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	РаботаСНоменклатурой.ПриСозданииНаСервереФормаСпискаНоменклатуры(
		ЭтотОбъект,
		Элементы.ГруппаКомандыФормы,
		Элементы.Список,
		Истина);
	// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода, СчитывательМагнитныхКарт");
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
		
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ВводДоступен() Тогда
		ПодключаемоеОборудованиеРТКлиент.ВнешнееСобытиеОборудования(ЭтотОбъект, Источник, Событие, Данные);
	КонецЕсли;
	
КонецПроцедуры

// Обработка события создание Номенклатуры из 1С:Номенклатуры
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	Если ИмяСобытия = РаботаСНоменклатуройКлиент.ОписаниеОповещенийПодсистемы().ЗагрузкаНоменклатуры Тогда
		Если Параметр.СозданныеОбъекты.Количество() > 0 Тогда
			Элементы.Список.ТекущаяСтрока = Параметр.СозданныеОбъекты[0].Номенклатура;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = РаботаСНоменклатуройКлиент.ОписаниеОповещенийПодсистемы().СопоставлениеНоменклатуры Тогда
		Элементы.Список.Обновить();
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
    
	// &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
	Истина, "Справочник.Номенклатура.Форма.ФормаЭлемента.Открытие");
	
	// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	//Если у списка есть событие Выбор, то подключаемые событие не добавляются
	РаботаСНоменклатуройКлиент.ВыборВТаблицеФормы(ЭтотОбъект, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события "Очистка" поля формы "СтрокаПоиска".
//
&НаКлиенте
Процедура СтрокаПоискаОчистка(Элемент, СтандартнаяОбработка)
	
	ПрименитьПоиск();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля формы "СтрокаПоиска".
//
&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	ПрименитьПоиск();
	
КонецПроцедуры

// Процедура - обработчик события "АвтоПодбор" поля формы "СтрокаПоиска".
//
&НаКлиенте
Процедура СтрокаПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
		
	
	СпискиВыбораКлиент.АвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	//{ds-04.11.2020
	ds_Остатки.Очистить();

	Номенклатура = Элемент.ТекущаяСтрока;
	Если Номенклатура <> Неопределено Тогда 
		ds_ПолучитьОстатки(Номенклатура);
		ds_Изображение = ds_ОбщегоНазначенияВызовСервера.ПолучитьИзображение(Номенклатура, УникальныйИдентификатор);
	КонецЕсли;
	//}
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
    
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		     Истина, "Справочник.Номенклатура.Форма.ФормаЭлемента.СозданиеНового");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ОбработчикиКомандПодключаемогоОборудования

&НаКлиенте
Процедура ПоискПоМагнитномуКоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиМагнитныйКод(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

// Процедура - обработчик команды "ИзменитьВыделенные".
//
&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
	
КонецПроцедуры

// ЭлектронноеВзаимодействие.РаботаСНоменклатурой

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуРаботаСНоменклатурой(Команда)
	
	РаботаСНоменклатуройКлиент.ВыполнитьПодключаемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыборРаботаСНоменклатурой(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиент.ВыборВТаблицеФормы(ЭтотОбъект, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ПолнотекстовыйПоискНаСервереБезКонтекста(СтрокаПоиска, РезультатПоиска)
	
	ОписаниеОшибки = "";
	РезультатПоиска = Обработки.ПодборТоваров.ПоискТоваров(СтрокаПоиска, ОписаниеОшибки);
	
	Если НЕ ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		
		Возврат Ложь;
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПоискПоПодстрокеНаКлиенте()
	
	Использование = ЗначениеЗаполнено(СтрокаПоиска); 	
	
	ГруппаОтбора = ОтборыСписковКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Список.Отбор.Элементы,
		"ПоискПоПодстроке",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
		ГруппаОтбора,
		"Наименование",
		СтрокаПоиска,
		Использование, ВидСравненияКомпоновкиДанных.Содержит);
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
		ГруппаОтбора,
		"Код",
		СтрокаПоиска,
		Использование, ВидСравненияКомпоновкиДанных.Содержит);
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
		ГруппаОтбора,
		"НаименованиеПолное",
		СтрокаПоиска,
		Использование, ВидСравненияКомпоновкиДанных.Содержит);
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
		ГруппаОтбора,
		"Артикул",
		СтрокаПоиска,
		Использование, ВидСравненияКомпоновкиДанных.Содержит);
			
	СпискиВыбораКлиент.ОбновитьСписокВыбора(Элементы.СтрокаПоиска.СписокВыбора, СтрокаПоиска);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьИндексПолнотекстовогоПоиска()
	
	УстановитьПривилегированныйРежим(Истина);
	ПолнотекстовыйПоиск.ОбновитьИндекс();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеИндексаПолнотекстовогоПоискаДанных()
	
	Состояние(НСтр("ru = 'Идет обновление индекса полнотекстового поиска ...'"));
	ОбновитьИндексПолнотекстовогоПоиска();
	Состояние(НСтр("ru = 'Обновление индекса полнотекстового поиска завершено...'")); 
	
	ИндексПолнотекстовогоПоискаАктуален = Истина;
	ПолнотекстовыйПоискНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПолнотекстовыйПоискНаКлиенте()
	
	Если Не ИндексПолнотекстовогоПоискаАктуален 
		И ИнформационнаяБазаФайловая Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросВыполнитьПолнотекстовыйПоискНаКлиенте", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, 
			НСтр("ru='Индекс полнотекстового поиска неактуален. Обновить индекс?'"),
			РежимДиалогаВопрос.ДаНет); 
		
	Иначе
		
		ПолнотекстовыйПоискНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросВыполнитьПолнотекстовыйПоискНаКлиенте(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбновлениеИндексаПолнотекстовогоПоискаДанных",0.2,Истина);

КонецПроцедуры

&НаКлиенте
Процедура ВопросОбработатьДанныеПоКодуКлиент(Результат, СозданиеНовогоШтрихКода) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СозданиеНовогоШтрихКода", СозданиеНовогоШтрихКода);
		Если ЗначениеЗаполнено(Элементы.Список.ТекущийРодитель) Тогда
			ПараметрыФормы.Вставить("ЗначенияЗаполнения", Новый Структура("Родитель", Элементы.Список.ТекущийРодитель));
		КонецЕсли;
		ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаЭлемента", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолнотекстовыйПоискНаКлиенте()
		
	ГруппаОтбора = ОтборыСписковКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Список.Отбор.Элементы,
		"ПоискПоПодстроке",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		
	Если НЕ ЗначениеЗаполнено(СокрЛП(СтрокаПоиска)) Тогда
		
		ПоискНеУдачный = Ложь;
		
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
			ГруппаОтбора,
			"Ссылка",
			Неопределено,
			Ложь, ВидСравненияКомпоновкиДанных.ВСписке);
						
	Иначе
		
		РезультатПоиска = Неопределено;
		ПоискНеУдачный = ПолнотекстовыйПоискНаСервереБезКонтекста(СтрокаПоиска, РезультатПоиска);
		
		Если Не ПоискНеУдачный Тогда
			
			Использование = РезультатПоиска.Номенклатура.Количество() > 0;
			
			ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
				ГруппаОтбора,
				"Ссылка",
				?(Использование, РезультатПоиска.Номенклатура, Неопределено),
				Использование, ВидСравненияКомпоновкиДанных.ВСписке);
						
			СпискиВыбораКлиент.ОбновитьСписокВыбора(Элементы.СтрокаПоиска.СписокВыбора, СтрокаПоиска);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьПоиск()
	
	Если ИспользоватьПолнотекстовыйПоиск Тогда
		
		ВыполнитьПолнотекстовыйПоискНаКлиенте();
		
	Иначе
		
		ПоискПоПодстрокеНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

// Конец МеханизмВнешнегоОборудования

&НаСервере
Процедура УстановитьДополнительныеКолонкиНоменклатуры()

	Элементы.Код.Видимость = ДополнительныеКолонкиНоменклатуры = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код 
							ИЛИ ДополнительныеКолонкиНоменклатуры = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.КодАртикул;
	Элементы.Артикул.Видимость = ДополнительныеКолонкиНоменклатуры = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул
							ИЛИ ДополнительныеКолонкиНоменклатуры = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.КодАртикул;

КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ds

//{ds-04.11.2020
&НаКлиенте
Процедура ds_ОстаткиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Номенклатура = Элементы.Список.ТекущаяСтрока;
	СтрокаОстатка = Элемент.ТекущиеДанные;
	
	Если Номенклатура <> Неопределено И СтрокаОстатка <> Неопределено Тогда 
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура", Номенклатура);
		Отбор.Вставить("Магазин", СтрокаОстатка.Магазин);
		
		Если Элементы.ds_Остатки.ТекущийЭлемент.Имя = "ds_ОстаткиЦенаБазовая" Тогда
			Отбор.Вставить("ВидЦены", ВидыЦенМагазина(СтрокаОстатка.Магазин).БазовыйВидЦены);
			ОткрываемаяФорма = "РегистрСведений.ЦеныНоменклатуры.ФормаСписка";
		ИначеЕсли Элементы.ds_Остатки.ТекущийЭлемент.Имя = "ds_ОстаткиЦенаВМагазине" Тогда
			Отбор.Вставить("ВидЦены", ВидыЦенМагазина(СтрокаОстатка.Магазин).РозничныйВидЦены);
			ОткрываемаяФорма = "РегистрСведений.ЦеныНоменклатуры.ФормаСписка";
		ИначеЕсли Элементы.ds_Остатки.ТекущийЭлемент.Имя = "ds_ОстаткиКоличество" Тогда
			Отбор.Вставить("ВидДвижения", ВидДвиженияНакопления.Приход);
			Отбор.Вставить("Склад", СкладПоступления(СтрокаОстатка.Магазин));
			
			АналитикиХозяйственнойОперации = Новый Массив;
			АналитикиХозяйственнойОперации.Добавить(ПредопределенноеЗначение("Справочник.АналитикаХозяйственныхОпераций.ПоступлениеТоваров"));
			АналитикиХозяйственнойОперации.Добавить(ПредопределенноеЗначение("Справочник.АналитикаХозяйственныхОпераций.ПеремещениеТоваров"));
			Отбор.Вставить("АналитикаХозяйственнойОперации", АналитикиХозяйственнойОперации);	
					
			ОткрываемаяФорма = "РегистрНакопления.ТоварыНаСкладах.ФормаСписка";
		ИначеЕсли Элементы.ds_Остатки.ТекущийЭлемент.Имя = "ds_ОстаткиЦенаЗакупки" Тогда
			ОткрываемаяФорма = "РегистрНакопления.СебестоимостьПоставкиТоваров.ФормаСписка"
		ИначеЕсли Элементы.ds_Остатки.ТекущийЭлемент.Имя = "ds_ОстаткиКатегория" Тогда
			ОткрываемаяФорма = "РегистрСведений.ds_КатегорииНоменклатурыПлан.ФормаСписка"
		Иначе
			Возврат;
		КонецЕсли;	
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Отбор", Отбор);
		
		ОткрытьФорму(ОткрываемаяФорма, ДополнительныеПараметры);
	КонецЕсли;	
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция СкладПоступления(Магазин)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Магазины.СкладПоступления
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|ГДЕ
	|	Магазины.Ссылка = &Магазин";
	Запрос.УстановитьПараметр("Магазин", Магазин);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.СкладПоступления;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВидыЦенМагазина(Магазин)
	
	Результат = Новый Структура("РозничныйВидЦены, БазовыйВидЦены");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыЦенВлияющиеВидыЦен.Ссылка КАК РозничныйВидЦены,
	|	ВидыЦенВлияющиеВидыЦен.ВлияющийВидЦен КАК БазовыйВидЦены
	|ИЗ
	|	Справочник.ВидыЦен.ВлияющиеВидыЦен КАК ВидыЦенВлияющиеВидыЦен
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Магазины КАК Магазины
	|		ПО ВидыЦенВлияющиеВидыЦен.Ссылка = Магазины.ПравилоЦенообразования.ВидЦен
	|ГДЕ
	|	Магазины.Ссылка = &Магазин";
	Запрос.УстановитьПараметр("Магазин", Магазин);
	Цены = Запрос.Выполнить().Выгрузить();
	
	Если Цены.Количество() Тогда 
		Результат.Вставить("РозничныйВидЦены", Цены[0].РозничныйВидЦены);
		Результат.Вставить("БазовыйВидЦены", Цены[0].БазовыйВидЦены);
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции	

&НаСервере
Процедура ds_ПолучитьОстатки(Номенклатура)
	
	УстановитьПривилегированныйРежим(Истина);
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Товары.Ссылка КАК Номенклатура,
	|	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) КАК Количество,
	|	Товары.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	Магазины.Ссылка КАК Магазин,
	|	ВлияющиеВидыЦен.ВлияющийВидЦен КАК ВлияющийВидЦен,
	|	ЕСТЬNULL(ЦеныМагазина.Цена, 0) КАК ЦенаВМагазине,
	|	ЕСТЬNULL(ЦеныМагазина.ds_КатегорияНоменклатуры.Сокращение, """") КАК Категория,
	|	ПравилаЦенообразования.ВидЦен КАК ВидЦен
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	Справочник.Номенклатура КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Магазины КАК Магазины
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(, Номенклатура = &Номенклатура) КАК
	|			ТоварыНаСкладахОстатки
	|		ПО (Магазины.СкладПоступления = ТоварыНаСкладахОстатки.Склад)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаЦенообразования КАК ПравилаЦенообразования
	|		ПО (Магазины.ПравилоЦенообразования = ПравилаЦенообразования.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЦен.ВлияющиеВидыЦен КАК ВлияющиеВидыЦен
	|		ПО (ПравилаЦенообразования.ВидЦен = ВлияющиеВидыЦен.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура = &Номенклатура) КАК ЦеныМагазина
	|		ПО (Магазины.ПравилоЦенообразования.ВидЦен = ЦеныМагазина.ВидЦены)
	|ГДЕ
	|	Товары.Ссылка = &Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА СебестоимостьПоставкиТоваров.Количество > 0
	|			ТОГДА СебестоимостьПоставкиТоваров.Сумма / СебестоимостьПоставкиТоваров.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Цена,
	|	СебестоимостьПоставкиТоваров.Магазин КАК Магазин,
	|	СебестоимостьПоставкиТоваров.Период КАК Период
	|ПОМЕСТИТЬ ЦеныЗакупки
	|ИЗ
	|	Остатки КАК Остатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СебестоимостьПоставкиТоваров КАК СебестоимостьПоставкиТоваров
	|		ПО Остатки.Номенклатура = СебестоимостьПоставкиТоваров.Номенклатура
	|		и Остатки.Магазин = СебестоимостьПоставкиТоваров.Магазин
	|ГДЕ
	|	СебестоимостьПоставкиТоваров.Активность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЦеныЗакупки.Магазин,
	|	МАКСИМУМ(ЦеныЗакупки.Цена) КАК Цена
	|ПОМЕСТИТЬ ПоследниеЦеныЗакупки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЦеныЗакупки.Магазин КАК Магазин,
	|		МАКСИМУМ(ЦеныЗакупки.Период) КАК Период
	|	ИЗ
	|		ЦеныЗакупки КАК ЦеныЗакупки
	|	СГРУППИРОВАТЬ ПО
	|		ЦеныЗакупки.Магазин) КАК ВложенныйЗапрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЦеныЗакупки КАК ЦеныЗакупки
	|		ПО ВложенныйЗапрос.Период = ЦеныЗакупки.Период
	|		и ВложенныйЗапрос.Магазин = ЦеныЗакупки.Магазин
	|СГРУППИРОВАТЬ ПО
	|	ЦеныЗакупки.Магазин
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Остатки.Количество КАК Количество,
	|	Остатки.Магазин КАК Магазин,
	|	Остатки.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	Остатки.ЦенаВМагазине КАК ЦенаВМагазине,
	|	Остатки.Категория КАК Категория,
	|	Остатки.ВлияющийВидЦен.Идентификатор КАК ВидЦенИдентификатор,
	|	ЕСТЬNULL(ВлияющиеЦены.Цена, 0) КАК Цена,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПоследниеЦеныЗакупки.Цена, 0) = 0
	|			ТОГДА ЕСТЬNULL(СебестоимостьНоменклатурыСрезПоследних.Цена, 0)
	|		ИНАЧЕ ЕСТЬNULL(ПоследниеЦеныЗакупки.Цена, 0)
	|	КОНЕЦ КАК ЦенаЗакупки,
	|	ВидыЦен.ЦеновыеГруппы.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		ЦеноваяГруппа КАК ЦеноваяГруппа,
	|		АлгоритмРасчетаЦены КАК АлгоритмРасчетаЦены) КАК ЦеновыеГруппы,
	|	ВидыЦен.ПравилаОкругленияЦены.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		НижняяГраницаДиапазонаЦен КАК НижняяГраницаДиапазонаЦен,
	|		ТочностьОкругления КАК ТочностьОкругления,
	|		ПсихологическоеОкругление КАК ПсихологическоеОкругление) КАК ПравилаОкругленияЦены,
	|	ВидыЦен.АлгоритмРасчетаЦены КАК АлгоритмРасчетаЦены,
	|	ВидыЦен.ОкруглятьВБольшуюСторону КАК ОкруглятьВБольшуюСторону,
	|	ЕСТЬNULL(НаценкаРодитель1.Наценка, ЕСТЬNULL(НаценкаРодитель2.Наценка, ЕСТЬNULL(НаценкаРодитель3.Наценка, 0))) КАК
	|		Наценка
	|ИЗ
	|	Остатки КАК Остатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЦен КАК ВидыЦен
	|		ПО Остатки.ВидЦен = ВидыЦен.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ВидЦены В
	|			(ВЫБРАТЬ
	|				Остатки.ВлияющийВидЦен
	|			ИЗ
	|				Остатки)
	|		И Номенклатура = &Номенклатура) КАК ВлияющиеЦены
	|		ПО Остатки.ВлияющийВидЦен = ВлияющиеЦены.ВидЦены
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ds_НаценкиНоменклатуры КАК НаценкаРодитель1
	|		ПО Остатки.Номенклатура.Родитель = НаценкаРодитель1.Номенклатура
	|		И Остатки.Магазин = НаценкаРодитель1.Магазин
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ds_НаценкиНоменклатуры КАК НаценкаРодитель2
	|		ПО Остатки.Номенклатура.Родитель.Родитель = НаценкаРодитель2.Номенклатура
	|		И Остатки.Магазин = НаценкаРодитель2.Магазин
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ds_НаценкиНоменклатуры КАК НаценкаРодитель3
	|		ПО Остатки.Номенклатура.Родитель.Родитель.Родитель = НаценкаРодитель3.Номенклатура
	|		И Остатки.Магазин = НаценкаРодитель3.Магазин
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоследниеЦеныЗакупки КАК ПоследниеЦеныЗакупки
	|		ПО Остатки.Магазин = ПоследниеЦеныЗакупки.Магазин
	|		И &ДоступнаСебестоимость
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СебестоимостьНоменклатуры.СрезПоследних(, Номенклатура = &Номенклатура) КАК
	|			СебестоимостьНоменклатурыСрезПоследних
	|		ПО Остатки.Магазин = СебестоимостьНоменклатурыСрезПоследних.Магазин
	|		И &ДоступнаСебестоимость
	|ГДЕ
	|	Остатки.Количество <> 0
	|	ИЛИ Остатки.ЦенаВМагазине > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Магазин
	|ИТОГИ
	|ПО
	|	Магазин,
	|	ВидыЦен.Ссылка";
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ДоступнаСебестоимость", ds_ОбщегоНазначенияВызовСервера.РольДоступнаТекущемуПользователю("ЧтениеСебестоимостиТоваров"));	
		
	ВыборкаМагазин = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаМагазин.Следующий() Цикл
		ВыборкаВидЦены = ВыборкаМагазин.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаВидЦены.Следующий() Цикл 
			НовСтр = ds_Остатки.Добавить();
			НовСтр.Магазин = ВыборкаВидЦены.Магазин;
			
			Выборка = ВыборкаВидЦены.Выбрать();
			Выборка.Следующий();
			
			ЦеновыеГруппы = Выборка.ЦеновыеГруппы.Выгрузить();
			ПравилаОкругленияЦены = Выборка.ПравилаОкругленияЦены.Выгрузить();
			ПравилаОкругленияЦены.Сортировать("НомерСтроки");
			
			СтруктураЦеноваяГруппа = Новый Структура("ЦеноваяГруппа", Выборка.ЦеноваяГруппа);
					
			ЦеновыеГруппыАлгоритмов = ЦеновыеГруппы.НайтиСтроки(СтруктураЦеноваяГруппа);
			Если ЦеновыеГруппыАлгоритмов.Количество() > 0 Тогда
				АлгоритмРасчетаЦены = ЦеновыеГруппыАлгоритмов[0].АлгоритмРасчетаЦены;
			Иначе
				АлгоритмРасчетаЦены = ВыборкаВидЦены.АлгоритмРасчетаЦены;
			КонецЕсли;	
			
			Выборка.Сбросить();			
			ПерваяСтрока = Истина;
			Выборка = ВыборкаВидЦены.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если ПерваяСтрока Тогда 
					ЗаполнитьЗначенияСвойств(НовСтр, Выборка);
					ПерваяСтрока = Ложь;
				КонецЕсли;	
				
				СтрокаЗамены = Формат(Выборка.Цена * (1 + Выборка.Наценка / 100), "ЧРД=.; ЧН=0; ЧГ=");
				СтрокаПоиска = "[" + Выборка.ВидЦенИдентификатор + "]";
				АлгоритмРасчетаЦены = СтрЗаменить(АлгоритмРасчетаЦены, СтрокаПоиска, СтрокаЗамены);
			КонецЦикла;	
			
			Если ЗначениеЗаполнено(АлгоритмРасчетаЦены) Тогда
				Попытка
					УстановитьБезопасныйРежим(Истина);
					НовСтр.ЦенаБазовая = ds_ОбщегоНазначенияВызовСервера.ОкруглитьЦену(ОбщегоНазначения.ВычислитьВБезопасномРежиме(АлгоритмРасчетаЦены, ВыборкаВидЦены), ПравилаОкругленияЦены, ВыборкаВидЦены.ОкруглятьВБольшуюСторону);
				Исключение
					ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры	

&НаКлиенте
Процедура ds_ШтрихкодПриИзменении(Элемент)
	
	ds_ШтрихкодПриИзмененииНаСервере();
	
	Если Не ПустаяСтрока(ds_Штрихкод) Тогда
		Элементы.Список.Отображение = ОтображениеТаблицы.Список;
	Иначе
		Элементы.Список.Отображение = ОтображениеТаблицы.ИерархическийСписок;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ds_ШтрихкодПриИзмененииНаСервере()

	Если Не ПустаяСтрока(ds_Штрихкод) Тогда 
		СписокНоменклатуры = ds_ОбщегоНазначенияВызовСервера.НайтиПоШтрихкоду(ds_Штрихкод);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, "Ссылка", СписокНоменклатуры, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, "Ссылка", Неопределено, ВидСравненияКомпоновкиДанных.ВСписке,, Ложь);
	КонецЕсли;	
	
КонецПроцедуры
//}

#КонецОбласти
