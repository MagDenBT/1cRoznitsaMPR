///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область ПрикладныеОперацииОплаты

// Производит поиск идентификатора заказа на оплату или возврата,
// если идентификатор еще не был создан, создает новый.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииБИП - документ отражающий оплату
//    в информационной базе;
//  ТорговаяТочка - Строка - идентификатор торговой точки в которой производится оплата;
//  НастройкаИнтеграции - СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами - настройка интеграции с платежной системой;
//  ИдентификаторОплаты - Строка - идентификатор оплаты в Системе быстрых платежей. Передается
//    если известен на момент проведения операции;
//  КонтролироватьСтатусОперации - Булево - признак контроля потребности в генерации нового
//    идентификатора оплаты;
//  ОтложенноеПолучениеСтатуса - Булево - признак загрузки статуса оплаты регламентным заданием.
//
// Возвращаемое значение:
//  Строка - идентификатор оплаты (внешний идентификатор 1С по отношению к платежной системе).
//
Функция НовыйИдентификаторОперации(
		ДокументОперации,
		ТорговаяТочка,
		НастройкаИнтеграции,
		ИдентификаторОплаты = "",
		КонтролироватьСтатусОперации = Истина,
		ОтложенноеПолучениеСтатуса = Ложь) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИдентификаторыОперацийСБП");
		ЭлементБлокировки.УстановитьЗначение("ДокументОперации", ДокументОперации);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Запись = РегистрыСведений.ИдентификаторыОперацийСБП.СоздатьМенеджерЗаписи();
		Запись.ДокументОперации = ДокументОперации;
		Запись.Прочитать();
		
		Если Не КонтролироватьСтатусОперации
			Или ТребуетсяГенерацияНовогоИдентификатора(Запись.Идентификатор, Запись.СтатусОперации) Тогда
			Запись.Идентификатор = Новый УникальныйИдентификатор;
			Запись.ДокументОперации = ДокументОперации;
			Запись.ТорговаяТочка = ТорговаяТочка;
			Запись.НастройкаИнтеграции = НастройкаИнтеграции;
			Запись.ИдентификаторОплаты = ИдентификаторОплаты;
			Запись.ИдентификаторСессии = "";
			Запись.ИдентификаторПлатежнойСистемы = "";
			Запись.СтатусОперации = "";
			Запись.QRКод = "";
			Запись.ОтложенноеПолучениеСтатуса = Ложь;
			Запись.КоличествоПопыток = 0;
			Запись.ДатаОперации = Неопределено;
			Запись.ОтложенноеПолучениеСтатуса = ОтложенноеПолучениеСтатуса;
			Запись.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При формировании идентификатора оплаты возникли ошибки:
				|%1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			ТекстИсключения,
			Истина);
		
		ВызватьИсключение ТекстИсключения;
	КонецПопытки;
	
	Возврат Запись.Идентификатор;
	
КонецФункции

// Производит поиск идентификатора заказа на оплату или возврата платежной системе.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииБИП - документ отражающий операцию
//   в информационной базе;
//
// Возвращаемое значение:
//   Строка - идентификатор оплаты в платежной системе.
//
Функция ИдентификаторОперации(ДокументОперации) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИдентификаторыОперацийСБП.Идентификатор КАК Идентификатор
		|ИЗ
		|	РегистрСведений.ИдентификаторыОперацийСБП КАК ИдентификаторыОперацийСБП
		|ГДЕ
		|	ИдентификаторыОперацийСБП.ДокументОперации = &ДокументОперации";
	
	Запрос.УстановитьПараметр("ДокументОперации", ДокументОперации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Идентификатор;
	КонецЕсли;
	
КонецФункции

// Производит поиск QR-кода операции в Системе быстрых платежей.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииБИП - документ отражающий операцию
//   в информационной базе;
//
// Возвращаемое значение:
//   Строка - QR-код в Системе быстрых платежей.
//
Функция QRКодОперацииСБП(ДокументОперации) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИдентификаторыОперацийСБП.QRКод КАК QRКод
		|ИЗ
		|	РегистрСведений.ИдентификаторыОперацийСБП КАК ИдентификаторыОперацийСБП
		|ГДЕ
		|	ИдентификаторыОперацийСБП.ДокументОперации = &ДокументОперации";
	
	Запрос.УстановитьПараметр("ДокументОперации", ДокументОперации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.QRКод;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Производит поиск идентификатора заказа на оплату или заказа на возврат в Системе быстрых платежей.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииБИП - документ отражающий операцию
//  в информационной базе;
//
// Возвращаемое значение:
//   Структура - идентификаторы оплаты в Системе быстрых платежей.
//
Функция ИдентификаторыОперацииСБП(ДокументОперации) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИдентификаторыОперацийСБП.ИдентификаторОплаты КАК ИдентификаторОплаты,
		|	ИдентификаторыОперацийСБП.ИдентификаторПлатежнойСистемы КАК ИдентификаторПлатежнойСистемы
		|ИЗ
		|	РегистрСведений.ИдентификаторыОперацийСБП КАК ИдентификаторыОперацийСБП
		|ГДЕ
		|	ИдентификаторыОперацийСБП.ДокументОперации = &ДокументОперации";
	
	Запрос.УстановитьПараметр("ДокументОперации", ДокументОперации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат НовыйИдентификаторыОперацииСБП(
			ВыборкаДетальныеЗаписи.ИдентификаторОплаты,
			ВыборкаДетальныеЗаписи.ИдентификаторПлатежнойСистемы);
	КонецЕсли;
	
КонецФункции

// Производит поиск идентификатора сессии возврата.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииБИП - документ отражающий оплату
//    в информационной базе;
//
// Возвращаемое значение:
//   Строка - идентификаторы сессии платежной системы.
//
Функция ИдентификаторСессии(ДокументОперации) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИдентификаторыОперацийСБП.ИдентификаторСессии КАК ИдентификаторСессии
		|ИЗ
		|	РегистрСведений.ИдентификаторыОперацийСБП КАК ИдентификаторыОперацийСБП
		|ГДЕ
		|	ИдентификаторыОперацийСБП.ДокументОперации = &ДокументОперации";
	
	Запрос.УстановитьПараметр("ДокументОперации", ДокументОперации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.ИдентификаторСессии;
	КонецЕсли;
	
КонецФункции

// Получает данные для определения статуса выполнения операции в платежной системе.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииБИП - документ отражающий оплату
//    в информационной базе;
//  ПериодИспользования - Дата - срок действия QR-кода.
//
// Возвращаемое значение:
//  Структура - идентификаторы оплаты в Системе быстрых платежей.
//
Функция ПараметрыОпределенияСтатусаОперации(ДокументОперации) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИдентификаторыОперацийСБП.ИдентификаторОплаты КАК ИдентификаторОплаты,
		|	ИдентификаторыОперацийСБП.ИдентификаторПлатежнойСистемы КАК ИдентификаторПлатежнойСистемы,
		|	ИдентификаторыОперацийСБП.ДатаЗапросаСтатуса КАК ДатаЗапросаСтатуса,
		|	ИдентификаторыОперацийСБП.СтатусОперации КАК СтатусОперации,
		|	ИдентификаторыОперацийСБП.ПериодИспользования КАК ПериодИспользования
		|ИЗ
		|	РегистрСведений.ИдентификаторыОперацийСБП КАК ИдентификаторыОперацийСБП
		|ГДЕ
		|	ИдентификаторыОперацийСБП.ДокументОперации = &ДокументОперации";
	
	Запрос.УстановитьПараметр("ДокументОперации", ДокументОперации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Результат = Новый Структура;
		Результат.Вставить("ИдентификаторОплаты",           ВыборкаДетальныеЗаписи.ИдентификаторОплаты);
		Результат.Вставить("ИдентификаторПлатежнойСистемы", ВыборкаДетальныеЗаписи.ИдентификаторПлатежнойСистемы);
		Результат.Вставить("ДатаЗапросаСтатуса",            ВыборкаДетальныеЗаписи.ДатаЗапросаСтатуса);
		Результат.Вставить("СтатусОперации",                ВыборкаДетальныеЗаписи.СтатусОперации);
		Результат.Вставить("ПериодИспользования",           ВыборкаДетальныеЗаписи.ПериодИспользования);
		
		// Если не было успешного получения статуса, необходимо
		// запрашивать наличие callback.
		Если Не ЗначениеЗаполнено(Результат.ДатаЗапросаСтатуса) Тогда
			Результат.ДатаЗапросаСтатуса = ТекущаяДатаСеанса();
		КонецЕсли;
		
		Возврат Результат;
		
	КонецЕсли;
	
КонецФункции

// См. ИнтеграцияСПлатежнымиСистемами.ИнформацияДляТехническойПоддержки.
//
Функция ИнформацияДляТехническойПоддержки(ДокументОперации, ПараметрыИнтеграции) Экспорт
	
	ДанныеОперации = НСтр("ru = 'Данные выполнения операции в платежной системе:'")
		+ Символы.ПС;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИдентификаторыОперацийСБП.Идентификатор КАК Идентификатор,
		|	ИдентификаторыОперацийСБП.ИдентификаторОплаты КАК ИдентификаторОплаты,
		|	ИдентификаторыОперацийСБП.ИдентификаторПлатежнойСистемы КАК ИдентификаторПлатежнойСистемы,
		|	ИдентификаторыОперацийСБП.ДатаОперации КАК ДатаОперации,
		|	ИдентификаторыОперацийСБП.ДатаЗапросаСтатуса КАК ДатаЗапросаСтатуса,
		|	ИдентификаторыОперацийСБП.СтатусОперации КАК СтатусОперации
		|ИЗ
		|	РегистрСведений.ИдентификаторыОперацийСБП КАК ИдентификаторыОперацийСБП
		|ГДЕ
		|	ИдентификаторыОперацийСБП.ДокументОперации = &ДокументОперации";
	
	Запрос.УстановитьПараметр("ДокументОперации", ДокументОперации);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ДанныеОперации = ДанныеОперации
			+ НСтр("ru = 'информация о выполнении не обнаружена в базе данных'");
		Возврат ДанныеОперации;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	ДанныеОперации = ДанныеОперации
		+ НСтр("ru = 'Платежная система:'")
		+ " "
		+ ИнтеграцияСПлатежнымиСистемамиСлужебный.ИдентификаторСБП()
		+ Символы.ПС;
	ДанныеОперации = ДанныеОперации
		+ НСтр("ru = 'Агент платежной системы:'")
		+ " "
		+ ИнтеграцияСПлатежнымиСистемамиСлужебный.СинонимЗначенияПеречисления(
			ПараметрыИнтеграции.ПлатежнаяСистема)
		+ Символы.ПС;
	ДанныеОперации = ДанныеОперации
		+ НСтр("ru = 'Идентификатор:'")
		+ ИнтеграцияСПлатежнымиСистемамиСлужебный.ОбработатьЗначениеДляТехническойПоддержки(
			ВыборкаДетальныеЗаписи.Идентификатор)
		+ Символы.ПС;
	ДанныеОперации = ДанныеОперации
		+ НСтр("ru = 'Идентификатор оплаты:'")
		+ ИнтеграцияСПлатежнымиСистемамиСлужебный.ОбработатьЗначениеДляТехническойПоддержки(
			ВыборкаДетальныеЗаписи.ИдентификаторОплаты)
		+ Символы.ПС;
	ДанныеОперации = ДанныеОперации
		+ НСтр("ru = 'Идентификатор платежной системы:'")
		+ ИнтеграцияСПлатежнымиСистемамиСлужебный.ОбработатьЗначениеДляТехническойПоддержки(
			ВыборкаДетальныеЗаписи.ИдентификаторПлатежнойСистемы)
		+ Символы.ПС;
	ДанныеОперации = ДанныеОперации
		+ НСтр("ru = 'Дата операции:'")
		+ ИнтеграцияСПлатежнымиСистемамиСлужебный.ОбработатьЗначениеДляТехническойПоддержки(
			ВыборкаДетальныеЗаписи.ДатаОперации)
		+ Символы.ПС;
	ДанныеОперации = ДанныеОперации
		+ НСтр("ru = 'Дата запроса статуса:'")
		+ ИнтеграцияСПлатежнымиСистемамиСлужебный.ОбработатьЗначениеДляТехническойПоддержки(
			ВыборкаДетальныеЗаписи.ДатаЗапросаСтатуса)
		+ Символы.ПС;
	ДанныеОперации = ДанныеОперации
		+ НСтр("ru = 'Статус операции:'")
		+ ИнтеграцияСПлатежнымиСистемамиСлужебный.ОбработатьЗначениеДляТехническойПоддержки(
			ВыборкаДетальныеЗаписи.СтатусОперации)
		+ Символы.ПС;
	
	Возврат ДанныеОперации;
	
КонецФункции

// Выполняет поиск и информации об оплате в регистре и устанавливает новое значение
// идентификатора Системы быстрых платежей и периода действия.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииБИП - документ отражающий оплату
//    в информационной базе;
//  ИдентификаторОплаты - Строка - идентификатор оплаты в Системе быстрых платежей;
//  ПериодИспользования - Дата - срок действия QR-кода;
//    * QRКод - Строка - идентификатор, по которому выполняется оплата;
//  СтатусОперации - Строка - текущий статус операции.
//
Процедура ЗаписатьДанныеОплатыСБП(
		ДокументОперации,
		ИдентификаторОплаты,
		ПериодИспользования,
		QRКод,
		СтатусОперации) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИдентификаторыОперацийСБП");
		ЭлементБлокировки.УстановитьЗначение("ДокументОперации", ДокументОперации);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Запись = РегистрыСведений.ИдентификаторыОперацийСБП.СоздатьМенеджерЗаписи();
		Запись.ДокументОперации = ДокументОперации;
		Запись.Прочитать();
		
		Если Не ЗначениеЗаполнено(Запись.ДокументОперации) Тогда
			ВызватьИсключение НСтр("ru = 'Информация о документе оплаты не обнаружена, не возможно записать идентификатор СБП.'");
		КонецЕсли;
		
		Запись.ИдентификаторОплаты = СтрЗаменить(ИдентификаторОплаты, Символы.НПП, "");
		Запись.СтатусОперации = СтатусОперации;
		Запись.QRКод = QRКод;
		
		// Период использования должен фиксироваться только при первом
		// запросе QR-кода.
		Если Не ЗначениеЗаполнено(Запись.ПериодИспользования) Тогда
			Запись.ПериодИспользования = ПериодИспользования;
		КонецЕсли;
		Запись.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При записи идентификатора СБП возникли ошибки:
				|%1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			ТекстИсключения,
			Истина);
		
		ВызватьИсключение ТекстИсключения;
	КонецПопытки;
	
КонецПроцедуры

// Выполняет поиск и информации об оплате в регистре и устанавливает новое значение
// идентификатора платежной системы, статуса операции, даты операции и даты определения статуса.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииБИП - документ отражающий оплату
//    в информационной базе;
//  ИдентификаторПлатежнойСистемы - Строка - идентификатор оплаты в платежной системе;
//  ДатаОперации - Дата - дата операции в платежной системе;
//  СтатусОперации - Строка - статус операции в платежной системе;
//  ИдентификаторСессии - Строка - идентификатор сессии операции;
//  ДатаЗапросаСтатуса - Дата - дата последней операции получения статуса.
//
Процедура ЗаписатьСтатусОперации(
		ДокументОперации,
		ИдентификаторПлатежнойСистемы,
		ДатаОперации,
		СтатусОперации,
		ИдентификаторСессии = "",
		ДатаЗапросаСтатуса = Неопределено) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИдентификаторыОперацийСБП");
		ЭлементБлокировки.УстановитьЗначение("ДокументОперации", ДокументОперации);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Запись = РегистрыСведений.ИдентификаторыОперацийСБП.СоздатьМенеджерЗаписи();
		Запись.ДокументОперации = ДокументОперации;
		Запись.Прочитать();
		
		Если Не ЗначениеЗаполнено(Запись.ДокументОперации) Тогда
			ВызватьИсключение НСтр("ru = 'Информация о документе оплаты не обнаружена, не возможно записать данные платежной системы.'");
		КонецЕсли;
		
		Запись.ИдентификаторПлатежнойСистемы = ИдентификаторПлатежнойСистемы;
		Запись.ДатаОперации = ДатаОперации;
		Запись.СтатусОперации = СтатусОперации;
		Запись.ИдентификаторСессии = ИдентификаторСессии;
		Запись.КоличествоПопыток = Запись.КоличествоПопыток + 1;
		Если ЗначениеЗаполнено(ДатаЗапросаСтатуса) Тогда
			Запись.ДатаЗапросаСтатуса = ДатаЗапросаСтатуса;
		КонецЕсли;
		
		Если Запись.КоличествоПопыток > МаксимальноеКоличествоПопытокЗапросаСтатуса() Тогда
			Запись.ОтложенноеПолучениеСтатуса = Ложь;
		КонецЕсли;
		
		Запись.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При записи данных платежной системы возникли ошибки:
				|%1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			ТекстИсключения,
			Истина);
		
		ВызватьИсключение ТекстИсключения;
	КонецПопытки;
	
КонецПроцедуры

// Выполняет установку признака загрузки статуса регламентным заданием, если
// ранее под документу была сгенерирован идентификатор оплаты СБП .
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииБИП - документ, который отражает
//    продажу в информационной базе;
//  Значение - Булево - если Истина, данные статуса будут загружены регламентным заданием.
//
// Возвращаемое значение:
//  Булево - Истина, если признак отложенной загрузки статуса установлен,
//   Ложь если операция не найдена.
//
Функция УстановитьОтложенноеПолучениеСтатуса(ДокументОперации, Значение) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИдентификаторыОперацийСБП");
		ЭлементБлокировки.УстановитьЗначение("ДокументОперации", ДокументОперации);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Запись = РегистрыСведений.ИдентификаторыОперацийСБП.СоздатьМенеджерЗаписи();
		Запись.ДокументОперации = ДокументОперации;
		Запись.Прочитать();
		
		// Если записи нет, обновление данных не имеет смысла.
		Если Не ЗначениеЗаполнено(Запись.ИдентификаторОплаты) Тогда
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецЕсли;
		
		// Включать отложенную загрузку имеет смысл только для операций,
		// которые не находятся в терминальном состоянии.
		Если Значение И Запись.СтатусОперации <> СервисИнтеграцииССБП.ИдентификаторСтатусаВПроцессе() Тогда
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецЕсли;
		
		Запись.ОтложенноеПолучениеСтатуса = Значение;
		Если Запись.ОтложенноеПолучениеСтатуса Тогда
			Запись.КоличествоПопыток = 0;
		КонецЕсли;
		
		Запись.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При записи идентификатора СБП возникли ошибки:
				|%1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			ТекстИсключения,
			Истина);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Увеличивает значение количества попыток запроса статуса.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииБИП - документ, который отражает
//    операцию в информационной базе;
//
Процедура УвеличитьКоличествоПопытокЗапросаСтатуса(ДокументОперации) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИдентификаторыОперацийСБП");
		ЭлементБлокировки.УстановитьЗначение("ДокументОперации", ДокументОперации);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Запись = РегистрыСведений.ИдентификаторыОперацийСБП.СоздатьМенеджерЗаписи();
		Запись.ДокументОперации = ДокументОперации;
		Запись.Прочитать();
		
		Если Не ЗначениеЗаполнено(Запись.ДокументОперации) Тогда
			ВызватьИсключение НСтр("ru = 'Информация о документе оплаты не обнаружена, не возможно записать данные платежной системы.'");
		КонецЕсли;
		
		Запись.КоличествоПопыток = Запись.КоличествоПопыток + 1;
		Если Запись.КоличествоПопыток > МаксимальноеКоличествоПопытокЗапросаСтатуса() Тогда
			Запись.ОтложенноеПолучениеСтатуса = Ложь;
		КонецЕсли;
		
		Запись.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При записи данных платежной системы возникли ошибки:
				|%1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			ТекстИсключения,
			Истина);
		
		ВызватьИсключение ТекстИсключения;
	КонецПопытки;
	
КонецПроцедуры

// Получает данные отложенных операций для дальнейшей обработки статусов.
//
// Возвращаемое значение:
//  Соответствие - данные операций:
//
Функция ОтложенныеОперации() Экспорт
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИдентификаторыОперацийСБП.ДокументОперации КАК ДокументОперации,
		|	ДанныеОперацийСБП.Оплата КАК Оплата,
		|	ИдентификаторыОперацийСБП.ИдентификаторОплаты КАК ИдентификаторОплаты,
		|	ИдентификаторыОперацийСБП.ИдентификаторПлатежнойСистемы КАК ИдентификаторПлатежнойСистемы,
		|	ИдентификаторыОперацийСБП.ДатаЗапросаСтатуса КАК ДатаЗапросаСтатуса,
		|	ИдентификаторыОперацийСБП.НастройкаИнтеграции КАК НастройкаИнтеграции,
		|	ИдентификаторыОперацийСБП.НастройкаИнтеграции.Родитель.ПлатежнаяСистема КАК ПлатежнаяСистема,
		|	ИдентификаторыОперацийСБП.ПериодИспользования КАК ПериодИспользования,
		|	ИдентификаторыОперацийСБП.СтатусОперации КАК СтатусОперации,
		|	ИдентификаторыОперацийСБП.КоличествоПопыток КАК КоличествоПопыток
		|ИЗ
		|	РегистрСведений.ИдентификаторыОперацийСБП КАК ИдентификаторыОперацийСБП
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеОперацийСБП КАК ДанныеОперацийСБП
		|		ПО ИдентификаторыОперацийСБП.Идентификатор = ДанныеОперацийСБП.Идентификатор
		|ГДЕ
		|	ИдентификаторыОперацийСБП.ОтложенноеПолучениеСтатуса
		|	И ИдентификаторыОперацийСБП.НастройкаИнтеграции.Используется
		|ИТОГИ ПО
		|	ПлатежнаяСистема";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПлатежнаяСистема = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПлатежнаяСистема.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ВыборкаПлатежнаяСистема.ПлатежнаяСистема) Тогда
			Продолжить;
		КонецЕсли;
		
		ВыборкаДетальныеЗаписи = ВыборкаПлатежнаяСистема.Выбрать();
		
		ДанныеОпераций = Новый Массив;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ДанныеОперации = Новый Структура;
			ДанныеОперации.Вставить("ДокументОперации", ВыборкаДетальныеЗаписи.ДокументОперации);
			ДанныеОперации.Вставить("Оплата", ВыборкаДетальныеЗаписи.Оплата);
			ДанныеОперации.Вставить("ИдентификаторОплаты", ВыборкаДетальныеЗаписи.ИдентификаторОплаты);
			ДанныеОперации.Вставить("ИдентификаторПлатежнойСистемы", ВыборкаДетальныеЗаписи.ИдентификаторПлатежнойСистемы);
			ДанныеОперации.Вставить("ДатаЗапросаСтатуса", ВыборкаДетальныеЗаписи.ДатаЗапросаСтатуса);
			ДанныеОперации.Вставить("НастройкаИнтеграции", ВыборкаДетальныеЗаписи.НастройкаИнтеграции);
			ДанныеОперации.Вставить("ПериодИспользования", ВыборкаДетальныеЗаписи.ПериодИспользования);
			ДанныеОперации.Вставить("СтатусОперации", ВыборкаДетальныеЗаписи.СтатусОперации);
			ДанныеОперации.Вставить("КоличествоПопыток", ВыборкаДетальныеЗаписи.КоличествоПопыток);
			ДанныеОпераций.Добавить(ДанныеОперации);
		КонецЦикла;
		
		Результат.Вставить(
			ВыборкаПлатежнаяСистема.ПлатежнаяСистема,
			ДанныеОпераций);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СверкаВзаиморасчетов

// Определяет документы оплат для проведения сверки взаиморасчетов за период.
//
// Параметры:
//  НачалоПериода - Дата - начало периода отбора;
//  КонецПериода - Дата - окончание периода отбора;
//
// Возвращаемое значение:
//  Массив из ДокументОперацииБИП - документы оплат за период.
//
Функция ДокументТорговойТочкиЗаПериод(
		ТорговаяТочка,
		НачалоПериода,
		КонецПериода) Экспорт
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИдентификаторыОперацийСБП.ДокументОперации КАК ДокументОперации
		|ИЗ
		|	РегистрСведений.ИдентификаторыОперацийСБП КАК ИдентификаторыОперацийСБП
		|ГДЕ
		|	ИдентификаторыОперацийСБП.ТорговаяТочка = &ТорговаяТочка
		|	И ИдентификаторыОперацийСБП.ДатаОперации МЕЖДУ &НачалоПериода И &КонецПериода";
	
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("ТорговаяТочка", ТорговаяТочка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Результат.Добавить(ВыборкаДетальныеЗаписи.ДокументОперации);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Определяет параметры документов оплат для проведения сверки взаиморасчетов за период.
//
// Параметры:
//  НачалоПериода - Дата - начало периода отбора;
//  КонецПериода - Дата - окончание периода отбора;
//
// Возвращаемое значение:
//  Массив из Структура - данные документов оплат за период.
//
Функция ОперацииТорговойТочкиЗаПериод(
		ТорговаяТочка,
		НачалоПериода,
		КонецПериода) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИдентификаторыОперацийСБП.ДокументОперации КАК ДокументОперации,
		|	ИдентификаторыОперацийСБП.ИдентификаторПлатежнойСистемы КАК ИдентификаторПлатежнойСистемы
		|ИЗ
		|	РегистрСведений.ИдентификаторыОперацийСБП КАК ИдентификаторыОперацийСБП
		|ГДЕ
		|	ИдентификаторыОперацийСБП.ДатаОперации МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ИдентификаторыОперацийСБП.ТорговаяТочка = &ТорговаяТочка";
	
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("ТорговаяТочка", ТорговаяТочка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#Область ПрочиеСлужебныеПроцедурыФункции

// Определяет максимальное количество попыток запроса статуса
// для отложенных операций.
//
// Возвращаемое значение:
//  Число - максимальное количество попыток.
//
Функция МаксимальноеКоличествоПопытокЗапросаСтатуса() Экспорт
	
	Возврат 10;
	
КонецФункции

// Создает описание идентификаторов оплаты СБП.
//
// Возвращаемое значение:
//  ИдентификаторОплаты - Строка - идентификатор оплаты в СБП;
//  ИдентификаторПлатежнойСистемы - Строка - идентификатор оплаты в платежной системе.
//
Функция НовыйИдентификаторыОперацииСБП(
		ИдентификаторОплаты,
		ИдентификаторПлатежнойСистемы) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторОплаты",           ИдентификаторОплаты);
	Результат.Вставить("ИдентификаторПлатежнойСистемы", ИдентификаторПлатежнойСистемы);
	
	Возврат Результат;
	
КонецФункции

// Определяет необходимость создания идентификатора операции
// или его обновления.
//
// Параметры:
//  Идентификатор - УникальныйИдентификатор - текущий идентификатор операции;
//  СтатусОперации - Строка - текущий статус операции.
//
// Возвращаемое значение:
//  Булево  - если Истина, необходимо создать новый идентификатор.
//
Функция ТребуетсяГенерацияНовогоИдентификатора(Идентификатор, СтатусОперации)
	
	// Если еще не был создан необходимо
	// сгенерировать новый.
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Если операция находится в терминальном статусе
	// и результат по этой операции отрицательный, необходимо
	// обновить идентификатор.
	Если СтатусОперации = "EXCEEDED"
		Или СтатусОперации = "NOT_PAID"
		Или СтатусОперации = "NO_INFO"
		Или СтатусОперации = "DECLINED" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
