
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	ОбщегоНазначенияРМКПереопределяемый.УстановитьПризнакФормеПоДаннымФункциональнойОпции(ЭтаФорма,
		"ИспользоватьЗапретПродаж");
	ОбщегоНазначенияРМКПереопределяемый.УстановитьПризнакФормеПоДаннымФункциональнойОпции(ЭтаФорма,
		"ИспользоватьСервисЛояльности");

	ИспользоватьПоставляемыеОграниченияПродаж = ОбщегоНазначенияРМК.ИспользоватьПоставляемыеОграниченияПродаж();
	ДопускаетсяОбновлениеОграниченийПродаж = (ИспользоватьСервисЛояльности И ИспользоватьЗапретПродаж)
		ИЛИ ИспользоватьПоставляемыеОграниченияПродаж;
	
	РазрешеноРедактироватьУсловияОграниченийПродаж = ДоступностьРедактированияУсловийЗапретовПродаж();
	ОбщегоНазначенияРМКПереопределяемый.ИспользоватьБонусныеПрограммы(ЭтотОбъект);
	УстановитьДоступностьЭлементаФормы(Элементы.ФормаОбновитьДанныеЗапрета, ДопускаетсяОбновлениеОграниченийПродаж);
	ОбновитьДоступностьЭлементовВводаЗапретов(Элементы, РазрешеноРедактироватьУсловияОграниченийПродаж);
	ТорговыйОбъект = ТекущийТорговыйОбъект();
	АктуализироватьЗаголовкиИменПолей();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТекущийЗапретОсобенностиУчетаПриИзменении(Элемент)
	
	УстановитьОтборДинамическогоСписка("ОсобенностьУчета");
	
	Если ЗначениеЗаполнено(ОсобенностьУчета) Тогда
		
		ВидНоменклатуры = Неопределено;
		ПереченьВидовНоменклатуры = ВидыНоменклатурыПоОсобенностиУчета(ОсобенностьУчета);
		Элементы.ВидНоменклатурыДляОтбора.СписокВыбора.ЗагрузитьЗначения(ПереченьВидовНоменклатуры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидНоменклатурыДляОтбораПриИзменении(Элемент)
	УстановитьОтборДинамическогоСписка("ВидНоменклатуры");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьДанныеЗапрета(Команда)
	
	ОбновитьДанныеЗапретаИзМастерСистемы(ТорговыйОбъект);
	РазрешеноРедактироватьУсловияОграниченийПродаж = ДоступностьРедактированияУсловийЗапретовПродаж();
	ОбновитьДоступностьЭлементовВводаЗапретов(Элементы, РазрешеноРедактироватьУсловияОграниченийПродаж);
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьДанныеЗапретаИзМастерСистемы(ТорговыйОбъект)
	
	СостояниеОбновленияЗапретовПродаж = НСтр("ru = ''");
	
	Если ИспользоватьПоставляемыеОграниченияПродаж Тогда
		
		РезультатОбновления = ОбновитьОграниченияПродажИзПоставляемыхДанных();
		СостояниеОбновленияЗапретовПродаж = РезультатОбновления.КомментарийОбновленияЗапретов;
		
	Иначе
		
		РезультатОбновления = ОбщегоНазначенияРМККлиентСервер.ОбновитьДанныеЗапретовРедактирования(,ТорговыйОбъект);
		
		Если НЕ РезультатОбновления.ПризнакУспешноОбновлен Тогда
			
			ПричинаНеобновленияПризнака = НСтр("ru = 'Признак разрешения редактирования не обновлен по причине:'");
			СостояниеОбновленияЗапретовПродаж = СтрШаблон("%1 %2%3",
			ПричинаНеобновленияПризнака, РезультатОбновления.КомментарийКОбновлениюПризнака, Символы.ПС);
			
		КонецЕсли;
		
		Если НЕ РезультатОбновления.ЗапретыПродажУспешноЗагружены Тогда
			
			ПричинаНеобновленияЗапретовПродаж = НСтр("ru = 'Не удалось обновить запреты продаж по причине:'");
			ПричинаНеобновленияЗапретовПродажРасширенная = СтрШаблон("%1%2",
			ПричинаНеобновленияЗапретовПродаж, РезультатОбновления.КомментарийОбновленияЗапретов);
			СостояниеОбновленияЗапретовПродаж = СтрШаблон("%1%2%3",
			СостояниеОбновленияЗапретовПродаж, ПричинаНеобновленияЗапретовПродажРасширенная, Символы.ПС);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СостояниеОбновленияЗапретовПродаж) Тогда
		
		КомментарийКЗаписи = НСтр("ru = 'Данные о запретах продаж не были обновлены.'");
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(СостояниеОбновленияЗапретовПродаж,,
			КомментарийКЗаписи);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОбновитьОграниченияПродажИзПоставляемыхДанных()
	Возврат ОбновитьОграниченияПродажИзПоставляемыхДанныхСервер();
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЭлементаФормы(Элемент, Доступность)
	Элемент.Доступность = Доступность;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьЭлементовВводаЗапретов(Элементы, ЗначениеДоступности)
	
	УстановитьДоступностьЭлементаФормы(Элементы.ФормаСоздать, ЗначениеДоступности);
	УстановитьДоступностьЭлементаФормы(Элементы.ФормаСкопировать, ЗначениеДоступности);
	УстановитьДоступностьЭлементаФормы(Элементы.ФормаИзменить, ЗначениеДоступности);
	
КонецПроцедуры

&НаСервере
Функция ОбновитьОграниченияПродажИзПоставляемыхДанныхСервер()

	Результат = Новый Структура();
	Результат.Вставить("КомментарийОбновленияЗапретов", НСтр("ru = ''"));
	ОбщегоНазначенияРМК.ОбновитьОграниченияПродажИзПоставляемыхДанных(ТорговыйОбъект, Результат);
	Возврат Результат;

КонецФункции

&НаСервереБезКонтекста
Функция ДоступностьРедактированияУсловийЗапретовПродаж()
	Возврат ОбщегоНазначенияРМК.РазрешеноРедактироватьЗапретыПродаж();
КонецФункции

&НаСервере
Процедура АктуализироватьЗаголовкиИменПолей()
	
	ИмяЗаголовкаОсобенностиУчетаПоУмолчанию = НСтр("ru = 'Особенность учета'");
	ПереопределенноеИмяЗаголовкаОсобенностиУчета =
		ОбщегоНазначенияРМККлиентСерверПереопределяемый.ИмяЗаголовкаОсобенностиУчета();
	ИмяЗаголовкаОсобенностиУчетаОграниченияПродажи =
		?(ЗначениеЗаполнено(ПереопределенноеИмяЗаголовкаОсобенностиУчета),
			ПереопределенноеИмяЗаголовкаОсобенностиУчета, ИмяЗаголовкаОсобенностиУчетаПоУмолчанию);
	Элементы.ОсобенностиУчетаДляОтбора.Заголовок = ИмяЗаголовкаОсобенностиУчетаОграниченияПродажи;
	Элементы.ОсобенностьУчета.Заголовок = ИмяЗаголовкаОсобенностиУчетаОграниченияПродажи;

	ИмяЗаголовкаВидаНоменклатурыПоУмолчанию = НСтр("ru = 'Вид номенклатуры'");
	ПереопределенноеИмяЗаголовкаВидаНоменклатуры =
		ОбщегоНазначенияРМККлиентСерверПереопределяемый.ИмяЗаголовкаВидаНоменклатуры();
	ИмяЗаголовкаВидаНоменклатурыОграниченияПродажи =
		?(ЗначениеЗаполнено(ПереопределенноеИмяЗаголовкаВидаНоменклатуры),
			ПереопределенноеИмяЗаголовкаВидаНоменклатуры, ИмяЗаголовкаВидаНоменклатурыПоУмолчанию);
	Элементы.ВидНоменклатурыДляОтбора.Заголовок = ИмяЗаголовкаВидаНоменклатурыОграниченияПродажи;
	Элементы.ВидНоменклатуры.Заголовок = ИмяЗаголовкаВидаНоменклатурыОграниченияПродажи;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборДинамическогоСписка(ИмяРеквизита)
	
	ОтборКомпоновкиДанных = ЭтотОбъект.Список.КомпоновщикНастроек.Настройки.Отбор;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(
		ОтборКомпоновкиДанных,
		ИмяРеквизита);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ОтборКомпоновкиДанных,
		ИмяРеквизита,
		ЭтаФорма[ИмяРеквизита],
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(ЭтаФорма[ИмяРеквизита]));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВидыНоменклатурыПоОсобенностиУчета(ОсобенностьУчета)
	
	Возврат ОбщегоНазначенияРМКПереопределяемый.ВидыНоменклатурыПоОсобенностиУчета(ОсобенностьУчета);
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекущийТорговыйОбъект()

	Результат = ОбщегоНазначенияРМКПереопределяемый.ОпределитьТекущийТорговыйОбъект();
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = ТекущийТорговыйОбъектПоУмолчанию();
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекущийТорговыйОбъектПоУмолчанию()

	Результат = Неопределено;
	ИмяКлассаМетаданныхХранящихТекущийТорговыйОбъект = "ПараметрыСеанса";
	ИмяМетаданныхХранящихТекущийТорговыйОбъект = "ТекущийТорговыйОбъект";
	
	ДанныеСуществуют =
			Метаданные[ИмяКлассаМетаданныхХранящихТекущийТорговыйОбъект].
				Найти(ИмяМетаданныхХранящихТекущийТорговыйОбъект) <> Неопределено;
	
	Если ДанныеСуществуют Тогда
		
		Если СтрНайти(ИмяКлассаМетаданныхХранящихТекущийТорговыйОбъект, "ПараметрыСеанса") Тогда
			Результат = ПараметрыСеанса[ИмяМетаданныхХранящихТекущийТорговыйОбъект];
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


#КонецОбласти

