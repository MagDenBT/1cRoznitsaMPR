///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "ИнтернетПоддержкаПользователей.ИнтеграцияСПлатежнымиСистемами".
// ОбщийМодуль.СервисИнтеграцииССБП.
//
// Серверные процедуры обмена данными с Системой быстрых платежей:
//  - выполнение оплаты, возвратов и получение статус операций;
//  - запрос данных отчетов по сверке взаиморасчетов;
//  - загрузка настроек платежных систем СБП;
//  - проверка данных аутентификации;
//  - настройки аутентификации участников СБП;
//  - регистрация новых интеграции;
//  - загрузка статусов отложенных операций;
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// ИнтернетПоддержкаПользователей.СверкаВзаиморасчетовПлатежныеСистемы

// Получает данные отчета по сверке взаиморасчетов из сервиса платежной системы.
//
// Параметры:
//  НачалоПериода - Дата - дата начало выборки данных отчета;
//  КонецПериода - Дата - дата окончания выборки данных отчета;
//  ПараметрыИнтеграции - Структура - параметры выполнения операции
//                        см. ИнтеграцияСПлатежнымиСистемамиСлужебный.ПараметрыИнтеграции;
//  ДатаЗапросаСтатуса - Дата - для определения периодичности получения статуса
//                       формирования отчета.
//
// Возвращаемое значение:
//  Структура - данные сверки взаиморасчетов:
//    *Идентификатор - Строка - идентификатор отчета;
//    *СуммаВозвратов - Число - общая сумма возвратов за период по торговой точке;
//    *СуммаОплат - Число - общая сумма оплат за период по торговой точке;
//    *СуммаКомиссии - Число - рассчитанная сумма возвратов за период по торговой точке;
//    *СтатусОперации - Строка - текущее состояние операции оплаты:
//                  - "Выполняется" - подтверждение оплаты от платежной системы не получено;
//                  - "Отменена" - оплата по оплата по ранее сформированному QR-коду невозможна;
//                  - "Выполнена" - платежная система подтвердила оплату;
//                  - "ТребуетсяПодтверждение" - необходимо подтвердить действие;
//                  - "Ошибка" - не удалось выполнить проверку оплаты из-за ошибки.
//    *КодОшибки - Строка - строковый код возникшей ошибки, который
//                 может быть обработан вызывающим методом;
//    *СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ЗапросОтчетаПоСверкеОборотов(ПараметрыИнтеграции, НачалоПериода, КонецПериода, ДатаЗапросаСтатуса) Экспорт
	
	РезультатОперации = ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйРезультатДлительнойОперации();
	РезультатОперации.Вставить("Идентификатор",  "");
	РезультатОперации.Вставить("СуммаВозвратов", 0);
	РезультатОперации.Вставить("СуммаОплат" ,    0);
	РезультатОперации.Вставить("СуммаКомиссии",  0);
	
	РезультатЗапроса = ОперацияЗапросОтчетаПоОборотам(
		НачалоПериода,
		КонецПериода,
		ПараметрыИнтеграции);
	
	Если ЗначениеЗаполнено(РезультатЗапроса.КодОшибки) Тогда
		ЗаполнитьЗначенияСвойств(
			РезультатОперации,
			РезультатЗапроса,
			"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
		РезультатОперации.СтатусОперации = ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииОшибка();
		Возврат РезультатОперации;
	КонецЕсли;
	
	ОбработатьСтатусОтчета(
		РезультатОперации,
		РезультатЗапроса.Статус,
		РезультатЗапроса.ТипОшибки);
	
	ЗаполнитьЗначенияСвойств(
		РезультатОперации,
		РезультатЗапроса,
		"Идентификатор, СуммаВозвратов, СуммаОплат, СуммаКомиссии");
	
	URLФайла = РезультатЗапроса.URLФайла;
	Если РезультатОперации.СтатусОперации = ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииВыполняется() Тогда
		
		РезультатЗапроса = СостояниеОтчетаПоСверкеОборотов(
			ПараметрыИнтеграции,
			РезультатОперации.Идентификатор,
			ДатаЗапросаСтатуса);
		
		ЗаполнитьЗначенияСвойств(
			РезультатОперации,
			РезультатЗапроса,
			"СуммаВозвратов,
			|СуммаОплат,
			|СуммаКомиссии,
			|СтатусОперации,
			|КодОшибки,
			|СообщениеОбОшибке,
			|ИнформацияОбОшибке");
		
	ИначеЕсли РезультатОперации.СтатусОперации = ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииВыполнена()
			И ЗначениеЗаполнено(URLФайла) Тогда
		
		ДанныеОтчета = ОперацияЗагрузитьФайлОтчетаПоСверкеОборотов(
			URLФайла,
			РезультатОперации.Идентификатор,
			ПараметрыИнтеграции);
		
		Если ЗначениеЗаполнено(ДанныеОтчета.КодОшибки) Тогда
			ЗаполнитьЗначенияСвойств(
				РезультатОперации,
				ДанныеОтчета,
				"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
			РезультатОперации.СтатусОперации = ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииОшибка();
		Иначе
			ЗаполнитьЗначенияСвойств(
				РезультатОперации,
				ДанныеОтчета,
				"СуммаВозвратов, СуммаОплат, СуммаКомиссии");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

// Получает статус и загружает данные отчета по сверке взаиморасчетов из сервиса платежной системы.
//
// Параметры:
//  ПараметрыИнтеграции - Структура - параметры выполнения операции
//                        см. ИнтеграцияСПлатежнымиСистемамиСлужебный.ПараметрыИнтеграции;
//  Идентификатор - Строка - идентификатор отчета в платежной системе;
//  ДатаЗапросаСтатуса - Дата - для определения периодичности получения статуса
//                       формирования отчета.
//
// Возвращаемое значение:
//  Структура - данные сверки взаиморасчетов:
//    *СуммаВозвратов - Число - общая сумма возвратов за период по торговой точке;
//    *СуммаОплат - Число - общая сумма оплат за период по торговой точке;
//    *СуммаКомиссии - Число - рассчитанная сумма возвратов за период по торговой точке;
//    *СтатусОперации - Строка - текущее состояние операции оплаты:
//                  - "Выполняется" - подтверждение оплаты от платежной системы не получено;
//                  - "Отменена" - оплата по оплата по ранее сформированному QR-коду невозможна;
//                  - "Выполнена" - платежная система подтвердила оплату;
//                  - "ТребуетсяПодтверждение" - необходимо подтвердить действие;
//                  - "Ошибка" - не удалось выполнить проверку оплаты из-за ошибки.
//    *КодОшибки - Строка - строковый код возникшей ошибки, который
//                 может быть обработан вызывающим методом;
//    *СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция СостояниеОтчетаПоСверкеОборотов(ПараметрыИнтеграции, Идентификатор, ДатаЗапросаСтатуса) Экспорт
	
	РезультатОперации = ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйРезультатДлительнойОперации();
	РезультатОперации.Вставить("СуммаВозвратов", 0);
	РезультатОперации.Вставить("СуммаОплат", 0);
	РезультатОперации.Вставить("СуммаКомиссии", 0);
	
	РезультатЗапроса = ОперацияЗапросСтатусаОтчетаПоОборотам(
		Идентификатор,
		ПараметрыИнтеграции,
		ДатаЗапросаСтатуса);
	
	Если ЗначениеЗаполнено(РезультатЗапроса.КодОшибки) Тогда
		ЗаполнитьЗначенияСвойств(
			РезультатОперации,
			РезультатЗапроса,
			"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
		РезультатОперации.СтатусОперации = ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииОшибка();
		Возврат РезультатОперации;
	КонецЕсли;
	
	ОбработатьСтатусОтчета(
		РезультатОперации,
		РезультатЗапроса.Статус,
		РезультатЗапроса.ТипОшибки);
	
	ЗаполнитьЗначенияСвойств(
		РезультатОперации,
		РезультатЗапроса,
		"СуммаВозвратов, СуммаОплат, СуммаКомиссии");
	
	URLФайла = РезультатЗапроса.URLФайла;
	Если РезультатОперации.СтатусОперации = ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииВыполнена()
		И ЗначениеЗаполнено(URLФайла) Тогда
		
		ДанныеОтчета = ОперацияЗагрузитьФайлОтчетаПоСверкеОборотов(
			URLФайла,
			Идентификатор,
			ПараметрыИнтеграции);
		
		Если ЗначениеЗаполнено(ДанныеОтчета.КодОшибки) Тогда
			ЗаполнитьЗначенияСвойств(
				РезультатОперации,
				ДанныеОтчета,
				"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
			РезультатОперации.СтатусОперации = ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииОшибка();
		Иначе
			ЗаполнитьЗначенияСвойств(
				РезультатОперации,
				ДанныеОтчета,
				"СуммаВозвратов, СуммаОплат, СуммаКомиссии");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

// Получает данные операций проведенных в платежной системе за период.
//
// Параметры:
//  НачалоПериода - Дата - дата начало выборки данных отчета;
//  КонецПериода - Дата - дата окончания выборки данных отчета;
//  ПараметрыИнтеграции - Структура - параметры выполнения операции
//                        см. ИнтеграцияСПлатежнымиСистемамиСлужебный.ПараметрыИнтеграции;
//  ДатаЗапросаСтатуса - Дата - для определения периодичности получения статуса
//                       формирования отчета.
//
// Возвращаемое значение:
//  Структура - данные сверки взаиморасчетов:
//    *Идентификатор - Строка - идентификатор отчета;
//    *ДанныеОпераций - ТаблицаЗначений - см. ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйДанныеОтчетаПоСверкеОпераций;
//    *СтатусОперации - Строка - текущее состояние операции оплаты:
//                  - "Выполняется" - подтверждение оплаты от платежной системы не получено;
//                  - "Отменена" - оплата по оплата по ранее сформированному QR-коду невозможна;
//                  - "Выполнена" - платежная система подтвердила оплату;
//                  - "ТребуетсяПодтверждение" - необходимо подтвердить действие;
//                  - "Ошибка" - не удалось выполнить проверку оплаты из-за ошибки.
//    *КодОшибки - Строка - строковый код возникшей ошибки, который
//                 может быть обработан вызывающим методом;
//    *СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ЗапросОтчетаПоСверкеОпераций(ПараметрыИнтеграции, НачалоПериода, КонецПериода, ДатаЗапросаСтатуса) Экспорт
	
	РезультатОперации = ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйРезультатДлительнойОперации();
	РезультатОперации.Вставить("Идентификатор", "");
	РезультатОперации.Вставить("ДанныеОпераций", ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйДанныеОтчетаПоСверкеОпераций());
	
	РезультатЗапроса = ОперацияЗапросОтчетаПоСверкеОпераций(
		НачалоПериода,
		КонецПериода,
		ПараметрыИнтеграции);
	
	Если ЗначениеЗаполнено(РезультатЗапроса.КодОшибки) Тогда
		ЗаполнитьЗначенияСвойств(
			РезультатОперации,
			РезультатЗапроса,
			"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
		РезультатОперации.СтатусОперации = ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииОшибка();
		Возврат РезультатОперации;
	КонецЕсли;
	
	ОбработатьСтатусОтчета(
		РезультатОперации,
		РезультатЗапроса.Статус,
		РезультатЗапроса.ТипОшибки);
	
	ЗаполнитьЗначенияСвойств(
		РезультатОперации,
		РезультатЗапроса,
		"Идентификатор");
	
	Если РезультатОперации.СтатусОперации = ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииВыполняется() Тогда
		
		РезультатЗапросаСтатуса = СостояниеОтчетаПоСверкеОпераций(
			ПараметрыИнтеграции,
			РезультатОперации.Идентификатор,
			ДатаЗапросаСтатуса);
		ЗаполнитьЗначенияСвойств(
			РезультатОперации,
			РезультатЗапросаСтатуса,
			"СтатусОперации, КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
		РезультатОперации.ДанныеОпераций = РезультатЗапросаСтатуса.ДанныеОпераций;
		
	ИначеЕсли РезультатОперации.СтатусОперации = ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииВыполнена()
			И ЗначениеЗаполнено(РезультатЗапроса.URLФайла) Тогда
		
		ДанныеОтчета = ОперацияЗагрузитьФайлОтчетаПоСверкеОпераций(
			РезультатЗапроса.URLФайла,
			РезультатОперации.Идентификатор,
			ПараметрыИнтеграции);
		
		Если ЗначениеЗаполнено(ДанныеОтчета.КодОшибки) Тогда
			ЗаполнитьЗначенияСвойств(
				РезультатОперации,
				ДанныеОтчета,
				"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
			РезультатОперации.СтатусОперации = ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииОшибка();
		Иначе
			ЗаполнитьЗначенияСвойств(
				РезультатОперации,
				ДанныеОтчета,
				"ДанныеОпераций");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

// Получает статус и загружает данные отчета по сверке операций из сервиса платежной системы.
//
// Параметры:
//  ПараметрыИнтеграции - Структура - параметры выполнения операции
//                        см. ИнтеграцияСПлатежнымиСистемамиСлужебный.ПараметрыИнтеграции;
//  Идентификатор - Строка - идентификатор отчета в платежной системе;
//  ДатаЗапросаСтатуса - Дата - для определения периодичности получения статуса
//                       формирования отчета.
//
// Возвращаемое значение:
//  Структура - данные сверки взаиморасчетов:
//    *ДанныеОпераций - ТаблицаЗначений - см. ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйДанныеОтчетаПоСверкеОпераций;
//    *СтатусОперации - Строка - текущее состояние операции оплаты:
//                  - "Выполняется" - подтверждение оплаты от платежной системы не получено;
//                  - "Отменена" - оплата по оплата по ранее сформированному QR-коду невозможна;
//                  - "Выполнена" - платежная система подтвердила оплату;
//                  - "ТребуетсяПодтверждение" - необходимо подтвердить действие;
//                  - "Ошибка" - не удалось выполнить проверку оплаты из-за ошибки.
//    *КодОшибки - Строка - строковый код возникшей ошибки, который
//                 может быть обработан вызывающим методом;
//    *СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция СостояниеОтчетаПоСверкеОпераций(ПараметрыИнтеграции, Идентификатор, ДатаЗапросаСтатуса) Экспорт
	
	РезультатОперации = ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйРезультатДлительнойОперации();
	РезультатОперации.Вставить("ДанныеОпераций", ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйДанныеОтчетаПоСверкеОпераций());
	
	НастройкиВызова = ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйИтеративныйВызовОперации(180);
	Пока ИнтеграцияСПлатежнымиСистемамиСлужебный.ВозможенВызовОперации(НастройкиВызова) Цикл
		
		РезультатЗапроса = ОперацияЗапросСтатусаОтчетаПоОперациям(
			Идентификатор,
			ПараметрыИнтеграции,
			ДатаЗапросаСтатуса);
		
		Если ЗначениеЗаполнено(РезультатЗапроса.КодОшибки) Тогда
			ЗаполнитьЗначенияСвойств(
				РезультатОперации,
				РезультатЗапроса,
				"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
			РезультатОперации.СтатусОперации = ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииОшибка();
			Возврат РезультатОперации;
		КонецЕсли;
	
		ОбработатьСтатусОтчета(
			РезультатОперации,
			РезультатЗапроса.Статус,
			РезультатЗапроса.ТипОшибки);
		
		Если РезультатОперации.СтатусОперации <> ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииВыполняется() Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если РезультатОперации.СтатусОперации = ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииВыполнена() Тогда
		
		ДанныеОтчета = ОперацияЗагрузитьФайлОтчетаПоСверкеОпераций(
			РезультатЗапроса.URLФайла,
			Идентификатор,
			ПараметрыИнтеграции);
		
		Если ЗначениеЗаполнено(ДанныеОтчета.КодОшибки) Тогда
			ЗаполнитьЗначенияСвойств(
				РезультатОперации,
				ДанныеОтчета,
				"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
			РезультатОперации.СтатусОперации = ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииОшибка();
		Иначе
			ЗаполнитьЗначенияСвойств(
				РезультатОперации,
				ДанныеОтчета,
				"ДанныеОпераций");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

// Конец ИнтернетПоддержкаПользователей.СверкаВзаиморасчетовПлатежныеСистемы

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПрикладныеОперации

// См. ИнтеграцияСПлатежнымиСистемами.ИдентификаторОплаты.
//
Функция ИдентификаторОплаты(ДокументОплаты, ПараметрыИнтеграции, ДополнительныеПараметры) Экспорт
	
	РезультатОперации = ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйРезультатИдентификаторОплаты();
	
	ЗаказНаОплату = ОписаниеЗаказаНаОплату();
	ИнтеграцияПодсистемБИП.ПриФормированииЗаказаНаОплатуСБП(
		ДокументОплаты,
		ЗаказНаОплату,
		ПараметрыИнтеграции.ТорговаяТочкаСсылка,
		ДополнительныеПараметры);
	ИнтеграцияСПлатежнымиСистемамиПереопределяемый.ПриФормированииЗаказаНаОплатуСБП(
		ДокументОплаты,
		ЗаказНаОплату,
		ПараметрыИнтеграции.ТорговаяТочкаСсылка,
		ДополнительныеПараметры);
	
	// Валидация данных заказа на оплату и настроек.
	ПроверитьЗаказНаОплату(
		ЗаказНаОплату,
		РезультатОперации);
	
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗаказНаОплату.НазначениеПлатежа) Тогда
		ЗаказНаОплату.НазначениеПлатежа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Оплата СБП %1'")
			+ " "
			+ ИдентификаторВалютыРоссийскийРубль(),
			ПреобразоватьЧислоВФорматJSON(ЗаказНаОплату.СуммаОплаты));
	ИначеЕсли СтрДлина(ЗаказНаОплату.НазначениеПлатежа) > 140 Тогда
		ЗаказНаОплату.НазначениеПлатежа = Лев(ЗаказНаОплату.НазначениеПлатежа, 140);
	КонецЕсли;
	
	// Формирование идентификаторов оплаты.
	Идентификатор = ОпределитьИдентификаторЗаказаНаОплату(
		РезультатОперации,
		ДокументОплаты,
		ЗаказНаОплату,
		ПараметрыИнтеграции);
	
	// Прекратить вызов операции, в случае ошибок.
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	// Сохранить данные заказа для проверки
	// идемпотентности.
	РегистрыСведений.ДанныеОперацийСБП.СохранитьДанныеОплаты(
		Идентификатор,
		ЗаказНаОплату,
		ДокументОплаты,
		ПараметрыИнтеграции.ТорговаяТочка);
	
	РезультатОперации.QRКод= РегистрыСведений.ИдентификаторыОперацийСБП.QRКодОперацииСБП(
		ДокументОплаты);
	
	Если Не ЗначениеЗаполнено(РезультатОперации.QRКод) Тогда
		
		// Создание нового QR-кода Системы быстрых платежей.
		ДанныеЗаказа = ОперацияЗаказНаОплату(
			ЗаказНаОплату,
			Идентификатор,
			ПараметрыИнтеграции);
		
		Если ЗначениеЗаполнено(ДанныеЗаказа.КодОшибки) Тогда
			ЗаполнитьЗначенияСвойств(
				РезультатОперации,
				ДанныеЗаказа,
				"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
			Возврат РезультатОперации;
		КонецЕсли;
		
		// Сохранить информацию об идентификаторе СБП.
		РегистрыСведений.ИдентификаторыОперацийСБП.ЗаписатьДанныеОплатыСБП(
			ДокументОплаты,
			ДанныеЗаказа.ИдентификаторОплаты,
			ДанныеЗаказа.ПериодИспользования,
			ДанныеЗаказа.QRКод,
			ИдентификаторСтатусаВПроцессе());
		
		РезультатОперации.QRКод = ДанныеЗаказа.QRКод;
		
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

// См. ИнтеграцияСПлатежнымиСистемами.СтатусОплаты.
//
Функция СтатусОплаты(ДокументОплаты, ПараметрыИнтеграции, ДлительныйВызов) Экспорт
	
	РезультатОперации = ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйРезультатДлительнойОперации();
	ПараметрыСтатуса = РегистрыСведений.ИдентификаторыОперацийСБП.ПараметрыОпределенияСтатусаОперации(
		ДокументОплаты);
	
	Если ПараметрыСтатуса = Неопределено Тогда
		РезультатОперации.СтатусОперации = ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииОшибка();
		РезультатОперации.СообщениеОбОшибке = НСтр("ru = 'Идентификатор оплаты по документу не обнаружен.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Идентификатор оплаты по документу не обнаружен.'");
		Возврат РезультатОперации;
	КонецЕсли;
	
	Оплачен = Ложь;
	Отменен = Ложь;
	
	Если ПараметрыСтатуса.СтатусОперации = ИдентификаторСтатусаВыполнена() Тогда
		Оплачен = Истина;
	ИначеЕсли ПараметрыСтатуса.СтатусОперации = ИдентификаторСтатусаОтклонена() Тогда
		Отменен = Истина;
	ИначеЕсли (ПараметрыСтатуса.ПериодИспользования + 600) < ТекущаяДатаСеанса() Тогда
		
		// При окончании срока действия QR-кода, выполняется проверка статуса оплаты
		// и регистрация отмены QR-кода в ИБ, если оплата так и не была совершена.
		РезультатПроверки = ОперацияСтатусЗаказНаОплату(
			ПараметрыСтатуса.ИдентификаторОплаты,
			ПараметрыСтатуса.ДатаЗапросаСтатуса,
			ПараметрыИнтеграции);
		
		Если ЗначениеЗаполнено(РезультатПроверки.КодОшибки) Тогда
			ЗаполнитьЗначенияСвойств(
				РезультатОперации,
				РезультатПроверки,
				"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
			РезультатОперации.СтатусОперации = ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииОшибка();
			Возврат РезультатОперации;
		КонецЕсли;
		
		Если РезультатПроверки.СтатусОплаты = ИдентификаторСтатусаВПроцессе() Тогда
			Отменен = Истина;
			РезультатПроверки.СтатусОплаты = ИдентификаторСтатусаОтклонена();
		КонецЕсли;
		
		РегистрыСведений.ИдентификаторыОперацийСБП.ЗаписатьСтатусОперации(
			ДокументОплаты,
			РезультатПроверки.ИдентификаторПлатежнойСистемы,
			РезультатПроверки.ДатаОперации,
			РезультатПроверки.СтатусОплаты,
			,
			ПараметрыСтатуса.ДатаЗапросаСтатуса);
		
	Иначе
		Если ДлительныйВызов Тогда
			
			НастройкиВызова = ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйИтеративныйВызовОперации();
			Пока ИнтеграцияСПлатежнымиСистемамиСлужебный.ВозможенВызовОперации(НастройкиВызова) Цикл
				
				РезультатПроверки = ОперацияСтатусЗаказНаОплату(
					ПараметрыСтатуса.ИдентификаторОплаты,
					ПараметрыСтатуса.ДатаЗапросаСтатуса,
					ПараметрыИнтеграции);
				
				Если ЗначениеЗаполнено(РезультатПроверки.КодОшибки) Тогда
					ЗаполнитьЗначенияСвойств(
						РезультатОперации,
						РезультатПроверки,
						"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
					РезультатОперации.СтатусОперации = ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииОшибка();
					Возврат РезультатОперации;
				КонецЕсли;
				
				Если РезультатПроверки.ОбновитьДатуЗапросаСтатуса Тогда
					ПараметрыСтатуса.ДатаЗапросаСтатуса = ТекущаяДатаСеанса();
				КонецЕсли;
				
				Оплачен = (РезультатПроверки.СтатусОплаты = ИдентификаторСтатусаВыполнена());
				Отменен = (РезультатПроверки.СтатусОплаты = ИдентификаторСтатусаОтклонена());
				Если Оплачен Или Отменен Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			
			РезультатПроверки = ОперацияСтатусЗаказНаОплату(
				ПараметрыСтатуса.ИдентификаторОплаты,
				ПараметрыСтатуса.ДатаЗапросаСтатуса,
				ПараметрыИнтеграции);
			
			Если ЗначениеЗаполнено(РезультатПроверки.КодОшибки) Тогда
				ЗаполнитьЗначенияСвойств(
					РезультатОперации,
					РезультатПроверки,
					"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
				РезультатОперации.СтатусОперации = ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииОшибка();
				Возврат РезультатОперации;
			КонецЕсли;
			
			Оплачен = (РезультатПроверки.СтатусОплаты = ИдентификаторСтатусаВыполнена());
			Отменен = (РезультатПроверки.СтатусОплаты = ИдентификаторСтатусаОтклонена());
			
		КонецЕсли;
		
		РегистрыСведений.ИдентификаторыОперацийСБП.ЗаписатьСтатусОперации(
			ДокументОплаты,
			РезультатПроверки.ИдентификаторПлатежнойСистемы,
			РезультатПроверки.ДатаОперации,
			РезультатПроверки.СтатусОплаты,
			,
			ПараметрыСтатуса.ДатаЗапросаСтатуса);
		
	КонецЕсли;
	
	Если Оплачен Тогда
		РезультатОперации.СтатусОперации
			= ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииВыполнена();
	ИначеЕсли Отменен Тогда
		РезультатОперации.СтатусОперации
			= ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииОтменена();
	Иначе
		РезультатОперации.СтатусОперации
			= ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииВыполняется();
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

// См. ИнтеграцияСПлатежнымиСистемами.ВозвратОплаты.
//
Функция ВозвратОплаты(
		ДокументВозврата,
		ОбъектОплаты,
		ПлатежнаяСистема,
		ПараметрыИнтеграции,
		ДополнительныеПараметры) Экспорт
	
	РезультатОперации = ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйРезультатДлительнойОперации();
	РезультатОперации.Вставить("Подтверждение", Неопределено);
	
	ЗаказНаВозврат = ОписаниеЗаказаНаВозврат();
	ИнтеграцияПодсистемБИП.ПриФормированииЗаказаНаВозвратСБП(
		ДокументВозврата,
		ЗаказНаВозврат,
		ПараметрыИнтеграции.ТорговаяТочкаСсылка,
		ДополнительныеПараметры);
	ИнтеграцияСПлатежнымиСистемамиПереопределяемый.ПриФормированииЗаказаНаВозвратСБП(
		ДокументВозврата,
		ЗаказНаВозврат,
		ПараметрыИнтеграции.ТорговаяТочкаСсылка,
		ДополнительныеПараметры);
	
	// Валидация данных заказа на оплату и настроек.
	ПроверитьЗаказНаВозврат(
		ЗаказНаВозврат,
		РезультатОперации);
	
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	ИдентификаторыОперации = Неопределено;
	Если Метаданные.ОпределяемыеТипы.ДокументОперацииБИП.Тип.СодержитТип(ТипЗнч(ОбъектОплаты)) Тогда
		
		ИдентификаторыОперации = РегистрыСведений.ИдентификаторыОперацийСБП.ИдентификаторыОперацииСБП(
			ОбъектОплаты);
		
	ИначеЕсли ТипЗнч(ОбъектОплаты) = Тип("Строка") Тогда
		
		// Переданный идентификатор должен соответствовать формату:
		// {Идентификатор системы}:{Идентификатор СПБ}:{Идентификатор платежной системы}
		ДанныеСтроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			ОбъектОплаты,
			":");
		
		Сч = 0;
		Пока Сч < ДанныеСтроки.Количество() Цикл
			ДанныеСтроки[Сч] = СокрЛП(ДанныеСтроки[Сч]);
			Сч = Сч + 1;
		КонецЦикла;
		
		ПроверитьИдентификаторОбъектаОплаты(ДанныеСтроки, РезультатОперации);
		
		Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
			Возврат РезультатОперации;
		КонецЕсли;
		
		ИдентификаторыОперации = РегистрыСведений.ИдентификаторыОперацийСБП.НовыйИдентификаторыОперацииСБП(
			ДанныеСтроки[1],
			ДанныеСтроки[2]);
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Возврат для продажи не поддерживается.'");
	КонецЕсли;
	
	Если ИдентификаторыОперации = Неопределено
		Или Не ЗначениеЗаполнено(ИдентификаторыОперации.ИдентификаторПлатежнойСистемы)
		Или Не ЗначениеЗаполнено(ИдентификаторыОперации.ИдентификаторОплаты) Тогда
		
		РезультатОперации.СтатусОперации  = ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииОшибка();
		РезультатОперации.КодОшибки          = ИнтеграцияСПлатежнымиСистемамиСлужебный.КодОшибкиНеверныйФорматЗапроса();
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Не обнаружен идентификатор документа оплаты в платежной системе.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Не обнаружен идентификатор документа оплаты в платежной системе.'");
		
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	// Формирование идентификаторов возврата.
	Идентификатор = ОпределитьИдентификаторЗаказаНаВозврат(
		РезультатОперации,
		ДокументВозврата,
		ЗаказНаВозврат,
		ИдентификаторыОперации.ИдентификаторОплаты,
		ПараметрыИнтеграции);
	
	// Прекратить вызов операции, в случае ошибок.
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	// Сохранить данные заказа для проверки
	// идемпотентности.
	РегистрыСведений.ДанныеОперацийСБП.СохранитьДанныеВозврата(
		Идентификатор,
		ЗаказНаВозврат,
		ДокументВозврата,
		ПараметрыИнтеграции.ТорговаяТочка);
	
	ПараметрыВозврата = Новый Структура;
	ПараметрыВозврата.Вставить("СуммаВозврата",                 ЗаказНаВозврат.СуммаВозврата);
	ПараметрыВозврата.Вставить("ДатаВозврата",                  ЗаказНаВозврат.ДатаВозврата);
	ПараметрыВозврата.Вставить("ИдентификаторСПБ",              ИдентификаторыОперации.ИдентификаторОплаты);
	ПараметрыВозврата.Вставить("ИдентификаторПлатежнойСистемы", ИдентификаторыОперации.ИдентификаторПлатежнойСистемы);
	ПараметрыВозврата.Вставить("ПлатежнаяСистема",              ПлатежнаяСистема);
	ПараметрыВозврата.Вставить("ИдентификаторыОперации",        Идентификатор);
	
	РезультатВозврата = ОперацияВозвратОплаты(
		ПараметрыВозврата,
		ПараметрыИнтеграции);
	
	Если ЗначениеЗаполнено(РезультатВозврата.КодОшибки) Тогда
		ЗаполнитьЗначенияСвойств(
				РезультатОперации,
				РезультатВозврата,
				"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
		РезультатОперации.СтатусОперации = ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииОшибка();
		Возврат РезультатОперации;
	КонецЕсли;
	
	РегистрыСведений.ИдентификаторыОперацийСБП.ЗаписатьСтатусОперации(
		ДокументВозврата,
		РезультатВозврата.ИдентификаторВозврата,
		РезультатВозврата.ДатаОперации,
		РезультатВозврата.СтатусВозврата,
		РезультатВозврата.ИдентификаторСессии);
	
	ОбработатьСтатусВозврата(
		РезультатОперации,
		РезультатВозврата.СтатусВозврата);
	
	РезультатОперации.Подтверждение = РезультатВозврата.Подтверждение;
	
	Возврат РезультатОперации;
	
КонецФункции

// См. ИнтеграцияСПлатежнымиСистемами.ПодтвердитьВозврат.
//
Функция ПодтвердитьВозврат(ДокументВозврата, ПараметрыИнтеграции) Экспорт
	
	РезультатОперации = ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйРезультатДлительнойОперации();
	
	ИдентификаторыОперации = РегистрыСведений.ИдентификаторыОперацийСБП.ИдентификаторыОперацииСБП(
		ДокументВозврата);
	ИдентификаторСессии = РегистрыСведений.ИдентификаторыОперацийСБП.ИдентификаторСессии(
		ДокументВозврата);
	
	РезультатПодтверждения = ОперацияПодтверждениеВозврата(
		ИдентификаторыОперации,
		ИдентификаторСессии,
		ПараметрыИнтеграции);
	
	Если ЗначениеЗаполнено(РезультатПодтверждения.КодОшибки) Тогда
		ЗаполнитьЗначенияСвойств(
			РезультатОперации,
			РезультатПодтверждения,
			"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
		РезультатОперации.СтатусОперации = ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииОшибка();
		Возврат РезультатОперации;
	КонецЕсли;
	
	ОбработатьСтатусВозврата(
		РезультатОперации,
		РезультатПодтверждения.СтатусВозврата);
	
	РегистрыСведений.ИдентификаторыОперацийСБП.ЗаписатьСтатусОперации(
		ДокументВозврата,
		РезультатПодтверждения.ИдентификаторВозврата,
		РезультатПодтверждения.ДатаОперации,
		РезультатПодтверждения.СтатусВозврата);
	
	Возврат РезультатОперации;
	
КонецФункции

// См. ИнтеграцияСПлатежнымиСистемами.СтатусВозврата.
//
Функция СтатусВозврата(ДокументВозврата, ПараметрыИнтеграции, ДлительныйВызов) Экспорт
	
	РезультатОперации = ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйРезультатДлительнойОперации();
	
	ПараметрыСтатуса = РегистрыСведений.ИдентификаторыОперацийСБП.ПараметрыОпределенияСтатусаОперации(
		ДокументВозврата);
	
	ОбработатьСтатусВозврата(
		РезультатОперации,
		ПараметрыСтатуса.СтатусОперации);
	
	Если РезультатОперации.СтатусОперации = ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииВыполняется() Тогда
		
		Если ДлительныйВызов Тогда
			
			НастройкиВызова = ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйИтеративныйВызовОперации();
			Пока ИнтеграцияСПлатежнымиСистемамиСлужебный.ВозможенВызовОперации(НастройкиВызова) Цикл
				
				РезультатПроверки = ОперацияСтатусВозврата(
					ПараметрыСтатуса.ИдентификаторПлатежнойСистемы,
					ПараметрыСтатуса.ДатаЗапросаСтатуса,
					ПараметрыИнтеграции);
				
				Если ЗначениеЗаполнено(РезультатПроверки.КодОшибки) Тогда
					ЗаполнитьЗначенияСвойств(
						РезультатОперации,
						РезультатПроверки,
						"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
					РезультатОперации.СтатусОперации = ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииОшибка();
					Возврат РезультатОперации;
				КонецЕсли;
				
				Если РезультатПроверки.ОбновитьДатуЗапросаСтатуса Тогда
					ПараметрыСтатуса.ДатаЗапросаСтатуса = ТекущаяДатаСеанса();
				КонецЕсли;
				
				ОбработатьСтатусВозврата(
					РезультатОперации,
					РезультатПроверки.СтатусВозврата);
				
				Если РезультатОперации.СтатусОперации <> ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииВыполняется() Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			РезультатПроверки = ОперацияСтатусВозврата(
				ПараметрыСтатуса.ИдентификаторПлатежнойСистемы,
				ПараметрыСтатуса.ДатаЗапросаСтатуса,
				ПараметрыИнтеграции);
			
			Если ЗначениеЗаполнено(РезультатПроверки.КодОшибки) Тогда
				ЗаполнитьЗначенияСвойств(
					РезультатОперации,
					РезультатПроверки,
					"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
				РезультатОперации.СтатусОперации = ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииОшибка();
				Возврат РезультатОперации;
			КонецЕсли;
			
			ОбработатьСтатусВозврата(
				РезультатОперации,
				РезультатПроверки.СтатусВозврата);
			
		КонецЕсли;
		
		РегистрыСведений.ИдентификаторыОперацийСБП.ЗаписатьСтатусОперации(
			ДокументВозврата,
			ПараметрыСтатуса.ИдентификаторПлатежнойСистемы,
			РезультатПроверки.ДатаОперации,
			РезультатПроверки.СтатусВозврата,
			,
			ПараметрыСтатуса.ДатаЗапросаСтатуса);
		
	ИначеЕсли РезультатОперации.СтатусОперации = ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииТребуетсяПодтверждение() Тогда
		ВызватьИсключение НСтр("ru = 'Не правильный порядок вызова операций.'");
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

// См. ИнтеграцияСПлатежнымиСистемамиСлужебный.ОбновлениеНастроекУчастниковСБП.
//
Процедура ОбновлениеНастроекУчастниковСБП() Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		ВызватьИсключение НСтр("ru = 'Обновление настроек участников СБП в модели сервиса
			|выполняется через поставляемые данные'");
	КонецЕсли;
	
	Настройки = ОперацияНастройкиУчастниковСБП();
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьНастройкиУчастниковСБП(Настройки);
	
КонецПроцедуры

// См. ИнтеграцияСПлатежнымиСистемамиСлужебный.УдалитьИдентификаторыОперации.
//
Процедура УдалитьИдентификаторыОперации(ДокументОперации) Экспорт
	
	Идентификатор = РегистрыСведений.ИдентификаторыОперацийСБП.ИдентификаторОперации(
		ДокументОперации);
	
	Если Идентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		Набор = РегистрыСведений.ИдентификаторыОперацийСБП.СоздатьНаборЗаписей();
		Набор.Отбор.ДокументОперации.Установить(ДокументОперации);
		Набор.Записать();
		
		Набор = РегистрыСведений.ДанныеОперацийСБП.СоздатьНаборЗаписей();
		Набор.Отбор.Идентификатор.Установить(Идентификатор);
		Набор.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			Истина);
		
		ВызватьИсключение НСтр("ru = 'Не удалось удалить данные операции СБП.'");
		
	КонецПопытки;
	
КонецПроцедуры

// См. ИнтеграцияСПлатежнымиСистемамиСлужебный.СтатусыОперацияC2B.
//
Функция СтатусыОперацийC2B() Экспорт
	
	ОбработанныеОперации = Новый Массив;
	ДанныеОпераций = ДанныеОперацийСТерминальнымСтатусом(ОбработанныеОперации);
	
	ОбработатьСтатусыСтатусыОплат(ДанныеОпераций, ОбработанныеОперации);
	ОбработатьСтатусыСтатусыВозвратов(ДанныеОпераций, ОбработанныеОперации);
	
	Возврат ОбработанныеОперации;
	
КонецФункции

#КонецОбласти

#Область СлужебныеОперацииОплат

// Формирует новое описание заказа на оплату в платежной системе. При проведении оплаты
// проверяется заполнение всех свойств заказа.
//
// Возвращаемое значение:
//  Структура - содержит описание заказа на оплату в платежной системе:
//    * СуммаОплаты - Число - сумма оплаты в платежной системе. Сумма, которую необходимо
//      списать со счета или карты покупателя;
//    * ДатаОплаты - Дата - дата операции продажи;
//    * СрокЖизниQRКода - Число - содержит значение срока действия QR-кода в целых минутах.
//      Минимальное значение - 5 минут, максимальное значение - 129 600 минут
//      (90 дней в минутах). В случае передачи значения не входящего в выше
//      описанный диапазон возвращать ошибку "НеверныйФорматЗапроса".
//      Если значение не предано используется стандартный срок использования СБП.
//    * НазначениеПлатежа - Строка - информация о платеже, которая будет отображена пользователю
//      в момент сканирования QR-кода в мобильном приложении. Рекомендуется
//      делать строку не длинной и включать информацию об организации, которая
//      является получателем денежных средств, например:
//      Оплата СБП 524,00 RUB ООО Ромашка
//      Если строка не заполнена, будет передано стандартное представление
//      назначения: Оплата СБП 524,00 RUB;
//    * ОтложенноеПолучениеСтатуса - Булево - признак загрузки статуса оплаты регламентным заданием.
//
Функция ОписаниеЗаказаНаОплату()
	
	ЗаказаНаОплату = Новый Структура;
	ЗаказаНаОплату.Вставить("ДатаОплаты", Дата(1, 1, 1));
	ЗаказаНаОплату.Вставить("СуммаОплаты", 0);
	ЗаказаНаОплату.Вставить("СрокЖизниQRКода", Неопределено);
	ЗаказаНаОплату.Вставить("НазначениеПлатежа", "");
	ЗаказаНаОплату.Вставить("ОтложенноеПолучениеСтатуса", Ложь);
	
	Возврат ЗаказаНаОплату;
	
КонецФункции

// Формирует новый идентификатор заказа на оплату или получает существующий.
//
// Параметры:
//  РезультатОперации - Структура  - см. НовыйРезультатИдентификаторОплаты;
//  ДокументОплаты - ДокументСсылка - документ, который отражает
//                   оплату в информационной базе;
//  ЗаказНаОплату - Структура - описание заказа на оплату см. функцию ОписаниеЗаказаНаОплату;
//  ПараметрыИнтеграции - Структура - параметры выполнения операции
//                        см. ПараметрыИнтеграции.
//
// Возвращаемое значение:
//  Строка - внешний идентификатор документа оплаты;
//
Функция ОпределитьИдентификаторЗаказаНаОплату(
		РезультатОперации,
		ДокументОплаты,
		ЗаказНаОплату,
		ПараметрыИнтеграции)
	
	Идентификатор = РегистрыСведений.ИдентификаторыОперацийСБП.ИдентификаторОперации(
		ДокументОплаты);
	
	// Первая итерация, дополнительных проверок не требуется.
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		Возврат РегистрыСведений.ИдентификаторыОперацийСБП.НовыйИдентификаторОперации(
			ДокументОплаты,
			ПараметрыИнтеграции.ТорговаяТочка,
			ПараметрыИнтеграции.ТорговаяТочкаСсылка,
			,
			Истина,
			ЗаказНаОплату.ОтложенноеПолучениеСтатуса);
	КонецЕсли;
	
	ПараметрыСтатуса = РегистрыСведений.ИдентификаторыОперацийСБП.ПараметрыОпределенияСтатусаОперации(
		ДокументОплаты);
	
	// Предыдущая операция генерации завершилась ошибкой,
	// необходимо запросить новый QR-код.
	Если Не ЗначениеЗаполнено(ПараметрыСтатуса.ИдентификаторОплаты) Тогда
		Возврат РегистрыСведений.ИдентификаторыОперацийСБП.НовыйИдентификаторОперации(
			ДокументОплаты,
			ПараметрыИнтеграции.ТорговаяТочка,
			ПараметрыИнтеграции.ТорговаяТочкаСсылка,
			,
			Ложь,
			ЗаказНаОплату.ОтложенноеПолучениеСтатуса);
	КонецЕсли;
	
	ИсторическиеДанные = РегистрыСведений.ДанныеОперацийСБП.ДанныеОперацииСБППоИдентификатору(
		Идентификатор);
	
	// Если по документу ранее был сформирован возврат, делать по нему оплату запрещено.
	// Необходимо получить статус возврата, а для оплаты сформировать новый документ.
	Если Не ИсторическиеДанные.Оплата И ЗначениеЗаполнено(ПараметрыСтатуса.ИдентификаторПлатежнойСистемы) Тогда
		РезультатОперации.КодОшибки          = ИнтеграцияСПлатежнымиСистемамиСлужебный.КодОшибкиНеверныйФорматЗапроса();
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Для документа ранее был сформирован возврат оплаты, создание новой оплаты запрещено.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Для документа ранее был сформирован возврат оплаты, создание новой оплаты запрещено.'");
		Возврат Неопределено;
	КонецЕсли;
	
	// Если параметры заказа на оплату не изменились
	// можно выполнить повторный запрос, т.к. операция
	// создания заказа на оплату поддерживает идемпотентность.
	Если ИсторическиеДанные <> Неопределено
		И ИсторическиеДанные.ДатаОперации = ЗаказНаОплату.ДатаОплаты
		И ИсторическиеДанные.СуммаОперации = ЗаказНаОплату.СуммаОплаты
		И ИсторическиеДанные.НазначениеПлатежа = ЗаказНаОплату.НазначениеПлатежа
		И ИсторическиеДанные.ТорговаяТочка = ПараметрыИнтеграции.ТорговаяТочка
		И ИсторическиеДанные.ДокументОперации = ДокументОплаты Тогда
		
		Возврат Идентификатор;
		
	Иначе
		
		// Т.к. у СБП на текущий момент отсутствует операция
		// аннулирования QR-кода перед генерацией нового
		// следует проверить оплату предыдущего.
		РезультатПроверки = ОперацияСтатусЗаказНаОплату(
			ПараметрыСтатуса.ИдентификаторОплаты,
			Дата(1, 1, 1),
			ПараметрыИнтеграции);
		
		Если РезультатПроверки.СтатусОплаты = ИдентификаторСтатусаВыполнена() Тогда
			РезультатОперации.КодОшибки = ИнтеграцияСПлатежнымиСистемамиСлужебный.КодОшибкиУжеОплачен();
			РезультатОперации.СообщениеОбОшибке = НСтр("ru = 'Оплата по ранее сформированному QR-коду уже выполнена, создание нового запрещено.'");
			РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Оплата по ранее сформированному QR-коду уже выполнена, создание нового запрещено.'");
			Возврат Неопределено;
		КонецЕсли;
	
		Возврат РегистрыСведений.ИдентификаторыОперацийСБП.НовыйИдентификаторОперации(
			ДокументОплаты,
			ПараметрыИнтеграции.ТорговаяТочка,
			ПараметрыИнтеграции.ТорговаяТочкаСсылка,
			,
			Ложь,
			ЗаказНаОплату.ОтложенноеПолучениеСтатуса);
		
	КонецЕсли;
	
КонецФункции

// Формирует новый идентификатор заказа на возврат или получает существующий.
//
// Параметры:
//  РезультатОперации - Структура  - см. НовыйРезультатИдентификаторОплаты;
//  ДокументОплаты - ДокументСсылка - документ, который отражает
//                   оплату в информационной базе;
//  ЗаказНаВозврат - Структура - описание заказа на оплату см. функцию ОписаниеЗаказаНаВозврат;
//  ИдентификаторОплаты - Строка - идентификатор оплаты по которой производится возврат;
//  ПараметрыИнтеграции - Структура - параметры выполнения операции
//                        см. ПараметрыИнтеграции.
//
// Возвращаемое значение:
//  Строка - внешний идентификатор документа возврата;
//
Функция ОпределитьИдентификаторЗаказаНаВозврат(
		РезультатОперации,
		ДокументВозврата,
		ЗаказНаВозврат,
		ИдентификаторОплаты,
		ПараметрыИнтеграции)
	
	Идентификатор = РегистрыСведений.ИдентификаторыОперацийСБП.ИдентификаторОперации(
		ДокументВозврата);
	
	// Первая итерация, дополнительных проверок не требуется.
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		Возврат РегистрыСведений.ИдентификаторыОперацийСБП.НовыйИдентификаторОперации(
			ДокументВозврата,
			ПараметрыИнтеграции.ТорговаяТочка,
			ПараметрыИнтеграции.ТорговаяТочкаСсылка,
			ИдентификаторОплаты);
	КонецЕсли;
	
	ПараметрыСтатуса = РегистрыСведений.ИдентификаторыОперацийСБП.ПараметрыОпределенияСтатусаОперации(
		ДокументВозврата);
	
	// Если по возврату уже получен отрицательный терминальный статус
	// можно сгенерировать новый идентификатор операции.
	Если ПараметрыСтатуса.СтатусОперации = ИдентификаторСтатусаНеОплачен()
		Или ПараметрыСтатуса.СтатусОперации = ИдентификаторСтатусаНетИнформации()
		Или ПараметрыСтатуса.СтатусОперации = ИдентификаторСтатусаОтклонена()
		Или ПараметрыСтатуса.СтатусОперации = ИдентификаторСтатусаПревышение() Тогда
		Возврат РегистрыСведений.ИдентификаторыОперацийСБП.НовыйИдентификаторОперации(
			ДокументВозврата,
			ПараметрыИнтеграции.ТорговаяТочка,
			ПараметрыИнтеграции.ТорговаяТочкаСсылка,
			ИдентификаторОплаты);
	КонецЕсли;
	
	ИсторическиеДанные = РегистрыСведений.ДанныеОперацийСБП.ДанныеОперацииСБППоИдентификатору(
		Идентификатор);
	
	// Если по документу ранее был сформирован идентификатор оплаты, делать по нему возврат запрещено.
	// Необходимо получить статус оплаты, а для возврата сформировать новый документ.
	Если ИсторическиеДанные.Оплата И ЗначениеЗаполнено(ПараметрыСтатуса.ИдентификаторОплаты) Тогда
		РезультатОперации.КодОшибки          = ИнтеграцияСПлатежнымиСистемамиСлужебный.КодОшибкиНеверныйФорматЗапроса();
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Для документа ранее был сформирован идентификатор оплаты, создание возврата запрещено.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Для документа ранее был сформирован идентификатор оплаты, создание возврата запрещено.'");
		Возврат Неопределено;
	КонецЕсли;
	
	// Если параметры заказа на возврат не изменились
	// можно выполнить повторный запрос, т.к. операция
	// создания заказа на возврат поддерживает идемпотентность.
	Если ИсторическиеДанные <> Неопределено
		И ИсторическиеДанные.ДатаОперации = ЗаказНаВозврат.ДатаВозврата
		И ИсторическиеДанные.СуммаОперации = ЗаказНаВозврат.СуммаВозврата
		И ИсторическиеДанные.ТорговаяТочка = ПараметрыИнтеграции.ТорговаяТочка
		И ИсторическиеДанные.ДокументОперации = ДокументВозврата Тогда
		
		Возврат Идентификатор;
		
	Иначе
		
		РезультатОперации.КодОшибки          = ИнтеграцияСПлатежнымиСистемамиСлужебный.КодОшибкиНеверныйФорматЗапроса();
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Для документа уже сформирован возврат со значениями суммы и даты, отличающимися от текущего документа. Создание возврата запрещено.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Для документа уже сформирован возврат со значениями суммы и даты, отличающимися от текущего документа. Создание возврата запрещено.'");
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Производит валидацию параметров заказа на оплату в платежной системе.
//
// Параметры:
//  ЗаказНаОплату - Структура - данные для оплаты в платежной системе.
//  РезультатОперации  - Структура - результат проверки заказа на оплату в платежной системе:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//                  может быть обработан вызывающим методом:
//    *СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора;
//
Процедура ПроверитьЗаказНаОплату(ЗаказНаОплату, РезультатОперации)
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(ЗаказНаОплату.СуммаОплаты)
		Или Не ЗначениеЗаполнено(ЗаказНаОплату.ДатаОплаты) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		РезультатОперации.КодОшибки          = ИнтеграцияСПлатежнымиСистемамиСлужебный.КодОшибкиНеверныйФорматЗапроса();
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Некорректно сформирован заказ на оплату для платежной системы. Обратитесь к администратору.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'При проверке заказа на оплату в платежной системе возникли ошибки.'");
		
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
	КонецЕсли;
	
КонецПроцедуры

// Производит проверку идентификатора оплаты.
//
// Параметры:
//  ДанныеСтроки - Строка - идентификатор оплаты;
//  РезультатОперации - Структура - см. ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйРезультатДлительнойОперации.
//
Процедура ПроверитьИдентификаторОбъектаОплаты(ДанныеСтроки, РезультатОперации)
	
	Если ДанныеСтроки.Количество() <> 3 Тогда
		
		РезультатОперации.СтатусОперации  = ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииОшибка();
		РезультатОперации.КодОшибки          = ИнтеграцияСПлатежнымиСистемамиСлужебный.КодОшибкиНеверныйФорматЗапроса();
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Идентификатор оплаты в платежной системе не соответствует формату.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Идентификатор оплаты в платежной системе не соответствует формату.'");
		
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
	ИначеЕсли НРег(ДанныеСтроки[0]) <> НРег(ИнтеграцияСПлатежнымиСистемамиСлужебный.ИдентификаторСБП()) Тогда
		
		РезультатОперации.СтатусОперации  = ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииОшибка();
		РезультатОперации.КодОшибки          = ИнтеграцияСПлатежнымиСистемамиСлужебный.КодОшибкиНеверныйФорматЗапроса();
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Идентификатор системы отличается от СБП.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Идентификатор системы отличается от СБП.'");
		
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
	ИначеЕсли Не ЗначениеЗаполнено(ДанныеСтроки[1]) Тогда
		
		РезультатОперации.СтатусОперации  = ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииОшибка();
		РезультатОперации.КодОшибки          = ИнтеграцияСПлатежнымиСистемамиСлужебный.КодОшибкиНеверныйФорматЗапроса();
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Идентификатор QR-кода не заполнен.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Идентификатор QR-кода не заполнен.'");
		
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
	ИначеЕсли Не ЗначениеЗаполнено(ДанныеСтроки[2]) Тогда
		
		РезультатОперации.СтатусОперации  = ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииОшибка();
		РезультатОперации.КодОшибки          = ИнтеграцияСПлатежнымиСистемамиСлужебный.КодОшибкиНеверныйФорматЗапроса();
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Идентификатор оплаты не заполнен.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Идентификатор оплаты не заполнен.'");
		
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеОперацииВозвратов

// Формирует новое описание заказа на возврат в платежной системе. При проведении возврата
// проверяется заполнение всех свойств.
//
// Возвращаемое значение:
//  Структура - содержит описание заказа на оплату в платежной системе:
//    *СуммаВозврата - Число - сумма возврата в платежной системе. Сумма, которую необходимо
//                   списать со счета или карты покупателя;
//    *ДатаВозврата - Дата - дата операции возврата.
//
Функция ОписаниеЗаказаНаВозврат()
	
	ЗаказаНаОплату = Новый Структура;
	ЗаказаНаОплату.Вставить("ДатаВозврата",  Дата(1, 1, 1));
	ЗаказаНаОплату.Вставить("СуммаВозврата", 0);
	
	Возврат ЗаказаНаОплату;
	
КонецФункции

// Производит валидацию параметров заказа на возврат в платежной системе.
//
// Параметры:
//  ЗаказНаВозврат - Структура - данные для оплаты в платежной системе.
//  РезультатОперации  - Структура - результат создания возврата оплаты в платежной системе:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//                  может быть обработан вызывающим методом:
//    *СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора;
//
Процедура ПроверитьЗаказНаВозврат(ЗаказНаВозврат, РезультатОперации)
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(ЗаказНаВозврат.СуммаВозврата)
		Или Не ЗначениеЗаполнено(ЗаказНаВозврат.ДатаВозврата) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		РезультатОперации.КодОшибки          = ИнтеграцияСПлатежнымиСистемамиСлужебный.КодОшибкиНеверныйФорматЗапроса();
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Некорректно сформирован заказ на возврат для платежной системы. Обратитесь к администратору.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'При проверке заказа на возврат в платежной системе возникли ошибки.'");
		
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет результат операции на основании статуса операции возврата.
//
// Параметры:
//  СтатусВозврата - Строка - статус возврата СБП;
//  РезультатОперации - Структура - см. ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйРезультатДлительнойОперации.
//
Процедура ОбработатьСтатусВозврата(РезультатОперации, СтатусВозврата)
	
	Если СтатусВозврата = ИдентификаторСтатусаПревышение() Тогда
		РезультатОперации.СтатусОперации     = ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииОшибка();
		РезультатОперации.КодОшибки          = ИнтеграцияСПлатежнымиСистемамиСлужебный.КодОшибкиНеверныйФорматЗапроса();
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Превышена допустимая сумма возврата по заказу на оплату.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Превышена допустимая сумма возврата по заказу на оплату.'");
	ИначеЕсли СтатусВозврата = ИдентификаторСтатусаНеОплачен() Тогда
		РезультатОперации.СтатусОперации     = ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииОшибка();
		РезультатОперации.КодОшибки          = ИнтеграцияСПлатежнымиСистемамиСлужебный.КодОшибкиНеверныйФорматЗапроса();
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Оплата в платежной системе не выполнена, возврат невозможен.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Оплата в платежной системе не выполнена, возврат невозможен.'");
	ИначеЕсли СтатусВозврата = ИдентификаторСтатусаНетИнформации() Тогда
		РезультатОперации.СтатусОперации     = ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииОшибка();
		РезультатОперации.КодОшибки          = ИнтеграцияСПлатежнымиСистемамиСлужебный.КодОшибкиНеверныйФорматЗапроса();
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Оплата в платежной системе не обнаружена, возврат невозможен.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Оплата в платежной системе не обнаружена, возврат невозможен.'");
	ИначеЕсли СтатусВозврата = ИдентификаторСтатусаОтменена() Тогда
		РезультатОперации.СтатусОперации     = ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииОтменена();
		РезультатОперации.КодОшибки          = ИнтеграцияСПлатежнымиСистемамиСлужебный.КодОшибкиНеизвестнаяОшибка();
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Операция отменена по неизвестной причине, повторите операцию или обратитесь к администратору.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Операция отменена по неизвестной причине, дополнительная информация об отмене записана в журнал регистрации.'");
	ИначеЕсли СтатусВозврата = ИдентификаторСтатусаВыполнена() Тогда
		РезультатОперации.СтатусОперации  = ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииВыполнена();
	ИначеЕсли СтатусВозврата = ИдентификаторСтатусаВПроцессе() Тогда
		РезультатОперации.СтатусОперации  = ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииВыполняется();
	ИначеЕсли СтатусВозврата = ИдентификаторСтатусаТребуетсяПодтверждение() Тогда
		РезультатОперации.СтатусОперации  = ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииТребуетсяПодтверждение();
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не известный статус возврата %1'"),
			СтатусВозврата);
	КонецЕсли;
	
	Если РезультатОперации.СтатусОперации  = ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииОшибка() Тогда
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеОперацииСверкиВзаиморасчетов

// Заполняет результат операции на основании статуса отчета.
//
// Параметры:
//  РезультатОперации - Структура - см. ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйРезультатДлительнойОперации;
//  СтатусОтчета - Строка - статус формирования отчета;
//  ТипОшибки - Строка - вид ошибки формирования отчета.
//
Процедура ОбработатьСтатусОтчета(РезультатОперации, СтатусОтчета, ТипОшибки)
	
	Если СтатусОтчета = ИдентификаторСтатусаВыполнена() Тогда
		РезультатОперации.СтатусОперации  = ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииВыполнена();
	ИначеЕсли СтатусОтчета = ИдентификаторСтатусаОжидание() Тогда
		РезультатОперации.СтатусОперации  = ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииВыполняется();
	ИначеЕсли СтатусОтчета = ИдентификаторСтатусаОшибка() Тогда
		РезультатОперации.СтатусОперации = ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииОшибка();
		Если ТипОшибки = ИдентификаторСтатусаПревышенПериод() Тогда
			РезультатОперации.КодОшибки          = ИнтеграцияСПлатежнымиСистемамиСлужебный.КодОшибкиНеверныйФорматЗапроса();
			РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Превышен максимально допустимый период отчета. Измените даты отчета и повторите запрос.'");
			РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Превышен максимально допустимый период отчета. Измените даты отчета и повторите запрос.'");
		Иначе
			РезультатОперации.КодОшибки          = ИнтеграцияСПлатежнымиСистемамиСлужебный.КодОшибкиНеизвестнаяОшибка();
			РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Отчет по сверке оборотов не сформирован.'");
			РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Отчет по сверке оборотов не сформирован.'");
		КонецЕсли;
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не известный статус возврата %1'"),
			СтатусОтчета);
	КонецЕсли;
	
	Если РезультатОперации.СтатусОперации = ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииОшибка() Тогда
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеОперацииОтложенногоПолученияСтатусов

// Определяет операции по котором необходимо выполнить
// получение статуса в сервисе участника СБП.
//
// Параметры:
//  ОбработанныеОперации - Массив из ОпределяемыйТип.ДокументОперацииБИП - данные обработанных документов.
//
// Возвращаемое значение:
//  Массив - данные операция, по которым необходимо загрузить статус.
//
Функция ДанныеОперацийСТерминальнымСтатусом(ОбработанныеОперации)
	
	ОтложенныеОперации = РегистрыСведений.ИдентификаторыОперацийСБП.ОтложенныеОперации();
	
	ДанныеОпераций = Новый Массив;
	
	ИдентификаторыОплаты = Новый ТаблицаЗначений;
	ИдентификаторыОплаты.Колонки.Добавить(
		"Идентификатор",
		ОбщегоНазначения.ОписаниеТипаСтрока(32));
	ИдентификаторыОплаты.Колонки.Добавить(
		"ДатаЗапросаСтатуса",
		ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	
	ИдентификаторыВозвратов = Новый ТаблицаЗначений;
	ИдентификаторыВозвратов.Колонки.Добавить(
		"Идентификатор",
		ОбщегоНазначения.ОписаниеТипаСтрока(32));
	ИдентификаторыВозвратов.Колонки.Добавить(
		"ДатаЗапросаСтатуса",
		ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	
	Для Каждого КлючЗначение Из ОтложенныеОперации Цикл
		
		ОперацииДляОбработки = Новый Массив;
		ДатаЗапросаСтатуса = ТекущаяДатаСеанса();
		
		Для Каждого Операция Из КлючЗначение.Значение Цикл
			
			// Если операция уже в терминальном статусе, выполнять запрос
			// не имеет смысла, необходимо выполнить обработку в прикладной
			// логике и перейти к следующей.
			Если Операция.СтатусОперации <> ИдентификаторСтатусаВПроцессе() Тогда
				ПриЗагрузкеСтатусаОперации(
					Операция.ДокументОперации,
					Операция.СтатусОперации,
					"",
					ОбработанныеОперации);
				Продолжить;
			КонецЕсли;
			
			Если Операция.Оплата Тогда
				
				ДанныеОплаты = ИдентификаторыОплаты.Добавить();
				ДанныеОплаты.Идентификатор = Операция.ИдентификаторОплаты;
				
				ДанныеОплаты.ДатаЗапросаСтатуса = ?(Не ЗначениеЗаполнено(Операция.ДатаЗапросаСтатуса),
					ДатаЗапросаСтатуса,
					Операция.ДатаЗапросаСтатуса);
				
				Если ИдентификаторыОплаты.Количество() > 19 Тогда
					
					РезультатПроверки = ОперацияПроверкаНаличияСтатусаОперацийОплат(
						ИдентификаторыОплаты,
						КлючЗначение.Ключ);
					
					Если Не ЗначениеЗаполнено(РезультатПроверки.КодОшибки) Тогда
						ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
							ОперацииДляОбработки,
							РезультатПроверки.Идентификаторы);
					КонецЕсли;
					
					ИдентификаторыОплаты.Очистить();
					
				КонецЕсли;
				
			Иначе
				
				ДанныеВозврата = ИдентификаторыВозвратов.Добавить();
				ДанныеВозврата.Идентификатор = Операция.ИдентификаторПлатежнойСистемы;
				
				ДанныеВозврата.ДатаЗапросаСтатуса = ?(Не ЗначениеЗаполнено(Операция.ДатаЗапросаСтатуса),
					ДатаЗапросаСтатуса,
					Операция.ДатаЗапросаСтатуса);
				
				Если ИдентификаторыВозвратов.Количество() > 19 Тогда
					
					РезультатПроверки = ОперацияПроверкаНаличияСтатусаОперацийВозвратов(
						ИдентификаторыВозвратов,
						КлючЗначение.Ключ);
					
					Если Не ЗначениеЗаполнено(РезультатПроверки.КодОшибки) Тогда
						ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
							ОперацииДляОбработки,
							РезультатПроверки.Идентификаторы);
					КонецЕсли;
					
					ИдентификаторыВозвратов.Очистить();
					
				КонецЕсли;
				
			КонецЕсли;
			
			
		КонецЦикла;
		
		Если ИдентификаторыОплаты.Количество() <> 0 Тогда
			
			РезультатПроверки = ОперацияПроверкаНаличияСтатусаОперацийОплат(
				ИдентификаторыОплаты,
				КлючЗначение.Ключ);
			
			Если Не ЗначениеЗаполнено(РезультатПроверки.КодОшибки) Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
					ОперацииДляОбработки,
					РезультатПроверки.Идентификаторы);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИдентификаторыВозвратов.Количество() <> 0 Тогда
			
			РезультатПроверки = ОперацияПроверкаНаличияСтатусаОперацийВозвратов(
				ИдентификаторыВозвратов,
				КлючЗначение.Ключ);
			
			Если Не ЗначениеЗаполнено(РезультатПроверки.КодОшибки) Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
					ОперацииДляОбработки,
					РезультатПроверки.Идентификаторы);
			КонецЕсли;
			
		КонецЕсли;
		
		Для Каждого Операция Из КлючЗначение.Значение Цикл
			
			// Если операция уже в терминальном статусе, выполнять запрос
			// не имеет смысла.
			Если Операция.СтатусОперации <> ИдентификаторСтатусаВПроцессе() Тогда
				Продолжить;
			КонецЕсли;
			
			Если Операция.Оплата Тогда
				ЗапроситьСтатус = (ОперацииДляОбработки.Найти(Операция.ИдентификаторОплаты) <> Неопределено);
				ИдентификаторОперации = Операция.ИдентификаторОплаты;
			Иначе
				ЗапроситьСтатус = (ОперацииДляОбработки.Найти(Операция.ИдентификаторПлатежнойСистемы)  <> Неопределено);
				ИдентификаторОперации = Операция.ИдентификаторПлатежнойСистемы;
			КонецЕсли;
			
			Если ЗапроситьСтатус Тогда
				
				// Формирование данных для запроса статуса статуса.
				Операция.ДатаЗапросаСтатуса = ДатаЗапросаСтатуса;
				
				ОтложеннаяОперация = Новый Структура;
				ОтложеннаяОперация.Вставить("ДокументОперации", Операция.ДокументОперации);
				ОтложеннаяОперация.Вставить("НастройкаИнтеграции", Операция.НастройкаИнтеграции);
				ОтложеннаяОперация.Вставить("Идентификатор", ИдентификаторОперации);
				ОтложеннаяОперация.Вставить("ПериодИспользования", Операция.ПериодИспользования);
				ОтложеннаяОперация.Вставить("Оплата", Операция.Оплата);
				ОтложеннаяОперация.Вставить("ЗапроситьСтатус", ЗапроситьСтатус);
				ОтложеннаяОперация.Вставить("ДатаЗапросаСтатуса", ДатаЗапросаСтатуса);
				ОтложеннаяОперация.Вставить("КоличествоПопыток", Операция.КоличествоПопыток);
				
				ДанныеОпераций.Добавить(ОтложеннаяОперация);
				
			ИначеЕсли Не ЗначениеЗаполнено(Операция.ДатаЗапросаСтатуса) Тогда
				
				// Для операций, по которым не требуется запрашивать статус,
				// обновляем дату запроса статуса.
				РегистрыСведений.ИдентификаторыОперацийСБП.ЗаписатьСтатусОперации(
					Операция.ДокументОперации,
					Операция.ИдентификаторПлатежнойСистемы,
					Дата(1, 1, 1),
					Операция.СтатусОперации,
					,
					ДатаЗапросаСтатуса);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДанныеОпераций;
	
КонецФункции

// Загружает статусы оплат операций.
//
// Параметры:
//  ОтложенныеОперации  - Соответствие - см. СервисИнтеграцииССБП.ДанныеОперацийСТерминальнымСтатусом;
//  ОбработанныеОперации - Массив из ОпределяемыйТип.ДокументОперацииБИП - данные обработанных документов.
//
Процедура ОбработатьСтатусыСтатусыОплат(ДанныеОпераций, ОбработанныеОперации)
	
	НастройкиИнтеграции = Новый Массив;
	Для Каждого ОтложеннаяОперация Из ДанныеОпераций Цикл
		
		Если Не ОтложеннаяОперация.Оплата Тогда
			Продолжить;
		КонецЕсли;
		
		НастройкиИнтеграции.Добавить(ОтложеннаяОперация.НастройкаИнтеграции);
		
	КонецЦикла;
	
	ПараметрыНастроекИнтеграции = ИнтеграцияСПлатежнымиСистемамиСлужебный.ПараметрыНастроекИнтеграции(
		НастройкиИнтеграции);
	
	Для Каждого ОтложеннаяОперация Из ДанныеОпераций Цикл
		
		Если Не ОтложеннаяОперация.Оплата Тогда
			Продолжить;
		КонецЕсли;
		
		РезультатПроверки = ОперацияСтатусЗаказНаОплату(
			ОтложеннаяОперация.Идентификатор,
			ОтложеннаяОперация.ДатаЗапросаСтатуса,
			ПараметрыНастроекИнтеграции.Получить(ОтложеннаяОперация.НастройкаИнтеграции),
			Ложь);
		
		Если ЗначениеЗаполнено(РезультатПроверки.КодОшибки) Тогда
			РегистрыСведений.ИдентификаторыОперацийСБП.УвеличитьКоличествоПопытокЗапросаСтатуса(
				ОтложеннаяОперация.ДокументОперации);
			Если ОтложеннаяОперация.КоличествоПопыток >= РегистрыСведений.ИдентификаторыОперацийСБП.МаксимальноеКоличествоПопытокЗапросаСтатуса() Тогда
				ПриЗагрузкеСтатусаОперации(
					ОтложеннаяОперация.ДокументОперации,
					ИдентификаторСтатусаОшибка(),
					РезультатПроверки.СообщениеОбОшибке,
					ОбработанныеОперации);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если РезультатПроверки.СтатусОплаты = ИдентификаторСтатусаВПроцессе()
			И (ОтложеннаяОперация.ПериодИспользования + 600) < ТекущаяДатаСеанса() Тогда
			РезультатПроверки.СтатусОплаты = ИдентификаторСтатусаОтклонена();
		КонецЕсли;
		
		РегистрыСведений.ИдентификаторыОперацийСБП.ЗаписатьСтатусОперации(
			ОтложеннаяОперация.ДокументОперации,
			РезультатПроверки.ИдентификаторПлатежнойСистемы,
			РезультатПроверки.ДатаОперации,
			РезультатПроверки.СтатусОплаты,
			,
			ОтложеннаяОперация.ДатаЗапросаСтатуса);
		
		Если РезультатПроверки.СтатусОплаты = ИдентификаторСтатусаВыполнена()
			Или РезультатПроверки.СтатусОплаты = ИдентификаторСтатусаОтклонена() Тогда
			ПриЗагрузкеСтатусаОперации(
				ОтложеннаяОперация.ДокументОперации,
				РезультатПроверки.СтатусОплаты,
				РезультатПроверки.СообщениеОбОшибке,
				ОбработанныеОперации);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Загружает статусы возвратов операций.
//
// Параметры:
//  ОтложенныеОперации  - Соответствие - см. СервисИнтеграцииССБП.ДанныеОперацийСТерминальнымСтатусом;
//  ОбработанныеОперации - Массив из ОпределяемыйТип.ДокументОперацииБИП - данные обработанных документов.
//
Процедура ОбработатьСтатусыСтатусыВозвратов(ДанныеОпераций, ОбработанныеОперации)
	
	НастройкиИнтеграции = Новый Массив;
	Для Каждого ОтложеннаяОперация Из ДанныеОпераций Цикл
		
		Если ОтложеннаяОперация.Оплата Тогда
			Продолжить;
		КонецЕсли;
		
		НастройкиИнтеграции.Добавить(ОтложеннаяОперация.НастройкаИнтеграции);
		
	КонецЦикла;
	
	ПараметрыНастроекИнтеграции = ИнтеграцияСПлатежнымиСистемамиСлужебный.ПараметрыНастроекИнтеграции(
		НастройкиИнтеграции);
	
	Для Каждого ОтложеннаяОперация Из ДанныеОпераций Цикл
		
		Если ОтложеннаяОперация.Оплата Тогда
			Продолжить;
		КонецЕсли;
		
		РезультатПроверки = ОперацияСтатусВозврата(
			ОтложеннаяОперация.Идентификатор,
			ОтложеннаяОперация.ДатаЗапросаСтатуса,
			ПараметрыНастроекИнтеграции.Получить(ОтложеннаяОперация.НастройкаИнтеграции),
			Ложь);
		
		Если ЗначениеЗаполнено(РезультатПроверки.КодОшибки) Тогда
			РегистрыСведений.ИдентификаторыОперацийСБП.УвеличитьКоличествоПопытокЗапросаСтатуса(
				ОтложеннаяОперация.ДокументОперации);
			Если ОтложеннаяОперация.КоличествоПопыток >= РегистрыСведений.ИдентификаторыОперацийСБП.МаксимальноеКоличествоПопытокЗапросаСтатуса() Тогда
					ПриЗагрузкеСтатусаОперации(
						ОтложеннаяОперация.ДокументОперации,
						ИдентификаторСтатусаОшибка(),
						РезультатПроверки.СообщениеОбОшибке,
						ОбработанныеОперации);
				КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		РегистрыСведений.ИдентификаторыОперацийСБП.ЗаписатьСтатусОперации(
			ОтложеннаяОперация.ДокументОперации,
			ОтложеннаяОперация.Идентификатор,
			РезультатПроверки.ДатаОперации,
			РезультатПроверки.СтатусВозврата,
			,
			ОтложеннаяОперация.ДатаЗапросаСтатуса);
		
		Если РезультатПроверки.СтатусВозврата = ИдентификаторСтатусаВыполнена()
			Или РезультатПроверки.СтатусВозврата = ИдентификаторСтатусаОтменена()
			Или РезультатПроверки.СтатусВозврата = ИдентификаторСтатусаНетИнформации()
			Или РезультатПроверки.СтатусВозврата = ИдентификаторСтатусаПревышение() Тогда
			ПриЗагрузкеСтатусаОперации(
				ОтложеннаяОперация.ДокументОперации,
				РезультатПроверки.СтатусВозврата,
				РезультатПроверки.СообщениеОбОшибке,
				ОбработанныеОперации);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Определяет алгоритм обработки операций, статус которых был получен регламентным заданием.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииБИП - документ, который отражает
//    операцию в информационной базе;
//  СтатусОперацииСервис - Строка - текущее состояние операции операции. Для проверки статуса
//      операции, необходимо функции программного интерфейса общего модуля
//      ИнтеграцияСПлатежнымиСистемамиКлиентСервер. Возможные значения:
//        - "Отменена" - по ранее сформированная операция отменена НСПК;
//        - "Выполнена" - участник СБП подтвердил выполнение операции;
//        - "Ошибка" - не удалось выполнить проверку статуса операции из-за ошибки
//           или участник СБП вернул ошибку;
//  СообщениеОбОшибке - Строка - сообщение пользователю. Заполняется в случае ошибки;
//  ОбработанныеОперации - Массив из ОпределяемыйТип.ДокументОперацииБИП - данные обработанных документов.
//
Процедура ПриЗагрузкеСтатусаОперации(
		ДокументОперации,
		СтатусОперацииСервис,
		СообщениеОбОшибке,
		ОбработанныеОперации)
	
	СтатусОперации = "";
	
	Если СтатусОперацииСервис = ИдентификаторСтатусаВыполнена() Тогда
		СтатусОперации = ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииВыполнена();
	ИначеЕсли СтатусОперацииСервис = ИдентификаторСтатусаОтклонена()
		Или СтатусОперацииСервис = ИдентификаторСтатусаОтменена() Тогда
		СтатусОперации = ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииОтменена();
	ИначеЕсли СтатусОперацииСервис = ИдентификаторСтатусаПревышение()
		Или СтатусОперацииСервис = ИдентификаторСтатусаНеОплачен()
		Или СтатусОперацииСервис = ИдентификаторСтатусаНетИнформации()
		Или СтатусОперацииСервис = ИдентификаторСтатусаОшибка() Тогда
		СтатусОперации = ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииОшибка();
	Иначе
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Передан не валидный статус операции %1 в отложенную обработку.'"),
				СтатусОперацииСервис),
			Истина);
		РегистрыСведений.ИдентификаторыОперацийСБП.УстановитьОтложенноеПолучениеСтатуса(
			ДокументОперации,
			Ложь);
	КонецЕсли;
	
	Попытка
		
		РезультатОбработки = Новый Структура;
		РезультатОбработки.Вставить("СтатусОперации", СтатусОперации);
		РезультатОбработки.Вставить("СообщениеОбОшибке", СообщениеОбОшибке);
		
		Обработан = Ложь;
		
		ИнтеграцияПодсистемБИП.ПриЗагрузкеСтатусаОперации(
			ДокументОперации,
			РезультатОбработки,
			Обработан);
		ИнтеграцияСПлатежнымиСистемамиПереопределяемый.ПриЗагрузкеСтатусаОперации(
			ДокументОперации,
			РезультатОбработки,
			Обработан);
		
		Если Обработан = Истина Тогда
			РегистрыСведений.ИдентификаторыОперацийСБП.УстановитьОтложенноеПолучениеСтатуса(
				ДокументОперации,
				Ложь);
			ОбработанныеОперации.Добавить(ДокументОперации);
		КонецЕсли;
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
			ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
				НСтр("ru = 'По завершении выполнения обработчика ПриЗагрузкеСтатусаОперации не была закрыта транзакция.'"),
				Истина);
		КонецЕсли;
		
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			Истина);
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область Аутентификация

// Возвращает логин и пароль Интернет-поддержки или тикет аутентификации.
//
// Параметры:
//  URLОперации -Строка - URL операции, для которой получаются данные аутентификации.
//
// Возвращаемое значение:
//  Структура - структура, содержащая результаты определения параметров
//              аутентификации пользователя Интернет-поддержки:
//    *ДанныеАутентификации - Структура - параметры аутентификации пользователя Интернет-поддержки;
//    *ИнформацияОбОшибке   - Строка    - информация об ошибке для пользователя.
//    *Ошибка               - Строка    - признак наличия ошибки.
//
Функция ДанныеАутентификации(URLОперации)
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатИПП = ИнтеграцияСПлатежнымиСистемамиСлужебный.ДанныеАутентификации(
		URLОперации);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатИПП;
	
КонецФункции

// Формирует заголовок для способа аутентификации basic authentication.
//
// Параметры:
//  Логин - Строка - логин в платежной системе;
//  Пароль - Строка - пароль в платежной системе.
//
// Возвращаемое значение:
//  Строка - заголовок аутентификации.
//
Функция ЗаголовокБазовойСхемыАутентификации(Логин, Пароль)
	
	Возврат "Basic "
		+ ПолучитьBase64СтрокуИзДвоичныхДанных(
			ПолучитьДвоичныеДанныеИзСтроки(
				Логин + ":" + Пароль));
	
КонецФункции

// Формирует заголовок для способа аутентификации bearer authentication.
//
// Параметры:
//  Токен - Строка - токен в платежной системе.
//
// Возвращаемое значение:
//  Строка - заголовок аутентификации.
//
Функция ЗаголовокBearerАутентификации(Токен)
	
	Возврат "Bearer " + Токен;
	
КонецФункции

// Формирует заголовок для способа аутентификации hmac.
//
// Параметры:
//  СекретныйКлюч - ДвоичныеДанные - секретный ключ для выполнения аутентификации;
//  ДанныеДляПодписи - Массив из Строка  - данные шифрования;
//  ЗначениеХешФункция - Строка - способ вычисления хеш-суммы.
//
// Возвращаемое значение:
//  Строка - заголовок аутентификации.
//
Функция ЗаголовокHMACАутентификации(СекретныйКлюч, ДанныеДляПодписи, ЗначениеХешФункция)
	
	Данные = "";
	Для Каждого Значение Из ДанныеДляПодписи Цикл
		
		Если Не ЗначениеЗаполнено(Значение) И Значение <> 0 Тогда
			Данные = Данные + "-";
		ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
			ЗначениеДата = ЗаписатьДатуJSON(
				Значение,
				ФорматДатыJSON.ISO,
				ВариантЗаписиДатыJSON.УниверсальнаяДата);
			Данные = Данные + СтрДлина(ЗначениеДата) + ЗначениеДата;
		ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
			ЗначениеЧисло = СтрЗаменить("" + Значение, ",", ".");
			ЗначениеЧисло = СтрЗаменить(ЗначениеЧисло, Символы.НПП, "");
			Данные = Данные + СтрДлина(ЗначениеЧисло) + ЗначениеЧисло;
		Иначе
			Данные = Данные + СтрДлина("" + Значение) + Значение;
		КонецЕсли;
		
	КонецЦикла;
	
	СлучайноеЧислоHex = ДлинноеСлучайноеЧислоHEX();
	Данные = Данные + СтрДлина(СлучайноеЧислоHex) + СлучайноеЧислоHex;
	
	Хеш = РассчитатьHmac(
		СекретныйКлюч,
		ПолучитьДвоичныеДанныеИзСтроки(
			Данные,
			КодировкаТекста.UTF8),
		ЗначениеХешФункция);
		
	Префикс = ?(ЗначениеХешФункция = ХешФункция.SHA256, "HMACSHA256", "HMACSHA1");
	Возврат Префикс + " " + СлучайноеЧислоHex + "." + НРег(Хеш);
	
КонецФункции

// Формирует заголовок для способа аутентификации
// Resource Owner Password Credentials Grant (https://tools.ietf.org/html/rfc6749#section-4.3).
//
// Параметры:
//  ДанныеАутентификации - Структура - данные аутентификации для получения заголовка;
//  ПлатежнаяСистема - ПеречислениеСсылка.ПлатежнаяСистема - платежная система,
//                     которая выступает в роли Resource Owner;
//  Результат - Структура - результат получения заголовка.
//
Процедура СформироватьЗаголовокАутентификацииPasswordCredentialsGrant(
		ДанныеАутентификации,
		ПлатежнаяСистема,
		Результат)
	
	Если ДанныеАутентификации.expiresDate = Неопределено
		Или ДанныеАутентификации.tokenType = Неопределено
		Или ДанныеАутентификации.accessToken = Неопределено
		Или ТекущаяУниверсальнаяДатаВМиллисекундах() > ДанныеАутентификации.expiresDate Тогда
		РезультатОперации = ОперацияПредоставлениеУчетныхДанных(
			ДанныеАутентификации.login,
			ДанныеАутентификации.password,
			ПлатежнаяСистема);
		Если Не ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
			ДанныеАутентификации.accessToken = РезультатОперации.Токен;
			ДанныеАутентификации.tokenType   = РезультатОперации.ТипТокена;
			ДанныеАутентификации.expiresDate = ТекущаяУниверсальнаяДатаВМиллисекундах()
				+ РезультатОперации.ДатаИстеченияСрока * 1000;
		Иначе
			Результат.Ошибка             = Истина;
			Результат.ИнформацияОбОшибке = РезультатОперации.СообщениеОбОшибке;
		КонецЕсли;
	КонецЕсли;
	
	Результат.Аутентификация = ""
		+ ДанныеАутентификации.tokenType
		+ " "
		+ ДанныеАутентификации.accessToken;
	
КонецПроцедуры

// Добавляет в запись JSON данные аутентификации платежной системы.
//
// Параметры:
//  ЗаписьДанныхСообщения  - ЗаписьJSON - запись, в которую необходимо
//                           добавить данные аутентификации;
//  ДанныеАутентификации   - Структура - параметры аутентификации мерчанта в
//                           платежной системе. См. ДанныеАутентификацииВПлатежнойСистеме;
//  ТорговаяТочка          - идентификатор торговой точки.
//
Процедура ЗаписатьДанныеАутентификацииПлатежнойСистемы(
		ЗаписьДанныхСообщения,
		Аутентификация,
		ТорговаяТочка)
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("sbpMemberRequestHeaders");
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("authorization");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Аутентификация);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("xmerchantId");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ТорговаяТочка);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиИнтеграции

// См. ИнтеграцияСПлатежнымиСистемамиСлужебный.УстановитьИдентификаторТорговойТочки.
//
Процедура УстановитьИдентификаторТорговойТочки(
		ТекущийОбъект,
		ПлатежнаяСистема,
		НастройкиАутентификации) Экспорт
	
	ТекущийОбъект.ТорговаяТочка = ИдентификаторТорговойТочки(ПлатежнаяСистема, НастройкиАутентификации);
	
КонецПроцедуры

// Получает актуальный список участников Системы быстрых платежей.
//
// Параметры:
//  ПараметрыПроцедуры - Структура - данные для выполнения запроса;
//  АдресРезультата - Строка - адрес хранилища результат обновления.
//
Процедура ПолучитьУчастниковСБП(ПараметрыПроцедуры, АдресРезультата) Экспорт
	
	РезультатОперации = ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("ДанныеУчастников", Новый Соответствие);
	
	РезультатВызова = ОперацияПолучениеНастроекУчастниковСБП();
	
	Если ЗначениеЗаполнено(РезультатВызова.КодОшибки) Тогда
		ЗаполнитьЗначенияСвойств(
			РезультатОперации,
			РезультатВызова,
			"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
		ПоместитьВоВременноеХранилище(РезультатОперации, АдресРезультата);
		Возврат;
	КонецЕсли;
	
	// Подготовка данных существующих платежных систем.
	ПлатежныеСистемыПрограммы = Новый Соответствие;
	Для Каждого ПлатежнаяСистема Из Перечисления.ПлатежныеСистемы Цикл
		Идентификатор = ИдентификаторУчастникаСБП(ПлатежнаяСистема, Ложь);
		Если ЗначениеЗаполнено(Идентификатор) Тогда
			ПлатежныеСистемыПрограммы.Вставить(Идентификатор, ПлатежнаяСистема);
		КонецЕсли;
	КонецЦикла;
	
	// Получение слияние настроек сервиса и программы.
	Для Каждого КлючЗначение Из ПлатежныеСистемыПрограммы Цикл
		НастройкаСервис = РезультатВызова.Настройки.Получить(КлючЗначение.Ключ);
		Если НастройкаСервис <> Неопределено И НастройкаСервис.Активен Тогда
			РезультатОперации.ДанныеУчастников.Вставить(
				КлючЗначение.Значение,
				Новый Структура("АдресСтраницыПодключения, ТекстПредупреждения, БИК",
					НастройкаСервис.АдресСтраницыПодключения,
					НастройкаСервис.ТекстПредупреждения,
					Новый Массив));
		КонецЕсли;
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(РезультатОперации, АдресРезультата);
	
КонецПроцедуры

// Производит проверку настроек подключения к СБП для новой интеграции.
//
// Параметры:
//  ПараметрыПроцедуры - Структура - данные для регистрации новой интеграции;
//  АдресРезультата - Строка - адрес хранилища результат обновления.
//
Процедура ПроверитьПараметрыПодключения(ПараметрыПроцедуры, АдресРезультата) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("КодОшибки",         "");
	Результат.Вставить("СообщениеОбОшибке", "");
	
	ИдентификаторТорговойТочки = ИдентификаторТорговойТочки(
		ПараметрыПроцедуры.ПлатежнаяСистема,
		ПараметрыПроцедуры.ПараметрыАутентификации);
	
	ДанныеАутентификации = ПреобразоватьНастройкиАутентификации(
		ПараметрыПроцедуры.ПлатежнаяСистема,
		ПараметрыПроцедуры.ПараметрыАутентификации);
	
	РезультатПроверки = ОперацияПроверитьПараметрыПодключения(
		ИдентификаторТорговойТочки,
		ДанныеАутентификации,
		ПараметрыПроцедуры.ПлатежнаяСистема);
	
	ЗаполнитьЗначенияСвойств(Результат, РезультатПроверки);
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Производит проверку настроек подключения к СБП для существующей интеграции.
//
// Параметры:
//  ПараметрыПроцедуры - Структура - данные для регистрации новой интеграции;
//  АдресРезультата - Строка - адрес хранилища результат обновления.
//
Процедура ПроверитьПараметрыПодключенияОбъект(ПараметрыПроцедуры, АдресРезультата) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("КодОшибки",         "");
	Результат.Вставить("СообщениеОбОшибке", "");
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыАутентификации = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		ПараметрыПроцедуры.ТорговаяТочкаСсылка);
	УстановитьПривилегированныйРежим(Ложь);
	
	РезультатПроверки = ОперацияПроверитьПараметрыПодключения(
		ПараметрыПроцедуры.ИдентификаторТорговойТочки,
		ПараметрыАутентификации,
		ПараметрыПроцедуры.ПлатежнаяСистема);
	
	ЗаполнитьЗначенияСвойств(Результат, РезультатПроверки);
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Определяет доступность операций для торговой точки. В сценариях оплаты
// различных платежных систем существуют отличия, поэтому ряд операций могут
// быть запрещены для выполнения. Метод следует использовать для настройки
// элементов форм оплаты и возвратов и получение общих настроек интеграции.
//
// Параметры:
//  ТорговаяТочка - СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами -
//    настройка выполнения операции платежной системы.
//  ПлатежнаяСистема - ПеречислениеСсылка.ПлатежныеСистемы - платежная система,
//    для которой выполняется операция.
//
// Возвращаемое значение:
//  Структура - см. ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйНастройкиТорговойТочки.
//
Функция НастройкиТорговойТочки(ТорговаяТочка, ПлатежнаяСистема) Экспорт
	
	Настройки = ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйНастройкиТорговойТочки();
	Настройки.ВыборПлатежнойСистемыВозврата = (
		ПлатежнаяСистема <> Перечисления.ПлатежныеСистемы.СБП_Webmoney
		И ПлатежнаяСистема <> Перечисления.ПлатежныеСистемы.СБП_PayMaster
		И ПлатежнаяСистема <> Перечисления.ПлатежныеСистемы.SWiP);
	Настройки.СрокЖизниQRКода = Истина;
	Настройки.ПлатежнаяСсылка = Истина;
	Настройки.СинонимСистемы = НСтр("ru = 'Система быстрых платежей'");
	Настройки.Идентификатор = ИдентификаторУчастникаСБП(ПлатежнаяСистема);
	Настройки.Используется = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ТорговаяТочка,
		"Используется");
	
	Возврат Настройки;
	
КонецФункции

#КонецОбласти

#Область ГенерацияQRКода

// См. ИнтеграцияСПлатежнымиСистемами.СоздатьQRКодОплаты.
//
Функция СоздатьQRКодОплаты(QRКод, Размер, ТипПечати) Экспорт
	
	Если ТипПечати = 0 Тогда
		Логотип = БиблиотекаКартинок.ЛоготипСБПЦветной;
	ИначеЕсли ТипПечати = 1 Тогда
		Логотип = БиблиотекаКартинок.ЛоготипСБПМонохромный;
	Иначе
		Логотип = БиблиотекаКартинок.ЛоготипСБПЧерный;
	КонецЕсли;
	
	Возврат ИнтеграцияСПлатежнымиСистемамиСлужебный.ИзображениеQRКодa(
		QRКод,
		Размер,
		Base64Строка(Логотип.ПолучитьДвоичныеДанные()));
	
КонецФункции

// См. ИнтеграцияСПлатежнымиСистемами.СоздатьQRКодВозврата.
//
Функция СоздатьQRКодВозврата(ДокументОплаты, Размер) Экспорт
	
	Возврат ИнтеграцияСПлатежнымиСистемамиСлужебный.ИзображениеQRКодa(
		ИдентификаторыОперацииОплаты(ДокументОплаты),
		Размер);
	
КонецФункции

#КонецОбласти

#Область ИдентификаторыОпераций

// См. ИнтеграцияСПлатежнымиСистемами.ИдентификаторыОперацииОплаты.
//
Функция ИдентификаторыОперацииОплаты(ДокументОплаты) Экспорт
	
	ИдентификаторыОплаты = РегистрыСведений.ИдентификаторыОперацийСБП.ИдентификаторыОперацииСБП(
		ДокументОплаты);
	
	Если ИдентификаторыОплаты = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Идентификатор оплаты не обнаружен.'");
	КонецЕсли;
	
	Возврат ""
		+ ИнтеграцияСПлатежнымиСистемамиСлужебный.ИдентификаторСБП()
		+ ":"
		+ ИдентификаторыОплаты.ИдентификаторОплаты
		+ ":"
		+ ИдентификаторыОплаты.ИдентификаторПлатежнойСистемы;
	
КонецФункции

#КонецОбласти

#Область НастройкиУчастниковСБП

// Определяет идентификатор торговой точки на основании данных
// аутентификации платежной системы.
//
// Параметры:
//  ПлатежнаяСистема - ПеречислениеСсылка.ПлатежныеСистемы - платежная система,
//                     для которой производится настройка;
//  НастройкиАутентификации - Соответствие - данные аутентификации.
//
// Возвращаемое значение:
//  Строка - идентификатор торговой точки.
// Пример:
//
Функция ИдентификаторТорговойТочки(ПлатежнаяСистема, НастройкиАутентификации) Экспорт
	
	Если ПлатежнаяСистема = Перечисления.ПлатежныеСистемы.СБП_Открытие Тогда
		Возврат НастройкиУчастниковСБП.ИдентификаторТорговойТочкиБанкОткрытие(
			НастройкиАутентификации);
	ИначеЕсли ПлатежнаяСистема = Перечисления.ПлатежныеСистемы.СБП_СКБ Тогда
		Возврат НастройкиУчастниковСБП.ИдентификаторТорговойТочкиСКБ(
			НастройкиАутентификации);
	ИначеЕсли ПлатежнаяСистема = Перечисления.ПлатежныеСистемы.СБП_Webmoney Тогда
		Возврат НастройкиУчастниковСБП.ИдентификаторТорговойТочкиWebmoney(
			НастройкиАутентификации);
	ИначеЕсли ПлатежнаяСистема = Перечисления.ПлатежныеСистемы.СБП_PayMaster Тогда
		Возврат НастройкиУчастниковСБП.ИдентификаторТорговойТочкиPayMaster(
			НастройкиАутентификации);
	Иначе
		ВызватьИсключение НСтр("ru = 'Неизвестная платежная система.'");
	КонецЕсли;
	
КонецФункции

// Формирует декларативное описание настроек аутентификации в платежной системе.
//
// Параметры:
//  ПлатежнаяСистема - ПеречислениеСсылка.ПлатежныеСистемы - платежная система,
//                     для которой производится настройка;
//  Реквизиты - Массив из Структура - декларативное описание настройки;
//  Подсказка - Строка - инструкции по заполнению данных аутентификации.
//
Процедура НастройкиАутентификации(ПлатежнаяСистема, Реквизиты, Подсказка) Экспорт
	
	Если ПлатежнаяСистема = Перечисления.ПлатежныеСистемы.СБП_Открытие Тогда
		НастройкиУчастниковСБП.НастройкиАутентификацииБанкОткрытие(
			Реквизиты,
			Подсказка);
	ИначеЕсли ПлатежнаяСистема = Перечисления.ПлатежныеСистемы.СБП_СКБ Тогда
		НастройкиУчастниковСБП.НастройкиАутентификацииСКББанк(
			Реквизиты,
			Подсказка);
	ИначеЕсли ПлатежнаяСистема = Перечисления.ПлатежныеСистемы.СБП_Webmoney Тогда
		НастройкиУчастниковСБП.НастройкиАутентификацииWebmoney(
			Реквизиты,
			Подсказка);
	ИначеЕсли ПлатежнаяСистема = Перечисления.ПлатежныеСистемы.СБП_PayMaster Тогда
		НастройкиУчастниковСБП.НастройкиАутентификацииPayMaster(
			Реквизиты,
			Подсказка);
	КонецЕсли;
	
КонецПроцедуры

// См. ИнтеграцияСПлатежнымиСистемамиСлужебный.СохранитьНастройкиАутентификации.
//
Процедура СохранитьНастройкиАутентификации(Интеграция, ПараметрыАутентификации, ПлатежнаяСистема) Экспорт
	
	Если ПлатежнаяСистема = Перечисления.ПлатежныеСистемы.СБП_Открытие Тогда
		НастройкиУчастниковСБП.СохранитьНастройкиАутентификацииБанкОткрытие(
			Интеграция,
			ПараметрыАутентификации);
	ИначеЕсли ПлатежнаяСистема = Перечисления.ПлатежныеСистемы.СБП_СКБ Тогда
		НастройкиУчастниковСБП.СохранитьНастройкиАутентификацииСКББанк(
			Интеграция,
			ПараметрыАутентификации);
	ИначеЕсли ПлатежнаяСистема = Перечисления.ПлатежныеСистемы.СБП_Webmoney Тогда
		НастройкиУчастниковСБП.СохранитьНастройкиАутентификацииWebmoney(
			Интеграция,
			ПараметрыАутентификации);
	ИначеЕсли ПлатежнаяСистема = Перечисления.ПлатежныеСистемы.СБП_PayMaster Тогда
		НастройкиУчастниковСБП.СохранитьНастройкиАутентификацииPayMaster(
			Интеграция,
			ПараметрыАутентификации);
	Иначе
		ВызватьИсключение НСтр("ru = 'Неизвестная платежная система.'");
	КонецЕсли;
	
КонецПроцедуры

// См. ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗначениеНастроекАутентификации.
//
Функция ДанныеАутентификацииНастройки(Интеграция, ПлатежнаяСистема) Экспорт
	
	Результат = Новый Соответствие;
	УстановитьПривилегированныйРежим(Истина);
	Данные = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		Интеграция);
	Если ПлатежнаяСистема = Перечисления.ПлатежныеСистемы.СБП_Открытие Тогда
		НастройкиУчастниковСБП.ДанныеАутентификацииНастройкиБанкОткрытие(
			Данные,
			Результат);
	ИначеЕсли ПлатежнаяСистема = Перечисления.ПлатежныеСистемы.СБП_СКБ Тогда
		НастройкиУчастниковСБП.ДанныеАутентификацииНастройкиСКББанк(
			Данные,
			Результат);
	ИначеЕсли ПлатежнаяСистема = Перечисления.ПлатежныеСистемы.СБП_Webmoney Тогда
		НастройкиУчастниковСБП.ДанныеАутентификацииНастройкиWebmoney(
			Данные,
			Результат);
	ИначеЕсли ПлатежнаяСистема = Перечисления.ПлатежныеСистемы.СБП_PayMaster Тогда
		НастройкиУчастниковСБП.ДанныеАутентификацииНастройкиPayMaster(
			Данные,
			Результат);
	Иначе
		ВызватьИсключение НСтр("ru = 'Неизвестная платежная система.'");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Добавляет платежные системы СБП, которые поддерживают сверку взаиморасчетов.
//
// Параметры:
//  ПлатежныеСистемы - Массив из ПеречислениеСсылка.ПлатежныеСистемы - платежные системы,
//                     поддерживающие сверку взаиморасчетов.
//
Процедура ДобавитьПлатежныеСистемыСверкеВзаиморасчетов(ПлатежныеСистемы) Экспорт
	
	ПлатежныеСистемы.Добавить(Перечисления.ПлатежныеСистемы.СБП_Открытие);
	
КонецПроцедуры

// Определяет идентификатор платежной системы в СБП.
//
// Параметры:
//  ПлатежнаяСистема - ПеречислениеСсылка.ПлатежныеСистемы - платежная система,
//    для которой выполняется операция;
//  ПоказатьИсключение - Булево - если передано значение Истина, будет вызвано
//    исключение, в случае невозможности определения идентификатора.
//
// Возвращаемое значение:
//  Строка - идентификатор участника СБП.
//
Функция ИдентификаторУчастникаСБП(ПлатежнаяСистема, ПоказатьИсключение = Истина)
	
	Если ПлатежнаяСистема = Перечисления.ПлатежныеСистемы.СБП_Открытие Тогда
		Возврат НастройкиУчастниковСБП.ИдентификаторБанкОткрытие();
	ИначеЕсли ПлатежнаяСистема = Перечисления.ПлатежныеСистемы.СБП_СКБ Тогда
		Возврат НастройкиУчастниковСБП.ИдентификаторСКББанк();
	ИначеЕсли ПлатежнаяСистема = Перечисления.ПлатежныеСистемы.СБП_Webmoney Тогда
		Возврат НастройкиУчастниковСБП.ИдентификаторWebmoney();
	ИначеЕсли ПлатежнаяСистема = Перечисления.ПлатежныеСистемы.СБП_PayMaster Тогда
		Возврат НастройкиУчастниковСБП.ИдентификаторPayMaster();
	Иначе
		Если ПоказатьИсключение Тогда
			ВызватьИсключение НСтр("ru = 'Неизвестная платежная система.'");
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Определяет участника СБП по идентификатору.
//
// Параметры:
//  Идентификатор - Строка - идентификатор участника;
//  ПоказатьИсключение - Булево - если передано значение Истина, будет вызвано
//    исключение, в случае невозможности определения идентификатора.
//
// Возвращаемое значение:
//  Строка - идентификатор участника СБП.
//
Функция УчастникСБППоИдентификатору(Идентификатор, ПоказатьИсключение = Истина) Экспорт
	
	Если Идентификатор = НастройкиУчастниковСБП.ИдентификаторБанкОткрытие() Тогда
		Возврат Перечисления.ПлатежныеСистемы.СБП_Открытие;
	ИначеЕсли Идентификатор = НастройкиУчастниковСБП.ИдентификаторСКББанк() Тогда
		Возврат Перечисления.ПлатежныеСистемы.СБП_СКБ;
	ИначеЕсли Идентификатор = НастройкиУчастниковСБП.ИдентификаторWebmoney() Тогда
		Возврат Перечисления.ПлатежныеСистемы.СБП_Webmoney;
	ИначеЕсли Идентификатор = НастройкиУчастниковСБП.ИдентификаторPayMaster() Тогда
		Возврат Перечисления.ПлатежныеСистемы.СБП_PayMaster;
	Иначе
		Если ПоказатьИсключение Тогда
			ВызватьИсключение НСтр("ru = 'Неизвестная платежная система.'");
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Возвращает данные аутентификации в платежной системе.
//
// Параметры:
//  ПараметрыИнтеграции - Структура - см. ИнтеграцияСПлатежнымиСистемамиСлужебный.ПараметрыИнтеграции.
//  ДанныеДляПодписи - Массив из Строка  - данные шифрования;
//  ТребуетсяОбновление - Булево - признак необходимости обновления устаревших данных.
//
// Возвращаемое значение:
//  Структура - структура, содержащая результаты определения параметров
//              аутентификации мерчанта в платежной системе:
//    *Аутентификация - Структура, Неопределено - параметры аутентификации в платежной системе.
//                            Если Неопределено, значение настроек не обнаружено;
//    *ИнформацияОбОшибке   - Строка    - информация об ошибке для пользователя.
//    *Ошибка               - Строка    - признак наличия ошибки.
//
Функция ДанныеАутентификацииВПлатежнойСистеме(
		ПараметрыИнтеграции,
		ДанныеДляПодписи,
		ТребуетсяОбновление = Ложь)
	
	Результат = Новый Структура;
	Результат.Вставить("Аутентификация",     Неопределено);
	Результат.Вставить("ИнформацияОбОшибке", "");
	Результат.Вставить("Ошибка",             Ложь);
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеАутентификации = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		ПараметрыИнтеграции.ТорговаяТочкаСсылка);
	УстановитьПривилегированныйРежим(Ложь);
	Если ДанныеАутентификации = Неопределено  Тогда
		Результат.Ошибка = Истина;
		Результат.ИнформацияОбОшибке =
			НСтр("ru = 'Для работы с сервисом интеграции с платежными системами
				|необходимо ввести данные аутентификации.'");
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Результат.ИнформацияОбОшибке);
		Возврат Результат;
	КонецЕсли;
	
	Если ПараметрыИнтеграции.ПлатежнаяСистема = Перечисления.ПлатежныеСистемы.СБП_Открытие Тогда
		Возврат НастройкиУчастниковСБП.ДанныеАутентификацииЗапросБанкОткрытие(
			ДанныеАутентификации,
			ПараметрыИнтеграции.ТорговаяТочкаСсылка,
			ПараметрыИнтеграции.ПлатежнаяСистема,
			ТребуетсяОбновление);
	ИначеЕсли ПараметрыИнтеграции.ПлатежнаяСистема = Перечисления.ПлатежныеСистемы.СБП_СКБ Тогда
		Возврат НастройкиУчастниковСБП.ДанныеАутентификацииЗапросСКББанк(
			ДанныеАутентификации,
			ПараметрыИнтеграции.ТорговаяТочкаСсылка,
			ПараметрыИнтеграции.ПлатежнаяСистема);
	ИначеЕсли ПараметрыИнтеграции.ПлатежнаяСистема = Перечисления.ПлатежныеСистемы.СБП_Webmoney Тогда
		Возврат НастройкиУчастниковСБП.ДанныеАутентификацииЗапросWebmoney(
			ДанныеАутентификации,
			ПараметрыИнтеграции.ТорговаяТочкаСсылка,
			ПараметрыИнтеграции.ПлатежнаяСистема);
	ИначеЕсли ПараметрыИнтеграции.ПлатежнаяСистема = Перечисления.ПлатежныеСистемы.СБП_PayMaster Тогда
		Возврат НастройкиУчастниковСБП.ДанныеАутентификацииЗапросPayMaster(
			ДанныеАутентификации,
			ПараметрыИнтеграции.ТорговаяТочкаСсылка,
			ПараметрыИнтеграции.ПлатежнаяСистема);
	Иначе
		ВызватьИсключение НСтр("ru = 'Неизвестная платежная система.'");
	КонецЕсли;
	
КонецФункции

// Формирует заголовок аутентификации для запроса в платежную систему.
//
// Параметры:
//  ПлатежнаяСистема - ПеречислениеСсылка.ПлатежныеСистемы - платежная система,
//                     для которой выполняется операция;
//  ДанныеАутентификации - Структура - настройки аутентификации платежной системы;
//  ДанныеДляПодписи - Массив из Строка  - данные шифрования;
//  ТорговаяТочка - СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами -
//                  настройка выполнения оплаты.
//
// Возвращаемое значение:
//  Строка - заголовок аутентификации.
//
Функция ЗаголовокАутентификацииПоДаннымАутентификации(
		ПлатежнаяСистема,
		ДанныеАутентификации,
		ДанныеДляПодписи,
		ТорговаяТочка) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Аутентификация",     Неопределено);
	Результат.Вставить("ИнформацияОбОшибке", "");
	Результат.Вставить("Ошибка",             Ложь);
	
	Если ПлатежнаяСистема = Перечисления.ПлатежныеСистемы.СБП_Открытие Тогда
		
		ДатаТокена = ДанныеАутентификации.expiresDate;
		
		СформироватьЗаголовокАутентификацииPasswordCredentialsGrant(
			ДанныеАутентификации,
			ПлатежнаяСистема,
			Результат);
		
		// Обновление данных аутентификации.
		Если ЗначениеЗаполнено(ТорговаяТочка)
			И ДатаТокена <> ДанныеАутентификации.expiresDate Тогда
			УстановитьПривилегированныйРежим(Истина);
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
				ТорговаяТочка,
				ДанныеАутентификации);
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
	ИначеЕсли ПлатежнаяСистема = Перечисления.ПлатежныеСистемы.СБП_СКБ Тогда
		Результат.Аутентификация = ЗаголовокБазовойСхемыАутентификации(
			ДанныеАутентификации.login,
			ДанныеАутентификации.password);
	ИначеЕсли ПлатежнаяСистема = Перечисления.ПлатежныеСистемы.СБП_Webmoney Тогда
		Результат.Аутентификация = ЗаголовокBearerАутентификации(
			ДанныеАутентификации.token);
	ИначеЕсли ПлатежнаяСистема = Перечисления.ПлатежныеСистемы.СБП_PayMaster Тогда
		Результат.Аутентификация = ЗаголовокBearerАутентификации(
			ДанныеАутентификации.token);
	Иначе
		ВызватьИсключение НСтр("ru = 'Неизвестная платежная система.'");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет преобразование параметров аутентификации в формат
// хранения и выполнения запросов к сервису.
//
// Параметры:
//  ПлатежнаяСистема - ПеречислениеСсылка.ПлатежныеСистемы - платежная система,
//                     для которой выполняется операция;
//  ПараметрыАутентификации - Соответствие - настройки аутентификации платежной системы.
//
// Возвращаемое значение:
//  Структура - преобразованные настройки аутентификации.
//
Функция ПреобразоватьНастройкиАутентификации(ПлатежнаяСистема, ПараметрыАутентификации)
	
	Если ПлатежнаяСистема = Перечисления.ПлатежныеСистемы.СБП_Открытие Тогда
		Возврат НастройкиУчастниковСБП.ПреобразоватьНастройкиАутентификацииБанкОткрытие(
			ПараметрыАутентификации);
	ИначеЕсли ПлатежнаяСистема = Перечисления.ПлатежныеСистемы.СБП_СКБ Тогда
		Возврат НастройкиУчастниковСБП.ПреобразоватьНастройкиАутентификацииСКББанк(
			ПараметрыАутентификации);
	ИначеЕсли ПлатежнаяСистема = Перечисления.ПлатежныеСистемы.СБП_Webmoney Тогда
		Возврат НастройкиУчастниковСБП.ПреобразоватьНастройкиАутентификацииWebmoney(
			ПараметрыАутентификации);
	ИначеЕсли ПлатежнаяСистема = Перечисления.ПлатежныеСистемы.СБП_PayMaster Тогда
		Возврат НастройкиУчастниковСБП.ПреобразоватьНастройкиАутентификацииPayMaster(
			ПараметрыАутентификации);
	Иначе
		ВызватьИсключение НСтр("ru = 'Неизвестная платежная система.'");
	КонецЕсли;
	
КонецФункции

// Определяет необходимость расчета HAMC для платежной системы.
//
// Параметры:
//  ПлатежнаяСистема - ПеречислениеСсылка.ПлатежныеСистемы - платежная система,
//                     для которой выполняется операция;
//
// Возвращаемое значение:
//  Булево - если Истина, необходимо подготовить данные для расчета HMAC.
//
Функция ПлатежнаяСистемаИспользуетHMAC(ПлатежнаяСистема)
	
	Возврат Ложь;
	
КонецФункции

// Определяет необходимость получения токена аутентификации.
//
// Параметры:
//  ПлатежнаяСистема - ПеречислениеСсылка.ПлатежныеСистемы - платежная система,
//                     для которой выполняется операция;
//
// Возвращаемое значение:
//  Булево - если Истина, необходимо получить токен аутентификации.
//
Функция ПлатежнаяСистемаИспользуетPasswordCredentialsGrant(ПлатежнаяСистема)
	
	Возврат ПлатежнаяСистема = Перечисления.ПлатежныеСистемы.СБП_Открытие;
	
КонецФункции

#КонецОбласти

#Область ВызовОперацийПолучениеНастроекУчастников

////////////////////////////////////////////////////////////////////////////////
// Вызов операции POST /program1c/sbp/members/get-info.

// Получает настройки участников СБП..
//
// Возвращаемое значение:
//  Структура - получения данных аутентификации:
//    *Настройки - Массив из Структура - настройки участников СБП;
//    *КодОшибки - Строка - строковый код возникшей ошибки, который
//                  может быть обработан вызывающим методом;
//    *СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ОперацияПолучениеНастроекУчастниковСБП()
	
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Получение настроек участников СБП.'"),
		Ложь);
	
	РезультатОперации = ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("Настройки", Новый Соответствие);
	
	ПараметрыПодключения = ИнтеграцияСПлатежнымиСистемамиСлужебный.ИнициализироватьПараметрыПодключения();
	
	URLОперации = ИнтеграцияСПлатежнымиСистемамиСлужебный.URLОперацииСервиса(
		"/members/infos?c2bIntegrationSupported=true",
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ИдентификаторСБП());
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "GET");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , НовыйЗаголовкиВызоваОперации());
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = ИнтеграцияСПлатежнымиСистемамиСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = ИнтеграцияСПлатежнымиСистемамиСлужебный.ПереопределитьСообщениеПользователю(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое);
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить настройки участников СБП.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|При получении настроек участников СБП сервис вернул ошибку.
				|URL: %2
				|Код ошибки: %3
				|Подробная информация:
				|%4'"),
			РезультатОперации.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			РезультатОтправки.ИнформацияОбОшибке);
		
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ДанныеНастроек = ПрочитатьДанные_get_info(РезультатОтправки.Содержимое);
	
	Для Каждого ОписаниеНастройки Из ДанныеНастроек Цикл
		
		Настройка = Новый Структура;
		Настройка.Вставить("Активен",                  ОписаниеНастройки.integrationEnabled);
		Настройка.Вставить("АдресСтраницыПодключения", АдресСтраницыПодключенияКСБП(ОписаниеНастройки.memberId));
		Настройка.Вставить("ТекстПредупреждения",      ОписаниеНастройки.attentionText);
		
		РезультатОперации.Настройки.Вставить(
			ОписаниеНастройки.memberId,
			Настройка);
		
	КонецЦикла;
	
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Завершено получение настроек участников СБП.'"),
		Ложь);
	
	Возврат РезультатОперации;
	
КонецФункции

// Чтение ответа операции /sbp/members/get-info.
//
Функция ПрочитатьДанные_get_info(ТелоJSON)
	
	// Ответ сервиса:
	// [
	//  {
	//   "memberId": "string",
	//   "personalAccountPageUrl": "string",
	//   "integrationEnabled": true
	//  },
	//  {
	//   "memberId": "string",
	//   "personalAccountPageUrl": "string",
	//   "integrationEnabled": true
	//  }
	// ]
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	Результат = ПрочитатьJSON(ЧтениеОтвета);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ВызовОперацийАутентификации

////////////////////////////////////////////////////////////////////////////////
// Вызов операции POST /sbp/v1/members/{memberId}/auth/get-credentials-grant.

// Получает обновленный токен для схемы аутентификации Resource owner password
// credentials grant (https://tools.ietf.org/html/rfc6749#section-4.3).
//
// Параметры:
//  Логин - Строка - логин пользователя;
//  Пароль - Строка - пароль пользователя;
//  ПлатежнаяСистема - ПеречислениеСсылка.ПлатежныеСистемы - платежная система
//                     для которой выполняется получение токена.
//
// Возвращаемое значение:
//  Структура - получения данных аутентификации:
//    *Токен - Строка - идентификатор, по которому выполняется оплата;
//    *ТипТокена - Строка - идентификатор оплаты в СБП;
//    *ДатаИстеченияСрока - Дата - идентификатор оплаты в СБП;
//    *КодОшибки - Строка - строковый код возникшей ошибки, который
//                  может быть обработан вызывающим методом;
//    *СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ОперацияПредоставлениеУчетныхДанных(Логин, Пароль, ПлатежнаяСистема)
	
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Обновление токена Resource owner password credentials grant.'"),
		Ложь);
	
	РезультатОперации = ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("Токен",              Неопределено);
	РезультатОперации.Вставить("ТипТокена",          Неопределено);
	РезультатОперации.Вставить("ДатаИстеченияСрока", Неопределено);
	
	ПараметрыПодключения = ИнтеграцияСПлатежнымиСистемамиСлужебный.ИнициализироватьПараметрыПодключения();
	
	URLОперации = ИнтеграцияСПлатежнымиСистемамиСлужебный.URLОперацииСервиса(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"/members/%1/auth/get-credentials-grant",
			ИдентификаторУчастникаСБП(ПлатежнаяСистема)),
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ИдентификаторСБП());
	
	РезультатИПП = ДанныеАутентификации(URLОперации);
	
	Если РезультатИПП.Ошибка Тогда
		РезультатОперации.КодОшибки = ИнтеграцияСПлатежнымиСистемамиСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ПараметрыЗапросаJSON = get_credentials_grant(
		Логин,
		Пароль,
		РезультатИПП.ДанныеАутентификации);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("X-Correlation-ID", Строка(Новый УникальныйИдентификатор));
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = ИнтеграцияСПлатежнымиСистемамиСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		
		// Для метода используется собственное переопределении ошибки
		// т.к. формат ошибок указанный в rfc 6749 отличается
		// от выбранного для других методов.
		РезультатОперации.СообщениеОбОшибке = ПереопределитьСообщениеПользователюPasswordCredentialsGrant(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое);
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось обновить токен аутентификации в платежной системе.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|При получении токена сервис вернул ошибку.
				|URL: %2
				|Код ошибки: %3
				|Подробная информация:
				|%4'"),
			РезультатОперации.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			РезультатОтправки.ИнформацияОбОшибке);
		
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ДанныеАутентификации = ПрочитатьДанные_get_credentials_grant(
		РезультатОтправки.Содержимое);
	
	РезультатОперации.Токен              = ДанныеАутентификации.sbpMemberResponse.access_token;
	РезультатОперации.ДатаИстеченияСрока = ДанныеАутентификации.sbpMemberResponse.expires_in;
	РезультатОперации.ТипТокена          = ДанныеАутентификации.sbpMemberResponse.token_type;
	
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Завершено обновление токена.'"),
		Ложь);
	
	Возврат РезультатОперации;
	
КонецФункции

// Формирует параметры запроса для операции
// /sbp/v1/members/{memberId}/auth/get-credentials-grant.
//
Функция get_credentials_grant(
		Логин,
		Пароль,
		ДанныеАутентификации)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	// Данные аутентификации.
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьДанныеАутентификации(
		ЗаписьДанныхСообщения,
		ДанныеАутентификации);
	
	// Параметры клиента.
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьПараметрыКлиента(
		ЗаписьДанныхСообщения);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("password");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Пароль);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("username");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Логин);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции /sbp/v1/members/{memberId}/auth/get-credentials-grant.
//
Функция ПрочитатьДанные_get_credentials_grant(ТелоJSON)
	
	// Ответ сервиса:
	// {
	//  "accessToken": "string",
	//  "expiresIn": 0,
	//  "tokenType": "string"
	// }
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	Результат = ПрочитатьJSON(ЧтениеОтвета);
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызов операции POST /sbp/v1/members/{memberId}/merchants/{merchantId}/get-merchant-info

// Производит проверку данных аутентификации в платежной системе.
//
// Параметры:
//  ИдентификаторТорговойТочки - Строка - идентификатор торговой точки в платежной системе;
//  ПараметрыАутентификации - Структура - данные аутентификации в платежной системе;
//  ПлатежнаяСистема - ПеречислениеСсылка.ПлатежнаяСистема - проверяемая платежная система.
//
// Возвращаемое значение:
//  Структура - результат проверки статуса заказа на оплату в платежной системе:
//    *КодОшибки - Строка - строковый код возникшей ошибки, который
//                  может быть обработан вызывающим методом;
//    *СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ОперацияПроверитьПараметрыПодключения(
		ИдентификаторТорговойТочки,
		ПараметрыАутентификации,
		ПлатежнаяСистема)
	
	РезультатОперации = ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйРезультатОперации();
	
	URLОперации = ИнтеграцияСПлатежнымиСистемамиСлужебный.URLОперацииСервиса(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"/members/%1/merchants/%2/get-merchant-info",
			ИдентификаторУчастникаСБП(ПлатежнаяСистема),
			ИдентификаторТорговойТочки),
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ИдентификаторСБП());
	
	РезультатИПП = ДанныеАутентификации(URLОперации);
	
	Если РезультатИПП.Ошибка Тогда
		РезультатОперации.КодОшибки = ИнтеграцияСПлатежнымиСистемамиСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ДанныеДляПодписи = Новый Массив;
	Если ПлатежнаяСистемаИспользуетHMAC(ПлатежнаяСистема) Тогда
		ДанныеДляПодписи.Добавить(ИдентификаторТорговойТочки);
	КонецЕсли;
	
	РезультатПлатежнаяСистема = ЗаголовокАутентификацииПоДаннымАутентификации(
		ПлатежнаяСистема,
		ПараметрыАутентификации,
		ДанныеДляПодписи,
		Неопределено);
	
	Если РезультатПлатежнаяСистема.Ошибка Тогда
		РезультатОперации.КодОшибки = ИнтеграцияСПлатежнымиСистемамиСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатПлатежнаяСистема.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатПлатежнаяСистема.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;

	ПараметрыПодключения = ИнтеграцияСПлатежнымиСистемамиСлужебный.ИнициализироватьПараметрыПодключения();
	
	ПараметрыЗапросаJSON = get_merchant_info(
		РезультатИПП.ДанныеАутентификации,
		РезультатПлатежнаяСистема.Аутентификация,
		ИдентификаторТорговойТочки);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("X-Correlation-ID", Строка(Новый УникальныйИдентификатор));
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = ИнтеграцияСПлатежнымиСистемамиСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = ИнтеграцияСПлатежнымиСистемамиСлужебный.ПереопределитьСообщениеПользователю(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое);
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось проверить данные аутентификации в банке.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|При проверке данных аутентификации сервис вернул ошибку.
				|URL: %2
				|Код ошибки: %3
				|Подробная информация:
				|%4'"),
			РезультатОперации.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			РезультатОтправки.ИнформацияОбОшибке);
		
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ИдентификаторМерчатанаОтвет = ПрочитатьДанные_get_merchant_info(
		РезультатОтправки.Содержимое);
	
	Если ИдентификаторМерчатанаОтвет <> ИдентификаторТорговойТочки Тогда
		РезультатОперации.КодОшибки = ИнтеграцияСПлатежнымиСистемамиСлужебный.КодОшибкиНеизвестнаяОшибка();
		РезультатОперации.СообщениеОбОшибке = НСтр("ru = 'Идентификатор торговой точки отличается от исходного.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Идентификатор торговой точки отличается от исходного.'");
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

// Формирует параметры запроса для операции
// /sbp/v1/members/{memberId}/merchants/{merchantId}/get-merchant-info.
//
Функция get_merchant_info(
		ДанныеАутентификации,
		АутентификацияПлатежнаяСистема,
		ТорговаяТочка)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	// Данные аутентификации.
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьДанныеАутентификации(
		ЗаписьДанныхСообщения,
		ДанныеАутентификации);
	
	// Данные платежная система.
	ЗаписатьДанныеАутентификацииПлатежнойСистемы(
		ЗаписьДанныхСообщения,
		АутентификацияПлатежнаяСистема,
		ТорговаяТочка);
	
	// Параметры клиента.
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьПараметрыКлиента(
		ЗаписьДанныхСообщения);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции:
// /sbp/v1/members/{memberId}/merchants/{merchantId}/get-merchant-info.
//
Функция ПрочитатьДанные_get_merchant_info(ТелоJSON)
	
	// Ответ сервиса:
	//  merchantId - идентификатор мерчанта;
	// 
	// {
	//   "merchantId": "string"
	// }
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получен ответ сервиса интеграции с платежными системами:
			|%1'"),
		ТелоJSON);
	
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	Результат = ПрочитатьJSON(ЧтениеОтвета);
	
	Возврат Результат.sbpMemberResponse.merchantId;
	
КонецФункции

#КонецОбласти

#Область ВызовОперацийПроверкиСостояний

////////////////////////////////////////////////////////////////////////////////
// Вызов операции POST /**/test-check-needed

// Определяет наличие терминального статус операции.
//
// Параметры:
//  ИдентификаторОплаты - Строка - идентификатор оплаты в системе быстрых платежей;
//  ДатаЗапросаСтатуса - Дата - дата последнего запроса статуса.
//
// Возвращаемое значение:
//  Структура - результат проверки статуса заказа на оплату в платежной системе:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом;
//    * СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора;
//    * ЗапроситьСтатус - Булево - признак наличия терминального статуса оплаты.
//
Функция ОперацияПроверкаНаличияСтатусаОперации(URLОперации, ДатаЗапросаСтатуса)
	
	РезультатОперации = ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("ЗапроситьСтатус", Ложь);
	
	ПараметрыПодключения = ИнтеграцияСПлатежнымиСистемамиСлужебный.ИнициализироватьПараметрыПодключения();
	
	ПараметрыЗапросаJSON = test_check_needed(ДатаЗапросаСтатуса);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("X-Correlation-ID", Строка(Новый УникальныйИдентификатор));
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = ИнтеграцияСПлатежнымиСистемамиСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = ИнтеграцияСПлатежнымиСистемамиСлужебный.ПереопределитьСообщениеПользователю(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое);
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить информацию о статусе операции.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|При проверке статуса операции сервис вернул ошибку.
				|URL: %2
				|Код ошибки: %3
				|Подробная информация:
				|%4'"),
			РезультатОперации.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			РезультатОтправки.ИнформацияОбОшибке);
		
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	РезультатОперации.ЗапроситьСтатус = ПрочитатьДанные_test_check_needed(
		РезультатОтправки.Содержимое);
	
	Возврат РезультатОперации;
	
КонецФункции

// Формирует параметры запроса для проверки наличия статуса операции.
//
Функция test_check_needed(ДатаЗапросаСтатуса)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("lastStatusCheckDate");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(
		ЗаписатьДатуJSON(
			ДатаЗапросаСтатуса,
			ФорматДатыJSON.ISO,
			ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением));
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа проверки наличия статуса операции.
//
Функция ПрочитатьДанные_test_check_needed(ТелоJSON)
	
	// Ответ сервиса:
	//  notificationReceived - статус операции получен;
	//  responseDate - дата получения;
	// 
	//  {
	//  "checkNeeded": "string",
	//  "qrId": "string"
	// }
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получен ответ сервиса интеграции с платежными системами:
			|%1'"),
		ТелоJSON);
	
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	Результат = ПрочитатьJSON(ЧтениеОтвета);
	
	Возврат Результат.checkNeeded = Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызов операции POST /sbp/v1/members/{memberId}/status-manager/payments/statuses/test-check-needed

// Определяет статус заказа на оплату платежной системе.
//
// Параметры:
//  ИдентификаторыОплат - ТаблицаЗначений - данные для проверки статуса:
//    * Идентификатор - Строка - идентификатор QR-кода СБП;
//    * ДатаЗапросаСтатуса - Дата - дата последнего запроса статуса;
//  ПлатежнаяСистема - ПеречислениеСсылка.ПлатежныеСистемы - платежная система торговой точки;
//
// Возвращаемое значение:
//  Структура - результат проверки статуса заказа на оплату в платежной системе:
//    *КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом;
//    *СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора;
//    *Идентификаторы - Массив Из Строка - идентификаторы оплат, по которым получен терминальный статус.
//
Функция ОперацияПроверкаНаличияСтатусаОперацийОплат(ИдентификаторыОплат, ПлатежнаяСистема)
	
	РезультатОперации = ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("Идентификаторы", Новый Массив);
	
	URLОперации = ИнтеграцияСПлатежнымиСистемамиСлужебный.URLОперацииСервиса(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"/members/%1/status-manager/payments/statuses/test-check-needed",
			ИдентификаторУчастникаСБП(ПлатежнаяСистема)),
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ИдентификаторСБП());
	
	ПараметрыПодключения = ИнтеграцияСПлатежнымиСистемамиСлужебный.ИнициализироватьПараметрыПодключения();
	
	ПараметрыЗапросаJSON = payments_test_check_needed(ИдентификаторыОплат);
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , НовыйЗаголовкиВызоваОперации());
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = ИнтеграцияСПлатежнымиСистемамиСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = ИнтеграцияСПлатежнымиСистемамиСлужебный.ПереопределитьСообщениеПользователю(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое);
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить информацию о статусах операций.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|При проверке статусов операции сервис вернул ошибку.
				|URL: %2
				|Код ошибки: %3
				|Подробная информация:
				|%4'"),
			РезультатОперации.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			РезультатОтправки.ИнформацияОбОшибке);
		
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	РезультатОперации.Идентификаторы = ПрочитатьДанные_payments_test_check_needed(
		РезультатОтправки.Содержимое);
	
	Возврат РезультатОперации;
	
КонецФункции

// Формирует параметры запроса для проверки наличия статуса операций оплаты.
//
Функция payments_test_check_needed(ИдентификаторОплат)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("operation");
	ЗаписьДанныхСообщения.ЗаписатьЗначение("LONG_PAY");
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("qrs");
	
	ЗаписьДанныхСообщения.ЗаписатьНачалоМассива();
	
	Для Каждого ДанныеОплаты Из ИдентификаторОплат Цикл
		
		ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("qrId");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеОплаты.Идентификатор);
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("lastStatusCheckDate");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(
			ЗаписатьДатуJSON(
				ДанныеОплаты.ДатаЗапросаСтатуса,
				ФорматДатыJSON.ISO,
				ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением));
		
		ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
		
	КонецЦикла;
	
	ЗаписьДанныхСообщения.ЗаписатьКонецМассива();
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа проверки наличия статуса операции.
//
Функция ПрочитатьДанные_payments_test_check_needed(ТелоJSON)
	
	// Ответ сервиса:
	//
	// {
	//  "checkByObjectIds": [
	//    "string"
	//  ],
	//  "responseDate": "2021-11-17T13:41:39.511Z"
	// }
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получен ответ сервиса интеграции с платежными системами:
			|%1'"),
		ТелоJSON);
	
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	Результат = ПрочитатьJSON(ЧтениеОтвета);
	
	Возврат Результат.checkByObjectIds;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызов операции POST /sbp/v1/members/{memberId}/status-manager/refunds/statuses/test-check-needed

// Определяет статус возвратов платежной системе.
//
// Параметры:
//  ИдентификаторыВозвратов - ТаблицаЗначений - данные для проверки статуса:
//    * Идентификатор - Строка - идентификатор операции участника СБП;
//    * ДатаЗапросаСтатуса - Дата - дата последнего запроса статуса;
//  ПлатежнаяСистема - ПеречислениеСсылка.ПлатежныеСистемы - платежная система торговой точки;
//
// Возвращаемое значение:
//  Структура - результат проверки статуса заказа на оплату в платежной системе:
//    *КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом;
//    *СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора;
//    *Идентификаторы - Массив Из Строка - идентификаторы возврата, по которым получен терминальный статус.
//
Функция ОперацияПроверкаНаличияСтатусаОперацийВозвратов(ИдентификаторыВозвратов, ПлатежнаяСистема)
	
	РезультатОперации = ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("Идентификаторы", Новый Массив);
	
	URLОперации = ИнтеграцияСПлатежнымиСистемамиСлужебный.URLОперацииСервиса(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"/members/%1/status-manager/refunds/statuses/test-check-needed",
			ИдентификаторУчастникаСБП(ПлатежнаяСистема)),
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ИдентификаторСБП());
	
	ПараметрыПодключения = ИнтеграцияСПлатежнымиСистемамиСлужебный.ИнициализироватьПараметрыПодключения();
	
	ПараметрыЗапросаJSON = refunds_test_check_needed(ИдентификаторыВозвратов);
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , НовыйЗаголовкиВызоваОперации());
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = ИнтеграцияСПлатежнымиСистемамиСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = ИнтеграцияСПлатежнымиСистемамиСлужебный.ПереопределитьСообщениеПользователю(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое);
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить информацию о статусах операций.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|При проверке статуса операции сервис вернул ошибку.
				|URL: %2
				|Код ошибки: %3
				|Подробная информация:
				|%4'"),
			РезультатОперации.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			РезультатОтправки.ИнформацияОбОшибке);
		
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	РезультатОперации.Идентификаторы = ПрочитатьДанные_refunds_test_check_needed(
		РезультатОтправки.Содержимое);
	
	Возврат РезультатОперации;
	
КонецФункции

// Формирует параметры запроса для проверки наличия статуса операций оплаты.
//
Функция refunds_test_check_needed(ИдентификаторыОплат)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("operation");
	ЗаписьДанныхСообщения.ЗаписатьЗначение("LONG_REFUND");
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("refundRequests");
	
	ЗаписьДанныхСообщения.ЗаписатьНачалоМассива();
	
	Для Каждого ДанныеОплаты Из ИдентификаторыОплат Цикл
		
		ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("refundId");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеОплаты.Идентификатор);
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("lastStatusCheckDate");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(
			ЗаписатьДатуJSON(
				ДанныеОплаты.ДатаЗапросаСтатуса,
				ФорматДатыJSON.ISO,
				ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением));
		
		ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
		
	КонецЦикла;
	
	ЗаписьДанныхСообщения.ЗаписатьКонецМассива();
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа проверки наличия статуса операции.
//
Функция ПрочитатьДанные_refunds_test_check_needed(ТелоJSON)
	
	// Ответ сервиса:
	//
	// {
	//  "checkByObjectIds": [
	//    "string"
	//  ],
	//  "responseDate": "2021-11-17T13:41:39.511Z"
	// }
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получен ответ сервиса интеграции с платежными системами:
			|%1'"),
		ТелоJSON);
	
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	Результат = ПрочитатьJSON(ЧтениеОтвета);
	
	Возврат Результат.checkByObjectIds;
	
КонецФункции

#КонецОбласти

#Область ВызовОперацийОплат

////////////////////////////////////////////////////////////////////////////////
// Вызов операции POST /sbp/v1/members/{memberId}/qrs/register-qr.

// Создает новый заказ на оплату в платежной системы.
//
// Параметры:
//  ЗаказНаОплату - Структура - описание заказа на оплату см. функцию ОписаниеЗаказаНаОплату;
//  Идентификатор - Строка - внешний идентификатор документа оплаты;
//  ПараметрыИнтеграции - Структура - параметры выполнения операции
//                        см. ИнтеграцияСПлатежнымиСистемамиСлужебный.ПараметрыИнтеграции.
//
// Возвращаемое значение:
//  Структура - результат создания заказа на оплату в платежной системе:
//    *QRКод - Строка - идентификатор, по которому выполняется оплата;
//    *ИдентификаторОплаты - Строка - идентификатор оплаты в СБП;
//    *КодОшибки - Строка - строковый код возникшей ошибки, который
//                  может быть обработан вызывающим методом;
//    *СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ОперацияЗаказНаОплату(ЗаказОплату, Идентификатор, ПараметрыИнтеграции)
	
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Создание заказа на оплату в платежной системе.'"),
		Ложь);
	
	РезультатОперации = ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйРезультатИдентификаторОплаты();
	РезультатОперации.Вставить("ИдентификаторОплаты", "");
	РезультатОперации.Вставить("ПериодИспользования", Неопределено);
	
	URLОперации = ИнтеграцияСПлатежнымиСистемамиСлужебный.URLОперацииСервиса(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"/members/%1/qrs/register-qr",
			ИдентификаторУчастникаСБП(ПараметрыИнтеграции.ПлатежнаяСистема)),
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ИдентификаторСБП());
	
	РезультатИПП = ДанныеАутентификации(URLОперации);
	
	Если РезультатИПП.Ошибка Тогда
		РезультатОперации.КодОшибки = ИнтеграцияСПлатежнымиСистемамиСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ДанныеДляПодписи = Новый Массив;
	Если ПлатежнаяСистемаИспользуетHMAC(ПараметрыИнтеграции.ПлатежнаяСистема) Тогда
		ДанныеДляПодписи.Добавить(ПараметрыИнтеграции.ТорговаяТочка);
		ДанныеДляПодписи.Добавить(ЗаказОплату.СуммаОплаты);
		ДанныеДляПодписи.Добавить(ИдентификаторВалютыРоссийскийРубль());
		ДанныеДляПодписи.Добавить(Идентификатор);
		ДанныеДляПодписи.Добавить(ЗаказОплату.НазначениеПлатежа);
	КонецЕсли;
	
	РезультатПлатежнаяСистема = ДанныеАутентификацииВПлатежнойСистеме(
		ПараметрыИнтеграции,
		ДанныеДляПодписи);
	
	Если РезультатПлатежнаяСистема.Ошибка Тогда
		РезультатОперации.КодОшибки = ИнтеграцияСПлатежнымиСистемамиСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатПлатежнаяСистема.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатПлатежнаяСистема.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	РезультатОтправки = ВызовОперацииЗаказНаОплату(
		ЗаказОплату,
		Идентификатор,
		ПараметрыИнтеграции,
		РезультатИПП.ДанныеАутентификации,
		РезультатПлатежнаяСистема.Аутентификация,
		URLОперации);
	
	// Обработка случаев устаревания токена аутентификации для способа
	// Resource Owner Password Credentials Grant.
	Если РезультатОтправки.КодСостояния = 401
		И ПлатежнаяСистемаИспользуетPasswordCredentialsGrant(ПараметрыИнтеграции.ПлатежнаяСистема) Тогда
		
		РезультатПлатежнаяСистема = ДанныеАутентификацииВПлатежнойСистеме(
			ПараметрыИнтеграции,
			ДанныеДляПодписи,
			Истина);
		
		Если РезультатПлатежнаяСистема.Ошибка Тогда
			РезультатОперации.КодОшибки = ИнтеграцияСПлатежнымиСистемамиСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
			РезультатОперации.СообщениеОбОшибке = РезультатПлатежнаяСистема.ИнформацияОбОшибке;
			РезультатОперации.ИнформацияОбОшибке = РезультатПлатежнаяСистема.ИнформацияОбОшибке;
			Возврат РезультатОперации;
		КонецЕсли;
		
		РезультатОтправки = ВызовОперацииЗаказНаОплату(
			ЗаказОплату,
			Идентификатор,
			ПараметрыИнтеграции,
			РезультатИПП.ДанныеАутентификации,
			РезультатПлатежнаяСистема.Аутентификация,
			URLОперации);
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = ИнтеграцияСПлатежнымиСистемамиСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = ИнтеграцияСПлатежнымиСистемамиСлужебный.ПереопределитьСообщениеПользователю(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое);
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось создать заказ на оплату в платежной системе.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|При создании заказа на оплату сервис вернул ошибку.
				|URL: %2
				|Код ошибки: %3
				|Подробная информация:
				|%4'"),
			РезультатОперации.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			РезультатОтправки.ИнформацияОбОшибке);
		
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ДанныеОплаты = ПрочитатьДанные_register_qr(РезультатОтправки.Содержимое);
	
	РезультатОперации.ИдентификаторОплаты = ДанныеОплаты.sbpMemberResponse.qrId;
	РезультатОперации.QRКод = ДанныеОплаты.sbpMemberResponse.payload;
	Если ЗначениеЗаполнено(ЗаказОплату.СрокЖизниQRКода) Тогда
		РезультатОперации.ПериодИспользования = ТекущаяДатаСеанса() + ЗаказОплату.СрокЖизниQRКода * 60;
	Иначе
		РезультатОперации.ПериодИспользования = ТекущаяДатаСеанса() + ДанныеОплаты.qrSettings.defaultQrTtl * 60;
	КонецЕсли;
	
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Завершено создание заказа на оплату в платежной системе.'"),
		Ложь);
	
	Возврат РезультатОперации;
	
КонецФункции

// Выполняет вызов операции создания нового заказа на оплату.
//
// Параметры:
//  ЗаказНаОплату - Структура - описание заказа на оплату см. функцию ОписаниеЗаказаНаОплату;
//  Идентификатор - Строка - внешний идентификатор документа оплаты;
//  ПараметрыИнтеграции - Структура - параметры выполнения операции
//                        см. ИнтеграцияСПлатежнымиСистемамиСлужебный.ПараметрыИнтеграции;
//  ДанныеАутентификации - Структура - данные аутентификации на Портале 1С:ИТС;
//  ЗаголовокПлатежнаяСистема - Строка - данные аутентификации в платежной системе;
//  URLОперации - Строка - url для вызова операции;
//
// Возвращаемое значение:
//  Структура - результат создания заказа на оплату в платежной системе:
//   *КодСостояния - Число - http код результата операции;
//   *КодОшибки - Строка - идентификатор ошибки вызова операции;
//   *Содержимое - Строка - ответа сервиса;
//
Функция ВызовОперацииЗаказНаОплату(
		ЗаказОплату,
		Идентификатор,
		ПараметрыИнтеграции,
		ДанныеАутентификации,
		ЗаголовокПлатежнаяСистема,
		URLОперации)
	
	ПараметрыПодключения = ИнтеграцияСПлатежнымиСистемамиСлужебный.ИнициализироватьПараметрыПодключения();
	
	ПараметрыЗапросаJSON = register_qr(
		ЗаказОплату,
		Идентификатор,
		ПараметрыИнтеграции,
		ДанныеАутентификации,
		ЗаголовокПлатежнаяСистема);
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , НовыйЗаголовкиВызоваОперации());
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	Возврат ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
КонецФункции

// Формирует параметры запроса для операции
// /sbp/v1/members/{memberId}/qrs/register-qr.
//
Функция register_qr(
		ЗаказОплату,
		Идентификатор,
		ПараметрыИнтеграции,
		ДанныеАутентификации,
		АутентификацияПлатежнаяСистема)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	// Данные аутентификации.
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьДанныеАутентификации(
		ЗаписьДанныхСообщения,
		ДанныеАутентификации);
	
	// Данные аутентификации платежная система.
	ЗаписатьДанныеАутентификацииПлатежнойСистемы(
		ЗаписьДанныхСообщения,
		АутентификацияПлатежнаяСистема,
		ПараметрыИнтеграции.ТорговаяТочка);
	
	// Параметры клиента.
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьПараметрыКлиента(
		ЗаписьДанныхСообщения);
	
	// Параметры оплаты.
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("sbpMemberRequest");
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("amount");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ЗаказОплату.СуммаОплаты);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("currency");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИдентификаторВалютыРоссийскийРубль());
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("createDate");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(
		ЗаписатьДатуJSON(
			ЗаказОплату.ДатаОплаты,
			ФорматДатыJSON.ISO,
			ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением));
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("merchantId");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ПараметрыИнтеграции.ТорговаяТочка);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("orderId");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Строка(Идентификатор));
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("qrTtl");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(
		?(Не ЗначениеЗаполнено(ЗаказОплату.СрокЖизниQRКода),
			Неопределено,
			ЗаказОплату.СрокЖизниQRКода));
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("paymentPurpose");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ЗаказОплату.НазначениеПлатежа);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции /sbp/v1/members/{memberId}/qrs/register-qr.
//
Функция ПрочитатьДанные_register_qr(ТелоJSON)
	
	// Ответ сервиса:
	//  payload - идентификатор оплаты для покупателя;
	//  qrId - идентификатор оплаты в СБП;
	// 
	//  {
	//  "payload": "string",
	//  "qrId": "string"
	// }
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получен ответ сервиса интеграции с платежными системами:
			|%1'"),
		ТелоJSON);
	
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	Результат = ПрочитатьJSON(ЧтениеОтвета);
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызов операции POST /sbp/v1/members/{memberId}/payments/qrs/{qrId}/search-payment

// Определяет статус заказа на оплату платежной системе.
//
// Параметры:
//  ИдентификаторОплаты - Строка - идентификатор оплаты в системе быстрых платежей;
//  ДатаЗапросаСтатуса - Дата - дата последнего запроса статуса оплаты;
//  ПараметрыИнтеграции - Структура - параметры выполнения операции
//    см. ИнтеграцияСПлатежнымиСистемамиСлужебный.ПараметрыИнтеграции;
//  ЗапросНаличияСтатуса - Булево - если Истина, будет выполнен запрос наличия статуса.
//
// Возвращаемое значение:
//  Структура - результат проверки статуса заказа на оплату в платежной системе:
//    *КодОшибки - Строка - строковый код возникшей ошибки, который
//     может быть обработан вызывающим методом;
//    *СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора;
//    *СтатусОплаты - Строка - состояние оплаты в платежной системе.
//    *ИдентификаторПлатежнойСистемы - Строка - идентификатор оплаты платежной системы;
//    *ДатаОперации - Дата - дата регистрации операции в платежной системе.
//
Функция ОперацияСтатусЗаказНаОплату(
		ИдентификаторОплаты,
		ДатаЗапросаСтатуса,
		ПараметрыИнтеграции,
		ЗапросНаличияСтатуса = Истина)
	
	РезультатОперации = ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("СтатусОплаты", "");
	РезультатОперации.Вставить("ИдентификаторПлатежнойСистемы", "");
	РезультатОперации.Вставить("ДатаОперации", Неопределено);
	РезультатОперации.Вставить("ОбновитьДатуЗапросаСтатуса", Ложь);
	
	Если ЗапросНаличияСтатуса Тогда
		
		URLОперации = ИнтеграцияСПлатежнымиСистемамиСлужебный.URLОперацииСервиса(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"/members/%1/status-manager/payments/qrs/%2/statuses/test-check-needed",
				ИдентификаторУчастникаСБП(ПараметрыИнтеграции.ПлатежнаяСистема),
				ИдентификаторОплаты),
			ИнтеграцияСПлатежнымиСистемамиСлужебный.ИдентификаторСБП());
		
		РезультатПроверки = ОперацияПроверкаНаличияСтатусаОперации(
			URLОперации,
			ДатаЗапросаСтатуса);
		
		Если Не РезультатПроверки.ЗапроситьСтатус Тогда
			ЗаполнитьЗначенияСвойств(
				РезультатОперации,
				РезультатПроверки,
				"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
			Если Не ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
				РезультатОперации.СтатусОплаты = ИдентификаторСтатусаВПроцессе();
			КонецЕсли;
			Возврат РезультатОперации;
		КонецЕсли;
		
	КонецЕсли;
	
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Проверка статуса заказа на оплату в платежной системе.'"),
		Ложь);
	
	// Необходимо обновить дату запроса с статуса в базе данных.
	РезультатОперации.ОбновитьДатуЗапросаСтатуса = Истина;
	
	URLОперации = ИнтеграцияСПлатежнымиСистемамиСлужебный.URLОперацииСервиса(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"/members/%1/payments/qrs/%2/search-payment",
			ИдентификаторУчастникаСБП(ПараметрыИнтеграции.ПлатежнаяСистема),
			ИдентификаторОплаты),
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ИдентификаторСБП());
	
	РезультатИПП = ДанныеАутентификации(URLОперации);
	
	Если РезультатИПП.Ошибка Тогда
		РезультатОперации.КодОшибки = ИнтеграцияСПлатежнымиСистемамиСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ДанныеДляПодписи = Новый Массив;
	Если ПлатежнаяСистемаИспользуетHMAC(ПараметрыИнтеграции.ПлатежнаяСистема) Тогда
		ДанныеДляПодписи.Добавить(ИдентификаторОплаты);
	КонецЕсли;
	
	РезультатПлатежнаяСистема = ДанныеАутентификацииВПлатежнойСистеме(
		ПараметрыИнтеграции,
		ДанныеДляПодписи);
	
	Если РезультатПлатежнаяСистема.Ошибка Тогда
		РезультатОперации.КодОшибки = ИнтеграцияСПлатежнымиСистемамиСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатПлатежнаяСистема.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатПлатежнаяСистема.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	РезультатОтправки = ВызовОперацииСтатусЗаказНаОплату(
		ПараметрыИнтеграции,
		РезультатИПП.ДанныеАутентификации,
		РезультатПлатежнаяСистема.Аутентификация,
		URLОперации);
	
	// Обработка случаев устаревания токена аутентификации для способа
	// Resource Owner Password Credentials Grant.
	Если РезультатОтправки.КодСостояния = 401
		И ПлатежнаяСистемаИспользуетPasswordCredentialsGrant(ПараметрыИнтеграции.ПлатежнаяСистема) Тогда
		
		РезультатПлатежнаяСистема = ДанныеАутентификацииВПлатежнойСистеме(
			ПараметрыИнтеграции,
			ДанныеДляПодписи,
			Истина);
		
		Если РезультатПлатежнаяСистема.Ошибка Тогда
			РезультатОперации.КодОшибки = ИнтеграцияСПлатежнымиСистемамиСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
			РезультатОперации.СообщениеОбОшибке = РезультатПлатежнаяСистема.ИнформацияОбОшибке;
			РезультатОперации.ИнформацияОбОшибке = РезультатПлатежнаяСистема.ИнформацияОбОшибке;
			Возврат РезультатОперации;
		КонецЕсли;
		
		РезультатОтправки = ВызовОперацииСтатусЗаказНаОплату(
			ПараметрыИнтеграции,
			РезультатИПП.ДанныеАутентификации,
			РезультатПлатежнаяСистема.Аутентификация,
			URLОперации);
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = ИнтеграцияСПлатежнымиСистемамиСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = ИнтеграцияСПлатежнымиСистемамиСлужебный.ПереопределитьСообщениеПользователю(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое);
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить статус оплаты в платежной системе.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|При получении статуса оплаты сервис вернул ошибку.
				|URL: %2
				|Код ошибки: %3
				|Подробная информация:
				|%4'"),
			РезультатОперации.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			РезультатОтправки.ИнформацияОбОшибке);
		
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ДанныеСтатуса = ПрочитатьДанные_search_payment(РезультатОтправки.Содержимое);
	
	РезультатОперации.СтатусОплаты = ДанныеСтатуса.sbpMemberResponse.paymentStatus;
	РезультатОперации.ИдентификаторПлатежнойСистемы = ИдентификаторПлатежнойСистемыБезСлужебныхСимволов(
		ДанныеСтатуса.sbpMemberResponse.paymentId);
	РезультатОперации.ДатаОперации = ДанныеСтатуса.sbpMemberResponse.operationDate;
	
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Проверка статуса заказа на оплату в платежной системе завершена.'"),
		Ложь);
	
	Возврат РезультатОперации;
	
КонецФункции

// Выполняет вызов операции проверки статуса заказа на оплату.
//
// Параметры:
//  ПараметрыИнтеграции - Структура - параметры выполнения операции
//                        см. ИнтеграцияСПлатежнымиСистемамиСлужебный.ПараметрыИнтеграции;
//  ДанныеАутентификации - Структура - данные аутентификации на Портале 1С:ИТС;
//  ЗаголовокПлатежнаяСистема - Строка - данные аутентификации в платежной системе;
//  URLОперации - Строка - url для вызова операции;
//
// Возвращаемое значение:
//  Структура - результат получения статуса заказа на оплату в платежной системе:
//   *КодСостояния - Число - http код результата операции;
//   *КодОшибки - Строка - идентификатор ошибки вызова операции;
//   *Содержимое - Строка - ответа сервиса;
//
Функция ВызовОперацииСтатусЗаказНаОплату(
		ПараметрыИнтеграции,
		ДанныеАутентификации,
		ЗаголовокПлатежнаяСистема,
		URLОперации)
	
	ПараметрыПодключения = ИнтеграцияСПлатежнымиСистемамиСлужебный.ИнициализироватьПараметрыПодключения();
	
	ПараметрыЗапросаJSON = search_payment(
		ДанныеАутентификации,
		ЗаголовокПлатежнаяСистема,
		ПараметрыИнтеграции.ТорговаяТочка);
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , НовыйЗаголовкиВызоваОперации());
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	Возврат ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
КонецФункции

// Формирует параметры запроса для операции
// /sbp/v1/members/{memberId}/payments/qrs/{qrId}/search-payment.
//
Функция search_payment(
		ДанныеАутентификации,
		АутентификацияПлатежнаяСистема,
		ТорговаяТочка)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	// Данные аутентификации.
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьДанныеАутентификации(
		ЗаписьДанныхСообщения,
		ДанныеАутентификации);
	
	// Данные платежная система.
	ЗаписатьДанныеАутентификацииПлатежнойСистемы(
		ЗаписьДанныхСообщения,
		АутентификацияПлатежнаяСистема,
		ТорговаяТочка);
	
	// Параметры клиента.
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьПараметрыКлиента(
		ЗаписьДанныхСообщения);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции:
// /sbp/v1/members/{memberId}/payments/qrs/{qrId}/search-payment
//
Функция ПрочитатьДанные_search_payment(ТелоJSON)
	
	// Ответ сервиса:
	//  operationDate - дата операции в платежной системе;
	//  paymentId - идентификатор операции в платежной системе;
	//  paymentStatus - статус оплаты;
	//  qrId - идентификатор операции в СБП;
	// 
	//{
	//  "operationDate": "string",
	//  "paymentId": "string",
	//  "paymentStatus": "SUCCESS",
	//  "qrId": "string"
	// }
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получен ответ сервиса интеграции с платежными системами:
			|%1'"),
		ТелоJSON);
	
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	ИменаСвойствСоЗначениямиДата = Новый Массив;
	ИменаСвойствСоЗначениямиДата.Добавить("operationDate");
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	Результат = ПрочитатьJSON(
		ЧтениеОтвета,
		,
		ИменаСвойствСоЗначениямиДата,
		,
		"ВосстановитьДатуJSON",
		СервисИнтеграцииССБП,
		,
		ИменаСвойствСоЗначениямиДата);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ВызовОперацийВозвратов

////////////////////////////////////////////////////////////////////////////////
// Вызов операции POST /sbp/v1/members/{memberId}/refunds/create-refund

// Создает возврат оплаты в платежной системе.
//
// Параметры:
//  ПараметрыВозврата - Структура - данные для формирования возврата;
//  ПараметрыИнтеграции - Структура - параметры выполнения операции
//                        см. ИнтеграцияСПлатежнымиСистемамиСлужебный.ПараметрыИнтеграции.
//
// Возвращаемое значение:
//  Структура - результат проверки статуса заказа на оплату в платежной системе:
//    *КодОшибки - Строка - строковый код возникшей ошибки, который
//                  может быть обработан вызывающим методом;
//    *СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора;
//    *СтатусВозврата - Строка - состояние возврата в платежной системе.
//    *ИдентификаторВозврата - Строка - идентификатор возврата платежной системы;
//    *ДатаОперации - Дата - дата регистрации операции в платежной системе;
//    *Подтверждение - Структура, Неопределено - данные для подтверждения возврата в платежной системе:
//      **ФИО - Строка - маскированное ФИО физического лица на расчетный счет, которого
//              переводятся денежные средства;
//      **НомерСчета - Строка - маскированный номер счета, на который будут переведены денежные средства;
//      **НомерТелефона - Строка - маскированный номер телефона, к которому привязан расчетный счет в платежной
//                        системе получателе платежа;
//      **ИдентификаторСессии - Строка - идентификатор сессии возврата. Используется при подтверждении возврата
//                              см. ИнтеграцияСПлатежнымиСистемами.ПодтвердитьВозврат;
//
Функция ОперацияВозвратОплаты(ПараметрыВозврата, ПараметрыИнтеграции)
	
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Создание заказа на возврат в платежной системе.'"),
		Ложь);
	
	Подтверждение = Новый Структура;
	Подтверждение.Вставить("ФИО", "");
	Подтверждение.Вставить("НомерСчета", "");
	Подтверждение.Вставить("НомерТелефона", "");
	
	РезультатОперации = ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйРезультатДлительнойОперации();
	РезультатОперации.Вставить("ИдентификаторОплаты", "");
	РезультатОперации.Вставить("СтатусВозврата", "");
	РезультатОперации.Вставить("ИдентификаторВозврата", "");
	РезультатОперации.Вставить("ДатаОперации", "");
	РезультатОперации.Вставить("ИдентификаторСессии", "");
	РезультатОперации.Вставить("Подтверждение", Подтверждение);
	
	URLОперации = ИнтеграцияСПлатежнымиСистемамиСлужебный.URLОперацииСервиса(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"/members/%1/refunds/create-refund",
			ИдентификаторУчастникаСБП(ПараметрыИнтеграции.ПлатежнаяСистема)),
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ИдентификаторСБП());
	
	РезультатИПП = ДанныеАутентификации(URLОперации);
	
	Если РезультатИПП.Ошибка Тогда
		РезультатОперации.КодОшибки = ИнтеграцияСПлатежнымиСистемамиСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ДанныеДляПодписи = Новый Массив;
	Если ПлатежнаяСистемаИспользуетHMAC(ПараметрыИнтеграции.ПлатежнаяСистема) Тогда
		ДанныеДляПодписи.Добавить(ПараметрыВозврата.ИдентификаторСПБ);
		ДанныеДляПодписи.Добавить(ПараметрыВозврата.ИдентификаторПлатежнойСистемы);
		ДанныеДляПодписи.Добавить(ПараметрыВозврата.СуммаВозврата);
		ДанныеДляПодписи.Добавить(ИдентификаторВалютыРоссийскийРубль());
		ДанныеДляПодписи.Добавить(ПараметрыВозврата.ИдентификаторыОперации);
	КонецЕсли;
	
	РезультатПлатежнаяСистема = ДанныеАутентификацииВПлатежнойСистеме(
		ПараметрыИнтеграции,
		ДанныеДляПодписи);
	
	Если РезультатПлатежнаяСистема.Ошибка Тогда
		РезультатОперации.КодОшибки = ИнтеграцияСПлатежнымиСистемамиСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатПлатежнаяСистема.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатПлатежнаяСистема.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	РезультатОтправки = ВызовОперацииВозвратОплаты(
		ПараметрыИнтеграции,
		ПараметрыВозврата,
		РезультатИПП.ДанныеАутентификации,
		РезультатПлатежнаяСистема.Аутентификация,
		URLОперации);
	
	// Обработка случаев устаревания токена аутентификации для способа
	// Resource Owner Password Credentials Grant.
	Если РезультатОтправки.КодСостояния = 401
		И ПлатежнаяСистемаИспользуетPasswordCredentialsGrant(ПараметрыИнтеграции.ПлатежнаяСистема) Тогда
		
		РезультатПлатежнаяСистема = ДанныеАутентификацииВПлатежнойСистеме(
			ПараметрыИнтеграции,
			ДанныеДляПодписи,
			Истина);
		
		Если РезультатПлатежнаяСистема.Ошибка Тогда
			РезультатОперации.КодОшибки = ИнтеграцияСПлатежнымиСистемамиСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
			РезультатОперации.СообщениеОбОшибке = РезультатПлатежнаяСистема.ИнформацияОбОшибке;
			РезультатОперации.ИнформацияОбОшибке = РезультатПлатежнаяСистема.ИнформацияОбОшибке;
			Возврат РезультатОперации;
		КонецЕсли;
		
		РезультатОтправки = ВызовОперацииВозвратОплаты(
			ПараметрыИнтеграции,
			ПараметрыВозврата,
			РезультатИПП.ДанныеАутентификации,
			РезультатПлатежнаяСистема.Аутентификация,
			URLОперации);
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = ИнтеграцияСПлатежнымиСистемамиСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		
		// Для возвратов ошибка 400 обрабатывается по отдельному сценарию, т.к.
		// возможны ситуации, при которых счет получателя в банке будет не найден или заблокирован.
		// НСПК не возвращает код ошибки, по которому можно идентифицировать подобную ошибку
		// поэтому пользователю отображается общее сообщение.
		Если РезультатОтправки.КодСостояния = 400 Тогда
			РезультатОперации.СообщениеОбОшибке = НСтр("ru = 'Не удалось создать заказ на возврат. Возможные причины ошибки:
				| - у покупателя отсутствует счет в выбранном банке;
				| - неверно сформирован запрос на возврат;
				|Обратитесь к администратору.'");
		Иначе
			РезультатОперации.СообщениеОбОшибке = ИнтеграцияСПлатежнымиСистемамиСлужебный.ПереопределитьСообщениеПользователю(
				РезультатОперации.КодОшибки,
				РезультатОтправки.Содержимое);
		КонецЕсли;
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось создать заказ на возврат в платежной системе.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|При создании заказа на возврат сервис вернул ошибку.
				|URL: %2
				|Код ошибки: %3
				|Подробная информация:
				|%4'"),
			РезультатОперации.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			РезультатОтправки.ИнформацияОбОшибке);
		
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ДанныеВозврата = ПрочитатьДанные_refunds_create_refund(
		РезультатОтправки.Содержимое);
	
	РезультатОперации.СтатусВозврата = ДанныеВозврата.sbpMemberResponse.refundStatus;
	РезультатОперации.ИдентификаторВозврата = ИдентификаторПлатежнойСистемыБезСлужебныхСимволов(
		ДанныеВозврата.sbpMemberResponse.refundId);
	РезультатОперации.ДатаОперации = ДанныеВозврата.sbpMemberResponse.operationDate;
	Если ДанныеВозврата.sbpMemberResponse.confirmation <> Неопределено Тогда
		РезультатОперации.Подтверждение.НомерСчета = ДанныеВозврата.sbpMemberResponse.confirmation.accountNumber;
		РезультатОперации.Подтверждение.ФИО = ДанныеВозврата.sbpMemberResponse.confirmation.fullName;
		РезультатОперации.Подтверждение.НомерТелефона = ДанныеВозврата.sbpMemberResponse.confirmation.phone;
		РезультатОперации.ИдентификаторСессии = ДанныеВозврата.sbpMemberResponse.confirmation.state;
	КонецЕсли;
	
	Если ДанныеВозврата.sbpMemberResponse.refundStatus = ИдентификаторСтатусаОтменена() Тогда
		
		Если ДанныеВозврата.sbpMemberResponse.Свойство("refundStatusDescription") Тогда
			ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось создать заказ на возврат в платежной системе.
					|
					|%1
					|
					|Техническая информация об ошибке:
					|Операция была отменена.'"),
				ДанныеВозврата.sbpMemberResponse.refundStatusDescription);
		Иначе
			ИнформацияОбОшибке = НСтр("ru = 'Не удалось создать заказ на возврат в платежной системе.
				|
				|Причина отмены операции не указана.
				|
				|Техническая информация об ошибке:
				|Операция была отменена.'");
		КонецЕсли;
		
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			ИнформацияОбОшибке,
			Истина);
		
	Иначе
		
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'Завершено создание заказа на возврат в платежной системе.'"),
			Ложь);
		
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

// Выполняет вызов операции возврата оплаты.
//
// Параметры:
//  ПараметрыИнтеграции - Структура - параметры выполнения операции
//                        см. ИнтеграцияСПлатежнымиСистемамиСлужебный.ПараметрыИнтеграции;
//  ПараметрыВозврата - Структура - данные для формирования возврата;
//  ДанныеАутентификации - Структура - данные аутентификации на Портале 1С:ИТС;
//  ЗаголовокПлатежнаяСистема - Строка - данные аутентификации в платежной системе;
//  URLОперации - Строка - url для вызова операции;
//
// Возвращаемое значение:
//  Структура - результат создания возврата оплаты в платежной системе:
//   *КодСостояния - Число - http код результата операции;
//   *КодОшибки - Строка - идентификатор ошибки вызова операции;
//   *Содержимое - Строка - ответа сервиса;
//
Функция ВызовОперацииВозвратОплаты(
		ПараметрыИнтеграции,
		ПараметрыВозврата,
		ДанныеАутентификации,
		ЗаголовокАутентификации,
		URLОперации)
	
	ПараметрыПодключения = ИнтеграцияСПлатежнымиСистемамиСлужебный.ИнициализироватьПараметрыПодключения();
	
	ПараметрыЗапросаJSON = refunds_create_refund(
		ПараметрыВозврата,
		ДанныеАутентификации,
		ЗаголовокАутентификации,
		ПараметрыИнтеграции.ТорговаяТочка);
	
	// Вызов операции выполняется в 6 итераций. Повторные вызовы операции требуются
	// для случаев, когда результат выполнения возврата не определен. Обычно операция возврата
	// не занимает много времени, но в ряде случаев время обработки может быть увеличено.
	// Между вызовами добавляется пауза, чтобы не нагружать сервис банка.
	//
	// Паузы между вызовами:
	// - между 2-м и 3-м вызовом делается пауза 3 секунды;
	// - между 3-м и 4-м вызовом делается пауза 10 секунд;
	// - между 4-м и 5-м вызовом делается пауза 15 секунд;
	// - между 5-м и 6-м вызовом делается пауза 15 секунд; 
	
	КоличествоОпераций = 0;
	Пока КоличествоОпераций <= 5 Цикл
		
		ПараметрыОтправки = Новый Структура;
		ПараметрыОтправки.Вставить("Метод"                   , "POST");
		ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
		ПараметрыОтправки.Вставить("Заголовки"               , НовыйЗаголовкиВызоваОперации());
		ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
		ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
		ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
		ПараметрыОтправки.Вставить("Таймаут"                 , 30);
		
		РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
			URLОперации,
			,
			,
			ПараметрыОтправки);
		
		Если РезультатОтправки.КодСостояния < 500
			И РезультатОтправки.КодСостояния <> 0 Тогда
			Прервать;
		КонецЕсли;
		
		// Перед выполнением повторного вызова при работе в модели
		// сервиса необходимо получить новый тикет.
		Если ОбщегоНазначения.РазделениеВключено() Тогда
			
			РезультатИПП = ДанныеАутентификации(URLОперации);
			Если РезультатИПП.Ошибка Тогда
				Прервать;
			КонецЕсли;
			
			ПараметрыЗапросаJSON = refunds_create_refund(
				ПараметрыВозврата,
				РезультатИПП.ДанныеАутентификации,
				ЗаголовокАутентификации,
				ПараметрыИнтеграции.ТорговаяТочка);
			
		КонецЕсли;
		
		КоличествоОпераций = КоличествоОпераций + 1;
		
		Если КоличествоОпераций = 2 Тогда
			ИнтернетПоддержкаПользователей.Пауза(3);
		ИначеЕсли КоличествоОпераций = 3 Тогда
			ИнтернетПоддержкаПользователей.Пауза(5);
		ИначеЕсли КоличествоОпераций = 4 Тогда
			ИнтернетПоддержкаПользователей.Пауза(10);
		ИначеЕсли КоличествоОпераций = 5 Тогда
			ИнтернетПоддержкаПользователей.Пауза(15);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатОтправки;
	
КонецФункции

// Формирует параметры запроса для операции
// sbp/members/{memberId}/refunds/create-refund.
//
Функция refunds_create_refund(
		ПараметрыВозврата,
		ДанныеАутентификации,
		АутентификацияПлатежнаяСистема,
		ТорговаяТочка)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	// Данные аутентификации.
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьДанныеАутентификации(
		ЗаписьДанныхСообщения,
		ДанныеАутентификации);
	
	// Данные платежная система.
	ЗаписатьДанныеАутентификацииПлатежнойСистемы(
		ЗаписьДанныхСообщения,
		АутентификацияПлатежнаяСистема,
		ТорговаяТочка);
	
	// Параметры клиента.
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьПараметрыКлиента(
		ЗаписьДанныхСообщения);
	
	// Параметры возврата.
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("sbpMemberRequest");
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("amount");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ПараметрыВозврата.СуммаВозврата);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("currency");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИдентификаторВалютыРоссийскийРубль());
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("createDate");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(
		ЗаписатьДатуJSON(
			ПараметрыВозврата.ДатаВозврата,
			ФорматДатыJSON.ISO,
			ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением));
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("memberId");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(
		?(ЗначениеЗаполнено(ПараметрыВозврата.ПлатежнаяСистема), 
			СтрЗаменить("" + ПараметрыВозврата.ПлатежнаяСистема, Символы.НПП, ""),
			Неопределено));
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("qrId");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ПараметрыВозврата.ИдентификаторСПБ);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("refundOperationId");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Строка(ПараметрыВозврата.ИдентификаторыОперации));
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("paymentId");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ПараметрыВозврата.ИдентификаторПлатежнойСистемы);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции:
// sbp/members/{memberId}/refunds/create-refund.
//
Функция ПрочитатьДанные_refunds_create_refund(ТелоJSON)
	
	// Ответ сервиса:
	//  operationDate - дата операции в платежной системе;
	//  refundId - идентификатор операции в платежной системе;
	//  refundStatus - статус возврата;
	//  confirmation - данные для подтверждения возврата;
	// 
	//{
	//  "confirmation": {
	//    "accountNumber": "string",
	//    "fullName": "string",
	//    "phone": "string",
	//    "state": "string"
	//  },
	//  "operationDate": "2020-09-08T09:47:19.258Z",
	//  "refundId": "string",
	//  "refundStatus": "SUCCESS",
	//  "refundStatusDescription": "string"
	// }
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получен ответ сервиса интеграции с платежными системами:
			|%1'"),
		ТелоJSON);
	
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	ИменаСвойствСоЗначениямиДата = Новый Массив;
	ИменаСвойствСоЗначениямиДата.Добавить("operationDate");
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	Результат = ПрочитатьJSON(
		ЧтениеОтвета,
		,
		ИменаСвойствСоЗначениямиДата,
		,
		"ВосстановитьДатуJSON",
		СервисИнтеграцииССБП,
		,
		ИменаСвойствСоЗначениямиДата);
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызов операции POST /sbp/v1/members/{memberId}/refunds/{refundId}/confirm-refund

// Отправляет подтверждение возврата и получает статус возврат оплаты в платежной системе.
//
// Параметры:
//  ИдентификаторПлатежнойСистемы - Строка - идентификатор возврата в платежной системе;
//  ИдентификаторСессии - Строка - сессия возврата в платежной системе;
//  ПараметрыИнтеграции - Структура - параметры выполнения операции
//                        см. ИнтеграцияСПлатежнымиСистемамиСлужебный.ПараметрыИнтеграции.
//
// Возвращаемое значение:
//  Структура - результат проверки статуса заказа на оплату в платежной системе:
//    *КодОшибки - Строка - строковый код возникшей ошибки, который
//                  может быть обработан вызывающим методом;
//    *СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора;
//    *СтатусВозврата - Строка - состояние возврата в платежной системе.
//    *ДатаОперации - Дата - дата регистрации операции в платежной системе.
//
Функция ОперацияПодтверждениеВозврата(
		ИдентификаторыОперации,
		ИдентификаторСессии,
		ПараметрыИнтеграции)
	
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Подтверждение заказа на возврат в платежной системе.'"),
		Ложь);
	
	РезультатОперации = ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("СтатусВозврата", "");
	РезультатОперации.Вставить("ДатаОперации", Дата(1, 1, 1));
	РезультатОперации.Вставить("ИдентификаторВозврата", "");
	
	URLОперации = ИнтеграцияСПлатежнымиСистемамиСлужебный.URLОперацииСервиса(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"/members/%1/refunds/confirm-refund",
			ИдентификаторУчастникаСБП(ПараметрыИнтеграции.ПлатежнаяСистема),
			ИдентификаторыОперации.ИдентификаторПлатежнойСистемы),
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ИдентификаторСБП());
	
	РезультатИПП = ДанныеАутентификации(URLОперации);
	
	Если РезультатИПП.Ошибка Тогда
		РезультатОперации.КодОшибки = ИнтеграцияСПлатежнымиСистемамиСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ДанныеДляПодписи = Новый Массив;
	Если ПлатежнаяСистемаИспользуетHMAC(ПараметрыИнтеграции.ПлатежнаяСистема) Тогда
		ДанныеДляПодписи.Добавить(ИдентификаторСессии);
	КонецЕсли;
	
	РезультатПлатежнаяСистема = ДанныеАутентификацииВПлатежнойСистеме(
		ПараметрыИнтеграции,
		ДанныеДляПодписи);
	
	Если РезультатПлатежнаяСистема.Ошибка Тогда
		РезультатОперации.КодОшибки = ИнтеграцияСПлатежнымиСистемамиСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатПлатежнаяСистема.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатПлатежнаяСистема.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	РезультатОтправки = ВызовОперацииПодтверждениеВозврата(
		ПараметрыИнтеграции,
		ИдентификаторСессии,
		РезультатИПП.ДанныеАутентификации,
		РезультатПлатежнаяСистема.Аутентификация,
		URLОперации);
	
	// Обработка случаев устаревания токена аутентификации для способа
	// Resource Owner Password Credentials Grant.
	Если РезультатОтправки.КодСостояния = 401
		И ПлатежнаяСистемаИспользуетPasswordCredentialsGrant(ПараметрыИнтеграции.ПлатежнаяСистема) Тогда
		
		РезультатПлатежнаяСистема = ДанныеАутентификацииВПлатежнойСистеме(
			ПараметрыИнтеграции,
			ДанныеДляПодписи,
			Истина);
		
		Если РезультатПлатежнаяСистема.Ошибка Тогда
			РезультатОперации.КодОшибки = ИнтеграцияСПлатежнымиСистемамиСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
			РезультатОперации.СообщениеОбОшибке = РезультатПлатежнаяСистема.ИнформацияОбОшибке;
			РезультатОперации.ИнформацияОбОшибке = РезультатПлатежнаяСистема.ИнформацияОбОшибке;
			Возврат РезультатОперации;
		КонецЕсли;
		
		РезультатОтправки = ВызовОперацииПодтверждениеВозврата(
			ПараметрыИнтеграции,
			ИдентификаторСессии,
			РезультатИПП.ДанныеАутентификации,
			РезультатПлатежнаяСистема.Аутентификация,
			URLОперации);
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = ИнтеграцияСПлатежнымиСистемамиСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = ИнтеграцияСПлатежнымиСистемамиСлужебный.ПереопределитьСообщениеПользователю(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое);
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось подтвердить заказ на возврат в платежной системе.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|При подтверждении заказа на возврат сервис вернул ошибку.
				|URL: %2
				|Код ошибки: %3
				|Подробная информация:
				|%4'"),
			РезультатОперации.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			РезультатОтправки.ИнформацияОбОшибке);
		
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ДанныеВозврата = ПрочитатьДанные_refunds_confirm_refund(
		РезультатОтправки.Содержимое);
	
	РезультатОперации.СтатусВозврата = ДанныеВозврата.sbpMemberResponse.refundStatus;
	РезультатОперации.ДатаОперации = ДанныеВозврата.sbpMemberResponse.operationDate;
	РезультатОперации.ИдентификаторВозврата = ИдентификаторПлатежнойСистемыБезСлужебныхСимволов(
		ДанныеВозврата.sbpMemberResponse.refundId);
	
	Если РезультатОперации.СтатусВозврата = ИдентификаторСтатусаОтменена() Тогда
		
		ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось подтвердить заказ на возврат в платежной системе.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|Операция была отменена.'"),
			ДанныеВозврата.sbpMemberResponse.refundStatusDescription);
		
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			ИнформацияОбОшибке,
			Истина);
		
	Иначе
		
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'Завершено подтверждение заказа на возврат в платежной системе.'"),
			Ложь);
		
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

// Выполняет вызов операции подтверждения возврата оплаты.
//
// Параметры:
//  ПараметрыИнтеграции - Структура - параметры выполнения операции
//                        см. ИнтеграцияСПлатежнымиСистемамиСлужебный.ПараметрыИнтеграции;
//  ИдентификаторСессии - Строка - данные сессии возврата;
//  ДанныеАутентификации - Структура - данные аутентификации на Портале 1С:ИТС;
//  ЗаголовокПлатежнаяСистема - Строка - данные аутентификации в платежной системе;
//  URLОперации - Строка - url для вызова операции;
//
// Возвращаемое значение:
//  Структура - результат подтверждения возврата в платежной системе:
//   *КодСостояния - Число - http код результата операции;
//   *КодОшибки - Строка - идентификатор ошибки вызова операции;
//   *Содержимое - Строка - ответа сервиса;
//
Функция ВызовОперацииПодтверждениеВозврата(
		ПараметрыИнтеграции,
		ИдентификаторСессии,
		ДанныеАутентификации,
		ЗаголовокАутентификации,
		URLОперации)
	
	ПараметрыПодключения = ИнтеграцияСПлатежнымиСистемамиСлужебный.ИнициализироватьПараметрыПодключения();
	
	ПараметрыЗапросаJSON = refunds_confirm_refund(
		ИдентификаторСессии,
		ДанныеАутентификации,
		ЗаголовокАутентификации,
		ПараметрыИнтеграции.ТорговаяТочка);
	
	// Вызов операции выполняется в 6 итераций. Повторные вызовы операции требуются
	// для случаев, когда результат выполнения возврата не определен. Обычно операция возврата
	// не занимает много времени, но в ряде случаев время обработки может быть увеличено.
	// Между вызовами добавляется пауза, чтобы не нагружать сервис банка.
	//
	// Паузы между вызовами:
	// - между 2-м и 3-м вызовом делается пауза 3 секунды;
	// - между 3-м и 4-м вызовом делается пауза 10 секунд;
	// - между 4-м и 5-м вызовом делается пауза 15 секунд;
	// - между 5-м и 6-м вызовом делается пауза 15 секунд; 
	
	КоличествоОпераций = 0;
	Пока КоличествоОпераций <= 5 Цикл
		
		ПараметрыОтправки = Новый Структура;
		ПараметрыОтправки.Вставить("Метод"                   , "POST");
		ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
		ПараметрыОтправки.Вставить("Заголовки"               , НовыйЗаголовкиВызоваОперации());
		ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
		ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
		ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
		ПараметрыОтправки.Вставить("Таймаут"                 , 30);
		
		РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
			URLОперации,
			,
			,
			ПараметрыОтправки);
		
		Если РезультатОтправки.КодСостояния < 500
			И РезультатОтправки.КодСостояния <> 0 Тогда
			Прервать;
		КонецЕсли;
		
		// Перед выполнением повторного вызова при работе в модели
		// сервиса необходимо получить новый тикет.
		Если ОбщегоНазначения.РазделениеВключено() Тогда
			
			РезультатИПП = ДанныеАутентификации(URLОперации);
			Если РезультатИПП.Ошибка Тогда
				Прервать;
			КонецЕсли;
			
			ПараметрыЗапросаJSON = refunds_confirm_refund(
				ИдентификаторСессии,
				ДанныеАутентификации,
				ЗаголовокАутентификации,
				ПараметрыИнтеграции.ТорговаяТочка);
			
		КонецЕсли;
		
		КоличествоОпераций = КоличествоОпераций + 1;
		
		Если КоличествоОпераций = 2 Тогда
			ИнтернетПоддержкаПользователей.Пауза(3);
		ИначеЕсли КоличествоОпераций = 3 Тогда
			ИнтернетПоддержкаПользователей.Пауза(5);
		ИначеЕсли КоличествоОпераций = 4 Тогда
			ИнтернетПоддержкаПользователей.Пауза(10);
		ИначеЕсли КоличествоОпераций = 5 Тогда
			ИнтернетПоддержкаПользователей.Пауза(15);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатОтправки;
	
КонецФункции

// Формирует параметры запроса для операции
// sbp/members/{memberId}/refunds/{refundId}/confirm-refund.
//
Функция refunds_confirm_refund(
		ИдентификаторСессии,
		ДанныеАутентификации,
		АутентификацияПлатежнаяСистема,
		ТорговаяТочка)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	// Данные аутентификации.
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьДанныеАутентификации(
		ЗаписьДанныхСообщения,
		ДанныеАутентификации);
	
	// Данные платежная система.
	ЗаписатьДанныеАутентификацииПлатежнойСистемы(
		ЗаписьДанныхСообщения,
		АутентификацияПлатежнаяСистема,
		ТорговаяТочка);
	
	// Параметры клиента.
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьПараметрыКлиента(
		ЗаписьДанныхСообщения);
	
	// Параметры возврата.
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("sbpMemberRequest");
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("state");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИдентификаторСессии);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции:
// sbp/members/{memberId}/refunds/create-refund.
//
Функция ПрочитатьДанные_refunds_confirm_refund(ТелоJSON)
	
	// Ответ сервиса:
	//  operationDate - дата операции в платежной системе;
	//  refundStatus - статус возврата;
	//
	// {
	//  "operationDate": "2020-09-08T13:09:20.093Z",
	//  "refundStatus": "SUCCESS",
	//  "refundStatusDescription": "string"
	// }
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получен ответ сервиса интеграции с платежными системами:
			|%1'"),
		ТелоJSON);
	
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	ИменаСвойствСоЗначениямиДата = Новый Массив;
	ИменаСвойствСоЗначениямиДата.Добавить("operationDate");
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	Результат = ПрочитатьJSON(
		ЧтениеОтвета,
		,
		ИменаСвойствСоЗначениямиДата,
		,
		"ВосстановитьДатуJSON",
		СервисИнтеграцииССБП,
		,
		ИменаСвойствСоЗначениямиДата);
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызов операции POST /sbp/v1/members/{memberId}/refund/{refundId}/get-refund

// Получает статус возврат оплаты в платежной системе.
//
// Параметры:
//  ИдентификаторПлатежнойСистемы - Строка - идентификатор возврата в платежной системе;
//  ДатаЗапросаСтатуса - Дата - дата последнего запроса статуса оплаты;
//  ПараметрыИнтеграции - Структура - параметры выполнения операции
//    см. ИнтеграцияСПлатежнымиСистемамиСлужебный.ПараметрыИнтеграции;
//  ЗапросНаличияСтатуса - Булево - если Истина, будет выполнен запрос наличия статуса.
//
// Возвращаемое значение:
//  Структура - результат проверки статуса заказа на оплату в платежной системе:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом;
//    * СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора;
//    * СтатусВозврата - Строка - состояние возврата в платежной системе.
//    *Д атаОперации - Дата - дата регистрации операции в платежной системе.
//
Функция ОперацияСтатусВозврата(
		ИдентификаторПлатежнойСистемы,
		ДатаЗапросаСтатуса,
		ПараметрыИнтеграции,
		ЗапросНаличияСтатуса = Истина)
	
	РезультатОперации = ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("СтатусВозврата", "");
	РезультатОперации.Вставить("ДатаОперации", Дата(1, 1, 1));
	РезультатОперации.Вставить("ОбновитьДатуЗапросаСтатуса", Ложь);
	
	Если ЗапросНаличияСтатуса Тогда
		
		URLОперации = ИнтеграцияСПлатежнымиСистемамиСлужебный.URLОперацииСервиса(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"/members/%1/status-manager/refunds/%2/statuses/test-check-needed",
				ИдентификаторУчастникаСБП(ПараметрыИнтеграции.ПлатежнаяСистема),
				ИдентификаторПлатежнойСистемы),
			ИнтеграцияСПлатежнымиСистемамиСлужебный.ИдентификаторСБП());
		
		РезультатПроверки = ОперацияПроверкаНаличияСтатусаОперации(
			URLОперации,
			ДатаЗапросаСтатуса);
		
		Если Не РезультатПроверки.ЗапроситьСтатус Тогда
			ЗаполнитьЗначенияСвойств(
				РезультатОперации,
				РезультатПроверки,
				"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
			Если Не ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
				РезультатОперации.СтатусВозврата = ИдентификаторСтатусаВПроцессе();
			КонецЕсли;
			Возврат РезультатОперации;
		КонецЕсли;
		
	КонецЕсли;
	
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Проверка статуса заказа на оплату в платежной системе.'"),
		Ложь);
	
	РезультатОперации.ОбновитьДатуЗапросаСтатуса = Истина;
	
	URLОперации = ИнтеграцияСПлатежнымиСистемамиСлужебный.URLОперацииСервиса(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"/members/%1/refunds/%2/get-refund",
			ИдентификаторУчастникаСБП(ПараметрыИнтеграции.ПлатежнаяСистема),
			ИдентификаторПлатежнойСистемы),
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ИдентификаторСБП());
	
	РезультатИПП = ДанныеАутентификации(URLОперации);
	
	Если РезультатИПП.Ошибка Тогда
		РезультатОперации.КодОшибки = ИнтеграцияСПлатежнымиСистемамиСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ДанныеДляПодписи = Новый Массив;
	Если ПлатежнаяСистемаИспользуетHMAC(ПараметрыИнтеграции.ПлатежнаяСистема) Тогда
		ДанныеДляПодписи.Добавить(ИдентификаторПлатежнойСистемы);
	КонецЕсли;
	
	РезультатПлатежнаяСистема = ДанныеАутентификацииВПлатежнойСистеме(
		ПараметрыИнтеграции,
		ДанныеДляПодписи);
	
	Если РезультатПлатежнаяСистема.Ошибка Тогда
		РезультатОперации.КодОшибки = ИнтеграцияСПлатежнымиСистемамиСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатПлатежнаяСистема.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатПлатежнаяСистема.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	РезультатОтправки = ВызовОперацииСтатусВозврата(
		ПараметрыИнтеграции,
		РезультатИПП.ДанныеАутентификации,
		РезультатПлатежнаяСистема.Аутентификация,
		URLОперации);
	
	// Обработка случаев устаревания токена аутентификации для способа
	// Resource Owner Password Credentials Grant.
	Если РезультатОтправки.КодСостояния = 401
		И ПлатежнаяСистемаИспользуетPasswordCredentialsGrant(ПараметрыИнтеграции.ПлатежнаяСистема) Тогда
		
		РезультатПлатежнаяСистема = ДанныеАутентификацииВПлатежнойСистеме(
			ПараметрыИнтеграции,
			ДанныеДляПодписи,
			Истина);
		
		Если РезультатПлатежнаяСистема.Ошибка Тогда
			РезультатОперации.КодОшибки = ИнтеграцияСПлатежнымиСистемамиСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
			РезультатОперации.СообщениеОбОшибке = РезультатПлатежнаяСистема.ИнформацияОбОшибке;
			РезультатОперации.ИнформацияОбОшибке = РезультатПлатежнаяСистема.ИнформацияОбОшибке;
			Возврат РезультатОперации;
		КонецЕсли;
		
		РезультатОтправки = ВызовОперацииСтатусВозврата(
			ПараметрыИнтеграции,
			РезультатИПП.ДанныеАутентификации,
			РезультатПлатежнаяСистема.Аутентификация,
			URLОперации);
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = ИнтеграцияСПлатежнымиСистемамиСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = ИнтеграцияСПлатежнымиСистемамиСлужебный.ПереопределитьСообщениеПользователю(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое);
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить статус оплаты в платежной системе.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|При получении статуса оплаты сервис вернул ошибку.
				|URL: %2
				|Код ошибки: %3
				|Подробная информация:
				|%4'"),
			РезультатОперации.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			РезультатОтправки.ИнформацияОбОшибке);
		
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ДанныеСтатуса = ПрочитатьДанные_get_refund(РезультатОтправки.Содержимое);
	
	РезультатОперации.СтатусВозврата = ДанныеСтатуса.sbpMemberResponse.refundStatus;
	РезультатОперации.ДатаОперации = ДанныеСтатуса.sbpMemberResponse.operationDate;
	
	Если ДанныеСтатуса.sbpMemberResponse.refundStatus = ИдентификаторСтатусаОтменена() Тогда
		
		Если ДанныеСтатуса.sbpMemberResponse.Свойство("refundStatusDescription") Тогда
			ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось получить статус возврата в платежной системе.
					|
					|%1
					|
					|Техническая информация об ошибке:
					|Операция была отменена.'"),
				ДанныеСтатуса.sbpMemberResponse.refundStatusDescription);
		Иначе
			ИнформацияОбОшибке = НСтр("ru = 'Не удалось получить статус возврата в платежной системе.
				|
				|Причина отмены операции не указана.
				|
				|Техническая информация об ошибке:
				|Операция была отменена.'");
		КонецЕсли;
		
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			ИнформацияОбОшибке,
			Истина);

	Иначе
		
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'Проверка статуса заказа на оплату в платежной системе завершена.'"),
			Ложь);
		
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

// Выполняет вызов операции определения статуса возврата оплаты.
//
// Параметры:
//  ПараметрыИнтеграции - Структура - параметры выполнения операции
//                        см. ИнтеграцияСПлатежнымиСистемамиСлужебный.ПараметрыИнтеграции;
//  ДанныеАутентификации - Структура - данные аутентификации на Портале 1С:ИТС;
//  ЗаголовокПлатежнаяСистема - Строка - данные аутентификации в платежной системе;
//  URLОперации - Строка - url для вызова операции;
//
// Возвращаемое значение:
//  Структура - результат статуса возврата в платежной системе:
//   *КодСостояния - Число - http код результата операции;
//   *КодОшибки - Строка - идентификатор ошибки вызова операции;
//   *Содержимое - Строка - ответа сервиса;
//
Функция ВызовОперацииСтатусВозврата(
		ПараметрыИнтеграции,
		ДанныеАутентификации,
		ЗаголовокАутентификации,
		URLОперации)
	
	ПараметрыПодключения = ИнтеграцияСПлатежнымиСистемамиСлужебный.ИнициализироватьПараметрыПодключения();
	
	ПараметрыЗапросаJSON = get_refund(
		ДанныеАутентификации,
		ЗаголовокАутентификации,
		ПараметрыИнтеграции.ТорговаяТочка);
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , НовыйЗаголовкиВызоваОперации());
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	Возврат ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
КонецФункции

// Формирует параметры запроса для операции
// /sbp/v1/members/{memberId}/refund/{refundId}/get-refund.
//
Функция get_refund(
		ДанныеАутентификации,
		АутентификацияПлатежнаяСистема,
		ТорговаяТочка)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	// Данные аутентификации.
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьДанныеАутентификации(
		ЗаписьДанныхСообщения,
		ДанныеАутентификации);
	
	// Данные платежная система.
	ЗаписатьДанныеАутентификацииПлатежнойСистемы(
		ЗаписьДанныхСообщения,
		АутентификацияПлатежнаяСистема,
		ТорговаяТочка);
	
	// Параметры клиента.
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьПараметрыКлиента(
		ЗаписьДанныхСообщения);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции:
// /sbp/v1/members/{memberId}/refund/{refundId}/get-refund.
//
Функция ПрочитатьДанные_get_refund(ТелоJSON)
	
	// Ответ сервиса:
	//  operationDate - дата операции в платежной системе;
	//  refundStatus - статус возврата;
	// 
	// {
	//  "operationDate": "string",
	//  "refundStatus": "SUCCESS",
	//  "refundStatusDescription": "string"
	// }
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получен ответ сервиса интеграции с платежными системами:
			|%1'"),
		ТелоJSON);
	
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	ИменаСвойствСоЗначениямиДата = Новый Массив;
	ИменаСвойствСоЗначениямиДата.Добавить("operationDate");
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	Результат = ПрочитатьJSON(
		ЧтениеОтвета,
		,
		ИменаСвойствСоЗначениямиДата,
		,
		"ВосстановитьДатуJSON",
		СервисИнтеграцииССБП,
		,
		ИменаСвойствСоЗначениямиДата);
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызов операции GET /program1c/sbp/v1/members/infos

// Получает идентификаторы участников СБП из сервиса.
//
// Возвращаемое значение:
//  Массив из Структура - загруженные настройки.
//
Функция ОперацияНастройкиУчастниковСБП()
	
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Загрузка идентификаторов платежных систем СБП.'"),
		Ложь);
	
	URLОперации = ИнтеграцияСПлатежнымиСистемамиСлужебный.URLОперацииСервиса(
		"/members/infos?c2bSupported=true",
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ИдентификаторСБП());
	
	ПараметрыПодключения = ИнтеграцияСПлатежнымиСистемамиСлужебный.ИнициализироватьПараметрыПодключения();
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "GET");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить об идентификаторах платежных систем СБП.
				|
				|Техническая информация об ошибке:
				|При получении информации об идентификаторах платежных систем СБП возникли ошибки.
				|URL: %2
				|Код ошибки: %3
				|Подробная информация:
				|%4'"),
			URLОперации,
			РезультатОтправки.КодОшибки,
			РезультатОтправки.ИнформацияОбОшибке);
		
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(ИнформацияОбОшибке),
			Истина);
		
		ВызватьИсключение ИнформацияОбОшибке;
		
	КонецЕсли;
	
	Идентификаторы = ПрочитатьДанные_sbp_members(РезультатОтправки.Содержимое);
	
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Завершена  загрузка идентификаторов платежных систем СБП.'"),
		Ложь);
	
	Возврат Идентификаторы;
	
КонецФункции

// Чтение ответа операции:
// /attachments/sbp/sbp-members.json.
//
Функция ПрочитатьДанные_sbp_members(ТелоJSON)
	
	// Ответ сервиса:
	//  id - идентификатор платежной системы;
	//  name - наименование платежной системы.
	// 
	// [
	//  {
	//    "memberId": "string",
	//    "memberName": "string",
	//    "biks": [
	//      "string"
	//    ],
	//    "integrationEnabled": true,
	//    "personalAccountPageUrl": "string",
	//    "attentionText": "string",
	//    "c2bSupported": true,
	//    "c2bVerified": true,
	//    "c2bIntegrationSupported": true
	//  }
	// ]
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	Результат = ПрочитатьJSON(ЧтениеОтвета);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ВызовОперацийСверкиВзаиморасчетов

////////////////////////////////////////////////////////////////////////////////
// Вызов операции POST /sbp/v1/members/{memberId}/reports/reconciliation-of-settlements/turnovers/request-report

// Получает данные отчета по сверке взаиморасчетов из сервиса платежной системы.
//
// Параметры:
//  НачалоПериода - Дата - дата начало выборки данных отчета;
//  КонецПериода - Дата - дата окончания выборки данных отчета;
//  ПараметрыИнтеграции - Структура - параметры выполнения операции
//                        см. ИнтеграцияСПлатежнымиСистемамиСлужебный.ПараметрыИнтеграции.
//
// Возвращаемое значение:
//  Структура - данные сверки взаиморасчетов:
//    *Идентификатор - Строка - идентификатор отчета;
//    *URLФайла - Строка - url файла для загрузки данных;
//    *СуммаВозвратов - Число - общая сумма возвратов за период по торговой точке;
//    *СуммаОплат - Число - общая сумма оплат за период по торговой точке;
//    *СуммаКомиссии - Число - рассчитанная сумма возвратов за период по торговой точке;
//    *Статус - Строка - текущее состояние формирования отчета;
//    *ТипОшибки - Строка - вид ошибки формирования отчета;
//    *КодОшибки - Строка - строковый код возникшей ошибки, который
//                 может быть обработан вызывающим методом;
//    *СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ОперацияЗапросОтчетаПоОборотам(
		НачалоПериода,
		КонецПериода,
		ПараметрыИнтеграции)
	
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Запрос отчета сверки взаиморасчетов по операциям.'"),
		Ложь);
	
	РезультатОперации = ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("Идентификатор", "");
	РезультатОперации.Вставить("URLФайла", "");
	РезультатОперации.Вставить("СуммаВозвратов", 0);
	РезультатОперации.Вставить("СуммаОплат", 0);
	РезультатОперации.Вставить("СуммаКомиссии", 0);
	РезультатОперации.Вставить("Статус", "");
	РезультатОперации.Вставить("ТипОшибки", "");
	
	URLОперации = ИнтеграцияСПлатежнымиСистемамиСлужебный.URLОперацииСервиса(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"/members/%1/reports/reconciliation-of-settlements/turnovers/request-report",
			ИдентификаторУчастникаСБП(ПараметрыИнтеграции.ПлатежнаяСистема)),
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ИдентификаторСБП());
	
	РезультатИПП = ДанныеАутентификации(URLОперации);
	
	Если РезультатИПП.Ошибка Тогда
		РезультатОперации.КодОшибки = ИнтеграцияСПлатежнымиСистемамиСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ДанныеДляПодписи = Новый Массив;
	Если ПлатежнаяСистемаИспользуетHMAC(ПараметрыИнтеграции.ПлатежнаяСистема) Тогда
		ДанныеДляПодписи.Добавить(ПараметрыИнтеграции.ТорговаяТочка);
	КонецЕсли;
	
	РезультатПлатежнаяСистема = ДанныеАутентификацииВПлатежнойСистеме(
		ПараметрыИнтеграции,
		ДанныеДляПодписи);
	
	Если РезультатПлатежнаяСистема.Ошибка Тогда
		РезультатОперации.КодОшибки = ИнтеграцияСПлатежнымиСистемамиСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатПлатежнаяСистема.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатПлатежнаяСистема.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	РезультатОтправки = ВызовОперацииЗапросОтчетаПоОборотам(
		ПараметрыИнтеграции,
		НачалоПериода,
		КонецПериода,
		РезультатИПП.ДанныеАутентификации,
		РезультатПлатежнаяСистема.Аутентификация,
		URLОперации);
	
	// Обработка случаев устаревания токена аутентификации для способа
	// Resource Owner Password Credentials Grant.
	Если РезультатОтправки.КодСостояния = 401
		И ПлатежнаяСистемаИспользуетPasswordCredentialsGrant(ПараметрыИнтеграции.ПлатежнаяСистема) Тогда
		
		РезультатПлатежнаяСистема = ДанныеАутентификацииВПлатежнойСистеме(
			ПараметрыИнтеграции,
			ДанныеДляПодписи,
			Истина);
		
		Если РезультатПлатежнаяСистема.Ошибка Тогда
			РезультатОперации.КодОшибки = ИнтеграцияСПлатежнымиСистемамиСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
			РезультатОперации.СообщениеОбОшибке = РезультатПлатежнаяСистема.ИнформацияОбОшибке;
			РезультатОперации.ИнформацияОбОшибке = РезультатПлатежнаяСистема.ИнформацияОбОшибке;
			Возврат РезультатОперации;
		КонецЕсли;
		
		РезультатОтправки = ВызовОперацииЗапросОтчетаПоОборотам(
			ПараметрыИнтеграции,
			НачалоПериода,
			КонецПериода,
			РезультатИПП.ДанныеАутентификации,
			РезультатПлатежнаяСистема.Аутентификация,
			URLОперации);
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = ИнтеграцияСПлатежнымиСистемамиСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = ИнтеграцияСПлатежнымиСистемамиСлужебный.ПереопределитьСообщениеПользователю(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое);
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось выполнить запрос отчета по сверке взаиморасчетов.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|При запросе отчета по сверке взаиморасчетов сервис вернул ошибку.
				|URL: %2
				|Код ошибки: %3
				|Подробная информация:
				|%4'"),
			РезультатОперации.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			РезультатОтправки.ИнформацияОбОшибке);
		
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ДанныеОтвета = ПрочитатьДанные_turnovers_request_report(
		РезультатОтправки.Содержимое);
	
	РезультатОперации.Идентификатор = ДанныеОтвета.sbpMemberResponse.reportId;
	РезультатОперации.URLФайла = ДанныеОтвета.sbpMemberResponse.resultURL;
	РезультатОперации.Статус = ДанныеОтвета.sbpMemberResponse.reportState.status;
	
	Если ДанныеОтвета.sbpMemberResponse.reportState.Свойство("errorType") Тогда
		РезультатОперации.ТипОшибки = ДанныеОтвета.sbpMemberResponse.reportState.errorType;
	КонецЕсли;
	
	Если ДанныеОтвета.sbpMemberResponse.result <> Неопределено Тогда
		РезультатОперации.СуммаВозвратов = ДанныеОтвета.sbpMemberResponse.result.refundAmountSum;
		РезультатОперации.СуммаОплат = ДанныеОтвета.sbpMemberResponse.result.paymentAmountSum;
		РезультатОперации.СуммаКомиссии = ДанныеОтвета.sbpMemberResponse.result.feeSum;
	КонецЕсли;
	
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Запрос отчета по оборотам в платежной системе завершен.'"),
		Ложь);
	
	Возврат РезультатОперации;
	
КонецФункции

// Выполняет вызов операции запроса отчета по оборотам.
//
// Параметры:
//  ПараметрыИнтеграции - Структура - параметры выполнения операции
//                        см. ИнтеграцияСПлатежнымиСистемамиСлужебный.ПараметрыИнтеграции;
//  НачалоПериода - Дата - дата начало выборки данных отчета;
//  КонецПериода - Дата - дата окончания выборки данных отчета;
//  ДанныеАутентификации - Структура - данные аутентификации на Портале 1С:ИТС;
//  ЗаголовокПлатежнаяСистема - Строка - данные аутентификации в платежной системе;
//  URLОперации - Строка - url для вызова операции;
//
// Возвращаемое значение:
//  Структура - результат запроса отчета по оборотам в платежной системе:
//   *КодСостояния - Число - http код результата операции;
//   *КодОшибки - Строка - идентификатор ошибки вызова операции;
//   *Содержимое - Строка - ответа сервиса;
//
Функция ВызовОперацииЗапросОтчетаПоОборотам(
		ПараметрыИнтеграции,
		НачалоПериода,
		КонецПериода,
		ДанныеАутентификации,
		ЗаголовокАутентификации,
		URLОперации)
	
	ПараметрыПодключения = ИнтеграцияСПлатежнымиСистемамиСлужебный.ИнициализироватьПараметрыПодключения();
	
	ПараметрыЗапросаJSON = turnovers_request_report(
		НачалоПериода,
		КонецПериода,
		ПараметрыИнтеграции.ТорговаяТочка,
		ДанныеАутентификации,
		ЗаголовокАутентификации);
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , НовыйЗаголовкиВызоваОперации());
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	Возврат ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
КонецФункции

// Формирует параметры запроса для операции
// /sbp/v1/members/{memberId}/reports/reconciliation-of-settlements/turnovers/request-report.
//
Функция turnovers_request_report(
		НачалоПериода,
		КонецПериода,
		ТорговаяТочка,
		ДанныеАутентификации,
		АутентификацияПлатежнаяСистема)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	// Данные аутентификации.
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьДанныеАутентификации(
		ЗаписьДанныхСообщения,
		ДанныеАутентификации);
	
	// Данные платежная система.
	ЗаписатьДанныеАутентификацииПлатежнойСистемы(
		ЗаписьДанныхСообщения,
		АутентификацияПлатежнаяСистема,
		ТорговаяТочка);
	
	// Параметры клиента.
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьПараметрыКлиента(
		ЗаписьДанныхСообщения);
	
	// Параметры отчета.
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("sbpMemberRequest");
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("endDate");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(
		ЗаписатьДатуJSON(
			КонецПериода,
			ФорматДатыJSON.ISO,
			ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением));
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("beginDate");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(
		ЗаписатьДатуJSON(
			НачалоПериода,
			ФорматДатыJSON.ISO,
			ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением));
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("merchantId");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ТорговаяТочка);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции:
// /sbp/v1/members/{memberId}/reports/reconciliation-of-settlements/turnovers/request-report.
//
Функция ПрочитатьДанные_turnovers_request_report(ТелоJSON)
	
	// Ответ сервиса:
	//  reportId - идентификатор отчета;
	//  status - статус формирования отчета;
	//  statusDate - дата отчета;
	//  feeSum - сумма комиссии;
	//  paymentAmountSum - сумма оплат;
	//  refundAmountSum - сумма возвратов.
	// 
	// {
	//  "reportId": "string",
	//  "reportState": {
	//    "errorType": "INTERNAL_ERROR",
	//    "status": "PENDING",
	//    "statusDate": "2020-09-11T07:02:18.409Z"
	//  },
	//  "result": {
	//    "feeSum": 0,
	//    "paymentAmountSum": 0,
	//    "refundAmountSum": 0
	//  },
	//  "resultURL": "string"
	// }
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получен ответ сервиса интеграции с платежными системами:
			|%1'"),
		ТелоJSON);
	
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	Результат = ПрочитатьJSON(ЧтениеОтвета);
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызов операции POST /sbp/v1/members/{memberId}/reports/reconciliation-of-settlements/turnovers/{reportId}/get-report

// Получает статус отчета по сверке взаиморасчетов из сервиса платежной системы.
//
// Параметры:
//  Идентификатор - Строка - идентификатор отчета;
//  ПараметрыИнтеграции - Структура - параметры выполнения операции
//                        см. ИнтеграцияСПлатежнымиСистемамиСлужебный.ПараметрыИнтеграции;
//  ДатаЗапросаСтатуса - Дата - для определения периодичности получения статуса
//                       формирования отчета.
//
// Возвращаемое значение:
//  Структура - данные сверке взаиморасчетов:
//    *Идентификатор - Строка - идентификатор отчета;
//    *URLФайла - Строка - url файла для загрузки данных;
//    *СуммаВозвратов - Число - общая сумма возвратов за период по торговой точке;
//    *СуммаОплат - Число - общая сумма оплат за период по торговой точке;
//    *СуммаКомиссии - Число - рассчитанная сумма возвратов за период по торговой точке;
//    *Статус - Строка - текущее состояние формирования отчета;
//    *ТипОшибки - Строка - вид ошибки формирования отчета;
//    *КодОшибки - Строка - строковый код возникшей ошибки, который
//                 может быть обработан вызывающим методом;
//    *СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ОперацияЗапросСтатусаОтчетаПоОборотам(
		Идентификатор,
		ПараметрыИнтеграции,
		ДатаЗапросаСтатуса)
	
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Запрос статуса отчета по сверке оборотов.'"),
		Ложь);
	
	РезультатОперации = ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("URLФайла", "");
	РезультатОперации.Вставить("СуммаВозвратов", 0);
	РезультатОперации.Вставить("СуммаОплат", 0);
	РезультатОперации.Вставить("СуммаКомиссии", 0);
	РезультатОперации.Вставить("Статус", "");
	РезультатОперации.Вставить("ТипОшибки", "");
	
	URLОперации = ИнтеграцияСПлатежнымиСистемамиСлужебный.URLОперацииСервиса(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"/members/%1/status-manager/reports/reconciliation-of-settlements/turnovers/%2/states/test-check-needed",
			ИдентификаторУчастникаСБП(ПараметрыИнтеграции.ПлатежнаяСистема),
			Новый УникальныйИдентификатор),
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ИдентификаторСБП());
	
	РезультатПроверки = ОперацияПроверкаНаличияСтатусаОперации(
		URLОперации,
		ДатаЗапросаСтатуса);
	
	Если Не РезультатПроверки.ЗапроситьСтатус Тогда
		ЗаполнитьЗначенияСвойств(
			РезультатОперации,
			РезультатПроверки,
			"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
		Если Не ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
			РезультатОперации.Статус = ИдентификаторСтатусаОжидание();
		КонецЕсли;
		Возврат РезультатОперации;
	КонецЕсли;
	
	URLОперации = ИнтеграцияСПлатежнымиСистемамиСлужебный.URLОперацииСервиса(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"/members/%1/reports/reconciliation-of-settlements/turnovers/%2/get-report",
			ИдентификаторУчастникаСБП(ПараметрыИнтеграции.ПлатежнаяСистема),
			Идентификатор),
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ИдентификаторСБП());
	
	РезультатИПП = ДанныеАутентификации(URLОперации);
	
	Если РезультатИПП.Ошибка Тогда
		РезультатОперации.КодОшибки = ИнтеграцияСПлатежнымиСистемамиСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ДанныеДляПодписи = Новый Массив;
	Если ПлатежнаяСистемаИспользуетHMAC(ПараметрыИнтеграции.ПлатежнаяСистема) Тогда
		ДанныеДляПодписи.Добавить(Идентификатор);
	КонецЕсли;
	
	РезультатПлатежнаяСистема = ДанныеАутентификацииВПлатежнойСистеме(
		ПараметрыИнтеграции,
		ДанныеДляПодписи);
	
	Если РезультатПлатежнаяСистема.Ошибка Тогда
		РезультатОперации.КодОшибки = ИнтеграцияСПлатежнымиСистемамиСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатПлатежнаяСистема.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатПлатежнаяСистема.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	РезультатОтправки = ВызовОперацииЗапросСтатусаОтчетаПоОборотам(
		ПараметрыИнтеграции,
		РезультатИПП.ДанныеАутентификации,
		РезультатПлатежнаяСистема.Аутентификация,
		URLОперации);
	
	// Обработка случаев устаревания токена аутентификации для способа
	// Resource Owner Password Credentials Grant.
	Если РезультатОтправки.КодСостояния = 401
		И ПлатежнаяСистемаИспользуетPasswordCredentialsGrant(ПараметрыИнтеграции.ПлатежнаяСистема) Тогда
		
		РезультатПлатежнаяСистема = ДанныеАутентификацииВПлатежнойСистеме(
			ПараметрыИнтеграции,
			ДанныеДляПодписи,
			Истина);
		
		Если РезультатПлатежнаяСистема.Ошибка Тогда
			РезультатОперации.КодОшибки = ИнтеграцияСПлатежнымиСистемамиСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
			РезультатОперации.СообщениеОбОшибке = РезультатПлатежнаяСистема.ИнформацияОбОшибке;
			РезультатОперации.ИнформацияОбОшибке = РезультатПлатежнаяСистема.ИнформацияОбОшибке;
			Возврат РезультатОперации;
		КонецЕсли;
		
		РезультатОтправки = ВызовОперацииЗапросСтатусаОтчетаПоОборотам(
			ПараметрыИнтеграции,
			РезультатИПП.ДанныеАутентификации,
			РезультатПлатежнаяСистема.Аутентификация,
			URLОперации);
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = ИнтеграцияСПлатежнымиСистемамиСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = ИнтеграцияСПлатежнымиСистемамиСлужебный.ПереопределитьСообщениеПользователю(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое);
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить статус отчета по сверке взаиморасчетов.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|При запросе отчета по сверке взаиморасчетов сервис вернул ошибку.
				|URL: %2
				|Код ошибки: %3
				|Подробная информация:
				|%4'"),
			РезультатОперации.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			РезультатОтправки.ИнформацияОбОшибке);
		
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ДанныеОтвета = ПрочитатьДанные_turnovers_get_report(
		РезультатОтправки.Содержимое);
	
	РезультатОперации.URLФайла = ДанныеОтвета.sbpMemberResponse.resultURL;
	РезультатОперации.Статус = ДанныеОтвета.sbpMemberResponse.reportState.status;
	
	Если ДанныеОтвета.sbpMemberResponse.reportState.Свойство("errorType") Тогда
		РезультатОперации.ТипОшибки = ДанныеОтвета.sbpMemberResponse.reportState.errorType;
	КонецЕсли;
	
	Если ДанныеОтвета.sbpMemberResponse.result <> Неопределено Тогда
		РезультатОперации.СуммаВозвратов = ДанныеОтвета.sbpMemberResponse.refundStatus;
		РезультатОперации.СуммаОплат = ДанныеОтвета.sbpMemberResponse.refundStatus;
		РезультатОперации.СуммаКомиссии = ДанныеОтвета.sbpMemberResponse.refundStatus;
	КонецЕсли;
	
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Запрос статуса отчета по оборотам в платежной системе завершен.'"),
		Ложь);
	
	Возврат РезультатОперации;
	
КонецФункции

// Выполняет вызов операции получения статуса отчета по оборотам.
//
// Параметры:
//  ПараметрыИнтеграции - Структура - параметры выполнения операции
//                        см. ИнтеграцияСПлатежнымиСистемамиСлужебный.ПараметрыИнтеграции;
//  ДанныеАутентификации - Структура - данные аутентификации на Портале 1С:ИТС;
//  ЗаголовокПлатежнаяСистема - Строка - данные аутентификации в платежной системе;
//  URLОперации - Строка - url для вызова операции;
//
// Возвращаемое значение:
//  Структура - результат статуса отчета по оборотам в платежной системе:
//   *КодСостояния - Число - http код результата операции;
//   *КодОшибки - Строка - идентификатор ошибки вызова операции;
//   *Содержимое - Строка - ответа сервиса;
//
Функция ВызовОперацииЗапросСтатусаОтчетаПоОборотам(
		ПараметрыИнтеграции,
		ДанныеАутентификации,
		ЗаголовокАутентификации,
		URLОперации)
	
	ПараметрыПодключения = ИнтеграцияСПлатежнымиСистемамиСлужебный.ИнициализироватьПараметрыПодключения();
	
	ПараметрыЗапросаJSON = turnovers_get_report(
		ДанныеАутентификации,
		ЗаголовокАутентификации,
		ПараметрыИнтеграции.ТорговаяТочка);
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , НовыйЗаголовкиВызоваОперации());
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	Возврат ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
КонецФункции

// Формирует параметры запроса для операции
// /sbp/v1/members/{memberId}/reports/reconciliation-of-settlements/turnovers/{reportId}/get-report
//
Функция turnovers_get_report(
		ДанныеАутентификации,
		АутентификацияПлатежнаяСистема,
		ТорговаяТочка)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	// Данные аутентификации.
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьДанныеАутентификации(
		ЗаписьДанныхСообщения,
		ДанныеАутентификации);
	
	// Данные платежная система.
	ЗаписатьДанныеАутентификацииПлатежнойСистемы(
		ЗаписьДанныхСообщения,
		АутентификацияПлатежнаяСистема,
		ТорговаяТочка);
	
	// Параметры клиента.
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьПараметрыКлиента(
		ЗаписьДанныхСообщения);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции:
// /sbp/v1/members/{memberId}/reports/reconciliation-of-settlements/turnovers/{reportId}/get-report.
//
Функция ПрочитатьДанные_turnovers_get_report(ТелоJSON)
	
	// Ответ сервиса:
	//  reportId - идентификатор отчета;
	//  status - статус формирования отчета;
	//  statusDate - дата отчета;
	//  feeSum - сумма комиссии;
	//  paymentAmountSum - сумма оплат;
	//  refundAmountSum - сумма возвратов.
	// 
	// {
	//  "reportId": "string",
	//  "reportState": {
	//    "errorType": "INTERNAL_ERROR",
	//    "status": "PENDING",
	//    "statusDate": "2020-09-11T07:02:18.409Z"
	//  },
	//  "result": {
	//    "feeSum": 0,
	//    "paymentAmountSum": 0,
	//    "refundAmountSum": 0
	//  },
	//  "resultURL": "string"
	// }
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получен ответ сервиса интеграции с платежными системами:
			|%1'"),
		ТелоJSON);
	
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	Результат = ПрочитатьJSON(ЧтениеОтвета);
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызов операции загрузки файла отчетов сверки оборотов.

// Выполняет загрузку файла отчета по переданному url.
//
// Параметры:
//  URLОперации - Строка - url файла отчета;
//  Идентификатор - Строка - идентификатор отчета;
//  ПараметрыИнтеграции - Структура - параметры выполнения операции
//                        см. ИнтеграцияСПлатежнымиСистемамиСлужебный.ПараметрыИнтеграции;
//
// Возвращаемое значение:
//  Структура - данные сверке взаиморасчетов:
//    *СуммаВозвратов - Число - общая сумма возвратов за период по торговой точке;
//    *СуммаОплат - Число - общая сумма оплат за период по торговой точке;
//    *СуммаКомиссии - Число - рассчитанная сумма возвратов за период по торговой точке;
//    *СтатусОперации - Строка - текущее состояние операции оплаты:
//                  - "Выполняется" - подтверждение оплаты от платежной системы не получено;
//                  - "Отменена" - оплата по оплата по ранее сформированному QR-коду невозможна;
//                  - "Выполнена" - платежная система подтвердила оплату;
//                  - "ТребуетсяПодтверждение" - необходимо подтвердить действие;
//                  - "Ошибка" - не удалось выполнить проверку оплаты из-за ошибки.
//    *КодОшибки - Строка - строковый код возникшей ошибки, который
//                 может быть обработан вызывающим методом;
//    *СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ОперацияЗагрузитьФайлОтчетаПоСверкеОборотов(URLОперации, Идентификатор, ПараметрыИнтеграции)
	
	РезультатОперации = ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("СуммаВозвратов", 0);
	РезультатОперации.Вставить("СуммаОплат", 0);
	РезультатОперации.Вставить("СуммаКомиссии", 0);
	
	ДанныеДляПодписи = Новый Массив;
	Если ПлатежнаяСистемаИспользуетHMAC(ПараметрыИнтеграции.ПлатежнаяСистема) Тогда
		ДанныеДляПодписи.Добавить(Идентификатор);
	КонецЕсли;
	
	РезультатПлатежнаяСистема = ДанныеАутентификацииВПлатежнойСистеме(
		ПараметрыИнтеграции,
		ДанныеДляПодписи);
	
	РезультатОтправки = ВызовЗагрузитьФайлОтчетаПоСверкеОборотов(
		ПараметрыИнтеграции,
		РезультатПлатежнаяСистема.Аутентификация,
		URLОперации);
	
	// Обработка случаев устаревания токена аутентификации для способа
	// Resource Owner Password Credentials Grant.
	Если РезультатОтправки.КодСостояния = 401
		И ПлатежнаяСистемаИспользуетPasswordCredentialsGrant(ПараметрыИнтеграции.ПлатежнаяСистема) Тогда
		
		РезультатПлатежнаяСистема = ДанныеАутентификацииВПлатежнойСистеме(
			ПараметрыИнтеграции,
			ДанныеДляПодписи);
		
		Если РезультатПлатежнаяСистема.Ошибка Тогда
			РезультатОперации.КодОшибки = ИнтеграцияСПлатежнымиСистемамиСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
			РезультатОперации.СообщениеОбОшибке = РезультатПлатежнаяСистема.ИнформацияОбОшибке;
			РезультатОперации.ИнформацияОбОшибке = РезультатПлатежнаяСистема.ИнформацияОбОшибке;
			Возврат РезультатОперации;
		КонецЕсли;
		
		РезультатОтправки = ВызовЗагрузитьФайлОтчетаПоСверкеОборотов(
			ПараметрыИнтеграции,
			РезультатПлатежнаяСистема.Аутентификация,
			URLОперации);
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = ИнтеграцияСПлатежнымиСистемамиСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = ИнтеграцияСПлатежнымиСистемамиСлужебный.ПереопределитьСообщениеПользователю(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое);
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось выполнить загрузку отчета по сверке взаиморасчетов.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|При загрузке файла отчета по сверке взаиморасчетов сервис вернул ошибку.
				|URL: %2
				|Код ошибки: %3
				|Подробная информация:
				|%4'"),
			РезультатОперации.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			РезультатОтправки.ИнформацияОбОшибке);
		
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ДанныеОтвета = ПрочитатьДанныеДанныеОтчетаПоСверкеОборотов(
		РезультатОтправки.Содержимое);
	Если ДанныеОтвета.result <> Неопределено Тогда
		РезультатОперации.СуммаВозвратов = ДанныеОтвета.result.refundAmountSum;
		РезультатОперации.СуммаОплат = ДанныеОтвета.result.paymentAmountSum;
		РезультатОперации.СуммаКомиссии = ДанныеОтвета.result.feeSum;
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

// Выполняет загрузку файла отчета по переданному url.
//
// Параметры:
//  ПараметрыИнтеграции - Структура - параметры выполнения операции
//                        см. ИнтеграцияСПлатежнымиСистемамиСлужебный.ПараметрыИнтеграции;
//  ДанныеАутентификации - Структура - данные аутентификации на Портале 1С:ИТС;
//  ЗаголовокПлатежнаяСистема - Строка - данные аутентификации в платежной системе;
//  URLОперации - Строка - url для вызова операции;
//
// Возвращаемое значение:
//  Структура - результат статуса отчета по оборотам в платежной системе:
//   *КодСостояния - Число - http код результата операции;
//   *КодОшибки - Строка - идентификатор ошибки вызова операции;
//   *Содержимое - Строка - ответа сервиса;
//
Функция ВызовЗагрузитьФайлОтчетаПоСверкеОборотов(
		ПараметрыИнтеграции,
		ЗаголовокАутентификации,
		URLОперации)
	
	ПараметрыПодключения = ИнтеграцияСПлатежнымиСистемамиСлужебный.ИнициализироватьПараметрыПодключения();
	
	Заголовки = НовыйЗаголовкиВызоваОперации();
	Заголовки.Вставить("Authorization",    ЗаголовокАутентификации);
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "GET");
	ПараметрыОтправки.Вставить("Заголовки"            ,     Заголовки);
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 2);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	Возврат ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
КонецФункции

// Чтение файла сверке взаиморасчетов по оборотам.
//
Функция ПрочитатьДанныеДанныеОтчетаПоСверкеОборотов(ДанныеФайла)
	
	// Ответ сервиса:
	//  endDate - дата окончания формирования отчета;
	//  beginDate - дата начало формирования отчета;
	//  merchantId - идентификатор торговой точки;
	//  feeSum - сумма комиссии;
	//  paymentAmountSum - сумма оплат;
	//  refundAmountSum - сумма возвратов;
	//  reportDate - дата отчета;
	// 
	// {
	//   "request": {
	//      "endDate": "2020-06-24T09:14:38.107Z",
	//      "beginDate": "2020-06-25T09:14:38.107Z",
	//      "merchantId": "cb4c52a6-3032-40c2-a113-66c31f26cffb"
	//    }
	//  "result": {
	//      "refundAmountSum": 9103.01,
	//      "feeSum": 364.12,
	//      "paymentAmountSum": 9103.01,
	//    },
	// "reportDate": "2020-06-24T09:14:38.107Z"
	// } 
	
	ТекстЖурналРегистрации = НСтр("ru = 'Загружен файл отчета по сверке оборотов'");
	
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	Попытка
		Поток = ДанныеФайла.ОткрытьПотокДляЧтения();
		ЧтениеZip = Новый ЧтениеZipФайла(Поток);
		Элемент = ЧтениеZip.Элементы.Найти("report.json");
		Если Элемент = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'Архив отчета по оборотам не содержит файл report.json.'");
		КонецЕсли;
		Каталог = ФайловаяСистема.СоздатьВременныйКаталог("json");
		ЧтениеZip.Извлечь(Элемент, Каталог);
		ЧтениеZip.Закрыть();
	Исключение
		ФайловаяСистема.УдалитьВременныйКаталог(Каталог);
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			Истина);
		ВызватьИсключение НСтр("ru = 'Не удалось обработать архив отчета по сверке оборотов. Подробности в журнале регистрации.'");
	КонецПопытки;
	
	Попытка
		ФайлОтчета = Новый Файл(Каталог + "report.json");
		Если ФайлОтчета.ПолучитьТолькоЧтение() Тогда
			ФайлОтчета.УстановитьТолькоЧтение(Ложь);
		КонецЕсли;
	Исключение
		ФайловаяСистема.УдалитьВременныйКаталог(Каталог);
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			Истина);
		ВызватьИсключение НСтр("ru = 'Не удалось обработать файл отчета по сверке оборотов. Подробности в журнале регистрации.'");
	КонецПопытки;
	
	Попытка
		ЧтениеОтвета = Новый ЧтениеJSON;
		ЧтениеОтвета.ОткрытьФайл(Каталог + "report.json");
		Результат = ПрочитатьJSON(ЧтениеОтвета);
		ЧтениеОтвета.Закрыть();
	Исключение
		ФайловаяСистема.УдалитьВременныйКаталог(Каталог);
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			Истина);
		ВызватьИсключение НСтр("ru = 'Не удалось обработать файл отчета по сверке оборотов. Подробности в журнале регистрации.'");
	КонецПопытки;
	
	ФайловаяСистема.УдалитьВременныйКаталог(Каталог);
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызов операции POST /sbp/v1/members/{memberId}/reports/reconciliation-of-settlements/operations/request-report

// Получает данные отчета по сверке взаиморасчетов по операциям из сервиса платежной системы.
//
// Параметры:
//  НачалоПериода - Дата - дата начало выборки данных отчета;
//  КонецПериода - Дата - дата окончания выборки данных отчета;
//  ПараметрыИнтеграции - Структура - параметры выполнения операции
//                        см. ИнтеграцияСПлатежнымиСистемамиСлужебный.ПараметрыИнтеграции.
//
// Возвращаемое значение:
//  Структура - данные сверке взаиморасчетов:
//    *Идентификатор - Строка - идентификатор отчета;
//    *URLФайла - Строка - url файла для загрузки данных;
//    *Статус - Строка - текущее состояние формирования отчета;
//    *ТипОшибки - Строка - вид ошибки формирования отчета;
//    *КодОшибки - Строка - строковый код возникшей ошибки, который
//                 может быть обработан вызывающим методом;
//    *СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ОперацияЗапросОтчетаПоСверкеОпераций(
		НачалоПериода,
		КонецПериода,
		ПараметрыИнтеграции)
	
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Запрос отчета по сверке оборотов.'"),
		Ложь);
	
	РезультатОперации = ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("Идентификатор", "");
	РезультатОперации.Вставить("URLФайла",      "");
	РезультатОперации.Вставить("Статус",        "");
	РезультатОперации.Вставить("ТипОшибки",     "");
	
	URLОперации = ИнтеграцияСПлатежнымиСистемамиСлужебный.URLОперацииСервиса(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"/members/%1/reports/reconciliation-of-settlements/operations/request-report",
			ИдентификаторУчастникаСБП(ПараметрыИнтеграции.ПлатежнаяСистема)),
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ИдентификаторСБП());
	
	РезультатИПП = ДанныеАутентификации(URLОперации);
	
	Если РезультатИПП.Ошибка Тогда
		РезультатОперации.КодОшибки = ИнтеграцияСПлатежнымиСистемамиСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ДанныеДляПодписи = Новый Массив;
	Если ПлатежнаяСистемаИспользуетHMAC(ПараметрыИнтеграции.ПлатежнаяСистема) Тогда
		ДанныеДляПодписи.Добавить(ПараметрыИнтеграции);
	КонецЕсли;
	
	РезультатПлатежнаяСистема = ДанныеАутентификацииВПлатежнойСистеме(
		ПараметрыИнтеграции,
		ДанныеДляПодписи);
	
	Если РезультатПлатежнаяСистема.Ошибка Тогда
		РезультатОперации.КодОшибки = ИнтеграцияСПлатежнымиСистемамиСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатПлатежнаяСистема.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатПлатежнаяСистема.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	РезультатОтправки = ВызовОперацииЗапросОтчетаПоСверкеОпераций(
		ПараметрыИнтеграции,
		НачалоПериода,
		КонецПериода,
		РезультатИПП.ДанныеАутентификации,
		РезультатПлатежнаяСистема.Аутентификация,
		URLОперации);
	
	// Обработка случаев устаревания токена аутентификации для способа
	// Resource Owner Password Credentials Grant.
	Если РезультатОтправки.КодСостояния = 401
		И ПлатежнаяСистемаИспользуетPasswordCredentialsGrant(ПараметрыИнтеграции.ПлатежнаяСистема) Тогда
		
		РезультатПлатежнаяСистема = ДанныеАутентификацииВПлатежнойСистеме(
			ПараметрыИнтеграции,
			ДанныеДляПодписи,
			Истина);
		
		Если РезультатПлатежнаяСистема.Ошибка Тогда
			РезультатОперации.КодОшибки = ИнтеграцияСПлатежнымиСистемамиСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
			РезультатОперации.СообщениеОбОшибке = РезультатПлатежнаяСистема.ИнформацияОбОшибке;
			РезультатОперации.ИнформацияОбОшибке = РезультатПлатежнаяСистема.ИнформацияОбОшибке;
			Возврат РезультатОперации;
		КонецЕсли;
		
		РезультатОтправки = ВызовОперацииЗапросОтчетаПоСверкеОпераций(
			ПараметрыИнтеграции,
			НачалоПериода,
			КонецПериода,
			РезультатИПП.ДанныеАутентификации,
			РезультатПлатежнаяСистема.Аутентификация,
			URLОперации);
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = ИнтеграцияСПлатежнымиСистемамиСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = ИнтеграцияСПлатежнымиСистемамиСлужебный.ПереопределитьСообщениеПользователю(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое);
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось выполнить запрос отчета сверке взаиморасчетов по операциям.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|При запросе отчета сверке взаиморасчетов по операциям сервис вернул ошибку.
				|URL: %2
				|Код ошибки: %3
				|Подробная информация:
				|%4'"),
			РезультатОперации.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			РезультатОтправки.ИнформацияОбОшибке);
		
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ДанныеОтвета = ПрочитатьДанные_operations_request_report(
		РезультатОтправки.Содержимое);
	
	РезультатОперации.Идентификатор = ДанныеОтвета.sbpMemberResponse.reportId;
	РезультатОперации.URLФайла = ДанныеОтвета.sbpMemberResponse.resultURL;
	РезультатОперации.Статус = ДанныеОтвета.sbpMemberResponse.reportState.status;
	
	Если ДанныеОтвета.sbpMemberResponse.reportState.Свойство("errorType") Тогда
		РезультатОперации.ТипОшибки = ДанныеОтвета.sbpMemberResponse.reportState.errorType;
	КонецЕсли;
	
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Запрос отчета по оборотам в платежной системе завершен.'"),
		Ложь);
	
	Возврат РезультатОперации;
	
КонецФункции

// Выполняет вызов операции запроса отчета по операциям.
//
// Параметры:
//  ПараметрыИнтеграции - Структура - параметры выполнения операции
//                        см. ИнтеграцияСПлатежнымиСистемамиСлужебный.ПараметрыИнтеграции;
//  НачалоПериода - Дата - дата начало выборки данных отчета;
//  КонецПериода - Дата - дата окончания выборки данных отчета;
//  ДанныеАутентификации - Структура - данные аутентификации на Портале 1С:ИТС;
//  ЗаголовокПлатежнаяСистема - Строка - данные аутентификации в платежной системе;
//  URLОперации - Строка - url для вызова операции;
//
// Возвращаемое значение:
//  Структура - результат запроса отчета по операциям в платежной системе:
//   *КодСостояния - Число - http код результата операции;
//   *КодОшибки - Строка - идентификатор ошибки вызова операции;
//   *Содержимое - Строка - ответа сервиса;
//
Функция ВызовОперацииЗапросОтчетаПоСверкеОпераций(
		ПараметрыИнтеграции,
		НачалоПериода,
		КонецПериода,
		ДанныеАутентификации,
		ЗаголовокАутентификации,
		URLОперации)
	
	ПараметрыПодключения = ИнтеграцияСПлатежнымиСистемамиСлужебный.ИнициализироватьПараметрыПодключения();
	
	ПараметрыЗапросаJSON = operations_request_report(
		НачалоПериода,
		КонецПериода,
		ПараметрыИнтеграции.ТорговаяТочка,
		ДанныеАутентификации,
		ЗаголовокАутентификации);
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , НовыйЗаголовкиВызоваОперации());
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	Возврат ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
КонецФункции

// Формирует параметры запроса для операции
// /sbp/v1/members/{memberId}/reports/reconciliation-of-settlements/operations/request-report.
//
Функция operations_request_report(
		НачалоПериода,
		КонецПериода,
		ТорговаяТочка,
		ДанныеАутентификации,
		АутентификацияПлатежнаяСистема)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	// Данные аутентификации.
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьДанныеАутентификации(
		ЗаписьДанныхСообщения,
		ДанныеАутентификации);
	
	// Данные платежная система.
	ЗаписатьДанныеАутентификацииПлатежнойСистемы(
		ЗаписьДанныхСообщения,
		АутентификацияПлатежнаяСистема,
		ТорговаяТочка);
	
	// Параметры клиента.
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьПараметрыКлиента(
		ЗаписьДанныхСообщения);
	
	// Параметры отчета.
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("sbpMemberRequest");
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("endDate");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(
		ЗаписатьДатуJSON(
			КонецПериода,
			ФорматДатыJSON.ISO,
			ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением));
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("beginDate");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(
		ЗаписатьДатуJSON(
			НачалоПериода,
			ФорматДатыJSON.ISO,
			ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением));
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("merchantId");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ТорговаяТочка);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции:
// /sbp/v1/members/{memberId}/reports/reconciliation-of-settlements/operations/request-report.
//
Функция ПрочитатьДанные_operations_request_report(ТелоJSON)
	
	// Ответ сервиса:
	//  reportId - идентификатор отчета;
	//  status - статус формирования отчета;
	//  statusDate - дата отчета;
	//  resultURL - url размещения отчета для загрузки;
	// 
	// {
	//  "reportId": "string",
	//  "reportState": {
	//    "errorType": "INTERNAL_ERROR",
	//    "status": "PENDING",
	//    "statusDate": "2020-09-11T07:02:18.409Z"
	//  },
	//  "resultURL": "string"
	// }
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получен ответ сервиса интеграции с платежными системами:
			|%1'"),
		ТелоJSON);
	
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	Результат = ПрочитатьJSON(ЧтениеОтвета);
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызов операции POST /sbp/v1/members/{memberId}/reports/reconciliation-of-settlements/operations/{reportId}/get-report

// Получает статус отчета по сверке операций из сервиса платежной системы.
//
// Параметры:
//  Идентификатор - Строка - идентификатор отчета;
//  ПараметрыИнтеграции - Структура - параметры выполнения операции
//                        см. ИнтеграцияСПлатежнымиСистемамиСлужебный.ПараметрыИнтеграции;
//  ДатаЗапросаСтатуса - Дата - для определения периодичности получения статуса
//                       формирования отчета.
//
// Возвращаемое значение:
//  Структура - данные сверке взаиморасчетов:
//    *URLФайла - Строка - url файла для загрузки данных;
//    *Статус - Строка - текущее состояние формирования отчета;
//    *ТипОшибки - Строка - вид ошибки формирования отчета;
//    *КодОшибки - Строка - строковый код возникшей ошибки, который
//                 может быть обработан вызывающим методом;
//    *СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ОперацияЗапросСтатусаОтчетаПоОперациям(
		Идентификатор,
		ПараметрыИнтеграции,
		ДатаЗапросаСтатуса)
	
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Запрос статуса отчета по сверке операций.'"),
		Ложь);
	
	РезультатОперации = ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("Статус",    "");
	РезультатОперации.Вставить("URLФайла",  "");
	РезультатОперации.Вставить("ТипОшибки", "");
	
	URLОперации = ИнтеграцияСПлатежнымиСистемамиСлужебный.URLОперацииСервиса(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"/members/%1/status-manager/reports/reconciliation-of-settlements/operations/%2/states/test-check-needed",
			ИдентификаторУчастникаСБП(ПараметрыИнтеграции.ПлатежнаяСистема),
			Идентификатор),
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ИдентификаторСБП());
	
	РезультатПроверки = ОперацияПроверкаНаличияСтатусаОперации(
		URLОперации,
		ДатаЗапросаСтатуса);
	
	Если Не РезультатПроверки.ЗапроситьСтатус Тогда
		ЗаполнитьЗначенияСвойств(
			РезультатОперации,
			РезультатПроверки,
			"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
		Если Не ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
			РезультатОперации.Статус = ИдентификаторСтатусаОжидание();
		КонецЕсли;
		Возврат РезультатОперации;
	КонецЕсли;
	
	URLОперации = ИнтеграцияСПлатежнымиСистемамиСлужебный.URLОперацииСервиса(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"/members/%1/reports/reconciliation-of-settlements/operations/%2/get-report",
			ИдентификаторУчастникаСБП(ПараметрыИнтеграции.ПлатежнаяСистема),
			Идентификатор),
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ИдентификаторСБП());
	
	РезультатИПП = ДанныеАутентификации(URLОперации);
	
	Если РезультатИПП.Ошибка Тогда
		РезультатОперации.КодОшибки = ИнтеграцияСПлатежнымиСистемамиСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ДанныеДляПодписи = Новый Массив;
	Если ПлатежнаяСистемаИспользуетHMAC(ПараметрыИнтеграции.ПлатежнаяСистема) Тогда
		ДанныеДляПодписи.Добавить(Идентификатор);
	КонецЕсли;
	
	РезультатПлатежнаяСистема = ДанныеАутентификацииВПлатежнойСистеме(
		ПараметрыИнтеграции,
		ДанныеДляПодписи);
	
	Если РезультатПлатежнаяСистема.Ошибка Тогда
		РезультатОперации.КодОшибки = ИнтеграцияСПлатежнымиСистемамиСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатПлатежнаяСистема.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатПлатежнаяСистема.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	РезультатОтправки = ВызовОперацииЗапросСтатусаОтчетаПоСверкеОпераций(
		ПараметрыИнтеграции,
		РезультатИПП.ДанныеАутентификации,
		РезультатПлатежнаяСистема.Аутентификация,
		URLОперации);
	
	// Обработка случаев устаревания токена аутентификации для способа
	// Resource Owner Password Credentials Grant.
	Если РезультатОтправки.КодСостояния = 401
		И ПлатежнаяСистемаИспользуетPasswordCredentialsGrant(ПараметрыИнтеграции.ПлатежнаяСистема) Тогда
		
		РезультатПлатежнаяСистема = ДанныеАутентификацииВПлатежнойСистеме(
			ПараметрыИнтеграции,
			ДанныеДляПодписи,
			Истина);
		
		Если РезультатПлатежнаяСистема.Ошибка Тогда
			РезультатОперации.КодОшибки = ИнтеграцияСПлатежнымиСистемамиСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
			РезультатОперации.СообщениеОбОшибке = РезультатПлатежнаяСистема.ИнформацияОбОшибке;
			РезультатОперации.ИнформацияОбОшибке = РезультатПлатежнаяСистема.ИнформацияОбОшибке;
			Возврат РезультатОперации;
		КонецЕсли;
		
		РезультатОтправки = ВызовОперацииЗапросСтатусаОтчетаПоСверкеОпераций(
			ПараметрыИнтеграции,
			РезультатИПП.ДанныеАутентификации,
			РезультатПлатежнаяСистема.Аутентификация,
			URLОперации);
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = ИнтеграцияСПлатежнымиСистемамиСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = ИнтеграцияСПлатежнымиСистемамиСлужебный.ПереопределитьСообщениеПользователю(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое);
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить статус отчета по сверке операций.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|При запросе отчета по сверке операций сервис вернул ошибку.
				|URL: %2
				|Код ошибки: %3
				|Подробная информация:
				|%4'"),
			РезультатОперации.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			РезультатОтправки.ИнформацияОбОшибке);
		
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ДанныеОтвета = ПрочитатьДанные_operations_get_report(
		РезультатОтправки.Содержимое);
	
	РезультатОперации.URLФайла = ДанныеОтвета.sbpMemberResponse.resultURL;
	РезультатОперации.Статус = ДанныеОтвета.sbpMemberResponse.reportState.status;
	
	Если ДанныеОтвета.sbpMemberResponse.reportState.Свойство("errorType") Тогда
		РезультатОперации.ТипОшибки = ДанныеОтвета.sbpMemberResponse.reportState.errorType;
	КонецЕсли;
	
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Запрос статуса отчета по операциям в платежной системе завершен.'"),
		Ложь);
	
	Возврат РезультатОперации;
	
КонецФункции

// Выполняет вызов операции получения статуса отчета по операциям.
//
// Параметры:
//  ПараметрыИнтеграции - Структура - параметры выполнения операции
//                        см. ИнтеграцияСПлатежнымиСистемамиСлужебный.ПараметрыИнтеграции;
//  ДанныеАутентификации - Структура - данные аутентификации на Портале 1С:ИТС;
//  ЗаголовокПлатежнаяСистема - Строка - данные аутентификации в платежной системе;
//  URLОперации - Строка - url для вызова операции;
//
// Возвращаемое значение:
//  Структура - результат статуса отчета по операциям в платежной системе:
//   *КодСостояния - Число - http код результата операции;
//   *КодОшибки - Строка - идентификатор ошибки вызова операции;
//   *Содержимое - Строка - ответа сервиса;
//
Функция ВызовОперацииЗапросСтатусаОтчетаПоСверкеОпераций(
		ПараметрыИнтеграции,
		ДанныеАутентификации,
		ЗаголовокАутентификации,
		URLОперации)
	
	ПараметрыПодключения = ИнтеграцияСПлатежнымиСистемамиСлужебный.ИнициализироватьПараметрыПодключения();
	
	ПараметрыЗапросаJSON = operations_get_report(
		ДанныеАутентификации,
		ЗаголовокАутентификации,
		ПараметрыИнтеграции.ТорговаяТочка);
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , НовыйЗаголовкиВызоваОперации());
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	Возврат ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
КонецФункции

// Формирует параметры запроса для операции
// /sbp/v1/members/{memberId}/reports/reconciliation-of-settlements/operations/{reportId}/get-report
//
Функция operations_get_report(
		ДанныеАутентификации,
		АутентификацияПлатежнаяСистема,
		ТорговаяТочка)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	// Данные аутентификации.
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьДанныеАутентификации(
		ЗаписьДанныхСообщения,
		ДанныеАутентификации);
	
	// Данные платежная система.
	ЗаписатьДанныеАутентификацииПлатежнойСистемы(
		ЗаписьДанныхСообщения,
		АутентификацияПлатежнаяСистема,
		ТорговаяТочка);
	
	// Параметры клиента.
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьПараметрыКлиента(
		ЗаписьДанныхСообщения);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции:
// /sbp/v1/members/{memberId}/reports/reconciliation-of-settlements/operations/{reportId}/get-report.
//
Функция ПрочитатьДанные_operations_get_report(ТелоJSON)
	
	// Ответ сервиса:
	//  reportId - идентификатор отчета;
	//  status - статус формирования отчета;
	//  refundAmountSum - сумма возвратов.
	// 
	// {
	//  "reportId": "string",
	//  "reportState": {
	//    "errorType": "INTERNAL_ERROR",
	//    "status": "PENDING",
	//    "statusDate": "2020-09-11T07:02:18.409Z"
	//  },
	//  "resultURL": "string"
	// }
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получен ответ сервиса интеграции с платежными системами:
			|%1'"),
		ТелоJSON);
	
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	Результат = ПрочитатьJSON(ЧтениеОтвета);
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызов операции загрузки файла отчетов сверки операций.

// Выполняет загрузку файла отчета по переданному url.
//
// Параметры:
//  URLОперации - Строка - url файла отчета;
//  Идентификатор - Строка - идентификатор отчета;
//  ПараметрыИнтеграции - Структура - параметры выполнения операции
//                        см. ИнтеграцияСПлатежнымиСистемамиСлужебный.ПараметрыИнтеграции;
//
// Возвращаемое значение:
//  Структура - данные сверке взаиморасчетов:
//    *ДанныеОпераций - ТаблицаЗначений - см. НовыйДанныеОтчетаПоСверкеОпераций;
//    *КодОшибки - Строка - строковый код возникшей ошибки, который
//                 может быть обработан вызывающим методом;
//    *СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ОперацияЗагрузитьФайлОтчетаПоСверкеОпераций(
			URLОперации,
			Идентификатор,
			ПараметрыИнтеграции)
	
	РезультатОперации = ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("ДанныеОпераций", ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйДанныеОтчетаПоСверкеОпераций());
	
	ВременныйКаталог = ФайловаяСистема.СоздатьВременныйКаталог("zip");
	АдресФайла = ВременныйКаталог + "report.zip";
	
	ДанныеДляПодписи = Новый Массив;
	Если ПлатежнаяСистемаИспользуетHMAC(ПараметрыИнтеграции.ПлатежнаяСистема) Тогда
		ДанныеДляПодписи.Добавить(Идентификатор);
	КонецЕсли;
	
	РезультатПлатежнаяСистема = ДанныеАутентификацииВПлатежнойСистеме(
		ПараметрыИнтеграции,
		ДанныеДляПодписи);
	
	РезультатОтправки = ВызовЗагрузитьФайлОтчетаПоСверкеОпераций(
		ПараметрыИнтеграции,
		РезультатПлатежнаяСистема.Аутентификация,
		URLОперации,
		АдресФайла);
	
	// Обработка случаев устаревания токена аутентификации для способа
	// Resource Owner Password Credentials Grant.
	Если РезультатОтправки.КодСостояния = 401
		И ПлатежнаяСистемаИспользуетPasswordCredentialsGrant(ПараметрыИнтеграции.ПлатежнаяСистема) Тогда
		
		// Могла загрузиться только часть файла перед повторной
		// попыткой необходимо заново сгенерировать файл для
		// загрузки отчета.
		ФайловаяСистема.УдалитьВременныйКаталог(ВременныйКаталог);
		ВременныйКаталог = ФайловаяСистема.СоздатьВременныйКаталог("zip");
		АдресФайла = ВременныйКаталог + "report.zip";
		
		РезультатПлатежнаяСистема = ДанныеАутентификацииВПлатежнойСистеме(
			ПараметрыИнтеграции,
			ДанныеДляПодписи);
		
		Если РезультатПлатежнаяСистема.Ошибка Тогда
			РезультатОперации.КодОшибки = ИнтеграцияСПлатежнымиСистемамиСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
			РезультатОперации.СообщениеОбОшибке = РезультатПлатежнаяСистема.ИнформацияОбОшибке;
			РезультатОперации.ИнформацияОбОшибке = РезультатПлатежнаяСистема.ИнформацияОбОшибке;
			Возврат РезультатОперации;
		КонецЕсли;
		
		РезультатОтправки = ВызовЗагрузитьФайлОтчетаПоСверкеОпераций(
			ПараметрыИнтеграции,
			РезультатПлатежнаяСистема.Аутентификация,
			URLОперации,
			АдресФайла);
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = ИнтеграцияСПлатежнымиСистемамиСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = ИнтеграцияСПлатежнымиСистемамиСлужебный.ПереопределитьСообщениеПользователю(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое);
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось выполнить загрузку отчета по сверке взаиморасчетов операций.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|При загрузке файла отчета по сверке взаиморасчетов операций сервис вернул ошибку.
				|URL: %2
				|Код ошибки: %3
				|Подробная информация:
				|%4'"),
			РезультатОперации.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			РезультатОтправки.ИнформацияОбОшибке);
		
		ФайловаяСистема.УдалитьВременныйКаталог(ВременныйКаталог);
		
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ОперацииСервис = ПрочитатьДанныеДанныеОтчетаПоСверкеОпераций(АдресФайла);
	Для Каждого СтрокаСервис Из ОперацииСервис.operations Цикл
		СтрокаДанные = РезультатОперации.ДанныеОпераций.Добавить();
		СтрокаДанные.ТипОперации = ?(СтрокаСервис.type = "PAYMENT",
			ИнтеграцияСПлатежнымиСистемами.ИдентификаторТипаОперацииОплата(),
			ИнтеграцияСПлатежнымиСистемами.ИдентификаторТипаОперацииВозврат());
		СтрокаДанные.ДатаОперации = СтрокаСервис.operationDate;
		СтрокаДанные.Сумма = СтрокаСервис.amount;
		СтрокаДанные.СуммаКомиссии = СтрокаСервис.fee;
		СтрокаДанные.Идентификатор = СтрокаСервис.qrId;
		СтрокаДанные.ИдентификаторОплаты = СтрокаСервис.id;
	КонецЦикла;
	
	ФайловаяСистема.УдалитьВременныйКаталог(ВременныйКаталог);
	
	Возврат РезультатОперации;
	
КонецФункции

// Выполняет загрузку файла отчета по переданному url.
//
// Параметры:
//  ПараметрыИнтеграции - Структура - параметры выполнения операции
//                        см. ИнтеграцияСПлатежнымиСистемамиСлужебный.ПараметрыИнтеграции;
//  ДанныеАутентификации - Структура - данные аутентификации на Портале 1С:ИТС;
//  ЗаголовокПлатежнаяСистема - Строка - данные аутентификации в платежной системе;
//  URLОперации - Строка - url для вызова операции;
//  АдресФайла - Строка - адрес файла результата.
//
// Возвращаемое значение:
//  Структура - результат статуса отчета по оборотам в платежной системе:
//   *КодСостояния - Число - http код результата операции;
//   *КодОшибки - Строка - идентификатор ошибки вызова операции;
//   *Содержимое - Строка - ответа сервиса;
//
Функция ВызовЗагрузитьФайлОтчетаПоСверкеОпераций(
		ПараметрыИнтеграции,
		ЗаголовокАутентификации,
		URLОперации,
		АдресФайла)
	
	ПараметрыПодключения = ИнтеграцияСПлатежнымиСистемамиСлужебный.ИнициализироватьПараметрыПодключения();
	
	Заголовки = НовыйЗаголовкиВызоваОперации();
	Заголовки.Вставить("Authorization",    ЗаголовокАутентификации);
	
	// 1. Вызов операции получения размера отчета
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "HEAD");
	ПараметрыОтправки.Вставить("Заголовки"            ,     Заголовки);
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("ИмяФайлаОтвета",           АдресФайла);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 15);
	
	РезультатОперации = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОперации.КодОшибки) Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	ЕдиницаИзмерения = РезультатОперации.Заголовки.Получить("Accept-Ranges");
	РазмерФайла      = Число(РезультатОперации.Заголовки.Получить("Content-Length"));
	
	// 2. Проверка заголовка Accept-Ranges. Клиент поддерживает обработку
	// только единицы измерения bytes. В случае передачи другого значения
	// будет вызвано исключение.
	// https://tools.ietf.org/html/rfc7233#section-2.3
	Если НРег(ЕдиницаИзмерения) = "none" Или НРег(ЕдиницаИзмерения) <> "bytes" Тогда
		ВызватьИсключение НСтр("ru = 'Неверная единица измерения (Accept-Ranges) порции файла.'");
	КонецЕсли;
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "GET");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 2);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// 3. Загрузка данных файла порциями по 4 МБ.
	// https://tools.ietf.org/html/rfc7233#section-3.1
	НачальнаяПозиция = 0;
	ТекущаяПозиция   = 0;
	РазмерПорции     = 4096; // 4 МБ
	
	ЗаписьДанных = Новый ЗаписьДанных(АдресФайла);
	
	Пока Истина Цикл
		
		Если НачальнаяПозиция >= РазмерФайла Тогда
			Прервать;
		ИначеЕсли (НачальнаяПозиция + РазмерПорции) > РазмерФайла Тогда
			ТекущаяПозиция = РазмерФайла;
		Иначе
			ТекущаяПозиция = ТекущаяПозиция + РазмерПорции;
		КонецЕсли;
		
		Порция = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"bytes=%1-%2",
			ПреобразоватьЧислоВФорматJSON(НачальнаяПозиция),
			ПреобразоватьЧислоВФорматJSON(ТекущаяПозиция));
		
		Заголовки = НовыйЗаголовкиВызоваОперации();
		Заголовки.Вставить("Authorization",    ЗаголовокАутентификации);
		Заголовки.Вставить("Range",            Порция);
		
		ПараметрыОтправки.Вставить("Заголовки" , Заголовки);
		
		РезультатОперации = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
			URLОперации,
			,
			,
			ПараметрыОтправки);
		
		Если ПустаяСтрока(РезультатОперации.КодОшибки) Тогда
			ЗаписьДанных.Записать(РезультатОперации.Содержимое);
		Иначе
			Прервать;
		КонецЕсли;
		
		НачальнаяПозиция = ТекущаяПозиция + 1;
		
	КонецЦикла;
	
	ЗаписьДанных.Закрыть();
	
	Возврат РезультатОперации;
	
КонецФункции

// Чтение файла сверке взаиморасчетов по оборотам.
//
Функция ПрочитатьДанныеДанныеОтчетаПоСверкеОпераций(АдресФайла)
	
	// Ответ сервиса:
	//  endDate - дата окончания формирования отчета;
	//  beginDate - дата начало формирования отчета;
	//  merchantId - идентификатор торговой точки;
	//  reportDate - дата отчета;
	//  type - тип операции;
	//  qrId - сумма оплат;
	//  id - идентификатор операции в платежной систем;
	//  amount - сумма операции;
	//  fee - сумма комиссии операции;
	//  currency - валюта операции;
	//  operationDate - дата операции в платежной системе;
	// 
	// {
	//  "request": {
	//      "endDate": "2020-06-24T09:14:38.107Z",
	//      "beginDate": "2020-06-25T09:14:38.107Z",
	//      "merchantId": "cb4c52a6-3032-40c2-a113-66c31f26cffb"
	//    }
	//  "operations": [
	//    {
	//      "type": "PAYMENT",
	//      "qrId": "AS10002LMSG5QQGE8K2B6588FFVJP1DP",
	//      "id": "dc6f3bb2-ef3e-4bfa-8653-e20a6e77a7e7",
	//      "amount": 9103.01,
	//      "fee": 364.12,
	//      "currency": "RUB",
	//      "operationDate": "2020-06-24T09:14:38.107Z"
	//    },
	//    {
	//      "type": "PAYMENT",
	//      "qrId": "AS10002LMSG5QQGE8K2B6588FFVJP1DP",
	//      "id": "dc6f3bb2-ef3e-4bfa-8653-e20a6e77a7e7",
	//      "amount": 9103.01,
	//      "fee": 364.12,
	//      "currency": "RUB",
	//      "operationDate": "2020-06-24T09:14:38.107Z"
	//    }
	//  ],
	// "reportDate": "2020-06-24T09:14:38.107Z"
	// } 
	
	ТекстЖурналРегистрации = НСтр("ru = 'Загружен файл отчета по сверке операций.'");
	
	ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	Каталог = ФайловаяСистема.СоздатьВременныйКаталог("json");
	
	Попытка
		ЧтениеZip = Новый ЧтениеZipФайла(АдресФайла);
		Элемент = ЧтениеZip.Элементы.Найти("report.json");
		Если Элемент = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'Архив отчета по оборотам не содержит файл report.json.'");
		КонецЕсли;
		ЧтениеZip.Извлечь(Элемент, Каталог);
		ЧтениеZip.Закрыть();
	Исключение
		ФайловаяСистема.УдалитьВременныйКаталог(Каталог);
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			Истина);
		ВызватьИсключение НСтр("ru = 'Не удалось обработать архив отчета по сверке операций. Подробности в журнале регистрации.'");
	КонецПопытки;
	
	Попытка
		ФайлОтчета = Новый Файл(Каталог + "report.json");
		Если ФайлОтчета.ПолучитьТолькоЧтение() Тогда
			ФайлОтчета.УстановитьТолькоЧтение(Ложь);
		КонецЕсли;
	Исключение
		ФайловаяСистема.УдалитьВременныйКаталог(Каталог);
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			Истина);
		ВызватьИсключение НСтр("ru = 'Не удалось обработать файл отчета по сверке операций. Подробности в журнале регистрации.'");
	КонецПопытки;
	
	Попытка
		
		ИменаСвойствСоЗначениямиДата = Новый Массив;
		ИменаСвойствСоЗначениямиДата.Добавить("operationDate");
		
		ЧтениеОтвета = Новый ЧтениеJSON;
		ЧтениеОтвета.ОткрытьФайл(Каталог + "report.json");
		
		Результат = ПрочитатьJSON(
			ЧтениеОтвета,
			,
			ИменаСвойствСоЗначениямиДата,
			,
			"ВосстановитьДатуJSON",
			СервисИнтеграцииССБП,
			,
			ИменаСвойствСоЗначениямиДата);
		
		ЧтениеОтвета.Закрыть();
		
	Исключение
		ФайловаяСистема.УдалитьВременныйКаталог(Каталог);
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			Истина);
		ВызватьИсключение НСтр("ru = 'Не удалось обработать файл отчета по сверке операций. Подробности в журнале регистрации.'");
	КонецПопытки;
	
	ФайловаяСистема.УдалитьВременныйКаталог(Каталог);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область HMAC

// Формирование подписи для аутентификации (HMAC).
// См. RFC 2104 https://www.ietf.org/rfc/rfc2104.txt.
//
// Параметры:
//  СекретныйКлюч - ДвоичныеДанные - секретный ключ шифрования.
//  Данные - ДвоичныеДанные  - данные шифрования.
//  ХешФункция - ХешФункция  - хеш функция, например ХешФункция.SHA256.
// 
// Возвращаемое значение:
//  Строка - сформированный hmac.
//
Функция РассчитатьHmac(Знач СекретныйКлюч, Знач Данные, Знач ХешФункция)
	
	РазмерБлока = 64;
	
	Если СекретныйКлюч.Размер() > РазмерБлока Тогда
		СекретныйКлюч = Хешировать(СекретныйКлюч, ХешФункция);
	КонецЕсли;
	
	ПустыеДвоичныеДанные = ПолучитьДвоичныеДанныеИзСтроки("");
	СекретныйКлюч = ОбрезатьДвоичныеДанныеСлева(СекретныйКлюч, РазмерБлока);
	
	КлючВБлоке1 = ЗабитьДвоичныеДанныеСправа(СекретныйКлюч, РазмерБлока, "00");
	
	Блок0x36 = ЗабитьДвоичныеДанныеСправа(ПустыеДвоичныеДанные, РазмерБлока, "36");
	КлючВБлоке2 = ОбъединитьДвоичныеДанныеXOR(КлючВБлоке1, Блок0x36);
	
	Блок0x5C = ЗабитьДвоичныеДанныеСправа(ПустыеДвоичныеДанные, РазмерБлока, "5C");
	КлючВБлоке3 = ОбъединитьДвоичныеДанныеXOR(КлючВБлоке1, Блок0x5C);
	
	КлючИДанные = СоединитьДвоичныеДанныеПоЗначениям(КлючВБлоке2, Данные);
	ДанныеХеш = СоединитьДвоичныеДанныеПоЗначениям(КлючВБлоке3, Хешировать(КлючИДанные, ХешФункция));
	Результат = Хешировать(ДанныеХеш, ХешФункция);
	
	Возврат ПолучитьHexСтрокуИзДвоичныхДанных(Результат);
	
КонецФункции

// Применяет хеш функцию к переданным данным.
//
// Параметры:
//  Значение - ДвоичныеДанные  - данные хеширования;
//  ХешФункция - ХешФункция  - хеш функция, например ХешФункция.SHA256.
//
// Возвращаемое значение:
//  ДвоичныеДанные  - хеш сумма;
//
Функция Хешировать(Знач Значение, Знач ХешФункция)
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция);
	ХешированиеДанных.Добавить(Значение);
	Возврат ХешированиеДанных.ХешСумма;
	
КонецФункции

// Объединяет несколько объектов типа ДвоичныеДанные в один.
//
// Параметры:
//  ДвоичныеДанные1 - ДвоичныеДанные - первое значение;
//  ДвоичныеДанные2 - ДвоичныеДанные - второе значение.
//
// Возвращаемое значение:
//  ДвоичныеДанные - результат соединения.
//
Функция СоединитьДвоичныеДанныеПоЗначениям(Знач ДвоичныеДанные1, Знач ДвоичныеДанные2)
	
	Массив = Новый Массив;
	Массив.Добавить(ДвоичныеДанные1);
	Массив.Добавить(ДвоичныеДанные2);
	
	Возврат СоединитьДвоичныеДанные(Массив);
	
КонецФункции

// Дополняет двоичные данные переданным блоком.
//
// Параметры:
//  ДвоичныеДанные - ДвоичныеДанные - значение для обработки;
//  Длина - Число - длина дополнения;
//  Строка16 - Строка - строка дополнения;
//
// Возвращаемое значение:
//  ДвоичныеДанные - результат обработки.
//
Функция ЗабитьДвоичныеДанныеСправа(Знач ДвоичныеДанные, Знач Длина, Знач Строка16)
	
	Значение = ПолучитьДвоичныеДанныеИзHexСтроки(Строка16);
	РазмерБлока = Длина - ДвоичныеДанные.Размер();
	
	Блок = Значение;
	МассивБлока = Новый Массив;
	МассивБлока.Добавить(Значение);
	Пока Блок.Размер() < РазмерБлока Цикл
		МассивБлока.Добавить(Блок);
		Блок = СоединитьДвоичныеДанные(МассивБлока);
	КонецЦикла;
	
	МассивДанных = Новый Массив;
	МассивДанных.Добавить(ДвоичныеДанные);
	МассивБлоков = РазделитьДвоичныеДанные(Блок, РазмерБлока);
	Если МассивБлоков.Количество() > 0 Тогда
		МассивДанных.Добавить(МассивБлоков[0]);
	КонецЕсли;
	Результат = СоединитьДвоичныеДанные(МассивДанных);
	
	Возврат Результат;
	
КонецФункции

// Производит операцию исключающего ИЛИ для двоичных данных.
//
// Параметры:
//  ДвоичныеДанные1 - ДвоичныеДанные - первое значение;
//  ДвоичныеДанные2 - ДвоичныеДанные - второе значение.
//
// Возвращаемое значение:
//  ДвоичныеДанные - результат операции.
//
Функция ОбъединитьДвоичныеДанныеXOR(Знач ДвоичныеДанные1, Знач ДвоичныеДанные2)
	
	ПотокВПамяти = Новый ПотокВПамяти();
	ЗаписьДанных = Новый ЗаписьДанных(ПотокВПамяти);
	
	ЧтениеДанных1 = Новый ЧтениеДанных(ДвоичныеДанные1);
	ЧтениеДанных2 = Новый ЧтениеДанных(ДвоичныеДанные2);
	
	Буфер1 = ЧтениеДанных1.ПрочитатьВБуферДвоичныхДанных();
	Буфер2 = ЧтениеДанных2.ПрочитатьВБуферДвоичныхДанных();
	
	Если Буфер1.Размер > Буфер2.Размер Тогда
		Буфер1.ЗаписатьПобитовоеИсключительноеИли(0, Буфер2, Буфер2.Размер);
		ЗаписьДанных.ЗаписатьБуферДвоичныхДанных(Буфер1);
	Иначе 
		Буфер2.ЗаписатьПобитовоеИсключительноеИли(0, Буфер1, Буфер1.Размер);
		ЗаписьДанных.ЗаписатьБуферДвоичныхДанных(Буфер2);
	КонецЕсли;
	
	Результат = ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные();
	
	Возврат Результат;
	
КонецФункции

// Выполняет удаление заданного количества байт из двоичных данных.
//
// Параметры:
//  ДвоичныеДанные - ДвоичныеДанные - значение для обработки;
//  КоличествоБайт - Число - количество байт для удаления.
//
// Возвращаемое значение:
//  ДвоичныеДанные - результат операции.
//
Функция ОбрезатьДвоичныеДанныеСлева(Знач ДвоичныеДанные, Знач КоличествоБайт)
	
	ЧтениеДанных = Новый ЧтениеДанных(ДвоичныеДанные);
	
	ПотокВПамяти = Новый ПотокВПамяти();
	ЗаписьДанных = Новый ЗаписьДанных(ПотокВПамяти);
	
	Буфер = ЧтениеДанных.ПрочитатьВБуферДвоичныхДанных(КоличествоБайт);
	ЗаписьДанных.ЗаписатьБуферДвоичныхДанных(Буфер);
	
	Возврат ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные();
	
КонецФункции

#КонецОбласти

#Область ResourceOwnerPasswordCredentialsGrant

// Определяет по коду ошибки сообщение пользователю.
//
// Параметры:
//  КодОшибки - Строка - ошибка сервиса см. функцию
//              ИнтеграцияСПлатежнымиСистемамиСлужебный.ПереопределитьКодОшибкиСервиса.
//  ТелоJSON  - Строка - содержимое ответа сервиса.
//
// Возвращаемое значение:
//  Строка - сообщение пользователю.
//
Функция ПереопределитьСообщениеПользователюPasswordCredentialsGrant(
		КодОшибки,
		ТелоJSON = "")
	
	КодОшибкиСервиса = "";
	
	// Определение ошибки выполняется через попытку, т.к. в случае ошибки сервиса
	// есть вероятность получить не формализованное сообщение.
	Попытка
		ЧтениеОтвета = Новый ЧтениеJSON;
		ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
		Результат = ПрочитатьJSON(ЧтениеОтвета);
		КодОшибкиСервиса = ВРег(Результат.error);
	Исключение
		КодОшибкиСервиса = "";
	КонецПопытки;
	
	Если КодОшибкиСервиса = "BAD_REQUEST_1C" Тогда
		Возврат НСтр("ru = 'Неверный набор параметров или формат запроса к сервису Портала 1С:ИТС.'");
	ИначеЕсли КодОшибкиСервиса = "USER_AUTHENTICATION_EXCEPTION_1C" Тогда
		Возврат НСтр("ru = 'Ошибка аутентификации на Портале 1С:ИТС.'");
	ИначеЕсли КодОшибкиСервиса = "INVALID_REQUEST"
		Или КодОшибкиСервиса = "INVALID_CLIENT"
		Или КодОшибкиСервиса = "INVALID_GRANT"
		Или КодОшибкиСервиса = "UNAUTHORIZED_CLIENT"
		Или КодОшибкиСервиса = "UNSUPPORTED_GRANT_TYPE" Тогда
		Возврат НСтр("ru = 'Ошибка аутентификации в сервисе банка.'");
	КонецЕсли;
	
	Возврат НСтр("ru = 'Неизвестная ошибка при подключении к сервису.'");
	
КонецФункции

#КонецОбласти

#Область ИдентификаторыСтатусовСервиса

// Формирует идентификатор статуса в процессе.
//
// Возвращаемое значение:
//  Строка - идентификатор статуса.
//
Функция ИдентификаторСтатусаВПроцессе() Экспорт
	
	Возврат "IN_PROGRESS";
	
КонецФункции

// Формирует идентификатор статуса выполненной операции.
//
// Возвращаемое значение:
//  Строка - идентификатор статуса.
//
Функция ИдентификаторСтатусаВыполнена()
	
	Возврат "SUCCESS";
	
КонецФункции

// Формирует идентификатор статуса отклоненной операции.
//
// Возвращаемое значение:
//  Строка - идентификатор статуса.
//
Функция ИдентификаторСтатусаОтклонена()
	
	Возврат "DECLINED";
	
КонецФункции

// Формирует идентификатор статуса отмененной операции.
//
// Возвращаемое значение:
//  Строка - идентификатор статуса.
//
Функция ИдентификаторСтатусаОтменена()
	
	Возврат "REJECTED";
	
КонецФункции

// Формирует идентификатор статуса превышения суммы.
//
// Возвращаемое значение:
//  Строка - идентификатор статуса.
//
Функция ИдентификаторСтатусаПревышение()
	
	Возврат "EXCEEDED";
	
КонецФункции

// Формирует идентификатор статуса нет информации.
//
// Возвращаемое значение:
//  Строка - идентификатор статуса.
//
Функция ИдентификаторСтатусаНетИнформации()
	
	Возврат "NO_INFO";
	
КонецФункции

// Формирует идентификатор статуса не оплачен.
//
// Возвращаемое значение:
//  Строка - идентификатор статуса.
//
Функция ИдентификаторСтатусаНеОплачен()
	
	Возврат "NOT_PAID";
	
КонецФункции

// Формирует идентификатор статуса требуется подтверждение.
//
// Возвращаемое значение:
//  Строка - идентификатор статуса.
//
Функция ИдентификаторСтатусаТребуетсяПодтверждение()
	
	Возврат "CONFIRMATION_REQUIRED";
	
КонецФункции

// Формирует идентификатор статуса ошибка.
//
// Возвращаемое значение:
//  Строка - идентификатор статуса.
//
Функция ИдентификаторСтатусаОшибка()
	
	Возврат "ERROR";
	
КонецФункции

// Формирует идентификатор статуса ожидание.
//
// Возвращаемое значение:
//  Строка - идентификатор статуса.
//
Функция ИдентификаторСтатусаОжидание()
	
	Возврат "PENDING";
	
КонецФункции

// Формирует идентификатор статуса превышен период.
//
// Возвращаемое значение:
//  Строка - идентификатор статуса.
//
Функция ИдентификаторСтатусаПревышенПериод()
	
	Возврат "REPORT_PERIOD_EXCEED";
	
КонецФункции

#КонецОбласти

#Область ПрочиеСлужебныеПроцедурыФункции

// Формирует URL страницы подключения к Системе быстрых платежей.
//
// Параметры:
//  Идентификатор - Строка - идентификатор участника.
//
// Возвращаемое значение:
//  Строка - адрес страницы подключения к СБП.
//
Функция АдресСтраницыПодключенияКСБП(Идентификатор)
	
	Возврат "https://its.1c.ru/sbp?memberId=" + Идентификатор;
	
КонецФункции

// Формирует стандартные заголовки для вызова операции.
//
// Возвращаемое значение:
//  Соответствие - заголовки операции.
//
Функция НовыйЗаголовкиВызоваОперации()
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("X-Correlation-ID", Строка(Новый УникальныйИдентификатор));
	
	Возврат Заголовки;
	
КонецФункции

// Восстанавливает значение даты из JSON, если значение не равно Неопределено.
//
// Параметры:
//  Свойство - Строка - имя свойства;
//  Значение - Строка, Неопределено - значение свойства;
//  ДополнительныеПараметры - Структура, Неопределено - параметры восстановления.
//
// Возвращаемое значение:
//  Дата, Неопределено - результат восстановления.
//
Функция ВосстановитьДатуJSON(Свойство, Значение, ДополнительныеПараметры) Экспорт
	
	Если Значение <> Неопределено Тогда
		
		Результат = ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
		
		// Свойство operationDate необходимо обрабатывать
		// и хранить в формате UTC, для того чтобы при
		// проведении сверки взаиморасчетов из разных
		// часовых поясов получать единые выборки операций.
		Если Свойство = "operationDate" Тогда
			Результат = ИнтеграцияСПлатежнымиСистемамиСлужебный.ДатаВUTC(Результат);
		КонецЕсли;
		
		Возврат Результат;
		
	Иначе
		Возврат Значение;
	КонецЕсли;
	
КонецФункции

// Производит преобразование число в формат JSON.
//
// Параметры
//  Значение - Число - значения для преобразования.
//
// Возвращаемое значение:
//   Строка - преобразованное число.
//
Функция ПреобразоватьЧислоВФорматJSON(Знач Значение)
	
	Возврат СтрЗаменить(
		СтрЗаменить(
			"" + Значение,
			",",
			"."),
		Символы.НПП,
		"");
	
КонецФункции

// Удаляет служебные символы из идентификатора платежной системы.
//
// Параметры
//  Идентификатор - Число - идентификатор платежной системы.
//
// Возвращаемое значение:
//   Строка - обработанный идентификатор.
//
Функция ИдентификаторПлатежнойСистемыБезСлужебныхСимволов(Идентификатор)
	
	Возврат СтрЗаменить("" + Идентификатор, Символы.НПП, "");
	
КонецФункции

// Определяет идентификатор валюты рубль РФ.
//
// Возвращаемое значение:
//  Строка - идентификатор валюты по ISO.
//
Функция ИдентификаторВалютыРоссийскийРубль()
	
	Возврат "RUB";
	
КонецФункции

// Создает случайное число длиной 16-32 разряда
// и переводит его в hex систему счисления.
//
// Возвращаемое значение:
//  Строка - случайное число в hex.
//
Функция ДлинноеСлучайноеЧислоHEX()
	
	ГенераторСлучайныхЧисел = Новый ГенераторСлучайныхЧисел();
	ДлинаЧисла = ГенераторСлучайныхЧисел.СлучайноеЧисло(16, 32);
	
	// Для инициализации первого разряда исключается 0.
	СлучайноеЧисло = "" + ГенераторСлучайныхЧисел.СлучайноеЧисло(1, 9);
	
	// Последовательное формирование случайного числа по разрядам.
	Сч = 1;
	Пока Сч < ДлинаЧисла Цикл
		СлучайноеЧисло = СлучайноеЧисло + ГенераторСлучайныхЧисел.СлучайноеЧисло(0, 9);
		Сч = Сч + 1;
	КонецЦикла;
	
	Возврат ПреобразоватьЧислоВHEX(Число(СлучайноеЧисло));
	
КонецФункции

// Переводит число в систему счисления hex.
//
// Параметры:
//  Значение - Число - исходное значения для преобразования;
//
// Возвращаемое значение:
//  Строка - результат преобразования
//
Функция ПреобразоватьЧислоВHEX(Знач Значение)
	
	Если Значение <= 0 Тогда
		ЧислоHEX = "0";
	Иначе
		Значение = Цел(Значение);
		ЧислоHEX = "";
		Пока Значение > 0 Цикл
			ЧислоHEX = Сред("0123456789ABCDEF", Значение % 16 + 1, 1) + ЧислоHEX;
			Значение = Цел(Значение / 16);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЧислоHEX;
	
КонецФункции

#КонецОбласти

#КонецОбласти
