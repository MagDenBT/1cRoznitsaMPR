// Конвертация РТ2.3.11 от 21.04.2022 17:22:26
#Область ПрограммныйИнтерфейс

// Процедура, выполняемая перед началом конвертации данных.
//
// Параметры:
//   КомпонентыОбмена - Структура - структура компонентов обмена.
//
Процедура ПередКонвертацией(КомпонентыОбмена) Экспорт

	ПараметрыКонвертации = КомпонентыОбмена.ПараметрыКонвертации;
	ВариантНастройки = Неопределено;
	Если КомпонентыОбмена.УзелКорреспондента <> Неопределено Тогда
		ВариантНастройки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КомпонентыОбмена.УзелКорреспондента, "ВариантНастройки");
		
		СписокОрганизаций = Новый СписокЗначений;
		СписокОрганизаций.ЗагрузитьЗначения(КомпонентыОбмена.УзелКорреспондента.Организации.ВыгрузитьКолонку("Организация"));
		ПараметрыКонвертации.Вставить("Организации", СписокОрганизаций);
	КонецЕсли;
	ПараметрыКонвертации.ВариантНастройки = ВариантНастройки;
	ПараметрыКонвертации.Вставить("ТипЦенДляИзмененияЦен", Справочники.ВидыЦен.ПустаяСсылка());
	
	Если НЕ ЗначениеЗаполнено(ПараметрыКонвертации.ДатаОстатков) Тогда
		ПараметрыКонвертации.ДатаОстатков = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если ВариантНастройки <> "ОфлайнКасса" Тогда
		
		Если КомпонентыОбмена.НаправлениеОбмена = "Получение" Тогда
			//Виды  номенклатуры по умолчанию
			ВидыНоменклатурыПоУмолчанию = Новый ТаблицаЗначений;
			ВидыНоменклатурыПоУмолчанию.Колонки.Добавить("ТипНоменклатуры");
			ВидыНоменклатурыПоУмолчанию.Колонки.Добавить("АлкогольнаяПродукция");
			ВидыНоменклатурыПоУмолчанию.Колонки.Добавить("ВидНоменклатуры");
			ПараметрыКонвертации.Вставить("ВидыНоменклатурыПоУмолчанию", ВидыНоменклатурыПоУмолчанию);
	
			// Инициализация таблицы для заполнения наборов дополнительных реквизитов и сведений.
			ДопРеквизитыИСведения = Новый ТаблицаЗначений;
			ДопРеквизитыИСведения.Колонки.Добавить("Свойство");
			ДопРеквизитыИСведения.Колонки.Добавить("ЭтоДопСведение");
			ДопРеквизитыИСведения.Колонки.Добавить("ТипОбъекта");
			КомпонентыОбмена.ПараметрыКонвертации.ЗагруженныеДопРеквизитыИСведения = ДопРеквизитыИСведения;
			
		Иначе
			// Заполнение параметров из узла обмена.
			Если КомпонентыОбмена.УзелКорреспондента <> Неопределено Тогда
				Если ВариантНастройки <> "ОбменУРМК" Тогда
					РеквизитыУзлаОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					КомпонентыОбмена.УзелКорреспондента, "ТипЦенДляИзмененияЦен");
					ПараметрыКонвертации.Вставить("ТипЦенДляИзмененияЦен", РеквизитыУзлаОбмена.ТипЦенДляИзмененияЦен);
				Иначе
					РеквизитыУзлаОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					КомпонентыОбмена.УзелКорреспондента, "ВидЦен");
					ПараметрыКонвертации.Вставить("ТипЦенДляИзмененияЦен", РеквизитыУзлаОбмена.ВидЦен);
				КонецЕсли;
			Иначе
				ДатаОстатков = Неопределено;
				Если КомпонентыОбмена.ПараметрыКонвертации.Свойство("ДатаОстатков", ДатаОстатков)
					И ТипЗнч(ДатаОстатков) = Тип("Дата") Тогда
					КомпонентыОбмена.ПараметрыКонвертации.Вставить("ДатаНачалаПериодаВыгрузкиДокументов", НачалоДня(КонецДня(ДатаОстатков) + 1));
				КонецЕсли;
	
			КонецЕсли;
		КонецЕсли;
	Иначе
		//КонтрагентРозничныйПокупатель.
		ПараметрыКонвертации.КонтрагентРозничныйПокупатель = Константы.КонтрагентРозничныйПокупатель.Получить();
	КонецЕсли;
КонецПроцедуры


// Процедура, выполняемая после выполнения конвертации данных.
//
// Параметры:
//   КомпонентыОбмена - Структура - структура компонентов обмена.
//
Процедура ПослеКонвертации(КомпонентыОбмена) Экспорт

	Если КомпонентыОбмена.НаправлениеОбмена = "Получение" Тогда
		Если КомпонентыОбмена.РежимЗагрузкиДанныхВИнформационнуюБазу Тогда
			ОбработатьЗагруженныеДопРеквизитыИСведения(КомпонентыОбмена);
		КонецЕсли;
	ИначеЕсли КомпонентыОбмена.НаправлениеОбмена = "Отправка" Тогда
		
		Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена
			И КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменУРМК" Тогда
	
			УзелКорреспондента = КомпонентыОбмена.УзелКорреспондента;
			НомерПринятого     = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелКорреспондента, "НомерПринятого");
			
			Если НомерПринятого = 0 Тогда
				СформироватьЦеныНоменклатуры(КомпонентыОбмена, Новый Структура);
			Иначе
				ПравилоОбработкиSKU = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Справочник_КодыТоваровSKU_Отправка", "Имя");
				Если ПравилоОбработкиSKU <> Неопределено Тогда
					АлгоритмВыборки = ПравилоОбработкиSKU.ВыборкаДанных;
					
					СтруктураПараметров = Новый Структура;
					СтруктураПараметров.Вставить("КомпонентыОбмена", КомпонентыОбмена);
	
					МассивКодыSKU = ВыполнитьФункциюМодуляМенеджера(АлгоритмВыборки, СтруктураПараметров);
					
					ТаблицаКодовSKU = РегистрыСведений.КодыТоваровSKU.СоздатьНаборЗаписей().Выгрузить();
					
					Для Каждого Элемент Из МассивКодыSKU Цикл
						НоваяСтрока = ТаблицаКодовSKU.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
					КонецЦикла;
					
					ДополнительныеПараметры = Новый Структура;
					ДополнительныеПараметры.Вставить("ТаблицаКодовSKU", ТаблицаКодовSKU);
					
					СформироватьЦеныНоменклатуры(КомпонентыОбмена, ДополнительныеПараметры);
				КонецЕсли;
			КонецЕсли;			
	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


// Процедура, выполняемая перед началом отложенного заполнения объектов.
//
// Параметры:
//   КомпонентыОбмена - Структура - структура компонентов обмена.
//
Процедура ПередОтложеннымЗаполнением(КомпонентыОбмена) Экспорт

	
КонецПроцедуры

// Возвращает версию формата менеджера обмена.
// Возвращаемое значение:
//  Строка - номер версии.
Функция ВерсияФорматаМенеджераОбмена() Экспорт
    Возврат "2";
КонецФункции

// Заполняет таблицу правил обработки данных.
//
// Параметры:
//  НаправлениеОбмена - Строка - "Отправка" либо "Получение".
//  ПравилаОбработкиДанных - ТаблицаЗначений - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаОбработкиДанных(НаправлениеОбмена, ПравилаОбработкиДанных) Экспорт

	Если НаправлениеОбмена = "Отправка" Тогда
		Если ПравилаОбработкиДанных.Колонки.Найти("ОчисткаДанных") = Неопределено Тогда
			ПравилаОбработкиДанных.Колонки.Добавить("ОчисткаДанных");
		КонецЕсли;
		ДобавитьПОД_Документ_ВозвратТоваровОтПокупателя_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЗаказПокупателя_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЗаказПоставщику_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ИнвентаризационнаяОпись_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_КассоваяСмена_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОплатаОтПокупателяПлатежнойКартой_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОприходованиеТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиБезналичныхДенежныхСредств(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиНаличныхДенежныхСредств(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиРасчетыСПокупателямиАвансы(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиРасчетыСПокупателямиДолги(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиРасчетыСПоставщикамиАвансы(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиРасчетыСПоставщикамиДолги(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиСобственныхТМЦ(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиТоваровПринятыхНаКомиссию(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетКомитенту_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетКомитентуОСписании_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетОРозничныхПродажах_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПередачаТоваровМеждуОрганизациями_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПеремещениеТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПересортицаТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПересчетТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПоступлениеТоваровУслуг_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПриходныйКассовыйОрдер_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РасходныйКассовыйОрдер_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РеализацияТоваровУслуг_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СборкаТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СписаниеТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетФактураВыданный_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетФактураПолученный_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ЕдиницыИзмерения_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_НастройкиЧастичногоВыбытияТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Номенклатура_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ОписаниеНоменклатурыИС_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Банки_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_БанковскиеСчета_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_БонусныеПрограммыЛояльности_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ВидыНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ВидыОплатЧекаККМ_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ВидыЦен_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДисконтныеКарты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Кассы_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КассыККМ_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КлассификаторТНВЭД_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КодыТоваровSKU_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Контрагенты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Магазины_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_НоменклатураКартинки_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_НомераГТД_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Организации_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ПозицияПрайсЛиста_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Пользователи_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ПравилаЦенообразованияВТипыЦен_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ПрайсЛист_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СерииНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СерийныеНомераПС_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Склады_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СостояниеОплатыЗаказа_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СостояниеОтгрузкиЗаказа_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СостоянияЭД_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиДДС_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтраныМира_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Упаковки_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛица_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ХарактеристикиНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ШтрихкодыНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ШтрихкодыУпаковокТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ЭквайринговыеТерминалы_Отправка(ПравилаОбработкиДанных);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПОД_Документ_ВводОстатковПрослеживаемыхТоваров_Получ(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВнесениеДСВКассуККМ_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратТоваровПоставщику_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВыемкаДСИзКассыККМ_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЗаказКлиента_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЗаказПоставщику_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЗаявкаНаРасходДСРасчетыСКонт_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_КассоваяСменаЗакрытие_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_КассоваяСменаОткрытие_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОприходованиеТоваров_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетКомитенту_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетОРозничныхПродажах_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПеремещениеТоваров_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПересчетТоваров_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОПолучениеНаличныхВБанке_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОПрочееПоступление_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОПрочиеДоходы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПоступлениеТоваровУслуг_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РеализацияТоваровУслуг_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОНаБанковскийСчет_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОПрочийРасход_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СборкаТоваров_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СписаниеЗапасов(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_УведомлениеОВвозеПрослеживаемыхТоваров_Получ(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_УстановкаЦенНоменклатуры_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЧекККМ_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ДополнительныеРеквизиты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ЕдиницыИзмерения_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ЗначенияДопРеквизитов_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Номенклатура_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_НоменклатураГруппа(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Банки_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_БанковскиеСчета_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ВидыНоменклатуры_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДоговорыКонтрагентов_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КассыККМ_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КодТНВЭД_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Контрагенты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КонтрагентыГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Магазины_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_НомерГТД_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Организации_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Пользователи_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СерииНоменклатуры_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СостоянияЭД_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиДДС_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтраныМира_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ТипыЦен_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Файлы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛица_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛицаГруппа(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ХарактеристикиНоменклатуры_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ШтрихкодыНоменклатуры_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ШтрихкодыУпаковокТоваров_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ЭквайринговыеТерминалы_Получение(ПравилаОбработкиДанных);
	КонецЕсли;
КонецПроцедуры
// Заполняет таблицу правил конвертации объектов.
//
// Параметры:
//  НаправлениеОбмена - Строка - "Отправка" либо "Получение".
//  ПравилаКонвертации - ТаблицаЗначений - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаКонвертацииОбъектов(НаправлениеОбмена, ПравилаКонвертации) Экспорт


	Если НаправлениеОбмена = "Отправка" Тогда
		ДобавитьПКО_Документ_ВозвратПодарочныхСертификатов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратТоваровОтПокупателя_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаказПокупателя_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаказПоставщику_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ИнвентаризационнаяОпись_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_КассоваяСменаЗакрытие_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_КассоваяСменаОткрытие_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_КорректировкаПоступленияТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОплатаОтПокупателяПлатежнойКартой_Отправк(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОприходованиеТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОприходованиеТоваровВПоступление_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОРП_ИзСтруктуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиБезналичныхДенежныхСредств(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиНаличныхДенежныхСредств(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиРасчетыСПокупателямиАвансы(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиРасчетыСПокупателямиДолги(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиРасчетыСПоставщикамиАвансы(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиРасчетыСПоставщикамиДолги(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиСобственныхТМЦ(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиТоваровПринятыхНаКомиссию(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетКомитенту_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетКомитентуОСписании_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетОРозничныхПродажах_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПеремещениеТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПереоценкаТоваровВРознице_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПересортицаВОприходование_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПересортицаВСписание_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПересчетТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПоступлениеИзДругойКассы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПоступлениеИзКассыККМ_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПрочиеДоходы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРозничнаяВыручка_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПоступлениеТоваровУслуг_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПрименениеЦенНоменклатуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РеализацияТоваровУслуг_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОВыдачаВДругуюКассу_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОВыдачаВКассуККМ_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОНаБанковскийСчет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОПрочийРасход_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СборкаТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СписаниеТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СписаниеТоваровВТребование_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетФактураВыданный_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетФактураПолученный_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЧекККМ_Отправка(ПравилаКонвертации);
		ДобавитьПКО_ПередачаМеждуОрганизациями_ПТУ_Отправка(ПравилаКонвертации);
		ДобавитьПКО_ПередачаМеждуОрганизациями_РТУ_Отправка(ПравилаКонвертации);
		ДобавитьПКО_ПКО_АТТ_ОтчетОРозничныхПродажах(ПравилаКонвертации);
		ДобавитьПКО_Справочник_БанковскиеСчета_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_БонусныеПрограммыЛояльности_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Валюта_ИзСтруктуры(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ВидыАлкогольнойПродукции_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ВидыОплатЧекаККМВЭквТерминалы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ВидыПодарочныхСертификатов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ВидыЦен_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДисконтныеКарты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Кассы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_КассыККМ_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Контрагенты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Номенклатура_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_НоменклатураКартинки_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_НомераГТД_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Организации_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Патенты_ИзСтруктуры(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ПозицияПрайсЛиста_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Пользователи_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ПравилаЦенообразованияВТипыЦен_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ПрайсЛист_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СерийныеНомераПС_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Склады_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СостояниеОплатыЗаказа_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СостояниеОтгрузкиЗаказа_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СостоянияЭД_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ТипыЦен_ИзСтруктуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Упаковки_ИзСтруктуры(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ФизическиеЛица_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ХарактеристикиНоменклатуры_ИзСтруктуры(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ШтрихкодыНоменклатуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ШтрихкодыУпаковокТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ЭквайринговыеТерминалы_Отправка(ПравилаКонвертации);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПКО_Документ_ВводОстатковПрослеживаемыхТоваров_Получ(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВнесениеДСВКассуККМ_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВыемкаДСИзКассыККМ_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаказКлиента_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаказПоставщику_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаявкаНаРасходДСРасчетыСКонт_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_КассоваяСменаЗакрытие_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_КассоваяСменаОткрытие_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОприходованиеТоваров_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетКомитенту_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетОРозничныхПродажах_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПеремещениеТоваров_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПересчетТоваров_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПрочееПоступление_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПрочиеДоходы_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПоступлениеТоваровУслуг_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РеализацияТоваровУслуг_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОНаБанковскийСчет_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОПрочийРасход_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСРасчетыСКонтрагентами_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СборкаТоваров_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СписаниеЗапасов_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_УведОВвозеПрослеживаемыхТоваров_Получ(ПравилаКонвертации);
		ДобавитьПКО_Документ_УстановкаЦенНоменклатуры_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЧекККМ_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_БанковскиеСчета_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ВидыАлкогольнойПродукции_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ВидыПодарочныхСертификатов_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДисконтныеКарты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДоговорыКонтрагентов_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_КассыККМ_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_КлассификаторТНВЭД(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Контрагенты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Номенклатура_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_НоменклатураПрисоединенныеФайлы_Получ(ПравилаКонвертации);
		ДобавитьПКО_Справочник_НомераГТД_ПолучениеЭлемента(ПравилаКонвертации);
		ДобавитьПКО_Справочник_НомерГТД_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Организации_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Пользователи_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Производители(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СерииНоменклатуры_ИзСтруктуры(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Склады_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СостоянияЭД_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ТипыЦен_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ФизическиеЛица_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ШтрихкодыНоменклатуры_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ШтрихкодыУпаковокТоваров_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ШтрихкодыУпаковокТоваровИзСтр_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ЭквайринговыеТерминалы_Получение(ПравилаКонвертации);
	КонецЕсли;
	ДобавитьПКО_Справочник_Банки(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ВидыНоменклатуры(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ДополнительныеРеквизиты(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ЕдиницыИзмерения(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ЗначенияДополнительныхРеквизитов(ПравилаКонвертации);
	ДобавитьПКО_Справочник_КлассификаторТНВЭД_ЭлементСправочника(ПравилаКонвертации);
	ДобавитьПКО_Справочник_КонтрагентыГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_НоменклатураГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СерииНоменклатуры(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СтраныМира(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Упаковки(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ФизическиеЛицаГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ХарактеристикиНоменклатуры(ПравилаКонвертации);
	ДобавитьПКО_СтатьиДДС(ПравилаКонвертации);
КонецПроцедуры
// Заполняет таблицу правил конвертации предопределенных данных.
//
// Параметры:
//  НаправлениеОбмена - Строка - "Отправка" либо "Получение".
//  ПравилаКонвертации - ТаблицаЗначений - таблица значений, в которую будут добавлены правила. 
Процедура ЗаполнитьПравилаКонвертацииПредопределенныхДанных(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		// ВидыКИ_Отправка.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ВидыКИ_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Справочники.ВидыКонтактнойИнформации;
		ПравилоКонвертации.ТипXDTO   = "ВидыКИ";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailКонтрагента, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailОрганизации, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailФизическогоЛица, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента, "ПочтовыйАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации, "ПочтовыйАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресФизическогоЛица, "ПочтовыйАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонМагазина, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонФизическогоЛица, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФаксКонтрагента, "Факс");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФаксМагазина, "Факс");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФаксОрганизации, "Факс");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, "ФактическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФактАдресМагазина, "ФактическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации, "ФактическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФактАдресФизическогоЛица, "ФактическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, "ЮридическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, "ЮридическийАдрес");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Пол.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Пол";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ПолФизическогоЛица;
		ПравилоКонвертации.ТипXDTO   = "Пол";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ПолФизическогоЛица.Женский, "Женский");
		ЗначенияДляОтправки.Вставить(Перечисления.ПолФизическогоЛица.Мужской, "Мужской");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// ПризнакиПредметаРасчета_Отправка.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ПризнакиПредметаРасчета_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ПризнакиПредметаРасчета;
		ПравилоКонвертации.ТипXDTO   = "ПризнакиПредметаРасчета";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.АгентскоеВознаграждение, "АгентскоеВознаграждение");
		ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.ВнереализационныйДоход, "ВнереализационныйДоход");
		ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.ВыигрышАзартнойИгры, "ВыигрышАзартнойИгры");
		ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.ВыигрышЛотереи, "ВыигрышЛотереи");
		ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.ИмущественноеПраво, "ИмущественноеПраво");
		ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.ИнойПредметРасчета, "ИнойПредметРасчета");
		ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.КурортныйСбор, "КурортныйСбор");
		ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.ЛотерейныйБилет, "ЛотерейныйБилет");
		ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.ПлатежВыплата, "ПлатежВыплата");
		ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.ПодакцизныйТовар, "ПодакцизныйТовар");
		ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.ПодакцизныйТоварМаркируемыйСИИмеющийКМ, "ПодакцизныйТовар");
		ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.ПодакцизныйТоварМаркируемыйСИНеИмеющийКМ, "ПодакцизныйТовар");
		ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.Работа, "Работа");
		ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.СоставнойПредметРасчета, "СоставнойПредметРасчета");
		ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.СтавкаАзартнойИгры, "СтавкаАзартнойИгры");
		ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.СтраховыеВзносы, "СтраховыеВзносы");
		ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.Товар, "Товар");
		ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.ТоварМаркируемыйСИИмеющийКМ, "Товар");
		ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.ТоварМаркируемыйСИНеИмеющийКМ, "Товар");
		ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.ТорговыйСбор, "ТорговыйСбор");
		ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.Услуга, "Услуга");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// ПризнакиСпособаРасчета.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ПризнакиСпособаРасчета";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ПризнакиСпособаРасчета;
		ПравилоКонвертации.ТипXDTO   = "ПризнакиСпособаРасчета";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиСпособаРасчета.Аванс, "Аванс");
		ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиСпособаРасчета.ОплатаКредита, "ОплатаКредита");
		ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиСпособаРасчета.ПередачаБезОплаты, "ПередачаБезОплаты");
		ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой, "ПередачаСПолнойОплатой");
		ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой, "ПередачаСЧастичнойОплатой");
		ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная, "ПредоплатаПолная");
		ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная, "ПредоплатаЧастичная");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// СистемыНалогообложения.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "СистемыНалогообложения";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыСистемНалогообложенияККТ;
		ПравилоКонвертации.ТипXDTO   = "СистемыНалогообложения";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыСистемНалогообложенияККТ.ЕНВД, "ЕНВД");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыСистемНалогообложенияККТ.ЕСН, "ЕдиныйСельскохозяйственныйНалог");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыСистемНалогообложенияККТ.ОСН, "Общая");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыСистемНалогообложенияККТ.Патент, "ПатентнаяСистема");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыСистемНалогообложенияККТ.УСНДоход, "УпрощеннаяДоход");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыСистемНалогообложенияККТ.УСНДоходРасход, "УпрощеннаяДоходМинусРасход");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// СостоянияДоставкиЗаказаПокупателя.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "СостоянияДоставкиЗаказаПокупателя";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СостоянияДоставкиЗаказаПокупателя;
		ПравилоКонвертации.ТипXDTO   = "СостоянияОтгрузки";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.СостоянияДоставкиЗаказаПокупателя.ГотовКОтгрузке, "НеОтгружен");
		ЗначенияДляОтправки.Вставить(Перечисления.СостоянияДоставкиЗаказаПокупателя.ГотовКОтгрузкеЧастично, "НеОтгружен");
		ЗначенияДляОтправки.Вставить(Перечисления.СостоянияДоставкиЗаказаПокупателя.ДоставкаЗавершена, "Отгружен");
		ЗначенияДляОтправки.Вставить(Перечисления.СостоянияДоставкиЗаказаПокупателя.НеСобран, "НеОтгружен");
		ЗначенияДляОтправки.Вставить(Перечисления.СостоянияДоставкиЗаказаПокупателя.Отгружен, "Отгружен");
		ЗначенияДляОтправки.Вставить(Перечисления.СостоянияДоставкиЗаказаПокупателя.ОтгруженЧастично, "ОтгруженЧастично");
		ЗначенияДляОтправки.Вставить(Перечисления.СостоянияДоставкиЗаказаПокупателя.Отменен, "Отменен");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// СостоянияОплатыЗаказаПокупателя.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "СостоянияОплатыЗаказаПокупателя";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СостоянияОплатыЗаказаПокупателя;
		ПравилоКонвертации.ТипXDTO   = "СостоянияОплаты";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.СостоянияОплатыЗаказаПокупателя.НеОплачен, "НеОплачен");
		ЗначенияДляОтправки.Вставить(Перечисления.СостоянияОплатыЗаказаПокупателя.ОплаченПолностью, "Оплачен");
		ЗначенияДляОтправки.Вставить(Перечисления.СостоянияОплатыЗаказаПокупателя.ОплаченЧастично, "ОплаченЧастично");
		ЗначенияДляОтправки.Вставить(Перечисления.СостоянияОплатыЗаказаПокупателя.Фискализирован, "Оплачен");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// ТипыНоменклатуры_Отправка.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ТипыНоменклатуры_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыНоменклатуры;
		ПравилоКонвертации.ТипXDTO   = "ТипыНоменклатуры";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.ПодарочныйСертификат, "Товар");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.Товар, "Товар");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.Услуга, "Услуга");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// ТипыУпаковок.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ТипыУпаковок";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыУпаковок;
		ПравилоКонвертации.ТипXDTO   = "ТипыУпаковокНоменклатуры";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыУпаковок.МаркированныйТовар, "МаркированныйТовар");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыУпаковок.МонотоварнаяУпаковка, "МонотоварнаяУпаковка");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыУпаковок.МультитоварнаяУпаковка, "МультитоварнаяУпаковка");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// ТипыШтрихкодов.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ТипыШтрихкодов";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыШтрихкодов;
		ПравилоКонвертации.ТипXDTO   = "ТипыШтрихкодов";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыШтрихкодов.Code128, "Code128");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыШтрихкодов.Code39, "Code39");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыШтрихкодов.EAN13, "EAN13");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыШтрихкодов.EAN8, "EAN8");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыШтрихкодов.GS1_128, "GS1_128");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыШтрихкодов.GS1_DataBarExpandedStacked, "GS1_DataBarExpandedStacked");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыШтрихкодов.ITF14, "ITF14");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыШтрихкодов.PDF417, "PDF417");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыШтрихкодов.QR, "QR");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыШтрихкодов.SSCC, "SSCC");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// ХозяйственныеОперацииВВидыОперацийПоПлатежнойКарте.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ХозяйственныеОперацииВВидыОперацийПоПлатежнойКарте";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ХозяйственныеОперации;
		ПравилоКонвертации.ТипXDTO   = "ВидыОперацийПоПлатежнойКарте";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту, "ВозвратОплатыКлиентуНаПлатежнуюКарту");
		ЗначенияДляОтправки.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента, "ОплатаОтКлиентаПлатежнойКартой");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// ЮрФизЛицо_Организации_Отправка.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ЮрФизЛицо_Организации_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ЮрФизЛицо;
		ПравилоКонвертации.ТипXDTO   = "ЮридическоеФизическоеЛицо";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель, "ФизическоеЛицо");
		ЗначенияДляОтправки.Вставить(Перечисления.ЮрФизЛицо.ФизЛицо, "ФизическоеЛицо");
		ЗначенияДляОтправки.Вставить(Перечисления.ЮрФизЛицо.ЮрЛицо, "ЮридическоеЛицо");
		ЗначенияДляОтправки.Вставить(Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент, "ЮридическоеЛицо");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	КонецЕсли;
	Если НаправлениеОбмена = "Получение" Тогда
		// ПризнакиПредметаРасчета_Получение.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ПризнакиПредметаРасчета_Получение";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ПризнакиПредметаРасчета;
		ПравилоКонвертации.ТипXDTO   = "ПризнакиПредметаРасчета";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("АгентскоеВознаграждение", Перечисления.ПризнакиПредметаРасчета.АгентскоеВознаграждение);
		ЗначенияДляПолучения.Вставить("ВнереализационныйДоход", Перечисления.ПризнакиПредметаРасчета.ВнереализационныйДоход);
		ЗначенияДляПолучения.Вставить("ВыигрышАзартнойИгры", Перечисления.ПризнакиПредметаРасчета.ВыигрышАзартнойИгры);
		ЗначенияДляПолучения.Вставить("ВыигрышЛотереи", Перечисления.ПризнакиПредметаРасчета.ВыигрышЛотереи);
		ЗначенияДляПолучения.Вставить("ИмущественноеПраво", Перечисления.ПризнакиПредметаРасчета.ИмущественноеПраво);
		ЗначенияДляПолучения.Вставить("ИнойПредметРасчета", Перечисления.ПризнакиПредметаРасчета.ИнойПредметРасчета);
		ЗначенияДляПолучения.Вставить("КурортныйСбор", Перечисления.ПризнакиПредметаРасчета.КурортныйСбор);
		ЗначенияДляПолучения.Вставить("ЛотерейныйБилет", Перечисления.ПризнакиПредметаРасчета.ЛотерейныйБилет);
		ЗначенияДляПолучения.Вставить("ПлатежВыплата", Перечисления.ПризнакиПредметаРасчета.ПлатежВыплата);
		ЗначенияДляПолучения.Вставить("ПодакцизныйТовар", Перечисления.ПризнакиПредметаРасчета.ПодакцизныйТовар);
		ЗначенияДляПолучения.Вставить("Работа", Перечисления.ПризнакиПредметаРасчета.Работа);
		ЗначенияДляПолучения.Вставить("СоставнойПредметРасчета", Перечисления.ПризнакиПредметаРасчета.СоставнойПредметРасчета);
		ЗначенияДляПолучения.Вставить("СтавкаАзартнойИгры", Перечисления.ПризнакиПредметаРасчета.СтавкаАзартнойИгры);
		ЗначенияДляПолучения.Вставить("СтраховыеВзносы", Перечисления.ПризнакиПредметаРасчета.СтраховыеВзносы);
		ЗначенияДляПолучения.Вставить("Товар", Перечисления.ПризнакиПредметаРасчета.Товар);
		ЗначенияДляПолучения.Вставить("ТорговыйСбор", Перечисления.ПризнакиПредметаРасчета.ТорговыйСбор);
		ЗначенияДляПолучения.Вставить("Услуга", Перечисления.ПризнакиПредметаРасчета.Услуга);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// ТипыНоменклатуры_Получение.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ТипыНоменклатуры_Получение";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыНоменклатуры;
		ПравилоКонвертации.ТипXDTO   = "ТипыНоменклатуры";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("МногооборотнаяТара", Перечисления.ТипыНоменклатуры.Товар);
		ЗначенияДляПолучения.Вставить("Товар", Перечисления.ТипыНоменклатуры.Товар);
		ЗначенияДляПолучения.Вставить("Работа", Перечисления.ТипыНоменклатуры.Услуга);
		ЗначенияДляПолучения.Вставить("Услуга", Перечисления.ТипыНоменклатуры.Услуга);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// ЮрФизЛицо_Организации_Получение.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ЮрФизЛицо_Организации_Получение";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ЮрФизЛицо;
		ПравилоКонвертации.ТипXDTO   = "ЮридическоеФизическоеЛицо";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("ФизическоеЛицо", Перечисления.ЮрФизЛицо.ФизЛицо);
		ЗначенияДляПолучения.Вставить("ЮридическоеЛицо", Перечисления.ЮрФизЛицо.ЮрЛицо);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	КонецЕсли;

	// ВидыЛицензийАлкогольнойПродукции.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ВидыЛицензийАлкогольнойПродукции";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыЛицензийАлкогольнойПродукции;
	ПравилоКонвертации.ТипXDTO   = "ВидыЛицензийАлкогольнойПродукции";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.АлкогольнаяПродукция, "АлкогольнаяПродукция");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.Пиво, "Пиво");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяНеПищеваяПродукция, "СпиртосодержащаяНеПищеваяПродукция");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяПищеваяПродукция, "СпиртосодержащаяПищеваяПродукция");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("АлкогольнаяПродукция", Перечисления.ВидыЛицензийАлкогольнойПродукции.АлкогольнаяПродукция);
	ЗначенияДляПолучения.Вставить("Пиво", Перечисления.ВидыЛицензийАлкогольнойПродукции.Пиво);
	ЗначенияДляПолучения.Вставить("СпиртосодержащаяНеПищеваяПродукция", Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяНеПищеваяПродукция);
	ЗначенияДляПолучения.Вставить("СпиртосодержащаяПищеваяПродукция", Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяПищеваяПродукция);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыОперацийСборкаТоваров.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ВидыОперацийСборкаТоваров";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийКомплектацияНоменклатуры;
	ПравилоКонвертации.ТипXDTO   = "ВидыОперацийСборкаТоваров";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация, "Сборка");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация, "Разборка");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Сборка", Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация);
	ЗначенияДляПолучения.Вставить("Разборка", Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыПродукцииИС.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ВидыПродукцииИС";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ОсобенностиУчетаНоменклатуры;
	ПравилоКонвертации.ТипXDTO   = "ВидыПродукцииИС";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция, "Алкогольная");
	ЗначенияДляОтправки.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.АльтернативныйТабак, "АльтернативныйТабак");
	ЗначенияДляОтправки.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.Велосипеды, "Велосипеды");
	ЗначенияДляОтправки.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.Духи, "Духи");
	ЗначенияДляОтправки.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.КреслаКоляски, "КреслаКоляски");
	ЗначенияДляОтправки.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность, "ЛегкаяПромышленность");
	ЗначенияДляОтправки.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС, "МолочнаяПродукция");
	ЗначенияДляОтправки.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция, "Обувь");
	ЗначенияДляОтправки.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция, "Табак");
	ЗначенияДляОтправки.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.УпакованнаяВода, "УпакованнаяВода");
	ЗначенияДляОтправки.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.Фотоаппараты, "Фотоаппараты");
	ЗначенияДляОтправки.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.Шины, "Шины");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Алкогольная", Перечисления.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция);
	ЗначенияДляПолучения.Вставить("АльтернативныйТабак", Перечисления.ОсобенностиУчетаНоменклатуры.АльтернативныйТабак);
	ЗначенияДляПолучения.Вставить("Велосипеды", Перечисления.ОсобенностиУчетаНоменклатуры.Велосипеды);
	ЗначенияДляПолучения.Вставить("Духи", Перечисления.ОсобенностиУчетаНоменклатуры.Духи);
	ЗначенияДляПолучения.Вставить("КреслаКоляски", Перечисления.ОсобенностиУчетаНоменклатуры.КреслаКоляски);
	ЗначенияДляПолучения.Вставить("ЛегкаяПромышленность", Перечисления.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность);
	ЗначенияДляПолучения.Вставить("МолочнаяПродукция", Перечисления.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС);
	ЗначенияДляПолучения.Вставить("Обувь", Перечисления.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция);
	ЗначенияДляПолучения.Вставить("Табак", Перечисления.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция);
	ЗначенияДляПолучения.Вставить("УпакованнаяВода", Перечисления.ОсобенностиУчетаНоменклатуры.УпакованнаяВода);
	ЗначенияДляПолучения.Вставить("Фотоаппараты", Перечисления.ОсобенностиУчетаНоменклатуры.Фотоаппараты);
	ЗначенияДляПолучения.Вставить("Шины", Перечисления.ОсобенностиУчетаНоменклатуры.Шины);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_СтавкиНДС.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_СтавкиНДС";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СтавкиНДС;
	ПравилоКонвертации.ТипXDTO   = "СтавкиНДС";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.БезНДС, "БезНДС");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС0, "НДС0");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС10, "НДС10");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС10_110, "НДС10_110");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС18, "НДС18");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС18_118, "НДС18_118");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС20, "НДС20");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС20_120, "НДС20_120");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("БезНДС", Перечисления.СтавкиНДС.БезНДС);
	ЗначенияДляПолучения.Вставить("НДС0", Перечисления.СтавкиНДС.НДС0);
	ЗначенияДляПолучения.Вставить("НДС10", Перечисления.СтавкиНДС.НДС10);
	ЗначенияДляПолучения.Вставить("НДС10_110", Перечисления.СтавкиНДС.НДС10_110);
	ЗначенияДляПолучения.Вставить("НДС18", Перечисления.СтавкиНДС.НДС18);
	ЗначенияДляПолучения.Вставить("НДС18_118", Перечисления.СтавкиНДС.НДС18_118);
	ЗначенияДляПолучения.Вставить("НДС20", Перечисления.СтавкиНДС.НДС20);
	ЗначенияДляПолучения.Вставить("НДС20_120", Перечисления.СтавкиНДС.НДС20_120);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_ТипыОплатыККТ.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_ТипыОплатыККТ";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыОплатыККТ;
	ПравилоКонвертации.ТипXDTO   = "ТипыОплатЧековККМ";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыОплатыККТ.ВстречноеПредоставление, "ВстречноеПредставление");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыОплатыККТ.Наличные, "Наличные");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыОплатыККТ.Постоплата, "Постоплата");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыОплатыККТ.Предоплата, "Предоплата");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыОплатыККТ.Электронно, "Электронно");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ВстречноеПредставление", Перечисления.ТипыОплатыККТ.ВстречноеПредоставление);
	ЗначенияДляПолучения.Вставить("Наличные", Перечисления.ТипыОплатыККТ.Наличные);
	ЗначенияДляПолучения.Вставить("Постоплата", Перечисления.ТипыОплатыККТ.Постоплата);
	ЗначенияДляПолучения.Вставить("Предоплата", Перечисления.ТипыОплатыККТ.Предоплата);
	ЗначенияДляПолучения.Вставить("Электронно", Перечисления.ТипыОплатыККТ.Электронно);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// СпособыРасчетаКомиссионногоВознаграждения.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "СпособыРасчетаКомиссионногоВознаграждения";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СпособыРасчетаКомиссионногоВознаграждения;
	ПравилоКонвертации.ТипXDTO   = "СпособыРасчетаКомиссионногоВознаграждения";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается, "НеРассчитывается");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтРазностиСуммыПродажиИСуммыКомитента, "ПроцентОтРазницыСуммПродажиИПоступления");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи, "ПроцентОтСуммыПродажи");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("НеРассчитывается", Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается);
	ЗначенияДляПолучения.Вставить("ПроцентОтРазницыСуммПродажиИПоступления", Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтРазностиСуммыПродажиИСуммыКомитента);
	ЗначенияДляПолучения.Вставить("ПроцентОтСуммыПродажи", Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ТипыСостоянийЭлектронногоДокумента.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ТипыСостоянийЭлектронногоДокумента";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СостоянияДокументовЭДО;
	ПравилоКонвертации.ТипXDTO   = "ТипыСостоянийЭлектронногоДокумента";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.СостоянияДокументовЭДО.Аннулирован, "Аннулирован");
	ЗначенияДляОтправки.Вставить(Перечисления.СостоянияДокументовЭДО.ЗакрытПринудительно, "ЗакрытПринудительно");
	ЗначенияДляОтправки.Вставить(Перечисления.СостоянияДокументовЭДО.НеПолучен, "НеПолучен");
	ЗначенияДляОтправки.Вставить(Перечисления.СостоянияДокументовЭДО.НеСформирован, "НеСформирован");
	ЗначенияДляОтправки.Вставить(Перечисления.СостоянияДокументовЭДО.ОбменЗавершен, "ОбменЗавершен");
	ЗначенияДляОтправки.Вставить(Перечисления.СостоянияДокументовЭДО.ОжидаетсяИзвещениеОПолучении, "ОжидаетсяИзвещениеОПолучении");
	ЗначенияДляОтправки.Вставить(Перечисления.СостоянияДокументовЭДО.ОжидаетсяИсправление, "ОжидаетсяИсправление");
	ЗначенияДляОтправки.Вставить(Перечисления.СостоянияДокументовЭДО.ОжидаетсяПередачаОператору, "ОжидаетсяПередачаОператору");
	ЗначенияДляОтправки.Вставить(Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждение, "ОжидаетсяПодтверждение");
	ЗначенияДляОтправки.Вставить(Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеОператора, "ОжидаетсяПодтверждениеОператора");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Аннулирован", Перечисления.СостоянияДокументовЭДО.Аннулирован);
	ЗначенияДляПолучения.Вставить("ЗакрытПринудительно", Перечисления.СостоянияДокументовЭДО.ЗакрытПринудительно);
	ЗначенияДляПолучения.Вставить("НеПолучен", Перечисления.СостоянияДокументовЭДО.НеПолучен);
	ЗначенияДляПолучения.Вставить("НеСформирован", Перечисления.СостоянияДокументовЭДО.НеСформирован);
	ЗначенияДляПолучения.Вставить("ОбменЗавершен", Перечисления.СостоянияДокументовЭДО.ОбменЗавершен);
	ЗначенияДляПолучения.Вставить("ОжидаетсяИзвещениеОПолучении", Перечисления.СостоянияДокументовЭДО.ОжидаетсяИзвещениеОПолучении);
	ЗначенияДляПолучения.Вставить("ОжидаетсяИсправление", Перечисления.СостоянияДокументовЭДО.ОжидаетсяИсправление);
	ЗначенияДляПолучения.Вставить("ОжидаетсяПередачаОператору", Перечисления.СостоянияДокументовЭДО.ОжидаетсяПередачаОператору);
	ЗначенияДляПолучения.Вставить("ОжидаетсяПодтверждение", Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждение);
	ЗначенияДляПолучения.Вставить("ОжидаетсяПодтверждениеОператора", Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеОператора);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

КонецПроцедуры

// Заполняет параметры конвертации.
//
// Параметры:
//  ПараметрыКонвертации - Структура - структура, в которую добавляются параметры конвертации.
Процедура ЗаполнитьПараметрыКонвертации(ПараметрыКонвертации) Экспорт
	ПараметрыКонвертации.Вставить("ЗагруженныеДопРеквизитыИСведения");
	ПараметрыКонвертации.Вставить("ТипЦенДляИзмененияЦен");
	ПараметрыКонвертации.Вставить("ВариантНастройки");
	ПараметрыКонвертации.Вставить("КонтрагентРозничныйПокупатель");
	ПараметрыКонвертации.Вставить("ДатаОстатков");
КонецПроцедуры

// Процедура-обертка, выполняет запуск указанной в параметрах процедуры модуля менеджера обмена через формат.
//
// Параметры:
//  ИмяПроцедуры - Строка - имя процедуры этого модуля.
//  Параметры - Структура - структура, содержащая передаваемые параметры.
Процедура ВыполнитьПроцедуруМодуляМенеджера(ИмяПроцедуры, Параметры) Экспорт
	Если ИмяПроцедуры = "ПОД_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ЗаказПокупателя_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ЗаказПокупателя_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ЗаказПоставщику_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ЗаказПоставщику_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ИнвентаризационнаяОпись_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ИнвентаризационнаяОпись_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_КассоваяСмена_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_КассоваяСмена_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ОприходованиеТоваров_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ОприходованиеТоваров_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПередачаТоваровМеждуОрганизациями_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПередачаТоваровМеждуОрганизациями_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПеремещениеТоваров_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПеремещениеТоваров_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПересортицаТоваров_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПересортицаТоваров_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПересчетТоваров_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПересчетТоваров_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПриходныйКассовыйОрдер_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПриходныйКассовыйОрдер_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_РасходныйКассовыйОрдер_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_РасходныйКассовыйОрдер_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_РеализацияТоваровУслуг_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_РеализацияТоваровУслуг_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СписаниеТоваров_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_СписаниеТоваров_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СчетФактураВыданный_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_СчетФактураВыданный_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СчетФактураПолученный_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_СчетФактураПолученный_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_НастройкиЧастичногоВыбытияТоваров_Отправка_ПриОбработке" Тогда 
		ПОД_НастройкиЧастичногоВыбытияТоваров_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Номенклатура_Отправка_ПриОбработке" Тогда 
		ПОД_Номенклатура_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ОписаниеНоменклатурыИС_Отправка_ПриОбработке" Тогда 
		ПОД_ОписаниеНоменклатурыИС_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Банки_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Банки_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ВидыНоменклатуры_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ВидыНоменклатуры_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ВидыОплатЧекаККМ_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ВидыОплатЧекаККМ_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ДисконтныеКарты_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ДисконтныеКарты_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Кассы_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Кассы_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_КассыККМ_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_КассыККМ_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_КлассификаторТНВЭД_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_КлассификаторТНВЭД_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Контрагенты_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Контрагенты_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_НоменклатураКартинки_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_НоменклатураКартинки_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_НомераГТД_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_НомераГТД_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_СерииНоменклатуры_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_СерииНоменклатуры_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_СерийныеНомераПС_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_СерийныеНомераПС_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Склады_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Склады_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_СостояниеОплатыЗаказа_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_СостояниеОплатыЗаказа_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_СостояниеОтгрузкиЗаказа_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_СостояниеОтгрузкиЗаказа_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_СостоянияЭД_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_СостоянияЭД_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Упаковки_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Упаковки_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ХарактеристикиНоменклатуры_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ХарактеристикиНоменклатуры_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ШтрихкодыУпаковокТоваров_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ШтрихкодыУпаковокТоваров_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ЭквайринговыеТерминалы_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ЭквайринговыеТерминалы_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ЗаявкаНаРасходДСРасчетыСКонт_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ЗаявкаНаРасходДСРасчетыСКонт_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_РеализацияТоваровУслуг_Получение_ПриОбработке" Тогда 
		ПОД_Документ_РеализацияТоваровУслуг_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриОбработке" Тогда 
		ПОД_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ЧекККМ_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ЧекККМ_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ДополнительныеРеквизиты_Получение_ПриОбработке" Тогда 
		ПОД_ДополнительныеРеквизиты_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ЗначенияДопРеквизитов_Получение_ПриОбработке" Тогда 
		ПОД_ЗначенияДопРеквизитов_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ДоговорыКонтрагентов_Получение_ПриОбработке" Тогда 
		ПОД_Справочник_ДоговорыКонтрагентов_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_СостоянияЭД_Получение_ПриОбработке" Тогда 
		ПОД_Справочник_СостоянияЭД_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Файлы_Получение_ПриОбработке" Тогда 
		ПОД_Справочник_Файлы_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиБезналичныхДенежныхСредств_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиБезналичныхДенежныхСредств_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиНаличныхДенежныхСредств_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиНаличныхДенежныхСредств_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиРасчетыСПокупателямиАвансы_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиРасчетыСПокупателямиАвансы_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиРасчетыСПокупателямиДолги_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиРасчетыСПокупателямиДолги_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиРасчетыСПоставщикамиАвансы_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиРасчетыСПоставщикамиАвансы_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиРасчетыСПоставщикамиДолги_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиРасчетыСПоставщикамиДолги_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиСобственныхТМЦ_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиСобственныхТМЦ_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиТоваровПринятыхНаКомиссию_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиТоваровПринятыхНаКомиссию_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратПодарочныхСертификатов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВозвратПодарочныхСертификатов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказПокупателя_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ЗаказПокупателя_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказПоставщику_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ЗаказПоставщику_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ИнвентаризационнаяОпись_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ИнвентаризационнаяОпись_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КассоваяСменаЗакрытие_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_КассоваяСменаЗакрытие_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КассоваяСменаОткрытие_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_КассоваяСменаОткрытие_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаПоступленияТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_КорректировкаПоступленияТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОплатаОтПокупателяПлатежнойКартой_Отправк_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОплатаОтПокупателяПлатежнойКартой_Отправк_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОприходованиеТоваровВПоступление_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОприходованиеТоваровВПоступление_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОРП_ИзСтруктуры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОРП_ИзСтруктуры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетКомитенту_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтчетКомитенту_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетКомитентуОСписании_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтчетКомитентуОСписании_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПереоценкаТоваровВРознице_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПереоценкаТоваровВРознице_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПересортицаВОприходование_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПересортицаВОприходование_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПересортицаВСписание_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПересортицаВСписание_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПересчетТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПересчетТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПоступлениеИзДругойКассы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОПоступлениеИзДругойКассы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПоступлениеИзКассыККМ_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОПоступлениеИзКассыККМ_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочиеДоходы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОПрочиеДоходы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРозничнаяВыручка_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОРозничнаяВыручка_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПрименениеЦенНоменклатуры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПрименениеЦенНоменклатуры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОВыдачаВДругуюКассу_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОВыдачаВДругуюКассу_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОВыдачаВКассуККМ_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОВыдачаВКассуККМ_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОНаБанковскийСчет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОНаБанковскийСчет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочийРасход_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОПрочийРасход_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СборкаТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СборкаТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СписаниеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеТоваровВТребование_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СписаниеТоваровВТребование_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураВыданный_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СчетФактураВыданный_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураПолученный_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СчетФактураПолученный_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЧекККМ_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ЧекККМ_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПередачаМеждуОрганизациями_ПТУ_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_ПередачаМеждуОрганизациями_ПТУ_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПередачаМеждуОрганизациями_РТУ_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_ПередачаМеждуОрганизациями_РТУ_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчета_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_БанковскиеСчета_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БонусныеПрограммыЛояльности_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_БонусныеПрограммыЛояльности_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ВидыОплатЧекаККМВЭквТерминалы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ВидыОплатЧекаККМВЭквТерминалы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ВидыПодарочныхСертификатов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ВидыПодарочныхСертификатов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ВидыЦен_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ВидыЦен_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДисконтныеКарты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ДисконтныеКарты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Кассы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Кассы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КассыККМ_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_КассыККМ_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_НоменклатураКартинки_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_НоменклатураКартинки_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ПозицияПрайсЛиста_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ПозицияПрайсЛиста_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ПравилаЦенообразованияВТипыЦен_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ПравилаЦенообразованияВТипыЦен_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СерийныеНомераПС_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СерийныеНомераПС_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СостояниеОплатыЗаказа_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СостояниеОплатыЗаказа_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СостояниеОтгрузкиЗаказа_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СостояниеОтгрузкиЗаказа_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СостоянияЭД_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СостоянияЭД_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ТипыЦен_ИзСтруктуры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ТипыЦен_ИзСтруктуры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Упаковки_ИзСтруктуры_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Упаковки_ИзСтруктуры_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ХарактеристикиНоменклатуры_ИзСтруктуры_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ХарактеристикиНоменклатуры_ИзСтруктуры_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ШтрихкодыУпаковокТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ШтрихкодыУпаковокТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ЭквайринговыеТерминалы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ЭквайринговыеТерминалы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ВидыНоменклатуры_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ВидыНоменклатуры_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ВидыНоменклатуры_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ВидыНоменклатуры_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ВидыНоменклатуры_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ВидыНоменклатуры_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДополнительныеРеквизиты_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ДополнительныеРеквизиты_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СерииНоменклатуры_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СерииНоменклатуры_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Упаковки_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Упаковки_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Упаковки_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Упаковки_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ХарактеристикиНоменклатуры_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ХарактеристикиНоменклатуры_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ХарактеристикиНоменклатуры_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ХарактеристикиНоменклатуры_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ХарактеристикиНоменклатуры_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ХарактеристикиНоменклатуры_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВводОстатковПрослеживаемыхТоваров_Получ_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ВводОстатковПрослеживаемыхТоваров_Получ_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВводОстатковПрослеживаемыхТоваров_Получ_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ВводОстатковПрослеживаемыхТоваров_Получ_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВнесениеДСВКассуККМ_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ВнесениеДСВКассуККМ_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВыемкаДСИзКассыККМ_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ВыемкаДСИзКассыККМ_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказКлиента_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ЗаказКлиента_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказКлиента_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ЗаказКлиента_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказПоставщику_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ЗаказПоставщику_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказПоставщику_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ЗаказПоставщику_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаявкаНаРасходДСРасчетыСКонт_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ЗаявкаНаРасходДСРасчетыСКонт_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КассоваяСменаЗакрытие_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_КассоваяСменаЗакрытие_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КассоваяСменаЗакрытие_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_КассоваяСменаЗакрытие_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КассоваяСменаОткрытие_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_КассоваяСменаОткрытие_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КассоваяСменаОткрытие_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_КассоваяСменаОткрытие_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОприходованиеТоваров_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОприходованиеТоваров_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОприходованиеТоваров_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОприходованиеТоваров_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетКомитенту_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОтчетКомитенту_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетКомитенту_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОтчетКомитенту_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПеремещениеТоваров_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПеремещениеТоваров_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПеремещениеТоваров_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПеремещениеТоваров_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПересчетТоваров_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПересчетТоваров_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПересчетТоваров_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПересчетТоваров_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РеализацияТоваровУслуг_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РеализацияТоваровУслуг_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РеализацияТоваровУслуг_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РеализацияТоваровУслуг_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОНаБанковскийСчет_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОНаБанковскийСчет_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочийРасход_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОПрочийРасход_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СборкаТоваров_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СборкаТоваров_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СборкаТоваров_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СборкаТоваров_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеЗапасов_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СписаниеЗапасов_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеЗапасов_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СписаниеЗапасов_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_УведОВвозеПрослеживаемыхТоваров_Получ_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_УведОВвозеПрослеживаемыхТоваров_Получ_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_УведОВвозеПрослеживаемыхТоваров_Получ_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_УведОВвозеПрослеживаемыхТоваров_Получ_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЧекККМ_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ЧекККМ_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЧекККМ_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ЧекККМ_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчета_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_БанковскиеСчета_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ВидыАлкогольнойПродукции_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ВидыАлкогольнойПродукции_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДисконтныеКарты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ДисконтныеКарты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДисконтныеКарты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ДисконтныеКарты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КассыККМ_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_КассыККМ_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_НоменклатураПрисоединенныеФайлы_Получ_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_НоменклатураПрисоединенныеФайлы_Получ_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_НомераГТД_ПолучениеЭлемента_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_НомераГТД_ПолучениеЭлемента_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_НомерГТД_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_НомерГТД_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_НомерГТД_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_НомерГТД_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СерииНоменклатуры_ИзСтруктуры_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_СерииНоменклатуры_ИзСтруктуры_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Склады_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Склады_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СостоянияЭД_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_СостоянияЭД_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ТипыЦен_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ТипыЦен_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ТипыЦен_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ТипыЦен_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ШтрихкодыНоменклатуры_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ШтрихкодыНоменклатуры_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ШтрихкодыНоменклатуры_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ШтрихкодыНоменклатуры_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ШтрихкодыУпаковокТоваров_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ШтрихкодыУпаковокТоваров_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ШтрихкодыУпаковокТоваровИзСтр_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ШтрихкодыУпаковокТоваровИзСтр_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ШтрихкодыУпаковокТоваровИзСтр_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ШтрихкодыУпаковокТоваровИзСтр_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ЭквайринговыеТерминалы_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ЭквайринговыеТерминалы_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Документ_ВозвратПоставщику" Тогда 
		ОтложеннаяОбработка_Документ_ВозвратПоставщику(
			Параметры.Объект, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Документ_ЗаказКлиента" Тогда 
		ОтложеннаяОбработка_Документ_ЗаказКлиента(
			Параметры.Объект, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Документ_ЗаказПоставщику" Тогда 
		ОтложеннаяОбработка_Документ_ЗаказПоставщику(
			Параметры.Объект, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Документ_Оприходование" Тогда 
		ОтложеннаяОбработка_Документ_Оприходование(
			Параметры.Объект, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Документ_ОтчетКомитенту" Тогда 
		ОтложеннаяОбработка_Документ_ОтчетКомитенту(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Документ_Перемещение" Тогда 
		ОтложеннаяОбработка_Документ_Перемещение(
			Параметры.Объект, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Документ_ПКО" Тогда 
		ОтложеннаяОбработка_Документ_ПКО(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Документ_ПТУ" Тогда 
		ОтложеннаяОбработка_Документ_ПТУ(
			Параметры.Объект, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Документ_РКО" Тогда 
		ОтложеннаяОбработка_Документ_РКО(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Документ_СБДС" Тогда 
		ОтложеннаяОбработка_Документ_СБДС(
			Параметры.Объект, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Документ_Сборка" Тогда 
		ОтложеннаяОбработка_Документ_Сборка(
			Параметры.Объект, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Документ_Списание" Тогда 
		ОтложеннаяОбработка_Документ_Списание(
			Параметры.Объект, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Документ_Чек" Тогда 
		ОтложеннаяОбработка_Документ_Чек(
			Параметры.Объект, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Справочник_Номенклатура" Тогда 
		ОтложеннаяОбработка_Справочник_Номенклатура(
			Параметры.Объект, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Справочник_Организации" Тогда 
		ОтложеннаяОбработка_Справочник_Организации(
			Параметры.Объект);
	КонецЕсли;
КонецПроцедуры
// Процедура-обертка, выполняет запуск указанной в параметрах функции модуля менеджера обмена через формат.
//
// Параметры:
//  ИмяФункции - Строка - имя процедуры этого модуля.
//  Параметры - Структура - структура, содержащая передаваемые параметры.
Функция ВыполнитьФункциюМодуляМенеджера(ИмяФункции, Параметры) Экспорт
	Если ИмяФункции = "ПОД_Документ_ОстаткиБезналичныхДенежныхСредств_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиБезналичныхДенежныхСредств_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиНаличныхДенежныхСредств_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиНаличныхДенежныхСредств_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиРасчетыСПокупателямиАвансы_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиРасчетыСПокупателямиАвансы_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиРасчетыСПокупателямиДолги_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиРасчетыСПокупателямиДолги_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиРасчетыСПоставщикамиАвансы_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиРасчетыСПоставщикамиАвансы_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиРасчетыСПоставщикамиДолги_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиРасчетыСПоставщикамиДолги_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиСобственныхТМЦ_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиСобственныхТМЦ_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиТоваровПринятыхНаКомиссию_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиТоваровПринятыхНаКомиссию_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Справочник_КодыТоваровSKU_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Справочник_КодыТоваровSKU_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Справочник_ШтрихкодыНоменклатуры_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Справочник_ШтрихкодыНоменклатуры_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	КонецЕсли;
КонецФункции


#КонецОбласти
#Область СлужебныеПроцедурыИФункции
#Область Остатки
Процедура ДобавитьПОД_Документ_ОстаткиБезналичныхДенежныхСредств(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиБезналичныхДенежныхСредств";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ОстаткиБезналичныхДенежныхСредств_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиБезналичныхДенежныхСредств");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОстаткиНаличныхДенежныхСредств(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиНаличныхДенежныхСредств";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ОстаткиНаличныхДенежныхСредств_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиНаличныхДенежныхСредств");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОстаткиРасчетыСПокупателямиАвансы(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиРасчетыСПокупателямиАвансы";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ОстаткиРасчетыСПокупателямиАвансы_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиРасчетыСПокупателямиАвансы");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОстаткиРасчетыСПокупателямиДолги(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиРасчетыСПокупателямиДолги";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ОстаткиРасчетыСПокупателямиДолги_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиРасчетыСПокупателямиДолги");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОстаткиРасчетыСПоставщикамиАвансы(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиРасчетыСПоставщикамиАвансы";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ОстаткиРасчетыСПоставщикамиАвансы_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиРасчетыСПоставщикамиАвансы");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОстаткиРасчетыСПоставщикамиДолги(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиРасчетыСПоставщикамиДолги";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ОстаткиРасчетыСПоставщикамиДолги_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиРасчетыСПоставщикамиДолги");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОстаткиСобственныхТМЦ(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиСобственныхТМЦ";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ОстаткиСобственныхТМЦ_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиСобственныхТМЦ");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОстаткиТоваровПринятыхНаКомиссию(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиТоваровПринятыхНаКомиссию";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ОстаткиТоваровПринятыхНаКомиссию_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиТоваровПринятыхНаКомиссию");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОстаткиБезналичныхДенежныхСредств(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОстаткиБезналичныхДенежныхСредств";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОстаткиБезналичныхДенежныхСредств";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиБезналичныхДенежныхСредств_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Дата", 1);
	ДобавитьПКС(СвойстваШапки, "", "Организация", 1, "Справочник_Организации_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДенежныеСредства");
	ДобавитьПКС(СвойстваТЧ, "", "БанковскийСчет", 1,"Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Валюта", 1,"Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "", "ВидБанковскогоСчета", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРегл", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОстаткиНаличныхДенежныхСредств(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОстаткиНаличныхДенежныхСредств";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОстаткиНаличныхДенежныхСредств";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиНаличныхДенежныхСредств_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Дата", 1);
	ДобавитьПКС(СвойстваШапки, "", "Организация", 1, "Справочник_Организации_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДенежныеСредства");
	ДобавитьПКС(СвойстваТЧ, "", "Валюта", 1,"Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРегл", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОстаткиРасчетыСПокупателямиАвансы(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОстаткиРасчетыСПокупателямиАвансы";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОстаткиРасчетовСПокупателямиАвансы";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиРасчетыСПокупателямиАвансы_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Дата", 1);
	ДобавитьПКС(СвойстваШапки, "", "Организация", 1, "Справочник_Организации_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Расчеты");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "", "Контрагент", 1,"Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРегл", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОстаткиРасчетыСПокупателямиДолги(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОстаткиРасчетыСПокупателямиДолги";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОстаткиРасчетовСПокупателямиДолги";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиРасчетыСПокупателямиДолги_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Дата", 1);
	ДобавитьПКС(СвойстваШапки, "", "Организация", 1, "Справочник_Организации_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Расчеты");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "", "Контрагент", 1,"Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРегл", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОстаткиРасчетыСПоставщикамиАвансы(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОстаткиРасчетыСПоставщикамиАвансы";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОстаткиРасчетовСПоставщикамиАвансы";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиРасчетыСПоставщикамиАвансы_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Дата", 1);
	ДобавитьПКС(СвойстваШапки, "", "Организация", 1, "Справочник_Организации_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Расчеты");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "", "Контрагент", 1,"Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРегл", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОстаткиРасчетыСПоставщикамиДолги(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОстаткиРасчетыСПоставщикамиДолги";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОстаткиРасчетовСПоставщикамиДолги";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиРасчетыСПоставщикамиДолги_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Дата", 1);
	ДобавитьПКС(СвойстваШапки, "", "Организация", 1, "Справочник_Организации_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Расчеты");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "", "Контрагент", 1,"Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРегл", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОстаткиСобственныхТМЦ(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОстаткиСобственныхТМЦ";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОстаткиСобственныхТМЦ";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиСобственныхТМЦ_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Дата");
	ДобавитьПКС(СвойстваШапки, "", "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Склад", , "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ТМЦ");
	ДобавитьПКС(СвойстваТЧ, "", "ВидЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1,"Справочник_НомераГТД_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаБезНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОстаткиТоваровПринятыхНаКомиссию(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОстаткиТоваровПринятыхНаКомиссию";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОстаткиТоваровПринятыхНаКомиссию";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиТоваровПринятыхНаКомиссию_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Дата", 1);
	ДобавитьПКС(СвойстваШапки, "", "Договор", 1);
	ДобавитьПКС(СвойстваШапки, "", "Контрагент", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Организация", 1, "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Склад", 1, "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаБезНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");

КонецПроцедуры


#КонецОбласти
#Область Отправка
Процедура ДобавитьПОД_Документ_ВозвратТоваровОтПокупателя_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВозвратТоваровОтПокупателя_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВозвратТоваровОтПокупателя;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровОтПокупателя_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВозвратТоваровПоставщику_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВозвратТоваровПоставщику;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровПоставщику_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ЗаказПокупателя_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ЗаказПокупателя_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ЗаказПокупателя;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ЗаказПокупателя_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаказПокупателя_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ЗаказПоставщику_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ЗаказПоставщику_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ЗаказПоставщику;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ЗаказПоставщику_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаказПоставщику_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ИнвентаризационнаяОпись_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ИнвентаризационнаяОпись_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПриказНаПроведениеИнвентаризацииТоваров;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ИнвентаризационнаяОпись_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ИнвентаризационнаяОпись_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_КассоваяСмена_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_КассоваяСмена_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.КассоваяСмена;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_КассоваяСмена_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КассоваяСменаЗакрытие_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КассоваяСменаОткрытие_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОплатаОтПокупателяПлатежнойКартой_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОплатаОтПокупателяПлатежнойКартой_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОплатаОтПокупателяПлатежнойКартой;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОплатаОтПокупателяПлатежнойКартой_Отправк");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОприходованиеТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОприходованиеТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОприходованиеТоваров;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ОприходованиеТоваров_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОприходованиеТоваров_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОприходованиеТоваровВПоступление_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОтчетКомитенту_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетКомитенту_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОтчетКомитентуОПродажах;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетКомитенту_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОтчетКомитентуОСписании_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетКомитентуОСписании_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОтчетКомитентуОСписании;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетКомитентуОСписании_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОтчетОРозничныхПродажах_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетОРозничныхПродажах_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОтчетОРозничныхПродажах;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратПодарочныхСертификатов_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОРП_ИзСтруктуры_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетОРозничныхПродажах_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЧекККМ_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПередачаТоваровМеждуОрганизациями_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПередачаТоваровМеждуОрганизациями_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПередачаТоваровМеждуОрганизациями;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПередачаТоваровМеждуОрганизациями_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПередачаМеждуОрганизациями_ПТУ_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПередачаМеждуОрганизациями_РТУ_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПеремещениеТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПеремещениеТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПеремещениеТоваров;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПеремещениеТоваров_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПеремещениеТоваров_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПересортицаТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПересортицаТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПересортицаТоваров;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПересортицаТоваров_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПересортицаВОприходование_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПересортицаВСписание_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПересчетТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПересчетТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПересчетТоваров;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПересчетТоваров_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПересчетТоваров_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПоступлениеТоваровУслуг_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПоступлениеТоваровУслуг_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПоступлениеТоваров;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПоступлениеТоваровУслуг_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПриходныйКассовыйОрдер_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПриходныйКассовыйОрдер_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПриходныйКассовыйОрдер_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПолучениеНаличныхВБанке_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПоступлениеИзДругойКассы_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПоступлениеИзКассыККМ_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПрочиеДоходы_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРасчетыСКонтрагентами_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРозничнаяВыручка_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_РасходныйКассовыйОрдер_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РасходныйКассовыйОрдер_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_РасходныйКассовыйОрдер_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОВыдачаВДругуюКассу_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОВыдачаВКассуККМ_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОНаБанковскийСчет_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОПрочийРасход_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОРасчетыСКонтрагентами_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_РеализацияТоваровУслуг_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РеализацияТоваровУслуг_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.РеализацияТоваров;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_РеализацияТоваровУслуг_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РеализацияТоваровУслуг_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_СборкаТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СборкаТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СборкаТоваров;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СборкаТоваров_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_СписаниеТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СписаниеТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СписаниеТоваров;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_СписаниеТоваров_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеТоваров_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеТоваровВТребование_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_СчетФактураВыданный_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СчетФактураВыданный_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СчетФактураВыданный;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_СчетФактураВыданный_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетФактураВыданный_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_СчетФактураПолученный_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СчетФактураПолученный_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СчетФактураПолученный;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_СчетФактураПолученный_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КорректировкаПоступленияТоваров_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетФактураПолученный_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_УстановкаЦенНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.УстановкаЦенНоменклатуры;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПереоценкаТоваровВРознице_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_УстановкаЦенНоменклатуры_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_ЕдиницыИзмерения_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ЕдиницыИзмерения_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.БазовыеЕдиницыИзмерения;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЕдиницыИзмерения");
КонецПроцедуры

Процедура ДобавитьПОД_НастройкиЧастичногоВыбытияТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "НастройкиЧастичногоВыбытияТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.НастройкиЧастичногоВыбытияТоваровИСМП;
	ПравилоОбработки.ПриОбработке            = "ПОД_НастройкиЧастичногоВыбытияТоваров_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
КонецПроцедуры

Процедура ДобавитьПОД_Номенклатура_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Номенклатура_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Номенклатура;
	ПравилоОбработки.ПриОбработке            = "ПОД_Номенклатура_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ВидыПодарочныхСертификатов_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Номенклатура_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатураГруппа");
КонецПроцедуры

Процедура ДобавитьПОД_ОписаниеНоменклатурыИС_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ОписаниеНоменклатурыИС_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.ОписаниеНоменклатурыИС;
	ПравилоОбработки.ПриОбработке            = "ПОД_ОписаниеНоменклатурыИС_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Банки_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Банки_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.КлассификаторБанков;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Банки_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Банки");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_БанковскиеСчета_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_БанковскиеСчета_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.БанковскиеСчета;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БанковскиеСчета_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_БонусныеПрограммыЛояльности_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_БонусныеПрограммыЛояльности_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.БонусныеПрограммыЛояльности;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БонусныеПрограммыЛояльности_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ВидыНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ВидыНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ВидыНоменклатуры;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ВидыНоменклатуры_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ВидыНоменклатуры");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ВидыОплатЧекаККМ_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ВидыОплатЧекаККМ_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ВидыОплатЧекаККМ;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ВидыОплатЧекаККМ_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ВидыОплатЧекаККМВЭквТерминалы_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ВидыЦен_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ВидыЦен_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ВидыЦен;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ВидыЦен_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ДисконтныеКарты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ДисконтныеКарты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ИнформационныеКарты;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ДисконтныеКарты_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДисконтныеКарты_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Кассы_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Кассы_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Кассы;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Кассы_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Кассы_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_КассыККМ_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_КассыККМ_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.КассыККМ;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_КассыККМ_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КассыККМ_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_КлассификаторТНВЭД_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_КлассификаторТНВЭД_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.КлассификаторТНВЭД;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_КлассификаторТНВЭД_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КлассификаторТНВЭД_ЭлементСправочника");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_КодыТоваровSKU_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_КодыТоваровSKU_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.КодыТоваровSKU;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Справочник_КодыТоваровSKU_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Контрагенты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Контрагенты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Контрагенты;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Контрагенты_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Контрагенты_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КонтрагентыГруппа");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Магазины_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Магазины_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Магазины;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Склады_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_НоменклатураКартинки_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_НоменклатураКартинки_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.НоменклатураПрисоединенныеФайлы;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_НоменклатураКартинки_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатураКартинки_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_НомераГТД_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_НомераГТД_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.НомераГТД;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_НомераГТД_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НомераГТД_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Организации_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Организации_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Организации;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Организации_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ПозицияПрайсЛиста_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ПозицияПрайсЛиста_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ПозицияПрайсЛиста_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Пользователи_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Пользователи_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Пользователи;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Пользователи_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ПравилаЦенообразованияВТипыЦен_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ПравилаЦенообразованияВТипыЦен_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ПравилаЦенообразования;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ПравилаЦенообразованияВТипыЦен_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ПрайсЛист_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ПрайсЛист_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ПрайсЛист_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СерииНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СерииНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СерииНоменклатуры;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_СерииНоменклатуры_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СерииНоменклатуры");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СерийныеНомераПС_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СерийныеНомераПС_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СерийныеНомера;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_СерийныеНомераПС_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СерийныеНомераПС_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Склады_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Склады_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Склады;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Склады_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СостояниеОплатыЗаказа_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СостояниеОплатыЗаказа_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.СостояниеОплатыЗаказаПокупателя;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_СостояниеОплатыЗаказа_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СостояниеОплатыЗаказа_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СостояниеОтгрузкиЗаказа_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СостояниеОтгрузкиЗаказа_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.СостояниеДоставкиЗаказаПокупателя;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_СостояниеОтгрузкиЗаказа_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СостояниеОтгрузкиЗаказа_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СостоянияЭД_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СостоянияЭД_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.СостоянияПоОбъектамУчетаЭДО;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_СостоянияЭД_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СостоянияЭД_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СтатьиДДС_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтатьиДДС_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СтатьиДвиженияДенежныхСредств;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("СтатьиДДС");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СтраныМира_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтраныМира_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СтраныМира;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтраныМира");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Упаковки_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Упаковки_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.УпаковкиНоменклатуры;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Упаковки_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Упаковки");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Упаковки_ИзСтруктуры");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ФизическиеЛица_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ФизическиеЛица_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ФизическиеЛица;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛица_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛицаГруппа");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ХарактеристикиНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ХарактеристикиНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ХарактеристикиНоменклатуры;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ХарактеристикиНоменклатуры_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ХарактеристикиНоменклатуры");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ХарактеристикиНоменклатуры_ИзСтруктуры");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ШтрихкодыНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ШтрихкодыНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.Штрихкоды;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Справочник_ШтрихкодыНоменклатуры_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ШтрихкодыНоменклатуры_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ШтрихкодыУпаковокТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ШтрихкодыУпаковокТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ШтрихкодыУпаковокТоваров;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ШтрихкодыУпаковокТоваров_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ШтрихкодыУпаковокТоваров_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ЭквайринговыеТерминалы_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ЭквайринговыеТерминалы_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ЭквайринговыеТерминалы;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ЭквайринговыеТерминалы_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЭквайринговыеТерминалы_Отправка");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ВозвратПодарочныхСертификатов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВозвратПодарочныхСертификатов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ВозвратПодарочныхСертификатов";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВозвратПодарочныхСертификатов_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "", "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "", "Ответственный", 1, "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "ОтчетОРозничныхПродажах", 1, "Документ_ОтчетОРозничныхПродажах_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Сумма", 1);
	ДобавитьПКС(СвойстваШапки, "", "Дата", 1);
	ДобавитьПКС(СвойстваШапки, "", "Организация", 1, "Справочник_Организации_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ОплатаПлатежнымиКартами");
	ДобавитьПКС(СвойстваТЧ, "", "ВидКарты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерКарты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаОплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Эквайрер", 1,"Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ЭквайринговыйТерминал", 1,"Справочник_ЭквайринговыеТерминалы_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПодарочныеСертификаты");
	ДобавитьПКС(СвойстваТЧ, "", "ВидПодарочногоСертификата", 1,"Справочник_ВидыПодарочныхСертификатов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "МагнитныйКод", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СерийныйНомер", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Штрихкод", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ВозвратТоваровОтПокупателя_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВозвратТоваровОтПокупателя_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВозвратТоваровОтПокупателя;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ВозвратТоваровОтПокупателя";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                      "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Договор", 1, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                      "ДокументРеализации", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Налогообложение", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Магазин",               "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",         "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПредъявленСчетФактура", "ПокупателемВыставляетсяСчетФактураНаВозврат");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",       "СуммаВключаетНДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "АкцизныеМарки");
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерАкцизнойМарки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "ТипАкцизнойМарки", 1,"ВидыПродукцииИС");
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ВозвратПодДеятельность", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмеренияПрослеживаемости", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Себестоимость", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВозвратТоваровПоставщику_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВозвратТоваровПоставщику;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ВозвратТоваровПоставщику";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                "ВалютаВзаиморасчетов", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                "Договор", 1, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                "Налогообложение", 1);
	ДобавитьПКС(СвойстваШапки, "",                "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",      "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Магазин",         "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС", "СуммаВключаетНДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "АкцизныеМарки");
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерАкцизнойМарки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "ТипАкцизнойМарки", 1,"ВидыПродукцииИС");
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмеренияПрослеживаемости", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ЗаказПокупателя_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ЗаказПокупателя_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ЗаказПокупателя;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЗаказКлиента";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЗаказПокупателя_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                          "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                          "ВалютаВзаиморасчетов", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                          "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "АдресДоставки",             "АдресДоставки");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетОрганизации", "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ЖелаемаяДатаПродажи",       "ОжидаемаяДатаПоступления");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Магазин",                   "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",             "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",           "СуммаВключаетНДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ЗаказПоставщику_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ЗаказПоставщику_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ЗаказПоставщику;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЗаказПоставщику";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЗаказПоставщику_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                "ВалютаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаПоступления", "ОжидаемаяДатаПоступления");
	ДобавитьПКС(СвойстваШапки, "Контрагент",      "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Магазин",         "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС", "СуммаВключаетНДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ИнвентаризационнаяОпись_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ИнвентаризационнаяОпись_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПриказНаПроведениеИнвентаризацииТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ИнвентаризацияТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ИнвентаризационнаяОпись_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаНачала",    "ДатаНачалаИнвентаризации");
	ДобавитьПКС(СвойстваШапки, "ДатаОкончания", "ДатаОкончанияИнвентаризации");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Магазин",       "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковокУчет", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУчет", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаУчет", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаВРознице", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаЗаУпаковку", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_КассоваяСменаЗакрытие_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_КассоваяСменаЗакрытие_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.КассоваяСмена;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЗакрытиеКассовойСмены";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_КассоваяСменаЗакрытие_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                       "КассаККМ", 1);
	ДобавитьПКС(СвойстваШапки, "",                       "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                       "Кассир", 1);
	ДобавитьПКС(СвойстваШапки, "",                       "Сумма", 1);
	ДобавитьПКС(СвойстваШапки, "КассаККМ",               "КассаККМ", , "Справочник_КассыККМ_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                  "НомерВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Номер",                  "НомерКассовойСмены");
	ДобавитьПКС(СвойстваШапки, "ОкончаниеКассовойСмены", "Дата");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_КассоваяСменаОткрытие_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_КассоваяСменаОткрытие_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.КассоваяСмена;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОткрытиеКассовойСмены";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_КассоваяСменаОткрытие_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "КассаККМ",            "КассаККМ", 1);
	ДобавитьПКС(СвойстваШапки, "НачалоКассовойСмены", "Дата", 1);
	ДобавитьПКС(СвойстваШапки, "Номер",               "НомерВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Номер",               "НомерКассовойСмены");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_КорректировкаПоступленияТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_КорректировкаПоступленияТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СчетФактураПолученный;
	ПравилоКонвертации.ОбъектФормата     = "Документ.КорректировкаПоступленияТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_КорректировкаПоступленияТоваров_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                "ВосстановитьНДС", 1);
	ДобавитьПКС(СвойстваШапки, "",                "Договор", 1, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                "ДокументПоступления", 1);
	ДобавитьПКС(СвойстваШапки, "",                "ИсправляемыйДокументПоступления", 1);
	ДобавитьПКС(СвойстваШапки, "",                "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",                "Налогообложение", 1);
	ДобавитьПКС(СвойстваШапки, "",                "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "",                "ОтражатьВУчете", 1);
	ДобавитьПКС(СвойстваШапки, "",                "Сумма", 1);
	ДобавитьПКС(СвойстваШапки, "",                "СуммаВключаетНДС", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаИсправления", "ДатаИсправления");
	ДобавитьПКС(СвойстваШапки, "Контрагент",      "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмеренияПрослеживаемости", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДСДоИзменения", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаДоКорректировки", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОплатаОтПокупателяПлатежнойКартой_Отправк(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОплатаОтПокупателяПлатежнойКартой_Отправк";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОплатаОтПокупателяПлатежнойКартой;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОперацияПоПлатежнойКарте";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОплатаОтПокупателяПлатежнойКартой_Отправк_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                      "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерПлатежнойКарты",   "НомерКарты");
	ДобавитьПКС(СвойстваШапки, "НомерЧекаККМ",          "НомерЧекаККМ");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",         "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация", "ВидОперации", , "ХозяйственныеОперацииВВидыОперацийПоПлатежнойКарте");
	ДобавитьПКС(СвойстваШапки, "Эквайрер",              "Эквайрер", , "Справочник_Контрагенты_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "", "Заказ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОприходованиеТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОприходованиеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОприходованиеТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОприходованиеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",        "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий", "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Магазин",     "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",       "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация", "Организация", , "Справочник_Организации_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмеренияПрослеживаемости", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОприходованиеТоваровВПоступление_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОприходованиеТоваровВПоступление_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОприходованиеТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОприходованиеТоваровВПоступление_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",            "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",            "ВалютаВзаиморасчетов", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",            "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",            "Договор", 1, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "Дата",        "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий", "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",  "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Магазин",     "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",       "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация", "Организация", , "Справочник_Организации_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмеренияПрослеживаемости", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОРП_ИзСтруктуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОРП_ИзСтруктуры_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОтчетОРозничныхПродажах";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОРП_ИзСтруктуры_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "", "КассаККМ", 1, "Справочник_КассыККМ_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "", "Ответственный", 1, "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Склад", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Сумма", 1);
	ДобавитьПКС(СвойстваШапки, "", "СуммаВключаетНДС", 1);
	ДобавитьПКС(СвойстваШапки, "", "ТипЦен", 1, "Справочник_ВидыЦен_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "УчетВыручкиВОперационнойКассе", 1);
	ДобавитьПКС(СвойстваШапки, "", "Дата", 1);
	ДобавитьПКС(СвойстваШапки, "", "КассоваяСмена", 1, "Документ_КассоваяСменаОткрытие_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "", "Организация", 1, "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Патент", 1, "Справочник_Патенты_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "", "Налогообложение", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ОплатаБанковскимиКредитами");
	ДобавитьПКС(СвойстваТЧ, "", "Банк", 1,"Справочник_Банки");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаОплаты", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ОплатаПлатежнымиКартами");
	ДобавитьПКС(СвойстваТЧ, "", "ВидКарты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерКарты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаОплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Эквайрер", 1,"Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ЭквайринговыйТерминал", 1,"Справочник_ЭквайринговыеТерминалы_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ОплатаСертификатами");
	ДобавитьПКС(СвойстваТЧ, "", "МагнитныйКод", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СерийныйНомер", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Штрихкод", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПодарочныеСертификаты");
	ДобавитьПКС(СвойстваТЧ, "", "ВидПодарочногоСертификата", 1,"Справочник_ВидыПодарочныхСертификатов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ДействителенДо", 1);
	ДобавитьПКС(СвойстваТЧ, "", "МагнитныйКод", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СерийныйНомер", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Штрихкод", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ТоварыВозвратПродажи");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаПродажи", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерЧекаККМПродажи", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ТоварыПродажа");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмеренияПрослеживаемости", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1,"Справочник_НомераГТД_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Поставщик", 1,"Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОтчетКомитенту_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОтчетКомитенту_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОтчетКомитентуОПродажах;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОтчетКомитенту";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтчетКомитенту_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                                         "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                                         "ВалютаВзаиморасчетов", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                                         "Договор", 1, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                                         "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                                         "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                               "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                            "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПроцентКомиссионногоВознаграждения",       "ПроцентКомиссионногоВознаграждения");
	ДобавитьПКС(СвойстваШапки, "СпособРасчетаКомиссионногоВознаграждения", "СпособРасчетаКомиссионногоВознаграждения", , "СпособыРасчетаКомиссионногоВознаграждения");
	ДобавитьПКС(СвойстваШапки, "СтавкаНДСВознаграждения",                  "СтавкаНДСВознаграждения", , "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаВознаграждения",                      "СуммаВознаграждения");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                           "Сумма");
	ДобавитьПКС(СвойстваШапки, "УслугаКомиссионногоВознаграждения",        "УслугаПоВознаграждению", , "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",                          "СуммаВключаетНДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаРеализации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВознаграждения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСВознаграждения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаПоступления", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаПоступления", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОтчетКомитентуОСписании_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОтчетКомитентуОСписании_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОтчетКомитентуОСписании;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОтчетКомитенту";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтчетКомитентуОСписании_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                "ВалютаВзаиморасчетов", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                "Договор", 1, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",      "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС", "СуммаВключаетНДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаПоступления", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаПоступления", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОтчетОРозничныхПродажах_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОтчетОРозничныхПродажах_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОтчетОРозничныхПродажах;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОтчетОРозничныхПродажах";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                "КассаККМ", 1, "Справочник_КассыККМ_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                "КассоваяСмена", 1, "Документ_КассоваяСменаОткрытие_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                "ТипЦен", 1, "Справочник_ВидыЦен_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                "Сумма", 1);
	ДобавитьПКС(СвойстваШапки, "",                "УчетВыручкиВОперационнойКассе", 1);
	ДобавитьПКС(СвойстваШапки, "",                "Налогообложение", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "КассаККМ",        "КассаККМ", , "Справочник_КассыККМ_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Магазин",         "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС", "СуммаВключаетНДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ОплатаБанковскимиКредитами");
	ДобавитьПКС(СвойстваТЧ, "", "Банк", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаОплаты", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ОплатаПлатежнымиКартами");
	ДобавитьПКС(СвойстваТЧ, "", "ВидКарты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерКарты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаОплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Эквайрер", 1,"Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ЭквайринговыйТерминал", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ОплатаСертификатами");
	ДобавитьПКС(СвойстваТЧ, "", "МагнитныйКод", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СерийныйНомер", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Штрихкод", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПодарочныеСертификаты");
	ДобавитьПКС(СвойстваТЧ, "", "ВидПодарочногоСертификата", 1,"Справочник_ВидыПодарочныхСертификатов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ДействителенДо", 1);
	ДобавитьПКС(СвойстваТЧ, "", "МагнитныйКод", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СерийныйНомер", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Штрихкод", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ТоварыВозвратПродажи");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаПродажи", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерЧекаККМПродажи", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ТоварыПродажа");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмеренияПрослеживаемости", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Поставщик", 1,"Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПеремещениеТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПеремещениеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПеремещениеТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПеремещениеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",               "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "МагазинОтправитель", "СкладОтправитель", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "МагазинПолучатель",  "СкладПолучатель", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",              "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",        "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",      "Ответственный", , "Справочник_Пользователи_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "АкцизныеМарки");
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерАкцизнойМарки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "ТипАкцизнойМарки", 1,"ВидыПродукцииИС");
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмеренияПрослеживаемости", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДСВРознице", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВРознице", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаВРознице", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПереоценкаТоваровВРознице_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПереоценкаТоваровВРознице_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПереоценкаТоваровВРознице";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПереоценкаТоваровВРознице_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Дата");
	ДобавитьПКС(СвойстваШапки, "", "Комментарий");
	ДобавитьПКС(СвойстваШапки, "", "Номер");
	ДобавитьПКС(СвойстваШапки, "", "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Склад", , "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДСВРознице", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаПереоценки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаВРознице", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаВРозницеСтарая", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПересортицаВОприходование_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПересортицаВОприходование_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПересортицаТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОприходованиеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПересортицаВОприходование_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",              "Сумма", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Магазин",       "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмеренияПрослеживаемости", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПересортицаВСписание_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПересортицаВСписание_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПересортицаТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СписаниеЗапасов";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПересортицаВСписание_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Магазин",       "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмеренияПрослеживаемости", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПересчетТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПересчетТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПересчетТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПересчетТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПересчетТоваров_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",              "НачалоПериодаИнвентаризации", 1);
	ДобавитьПКС(СвойстваШапки, "",              "ОкончаниеПериодаИнвентаризации", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Магазин",       "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковокФакт", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоФакт", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаФакт", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПКОПолучениеНаличныхВБанке_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОПолучениеНаличныхВБанке";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",               "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",               "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет", "БанковскийСчет", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВТомЧислеНДС",   "ВТомЧислеНДС");
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",    "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",      "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",  "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "Приложение",     "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",      "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента", "Сумма");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПКОПоступлениеИзДругойКассы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПКОПоступлениеИзДругойКассы_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОПоступлениеИзДругойКассы";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОПоступлениеИзДругойКассы_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",               "КассаОтправитель", 1, "Справочник_Кассы_Отправка");
	ДобавитьПКС(СвойстваШапки, "",               "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "Касса",          "КассаПолучатель", , "Справочник_Кассы_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",    "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",  "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента", "Сумма");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПКОПоступлениеИзКассыККМ_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПКОПоступлениеИзКассыККМ_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОПоступлениеИзКассыККМ";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОПоступлениеИзКассыККМ_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",               "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "ВТомЧислеНДС",   "ВТомЧислеНДС");
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "КассаККМ",       "КассаККМ", , "Справочник_КассыККМ_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",    "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",      "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",  "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента", "Сумма");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПКОПрочиеДоходы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПКОПрочиеДоходы_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОПрочиеДоходы";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОПрочиеДоходы_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",               "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "ВТомЧислеНДС",   "ВТомЧислеНДС");
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",    "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",      "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",  "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "Приложение",     "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",      "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента", "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПКОРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",               "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",               "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "ВТомЧислеНДС",   "ВТомЧислеНДС");
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",     "Контрагент", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",    "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",      "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",  "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "Приложение",     "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",      "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента", "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "", "Заказ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПКОРозничнаяВыручка_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПКОРозничнаяВыручка_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОРозничнаяВыручка";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОРозничнаяВыручка_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",               "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",               "ВыручкаНТТ", 1);
	ДобавитьПКС(СвойстваШапки, "",               "Склад", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",          "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерЧекаККМ",   "НомерЧекаККМ");
	ДобавитьПКС(СвойстваШапки, "Организация",    "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",      "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",  "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "Приложение",     "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",      "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента", "Сумма");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПоступлениеТоваровУслуг_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПоступлениеТоваровУслуг_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                          "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                          "ВалютаВзаиморасчетов", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                          "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "Договор", 1, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                          "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "Налогообложение", 1);
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента", "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетОрганизации", "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",    "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Магазин",                   "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",   "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",             "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",           "СуммаВключаетНДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "АкцизныеМарки");
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерАкцизнойМарки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "ТипАкцизнойМарки", 1,"ВидыПродукцииИС");
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Излишки");
	ДобавитьПКС(СвойстваТЧ, "", "ВариантОтражения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Недостачи");
	ДобавитьПКС(СвойстваТЧ, "", "ВариантОтражения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмеренияПрослеживаемости", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПрименениеЦенНоменклатуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПрименениеЦенНоменклатуры_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПрименениеЦенНоменклатуры;
	ПравилоКонвертации.ОбъектФормата     = "Документ.УстановкаЦенНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПрименениеЦенНоменклатуры_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",              "ТипЦен", 1, "Справочник_ПравилаЦенообразованияВТипыЦен_Отправка");
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_РеализацияТоваровУслуг_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РеализацияТоваровУслуг_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РеализацияТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РеализацияТоваровУслуг";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                          "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                          "ВалютаВзаиморасчетов", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                          "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "Договор", 1, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                          "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "АдресДоставки",             "АдресДоставки");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетОрганизации", "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоверенностьВыдана",        "ДоверенностьКемВыдана");
	ДобавитьПКС(СвойстваШапки, "ДоверенностьДата",          "ДоверенностьДата");
	ДобавитьПКС(СвойстваШапки, "ДоверенностьНомер",         "ДоверенностьНомер");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Магазин",                   "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",             "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",           "СуммаВключаетНДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмеренияПрослеживаемости", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_РКОВыдачаВДругуюКассу_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РКОВыдачаВДругуюКассу_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОВыдачаВДругуюКассу";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОВыдачаВДругуюКассу_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Касса",           "КассаОтправитель", , "Справочник_Кассы_Отправка");
	ДобавитьПКС(СвойстваШапки, "КассаПолучатель", "КассаПолучатель", , "Справочник_Кассы_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",       "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "Приложение",      "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_РКОВыдачаВКассуККМ_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РКОВыдачаВКассуККМ_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОВыдачаВКассуККМ";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОВыдачаВКассуККМ_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",               "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "КассаККМ",       "КассаККМ", , "Справочник_КассыККМ_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",    "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",      "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",  "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента", "Сумма");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_РКОНаБанковскийСчет_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РКОНаБанковскийСчет_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОНаБанковскийСчет";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОНаБанковскийСчет_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",               "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",               "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет", "БанковскийСчет", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "Выдать",         "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",    "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",      "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",  "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",    "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Приложение",     "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента", "Сумма");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_РКОПрочийРасход_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РКОПрочийРасход_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОПрочийРасход";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОПрочийРасход_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",               "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "Выдать",         "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",    "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",      "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",  "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",    "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Приложение",     "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента", "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_РКОРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РКОРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",               "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",               "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "Выдать",         "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",     "Контрагент", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",    "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",      "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",  "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",    "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Приложение",     "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента", "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Заказ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СпособПогашенияЗадолженности", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_СборкаТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СборкаТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СборкаТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СборкаТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СборкаТоваров_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                   "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваШапки, "",                   "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",        "ВидОперации", , "ВидыОперацийСборкаТоваров");
	ДобавитьПКС(СвойстваШапки, "Дата",               "Дата");
	ДобавитьПКС(СвойстваШапки, "Количество",         "Количество");
	ДобавитьПКС(СвойстваШапки, "КоличествоУпаковок", "КоличествоУпаковок");
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Магазин",            "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номенклатура",       "Номенклатура", , "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",              "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",        "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",      "Ответственный", , "Справочник_Пользователи_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДоляСтоимости", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмеренияПрослеживаемости", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_СписаниеТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СписаниеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СписаниеТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СписаниеЗапасов";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СписаниеТоваров_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",              "Основание", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Магазин",       "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмеренияПрослеживаемости", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_СписаниеТоваровВТребование_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СписаниеТоваровВТребование_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СписаниеТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПередачаМатериаловВПроизводство";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СписаниеТоваровВТребование_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Магазин",       "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмеренияПрослеживаемости", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_СчетФактураВыданный_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СчетФактураВыданный_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СчетФактураВыданный;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СчетФактураВыданный";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СчетФактураВыданный_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                     "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                     "ВидСчетаФактуры", 1);
	ДобавитьПКС(СвойстваШапки, "",                     "Выставлен", 1);
	ДобавитьПКС(СвойстваШапки, "",                     "Контрагент", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                     "СпособВыставления", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                 "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВыставления",      "ДатаВыставления");
	ДобавитьПКС(СвойстваШапки, "КодВидаОперации",      "КодВидаОперации");
	ДобавитьПКС(СвойстваШапки, "Номер",                "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерИсправления",     "НомерИсправления");
	ДобавитьПКС(СвойстваШапки, "Организация",          "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СчетФактураОснование", "ИсправляемыйСчетФактура", , "Документ_СчетФактураВыданный_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДокументыОснования");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументОснование", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПлатежноРасчетныеДокументы");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерДокумента", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_СчетФактураПолученный_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СчетФактураПолученный_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СчетФактураПолученный;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СчетФактураПолученный";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СчетФактураПолученный_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                     "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                     "СпособВыставления", 1);
	ДобавитьПКС(СвойстваШапки, "",                     "ВидСчетаФактуры", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                 "ДатаПолучения");
	ДобавитьПКС(СвойстваШапки, "ДатаИсправления",      "ДатаИсправления");
	ДобавитьПКС(СвойстваШапки, "ДатаСоставления",      "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "КодВидаОперации",      "КодВидаОперации");
	ДобавитьПКС(СвойстваШапки, "Контрагент",           "Контрагент", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",          "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СчетФактураОснование", "ИсправляемыйСчетФактура", , "Документ_СчетФактураПолученный_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДокументыОснования");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументОснование", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_УстановкаЦенНоменклатуры_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.УстановкаЦенНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Дата");
	ДобавитьПКС(СвойстваШапки, "", "Комментарий");
	ДобавитьПКС(СвойстваШапки, "", "Номер");
	ДобавитьПКС(СвойстваШапки, "", "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "ТипЦен", 1, "Справочник_ВидыЦен_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "SKU", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ЧекККМ_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ЧекККМ_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЧекККМ";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЧекККМ_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "НомерВПрограмме");
	ДобавитьПКС(СвойстваШапки, "", "Сумма");
	ДобавитьПКС(СвойстваШапки, "", "Дата", 1);
	ДобавитьПКС(СвойстваШапки, "", "КассаККМ", 1, "Справочник_КассыККМ_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "НомерКассовойСмены", 1);
	ДобавитьПКС(СвойстваШапки, "", "НомерЧекаФР", 1);
	ДобавитьПКС(СвойстваШапки, "", "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "", "Налогообложение", 1);
	ДобавитьПКС(СвойстваШапки, "", "Отменен", 1);
	ДобавитьПКС(СвойстваШапки, "", "ПризнакСпособаРасчета", 1, "ПризнакиСпособаРасчета");
	ДобавитьПКС(СвойстваШапки, "", "Основание", 1, "Документ_ЧекККМ_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ОплатаПлатежнымиКартами");
	ДобавитьПКС(СвойстваТЧ, "", "ВидКарты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерКарты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаОплаты", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ОплатаСертификатами");
	ДобавитьПКС(СвойстваТЧ, "", "ВидПодарочногоСертификата", 1,"Справочник_ВидыПодарочныхСертификатов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СерийныйНомер", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ОплатыККМ");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипОплаты", 1,"Перечисление_ТипыОплатыККТ");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПодарочныеСертификаты");
	ДобавитьПКС(СвойстваТЧ, "", "ВидПодарочногоСертификата", 1,"Справочник_ВидыПодарочныхСертификатов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СерийныйНомер", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ТоварыВозвратПродажи");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ТоварыПродажа");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ДобавитьПКО_ПередачаМеждуОрганизациями_ПТУ_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "ПередачаМеждуОрганизациями_ПТУ_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПередачаТоваровМеждуОрганизациями;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_ПередачаМеждуОрганизациями_ПТУ_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                      "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                      "ВалютаВзаиморасчетов", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Договор", 1, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                      "Контрагент", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "Налогообложение", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "НомерВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Магазин",               "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "ОрганизацияПолучатель", "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",       "СуммаВключаетНДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ДобавитьПКО_ПередачаМеждуОрганизациями_РТУ_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "ПередачаМеждуОрганизациями_РТУ_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПередачаТоваровМеждуОрганизациями;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РеализацияТоваровУслуг";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_ПередачаМеждуОрганизациями_РТУ_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                   "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                   "ВалютаВзаиморасчетов", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                   "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                   "Договор", 1, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                   "Контрагент", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                   "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                   "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                   "Налогообложение", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",               "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоверенностьВыдана", "ДоверенностьКемВыдана");
	ДобавитьПКС(СвойстваШапки, "ДоверенностьДата",   "ДоверенностьДата");
	ДобавитьПКС(СвойстваШапки, "ДоверенностьЛицо",   "ДоверенностьКомуВыдана");
	ДобавитьПКС(СвойстваШапки, "ДоверенностьНомер",  "ДоверенностьНомер");
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Магазин",            "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",              "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",        "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",     "Сумма");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",    "СуммаВключаетНДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ДобавитьПКО_ПКО_АТТ_ОтчетОРозничныхПродажах(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "ПКО_АТТ_ОтчетОРозничныхПродажах";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОтчетОРозничныхПродажах;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОРозничнаяВыручка";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",              "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",              "ВыручкаНТТ", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Сумма", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Магазин",       "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи_Отправка");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_БанковскиеСчета_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_БанковскиеСчета_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.БанковскиеСчета;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.БанковскиеСчета";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_БанковскиеСчета_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",             "ВалютаДенежныхСредств", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",             "Банк", 1, "Справочник_Банки");
	ДобавитьПКС(СвойстваШапки, "",             "БанкДляРасчетов", 1, "Справочник_Банки");
	ДобавитьПКС(СвойстваШапки, "Владелец",     "Владелец", 1);
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "НомерСчета",   "НомерСчета");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_БонусныеПрограммыЛояльности_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_БонусныеПрограммыЛояльности_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.БонусныеПрограммыЛояльности;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ПрограммыЛояльности";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_БонусныеПрограммыЛояльности_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                                        "ВалютаКонвертацииБонусов", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "ЗапретНачисленияБалловПриОплатеБонусами", "НеНачислятьБаллыПриОплатеБонусами");
	ДобавитьПКС(СвойстваШапки, "КурсКонвертацииБонусовВВалюту",           "КурсКонвертацииБонусовВВалюту");
	ДобавитьПКС(СвойстваШапки, "МаксимальныйПроцентОплатыБонусами",       "МаксимальныйПроцентОплатыБонусами");
	ДобавитьПКС(СвойстваШапки, "Наименование",                            "Наименование");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Валюта_ИзСтруктуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Валюта_ИзСтруктуры";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Валюты";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Код", 1);
	ДобавитьПКС(СвойстваШапки, "", "Наименование", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ВидыАлкогольнойПродукции_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ВидыАлкогольнойПродукции_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ВидыАлкогольнойПродукции;
	ПравилоКонвертации.ОбъектФормата     = "КлючевыеСвойстваВидыАлкогольнойПродукции";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ВидЛицензии", 1, "ВидыЛицензийАлкогольнойПродукции");
	ДобавитьПКС(СвойстваШапки, "", "Код", 1);
	ДобавитьПКС(СвойстваШапки, "", "Наименование", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ВидыОплатЧекаККМВЭквТерминалы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ВидыОплатЧекаККМВЭквТерминалы_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ВидыОплатЧекаККМ;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ЭквайринговыеТерминалы";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ВидыОплатЧекаККМВЭквТерминалы_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "Номер");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ВидыПодарочныхСертификатов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ВидыПодарочныхСертификатов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ВидыПодарочныхСертификатов";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ВидыПодарочныхСертификатов_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",             "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",             "КоличествоПериодовДействия", 1);
	ДобавитьПКС(СвойстваШапки, "",             "РазрешитьЧастичнуюОплату", 1);
	ДобавитьПКС(СвойстваШапки, "",             "ТипПериодаДействия", 1);
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Номинал",      "Номинал");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ВидыЦен_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ВидыЦен_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ВидыЦен;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ТипыЦен";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ВидыЦен_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                         "ВалютаЦены", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "Идентификатор",            "Идентификатор");
	ДобавитьПКС(СвойстваШапки, "Наименование",             "Наименование", 1);
	ДобавитьПКС(СвойстваШапки, "ОкруглятьВБольшуюСторону", "ОкруглятьВБольшуюСторону");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",          "ЦенаВключаетНДС");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ДисконтныеКарты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ДисконтныеКарты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ИнформационныеКарты;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ДисконтныеКарты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ДисконтныеКарты_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БонуснаяПрограммаЛояльности", "ПрограммаЛояльности", 1, "Справочник_БонусныеПрограммыЛояльности_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВладелецКарты",               "ВладелецКарты", 1);
	ДобавитьПКС(СвойстваШапки, "КодКарты",                    "НомерКарты", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ДоговорыКонтрагентов_ИзСтруктуры";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Договоры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ВалютаВзаиморасчетов", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "", "ВидДоговора", 1);
	ДобавитьПКС(СвойстваШапки, "", "Дата", 1);
	ДобавитьПКС(СвойстваШапки, "", "Контрагент", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Наименование", 1);
	ДобавитьПКС(СвойстваШапки, "", "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "", "Организация", 1, "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "РасчетыВУсловныхЕдиницах", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Кассы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Кассы_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Кассы;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Кассы";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Кассы_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",             "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "Владелец",     "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_КассыККМ_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_КассыККМ_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.КассыККМ;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.КассыККМ";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_КассыККМ_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                     "СистемаНалогообложения", 1);
	ДобавитьПКС(СвойстваШапки, "Владелец",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Магазин",              "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Наименование",         "Наименование");
	ДобавитьПКС(СвойстваШапки, "РегистрационныйНомер", "РегистрационныйНомер");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Контрагенты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Контрагенты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Контрагенты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                   "ФизическоеЛицо", 1, "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "ИНН",                "ИНН");
	ДобавитьПКС(СвойстваШапки, "КодПоОКПО",          "ОКПО");
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "ДополнительнаяИнформация");
	ДобавитьПКС(СвойстваШапки, "КПП",                "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное", "НаименованиеПолное", 1);
	ДобавитьПКС(СвойстваШапки, "Родитель",           "Группа", , "Справочник_КонтрагентыГруппа");
	ДобавитьПКС(СвойстваШапки, "ЮрФизЛицо",          "ЮридическоеФизическоеЛицо", , "ЮрФизЛицо_Организации_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "КонтактнаяИнформация");
	ДобавитьПКС(СвойстваТЧ, "", "ВидКонтактнойИнформации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЗначенияПолей", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеКонтактнойИнформации", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Номенклатура_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Номенклатура_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Номенклатура";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                                          "ВидАлкогольнойПродукции", 1, "Справочник_ВидыАлкогольнойПродукции_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                                          "ВидНоменклатуры", 1, "Справочник_ВидыНоменклатуры");
	ДобавитьПКС(СвойстваШапки, "",                                          "ВидПродукцииИС", 1, "ВидыПродукцииИС");
	ДобавитьПКС(СвойстваШапки, "",                                          "ИспользоватьСерии", 1);
	ДобавитьПКС(СвойстваШапки, "",                                          "КодТНВЭД", 1);
	ДобавитьПКС(СвойстваШапки, "",                                          "Маркируемый", 1);
	ДобавитьПКС(СвойстваШапки, "",                                          "ПодакцизныйТовар", 1);
	ДобавитьПКС(СвойстваШапки, "",                                          "ПризнакПредметаРасчета", 1, "ПризнакиПредметаРасчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                                          "СистемаНалогообложения", 1);
	ДобавитьПКС(СвойстваШапки, "",                                          "ОсновнаяКартинка", 1);
	ДобавитьПКС(СвойстваШапки, "",                                          "ОрганизацияПродажи", 1, "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "АлкогольнаяПродукция",                      "АлкогольнаяПродукция");
	ДобавитьПКС(СвойстваШапки, "Артикул",                                   "Артикул");
	ДобавитьПКС(СвойстваШапки, "Весовой",                                   "Весовой");
	ДобавитьПКС(СвойстваШапки, "ЕдиницаИзмерения",                          "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваШапки, "ИмпортнаяАлкогольнаяПродукция",             "ИмпортнаяАлкогольнаяПродукция");
	ДобавитьПКС(СвойстваШапки, "Код",                                       "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "КодВидаНоменклатурнойКлассификации",        "КодВидаНоменклатурнойКлассификации");
	ДобавитьПКС(СвойстваШапки, "Крепость",                                  "Крепость");
	ДобавитьПКС(СвойстваШапки, "Наименование",                              "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",                        "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "ОбъемДАЛ",                                  "ОбъемДАЛ");
	ДобавитьПКС(СвойстваШапки, "Описание",                                  "Описание");
	ДобавитьПКС(СвойстваШапки, "ПроизводительИмпортерАлкогольнойПродукции", "ПроизводительИмпортер", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Родитель",                                  "Группа", , "Справочник_НоменклатураГруппа");
	ДобавитьПКС(СвойстваШапки, "СтавкаНДС",                                 "СтавкаНДС", , "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваШапки, "ТипНоменклатуры",                           "ТипНоменклатуры", , "ТипыНоменклатуры_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_НоменклатураКартинки_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_НоменклатураКартинки_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.НоменклатураПрисоединенныеФайлы;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Файлы";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_НоменклатураКартинки_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",              "ХранимыйФайл", 1);
	ДобавитьПКС(СвойстваШапки, "ВладелецФайла", "ВладелецФайла", 1);
	ДобавитьПКС(СвойстваШапки, "Наименование",  "Имя");
	ДобавитьПКС(СвойстваШапки, "Описание",      "Описание");
	ДобавитьПКС(СвойстваШапки, "Расширение",    "Расширение");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_НомераГТД_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_НомераГТД_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.НомераГТД;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.НомерГТД";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                    "ВвезенНеЧерезРФ", 1);
	ДобавитьПКС(СвойстваШапки, "",                    "ЯвляетсяРНПТ", 1);
	ДобавитьПКС(СвойстваШапки, "Код",                 "НомерГТД");
	ДобавитьПКС(СвойстваШапки, "СтранаВвозаНеРФ",     "СтранаВвозаНеРФ");
	ДобавитьПКС(СвойстваШапки, "СтранаПроисхождения", "СтранаПроисхождения", , "Справочник_СтраныМира");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Организации_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Организации_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Организации";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ИНН",                     "ИНН");
	ДобавитьПКС(СвойстваШапки, "КодПоОКАТО",              "ОКАТО");
	ДобавитьПКС(СвойстваШапки, "КодПоОКПО",               "ОКПО");
	ДобавитьПКС(СвойстваШапки, "КПП",                     "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",            "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",      "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "НаименованиеСокращенное", "НаименованиеСокращенное");
	ДобавитьПКС(СвойстваШапки, "ОГРН",                    "ОГРН");
	ДобавитьПКС(СвойстваШапки, "Префикс",                 "Префикс");
	ДобавитьПКС(СвойстваШапки, "СвидетельствоДатаВыдачи", "СвидетельствоДатаВыдачи");
	ДобавитьПКС(СвойстваШапки, "СвидетельствоСерияНомер", "СвидетельствоСерияНомер");
	ДобавитьПКС(СвойстваШапки, "ЮрФизЛицо",               "ЮридическоеФизическоеЛицо", , "ЮрФизЛицо_Организации_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "КонтактнаяИнформация");
	ДобавитьПКС(СвойстваТЧ, "", "ВидКонтактнойИнформации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЗначенияПолей", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеКонтактнойИнформации", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Патенты_ИзСтруктуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Патенты_ИзСтруктуры";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Патенты";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "КодНалоговогоОргана", 1);
	ДобавитьПКС(СвойстваШапки, "", "НомерПатента", 1);
	ДобавитьПКС(СвойстваШапки, "", "Организация", 1, "Справочник_Организации_Отправка");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ПозицияПрайсЛиста_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ПозицияПрайсЛиста_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ПозицияПрайсЛиста";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ПозицияПрайсЛиста_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "SKU", 1);
	ДобавитьПКС(СвойстваШапки, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "ПрайсЛист", 1, "Справочник_ПрайсЛист_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Серия", 1, "Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваШапки, "", "Упаковка", 1, "Справочник_Упаковки");
	ДобавитьПКС(СвойстваШапки, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваШапки, "", "Цена", 1);
	ДобавитьПКС(СвойстваШапки, "", "Штрихкод", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Пользователи_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Пользователи_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Пользователи;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Пользователи";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "ФизЛицо",      "ФизическоеЛицо", , "Справочник_ФизическиеЛица_Отправка");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ПравилаЦенообразованияВТипыЦен_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ПравилаЦенообразованияВТипыЦен_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ПравилаЦенообразования;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ТипыЦен";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ПравилаЦенообразованияВТипыЦен_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                "ВалютаЦены", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                "Идентификатор", 1);
	ДобавитьПКС(СвойстваШапки, "",                "ОкруглятьВБольшуюСторону", 1);
	ДобавитьПКС(СвойстваШапки, "Наименование",    "Наименование", 1);
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС", "ЦенаВключаетНДС");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ПрайсЛист_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ПрайсЛист_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ПрайсЛист";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Дата", 1);
	ДобавитьПКС(СвойстваШапки, "", "Организация", 1, "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "ТипЦены", 1, "Справочник_ТипыЦен_ИзСтруктуры_Отправка");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Производители(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Производители";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Контрагенты";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное", "Наименование");
	ДобавитьПКС(СвойстваШапки, "ЮрФизЛицо",          "ЮридическоеФизическоеЛицо", , "ЮрФизЛицо_Организации_Получение");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СерийныеНомераПС_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_СерийныеНомераПС_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.СерийныеНомера;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.СерииНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_СерийныеНомераПС_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Владелец",           "Номенклатура", , "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваШапки, "КодСерийногоНомера", "СерийныйНомер", 1);
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Склады_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Склады_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Магазины;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Склады";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",             "АдресСтрокой", 1);
	ДобавитьПКС(СвойстваШапки, "",             "ТипСклада", 1);
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "КонтактнаяИнформация");
	ДобавитьПКС(СвойстваТЧ, "", "ВидКонтактнойИнформации", 1,"ВидыКИ_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначенияПолей", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеКонтактнойИнформации", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СостояниеОплатыЗаказа_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_СостояниеОплатыЗаказа_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыСведений.СостояниеОплатыЗаказаПокупателя;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.СостояниеОплатыЗаказа";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_СостояниеОплатыЗаказа_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ДатаСостояния", 1);
	ДобавитьПКС(СвойстваШапки, "", "Заказ", 1, "Документ_ЗаказПокупателя_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "СостояниеОплаты", 1, "СостоянияОплатыЗаказаПокупателя");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СостояниеОтгрузкиЗаказа_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_СостояниеОтгрузкиЗаказа_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыСведений.СостояниеДоставкиЗаказаПокупателя;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.СостояниеОтгрузкиЗаказа";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_СостояниеОтгрузкиЗаказа_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ДатаСостояния", 1);
	ДобавитьПКС(СвойстваШапки, "", "Заказ", 1, "Документ_ЗаказПокупателя_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "СостояниеОтгрузки", 1, "СостоянияДоставкиЗаказаПокупателя");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СостоянияЭД_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_СостоянияЭД_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыСведений.СостоянияПоОбъектамУчетаЭДО;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.СостояниеЭлектронногоДокумента";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_СостоянияЭД_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ОснованиеЭлектронногоДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "", "СостояниеЭлектронногоДокумента", 1, "ТипыСостоянийЭлектронногоДокумента");
	ДобавитьПКС(СвойстваШапки, "", "СостояниеОбменаЭДНаНашейСтороне", 1);
	ДобавитьПКС(СвойстваШапки, "", "СостояниеОбменаЭДНаСторонеКонтрагента", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ТипыЦен_ИзСтруктуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ТипыЦен_ИзСтруктуры_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ТипыЦен";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ТипыЦен_ИзСтруктуры_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ВалютаЦены", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "", "Наименование", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Упаковки_ИзСтруктуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Упаковки_ИзСтруктуры";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Упаковки";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Упаковки_ИзСтруктуры_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ЕдиницаИзмерения", , "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваШапки, "", "Коэффициент");
	ДобавитьПКС(СвойстваШапки, "", "Наименование");
	ДобавитьПКС(СвойстваШапки, "", "Объем");
	ДобавитьПКС(СвойстваШапки, "", "Высота", 1);
	ДобавитьПКС(СвойстваШапки, "", "Глубина", 1);
	ДобавитьПКС(СвойстваШапки, "", "Ширина", 1);
	ДобавитьПКС(СвойстваШапки, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ФизическиеЛица_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ФизическиеЛица_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ФизическиеЛица";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ДатаРождения", "ДатаРождения");
	ДобавитьПКС(СвойстваШапки, "ИНН",          "ИНН");
	ДобавитьПКС(СвойстваШапки, "Наименование", "ФИО");
	ДобавитьПКС(СвойстваШапки, "Пол",          "Пол", , "Пол");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_ФизическиеЛицаГруппа");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "КонтактнаяИнформация");
	ДобавитьПКС(СвойстваТЧ, "", "ВидКонтактнойИнформации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЗначенияПолей", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеКонтактнойИнформации", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ХарактеристикиНоменклатуры_ИзСтруктуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ХарактеристикиНоменклатуры_ИзСтруктуры";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ХарактеристикиНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ХарактеристикиНоменклатуры_ИзСтруктуры_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Наименование");
	ДобавитьПКС(СвойстваШапки, "", "ВидНоменклатуры", 1, "Справочник_ВидыНоменклатуры");
	ДобавитьПКС(СвойстваШапки, "", "НаименованиеПолное", 1);
	ДобавитьПКС(СвойстваШапки, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ШтрихкодыНоменклатуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ШтрихкодыНоменклатуры_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыСведений.Штрихкоды;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ШтрихкодыНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Штрихкод", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Записи");
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Штрихкод", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ШтрихкодыУпаковокТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ШтрихкодыУпаковокТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ШтрихкодыУпаковокТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.МаркировкаУпаковки";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ШтрихкодыУпаковокТоваров_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                  "Упаковка", 1, "Справочник_Упаковки");
	ДобавитьПКС(СвойстваШапки, "ДатаУпаковки",      "ДатаУпаковки");
	ДобавитьПКС(СвойстваШапки, "ЗначениеШтрихкода", "Штрихкод");
	ДобавитьПКС(СвойстваШапки, "Количество",        "Количество");
	ДобавитьПКС(СвойстваШапки, "Номенклатура",      "Номенклатура", , "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",     "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "Серия",             "Серия", , "Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваШапки, "ТипУпаковки",       "ТипУпаковки", , "ТипыУпаковок");
	ДобавитьПКС(СвойстваШапки, "ТипШтрихкода",      "ТипШтрихкода", , "ТипыШтрихкодов");
	ДобавитьПКС(СвойстваШапки, "Характеристика",    "Характеристика", , "Справочник_ХарактеристикиНоменклатуры");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ВложенныеТовары", "ВложенныеТовары");
	ДобавитьПКС(СвойстваТЧ, "Количество",         "Количество");
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок", "КоличествоУпаковок");
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",       "Номенклатура", ,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "Серия",              "Серия", ,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "Упаковка",           "Упаковка", ,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "Характеристика",     "Характеристика", ,"Справочник_ХарактеристикиНоменклатуры");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ЭквайринговыеТерминалы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ЭквайринговыеТерминалы_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ЭквайринговыеТерминалы;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ЭквайринговыеТерминалы";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ЭквайринговыеТерминалы_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",             "БанковскийСчетОрганизации", 1, "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "Код",          "Номер");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Эквайрер",     "Эквайер", , "Справочник_Контрагенты_Отправка");

КонецПроцедуры


#КонецОбласти
#Область Получение
Процедура ДобавитьПОД_Документ_ВводОстатковПрослеживаемыхТоваров_Получ(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВводОстатковПрослеживаемыхТоваров_Получ";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.УведомлениеОбОстаткахПрослеживаемыхТоваров";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВводОстатковПрослеживаемыхТоваров_Получ");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ВнесениеДСВКассуККМ_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВнесениеДСВКассуККМ_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ВнесениеДСВКассуККМ";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВнесениеДСВКассуККМ_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ВозвратТоваровПоставщику_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВозвратТоваровПоставщику_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ВозвратТоваровПоставщику";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровПоставщику_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ВыемкаДСИзКассыККМ_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВыемкаДСИзКассыККМ_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ВыемкаДСИзКассыККМ";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВыемкаДСИзКассыККМ_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ЗаказКлиента_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ЗаказКлиента_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ЗаказКлиента";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаказКлиента_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ЗаказПоставщику_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ЗаказПоставщику_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ЗаказПоставщику";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаказПоставщику_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ЗаявкаНаРасходДСРасчетыСКонт_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ЗаявкаНаРасходДСРасчетыСКонт_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ЗаявкаНаРасходДСРасчетыСКонтрагентами";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ЗаявкаНаРасходДСРасчетыСКонт_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаявкаНаРасходДСРасчетыСКонт_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_КассоваяСменаЗакрытие_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_КассоваяСменаЗакрытие_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ЗакрытиеКассовойСмены";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КассоваяСменаЗакрытие_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_КассоваяСменаОткрытие_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_КассоваяСменаОткрытие_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОткрытиеКассовойСмены";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КассоваяСменаОткрытие_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОприходованиеТоваров_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОприходованиеТоваров_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОприходованиеТоваров";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОприходованиеТоваров_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОтчетКомитенту_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетКомитенту_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОтчетКомитенту";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетКомитенту_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОтчетОРозничныхПродажах_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетОРозничныхПродажах_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОтчетОРозничныхПродажах";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетОРозничныхПродажах_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПеремещениеТоваров_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПеремещениеТоваров_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПеремещениеТоваров";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПеремещениеТоваров_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПересчетТоваров_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПересчетТоваров_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПересчетТоваров";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПересчетТоваров_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПКОПолучениеНаличныхВБанке_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКОПолучениеНаличныхВБанке_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПКОПолучениеНаличныхВБанке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПолучениеНаличныхВБанке_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПКОПрочееПоступление_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКОПрочееПоступление_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПКОПрочееПоступление";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПрочееПоступление_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПКОПрочиеДоходы_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКОПрочиеДоходы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПКОПрочиеДоходы";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПрочиеДоходы_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПоступлениеТоваровУслуг_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПоступлениеТоваровУслуг_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПоступлениеТоваровУслуг";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПоступлениеТоваровУслуг_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_РеализацияТоваровУслуг_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РеализацияТоваровУслуг_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РеализацияТоваровУслуг";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_РеализацияТоваровУслуг_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РеализацияТоваровУслуг_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_РКОНаБанковскийСчет_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РКОНаБанковскийСчет_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РКОНаБанковскийСчет";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОНаБанковскийСчет_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_РКОПрочийРасход_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РКОПрочийРасход_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РКОПрочийРасход";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОПрочийРасход_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_СБДСРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСРасчетыСКонтрагентами_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСРасчетыСКонтрагентами";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСРасчетыСКонтрагентами_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_СборкаТоваров_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СборкаТоваров_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СборкаТоваров";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СборкаТоваров_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_СписаниеЗапасов(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СписаниеЗапасов";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СписаниеЗапасов";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеЗапасов_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_УведомлениеОВвозеПрослеживаемыхТоваров_Получ(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_УведомлениеОВвозеПрослеживаемыхТоваров_Получ";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.УведомлениеОВвозеПрослеживаемыхТоваров";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_УведОВвозеПрослеживаемыхТоваров_Получ");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_УстановкаЦенНоменклатуры_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_УстановкаЦенНоменклатуры_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.УстановкаЦенНоменклатуры";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_УстановкаЦенНоменклатуры_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ЧекККМ_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ЧекККМ_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ЧекККМ";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ЧекККМ_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЧекККМ_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_ДополнительныеРеквизиты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ДополнительныеРеквизиты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ДополнительныеРеквизиты";
	ПравилоОбработки.ПриОбработке            = "ПОД_ДополнительныеРеквизиты_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДополнительныеРеквизиты");
КонецПроцедуры

Процедура ДобавитьПОД_ЕдиницыИзмерения_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ЕдиницыИзмерения_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ЕдиницыИзмерения";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЕдиницыИзмерения");
КонецПроцедуры

Процедура ДобавитьПОД_ЗначенияДопРеквизитов_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ЗначенияДопРеквизитов_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ЗначенияДополнительныхРеквизитов";
	ПравилоОбработки.ПриОбработке            = "ПОД_ЗначенияДопРеквизитов_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЗначенияДополнительныхРеквизитов");
КонецПроцедуры

Процедура ДобавитьПОД_Номенклатура_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Номенклатура_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Номенклатура";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Номенклатура_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_НоменклатураГруппа(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "НоменклатураГруппа";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.НоменклатураГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатураГруппа");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Банки_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Банки_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Банки";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Банки");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_БанковскиеСчета_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_БанковскиеСчета_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.БанковскиеСчета";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БанковскиеСчета_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ВидыНоменклатуры_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ВидыНоменклатуры_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ВидыНоменклатуры";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ВидыНоменклатуры");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ДоговорыКонтрагентов_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ДоговорыКонтрагентов_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Договоры";
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ДоговорыКонтрагентов_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДоговорыКонтрагентов_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_КассыККМ_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_КассыККМ_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.КассыККМ";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КассыККМ_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_КодТНВЭД_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_КодТНВЭД_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.КодТНВЭД";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КлассификаторТНВЭД_ЭлементСправочника");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Контрагенты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Контрагенты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Контрагенты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Контрагенты_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_КонтрагентыГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_КонтрагентыГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.КонтрагентыГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КонтрагентыГруппа");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Магазины_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Магазины_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Склады";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Склады_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_НомерГТД_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_НомерГТД_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.НомерГТД";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НомераГТД_ПолучениеЭлемента");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Организации_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Организации_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Организации";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Организации_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Пользователи_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Пользователи_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Пользователи";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Пользователи_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СерииНоменклатуры_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СерииНоменклатуры_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СерииНоменклатуры";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СерииНоменклатуры");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СостоянияЭД_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СостоянияЭД_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СостояниеЭлектронногоДокумента";
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_СостоянияЭД_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СостоянияЭД_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СтатьиДДС_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтатьиДДС_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СтатьиДДС";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("СтатьиДДС");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СтраныМира_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтраныМира_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СтраныМира";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтраныМира");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ТипыЦен_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ТипыЦен_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ТипыЦен";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ТипыЦен_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Файлы_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Файлы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Файлы";
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Файлы_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатураПрисоединенныеФайлы_Получ");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ФизическиеЛица_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ФизическиеЛица_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ФизическиеЛица";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛица_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ФизическиеЛицаГруппа(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ФизическиеЛицаГруппа";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ФизическиеЛицаГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛицаГруппа");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ХарактеристикиНоменклатуры_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ХарактеристикиНоменклатуры_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ХарактеристикиНоменклатуры";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ХарактеристикиНоменклатуры");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ШтрихкодыНоменклатуры_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ШтрихкодыНоменклатуры_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ШтрихкодыНоменклатуры";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ШтрихкодыНоменклатуры_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ШтрихкодыУпаковокТоваров_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ШтрихкодыУпаковокТоваров_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.МаркировкаУпаковки";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ШтрихкодыУпаковокТоваров_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ЭквайринговыеТерминалы_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ЭквайринговыеТерминалы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ЭквайринговыеТерминалы";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЭквайринговыеТерминалы_Получение");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ВводОстатковПрослеживаемыхТоваров_Получ(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ВводОстатковПрослеживаемыхТоваров_Получ";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВводОстатковПрослеживаемыхИмпортныхТоваров;
	ПравилоКонвертации.ОбъектФормата                = "Документ.УведомлениеОбОстаткахПрослеживаемыхТоваров";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ВводОстатковПрослеживаемыхТоваров_Получ_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ВводОстатковПрослеживаемыхТоваров_Получ_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоПоРНПТ", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",     "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерГТД",         "", 1,"Справочник_НомераГТД_ПолучениеЭлемента");
	ДобавитьПКС(СвойстваТЧ, "Характеристика",   "", 1,"Справочник_ХарактеристикиНоменклатуры");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ВнесениеДСВКассуККМ_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ВнесениеДСВКассуККМ_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВнесениеДенежныхСредствВКассуККМ;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ВнесениеДСВКассуККМ";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ВнесениеДСВКассуККМ_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "КассаККМ",       "КассаККМ", , "Справочник_КассыККМ_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",          "НомерВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Организация",    "", 1, "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",  "Кассир", , "Справочник_Пользователи_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",       "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента", "Сумма");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ВозвратТоваровПоставщику_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВозвратТоваровПоставщику;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ВозвратТоваровПоставщику";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Документ_ВозвратПоставщику";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                          "");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента", "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетОрганизации", "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Магазин",                   "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",             "Ответственный", , "Справочник_Пользователи_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                  "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "УчитыватьНДС",              "", 1);
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",           "СуммаВключаетНДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Серии",  "");
	ДобавитьПКС(СвойстваТЧ, "Количество",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",   "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Серия",          "", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "Характеристика", "", 1,"Справочник_ХарактеристикиНоменклатуры");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",        "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",           "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СтатусУказанияСерий", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "Упаковка",            "", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "Характеристика",      "", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "Цена",                "", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ВыемкаДСИзКассыККМ_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ВыемкаДСИзКассыККМ_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВыемкаДенежныхСредствИзКассыККМ;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ВыемкаДСИзКассыККМ";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ВыемкаДСИзКассыККМ_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "КассаККМ",              "КассаККМ", , "Справочник_КассыККМ_Получение");
	ДобавитьПКС(СвойстваШапки, "Магазин",               "", 1, "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "НомерВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Организация",           "", 1, "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",         "Кассир", , "Справочник_Пользователи_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация", "", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ЗаказКлиента_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ЗаказКлиента_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ЗаказПокупателя;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ЗаказКлиента";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ЗаказКлиента_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ЗаказКлиента_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Документ_ЗаказКлиента";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "АдресДоставки",             "АдресДоставки");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетОрганизации", "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ЖелаемаяДатаПродажи",       "ОжидаемаяДатаПоступления");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Магазин",                   "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",             "Ответственный", , "Справочник_Пользователи_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                  "", 1);
	ДобавитьПКС(СвойстваШапки, "Статус",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "УчитыватьНДС",              "", 1);
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",           "СуммаВключаетНДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",       "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",          "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "Упаковка",           "", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "Характеристика",     "", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "Цена",               "", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ЗаказПоставщику_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ЗаказПоставщику_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ЗаказПоставщику;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ЗаказПоставщику";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ЗаказПоставщику_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ЗаказПоставщику_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Документ_ЗаказПоставщику";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаПоступления",       "ОжидаемаяДатаПоступления");
	ДобавитьПКС(СвойстваШапки, "Закрыт",                "", 1);
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Магазин",               "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",         "Ответственный", , "Справочник_Пользователи_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "УчитыватьНДС",          "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация", "", 1);
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",       "СуммаВключаетНДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",       "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",          "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "Упаковка",           "", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "Характеристика",     "", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "Цена",               "", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ЗаявкаНаРасходДСРасчетыСКонт_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ЗаявкаНаРасходДСРасчетыСКонт_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ЗаявкаНаРасходДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ЗаявкаНаРасходДСРасчетыСКонт_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Документ_СБДС";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента", "БанковскийСчет", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаПлатежа",               "УтвержденнаяДатаПлатежа");
	ДобавитьПКС(СвойстваШапки, "ЖелательнаяДатаПлатежа",    "КрайнийСрокПлатежа");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент");
	ДобавитьПКС(СвойстваШапки, "Магазин",                   "", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",             "Автор", , "Справочник_Пользователи_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                  "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "ФормаОплаты",               "УтвержденнаяФормаОплаты");
	ДобавитьПКС(СвойстваШапки, "ФормаОплатыЗаявки",         "УтвержденнаяФормаОплаты");
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",     "", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_КассоваяСменаЗакрытие_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_КассоваяСменаЗакрытие_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.КассоваяСмена;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ЗакрытиеКассовойСмены";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_КассоваяСменаЗакрытие_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_КассоваяСменаЗакрытие_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "КассаККМ",               "КассаККМ", , "Справочник_КассыККМ_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                  "НомерВПрограмме");
	ДобавитьПКС(СвойстваШапки, "НомерСменыККТ",          "НомерКассовойСмены");
	ДобавитьПКС(СвойстваШапки, "ОкончаниеКассовойСмены", "Дата");
	ДобавитьПКС(СвойстваШапки, "Организация",            "", 1, "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",               "", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_КассоваяСменаОткрытие_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_КассоваяСменаОткрытие_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.КассоваяСмена;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОткрытиеКассовойСмены";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_КассоваяСменаОткрытие_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_КассоваяСменаОткрытие_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                "Дата");
	ДобавитьПКС(СвойстваШапки, "КассаККМ",            "КассаККМ", , "Справочник_КассыККМ_Получение");
	ДобавитьПКС(СвойстваШапки, "НачалоКассовойСмены", "Дата");
	ДобавитьПКС(СвойстваШапки, "Номер",               "НомерВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Организация",         "", 1, "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",            "", 1);
	ДобавитьПКС(СвойстваШапки, "Статус",              "", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОприходованиеТоваров_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОприходованиеТоваров_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ОприходованиеТоваров;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОприходованиеТоваров";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОприходованиеТоваров_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОприходованиеТоваров_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Документ_Оприходование";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "АналитикаХозяйственнойОперации", "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                           "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Магазин",                        "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                    "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                  "Ответственный", , "Справочник_Пользователи_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                       "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                 "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",       "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерГТД",           "", 1,"Справочник_НомерГТД_Получение");
	ДобавитьПКС(СвойстваТЧ, "Сумма",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "Упаковка",           "", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "Цена",               "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОтчетКомитенту_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОтчетКомитенту_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ОтчетКомитентуОПродажах;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОтчетКомитенту";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОтчетКомитенту_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОтчетКомитенту_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Документ_ОтчетКомитенту";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                               "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                            "Ответственный", , "Справочник_Пользователи_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                                 "", 1);
	ДобавитьПКС(СвойстваШапки, "ПроцентКомиссионногоВознаграждения",       "ПроцентКомиссионногоВознаграждения");
	ДобавитьПКС(СвойстваШапки, "СпособРасчетаКомиссионногоВознаграждения", "СпособРасчетаКомиссионногоВознаграждения", , "СпособыРасчетаКомиссионногоВознаграждения");
	ДобавитьПКС(СвойстваШапки, "СтавкаНДСВознаграждения",                  "СтавкаНДСВознаграждения", , "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаВознаграждения",                      "СуммаВознаграждения");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                           "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаНДСВознаграждения",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "УслугаКомиссионногоВознаграждения",        "УслугаПоВознаграждению", , "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",                          "СуммаВключаетНДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "Товары");
	ДобавитьПКС(СвойстваТЧ, "Количество",         "Количество");
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок", "КоличествоУпаковок");
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",       "Номенклатура", ,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Сумма",              "Сумма");
	ДобавитьПКС(СвойстваТЧ, "СуммаЗакупки",       "СуммаПоступления");
	ДобавитьПКС(СвойстваТЧ, "Упаковка",           "Упаковка", ,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "Характеристика",     "Характеристика", ,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "Цена",               "Цена");
	ДобавитьПКС(СвойстваТЧ, "ЦенаЗакупки",        "ЦенаПоступления");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОтчетОРозничныхПродажах_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОтчетОРозничныхПродажах_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ОтчетОРозничныхПродажах;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОтчетОРозничныхПродажах";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                           "Дата");
	ДобавитьПКС(СвойстваШапки, "КассаККМ",                       "КассаККМ", , "Справочник_КассыККМ_Получение");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Магазин",                        "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                          "", 1);
	ДобавитьПКС(СвойстваШапки, "ОплатаПодарочнымиСертификатами", "", 1);
	ДобавитьПКС(СвойстваШапки, "Организация",                    "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                  "Ответственный", , "Справочник_Пользователи_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                       "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                 "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаОплатыНаличных",            "", 1);
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",                "СуммаВключаетНДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ОплатаПлатежнымиКартами", "");
	ДобавитьПКС(СвойстваТЧ, "ВидОплаты",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЭквайринговыйТерминал", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары",                  "");
	ДобавитьПКС(СвойстваТЧ, "Количество",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",       "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Склад",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",          "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "Упаковка",           "", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "Характеристика",     "", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "Цена",               "", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПеремещениеТоваров_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПеремещениеТоваров_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПеремещениеТоваров;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПеремещениеТоваров";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПеремещениеТоваров_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПеремещениеТоваров_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Документ_Перемещение";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "МагазинОтправитель",    "СкладОтправитель", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "МагазинПолучатель",     "СкладПолучатель", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ОрганизацияПолучатель", "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",         "Ответственный", , "Справочник_Пользователи_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",       "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Сумма",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "Упаковка",           "", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "Характеристика",     "", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "Цена",               "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПересчетТоваров_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПересчетТоваров_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПересчетТоваров;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПересчетТоваров";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПересчетТоваров_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПересчетТоваров_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Магазин",       "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",      "", 1);
	ДобавитьПКС(СвойстваШапки, "Статус",        "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковокФакт", "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоФакт",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",           "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Упаковка",               "", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "Характеристика",         "", 1,"Справочник_ХарактеристикиНоменклатуры");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПКОПолучениеНаличныхВБанке_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПКОПолучениеНаличныхВБанке";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Документ_ПКО";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",        "БанковскийСчет", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "ВТомЧислеНДС",          "ВТомЧислеНДС");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",         "Ответственный", , "Справочник_Пользователи_Получение");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",             "Приложение");
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация", "", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПКОПрочееПоступление_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПКОПрочееПоступление_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПКОПрочееПоступление";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПКОПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Документ_ПКО";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВТомЧислеНДС",          "ВТомЧислеНДС");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",         "Ответственный", , "Справочник_Пользователи_Получение");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",             "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "ПробитЧек",             "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "", 1,"СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                         "", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПКОПрочиеДоходы_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПКОПрочиеДоходы_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПКОПрочиеДоходы";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПКОПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Документ_ПКО";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВТомЧислеНДС",          "ВТомЧислеНДС");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",         "Ответственный", , "Справочник_Пользователи_Получение");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",             "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "", 1,"СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                         "", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПоступлениеТоваровУслуг_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПоступлениеТоваровУслуг_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПоступлениеТоваров;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Документ_ПТУ";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента", "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетОрганизации", "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",    "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Договор",                   "Договор", , "Справочник_ДоговорыКонтрагентов_Получение");
	ДобавитьПКС(СвойстваШапки, "ЗаказПоставщику",           "Заказ", , "Документ_ЗаказПоставщику_Получение");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Магазин",                   "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",   "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",             "Ответственный", , "Справочник_Пользователи_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                  "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "УчитыватьНДС",              "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",     "", 1);
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",           "СуммаВключаетНДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Серии",                    "");
	ДобавитьПКС(СвойстваТЧ, "Количество",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",   "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Серия",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "Характеристика", "", 1,"Справочник_ХарактеристикиНоменклатуры");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары",                   "");
	ДобавитьПКС(СвойстваТЧ, "Количество",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",        "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерГТД",            "", 1,"Справочник_НомерГТД_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",           "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СтатусУказанияСерий", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "Упаковка",            "", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "Характеристика",      "", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "Цена",                "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ТоварыПоДаннымПоставщика", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",       "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",          "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "Упаковка",           "", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "Характеристика",     "", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "Цена",               "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ШтрихкодыУпаковок",        "");
	ДобавитьПКС(СвойстваТЧ, "ЗначениеШтрихкода", "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_РеализацияТоваровУслуг_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РеализацияТоваровУслуг_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РеализацияТоваров;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РеализацияТоваровУслуг";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РеализацияТоваровУслуг_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РеализацияТоваровУслуг_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "АдресДоставки",             "АдресДоставки");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетОрганизации", "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ЗаказПокупателя",           "Заказ");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Магазин",                   "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",             "Ответственный", , "Справочник_Пользователи_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                  "", 1);
	ДобавитьПКС(СвойстваШапки, "Продавец",                  "", 1);
	ДобавитьПКС(СвойстваШапки, "Склад",                     "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "УчитыватьНДС",              "", 1);
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",           "СуммаВключаетНДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",       "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",          "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "Упаковка",           "", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "Характеристика",     "", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "Цена",               "", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_РКОНаБанковскийСчет_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РКОНаБанковскийСчет_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РКОНаБанковскийСчет";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РКОНаБанковскийСчет_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Документ_РКО";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",        "БанковскийСчет", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "Выдать",                "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",         "Ответственный", , "Справочник_Пользователи_Получение");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",           "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация", "", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_РКОПрочийРасход_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РКОПрочийРасход_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РКОПрочийРасход";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РКОПрочийРасход_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Документ_РКО";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",         "Ответственный", , "Справочник_Пользователи_Получение");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",           "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "", 1,"СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                         "", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_СБДСРасчетыСКонтрагентами_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СБДСРасчетыСКонтрагентами_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РегистрацияБезналичнойОплаты;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Документ_СБДС";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",         "Ответственный", , "Справочник_Пользователи_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "", 1,"СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                         "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_СборкаТоваров_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СборкаТоваров_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.СборкаТоваров;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СборкаТоваров";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СборкаТоваров_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СборкаТоваров_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Документ_Сборка";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВидОперации",        "ВидОперации", , "ВидыОперацийСборкаТоваров");
	ДобавитьПКС(СвойстваШапки, "Дата",               "Дата");
	ДобавитьПКС(СвойстваШапки, "Количество",         "Количество");
	ДобавитьПКС(СвойстваШапки, "КоличествоУпаковок", "КоличествоУпаковок");
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Магазин",            "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "Номенклатура",       "Номенклатура", , "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",              "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",        "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",      "Ответственный", , "Справочник_Пользователи_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",           "", 1);
	ДобавитьПКС(СвойстваШапки, "Упаковка",           "Упаковка", , "Справочник_Упаковки");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",       "", 1,"Справочник_Номенклатура_Получение");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_СписаниеЗапасов_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СписаниеЗапасов_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.СписаниеТоваров;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СписаниеЗапасов";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СписаниеЗапасов_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СписаниеЗапасов_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Документ_Списание";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "АналитикаХозяйственнойОперации", "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                           "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Магазин",                        "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                    "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ОснованиеСписания",              "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                  "Ответственный", , "Справочник_Пользователи_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                       "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                 "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",       "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Сумма",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "Упаковка",           "", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "Цена",               "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_УведОВвозеПрослеживаемыхТоваров_Получ(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_УведОВвозеПрослеживаемыхТоваров_Получ";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПоступлениеТоваров;
	ПравилоКонвертации.ОбъектФормата                = "Документ.УведомлениеОВвозеПрослеживаемыхТоваров";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_УведОВвозеПрослеживаемыхТоваров_Получ_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_УведОВвозеПрослеживаемыхТоваров_Получ_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "Товары");
	ДобавитьПКС(СвойстваТЧ, "КоличествоПоРНПТ", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",     "Номенклатура", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерГТД",         "", 1,"Справочник_НомераГТД_ПолучениеЭлемента");
	ДобавитьПКС(СвойстваТЧ, "Упаковка",         "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "Характеристика",   "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_УстановкаЦенНоменклатуры_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_УстановкаЦенНоменклатуры_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.УстановкаЦенНоменклатуры;
	ПравилоКонвертации.ОбъектФормата                = "Документ.УстановкаЦенНоменклатуры";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",      "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ВидыЦен", "");
	ДобавитьПКС(СвойстваТЧ, "ВидЦены", "", 1,"Справочник_ТипыЦен_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары",  "");
	ДобавитьПКС(СвойстваТЧ, "ВидЦены",             "", 1,"Справочник_ТипыЦен_Получение");
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",        "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Характеристика",      "", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "Цена",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЦенаИзмененаВручную", "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ЧекККМ_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ЧекККМ_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ЧекККМ;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ЧекККМ";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ЧекККМ_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ЧекККМ_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Документ_Чек";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВидОперации",             "", 1);
	ДобавитьПКС(СвойстваШапки, "ВладелецДисконтнойКарты", "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "ДисконтнаяКарта",         "КартаЛояльности", 1, "Справочник_ДисконтныеКарты_Получение");
	ДобавитьПКС(СвойстваШапки, "КассаККМ",                "КассаККМ", , "Справочник_КассыККМ_Получение");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Магазин",                 "", 1, "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "НомерВПрограмме");
	ДобавитьПКС(СвойстваШапки, "НомерСменыККМ",           "НомерКассовойСмены");
	ДобавитьПКС(СвойстваШапки, "НомерЧекаККМ",            "НомерЧекаФР");
	ДобавитьПКС(СвойстваШапки, "Организация",             "", 1, "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ОтчетОРозничныхПродажах", "", 1);
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления",         "Отменен");
	ДобавитьПКС(СвойстваШапки, "Проведен",                "", 1);
	ДобавитьПКС(СвойстваШапки, "СистемаНалогообложения",  "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",         "", 1);
	ДобавитьПКС(СвойстваШапки, "ЧекККМПродажа",           "Основание", , "Документ_ЧекККМ_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "АкцизныеМарки",                   "");
	ДобавитьПКС(СвойстваТЧ, "АкцизнаяМарка",                  "", 1);
	ДобавитьПКС(СвойстваТЧ, "КлючСвязи",                      "", 1);
	ДобавитьПКС(СвойстваТЧ, "КодАкцизнойМарки",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЧастичноеВыбытиеВариантУчета",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЧастичноеВыбытиеКоличество",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЧастичноеВыбытиеНоменклатура",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЧастичноеВыбытиеХарактеристика", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Оплата",                          "");
	ДобавитьПКС(СвойстваТЧ, "ВидОплаты",                     "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДанныеПереданыВБанк",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "ИдентификаторПлатежнойСистемы", "", 1);
	ДобавитьПКС(СвойстваТЧ, "СсылочныйНомер",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",                         "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ПогашениеПодарочныхСертификатов", "");
	ДобавитьПКС(СвойстваТЧ, "ПодарочныйСертификат",      "ВидПодарочногоСертификата", 1,"Справочник_ВидыПодарочныхСертификатов_Получение");
	ДобавитьПКС(СвойстваТЧ, "СерийныйНомер",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаПогашенияСертификата", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Серии",                           "");
	ДобавитьПКС(СвойстваТЧ, "Количество",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",   "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Серия",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "Характеристика", "", 1,"Справочник_ХарактеристикиНоменклатуры");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "СерийныеНомера",                  "");
	ДобавитьПКС(СвойстваТЧ, "КлючСвязиСерийныхНомеров", "", 1);
	ДобавитьПКС(СвойстваТЧ, "СерийныйНомер",            "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары",                          "");
	ДобавитьПКС(СвойстваТЧ, "КлючСвязи",                   "", 1);
	ДобавитьПКС(СвойстваТЧ, "КлючСвязиСерийныхНомеров",    "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество",                  "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",                "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Продавец",                    "", 1);
	ДобавитьПКС(СвойстваТЧ, "ПроцентАвтоматическойСкидки", "", 1);
	ДобавитьПКС(СвойстваТЧ, "ПроцентРучнойСкидки",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "Склад",                       "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",                   "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СтатусУказанияСерий",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",                       "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаАвтоматическойСкидки",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                    "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаРучнойСкидки",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаСкидкиОплатыБонусом",    "", 1);
	ДобавитьПКС(СвойстваТЧ, "Упаковка",                    "", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "Характеристика",              "", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "Цена",                        "", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_БанковскиеСчета_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_БанковскиеСчета_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.БанковскиеСчета;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.БанковскиеСчета";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_БанковскиеСчета_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Банк",         "Банк", , "Справочник_Банки");
	ДобавитьПКС(СвойстваШапки, "Банк",         "БанкДляРасчетов", , "Справочник_Банки");
	ДобавитьПКС(СвойстваШапки, "Владелец",     "Владелец", 1);
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "НомерСчета",   "НомерСчета");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,НомерСчета");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ВидыАлкогольнойПродукции_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ВидыАлкогольнойПродукции_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ВидыАлкогольнойПродукции;
	ПравилоКонвертации.ОбъектФормата                = "КлючевыеСвойстваВидыАлкогольнойПродукции";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ВидыАлкогольнойПродукции_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВидЛицензии",  "ВидЛицензии", , "ВидыЛицензийАлкогольнойПродукции");
	ДобавитьПКС(СвойстваШапки, "Код",          "Код", 1);
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");

	ПравилоКонвертации.ПоляПоиска.Добавить("ВидЛицензии,Код,Наименование");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ВидыПодарочныхСертификатов_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ВидыПодарочныхСертификатов_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ВидыПодарочныхСертификатов";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Номинал",      "Номинал");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ДисконтныеКарты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ДисконтныеКарты_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ИнформационныеКарты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ДисконтныеКарты";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ДисконтныеКарты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ДисконтныеКарты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВладелецКарты", "ВладелецКарты", 1);
	ДобавитьПКС(СвойстваШапки, "КодКарты",      "НомерКарты");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ДоговорыКонтрагентов_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ДоговорыКонтрагентов_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Договоры";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Агент",              "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",     "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "ИННПоставщикаУслуг", "", 1);
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "Организация",        "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ПризнакАгента",      "", 1);
	ДобавитьПКС(СвойстваШапки, "ТипДоговора",        "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Агент,Организация,ПризнакАгента");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_КассыККМ_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_КассыККМ_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.КассыККМ;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.КассыККМ";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_КассыККМ_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Владелец",             "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Магазин",              "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "Наименование",         "Наименование");
	ДобавитьПКС(СвойстваШапки, "РегистрационныйНомер", "РегистрационныйНомер");

	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,Магазин,Наименование");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_КлассификаторТНВЭД(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_КлассификаторТНВЭД";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.КлассификаторТНВЭД;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "Код", 1);
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,Наименование");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Контрагенты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Контрагенты_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Контрагенты";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ИНН",                "ИНН");
	ДобавитьПКС(СвойстваШапки, "КодПоОКПО",          "ОКПО");
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "ДополнительнаяИнформация");
	ДобавитьПКС(СвойстваШапки, "КПП",                "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",           "Группа", , "Справочник_КонтрагентыГруппа");
	ДобавитьПКС(СвойстваШапки, "ФизЛицо",            "", 1);
	ДобавитьПКС(СвойстваШапки, "ЮрФизЛицо",          "ЮридическоеФизическоеЛицо", , "ЮрФизЛицо_Организации_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,НаименованиеПолное,Родитель");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Номенклатура_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Номенклатура_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Номенклатура";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Справочник_Номенклатура";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "АлкогольнаяПродукция",                      "АлкогольнаяПродукция");
	ДобавитьПКС(СвойстваШапки, "Артикул",                                   "Артикул");
	ДобавитьПКС(СвойстваШапки, "ВидАлкогольнойПродукцииЕГАИС",              "ВидАлкогольнойПродукции", , "Справочник_ВидыАлкогольнойПродукции_Получение");
	ДобавитьПКС(СвойстваШапки, "ВидНоменклатуры",                           "ВидНоменклатуры", , "Справочник_ВидыНоменклатуры");
	ДобавитьПКС(СвойстваШапки, "ЕдиницаИзмерения",                          "ЕдиницаИзмерения", , "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваШапки, "ИмпортнаяАлкогольнаяПродукция",             "ИмпортнаяАлкогольнаяПродукция");
	ДобавитьПКС(СвойстваШапки, "Код",                                       "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "КодВидаНоменклатурнойКлассификации",        "КодВидаНоменклатурнойКлассификации");
	ДобавитьПКС(СвойстваШапки, "КодТНВЭД",                                  "", 1);
	ДобавитьПКС(СвойстваШапки, "Крепость",                                  "Крепость");
	ДобавитьПКС(СвойстваШапки, "Наименование",                              "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",                        "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "ОбъемДАЛ",                                  "ОбъемДАЛ");
	ДобавитьПКС(СвойстваШапки, "ОсобенностьУчета",                          "ВидПродукцииИС", , "ВидыПродукцииИС");
	ДобавитьПКС(СвойстваШапки, "Производитель",                             "Производитель", , "Справочник_Производители");
	ДобавитьПКС(СвойстваШапки, "ПроизводительИмпортерАлкогольнойПродукции", "ПроизводительИмпортер", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Родитель",                                  "Группа", , "Справочник_НоменклатураГруппа");
	ДобавитьПКС(СвойстваШапки, "СтавкаНДС",                                 "СтавкаНДС", , "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваШапки, "ТипНоменклатуры",                           "ТипНоменклатуры", , "ТипыНоменклатуры_Получение");
	ДобавитьПКС(СвойстваШапки, "ФайлКартинки",                              "ОсновнаяКартинка", , "Справочник_НоменклатураПрисоединенныеФайлы_Получ");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,Артикул,Код,НаименованиеПолное");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_НоменклатураПрисоединенныеФайлы_Получ(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_НоменклатураПрисоединенныеФайлы_Получ";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.НоменклатураПрисоединенныеФайлы;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Файлы";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_НоменклатураПрисоединенныеФайлы_Получ_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВладелецФайла",    "", 1);
	ДобавитьПКС(СвойстваШапки, "Наименование",     "Имя");
	ДобавитьПКС(СвойстваШапки, "Описание",         "Описание");
	ДобавитьПКС(СвойстваШапки, "Расширение",       "Расширение");
	ДобавитьПКС(СвойстваШапки, "ТипХраненияФайла", "", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_НомераГТД_ПолучениеЭлемента(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_НомераГТД_ПолучениеЭлемента";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.НомераГТД;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.НомерГТД";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_НомераГТД_ПолучениеЭлемента_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",                 "НомерГТД");
	ДобавитьПКС(СвойстваШапки, "СтранаВвозаНеРФ",     "СтранаВвозаНеРФ");
	ДобавитьПКС(СвойстваШапки, "СтранаПроисхождения", "СтранаПроисхождения", , "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваШапки, "ЭтоРНПТ",             "ЯвляетсяРНПТ");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_НомерГТД_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_НомерГТД_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.НомераГТД;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_НомерГТД_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_НомерГТД_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "СтранаПроисхождения", "", 1, "Справочник_СтраныМира");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,СтранаПроисхождения");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Организации_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Организации_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Организации";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Справочник_Организации";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ИНН",                     "ИНН");
	ДобавитьПКС(СвойстваШапки, "КодПоОКАТО",              "ОКАТО");
	ДобавитьПКС(СвойстваШапки, "КодПоОКПО",               "ОКПО");
	ДобавитьПКС(СвойстваШапки, "КПП",                     "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",            "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",      "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "НаименованиеСокращенное", "НаименованиеСокращенное");
	ДобавитьПКС(СвойстваШапки, "ОГРН",                    "ОГРН");
	ДобавитьПКС(СвойстваШапки, "Префикс",                 "Префикс");
	ДобавитьПКС(СвойстваШапки, "СвидетельствоДатаВыдачи", "СвидетельствоДатаВыдачи");
	ДобавитьПКС(СвойстваШапки, "СвидетельствоСерияНомер", "СвидетельствоСерияНомер");
	ДобавитьПКС(СвойстваШапки, "ЮрФизЛицо",               "ЮридическоеФизическоеЛицо", , "ЮрФизЛицо_Организации_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,КПП,Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,КПП");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Пользователи_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Пользователи_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Пользователи;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Пользователи";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "ФизЛицо",      "ФизическоеЛицо", , "Справочник_ФизическиеЛица_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СерииНоменклатуры_ИзСтруктуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СерииНоменклатуры_ИзСтруктуры";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СерииНоменклатуры;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_СерииНоменклатуры_ИзСтруктуры_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВидНоменклатуры", "", 1);
	ДобавитьПКС(СвойстваШапки, "ВладелецСерии",   "", 1);
	ДобавитьПКС(СвойстваШапки, "Наименование",    "", 1);
	ДобавитьПКС(СвойстваШапки, "Номер",           "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,Номер");
	ПравилоКонвертации.ПоляПоиска.Добавить("Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Склады_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Склады_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Магазины;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Склады";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Склады_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование",            "Наименование");
	ДобавитьПКС(СвойстваШапки, "СкладУправляющейСистемы", "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СостоянияЭД_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СостоянияЭД_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.РегистрыСведений.СостоянияПоОбъектамУчетаЭДО;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СостояниеЭлектронногоДокумента";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_СостоянияЭД_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ОснованиеЭлектронногоДокумента", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("СсылкаНаОбъект");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ТипыЦен_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ТипыЦен_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ВидыЦен;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ТипыЦен";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ТипыЦен_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ТипыЦен_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Идентификатор",   "Идентификатор", 1);
	ДобавитьПКС(СвойстваШапки, "Наименование",    "Наименование");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС", "ЦенаВключаетНДС");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ФизическиеЛица_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ФизическиеЛица_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ФизическиеЛица";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "ФИО");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_ФизическиеЛицаГруппа");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ШтрихкодыНоменклатуры_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ШтрихкодыНоменклатуры_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.РегистрыСведений.Штрихкоды;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ШтрихкодыНоменклатуры";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ШтрихкодыНоменклатуры_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ШтрихкодыНоменклатуры_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Штрихкод", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Штрихкод");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ШтрихкодыУпаковокТоваров_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ШтрихкодыУпаковокТоваров_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ШтрихкодыУпаковокТоваров;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.МаркировкаУпаковки";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ШтрихкодыУпаковокТоваров_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ДатаУпаковки",      "ДатаУпаковки");
	ДобавитьПКС(СвойстваШапки, "ЗначениеШтрихкода", "Штрихкод");
	ДобавитьПКС(СвойстваШапки, "Количество",        "Количество");
	ДобавитьПКС(СвойстваШапки, "Номенклатура",      "Номенклатура", , "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",     "Ответственный", , "Справочник_Пользователи_Получение");
	ДобавитьПКС(СвойстваШапки, "Серия",             "Серия", , "Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваШапки, "ТипУпаковки",       "ТипУпаковки");
	ДобавитьПКС(СвойстваШапки, "ТипШтрихкода",      "ТипШтрихкода");
	ДобавитьПКС(СвойстваШапки, "Упаковка",          "Упаковка", , "Справочник_Упаковки");
	ДобавитьПКС(СвойстваШапки, "Характеристика",    "Характеристика", , "Справочник_ХарактеристикиНоменклатуры");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ВложенныеТовары", "ВложенныеТовары");
	ДобавитьПКС(СвойстваТЧ, "Количество",         "Количество");
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок", "КоличествоУпаковок");
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",       "Номенклатура", ,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Серия",              "Серия", ,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "Упаковка",           "Упаковка", ,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "Характеристика",     "Характеристика", ,"Справочник_ХарактеристикиНоменклатуры");

	ПравилоКонвертации.ПоляПоиска.Добавить("ЗначениеШтрихкода,Номенклатура,ТипУпаковки,ТипШтрихкода");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ШтрихкодыУпаковокТоваровИзСтр_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ШтрихкодыУпаковокТоваровИзСтр_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ШтрихкодыУпаковокТоваров;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ШтрихкодыУпаковокТоваровИзСтр_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ШтрихкодыУпаковокТоваровИзСтр_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ЗначениеШтрихкода", "ЗначениеШтрихкода");
	ДобавитьПКС(СвойстваШапки, "Номенклатура",      "Номенклатура", , "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваШапки, "Серия",             "Серия", , "Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваШапки, "ТипУпаковки",       "", 1);
	ДобавитьПКС(СвойстваШапки, "ТипШтрихкода",      "", 1);
	ДобавитьПКС(СвойстваШапки, "Упаковка",          "Упаковка", , "Справочник_Упаковки");
	ДобавитьПКС(СвойстваШапки, "Характеристика",    "Характеристика", , "Справочник_ХарактеристикиНоменклатуры");

	ПравилоКонвертации.ПоляПоиска.Добавить("ЗначениеШтрихкода,Номенклатура,Серия,ТипУпаковки,Упаковка,Характеристика");
	ПравилоКонвертации.ПоляПоиска.Добавить("ЗначениеШтрихкода,Номенклатура,ТипУпаковки");
	ПравилоКонвертации.ПоляПоиска.Добавить("ЗначениеШтрихкода");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ЭквайринговыеТерминалы_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ЭквайринговыеТерминалы_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ЭквайринговыеТерминалы;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ЭквайринговыеТерминалы";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ЭквайринговыеТерминалы_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ИспользоватьБезПодключенияОборудования", "", 1);
	ДобавитьПКС(СвойстваШапки, "Код",                                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Наименование",                           "Наименование");
	ДобавитьПКС(СвойстваШапки, "Эквайрер",                               "Эквайер", , "Справочник_Контрагенты_Получение");

КонецПроцедуры


#КонецОбласти
#Область ОтправкаИПолучение
Процедура ДобавитьПКО_Справочник_Банки(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Банки";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.КлассификаторБанков;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Банки";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Адрес",        "Адрес");
	ДобавитьПКС(СвойстваШапки, "Город",        "Город");
	ДобавитьПКС(СвойстваШапки, "Код",          "БИК");
	ДобавитьПКС(СвойстваШапки, "КоррСчет",     "КоррСчет");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Телефоны",     "Телефоны");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ВидыНоменклатуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ВидыНоменклатуры";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ВидыНоменклатуры;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ВидыНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_ВидыНоменклатуры_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ВидыНоменклатуры_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ВидыНоменклатуры_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                              "ТипНоменклатуры", 1, "ТипыНоменклатуры_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                              "ИспользоватьХарактеристики", 1);
	ДобавитьПКС(СвойстваШапки, "",                              "ИспользоватьСерии", 1);
	ДобавитьПКС(СвойстваШапки, "",                              "ИспользоватьСрокГодностиСерии", 1);
	ДобавитьПКС(СвойстваШапки, "ИспользованиеСерий",            "", 1);
	ДобавитьПКС(СвойстваШапки, "ИспользованиеХарактеристик",    "", 1);
	ДобавитьПКС(СвойстваШапки, "ИспользоватьСрокГодностиСерии", "", 1);
	ДобавитьПКС(СвойстваШапки, "Наименование",                  "Наименование");
	ДобавитьПКС(СвойстваШапки, "ТипНоменклатуры",               "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ТипНоменклатуры");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ДополнительныеРеквизиты(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ДополнительныеРеквизиты";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ДополнительныеРеквизиты";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ДополнительныеРеквизиты_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВладелецДополнительныхЗначений",     "ВладелецДополнительныхЗначений");
	ДобавитьПКС(СвойстваШапки, "ДополнительныеЗначенияИспользуются", "ДополнительныеЗначенияИспользуются");
	ДобавитьПКС(СвойстваШапки, "ДополнительныеЗначенияСВесом",       "ДополнительныеЗначенияСВесом");
	ДобавитьПКС(СвойстваШапки, "Заголовок",                          "Заголовок");
	ДобавитьПКС(СвойстваШапки, "ЗаголовокФормыВыбораЗначения",       "ЗаголовокФормыВыбораЗначения");
	ДобавитьПКС(СвойстваШапки, "ЗаголовокФормыЗначения",             "ЗаголовокФормыЗначения");
	ДобавитьПКС(СвойстваШапки, "ЗаполнятьОбязательно",               "ЗаполнятьОбязательно");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "МногострочноеПолеВвода",             "МногострочноеПолеВвода");
	ДобавитьПКС(СвойстваШапки, "Наименование",                       "Наименование");
	ДобавитьПКС(СвойстваШапки, "Подсказка",                          "Подсказка");
	ДобавитьПКС(СвойстваШапки, "ФорматСвойства",                     "ФорматСвойства");
	ДобавитьПКС(СвойстваШапки, "ЭтоДополнительноеСведение",          "ЭтоДополнительноеСведение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ЕдиницыИзмерения(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ЕдиницыИзмерения";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.БазовыеЕдиницыИзмерения;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ЕдиницыИзмерения";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",                "Код");
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное", "НаименованиеПолное");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ЗначенияДополнительныхРеквизитов(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ЗначенияДополнительныхРеквизитов";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ЗначенияСвойствОбъектов;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ЗначенияДополнительныхРеквизитов";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Вес",          "Вес");
	ДобавитьПКС(СвойстваШапки, "Владелец",     "Владелец", , "Справочник_ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,Владелец");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_КлассификаторТНВЭД_ЭлементСправочника(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_КлассификаторТНВЭД_ЭлементСправочника";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.КлассификаторТНВЭД;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.КодТНВЭД";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ЕдиницаИзмерения",    "ЕдиницаИзмерения", , "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваШапки, "Код",                 "КодТНВЭД");
	ДобавитьПКС(СвойстваШапки, "Наименование",        "Наименование");
	ДобавитьПКС(СвойстваШапки, "ПрослеживаемыйТовар", "ПрослеживаемыйТовар");
	ДобавитьПКС(СвойстваШапки, "Сырьевой",            "СырьевойТовар");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_КонтрагентыГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_КонтрагентыГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.КонтрагентыГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_КонтрагентыГруппа");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,Родитель");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_НоменклатураГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_НоменклатураГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.НоменклатураГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_НоменклатураГруппа");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СерииНоменклатуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СерииНоменклатуры";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СерииНоменклатуры;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СерииНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_СерииНоменклатуры_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",             "ВидНоменклатуры", 1, "Справочник_ВидыНоменклатуры");
	ДобавитьПКС(СвойстваШапки, "",             "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваШапки, "ГоденДо",      "ГоденДо");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Номер",        "СерийныйНомер");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,Номер");
	ПравилоКонвертации.ПоляПоиска.Добавить("Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СтраныМира(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СтраныМира";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СтраныМира;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СтраныМира";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",                "Код");
	ДобавитьПКС(СвойстваШапки, "КодАльфа2",          "КодАльфа2");
	ДобавитьПКС(СвойстваШапки, "КодАльфа3",          "КодАльфа3");
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное", "НаименованиеПолное");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Упаковки(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Упаковки";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.УпаковкиНоменклатуры;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Упаковки";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_Упаковки_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Упаковки_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                 "Высота", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "Глубина", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "Ширина", 1);
	ДобавитьПКС(СвойстваШапки, "Владелец",         "Номенклатура", 1);
	ДобавитьПКС(СвойстваШапки, "ЕдиницаИзмерения", "ЕдиницаИзмерения", , "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваШапки, "Коэффициент",      "Коэффициент");
	ДобавитьПКС(СвойстваШапки, "Наименование",     "Наименование");
	ДобавитьПКС(СвойстваШапки, "Объем",            "Объем");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,Владелец");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ФизическиеЛицаГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ФизическиеЛицаГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ФизическиеЛицаГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_ФизическиеЛицаГруппа");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ХарактеристикиНоменклатуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ХарактеристикиНоменклатуры";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ХарактеристикиНоменклатуры;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ХарактеристикиНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_ХарактеристикиНоменклатуры_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ХарактеристикиНоменклатуры_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ХарактеристикиНоменклатуры_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",             "ВидНоменклатуры", 1, "Справочник_ВидыНоменклатуры");
	ДобавитьПКС(СвойстваШапки, "",             "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваШапки, "Владелец",     "", 1);
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Наименование", "НаименованиеПолное", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,Наименование");
КонецПроцедуры

Процедура ДобавитьПКО_СтатьиДДС(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "СтатьиДДС";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СтатьиДвиженияДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СтатьиДДС";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,Наименование");
КонецПроцедуры


#КонецОбласти


Функция ДобавитьПКТЧ(ПравилоКонвертации, ИмяТЧКонфигурации, ИмяТЧФормата)
    Если ПравилоКонвертации.СвойстваТабличныхЧастей.Колонки.Количество() = 0 Тогда
        ОбменДаннымиXDTOСервер.ИнициализироватьСвойстваТабличныхЧастей(ПравилоКонвертации);
    КонецЕсли;
    КонвертацияТабличнойЧасти                = ПравилоКонвертации.СвойстваТабличныхЧастей.Добавить();
    КонвертацияТабличнойЧасти.ТЧКонфигурации = ИмяТЧКонфигурации;
    КонвертацияТабличнойЧасти.ТЧФормата      = ИмяТЧФормата;
    КонвертацияТабличнойЧасти.Свойства       = ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации();
    Возврат КонвертацияТабличнойЧасти.Свойства;
КонецФункции

Процедура ДобавитьПКС(РодительПКС, СвойствоКонфигурации, СвойствоФормата, ИспользуетсяАлгоритмКонвертации = 0, 
                    ПравилоКонвертацииСвойства = "")
	НоваяСтрока                                 = РодительПКС.Добавить();
	НоваяСтрока.СвойствоКонфигурации            = СвойствоКонфигурации;
	НоваяСтрока.СвойствоФормата                 = СвойствоФормата;
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = ?(ИспользуетсяАлгоритмКонвертации = 0, Ложь, Истина);
	НоваяСтрока.ПравилоКонвертацииСвойства      = ПравилоКонвертацииСвойства;
КонецПроцедуры

#Область ОбработчикиКонвертации
#Область Остатки
Функция ПОД_Документ_ОстаткиБезналичныхДенежныхСредств_ВыборкаДанных(КомпонентыОбмена)
	ДатаОстатков = КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ДенежныеСредстваБезналичныеОстатки.Организация КАК Организация,
	|	ДенежныеСредстваБезналичныеОстатки.БанковскийСчет КАК БанковскийСчет,
	|	""Расчетный"" КАК ВидБанковскогоСчета,
	|	ДенежныеСредстваБезналичныеОстатки.СуммаОстаток КАК СуммаРегл,
	|	ДенежныеСредстваБезналичныеОстатки.СуммаОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваБезналичные.Остатки(&ДатаОстатков, ) КАК ДенежныеСредстваБезналичныеОстатки
	|ГДЕ
	|	ДенежныеСредстваБезналичныеОстатки.СуммаОстаток > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДенежныеСредстваБезналичныеОстатки.Организация
	|
	|";
	
	Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
	
	СтруктураДанныеВалюты = Новый Структура;
	СтруктураДанныеВалюты.Вставить("Код", 643);
	СтруктураДанныеВалюты.Вставить("Наименование", "RUB");
	
	МассивВыборки = Новый Массив;
	
	ТекОрганизация = Неопределено;
	ПерваяИтерацияЗакончена = Ложь;
	
	ДанныеИБ = Неопределено;
	ДенежныеСредства = Неопределено;
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ТекОрганизация <> ВыборкаДетальныеЗаписи.Организация Тогда
			ТекОрганизация = ВыборкаДетальныеЗаписи.Организация;
			
			// Окончание группировки.
			Если ПерваяИтерацияЗакончена И ДенежныеСредства.Количество() > 0 Тогда
				ДанныеИБ.ДенежныеСредства = ДенежныеСредства;
				МассивВыборки.Добавить(ДанныеИБ);
			КонецЕсли;
			
			// Начало группировки.
			ДанныеИБ = Новый Структура("Дата, Организация, ДенежныеСредства");
			ЗаполнитьЗначенияСвойств(ДанныеИБ, ВыборкаДетальныеЗаписи);
			ДанныеИБ.Дата = ДатаОстатков;
			
			ДенежныеСредства = Новый ТаблицаЗначений;
			Колонки = ДенежныеСредства.Колонки;
			Колонки.Добавить("БанковскийСчет");
			Колонки.Добавить("ВидБанковскогоСчета");
			Колонки.Добавить("Валюта");	
			Колонки.Добавить("СуммаРегл");
			Колонки.Добавить("Сумма");
		КонецЕсли;
		
		НоваяСтрока = ДенежныеСредства.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
	
		НоваяСтрока.Валюта = СтруктураДанныеВалюты;
		
		Если Не ПерваяИтерацияЗакончена Тогда
			ПерваяИтерацияЗакончена = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	// Окончание группировки.
	Если Не РезультатЗапроса.Пустой() И ДенежныеСредства.Количество() > 0 Тогда
		ДанныеИБ.ДенежныеСредства = ДенежныеСредства;
		МассивВыборки.Добавить(ДанныеИБ);
	КонецЕсли;
	
	Возврат МассивВыборки;
КонецФункции
Функция ПОД_Документ_ОстаткиНаличныхДенежныхСредств_ВыборкаДанных(КомпонентыОбмена)
	ДатаОстатков = КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДенежныеСредстваНаличныеОстатки.Организация КАК Организация,
	|	ДенежныеСредстваНаличныеОстатки.Касса КАК Касса,
	|	ДенежныеСредстваНаличныеОстатки.СуммаОстаток КАК СуммаРегл,
	|	ДенежныеСредстваНаличныеОстатки.СуммаОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваНаличные.Остатки(&ДатаОстатков, Касса.КассаУправляющейСистемы = ЛОЖЬ) КАК ДенежныеСредстваНаличныеОстатки
	|ГДЕ
	|	ДенежныеСредстваНаличныеОстатки.СуммаОстаток > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДенежныеСредстваНаличныеОстатки.Организация,
	|	ДенежныеСредстваНаличныеОстатки.Касса
	|";
	
	Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
	
	СтруктураДанныеВалюты = Новый Структура;
	СтруктураДанныеВалюты.Вставить("Код", 643);
	СтруктураДанныеВалюты.Вставить("Наименование", "RUB");
	
	МассивВыборки = Новый Массив;
	
	ТекОрганизация = Неопределено;
	ТекКасса = Неопределено;
	ПерваяИтерацияЗакончена = Ложь;
	
	ДанныеИБ = Неопределено;
	ДенежныеСредства = Неопределено;
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ТекОрганизация <> ВыборкаДетальныеЗаписи.Организация Тогда
			ТекОрганизация = ВыборкаДетальныеЗаписи.Организация;
			ТекКасса = Неопределено;
		КонецЕсли;
		
		Если ТекКасса <> ВыборкаДетальныеЗаписи.Касса Тогда
			ТекКасса = ВыборкаДетальныеЗаписи.Касса;
			
			// Окончание группировки.
			Если ПерваяИтерацияЗакончена И ДенежныеСредства.Количество() > 0 Тогда
				ДанныеИБ.ДенежныеСредства = ДенежныеСредства;
				МассивВыборки.Добавить(ДанныеИБ);
			КонецЕсли;
			
			// Начало группировки.
			ДанныеИБ = Новый Структура("Дата, Организация, Касса, ДенежныеСредства");
			ЗаполнитьЗначенияСвойств(ДанныеИБ, ВыборкаДетальныеЗаписи);
			ДанныеИБ.Дата = ДатаОстатков;
			
			ДенежныеСредства = Новый ТаблицаЗначений;
			Колонки = ДенежныеСредства.Колонки;
			Колонки.Добавить("Валюта");	
			Колонки.Добавить("СуммаРегл");
			Колонки.Добавить("Сумма");
		КонецЕсли;
		
		НоваяСтрока = ДенежныеСредства.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
	
		НоваяСтрока.Валюта = СтруктураДанныеВалюты;
		
		Если Не ПерваяИтерацияЗакончена Тогда
			ПерваяИтерацияЗакончена = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	// Окончание группировки.
	Если Не РезультатЗапроса.Пустой() И ДенежныеСредства.Количество() > 0 Тогда
		ДанныеИБ.ДенежныеСредства = ДенежныеСредства;
		МассивВыборки.Добавить(ДанныеИБ);
	КонецЕсли;
	
	Возврат МассивВыборки;
КонецФункции
Функция ПОД_Документ_ОстаткиРасчетыСПокупателямиАвансы_ВыборкаДанных(КомпонентыОбмена)
	ДатаОстатков = КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков;
	
	ТаблицаОстатков = РасчетыСКлиентамиОстатки(ДатаОстатков, Истина);
	
	СтруктураДанныеВалюты = Новый Структура;
	СтруктураДанныеВалюты.Вставить("Код", 643);
	СтруктураДанныеВалюты.Вставить("Наименование", "RUB");
	
	МассивВыборки = Новый Массив;
	
	ТекущаяОрганизация = Неопределено;
	ДанныеИБ = Неопределено;
	
	Для Каждого Строка Из ТаблицаОстатков Цикл
		Если ТекущаяОрганизация = Неопределено Или Строка.Организация <> ТекущаяОрганизация Тогда
			ТекущаяОрганизация = Строка.Организация;
			
			Если ДанныеИБ <> Неопределено И ДанныеИБ.Расчеты.Количество()>0 Тогда
				МассивВыборки.Добавить(ДанныеИБ);
			КонецЕсли;
					
			ДанныеИБ = Новый Структура("Дата, Организация, Расчеты");
			ДанныеИБ.Дата = ДатаОстатков;
			ДанныеИБ.Организация = Строка.Организация;
			
			ДанныеИБ.Расчеты = Новый ТаблицаЗначений;
			Колонки = ДанныеИБ.Расчеты.Колонки;
			Колонки.Добавить("Контрагент");
			Колонки.Добавить("ВалютаВзаиморасчетов");
			Колонки.Добавить("СуммаРегл");
			Колонки.Добавить("Сумма");
		КонецЕсли;
		
		Если Строка.Сумма <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ДанныеИБ.Расчеты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.ВалютаВзаиморасчетов = СтруктураДанныеВалюты;
		
		Если НоваяСтрока.СуммаРегл = 0 Или Не ЗначениеЗаполнено(НоваяСтрока.СуммаРегл) Тогда
			НоваяСтрока.СуммаРегл = НоваяСтрока.Сумма;
		КонецЕсли;		
		
	КонецЦикла;
	
	Если ДанныеИБ <> Неопределено И ДанныеИБ.Расчеты.Количество()>0 Тогда
		МассивВыборки.Добавить(ДанныеИБ);
	КонецЕсли;
	
	Возврат МассивВыборки;
КонецФункции
Функция ПОД_Документ_ОстаткиРасчетыСПокупателямиДолги_ВыборкаДанных(КомпонентыОбмена)
	ДатаОстатков = КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков;
	
	ТаблицаОстатков = РасчетыСКлиентамиОстатки(ДатаОстатков, Ложь);
	
	СтруктураДанныеВалюты = Новый Структура;
	СтруктураДанныеВалюты.Вставить("Код", 643);
	СтруктураДанныеВалюты.Вставить("Наименование", "RUB");
	
	МассивВыборки = Новый Массив;
	
	ТекущаяОрганизация = Неопределено;
	ДанныеИБ = Неопределено;
	
	Для Каждого Строка Из ТаблицаОстатков Цикл
		Если ТекущаяОрганизация = Неопределено Или Строка.Организация <> ТекущаяОрганизация Тогда
			ТекущаяОрганизация = Строка.Организация;
			
			Если ДанныеИБ <> Неопределено И ДанныеИБ.Расчеты.Количество()>0 Тогда
				МассивВыборки.Добавить(ДанныеИБ);
			КонецЕсли;
					
			ДанныеИБ = Новый Структура("Дата, Организация, Расчеты");
			ДанныеИБ.Дата = ДатаОстатков;
			ДанныеИБ.Организация = Строка.Организация;
			
			ДанныеИБ.Расчеты = Новый ТаблицаЗначений;
			Колонки = ДанныеИБ.Расчеты.Колонки;
			Колонки.Добавить("Контрагент");
			Колонки.Добавить("ВалютаВзаиморасчетов");
			Колонки.Добавить("СуммаРегл");
			Колонки.Добавить("Сумма");
		КонецЕсли;
		
		Если Строка.Сумма <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ДанныеИБ.Расчеты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.ВалютаВзаиморасчетов = СтруктураДанныеВалюты;
		
		Если НоваяСтрока.СуммаРегл = 0 Или Не ЗначениеЗаполнено(НоваяСтрока.СуммаРегл) Тогда
			НоваяСтрока.СуммаРегл = НоваяСтрока.Сумма;
		КонецЕсли;		
		
	КонецЦикла;
	
	Если ДанныеИБ <> Неопределено И ДанныеИБ.Расчеты.Количество()>0 Тогда
		МассивВыборки.Добавить(ДанныеИБ);
	КонецЕсли;
	
	Возврат МассивВыборки;
КонецФункции
Функция ПОД_Документ_ОстаткиРасчетыСПоставщикамиАвансы_ВыборкаДанных(КомпонентыОбмена)
	ДатаОстатков = КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков;
	
	ТаблицаОстатков = РасчетыСПоставщикамиОстатки(ДатаОстатков);
	
	ТаблицаОстатков.Колонки.Аванс.Имя = "Сумма";
	
	СтруктураДанныеВалюты = Новый Структура;
	СтруктураДанныеВалюты.Вставить("Код", 643);
	СтруктураДанныеВалюты.Вставить("Наименование", "RUB");
	
	МассивВыборки = Новый Массив;
	
	ТекущаяОрганизация = Неопределено;
	ДанныеИБ = Неопределено;
	
	Для Каждого Строка Из ТаблицаОстатков Цикл
		Если ТекущаяОрганизация = Неопределено Или Строка.Организация <> ТекущаяОрганизация Тогда
			ТекущаяОрганизация = Строка.Организация;
			
			Если ДанныеИБ <> Неопределено И ДанныеИБ.Расчеты.Количество()>0 Тогда
				МассивВыборки.Добавить(ДанныеИБ);
			КонецЕсли;
					
			ДанныеИБ = Новый Структура("Дата, Организация, Расчеты");
			ДанныеИБ.Дата = ДатаОстатков;
			ДанныеИБ.Организация = Строка.Организация;
			
			ДанныеИБ.Расчеты = Новый ТаблицаЗначений;
			Колонки = ДанныеИБ.Расчеты.Колонки;
			Колонки.Добавить("Контрагент");
			Колонки.Добавить("ВалютаВзаиморасчетов");
			Колонки.Добавить("СуммаРегл");
			Колонки.Добавить("Сумма");
		КонецЕсли;
		
		Если Строка.Сумма <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ДанныеИБ.Расчеты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.ВалютаВзаиморасчетов = СтруктураДанныеВалюты;
		
		Если НоваяСтрока.СуммаРегл = 0 Или Не ЗначениеЗаполнено(НоваяСтрока.СуммаРегл) Тогда
			НоваяСтрока.СуммаРегл = НоваяСтрока.Сумма;
		КонецЕсли;		
		
	КонецЦикла;
	
	Если ДанныеИБ <> Неопределено И ДанныеИБ.Расчеты.Количество()>0 Тогда
		МассивВыборки.Добавить(ДанныеИБ);
	КонецЕсли;
	
	Возврат МассивВыборки;
КонецФункции
Функция ПОД_Документ_ОстаткиРасчетыСПоставщикамиДолги_ВыборкаДанных(КомпонентыОбмена)
	ДатаОстатков = КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков;
	
	ТаблицаОстатков = РасчетыСПоставщикамиОстатки(ДатаОстатков);
	
	ТаблицаОстатков.Колонки.Долг.Имя = "Сумма";
	
	СтруктураДанныеВалюты = Новый Структура;
	СтруктураДанныеВалюты.Вставить("Код", 643);
	СтруктураДанныеВалюты.Вставить("Наименование", "RUB");
	
	МассивВыборки = Новый Массив;
	
	ТекущаяОрганизация = Неопределено;
	ДанныеИБ = Неопределено;
	
	Для Каждого Строка Из ТаблицаОстатков Цикл
		Если ТекущаяОрганизация = Неопределено Или Строка.Организация <> ТекущаяОрганизация Тогда
			ТекущаяОрганизация = Строка.Организация;
			
			Если ДанныеИБ <> Неопределено И ДанныеИБ.Расчеты.Количество()>0 Тогда
				МассивВыборки.Добавить(ДанныеИБ);
			КонецЕсли;
					
			ДанныеИБ = Новый Структура("Дата, Организация, Расчеты");
			ДанныеИБ.Дата = ДатаОстатков;
			ДанныеИБ.Организация = Строка.Организация;
			
			ДанныеИБ.Расчеты = Новый ТаблицаЗначений;
			Колонки = ДанныеИБ.Расчеты.Колонки;
			Колонки.Добавить("Контрагент");
			Колонки.Добавить("ВалютаВзаиморасчетов");
			Колонки.Добавить("СуммаРегл");
			Колонки.Добавить("Сумма");
		КонецЕсли;
		
		Если Строка.Сумма <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ДанныеИБ.Расчеты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.ВалютаВзаиморасчетов = СтруктураДанныеВалюты;
		
		Если НоваяСтрока.СуммаРегл = 0 Или Не ЗначениеЗаполнено(НоваяСтрока.СуммаРегл) Тогда
			НоваяСтрока.СуммаРегл = НоваяСтрока.Сумма;
		КонецЕсли;		
		
	КонецЦикла;
	
	Если ДанныеИБ <> Неопределено И ДанныеИБ.Расчеты.Количество()>0 Тогда
		МассивВыборки.Добавить(ДанныеИБ);
	КонецЕсли;
	
	Возврат МассивВыборки;
КонецФункции
Функция ПОД_Документ_ОстаткиСобственныхТМЦ_ВыборкаДанных(КомпонентыОбмена)
	ДатаОстатков = КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков;
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Остатки.Склад.Организация КАК Организация,
		|	Остатки.Склад.Магазин КАК Склад,
		|	Остатки.Номенклатура КАК Номенклатура,
		|	Остатки.Характеристика КАК Характеристика,
		|	Остатки.КоличествоОстаток КАК Количество,
		|	Остатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	""СобственныеТовары"" КАК ВидЗапасов,
		|	ЕСТЬNULL(СебестоимостьНоменклатуры.Цена, 0) * Остатки.КоличествоОстаток КАК СуммаБезНДС
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаОстатков, ) КАК Остатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СебестоимостьНоменклатуры КАК СебестоимостьНоменклатуры
		|		ПО (Остатки.Номенклатура = СебестоимостьНоменклатуры.Номенклатура)
		|			И (Остатки.Характеристика = СебестоимостьНоменклатуры.Характеристика)
		|			И (СебестоимостьНоменклатуры.Регистратор В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					Себестоимость.Регистратор
		|				ИЗ
		|					РегистрСведений.СебестоимостьНоменклатуры КАК Себестоимость
		|				ГДЕ
		|					(Себестоимость.Магазин = Остатки.Склад.Магазин
		|						ИЛИ Себестоимость.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка))
		|					И Себестоимость.Номенклатура = Остатки.Номенклатура
		|					И Себестоимость.Характеристика = Остатки.Характеристика
		|					И (Себестоимость.Период <= &ДатаОстатков
		|						ИЛИ &ДатаОстатков = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
		|				УПОРЯДОЧИТЬ ПО
		|					Себестоимость.Период УБЫВ,
		|					Себестоимость.Регистратор УБЫВ,
		|					ВЫБОР
		|						КОГДА Себестоимость.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
		|							ТОГДА 0
		|						ИНАЧЕ 1
		|					КОНЕЦ))
		|			И (СебестоимостьНоменклатуры.Магазин В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					Себестоимость.Магазин
		|				ИЗ
		|					РегистрСведений.СебестоимостьНоменклатуры КАК Себестоимость
		|				ГДЕ
		|					(Себестоимость.Магазин = Остатки.Склад.Магазин
		|						ИЛИ Себестоимость.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка))
		|					И Себестоимость.Номенклатура = Остатки.Номенклатура
		|					И Себестоимость.Характеристика = Остатки.Характеристика
		|					И (Себестоимость.Период <= &ДатаОстатков
		|						ИЛИ &ДатаОстатков = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
		|				УПОРЯДОЧИТЬ ПО
		|					Себестоимость.Период УБЫВ,
		|					Себестоимость.Регистратор УБЫВ,
		|					ВЫБОР
		|						КОГДА Себестоимость.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
		|							ТОГДА 0
		|						ИНАЧЕ 1
		|					КОНЕЦ))
		|ГДЕ
		|	ЕСТЬNULL(СебестоимостьНоменклатуры.Цена, 0) * Остатки.КоличествоОстаток > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	Склад
		|";
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ДатаОстатков",ДатаОстатков); 
	
	МассивВыборки = Новый Массив;
	
	ТекОрганизация = Неопределено;
	ТекСклад = Неопределено;
	ПерваяИтерацияЗакончена = Ложь;
	
	ДанныеИБ = Неопределено;
	ТМЦ = Неопределено;
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ТекОрганизация <> ВыборкаДетальныеЗаписи.Организация Тогда
			ТекОрганизация = ВыборкаДетальныеЗаписи.Организация;
			ТекСклад = Неопределено;
		КонецЕсли;
		
		Если ТекСклад <> ВыборкаДетальныеЗаписи.Склад Тогда
			ТекСклад = ВыборкаДетальныеЗаписи.Склад;
			
			// Окончание группировки.
			Если ПерваяИтерацияЗакончена И ТМЦ.Количество() > 0 Тогда
				ДанныеИБ.ТМЦ = ТМЦ;
				МассивВыборки.Добавить(ДанныеИБ);
			КонецЕсли;
			
			// Начало группировки.
			ДанныеИБ = Новый Структура("Дата, Организация, Склад, ТМЦ");
			ЗаполнитьЗначенияСвойств(ДанныеИБ, ВыборкаДетальныеЗаписи);
			ДанныеИБ.Дата = ДатаОстатков;
			
			ТМЦ = Новый ТаблицаЗначений;
			Колонки = ТМЦ.Колонки;
			Колонки.Добавить("Номенклатура");
			Колонки.Добавить("Характеристика");
			Колонки.Добавить("Количество");
			Колонки.Добавить("НомерГТД");
			Колонки.Добавить("ЕдиницаИзмерения");
			Колонки.Добавить("ВидЗапасов");
			Колонки.Добавить("СуммаБезНДС");
		КонецЕсли;
		
		Если ВыборкаДетальныеЗаписи.Количество > 0
			И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Номенклатура) Тогда
			НоваяСтрока = ТМЦ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		КонецЕсли;
		
		Если Не ПерваяИтерацияЗакончена Тогда
			ПерваяИтерацияЗакончена = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	// Окончание группировки.
	Если Не РезультатЗапроса.Пустой() И ТМЦ.Количество() > 0 Тогда
		ДанныеИБ.ТМЦ = ТМЦ;
		МассивВыборки.Добавить(ДанныеИБ);
	КонецЕсли;
	
	Возврат МассивВыборки;
КонецФункции
Функция ПОД_Документ_ОстаткиТоваровПринятыхНаКомиссию_ВыборкаДанных(КомпонентыОбмена)
	ДатаОстатков = КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТоварыОрганизацийОстатки.Номенклатура КАК Номенклатура,
		|	ТоварыОрганизацийОстатки.Характеристика КАК Характеристика,
		|	ТоварыОрганизацийОстатки.Склад КАК Склад,
		|	ТоварыОрганизацийОстатки.Организация КАК Организация,
		|	ТоварыОрганизацийОстатки.Поставщик КАК Поставщик,
		|	ТоварыОрганизацийОстатки.Договор КАК Договор,
		|	ТоварыОрганизацийОстатки.КоличествоОстаток КАК КоличествоОстаток
		|ПОМЕСТИТЬ ТоварыПринятыеНаКомиссию
		|ИЗ
		|	РегистрНакопления.ТоварыОрганизаций.Остатки(&ДатаОстатков, ) КАК ТоварыОрганизацийОстатки
		|ГДЕ
		|	ТоварыОрганизацийОстатки.Поставщик <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыОрганизацийОбороты.Номенклатура КАК Номенклатура,
		|	ТоварыОрганизацийОбороты.Характеристика КАК Характеристика,
		|	ТоварыОрганизацийОбороты.Склад КАК Склад,
		|	ТоварыОрганизацийОбороты.Организация КАК Организация,
		|	ТоварыОрганизацийОбороты.Поставщик КАК Поставщик,
		|	ТоварыОрганизацийОбороты.Договор КАК Договор,
		|	МАКСИМУМ(ОприходованиеТоваров.Цена) КАК Цена
		|ПОМЕСТИТЬ ЦеныТоваров
		|ИЗ
		|	РегистрНакопления.ТоварыОрганизаций.Обороты(, &ДатаОстатков, Авто, Поставщик <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК ТоварыОрганизацийОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОприходованиеТоваров.Товары КАК ОприходованиеТоваров
		|		ПО (ТоварыОрганизацийОбороты.Номенклатура = ОприходованиеТоваров.Номенклатура)
		|			И (ТоварыОрганизацийОбороты.Характеристика = ОприходованиеТоваров.Характеристика)
		|			И (ТоварыОрганизацийОбороты.Регистратор = ОприходованиеТоваров.Ссылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыОрганизацийОбороты.Номенклатура,
		|	ТоварыОрганизацийОбороты.Характеристика,
		|	ТоварыОрганизацийОбороты.Склад,
		|	ТоварыОрганизацийОбороты.Организация,
		|	ТоварыОрганизацийОбороты.Поставщик,
		|	ТоварыОрганизацийОбороты.Договор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТоварыОрганизацийОбороты.Номенклатура,
		|	ТоварыОрганизацийОбороты.Характеристика,
		|	ТоварыОрганизацийОбороты.Склад,
		|	ТоварыОрганизацийОбороты.Организация,
		|	ТоварыОрганизацийОбороты.Поставщик,
		|	ТоварыОрганизацийОбороты.Договор,
		|	МАКСИМУМ(ПоступлениеТоваровТовары.Цена)
		|ИЗ
		|	РегистрНакопления.ТоварыОрганизаций.Обороты(, &ДатаОстатков, Авто, Поставщик <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК ТоварыОрганизацийОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
		|		ПО ТоварыОрганизацийОбороты.Номенклатура = ПоступлениеТоваровТовары.Номенклатура
		|			И ТоварыОрганизацийОбороты.Характеристика = ПоступлениеТоваровТовары.Характеристика
		|			И ТоварыОрганизацийОбороты.Регистратор = ПоступлениеТоваровТовары.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыОрганизацийОбороты.Номенклатура,
		|	ТоварыОрганизацийОбороты.Характеристика,
		|	ТоварыОрганизацийОбороты.Склад,
		|	ТоварыОрганизацийОбороты.Организация,
		|	ТоварыОрганизацийОбороты.Поставщик,
		|	ТоварыОрганизацийОбороты.Договор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТоварыОрганизацийОбороты.Номенклатура,
		|	ТоварыОрганизацийОбороты.Характеристика,
		|	ТоварыОрганизацийОбороты.Склад,
		|	ТоварыОрганизацийОбороты.Организация,
		|	ТоварыОрганизацийОбороты.Поставщик,
		|	ТоварыОрганизацийОбороты.Договор,
		|	МАКСИМУМ(ПеремещениеТоваровТовары.Цена)
		|ИЗ
		|	РегистрНакопления.ТоварыОрганизаций.Обороты(, &ДатаОстатков, Авто, Поставщик <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК ТоварыОрганизацийОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		|		ПО ТоварыОрганизацийОбороты.Номенклатура = ПеремещениеТоваровТовары.Номенклатура
		|			И ТоварыОрганизацийОбороты.Характеристика = ПеремещениеТоваровТовары.Характеристика
		|			И ТоварыОрганизацийОбороты.Регистратор = ПеремещениеТоваровТовары.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыОрганизацийОбороты.Номенклатура,
		|	ТоварыОрганизацийОбороты.Характеристика,
		|	ТоварыОрганизацийОбороты.Склад,
		|	ТоварыОрганизацийОбороты.Организация,
		|	ТоварыОрганизацийОбороты.Поставщик,
		|	ТоварыОрганизацийОбороты.Договор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыПринятыеНаКомиссию.Организация КАК Организация,
		|	ТоварыПринятыеНаКомиссию.Склад.Магазин КАК Склад,
		|	ТоварыПринятыеНаКомиссию.Поставщик КАК Контрагент,
		|	ТоварыПринятыеНаКомиссию.Договор КАК Договор,
		|	ТоварыПринятыеНаКомиссию.Номенклатура КАК Номенклатура,
		|	ТоварыПринятыеНаКомиссию.Характеристика КАК Характеристика,
		|	ТоварыПринятыеНаКомиссию.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТоварыПринятыеНаКомиссию.КоличествоОстаток КАК Количество,
		|	МАКСИМУМ(ВЫРАЗИТЬ(ЦеныТоваров.Цена * ТоварыПринятыеНаКомиссию.КоличествоОстаток КАК ЧИСЛО(15, 2))) КАК СуммаБезНДС
		|ИЗ
		|	ТоварыПринятыеНаКомиссию КАК ТоварыПринятыеНаКомиссию
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныТоваров КАК ЦеныТоваров
		|		ПО ТоварыПринятыеНаКомиссию.Организация = ЦеныТоваров.Организация
		|			И ТоварыПринятыеНаКомиссию.Склад = ЦеныТоваров.Склад
		|			И ТоварыПринятыеНаКомиссию.Поставщик = ЦеныТоваров.Поставщик
		|			И ТоварыПринятыеНаКомиссию.Договор = ЦеныТоваров.Договор
		|			И ТоварыПринятыеНаКомиссию.Номенклатура = ЦеныТоваров.Номенклатура
		|			И ТоварыПринятыеНаКомиссию.Характеристика = ЦеныТоваров.Характеристика
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыПринятыеНаКомиссию.Номенклатура,
		|	ТоварыПринятыеНаКомиссию.Характеристика,
		|	ТоварыПринятыеНаКомиссию.Склад,
		|	ТоварыПринятыеНаКомиссию.Организация,
		|	ТоварыПринятыеНаКомиссию.Поставщик,
		|	ТоварыПринятыеНаКомиссию.Договор,
		|	ТоварыПринятыеНаКомиссию.КоличествоОстаток,
		|	ТоварыПринятыеНаКомиссию.Склад.Магазин,
		|	ТоварыПринятыеНаКомиссию.Номенклатура.ЕдиницаИзмерения
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	Склад,
		|	Контрагент,
		|	Договор
		|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ДатаОстатков",ДатаОстатков); 
	
	МассивВыборки = Новый Массив;
	
	ТекОрганизация = Неопределено;
	ТекСклад = Неопределено;
	ТекКонтрагент = Неопределено;
	ТекДоговор = Неопределено;
	ПерваяИтерацияЗакончена = Ложь;
	
	ДанныеИБ = Неопределено;
	ТМЦ = Неопределено;
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ТекОрганизация <> ВыборкаДетальныеЗаписи.Организация Тогда
			ТекОрганизация = ВыборкаДетальныеЗаписи.Организация;
			ТекСклад = Неопределено;
			ТекКонтрагент = Неопределено;
			ТекДоговор = Неопределено;
		КонецЕсли;
		
		Если ТекСклад <> ВыборкаДетальныеЗаписи.Склад Тогда
			ТекСклад = ВыборкаДетальныеЗаписи.Склад;
			ТекКонтрагент = Неопределено;
			ТекДоговор = Неопределено;
		КонецЕсли;
		
		Если ТекКонтрагент <> ВыборкаДетальныеЗаписи.Контрагент Тогда
			ТекКонтрагент = ВыборкаДетальныеЗаписи.Контрагент;
			ТекДоговор = Неопределено;
		КонецЕсли;
		
		
		Если ТекДоговор <> ВыборкаДетальныеЗаписи.Договор Тогда
			ТекДоговор = ВыборкаДетальныеЗаписи.Договор;
			
			// Окончание группировки.
			Если ПерваяИтерацияЗакончена И ТМЦ.Количество() > 0 Тогда
				ДанныеИБ.Товары = ТМЦ;
				МассивВыборки.Добавить(ДанныеИБ);
			КонецЕсли;
			
			// Начало группировки.
			ДанныеИБ = Новый Структура("Дата, Организация, Склад, Товары, Контрагент, Договор");
			ЗаполнитьЗначенияСвойств(ДанныеИБ, ВыборкаДетальныеЗаписи);
			ДанныеИБ.Дата = ДатаОстатков;
			
			ТМЦ = Новый ТаблицаЗначений;
			Колонки = ТМЦ.Колонки;
			Колонки.Добавить("Номенклатура");
			Колонки.Добавить("Характеристика");		
			Колонки.Добавить("СуммаБезНДС");
			Колонки.Добавить("Количество");
			Колонки.Добавить("ЕдиницаИзмерения");
		КонецЕсли;
		
		Если ВыборкаДетальныеЗаписи.Количество > 0
			И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Номенклатура)
			И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Контрагент)
			И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Договор) Тогда
			НоваяСтрока = ТМЦ.Добавить();	
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		КонецЕсли;
		
		Если Не ПерваяИтерацияЗакончена Тогда
			ПерваяИтерацияЗакончена = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	// Окончание группировки.
	Если Не РезультатЗапроса.Пустой() И ТМЦ.Количество() > 0 Тогда
		ДанныеИБ.Товары = ТМЦ;
		МассивВыборки.Добавить(ДанныеИБ);
	КонецЕсли;
	
	Возврат МассивВыборки;
КонецФункции
Процедура ПКО_Документ_ОстаткиБезналичныхДенежныхСредств_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ДенежныеСредства", ДанныеИБ.ДенежныеСредства);
КонецПроцедуры
Процедура ПКО_Документ_ОстаткиНаличныхДенежныхСредств_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ДенежныеСредства", ДанныеИБ.ДенежныеСредства);
	
	ОписаниеКасса = Новый Структура;
	ОписаниеКасса.Вставить("Ссылка",ДанныеИБ.Касса);
	
	Касса = Новый Структура; 
	Касса.Вставить("Касса",ОписаниеКасса); 
	
	ДанныеXDTO.Вставить("AdditionalInfo", Касса);
КонецПроцедуры
Процедура ПКО_Документ_ОстаткиРасчетыСПокупателямиАвансы_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Расчеты", ДанныеИБ.Расчеты);
	
	// Договор
	Если ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		СтруктураДанныеДоговора = Новый Структура("Наименование, Дата, Контрагент, Организация");
		
		ЗаполнитьЗначенияСвойств(СтруктураДанныеДоговора, ДанныеИБ);
		
		СтруктураДанныеДоговора.Вставить("Наименование", "Договор по умолчанию");
		СтруктураДанныеДоговора.Вставить("Дата", ДанныеИБ.Дата);
		СтруктураДанныеДоговора.Вставить("ВидДоговора", "СПокупателем");
	КонецЕсли;
	
	ДанныеXDTO.Расчеты.Колонки.Добавить("Договор");
	
	Для Каждого Строка Из ДанныеXDTO.Расчеты Цикл
		СтруктураДанныеДоговора.Контрагент = Строка.Контрагент;
	
		Инструкция = Новый Структура;
		Инструкция.Вставить("Значение", СтруктураДанныеДоговора);
		Инструкция.Вставить("ИмяПКО", "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
		
		Строка.Договор = Инструкция;
	КонецЦикла;
КонецПроцедуры
Процедура ПКО_Документ_ОстаткиРасчетыСПокупателямиДолги_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Расчеты", ДанныеИБ.Расчеты);
	
	// Договор
	Если ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		СтруктураДанныеДоговора = Новый Структура("Наименование, Дата, Контрагент, Организация");
		
		ЗаполнитьЗначенияСвойств(СтруктураДанныеДоговора, ДанныеИБ);
		
		СтруктураДанныеДоговора.Вставить("Наименование", "Договор по умолчанию");
		СтруктураДанныеДоговора.Вставить("Дата", ДанныеИБ.Дата);
		СтруктураДанныеДоговора.Вставить("ВидДоговора", "СПокупателем");
	КонецЕсли;
	
	ДанныеXDTO.Расчеты.Колонки.Добавить("Договор");
	
	Для Каждого Строка Из ДанныеXDTO.Расчеты Цикл
		СтруктураДанныеДоговора.Контрагент = Строка.Контрагент;
	
		Инструкция = Новый Структура;
		Инструкция.Вставить("Значение", СтруктураДанныеДоговора);
		Инструкция.Вставить("ИмяПКО", "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
		
		Строка.Договор = Инструкция;
	КонецЦикла;
КонецПроцедуры
Процедура ПКО_Документ_ОстаткиРасчетыСПоставщикамиАвансы_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Расчеты", ДанныеИБ.Расчеты);
	
	// Договор
	Если ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		СтруктураДанныеДоговора = Новый Структура("Наименование, Дата, Контрагент, Организация");
		
		ЗаполнитьЗначенияСвойств(СтруктураДанныеДоговора, ДанныеИБ);
		
		СтруктураДанныеДоговора.Вставить("Наименование", "Договор по умолчанию");
		СтруктураДанныеДоговора.Вставить("Дата", ДанныеИБ.Дата);
		СтруктураДанныеДоговора.Вставить("ВидДоговора", "СПоставщиком");
	КонецЕсли;
	
	ДанныеXDTO.Расчеты.Колонки.Добавить("Договор");
	
	Для Каждого Строка Из ДанныеXDTO.Расчеты Цикл
		СтруктураДанныеДоговора.Контрагент = Строка.Контрагент;
	
		Инструкция = Новый Структура;
		Инструкция.Вставить("Значение", СтруктураДанныеДоговора);
		Инструкция.Вставить("ИмяПКО", "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
		
		Строка.Договор = Инструкция;
	КонецЦикла;
КонецПроцедуры
Процедура ПКО_Документ_ОстаткиРасчетыСПоставщикамиДолги_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Расчеты", ДанныеИБ.Расчеты);
	
	// Договор
	Если ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		СтруктураДанныеДоговора = Новый Структура("Наименование, Дата, Контрагент, Организация");
		
		ЗаполнитьЗначенияСвойств(СтруктураДанныеДоговора, ДанныеИБ);
		
		СтруктураДанныеДоговора.Вставить("Наименование", "Договор по умолчанию");
		СтруктураДанныеДоговора.Вставить("Дата", ДанныеИБ.Дата);
		СтруктураДанныеДоговора.Вставить("ВидДоговора", "СПоставщиком");
	КонецЕсли;
	
	ДанныеXDTO.Расчеты.Колонки.Добавить("Договор");
	
	Для Каждого Строка Из ДанныеXDTO.Расчеты Цикл
		СтруктураДанныеДоговора.Контрагент = Строка.Контрагент;
	
		Инструкция = Новый Структура;
		Инструкция.Вставить("Значение", СтруктураДанныеДоговора);
		Инструкция.Вставить("ИмяПКО", "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
		
		Строка.Договор = Инструкция;
	КонецЦикла;
КонецПроцедуры
Процедура ПКО_Документ_ОстаткиСобственныхТМЦ_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ТМЦ", ДанныеИБ.ТМЦ);
КонецПроцедуры
Процедура ПКО_Документ_ОстаткиТоваровПринятыхНаКомиссию_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьДоговор(ДанныеИБ, ДанныеXDTO,"СКомитентом");
	
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.Товары);
КонецПроцедуры

#КонецОбласти
#Область Отправка
Процедура ПОД_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	УстановитьПравилоДляДокумента(ДанныеИБ.Ссылка, ИспользованиеПКО.Документ_ВозвратТоваровОтПокупателя_Отправка,"ВозвратТоваровОтПокупателя","");
	
	ТоварыДокумента = 
	"ВЫБРАТЬ
	| ВозвратТоваровОтПокупателяТовары.Номенклатура,
	| ВозвратТоваровОтПокупателяТовары.Характеристика,
	| ВозвратТоваровОтПокупателяТовары.Упаковка,
	| ВозвратТоваровОтПокупателяСерии.Серия,
	| ЕСТЬNULL(ВозвратТоваровОтПокупателяСерии.Количество, ВозвратТоваровОтПокупателяТовары.Количество) КАК Количество,
	| ЕСТЬNULL(ВозвратТоваровОтПокупателяСерии.Количество, ВозвратТоваровОтПокупателяТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
	| ВозвратТоваровОтПокупателяТовары.Цена,
	|	ВЫБОР КОГДА ВозвратТоваровОтПокупателяСерии.Серия ЕСТЬ NULL
	|		ТОГДА ВозвратТоваровОтПокупателяТовары.Сумма
	|		ИНАЧЕ ВЫРАЗИТЬ(ВозвратТоваровОтПокупателяТовары.Цена * ВозвратТоваровОтПокупателяСерии.Количество КАК ЧИСЛО(15,2))
	|	КОНЕЦ КАК Сумма,
	| СправочникНоменклатура.ЕдиницаИзмерения,
	| СправочникНоменклатура.СтранаПроисхождения,
	| ""СобственныеТовары"" КАК ТипЗапасов,
	|	ВЫБОР КОГДА ВозвратТоваровОтПокупателяСерии.Серия ЕСТЬ NULL
	|		ТОГДА ВозвратТоваровОтПокупателяТовары.СуммаНДС
	|		ИНАЧЕ ВЫРАЗИТЬ(ВозвратТоваровОтПокупателяТовары.СуммаНДС / ВозвратТоваровОтПокупателяТовары.Количество КАК ЧИСЛО(15,2))
	|	КОНЕЦ КАК СуммаНДС,
	| ВозвратТоваровОтПокупателяТовары.СтавкаНДС,
	| ВозвратТоваровОтПокупателяТовары.НомерСтроки,
	|	ВЫБОР КОГДА ВозвратТоваровОтПокупателяСерии.Серия ЕСТЬ NULL
	|		ТОГДА ВозвратТоваровОтПокупателяТовары.Сумма
	|		ИНАЧЕ ВЫРАЗИТЬ(ВозвратТоваровОтПокупателяТовары.Цена * ВозвратТоваровОтПокупателяСерии.Количество КАК ЧИСЛО(15,2))
	|	КОНЕЦ КАК Себестоимость,
	| ВЫБОР
	| 	КОГДА &УчитыватьНДС
	| 		ТОГДА ""ОблагаетсяНДС""
	| 		ИНАЧЕ ""НеОблагаетсяНДС""
	| 	КОНЕЦ КАК ВозвратПодДеятельность
	|ИЗ
	| Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	|     ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|     ПО ВозвратТоваровОтПокупателяТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя.Серии КАК ВозвратТоваровОтПокупателяСерии
	|		ПО (ВозвратТоваровОтПокупателяТовары.Ссылка = ВозвратТоваровОтПокупателяСерии.Ссылка)
	|			И (ВозвратТоваровОтПокупателяТовары.Номенклатура = ВозвратТоваровОтПокупателяСерии.Номенклатура)
	|			И (ВозвратТоваровОтПокупателяТовары.Характеристика = ВозвратТоваровОтПокупателяСерии.Характеристика)
	|ГДЕ
	| ВозвратТоваровОтПокупателяТовары.Ссылка = &Ссылка
	| И СправочникНоменклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателяШтрихкодыУпаковок.НомерСтроки КАК НомерСтрокиДокумента,
	|	ВозвратТоваровОтПокупателяШтрихкодыУпаковок.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
	|	ШтрихкодыУпаковокТоваров.Ссылка КАК МаркаСсылка,
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
	|	ШтрихкодыУпаковокТоваров.ТипУпаковки КАК ТипУпаковки,
	|	ШтрихкодыУпаковокТоваров.Номенклатура КАК Номенклатура,
	|	ШтрихкодыУпаковокТоваров.Характеристика КАК Характеристика,
	|	ШтрихкодыУпаковокТоваров.Серия КАК Серия,
	|	ШтрихкодыУпаковокТоваров.Упаковка КАК Упаковка
	|ПОМЕСТИТЬ втШтрихкодыУпаковок
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.ШтрихкодыУпаковок КАК ВозвратТоваровОтПокупателяШтрихкодыУпаковок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ПО (ВозвратТоваровОтПокупателяШтрихкодыУпаковок.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваров.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиЧастичногоВыбытияТоваровИСМП КАК НастройкиЧастичногоВыбытияТоваровИСМП
	|		ПО ШтрихкодыУпаковокТоваров.Номенклатура = НастройкиЧастичногоВыбытияТоваровИСМП.Номенклатура
	|ГДЕ
	|	ВозвратТоваровОтПокупателяШтрихкодыУпаковок.Ссылка = &Ссылка
	|	И НЕ ВозвратТоваровОтПокупателяШтрихкодыУпаковок.ШтрихкодУпаковки = ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|	И НастройкиЧастичногоВыбытияТоваровИСМП.Номенклатура ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АкцизныеМарки.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	АкцизныеМарки.МаркаСсылка КАК МаркаСсылка,
	|	АкцизныеМарки.Номенклатура КАК Номенклатура,
	|	АкцизныеМарки.Характеристика КАК Характеристика,
	|	АкцизныеМарки.Серия КАК Серия,
	|	АкцизныеМарки.Упаковка КАК Упаковка,
	|	АкцизныеМарки.Номенклатура.ОсобенностьУчета КАК ТипАкцизнойМарки,
	|	АкцизныеМарки.ЗначениеШтрихкода КАК НомерАкцизнойМарки
	|ИЗ
	|	втШтрихкодыУпаковок КАК АкцизныеМарки
	|ГДЕ
	|	АкцизныеМарки.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МаркированныйТовар)
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТоварыДокумента;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("УчитыватьНДС", ДанныеИБ.УчитыватьНДС);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Товары = РезультатыЗапроса[0].Выгрузить();
	АкцизныеМарки = РезультатыЗапроса[2].Выгрузить();
	
	Если Не СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.СерииНоменклатуры") Тогда
		Товары.Колонки.Удалить("Серия");
	КонецЕсли;
	ЗаполнитьЕдиницыИзмеренияПоУмолчанию(Товары);
	
	Если Товары.Количество() > 0 Тогда
		ОбработатьХарактеристикиТоваров(КомпонентыОбмена, Товары);
		ОбработатьУпаковкиТоваров(КомпонентыОбмена, Товары);
		ЗаполнитьКоличествоПоРНПТ(КомпонентыОбмена, Товары, ДанныеИБ.Ссылка);
		ДанныеИБ.ДополнительныеСвойства.Вставить("Товары", Товары);
		ДанныеИБ.ДополнительныеСвойства.Вставить("АкцизныеМарки", АкцизныеМарки);
		
		ВыгрузитьМаркиДокумента(КомпонентыОбмена, АкцизныеМарки);
	
	Иначе
		ИспользованиеПКО.Документ_ВозвратТоваровОтПокупателя_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	УстановитьПравилоДляДокумента(ДанныеИБ.Ссылка, ИспользованиеПКО.Документ_ВозвратТоваровПоставщику_Отправка,"ВозвратТоваровПоставщику","");
	
	//Товары
	ТоварыДокумента = 
	"ВЫБРАТЬ
	|	ВозвратТоваровПоставщикуТовары.Номенклатура КАК Номенклатура,
	|	ВозвратТоваровПоставщикуТовары.Характеристика КАК Характеристика,
	|	ВозвратТоваровПоставщикуТовары.Упаковка КАК Упаковка,
	|	ВЫБОР
	|		КОГДА НЕ ВозвратТоваровПоставщикуСерии.Серия ЕСТЬ NULL
	|			ТОГДА 1
	|		ИНАЧЕ ВозвратТоваровПоставщикуТовары.КоличествоУпаковок
	|	КОНЕЦ КАК КоличествоУпаковок,
	|	ВозвратТоваровПоставщикуСерии.Серия КАК Серия,
	|	ВЫБОР
	|		КОГДА НЕ ВозвратТоваровПоставщикуСерии.Серия ЕСТЬ NULL
	|			ТОГДА 1
	|		ИНАЧЕ ВозвратТоваровПоставщикуТовары.Количество
	|	КОНЕЦ КАК Количество,
	|	ВозвратТоваровПоставщикуТовары.Цена КАК Цена,
	|	ВЫБОР
	|		КОГДА НЕ ВозвратТоваровПоставщикуСерии.Серия ЕСТЬ NULL
	|			ТОГДА ВЫРАЗИТЬ(ВозвратТоваровПоставщикуТовары.Сумма / ВозвратТоваровПоставщикуТовары.Количество КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ ВозвратТоваровПоставщикуТовары.Сумма
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА ВозвратТоваровПоставщикуТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА СправочникНоменклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ВозвратТоваровПоставщикуТовары.Упаковка.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	СправочникНоменклатура.СтранаПроисхождения КАК СтранаПроисхождения,
	|	""СобственныеТовары"" КАК ТипЗапасов,
	|	ВЫБОР
	|		КОГДА НЕ ВозвратТоваровПоставщикуСерии.Серия ЕСТЬ NULL
	|			ТОГДА ВЫРАЗИТЬ(ВозвратТоваровПоставщикуТовары.СуммаНДС / ВозвратТоваровПоставщикуТовары.Количество КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ ВозвратТоваровПоставщикуТовары.СуммаНДС
	|	КОНЕЦ КАК СуммаНДС,
	|	ВозвратТоваровПоставщикуТовары.СтавкаНДС КАК СтавкаНДС,
	|	ВозвратТоваровПоставщикуТовары.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА НЕ ВозвратТоваровПоставщикуСерии.Серия ЕСТЬ NULL
	|			ТОГДА ВЫРАЗИТЬ(ВозвратТоваровПоставщикуТовары.Сумма / ВозвратТоваровПоставщикуТовары.Количество КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ ВозвратТоваровПоставщикуТовары.Сумма
	|	КОНЕЦ КАК Себестоимость
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (ВозвратТоваровПоставщикуТовары.Номенклатура = СправочникНоменклатура.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику.Серии КАК ВозвратТоваровПоставщикуСерии
	|		ПО (ВозвратТоваровПоставщикуТовары.Ссылка = ВозвратТоваровПоставщикуСерии.Ссылка)
	|			И (ВозвратТоваровПоставщикуТовары.Номенклатура = ВозвратТоваровПоставщикуСерии.Номенклатура)
	|			И (ВозвратТоваровПоставщикуТовары.Характеристика = ВозвратТоваровПоставщикуСерии.Характеристика)
	|ГДЕ
	|	ВозвратТоваровПоставщикуТовары.Ссылка = &Ссылка
	|	И СправочникНоменклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВозвратТоваровПоставщикуШтрихкодыУпаковок.НомерСтроки КАК НомерСтрокиДокумента,
	|	ВозвратТоваровПоставщикуШтрихкодыУпаковок.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
	|	ШтрихкодыУпаковокТоваров.ТипУпаковки КАК ТипУпаковки,
	|	ШтрихкодыУпаковокТоваров.Номенклатура КАК Номенклатура,
	|	ШтрихкодыУпаковокТоваров.Характеристика КАК Характеристика,
	|	ШтрихкодыУпаковокТоваров.Серия КАК Серия,
	|	ШтрихкодыУпаковокТоваров.Упаковка КАК Упаковка
	|ПОМЕСТИТЬ втШтрихкодыУпаковок
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.ШтрихкодыУпаковок КАК ВозвратТоваровПоставщикуШтрихкодыУпаковок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ПО (ВозвратТоваровПоставщикуШтрихкодыУпаковок.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваров.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиЧастичногоВыбытияТоваровИСМП КАК НастройкиЧастичногоВыбытияТоваровИСМП
	|		ПО ШтрихкодыУпаковокТоваров.Номенклатура = НастройкиЧастичногоВыбытияТоваровИСМП.Номенклатура
	|ГДЕ
	|	ВозвратТоваровПоставщикуШтрихкодыУпаковок.Ссылка = &Ссылка
	|	И НЕ ВозвратТоваровПоставщикуШтрихкодыУпаковок.ШтрихкодУпаковки = ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|	И НастройкиЧастичногоВыбытияТоваровИСМП.Номенклатура ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АкцизныеМарки.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	АкцизныеМарки.Номенклатура КАК Номенклатура,
	|	АкцизныеМарки.Характеристика КАК Характеристика,
	|	АкцизныеМарки.Серия КАК Серия,
	|	АкцизныеМарки.Упаковка КАК Упаковка,
	|	АкцизныеМарки.Номенклатура.ОсобенностьУчета КАК ТипАкцизнойМарки,
	|	АкцизныеМарки.ЗначениеШтрихкода КАК НомерАкцизнойМарки
	|ИЗ
	|	втШтрихкодыУпаковок КАК АкцизныеМарки
	|ГДЕ
	|	АкцизныеМарки.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МаркированныйТовар)
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТоварыДокумента;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Товары = РезультатыЗапроса[0].Выгрузить();
	АкцизныеМарки = РезультатыЗапроса[2].Выгрузить();
	
	Если Не СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.СерииНоменклатуры") Тогда
		Товары.Колонки.Удалить("Серия");
	КонецЕсли;
	
	Если Товары.Количество() > 0 Тогда
		ОбработатьХарактеристикиТоваров(КомпонентыОбмена, Товары);
		ОбработатьУпаковкиТоваров(КомпонентыОбмена, Товары);
		ЗаполнитьКоличествоПоРНПТ(КомпонентыОбмена, Товары, ДанныеИБ.Ссылка);
		ДанныеИБ.ДополнительныеСвойства.Вставить("Товары", Товары);
		ДанныеИБ.ДополнительныеСвойства.Вставить("АкцизныеМарки", АкцизныеМарки);
	Иначе
		ИспользованиеПКО.Документ_ВозвратТоваровПоставщику_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Документ_ЗаказПокупателя_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не СвойствоФорматаОбмена(КомпонентыОбмена, "Документ.ЗаказКлиента") Тогда
		УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
		Возврат;
	КонецЕсли;
	
	УстановитьПравилоДляДокумента(ДанныеИБ.Ссылка, ИспользованиеПКО.Документ_ЗаказПокупателя_Отправка,"ЗаказПокупателя","");
	
	//Товары
	ТоварыДокумента = "
		|ВЫБРАТЬ
		|	ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
		|	ЗаказПокупателяТовары.Характеристика КАК Характеристика,
		|	ЗаказПокупателяТовары.Упаковка КАК Упаковка,
		|	ЗаказПокупателяТовары.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ЗаказПокупателяТовары.Количество КАК Количество,
		|	ЗаказПокупателяТовары.Цена КАК Цена,
		|	ЗаказПокупателяТовары.Сумма КАК Сумма,
		|	ВЫБОР
		|		КОГДА ЗаказПокупателяТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|			ТОГДА СправочникНоменклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ЗаказПокупателяТовары.Упаковка.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	""СобственныеТовары"" КАК ТипЗапасов,
		|	ЗаказПокупателяТовары.СуммаНДС КАК СуммаНДС,
		|	ЗаказПокупателяТовары.СтавкаНДС КАК СтавкаНДС
		|ИЗ
		|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО (ЗаказПокупателяТовары.Номенклатура = СправочникНоменклатура.Ссылка)
		|ГДЕ
		|	ЗаказПокупателяТовары.Ссылка = &Ссылка
		|	И СправочникНоменклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
		|	И СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
		|	ЗаказПокупателяТовары.Характеристика КАК Характеристика,
		|	ЗаказПокупателяТовары.Упаковка КАК Упаковка,
		|	ЗаказПокупателяТовары.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ЗаказПокупателяТовары.Количество КАК Количество,
		|	ЗаказПокупателяТовары.Цена КАК Цена,
		|	ЗаказПокупателяТовары.Сумма КАК Сумма,
		|	ВЫБОР
		|		КОГДА ЗаказПокупателяТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|			ТОГДА СправочникНоменклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ЗаказПокупателяТовары.Упаковка.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ЗаказПокупателяТовары.СуммаНДС КАК СуммаНДС,
		|	ЗаказПокупателяТовары.СтавкаНДС КАК СтавкаНДС
		|ИЗ
		|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО (ЗаказПокупателяТовары.Номенклатура = СправочникНоменклатура.Ссылка)
		|ГДЕ
		|	ЗаказПокупателяТовары.Ссылка = &Ссылка
		|	И СправочникНоменклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
		|	И СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|";
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТоварыДокумента;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Товары = РезультатыЗапроса[0].Выгрузить();
	
	ОбработатьХарактеристикиТоваров(КомпонентыОбмена, Товары);
	ОбработатьУпаковкиТоваров(КомпонентыОбмена, Товары);
	
	ДанныеИБ.ДополнительныеСвойства.Вставить("Товары", Товары);
	
	Услуги = РезультатыЗапроса[1].Выгрузить();
	ДанныеИБ.ДополнительныеСвойства.Вставить("Услуги", Услуги);
	
	Если Товары.Количество() = 0 И Услуги.Количество() = 0 Тогда
		ИспользованиеПКО.Документ_ЗаказПокупателя_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Документ_ЗаказПоставщику_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не СвойствоФорматаОбмена(КомпонентыОбмена, "Документ.ЗаказПоставщику") Тогда
		УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
		Возврат;
	КонецЕсли;
	
	УстановитьПравилоДляДокумента(ДанныеИБ.Ссылка, ИспользованиеПКО.Документ_ЗаказПоставщику_Отправка,"ЗаказПоставщику","");
	
	//Товары
	ТоварыДокумента = 
	"ВЫБРАТЬ
	|	ЗаказПоставщикуТовары.Номенклатура КАК Номенклатура,
	|	ЗаказПоставщикуТовары.Характеристика КАК Характеристика,
	|	ЗаказПоставщикуТовары.Упаковка КАК Упаковка,
	|	ЗаказПоставщикуТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ЗаказПоставщикуТовары.Количество КАК Количество,
	|	ЗаказПоставщикуТовары.Цена КАК Цена,
	|	ЗаказПоставщикуТовары.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА ЗаказПоставщикуТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА СправочникНоменклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ЗаказПоставщикуТовары.Упаковка.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	""СобственныеТовары"" КАК ТипЗапасов,
	|	ЗаказПоставщикуТовары.СуммаНДС КАК СуммаНДС,
	|	ЗаказПоставщикуТовары.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (ЗаказПоставщикуТовары.Номенклатура = СправочникНоменклатура.Ссылка)
	|ГДЕ
	|	ЗаказПоставщикуТовары.Ссылка = &Ссылка
	|	И СправочникНоменклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|	И СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПоставщикуТовары.Номенклатура КАК Номенклатура,
	|	ЗаказПоставщикуТовары.Характеристика КАК Характеристика,
	|	ЗаказПоставщикуТовары.Упаковка КАК Упаковка,
	|	ЗаказПоставщикуТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ЗаказПоставщикуТовары.Количество КАК Количество,
	|	ЗаказПоставщикуТовары.Цена КАК Цена,
	|	ЗаказПоставщикуТовары.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА ЗаказПоставщикуТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА СправочникНоменклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ЗаказПоставщикуТовары.Упаковка.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ЗаказПоставщикуТовары.СуммаНДС КАК СуммаНДС,
	|	ЗаказПоставщикуТовары.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (ЗаказПоставщикуТовары.Номенклатура = СправочникНоменклатура.Ссылка)
	|ГДЕ
	|	ЗаказПоставщикуТовары.Ссылка = &Ссылка
	|	И СправочникНоменклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|	И СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТоварыДокумента;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Товары = РезультатыЗапроса[0].Выгрузить();
	
	ОбработатьХарактеристикиТоваров(КомпонентыОбмена, Товары);
	ОбработатьУпаковкиТоваров(КомпонентыОбмена, Товары);
	
	ДанныеИБ.ДополнительныеСвойства.Вставить("Товары", Товары);
	
	Услуги = РезультатыЗапроса[1].Выгрузить();
	ДанныеИБ.ДополнительныеСвойства.Вставить("Услуги", Услуги);
	
	Если Товары.Количество() = 0 И Услуги.Количество() = 0 Тогда
		ИспользованиеПКО.Документ_ЗаказПоставщику_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Документ_ИнвентаризационнаяОпись_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.3") Тогда
		ИспользованиеПКО.Документ_ИнвентаризационнаяОпись_Отправка = Ложь;
		Возврат;
	КонецЕсли;
	
	ДанныеДокумента = ПолучитьДанныеИнвентаризации(КомпонентыОбмена, ДанныеИБ);
	
	Если ДанныеДокумента = Неопределено Тогда
		ИспользованиеПКО.Документ_ИнвентаризационнаяОпись_Отправка = Ложь;
	Иначе
		ТаблицаТоваров = ДанныеДокумента.РезультатПоТабличнойЧасти;
		ТаблицаТоваров.Колонки.Добавить("ЦенаВРознице");
		ТаблицаТоваров.Колонки.Добавить("ЦенаЗаУпаковку");
		ТаблицаТоваров.Колонки.Добавить("КоличествоУпаковок");
		ТаблицаТоваров.Колонки.Добавить("КоличествоУпаковокУчет");
		ТаблицаТоваров.Колонки.Добавить("СчетУчета");
	
		ТаблицаТоваров.Колонки.Добавить("НомерСтрокиДокумента");
	
		НомерСтроки = 0;
		Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
			НомерСтроки = НомерСтроки + 1;
			СтрокаТаблицы.НомерСтрокиДокумента = НомерСтроки;
		КонецЦикла;
		
		ДанныеИБ.ДополнительныеСвойства.Вставить("Товары", ТаблицаТоваров);
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Документ_КассоваяСмена_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.4")
		ИЛИ КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменКасса" Тогда
		ИспользованиеПКО.Очистить();
		Возврат;
	КонецЕсли;
	
	//Получим КассуККМ
	КассаККМ = ДанныеИБ.КассаККМ;
	
	Если Не ЗначениеЗаполнено(ДанныеИБ.КассаККМ) Тогда
		ИспользованиеПКО.Очистить();
		Возврат;
	КонецЕсли;
	
	ДанныеИБ.ДополнительныеСвойства.Вставить("КассаККМ", КассаККМ);
	
	Если ДанныеИБ.Статус = Перечисления.СтатусыКассовойСмены.Открыта Тогда
		ИспользованиеПКО.Документ_КассоваяСменаЗакрытие_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Документ_ОприходованиеТоваров_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ОприходованиеТоваров_Отправка = Ложь;
	ИспользованиеПКО.Документ_ОприходованиеТоваровВПоступление_Отправка = Ложь;
	ОперацияКомисии = Ложь;
	Если ДанныеИБ.АналитикаХозяйственнойОперации = ПредопределенноеЗначение("Справочник.АналитикаХозяйственныхОпераций.ОприходованиеКомиссионныхТоваров") Тогда
		ОперацияКомисии = Истина;
		ИспользованиеПКО.Документ_ОприходованиеТоваровВПоступление_Отправка = Истина;
		УстановитьПравилоДляДокумента(ДанныеИБ.Ссылка, ИспользованиеПКО.Документ_ОприходованиеТоваровВПоступление_Отправка, "ОприходованиеТоваров","");
	Иначе
		ИспользованиеПКО.Документ_ОприходованиеТоваров_Отправка = Истина;
		УстановитьПравилоДляДокумента(ДанныеИБ.Ссылка, ИспользованиеПКО.Документ_ОприходованиеТоваров_Отправка, "ОприходованиеТоваров","");
	КонецЕсли;
	
	//Товары
	ТоварыДокумента = 
	"ВЫБРАТЬ
	|	ОприходованиеТоваровТовары.Номенклатура,
	|	ОприходованиеТоваровТовары.Характеристика,
	|	ОприходованиеТоваровТовары.Упаковка,
	|	ОприходованиеТоваровСерии.Серия,
	|	ЕСТЬNULL(ОприходованиеТоваровСерии.Количество, ОприходованиеТоваровТовары.Количество) КАК Количество,
	|	ЕСТЬNULL(ОприходованиеТоваровСерии.Количество, ОприходованиеТоваровТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	ОприходованиеТоваровТовары.Цена,
	|	ВЫБОР КОГДА ОприходованиеТоваровСерии.Серия ЕСТЬ NULL
	|		ТОГДА ОприходованиеТоваровТовары.Сумма
	|		ИНАЧЕ ВЫРАЗИТЬ(ОприходованиеТоваровТовары.Цена * ОприходованиеТоваровСерии.Количество КАК ЧИСЛО(15,2))
	|	КОНЕЦ КАК Сумма,
	|	СправочникНоменклатура.ЕдиницаИзмерения,
	|	СправочникНоменклатура.СтранаПроисхождения,
	|	&ТекстЗапросаГТД,
	|	ОприходованиеТоваровТовары.КоличествоПоРНПТ КАК КоличествоРНПТ,
	|	СправочникНоменклатура.КодТНВЭД.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
	|	СправочникНоменклатура.ЕдиницаИзмеренияТНВЭД КАК ЕдиницаИзмеренияПрослеживаемости,
	|	&ТипЗапасов КАК ТипЗапасов
	|ИЗ
	|	Документ.ОприходованиеТоваров.Товары КАК ОприходованиеТоваровТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ОприходованиеТоваровТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОприходованиеТоваров.Серии КАК ОприходованиеТоваровСерии
	|		ПО (ОприходованиеТоваровТовары.Ссылка = ОприходованиеТоваровСерии.Ссылка)
	|			И (ОприходованиеТоваровТовары.Номенклатура = ОприходованиеТоваровСерии.Номенклатура)
	|			И (ОприходованиеТоваровТовары.Характеристика = ОприходованиеТоваровСерии.Характеристика)
	|ГДЕ
	|	ОприходованиеТоваровТовары.Ссылка = &Ссылка
	|	И СправочникНоменклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|";
	
	ТоварыДокумента = СтрЗаменить(ТоварыДокумента, "&ТекстЗапросаГТД",
			ПолучитьТекстЗапросаГТД(КомпонентыОбмена, "ОприходованиеТоваровТовары"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТоварыДокумента;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("ТипЗапасов", ?(ОперацияКомисии, "КомиссионныеТовары", "СобственныеТовары"));
	
	РезультатыЗапроса = Запрос.Выполнить();
	Товары = РезультатыЗапроса.Выгрузить();
	ЗаполнитьЕдиницыИзмеренияПоУмолчанию(Товары);
	Если Не СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.СерииНоменклатуры") Тогда
		Товары.Колонки.Удалить("Серия");
	КонецЕсли;
	Если Товары.Количество() > 0 Тогда
		ОбработатьХарактеристикиТоваров(КомпонентыОбмена, Товары);
		ОбработатьУпаковкиТоваров(КомпонентыОбмена, Товары);
		ДанныеИБ.ДополнительныеСвойства.Вставить("Товары", Товары);
	Иначе
		ИспользованиеПКО.Документ_ОприходованиеТоваров_Отправка = Ложь;
		ИспользованиеПКО.Документ_ОприходованиеТоваровВПоступление_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		Если ДанныеИБ.Свойство("ВозвратПС") Тогда
			УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
	        ИспользованиеПКО.Документ_ВозвратПодарочныхСертификатов_Отправка = Истина;
			Возврат;
		КонецЕсли;
		Если ДанныеИБ.Свойство("ОРП") Тогда
			УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
			ИспользованиеПКО.Документ_ОРП_ИзСтруктуры_Отправка = Истина;
			Возврат;
		КонецЕсли;
		УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
	    ИспользованиеПКО.Документ_ЧекККМ_Отправка = Истина;
		Возврат;
	КонецЕсли;
	
	УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
	
	ВыгружатьДокумент = Истина;
	УстановитьПравилоДляДокумента(ДанныеИБ.Ссылка, ВыгружатьДокумент, "ОтчетОРозничныхПродажах"," И СправочникНоменклатура.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)");
	
	ВыгружатьДокумент = ВыгружатьДокумент И ДанныеИБ.Товары.Количество() > 0;
	
	ИспользованиеПКО.Документ_ОтчетОРозничныхПродажах_Отправка = ВыгружатьДокумент;
	
	ТекстЗапроса = ТекстЗапросаОРПТоварыВозвраты();	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	СписокВидовОплаты = Новый СписокЗначений;
	СписокВидовОплаты.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОплатЧекаККМ.ЗачетАванса"));
	СписокВидовОплаты.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОплатЧекаККМ.ОплатаВрассрочку"));
	СписокВидовОплаты.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОплатЧекаККМ.БанковскийПлатеж"));
	
	Запрос.УстановитьПараметр("ВидОплаты", СписокВидовОплаты);
	
	ДеятельностьНаПатенте = Ложь;	
	СистемаНалогообложения = ПодключаемоеОборудованиеРТ.ПолучитьСистемуНалогообложения(,ДанныеИБ.Организация, ДанныеИБ.Магазин);
	Если ЗначениеЗаполнено(СистемаНалогообложения) Тогда
		ДеятельностьНаПатенте = СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.Патент;
	КонецЕсли;
	Запрос.УстановитьПараметр("ДеятельностьНаПатенте", ДеятельностьНаПатенте);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеИБСтруктура = Новый Структура("Номер, Дата, Организация, КассаККМ, 
		|Ответственный, Магазин, ЦенаВключаетНДС, КассоваяСмена, Комментарий, УчитыватьНДС");
	ЗаполнитьЗначенияСвойств(ДанныеИБСтруктура, ДанныеИБ);
	
	Товары = РезультатыЗапроса[3].Выгрузить();
	Возвраты = РезультатыЗапроса[4].Выгрузить();
	
	ЗаполнитьЕдиницыИзмеренияПоУмолчанию(Товары);
	ЗаполнитьЕдиницыИзмеренияПоУмолчанию(Возвраты);
	
	Если Не СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.СерииНоменклатуры") Тогда
		Товары.Колонки.Удалить("Серия");
		Возвраты.Колонки.Удалить("Серия");
	КонецЕсли;
	
	Отбор = Новый Структура("ДеятельностьНаПатенте", Ложь);
	
	Если Товары.Количество() > 0 Тогда
		ОбработатьХарактеристикиТоваров(КомпонентыОбмена, Товары);
		ОбработатьУпаковкиТоваров(КомпонентыОбмена, Товары);
		ЗаполнитьКоличествоПоРНПТ(КомпонентыОбмена, Товары, ДанныеИБ.Ссылка);
		
		ДанныеИБ.ДополнительныеСвойства.Вставить("Товары", Товары.Скопировать(Отбор));
	КонецЕсли;
	
	Если Возвраты.Количество() > 0 Тогда
		ОбработатьХарактеристикиТоваров(КомпонентыОбмена, Возвраты);
		ОбработатьУпаковкиТоваров(КомпонентыОбмена, Возвраты);
		
		ДанныеИБ.ДополнительныеСвойства.Вставить("Возвраты", Возвраты.Скопировать(Отбор));
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапросаОРПОплаты();	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("ВидОплаты", СписокВидовОплаты);
	Запрос.УстановитьПараметр("ДеятельностьНаПатенте", ДеятельностьНаПатенте);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ПодарочныеСертификаты = РезультатыЗапроса[7].Выгрузить();
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Документ.ОтчетОРозничныхПродажах.ПодарочныеСертификаты")
		И ПодарочныеСертификаты.Количество() > 0 Тогда
		ДанныеИБ.ДополнительныеСвойства.Вставить("ПодарочныеСертификаты", ПодарочныеСертификаты.Скопировать(Отбор));
	КонецЕсли;
	
	ВозвратПС = РезультатыЗапроса[8].Выгрузить();
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Документ.ОтчетОРозничныхПродажах.ПодарочныеСертификаты")
		И ВозвратПС.Количество() > 0 Тогда
	
		ВозвратПССтруктура = Новый Структура("Номер, Дата, Организация, Ответственный, Комментарий");
		ЗаполнитьЗначенияСвойств(ВозвратПССтруктура, ДанныеИБ);
		
		ВозвратПССтруктура.Вставить("ВозвратПС");
		ВозвратПССтруктура.Вставить("ОтчетОРозничныхПродажах", ДанныеИБ.Ссылка);
		ВозвратПССтруктура.Вставить("ПодарочныеСертификаты", ВозвратПС.Скопировать(Отбор));
		
		ОплатаКартамиВозвратПС = РезультатыЗапроса[12].Выгрузить();
		ВозвратПССтруктура.Вставить("ОплатаПлатежнымиКартами", ОплатаКартамиВозвратПС.Скопировать(Отбор));
	
		ПравилоОРП = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Документ_ОтчетОРозничныхПродажах_Отправка", "Имя");
		Если Не ПравилоОРП = Неопределено Тогда
	    	ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ВозвратПССтруктура, ПравилоОРП);
		КонецЕсли;
	КонецЕсли;
	
	ОплатаКартами = РезультатыЗапроса[9].Выгрузить();
	Если ОплатаКартами.Количество() > 0 Тогда
		ОплатаКартами.Колонки.Добавить("ДоговорЭквайринга");
		ОплатаКартами.Колонки.Добавить("ЭквайринговыйТерминал");
		
		СтруктураДанныеВалюты = Новый Структура;
		СтруктураДанныеВалюты.Вставить("Код", 643);
		СтруктураДанныеВалюты.Вставить("Наименование", "RUB");
	
		Для Каждого Строка ИЗ ОплатаКартами Цикл
			Валюта = Новый Структура("Значение, ИмяПКО", СтруктураДанныеВалюты, "Справочник_Валюта_ИзСтруктуры");
			СтруктураДанныеДоговора = Новый Структура("Организация, Контрагент, ВидДоговора, ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах",
								ДанныеИБ.Организация, Строка.Эквайрер, "Прочее", Валюта , Ложь);
			Строка.ЭквайринговыйТерминал = Новый Структура("Значение, ИмяПКО", Строка.ЭквайринговыйТерминалСсылка, "Справочник_ЭквайринговыеТерминалы_Отправка");;
			Строка.ДоговорЭквайринга = Новый Структура("Значение, ИмяПКО", СтруктураДанныеДоговора, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");	
		КонецЦикла;
		ДанныеИБ.ДополнительныеСвойства.Вставить("ОплатаПлатежнымиКартами", ОплатаКартами.Скопировать(Отбор));
	КонецЕсли;
	
	ОплатаСертификатами = РезультатыЗапроса[10].Выгрузить();
	Если ОплатаСертификатами.Количество() > 0 Тогда
		ДанныеИБ.ДополнительныеСвойства.Вставить("ОплатаСертификатами", ОплатаСертификатами.Скопировать(Отбор));
	КонецЕсли;
	
	ОплатаБанковскимиКредитами = РезультатыЗапроса[11].Выгрузить();
	Если ОплатаБанковскимиКредитами.Количество() > 0 Тогда
		ОплатаБанковскимиКредитами.Колонки.Добавить("Банк");
	
		Для Каждого Строка ИЗ ОплатаБанковскимиКредитами Цикл
			СтруктураДанныеБанка = Новый Структура("Адрес, Город, Код, КоррСчет, Телефоны");
			СтруктураДанныеБанка.Вставить("Наименование", Строка.БанкНаименование);
			СтруктураДанныеБанка.Вставить("Ссылка", Строка.БанкСсылка);
			
			Строка.Банк = Новый Структура("Значение, ИмяПКО", СтруктураДанныеБанка, "Справочник_Банки");
		КонецЦикла;
		
		ДанныеИБ.ДополнительныеСвойства.Вставить("ОплатаБанковскимиКредитами", ОплатаБанковскимиКредитами.Скопировать(Отбор));
	КонецЕсли;
	
	Если Товары.Найти(Истина, "ДеятельностьНаПатенте") <> Неопределено
		ИЛИ Возвраты.Найти(Истина, "ДеятельностьНаПатенте") <> Неопределено
		ИЛИ ПодарочныеСертификаты.Найти(Истина, "ДеятельностьНаПатенте") <> Неопределено Тогда
		
		Отбор.ДеятельностьНаПатенте = Истина;
	
		ДанныеИБСтруктура.Вставить("ОРП");
		
		Если Товары.Количество() > 0 Тогда
			ДанныеИБСтруктура.Вставить("Товары", Товары.Скопировать(Отбор));
		КонецЕсли;
		Если Возвраты.Количество() > 0 Тогда
			ДанныеИБСтруктура.Вставить("Возвраты", Возвраты.Скопировать(Отбор));
		КонецЕсли;		
		Если ПодарочныеСертификаты.Количество() > 0 Тогда
			ДанныеИБСтруктура.Вставить("ПодарочныеСертификаты", ПодарочныеСертификаты.Скопировать(Отбор));
	    КонецЕсли;
		Если ОплатаКартами.Количество() > 0 Тогда
			ДанныеИБСтруктура.Вставить("ОплатаПлатежнымиКартами", ОплатаКартами.Скопировать(Отбор));
		КонецЕсли;	
		Если ОплатаСертификатами.Количество() > 0 Тогда
			ДанныеИБСтруктура.Вставить("ОплатаСертификатами", ОплатаСертификатами.Скопировать(Отбор));
		КонецЕсли;	
		Если ОплатаБанковскимиКредитами.Количество() > 0 Тогда
	    	ДанныеИБСтруктура.Вставить("ОплатаБанковскимиКредитами", ОплатаБанковскимиКредитами.Скопировать(Отбор));
		КонецЕсли;
		
		ПравилоОРП = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Документ_ОтчетОРозничныхПродажах_Отправка", "Имя");
		Если Не ПравилоОРП = Неопределено Тогда
	    	ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБСтруктура, ПравилоОРП);
		КонецЕсли;
	КонецЕсли;
	
	Если Товары.Найти(Ложь, "ДеятельностьНаПатенте") = Неопределено
		И Возвраты.Найти(Ложь, "ДеятельностьНаПатенте") = Неопределено
		И ПодарочныеСертификаты.Найти(Ложь, "ДеятельностьНаПатенте") = Неопределено Тогда
		ИспользованиеПКО.Документ_ОтчетОРозничныхПродажах_Отправка = Ложь;
	КонецЕсли;
	
	//Чеки
	Если ЗначениеЗаполнено(КомпонентыОбмена.УзелКорреспондента)
		И КомпонентыОбмена.ПоддерживаемыеОбъектыXDTO.Найти("Документ.ЧекККМ") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВидОперацииПродажа 	= Перечисления.ВидыОперацийЧекККМ.Продажа; // Продажа
	НалогообложениеОСН = Перечисления.ТипыСистемНалогообложенияККТ.ОСН; // ОСН
		
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("ВидОперацииПродажа", ВидОперацииПродажа);
	Запрос.УстановитьПараметр("НалогообложениеОСН", НалогообложениеОСН);
	Запрос.УстановитьПараметр("ВидОплаты", СписокВидовОплаты);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЧекККМ.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ЧЕКИ54ФЗ
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ КАК ЧекККМ
	|		ПО (РасчетыСКлиентами.Регистратор = ЧекККМ.ОтчетОРозничныхПродажах)
	|ГДЕ
	|	ЧекККМ.ОтчетОРозничныхПродажах = &Ссылка
	|	И (ЧекККМ.Оплата.ВидОплаты В (&ВидОплаты)
	|			ИЛИ ЧекККМ.ОперацияСДенежнымиСредствами = ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМ.Ссылка КАК Чек,
	|	ЧекККМТовары.Номенклатура КАК Номенклатура,
	|	ЧекККМТовары.Номенклатура КАК ВидПодарочногоСертификата,
	|	ЧекККМТовары.Характеристика КАК Характеристика,
	|	ЧекККМТовары.Упаковка КАК Упаковка,
	|	ЧекККМСерии.Серия КАК Серия,
	|	ЧекККМТовары.Количество КАК Количество,
	|	ЧекККМТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ЧекККМТовары.СтавкаНДС КАК СтавкаНДС,
	|	ЧекККМТовары.Цена КАК Цена,
	|	ВЫБОР
	|		КОГДА ЧекККМ.ЦенаВключаетНДС
	|			ТОГДА ЧекККМТовары.Сумма
	|		ИНАЧЕ ЧекККМТовары.Сумма + ЧекККМТовары.СуммаНДС
	|	КОНЕЦ КАК Сумма,
	|	ЧекККМТовары.СуммаНДС КАК СуммаНДС,
	|	ЧекККМСерийныеНомера.СерийныйНомер.КодСерийногоНомера КАК МагнитныйКод,
	|	ЧекККМСерийныеНомера.СерийныйНомер.Код КАК СерийныйНомер,
	|	Справочник_Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ЧекККМ.Дата КАК Дата,
	|	ВЫБОР
	|		КОГДА ЧекККМ.НомерСменыККМ = 0
	|			ТОГДА 1
	|		ИНАЧЕ ЧекККМ.НомерСменыККМ
	|	КОНЕЦ КАК НомерСменыККМ,
	|	ЧекККМ.КассаККМ КАК КассаККМ,
	|	ЧекККМ.Номер КАК Номер,
	|	ЧекККМ.НомерЧекаККМ КАК НомерЧекаККМ,
	|	ЧекККМ.Контрагент КАК Контрагент,
	|	ЧекККМ.СистемаНалогообложения = &НалогообложениеОСН КАК УчитыватьНДС,
	|	НЕ ЧекККМ.ВидОперации = &ВидОперацииПродажа КАК ЭтоВозврат
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Товары КАК ЧекККМТовары
	|		ПО (ЧекККМТовары.Ссылка = ЧекККМ.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ.СерийныеНомера КАК ЧекККМСерийныеНомера
	|		ПО (ЧекККМСерийныеНомера.Ссылка = ЧекККМТовары.Ссылка)
	|			И (ЧекККМСерийныеНомера.КлючСвязиСерийныхНомеров = ЧекККМТовары.КлючСвязиСерийныхНомеров)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Справочник_Номенклатура
	|		ПО (ЧекККМТовары.Номенклатура = Справочник_Номенклатура.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Серии КАК ЧекККМСерии
	|		ПО (ЧекККМТовары.Ссылка = ЧекККМСерии.Ссылка)
	|			И (ЧекККМТовары.Номенклатура = ЧекККМСерии.Номенклатура)
	|			И (ЧекККМТовары.Характеристика = ЧекККМСерии.Характеристика)
	|ГДЕ
	|	ЧекККМ.ОтчетОРозничныхПродажах = &Ссылка
	|	И ЧекККМ.Проведен
	|	И НЕ ЧекККМ.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Аннулированный)
	|	И НЕ ЧекККМ.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Отложенный)
	|	И ЧекККМ.Ссылка В
	|			(ВЫБРАТЬ
	|				ЧЕКИ54ФЗ.Ссылка КАК Ссылка
	|			ИЗ
	|				ЧЕКИ54ФЗ КАК ЧЕКИ54ФЗ)
	|ИТОГИ ПО
	|	Чек
	|";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	РезультатТовары = РезультатЗапроса[1];
	
	ШаблонТаблицаТоваров = Новый ТаблицаЗначений;
	Для Каждого КолонкаРезультата Из РезультатТовары.Колонки Цикл
		ШаблонТаблицаТоваров.Колонки.Добавить(КолонкаРезультата.Имя, КолонкаРезультата.ТипЗначения);
	КонецЦикла;
	
	Если НЕ РезультатТовары.Пустой() Тогда   
	
		ПравилоЧекККМ = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Документ_ОтчетОРозничныхПродажах_Отправка", "Имя");
		Если Не ПравилоЧекККМ = Неопределено Тогда
	
			ВыборкаЧеки = РезультатТовары.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаЧеки.Следующий() Цикл
				ДанныеИБСтруктура = Новый Структура("Дата, Номер, Ответственный, Комментарий");
				ЗаполнитьЗначенияСвойств(ДанныеИБСтруктура, ВыборкаЧеки.Чек);
			
				ДанныеИБСтруктура.Вставить("Ссылка", ВыборкаЧеки.Чек.Ссылка);
				ДанныеИБСтруктура.Вставить("КассаККМ", ВыборкаЧеки.КассаККМ);
				ДанныеИБСтруктура.Вставить("ЦенаВключаетНДС", ВыборкаЧеки.Чек.ЦенаВключаетНДС);
				ДанныеИБСтруктура.Вставить("СтатусЧекаККМ", ВыборкаЧеки.Чек.СтатусЧекаККМ);
				ДанныеИБСтруктура.Вставить("СуммаДокумента", 0);
				ДанныеИБСтруктура.Вставить("НомерКассовойСмены", ВыборкаЧеки.НомерСменыККМ);
				ДанныеИБСтруктура.Вставить("НомерЧекаФР", ВыборкаЧеки.НомерЧекаККМ);
				ДанныеИБСтруктура.Вставить("Контрагент", ВыборкаЧеки.Контрагент);
				ДанныеИБСтруктура.Вставить("ЭтоВозврат", ВыборкаЧеки.ЭтоВозврат);
				ДанныеИБСтруктура.Вставить("УчитыватьНДС", ВыборкаЧеки.УчитыватьНДС);
				ДанныеИБСтруктура.Вставить("Основание", ВыборкаЧеки.Чек.ЧекККМПродажа);
	
				ВыборкаТовары = ВыборкаЧеки.Выбрать();
				
				ТаблицаТоваров = ШаблонТаблицаТоваров.Скопировать();
				ТаблицаПодарочныеСертификаты = ШаблонТаблицаТоваров.Скопировать();
				ТаблицаУслуги = ШаблонТаблицаТоваров.Скопировать();
	
				Пока ВыборкаТовары.Следующий() Цикл
					Если ЗначениеЗаполнено(ВыборкаТовары.Номенклатура) Тогда
						Если ВыборкаТовары.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
							СтрокаПС = ТаблицаПодарочныеСертификаты.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаПС, ВыборкаТовары);
						ИначеЕсли ВыборкаТовары.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
							СтрокаУлуги = ТаблицаУслуги.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаУлуги, ВыборкаТовары);
						Иначе
							СтрокаТовары = ТаблицаТоваров.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаТовары, ВыборкаТовары);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			
				ОбработатьХарактеристикиТоваров(КомпонентыОбмена, ТаблицаТоваров);
				ОбработатьУпаковкиТоваров(КомпонентыОбмена, ТаблицаТоваров);
	
				ДанныеИБСтруктура.Вставить("Товары", ТаблицаТоваров);
				ДанныеИБСтруктура.Вставить("Услуги", ТаблицаУслуги);
				ДанныеИБСтруктура.Вставить("ПодарочныеСертификаты", ТаблицаПодарочныеСертификаты);
	
				ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, 
					ДанныеИБСтруктура, 
					ПравилоЧекККМ);
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	ИспользованиеПКО.Документ_ЧекККМ_Отправка = Ложь;
КонецПроцедуры
Процедура ПОД_Документ_ПередачаТоваровМеждуОрганизациями_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.ПередачаМеждуОрганизациями_РТУ_Отправка = Истина;
	ИспользованиеПКО.ПередачаМеждуОрганизациями_ПТУ_Отправка = Истина;
КонецПроцедуры
Процедура ПОД_Документ_ПеремещениеТоваров_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	УстановитьПравилоДляДокумента(ДанныеИБ.Ссылка, ИспользованиеПКО.Документ_ПеремещениеТоваров_Отправка,"ПеремещениеТоваров","");
	
	//Товары
	ТоварыДокумента = 
	
	"ВЫБРАТЬ
	|	ПеремещениеТоваровТовары.Номенклатура КАК Номенклатура,
	|	ПеремещениеТоваровТовары.Характеристика КАК Характеристика,
	|	ПеремещениеТоваровТовары.Упаковка КАК Упаковка,
	|	ПеремещениеТоваровТовары.Количество КАК Количество,
	|	ПеремещениеТоваровТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ПеремещениеТоваровТовары.Цена КАК ЦенаВРознице,
	|	ПеремещениеТоваровТовары.Сумма КАК СуммаВРознице,
	|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СправочникНоменклатура.СтранаПроисхождения КАК СтранаПроисхождения,
	|	""СобственныеТовары"" КАК ТипЗапасов,
	|	СправочникНоменклатура.СтавкаНДС КАК СтавкаНДСВРознице
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (ПеремещениеТоваровТовары.Номенклатура = СправочникНоменклатура.Ссылка)
	|ГДЕ
	|	ПеремещениеТоваровТовары.Ссылка = &Ссылка
	|	И СправочникНоменклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПеремещениеТоваровАкцизныеМарки.НомерСтроки КАК НомерСтрокиДокумента,
	|	ШтрихкодыУпаковокТоваров.Ссылка КАК МаркаСсылка,
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
	|	ШтрихкодыУпаковокТоваров.ТипУпаковки КАК ТипУпаковки,
	|	ШтрихкодыУпаковокТоваров.Номенклатура КАК Номенклатура,
	|	ШтрихкодыУпаковокТоваров.Характеристика КАК Характеристика,
	|	ШтрихкодыУпаковокТоваров.Серия КАК Серия,
	|	ШтрихкодыУпаковокТоваров.Упаковка КАК Упаковка
	|ПОМЕСТИТЬ втШтрихкодыУпаковок
	|ИЗ
	|	Документ.ПеремещениеТоваров.АкцизныеМарки КАК ПеремещениеТоваровАкцизныеМарки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ПО ПеремещениеТоваровАкцизныеМарки.АкцизнаяМарка = ШтрихкодыУпаковокТоваров.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиЧастичногоВыбытияТоваровИСМП КАК НастройкиЧастичногоВыбытияТоваровИСМП
	|		ПО ШтрихкодыУпаковокТоваров.Номенклатура = НастройкиЧастичногоВыбытияТоваровИСМП.Номенклатура
	|ГДЕ
	|	ПеремещениеТоваровАкцизныеМарки.Ссылка = &Ссылка
	|	И НЕ ПеремещениеТоваровАкцизныеМарки.АкцизнаяМарка = ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|	И НастройкиЧастичногоВыбытияТоваровИСМП.Номенклатура ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АкцизныеМарки.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	АкцизныеМарки.МаркаСсылка КАК МаркаСсылка,
	|	АкцизныеМарки.Номенклатура КАК Номенклатура,
	|	АкцизныеМарки.Характеристика КАК Характеристика,
	|	АкцизныеМарки.Серия КАК Серия,
	|	АкцизныеМарки.Упаковка КАК Упаковка,
	|	АкцизныеМарки.Номенклатура.ОсобенностьУчета КАК ТипАкцизнойМарки,
	|	АкцизныеМарки.ЗначениеШтрихкода КАК НомерАкцизнойМарки
	|ИЗ
	|	втШтрихкодыУпаковок КАК АкцизныеМарки
	|ГДЕ
	|	АкцизныеМарки.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МаркированныйТовар)
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТоварыДокумента;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Товары = РезультатыЗапроса[0].Выгрузить();
	АкцизныеМарки = РезультатыЗапроса[2].Выгрузить();
	
	ЗаполнитьЕдиницыИзмеренияПоУмолчанию(Товары);
	Если Товары.Количество() > 0 Тогда
		ОбработатьХарактеристикиТоваров(КомпонентыОбмена, Товары);
		ОбработатьУпаковкиТоваров(КомпонентыОбмена, Товары);
		ЗаполнитьКоличествоПоРНПТ(КомпонентыОбмена, Товары, ДанныеИБ.Ссылка);
		ДанныеИБ.ДополнительныеСвойства.Вставить("Товары", Товары);
		ДанныеИБ.ДополнительныеСвойства.Вставить("АкцизныеМарки", АкцизныеМарки);
	
		ВыгрузитьМаркиДокумента(КомпонентыОбмена, АкцизныеМарки);
		
	Иначе
		ИспользованиеПКО.Документ_ПеремещениеТоваров_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Документ_ПересортицаТоваров_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПересортицаВОприходование_Отправка = Истина;
	ИспользованиеПКО.Документ_ПересортицаВСписание_Отправка = Истина;
КонецПроцедуры
Процедура ПОД_Документ_ПересчетТоваров_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не СвойствоФорматаОбмена(КомпонентыОбмена, "Документ.ПересчетТоваров") Тогда
		ОчиститьИспользованиеПКО(ИспользованиеПКО);
	КонецЕсли;
	
	//Товары
	ТоварыДокумента = 
	
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Упаковка КАК Упаковка,
	|	Товары.Количество КАК Количество,
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА Товары.КоличествоУпаковок = 0
	|			ТОГДА Товары.Цена
	|		ИНАЧЕ Товары.Сумма / Товары.КоличествоУпаковок
	|	КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
	|	Товары.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА СправочникНоменклатура.ЕдиницаИзмерения
	|		ИНАЧЕ Товары.Упаковка.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Товары.СуммаФакт КАК СуммаФакт,
	|	Товары.КоличествоФакт КАК КоличествоФакт,
	|	Товары.КоличествоУпаковокФакт КАК КоличествоУпаковокФакт
	|ИЗ
	|	Документ.ПересчетТоваров.Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (Товары.Номенклатура = СправочникНоменклатура.Ссылка)
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|";
	Запрос = Новый Запрос;
	Запрос.Текст = ТоварыДокумента;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатыЗапроса = Запрос.Выполнить();
	Товары = РезультатыЗапроса.Выгрузить();
	Если Товары.Количество() > 0 Тогда
		ОбработатьХарактеристикиТоваров(КомпонентыОбмена, Товары);
		ОбработатьУпаковкиТоваров(КомпонентыОбмена, Товары);
		ДанныеИБ.ДополнительныеСвойства.Вставить("Товары", Товары);
	Иначе
		ИспользованиеПКО.Документ_ПересчетТоваров_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	УстановитьПравилоДляДокумента(ДанныеИБ.Ссылка, ИспользованиеПКО.Документ_ПоступлениеТоваровУслуг_Отправка,"ПоступлениеТоваров","");
	
	// Товары
	ТоварыДокумента = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Упаковка КАК Упаковка,
	|	ПоступлениеТоваровСерии.Серия КАК Серия,
	|	ЕСТЬNULL(ПоступлениеТоваровСерии.Количество, Товары.Количество) КАК Количество,
	|	ЕСТЬNULL(ПоступлениеТоваровСерии.Количество, Товары.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	Товары.Цена КАК Цена,
	|	ВЫБОР КОГДА ПоступлениеТоваровСерии.Серия ЕСТЬ NULL
	|		ТОГДА Товары.Сумма
	|		ИНАЧЕ ВЫРАЗИТЬ(Товары.Цена * ПоступлениеТоваровСерии.Количество КАК ЧИСЛО(15,2))
	|	КОНЕЦ КАК Сумма,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	ВЫБОР КОГДА ПоступлениеТоваровСерии.Серия ЕСТЬ NULL
	|		ТОГДА Товары.СуммаНДС
	|		ИНАЧЕ ВЫРАЗИТЬ(Товары.СуммаНДС / Товары.Количество КАК ЧИСЛО(15,2))
	|	КОНЕЦ КАК СуммаНДС,
	|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СправочникНоменклатура.СтранаПроисхождения КАК СтранаПроисхождения,
	|	&ТекстЗапросаГТД,
	|	Товары.КоличествоПоРНПТ КАК КоличествоРНПТ,
	|	СправочникНоменклатура.КодТНВЭД.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
	|	СправочникНоменклатура.ЕдиницаИзмеренияТНВЭД КАК ЕдиницаИзмеренияПрослеживаемости
	|ИЗ
	|	Документ.ПоступлениеТоваров.Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (Товары.Номенклатура = СправочникНоменклатура.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваров.Серии КАК ПоступлениеТоваровСерии
	|		ПО (Товары.Ссылка = ПоступлениеТоваровСерии.Ссылка)
	|			И (Товары.Номенклатура = ПоступлениеТоваровСерии.Номенклатура)
	|			И (Товары.Характеристика = ПоступлениеТоваровСерии.Характеристика)
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|	И Не СправочникНоменклатура.КиЗГИСМ
	|	И Товары.Сумма <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Количество КАК Количество,
	|	Товары.Цена КАК Цена,
	|	Товары.Сумма КАК Сумма,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СправочникНоменклатура.СтранаПроисхождения КАК СтранаПроисхождения,
	|	&ТекстЗапросаГТД
	|ИЗ
	|	Документ.ПоступлениеТоваров.Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваров.Серии КАК ПоступлениеТоваровСерии
	|		ПО Товары.Ссылка = ПоступлениеТоваровСерии.Ссылка
	|			И Товары.Номенклатура = ПоступлениеТоваровСерии.Номенклатура
	|			И Товары.Характеристика = ПоступлениеТоваровСерии.Характеристика
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|	И Товары.Сумма <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	ПоступлениеТоваровСерии.Серия КАК Серия,
	|	СУММА(Товары.Количество) КАК Количество,
	|	Товары.Цена КАК Цена,
	|	СУММА(Товары.Сумма) КАК Сумма,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(Товары.СуммаНДС) КАК СуммаНДС,
	|	Товары.Упаковка КАК Упаковка,
	|	СУММА(Товары.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СправочникНоменклатура.СтранаПроисхождения КАК СтранаПроисхождения,
	|	""НаПрочиеДоходы"" КАК ВариантОтражения
	|ИЗ
	|	Документ.ПоступлениеТоваров.Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваров.Серии КАК ПоступлениеТоваровСерии
	|		ПО Товары.Ссылка = ПоступлениеТоваровСерии.Ссылка
	|			И Товары.Номенклатура = ПоступлениеТоваровСерии.Номенклатура
	|			И Товары.Характеристика = ПоступлениеТоваровСерии.Характеристика
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И НЕ (Товары.Номенклатура, Товары.Характеристика, Товары.Упаковка, Товары.Количество, Товары.КоличествоУпаковок, Товары.Цена, Товары.СтавкаНДС) В
	|				(ВЫБРАТЬ
	|					ПоступлениеТоваровТоварыПоДаннымПоставщика.Номенклатура,
	|					ПоступлениеТоваровТоварыПоДаннымПоставщика.Характеристика,
	|					ПоступлениеТоваровТоварыПоДаннымПоставщика.Упаковка,
	|					ПоступлениеТоваровТоварыПоДаннымПоставщика.Количество,
	|					ПоступлениеТоваровТоварыПоДаннымПоставщика.КоличествоУпаковок,
	|					ПоступлениеТоваровТоварыПоДаннымПоставщика.Цена,
	|					ПоступлениеТоваровТоварыПоДаннымПоставщика.СтавкаНДС
	|				ИЗ
	|					Документ.ПоступлениеТоваров.ТоварыПоДаннымПоставщика КАК ПоступлениеТоваровТоварыПоДаннымПоставщика
	|				ГДЕ
	|					ПоступлениеТоваровТоварыПоДаннымПоставщика.Ссылка = &Ссылка)
	|	И Товары.Ссылка.ЕстьРасхождения
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Упаковка,
	|	ПоступлениеТоваровСерии.Серия,
	|	Товары.Цена,
	|	Товары.СтавкаНДС,
	|	СправочникНоменклатура.ЕдиницаИзмерения,
	|	СправочникНоменклатура.СтранаПроисхождения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	ПоступлениеТоваровСерии.Серия КАК Серия,
	|	СУММА(Товары.Количество) КАК Количество,
	|	Товары.Цена КАК Цена,
	|	СУММА(Товары.Сумма) КАК Сумма,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(Товары.СуммаНДС) КАК СуммаНДС,
	|	Товары.Упаковка КАК Упаковка,
	|	СУММА(Товары.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СправочникНоменклатура.СтранаПроисхождения КАК СтранаПроисхождения,
	|	0 КАК НомерГТД,
	|	""НаПрочиеРасходы"" КАК ВариантОтражения
	|ИЗ
	|	Документ.ПоступлениеТоваров.ТоварыПоДаннымПоставщика КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваров.Серии КАК ПоступлениеТоваровСерии
	|		ПО Товары.Ссылка = ПоступлениеТоваровСерии.Ссылка
	|			И Товары.Номенклатура = ПоступлениеТоваровСерии.Номенклатура
	|			И Товары.Характеристика = ПоступлениеТоваровСерии.Характеристика
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И НЕ (Товары.Номенклатура, Товары.Характеристика, Товары.Упаковка, Товары.Количество, Товары.КоличествоУпаковок, Товары.Цена, Товары.СтавкаНДС) В
	|				(ВЫБРАТЬ
	|					ПоступлениеТоваровТовары.Номенклатура,
	|					ПоступлениеТоваровТовары.Характеристика,
	|					ПоступлениеТоваровТовары.Упаковка,
	|					ПоступлениеТоваровТовары.Количество,
	|					ПоступлениеТоваровТовары.КоличествоУпаковок,
	|					ПоступлениеТоваровТовары.Цена,
	|					ПоступлениеТоваровТовары.СтавкаНДС
	|				ИЗ
	|					Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
	|				ГДЕ
	|					ПоступлениеТоваровТовары.Ссылка = &Ссылка)
	|	И Товары.Ссылка.ЕстьРасхождения
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Упаковка,
	|	ПоступлениеТоваровСерии.Серия,
	|	Товары.Цена,
	|	Товары.СтавкаНДС,
	|	СправочникНоменклатура.ЕдиницаИзмерения,
	|	СправочникНоменклатура.СтранаПроисхождения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеТоваровШтрихкодыУпаковок.НомерСтроки КАК НомерСтрокиДокумента,
	|	ШтрихкодыУпаковокТоваров.Ссылка КАК МаркаСсылка,
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
	|	ШтрихкодыУпаковокТоваров.ТипУпаковки КАК ТипУпаковки,
	|	ШтрихкодыУпаковокТоваров.Номенклатура КАК Номенклатура,
	|	ШтрихкодыУпаковокТоваров.Характеристика КАК Характеристика,
	|	ШтрихкодыУпаковокТоваров.Серия КАК Серия,
	|	ШтрихкодыУпаковокТоваров.Упаковка КАК Упаковка
	|ПОМЕСТИТЬ втШтрихкодыУпаковок
	|ИЗ
	|	Документ.ПоступлениеТоваров.ШтрихкодыУпаковок КАК ПоступлениеТоваровШтрихкодыУпаковок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ПО (ПоступлениеТоваровШтрихкодыУпаковок.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваров.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиЧастичногоВыбытияТоваровИСМП КАК НастройкиЧастичногоВыбытияТоваровИСМП
	|		ПО ШтрихкодыУпаковокТоваров.Номенклатура = НастройкиЧастичногоВыбытияТоваровИСМП.Номенклатура
	|ГДЕ
	|	ПоступлениеТоваровШтрихкодыУпаковок.Ссылка = &Ссылка
	|	И НЕ ПоступлениеТоваровШтрихкодыУпаковок.ШтрихкодУпаковки = ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|	И НастройкиЧастичногоВыбытияТоваровИСМП.Номенклатура ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АкцизныеМарки.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	АкцизныеМарки.МаркаСсылка КАК МаркаСсылка,
	|	АкцизныеМарки.Номенклатура КАК Номенклатура,
	|	АкцизныеМарки.Характеристика КАК Характеристика,
	|	АкцизныеМарки.Серия КАК Серия,
	|	АкцизныеМарки.Упаковка КАК Упаковка,
	|	АкцизныеМарки.Номенклатура.ОсобенностьУчета КАК ТипАкцизнойМарки,
	|	АкцизныеМарки.ЗначениеШтрихкода КАК НомерАкцизнойМарки
	|ИЗ
	|	втШтрихкодыУпаковок КАК АкцизныеМарки
	|ГДЕ
	|	АкцизныеМарки.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МаркированныйТовар)
	|";
	
	ТоварыДокумента = СтрЗаменить(ТоварыДокумента, "&ТекстЗапросаГТД",
			ПолучитьТекстЗапросаГТД(КомпонентыОбмена, "Товары"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТоварыДокумента;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ПоддержкаСерийВФормате = СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.СерииНоменклатуры");
	
	Товары = РезультатыЗапроса[0].Выгрузить();
	ЗаполнитьЕдиницыИзмеренияПоУмолчанию(Товары);
	
	ОбработатьХарактеристикиТоваров(КомпонентыОбмена, Товары);
	ОбработатьУпаковкиТоваров(КомпонентыОбмена, Товары);
	
	Если Не ПоддержкаСерийВФормате Тогда
		Товары.Колонки.Удалить("Серия");
	КонецЕсли;
	ДанныеИБ.ДополнительныеСвойства.Вставить("Товары", Товары);
	
	Услуги = РезультатыЗапроса[1].Выгрузить();
	ДанныеИБ.ДополнительныеСвойства.Вставить("Услуги", Услуги);
	
	Излишки = РезультатыЗапроса[2].Выгрузить();
	Если Не ПоддержкаСерийВФормате Тогда
		Излишки.Колонки.Удалить("Серия");
	КонецЕсли;
	ОбработатьХарактеристикиТоваров(КомпонентыОбмена, Излишки);
	ОбработатьУпаковкиТоваров(КомпонентыОбмена, Излишки);
	
	ДанныеИБ.ДополнительныеСвойства.Вставить("Излишки", Излишки);
	
	Недостачи = РезультатыЗапроса[3].Выгрузить();
	Если Не ПоддержкаСерийВФормате Тогда
		Недостачи.Колонки.Удалить("Серия");
	КонецЕсли;
	ОбработатьХарактеристикиТоваров(КомпонентыОбмена, Недостачи);
	ОбработатьУпаковкиТоваров(КомпонентыОбмена, Недостачи);
	ДанныеИБ.ДополнительныеСвойства.Вставить("Недостачи", Недостачи);
	
	АкцизныеМарки = РезультатыЗапроса[5].Выгрузить();
	ДанныеИБ.ДополнительныеСвойства.Вставить("АкцизныеМарки", АкцизныеМарки);
	
	ВыгрузитьМаркиДокумента(КомпонентыОбмена, АкцизныеМарки);
	
	Если Товары.Количество() = 0 И Услуги.Количество() = 0 Тогда
		ИспользованиеПКО.Документ_ПоступлениеТоваровУслуг_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Документ_ПриходныйКассовыйОрдер_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
	
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка Тогда
		ИспользованиеПКО.Документ_ПКОПолучениеНаличныхВБанке_Отправка = Истина;
		ДанныеИБ.ДополнительныеСвойства.Вставить("ВидОперации", "ПолучениеНаличных");
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ Тогда
		ИспользованиеПКО.Документ_ПКОПоступлениеИзКассыККМ_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеДоходы Тогда
		ВходящиеДанные = Документы.ПриходныйКассовыйОрдер.РеквизитыДокументаДляОбменаСБухгалтерией(ДанныеИБ.Ссылка);
		Если ВходящиеДанные.ВидОперации = "РасчетыПоКредитамИЗаймам" Тогда
			ИспользованиеПКО.Документ_ПКОРасчетыСКонтрагентами_Отправка = Истина;
		ИначеЕсли ВходящиеДанные.ВидОперации = "ПрочееПоступление" Тогда
			ИспользованиеПКО.Документ_ПКОПрочиеДоходы_Отправка = Истина;
		КонецЕсли;
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента
		ИЛИ ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика
		ИЛИ ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации Тогда
		ИспользованиеПКО.Документ_ПКОРасчетыСКонтрагентами_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы Тогда
		Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование) Тогда
			ТипОснования = ТипЗнч(ДанныеИБ.ДокументОснование);
			Если ТипОснования = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
				ИспользованиеПКО.Документ_ПКОПоступлениеИзДругойКассы_Отправка = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Документ_РасходныйКассовыйОрдер_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
	
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк Тогда
		ИспользованиеПКО.Документ_РКОНаБанковскийСчет_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику 
	ИЛИ ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюОрганизацию
	ИЛИ ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		ИспользованиеПКО.Документ_РКОРасчетыСКонтрагентами_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеРасходы Тогда
		ИспользованиеПКО.Документ_РКОПрочийРасход_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу Тогда
		ИспользованиеПКО.Документ_РКОВыдачаВДругуюКассу_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ Тогда
		ИспользованиеПКО.Документ_РКОВыдачаВКассуККМ_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Документ_РеализацияТоваровУслуг_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	УстановитьПравилоДляДокумента(ДанныеИБ.Ссылка,
								ИспользованиеПКО.Документ_РеализацияТоваровУслуг_Отправка,
								"РеализацияТоваров",
								" И СправочникНоменклатура.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)");
	
	//Товары
	ТоварыДокумента = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Упаковка,
	|	ЕСТЬNULL(РеализацияТоваровСерии.Количество, Товары.Количество) КАК Количество,
	|	ЕСТЬNULL(РеализацияТоваровСерии.Количество, Товары.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	РеализацияТоваровСерии.Серия,
	|	ВЫБОР КОГДА РеализацияТоваровСерии.Серия ЕСТЬ NULL
	|		ТОГДА Товары.Сумма
	|		ИНАЧЕ ВЫРАЗИТЬ(Товары.Цена * РеализацияТоваровСерии.Количество КАК ЧИСЛО(15,2))
	|	КОНЕЦ КАК Сумма,
	|	Товары.Цена,
	|	Товары.СтавкаНДС,
	|	ВЫБОР КОГДА РеализацияТоваровСерии.Серия ЕСТЬ NULL
	|		ТОГДА Товары.СуммаНДС
	|		ИНАЧЕ ВЫРАЗИТЬ(Товары.СуммаНДС / Товары.Количество КАК ЧИСЛО(15,2))
	|	КОНЕЦ КАК СуммаНДС,
	|	СправочникНоменклатура.ЕдиницаИзмерения,
	|	СправочникНоменклатура.СтранаПроисхождения,
	|	""СобственныеТовары"" КАК ТипЗапасов,
	|	Товары.Характеристика,
	|	Товары.НомерСтроки КАК НомерСтрокиДокумента
	|ИЗ
	|	Документ.РеализацияТоваров.Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваров.Серии КАК РеализацияТоваровСерии
	|		ПО (Товары.Ссылка = РеализацияТоваровСерии.Ссылка)
	|			И (Товары.Номенклатура = РеализацияТоваровСерии.Номенклатура)
	|			И (Товары.Характеристика = РеализацияТоваровСерии.Характеристика)
	|ГДЕ
	|	СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|	И Товары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Услуги.Количество,
	|	Услуги.Номенклатура,
	|	СправочникНоменклатура.НаименованиеПолное КАК Содержание,
	|	Услуги.СтавкаНДС,
	|	Услуги.СуммаНДС,
	|	Услуги.Сумма,
	|	Услуги.Цена
	|ИЗ
	|	Документ.РеализацияТоваров.Товары КАК Услуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Услуги.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|	И Услуги.Ссылка = &Ссылка
	|	И СправочникНоменклатура.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТоварыДокумента;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	Товары = РезультатыЗапроса[0].Выгрузить();
	Если Не СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.СерииНоменклатуры") Тогда
		Товары.Колонки.Удалить("Серия");
	КонецЕсли;
	
	ЗаполнитьЕдиницыИзмеренияПоУмолчанию(Товары);
	ОбработатьХарактеристикиТоваров(КомпонентыОбмена, Товары);
	ОбработатьУпаковкиТоваров(КомпонентыОбмена, Товары);
	ЗаполнитьКоличествоПоРНПТ(КомпонентыОбмена, Товары, ДанныеИБ.Ссылка);
	
	ДанныеИБ.ДополнительныеСвойства.Вставить("Товары", Товары);
	
	Услуги = РезультатыЗапроса[1].Выгрузить();
	ДанныеИБ.ДополнительныеСвойства.Вставить("Услуги", Услуги);
	
	Если Товары.Количество() = 0 И Услуги.Количество() = 0 Тогда
		ИспользованиеПКО.Документ_РеализацияТоваровУслуг_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Документ_СписаниеТоваров_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
	
	Если ДанныеИБ.АналитикаХозяйственнойОперации.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеНаЗатраты Тогда
		ИспользованиеПКО.Документ_СписаниеТоваровВТребование_Отправка = Истина;
	Иначе
		ИспользованиеПКО.Документ_СписаниеТоваров_Отправка = Истина;
	КонецЕсли;
	
	//Товары
	ТоварыДокумента = 
	"ВЫБРАТЬ
	|	СписаниеТоваровТовары.Номенклатура,
	|	СписаниеТоваровТовары.Характеристика,
	|	СписаниеТоваровТовары.Упаковка,
	|	ЕСТЬNULL(СписаниеТоваровСерии.Количество, СписаниеТоваровТовары.Количество) КАК Количество,
	|	ЕСТЬNULL(СписаниеТоваровСерии.Количество, СписаниеТоваровТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	СписаниеТоваровСерии.Серия,
	|	СписаниеТоваровТовары.Цена,
	|	ВЫБОР КОГДА СписаниеТоваровСерии.Серия ЕСТЬ NULL
	|		ТОГДА СписаниеТоваровТовары.Сумма
	|		ИНАЧЕ ВЫРАЗИТЬ(СписаниеТоваровТовары.Цена * СписаниеТоваровСерии.Количество КАК ЧИСЛО(15,2))
	|	КОНЕЦ КАК Сумма,
	|	СправочникНоменклатура.ЕдиницаИзмерения,
	|	СправочникНоменклатура.СтранаПроисхождения,
	|	""СобственныеТовары"" КАК ТипЗапасов
	|ИЗ
	|	Документ.СписаниеТоваров.Товары КАК СписаниеТоваровТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО СписаниеТоваровТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеТоваров.Серии КАК СписаниеТоваровСерии
	|		ПО (СписаниеТоваровТовары.Ссылка = СписаниеТоваровСерии.Ссылка)
	|			И (СписаниеТоваровТовары.Номенклатура = СписаниеТоваровСерии.Номенклатура)
	|			И (СписаниеТоваровТовары.Характеристика = СписаниеТоваровСерии.Характеристика)
	|ГДЕ
	|	СписаниеТоваровТовары.Ссылка = &Ссылка
	|	И СправочникНоменклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|";
	Запрос = Новый Запрос;
	Запрос.Текст = ТоварыДокумента;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатыЗапроса = Запрос.Выполнить();
	Товары = РезультатыЗапроса.Выгрузить();
	Если Не СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.СерииНоменклатуры") Тогда
		Товары.Колонки.Удалить("Серия");
	КонецЕсли;
	ЗаполнитьЕдиницыИзмеренияПоУмолчанию(Товары);
	Если Товары.Количество() > 0 Тогда
		ОбработатьХарактеристикиТоваров(КомпонентыОбмена, Товары);
		ОбработатьУпаковкиТоваров(КомпонентыОбмена, Товары);
		ЗаполнитьКоличествоПоРНПТ(КомпонентыОбмена, Товары, ДанныеИБ.Ссылка);
	
		ДанныеИБ.ДополнительныеСвойства.Вставить("Товары", Товары);
	Иначе
		УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Документ_СчетФактураВыданный_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование) Тогда
		ТипОснования = ТипЗнч(ДанныеИБ.ДокументОснование);
		Если ТипОснования = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
			ОчиститьИспользованиеПКО(ИспользованиеПКО);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Документ_СчетФактураПолученный_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ДокументОснование = ДанныеИБ.ДокументыОснования[0].ДокументОснование;
	ИспользованиеПКО.Документ_КорректировкаПоступленияТоваров_Отправка = ДанныеИБ.Корректировочный И ЗначениеЗаполнено(ДокументОснование);
	
	Для Каждого СтрокаОснование Из ДанныеИБ.ДокументыОснования Цикл
	
		Если НЕ ЗначениеЗаполнено(СтрокаОснование.ДокументОснование) Тогда
			Продолжить;
		КонецЕсли;
	
		ТипОснования = ТипЗнч(СтрокаОснование.ДокументОснование);
		Если ТипОснования = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
			ОчиститьИспользованиеПКО(ИспользованиеПКО);
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		ИспользованиеПКО.Документ_УстановкаЦенНоменклатуры_Отправка = ДанныеИБ.УстановкаЦенНоменклатуры;
		ИспользованиеПКО.Документ_ПереоценкаТоваровВРознице_Отправка = Не ДанныеИБ.УстановкаЦенНоменклатуры;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Магазины.Ссылка КАК Магазин,
	|	Магазины.ПравилоЦенообразования КАК ПравилоЦенообразования
	|ПОМЕСТИТЬ ТаблицаМагазиновЦеныНоменклатуры
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеновыеГруппы.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ЦеновыеГруппы.ВидЦен КАК ВидЦен,
	|	ЦеновыеГруппы.Ссылка КАК ПравилоЦенообразования
	|ПОМЕСТИТЬ ЦеновыеГруппыПравила
	|ИЗ
	|	Справочник.ПравилаЦенообразования.ЦеновыеГруппы КАК ЦеновыеГруппы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаМагазиновЦеныНоменклатуры КАК ТаблицаМагазинов
	|		ПО (ЦеновыеГруппы.Ссылка = ТаблицаМагазинов.ПравилоЦенообразования)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидЦен,
	|	ЦеноваяГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидЦеныПравила.ВидЦен КАК ВидЦен,
	|	ВидЦеныПравила.Ссылка КАК ПравилоЦенообразования
	|ПОМЕСТИТЬ ВидЦеныПравила
	|ИЗ
	|	Справочник.ПравилаЦенообразования КАК ВидЦеныПравила
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаМагазиновЦеныНоменклатуры КАК ТаблицаМагазинов
	|		ПО (ВидЦеныПравила.Ссылка = ТаблицаМагазинов.ПравилоЦенообразования)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтоговыйЗапрос.ВидЦен КАК ТипЦен,
	|	ИтоговыйЗапрос.Номенклатура КАК Номенклатура,
	|	ИтоговыйЗапрос.Характеристика КАК Характеристика,
	|	ИтоговыйЗапрос.Упаковка КАК Упаковка,
	|	ВЫБОР
	|		КОГДА ИтоговыйЗапрос.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА 1
	|		КОГДА ИтоговыйЗапрос.Упаковка.Коэффициент = 0
	|			ТОГДА 1
	|		ИНАЧЕ ИтоговыйЗапрос.Упаковка.Коэффициент
	|	КОНЕЦ КАК КоэффициентУпаковки,
	|	ИтоговыйЗапрос.Цена КАК Цена,
	|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СправочникНоменклатура.Весовой КАК Весовой,
	|	ВЫРАЗИТЬ(КодыТоваровSKU.SKU КАК Число(9)) КАК SKU
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПодЗапрос.ВидЦен КАК ВидЦен,
	|		ПодЗапрос.Номенклатура КАК Номенклатура,
	|		ПодЗапрос.Характеристика КАК Характеристика,
	|		ВЫБОР
	|			КОГДА МАКСИМУМ(ПодЗапрос.ЦенаПоЦеновымГруппам) > 0
	|				ТОГДА МАКСИМУМ(ПодЗапрос.УпаковкаПоЦеновымГруппам)
	|			ИНАЧЕ МАКСИМУМ(ПодЗапрос.УпаковкаПоВидуЦен)
	|		КОНЕЦ КАК Упаковка,
	|		ВЫБОР
	|			КОГДА МАКСИМУМ(ПодЗапрос.ЦенаПоЦеновымГруппам) > 0
	|				ТОГДА МАКСИМУМ(ПодЗапрос.ЦенаПоЦеновымГруппам)
	|			ИНАЧЕ МАКСИМУМ(ПодЗапрос.ЦенаПоВидуЦен)
	|		КОНЕЦ КАК Цена
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ЦеныНоменклатурыПоВидуЦен.Номенклатура КАК Номенклатура,
	|			ЦеныНоменклатурыПоВидуЦен.Характеристика КАК Характеристика,
	|			ЦеныНоменклатурыПоВидуЦен.Упаковка КАК УпаковкаПоВидуЦен,
	|			ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) КАК УпаковкаПоЦеновымГруппам,
	|			ЦеныНоменклатурыПоВидуЦен.Цена КАК ЦенаПоВидуЦен,
	|			0 КАК ЦенаПоЦеновымГруппам,
	|			ВидЦеныПравила.ВидЦен КАК ВидЦен
	|		ИЗ
	|			РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Регистратор = &Ссылка) КАК ЦеныНоменклатурыПоВидуЦен
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВидЦеныПравила КАК ВидЦеныПравила
	|				ПО (ВидЦеныПравила.ВидЦен = ЦеныНоменклатурыПоВидуЦен.ВидЦены)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			СправочникНоменклатура.Ссылка,
	|			ЦеныНоменклатурыПоЦеновымГруппам.Характеристика,
	|			ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка),
	|			ЦеныНоменклатурыПоЦеновымГруппам.Упаковка,
	|			0,
	|			ЕСТЬNULL(ЦеныНоменклатурыПоЦеновымГруппам.Цена, 0),
	|			ЦеновыеГруппыПравила.ПравилоЦенообразования.ВидЦен
	|		ИЗ
	|			ЦеновыеГруппыПравила КАК ЦеновыеГруппыПравила
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|				ПО ЦеновыеГруппыПравила.ЦеноваяГруппа = СправочникНоменклатура.ЦеноваяГруппа
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|						,
	|						ВидЦены В
	|								(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|									ЦеновыеГруппыПравила.ВидЦен
	|								ИЗ
	|									ЦеновыеГруппыПравила КАК ЦеновыеГруппыПравила)
	|							И Регистратор = &Ссылка) КАК ЦеныНоменклатурыПоЦеновымГруппам
	|				ПО (ЦеныНоменклатурыПоЦеновымГруппам.Номенклатура = СправочникНоменклатура.Ссылка)
	|					И (ЦеныНоменклатурыПоЦеновымГруппам.ВидЦены = ЦеновыеГруппыПравила.ВидЦен)) КАК ПодЗапрос
	|	ГДЕ
	|		ПодЗапрос.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПодЗапрос.Номенклатура,
	|		ПодЗапрос.Характеристика,
	|		ПодЗапрос.ВидЦен) КАК ИтоговыйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
	|		ПО (КодыТоваровSKU.Номенклатура = ИтоговыйЗапрос.Номенклатура)
	|			И (КодыТоваровSKU.Характеристика = ИтоговыйЗапрос.Характеристика)
	|			И (КодыТоваровSKU.Упаковка = ИтоговыйЗапрос.Упаковка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (СправочникНоменклатура.Ссылка = ИтоговыйЗапрос.Номенклатура)
	|ГДЕ
	|	ВЫБОР
	|		КОГДА &ТипЦенДляИзмененияЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ИтоговыйЗапрос.ВидЦен = &ТипЦенДляИзмененияЦен
	|	КОНЕЦ
	|ИТОГИ ПО
	|	ТипЦен
	|";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("ТипЦенДляИзмененияЦен", КомпонентыОбмена.ПараметрыКонвертации.ТипЦенДляИзмененияЦен);
	
	ТаблицаТоваров = Новый ТаблицаЗначений();
	ТаблицаТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТоваров.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("SKU", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(9)));
	ТаблицаТоваров.Колонки.Добавить("Весовой", Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	ВыборкаВидЦены = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПравилоУстановкаЦенОтправка = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Документ_УстановкаЦенНоменклатуры_Отправка", "Имя");
	Если Не ПравилоУстановкаЦенОтправка = Неопределено Тогда
		
		СчетчикЦены = 0;
		Пока ВыборкаВидЦены.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаВидЦены.ТипЦен) Тогда
				Продолжить;
			КонецЕсли;
			ДанныеИБСтруктура = Новый Структура("Дата, Номер, Ответственный, Комментарий");
			ЗаполнитьЗначенияСвойств(ДанныеИБСтруктура, ДанныеИБ);
			ДанныеИБСтруктура.Вставить("УстановкаЦенНоменклатуры", Истина);
			
			Если ВыборкаВидЦены.Количество() = 1 Тогда
				ДанныеИБСтруктура.Вставить("Ссылка", ДанныеИБ.Ссылка);
			Иначе
				НомерБезПрефиксов = ПрефиксацияОбъектовКлиентСервер.УдалитьПрефиксыИзНомераОбъекта(ДанныеИБ.Номер, Истина, Истина);
				СтандартныеПрефиксы = СтрЗаменить(ДанныеИБ.Номер, НомерБезПрефиксов, "");
				
				ПрефиксНомера = СтандартныеПрефиксы + СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Строка(СчетчикЦены), 2);
				НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеИБ.Номер, Истина, Истина);
				Если СтрДлина(ПрефиксНомера + НомерНаПечать) <= 11 Тогда
					ДанныеИБСтруктура.Номер = ПрефиксНомера
						+ СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НомерНаПечать, 11 - СтрДлина(ПрефиксНомера));
				КонецЕсли;
			КонецЕсли;
			
			ВыборкаДетали = ВыборкаВидЦены.Выбрать();
			ТаблицаТоваров.Очистить();
			Пока ВыборкаДетали.Следующий() Цикл
				СтрокаТовары = ТаблицаТоваров.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТовары, ВыборкаДетали);
				
				Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменБП30" Тогда
					СтрокаТовары.Цена = СтрокаТовары.Цена / ВыборкаДетали.КоэффициентУпаковки;
				КонецЕсли;
			КонецЦикла;
			
			Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменУРМК"
				И ПодключаемоеОборудованиеOfflineВызовСервера.ДоступностьРаботыСКодамиТоваровSKU()
				И ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("АвтоматическиГенерироватьSKU") Тогда
			    РегистрыСведений.КодыТоваровSKU.ОбновитьКоды_SKU_PLU(ТаблицаТоваров, Истина);
			КонецЕсли;
			
			ДанныеИБСтруктура.Вставить("ТипЦен", ВыборкаВидЦены.ТипЦен);
			
			ОбработатьХарактеристикиТоваров(КомпонентыОбмена, ТаблицаТоваров);
			ОбработатьУпаковкиТоваров(КомпонентыОбмена, ТаблицаТоваров);
			
			ДанныеИБСтруктура.Вставить("Товары", ТаблицаТоваров);
			ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, 
				ДанныеИБСтруктура, 
				ПравилоУстановкаЦенОтправка);
				
			СчетчикЦены = СчетчикЦены + 1;
		КонецЦикла;
	КонецЕсли;
	
	ИспользованиеПКО.Документ_УстановкаЦенНоменклатуры_Отправка = Ложь;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("ДатаДокумента", ДанныеИБ.Дата);
	Запрос.УстановитьПараметр("ГраницаДокумента", Новый Граница(ДанныеИБ.Дата, ВидГраницы.Исключая));
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Магазины.Ссылка КАК Магазин,
	|	Магазины.ПравилоЦенообразования КАК ПравилоЦенообразования
	|ПОМЕСТИТЬ ТаблицаМагазиновЦеныНоменклатуры
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеновыеГруппы.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ЦеновыеГруппы.ВидЦен КАК ВидЦен,
	|	ЦеновыеГруппы.Ссылка КАК ПравилоЦенообразования
	|ПОМЕСТИТЬ ЦеновыеГруппыПравила
	|ИЗ
	|	Справочник.ПравилаЦенообразования.ЦеновыеГруппы КАК ЦеновыеГруппы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаМагазиновЦеныНоменклатуры КАК ТаблицаМагазинов
	|		ПО ЦеновыеГруппы.Ссылка = ТаблицаМагазинов.ПравилоЦенообразования
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидЦен,
	|	ЦеноваяГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидЦеныПравила.ВидЦен КАК ВидЦен,
	|	ВидЦеныПравила.Ссылка КАК ПравилоЦенообразования
	|ПОМЕСТИТЬ ВидЦеныПравила
	|ИЗ
	|	Справочник.ПравилаЦенообразования КАК ВидЦеныПравила
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаМагазиновЦеныНоменклатуры КАК ТаблицаМагазинов
	|		ПО ВидЦеныПравила.Ссылка = ТаблицаМагазинов.ПравилоЦенообразования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтоговыйЗапрос.Магазин КАК Магазин,
	|	ИтоговыйЗапрос.Номенклатура КАК Номенклатура,
	|	ИтоговыйЗапрос.Характеристика КАК Характеристика,
	|	МАКСИМУМ(ИтоговыйЗапрос.Цена / ВЫБОР
	|			КОГДА ИтоговыйЗапрос.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|				ТОГДА 1
	|			КОГДА ИтоговыйЗапрос.Упаковка.Коэффициент = 0
	|				ТОГДА 1
	|			ИНАЧЕ ИтоговыйЗапрос.Упаковка.Коэффициент
	|		КОНЕЦ) КАК ЦенаВРознице,
	|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	МАКСИМУМ(ЕСТЬNULL(ПрошлыеЦены.Цена, 0) / ВЫБОР
	|			КОГДА ПрошлыеЦены.Упаковка ЕСТЬ NULL
	|				ТОГДА 1
	|			КОГДА ПрошлыеЦены.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|				ТОГДА 1
	|			КОГДА ПрошлыеЦены.Упаковка.Коэффициент = 0
	|				ТОГДА 1
	|			ИНАЧЕ ПрошлыеЦены.Упаковка.Коэффициент
	|		КОНЕЦ) КАК ЦенаВРозницеСтарая,
	|	СУММА(Остатки.КоличествоОстаток * (ИтоговыйЗапрос.Цена / ВЫБОР
	|			КОГДА ИтоговыйЗапрос.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|				ТОГДА 1
	|			КОГДА ИтоговыйЗапрос.Упаковка.Коэффициент = 0
	|				ТОГДА 1
	|			ИНАЧЕ ИтоговыйЗапрос.Упаковка.Коэффициент
	|		КОНЕЦ - ЕСТЬNULL(ПрошлыеЦены.Цена, 0) / ВЫБОР
	|			КОГДА ПрошлыеЦены.Упаковка ЕСТЬ NULL
	|				ТОГДА 1
	|			КОГДА ПрошлыеЦены.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|				ТОГДА 1
	|			КОГДА ПрошлыеЦены.Упаковка.Коэффициент = 0
	|				ТОГДА 1
	|			ИНАЧЕ ПрошлыеЦены.Упаковка.Коэффициент
	|		КОНЕЦ)) КАК СуммаПереоценки,
	|	Остатки.Организация КАК Организация,
	|	СУММА(Остатки.КоличествоОстаток) КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПодЗапрос.Магазин КАК Магазин,
	|		ПодЗапрос.Номенклатура КАК Номенклатура,
	|		ПодЗапрос.Характеристика КАК Характеристика,
	|		ВЫБОР
	|			КОГДА МАКСИМУМ(ПодЗапрос.ЦенаПоЦеновымГруппам) > 0
	|				ТОГДА МАКСИМУМ(ПодЗапрос.УпаковкаПоЦеновымГруппам)
	|			ИНАЧЕ МАКСИМУМ(ПодЗапрос.УпаковкаПоВидуЦен)
	|		КОНЕЦ КАК Упаковка,
	|		ВЫБОР
	|			КОГДА МАКСИМУМ(ПодЗапрос.ЦенаПоЦеновымГруппам) > 0
	|				ТОГДА МАКСИМУМ(ПодЗапрос.ЦенаПоЦеновымГруппам)
	|			ИНАЧЕ МАКСИМУМ(ПодЗапрос.ЦенаПоВидуЦен)
	|		КОНЕЦ КАК Цена,
	|		ВЫБОР
	|			КОГДА МАКСИМУМ(ПодЗапрос.ЦенаПоЦеновымГруппам) > 0
	|				ТОГДА МАКСИМУМ(ПодЗапрос.ВидЦеныПоЦеновымГруппам)
	|			ИНАЧЕ МАКСИМУМ(ПодЗапрос.ВидЦены)
	|		КОНЕЦ КАК ВидЦены
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ЦеныНоменклатурыПоВидуЦен.Номенклатура КАК Номенклатура,
	|			ЦеныНоменклатурыПоВидуЦен.Характеристика КАК Характеристика,
	|			ЦеныНоменклатурыПоВидуЦен.Упаковка КАК УпаковкаПоВидуЦен,
	|			ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) КАК УпаковкаПоЦеновымГруппам,
	|			ЦеныНоменклатурыПоВидуЦен.Цена КАК ЦенаПоВидуЦен,
	|			0 КАК ЦенаПоЦеновымГруппам,
	|			ТаблицаМагазинов.Магазин КАК Магазин,
	|			ЦеныНоменклатурыПоВидуЦен.ВидЦены КАК ВидЦены,
	|			ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка) КАК ВидЦеныПоЦеновымГруппам
	|		ИЗ
	|			РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Регистратор = &Ссылка) КАК ЦеныНоменклатурыПоВидуЦен
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВидЦеныПравила КАК ВидЦеныПравила
	|				ПО (ВидЦеныПравила.ВидЦен = ЦеныНоменклатурыПоВидуЦен.ВидЦены)
	|				ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаМагазиновЦеныНоменклатуры КАК ТаблицаМагазинов
	|				ПО (ТаблицаМагазинов.ПравилоЦенообразования = ВидЦеныПравила.ПравилоЦенообразования)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			СправочникНоменклатура.Ссылка,
	|			ЦеныНоменклатурыПоЦеновымГруппам.Характеристика,
	|			ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка),
	|			ЦеныНоменклатурыПоЦеновымГруппам.Упаковка,
	|			0,
	|			ЕСТЬNULL(ЦеныНоменклатурыПоЦеновымГруппам.Цена, 0),
	|			ТаблицаМагазинов.Магазин,
	|			ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка),
	|			ЦеныНоменклатурыПоЦеновымГруппам.ВидЦены
	|		ИЗ
	|			ЦеновыеГруппыПравила КАК ЦеновыеГруппыПравила
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|				ПО ЦеновыеГруппыПравила.ЦеноваяГруппа = СправочникНоменклатура.ЦеноваяГруппа
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|						,
	|						ВидЦены В
	|								(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|									ЦеновыеГруппыПравила.ВидЦен
	|								ИЗ
	|									ЦеновыеГруппыПравила КАК ЦеновыеГруппыПравила)
	|							И Регистратор = &Ссылка) КАК ЦеныНоменклатурыПоЦеновымГруппам
	|				ПО (ЦеныНоменклатурыПоЦеновымГруппам.Номенклатура = СправочникНоменклатура.Ссылка)
	|					И (ЦеныНоменклатурыПоЦеновымГруппам.ВидЦены = ЦеновыеГруппыПравила.ВидЦен)
	|				ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаМагазиновЦеныНоменклатуры КАК ТаблицаМагазинов
	|				ПО (ТаблицаМагазинов.ПравилоЦенообразования = ЦеновыеГруппыПравила.ПравилоЦенообразования)) КАК ПодЗапрос
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПодЗапрос.Номенклатура,
	|		ПодЗапрос.Характеристика,
	|		ПодЗапрос.Магазин) КАК ИтоговыйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (СправочникНоменклатура.Ссылка = ИтоговыйЗапрос.Номенклатура)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ГраницаДокумента, ) КАК ПрошлыеЦены
	|		ПО (ПрошлыеЦены.Номенклатура = ИтоговыйЗапрос.Номенклатура)
	|			И (ПрошлыеЦены.Характеристика = ИтоговыйЗапрос.Характеристика)
	|			И (ПрошлыеЦены.ВидЦены = ИтоговыйЗапрос.ВидЦены)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТоварыОрганизаций.Номенклатура КАК Номенклатура,
	|			ТоварыОрганизаций.Характеристика КАК Характеристика,
	|			ТоварыОрганизаций.Организация КАК Организация,
	|			СУММА(ТоварыОрганизаций.КоличествоОстаток) КАК КоличествоОстаток,
	|			Склады.Магазин КАК Магазин
	|		ИЗ
	|			РегистрНакопления.ТоварыОрганизаций.Остатки(&ДатаДокумента, Организация.СпособОценкиТоваровВРознице = ЗНАЧЕНИЕ(Перечисление.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости)) КАК ТоварыОрганизаций
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|				ПО (Склады.Ссылка = ТоварыОрганизаций.Склад)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТоварыОрганизаций.Номенклатура,
	|			ТоварыОрганизаций.Характеристика,
	|			ТоварыОрганизаций.Организация,
	|			Склады.Магазин) КАК Остатки
	|		ПО (Остатки.Магазин = ИтоговыйЗапрос.Магазин)
	|			И (Остатки.Номенклатура = ИтоговыйЗапрос.Номенклатура)
	|			И (Остатки.Характеристика = ИтоговыйЗапрос.Характеристика)
	|ГДЕ
	|	(СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|			ИЛИ СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
	|	И ЕСТЬNULL(ПрошлыеЦены.Цена, 0) > 0
	|	И ИтоговыйЗапрос.Цена <> ЕСТЬNULL(ПрошлыеЦены.Цена, 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИтоговыйЗапрос.Магазин,
	|	ИтоговыйЗапрос.Номенклатура,
	|	ИтоговыйЗапрос.Характеристика,
	|	СправочникНоменклатура.ЕдиницаИзмерения,
	|	Остатки.Организация
	|
	|ИМЕЮЩИЕ
	|	СУММА(Остатки.КоличествоОстаток) > 0
	|ИТОГИ ПО
	|	Организация,
	|	Магазин
	|";
	
	ТаблицаТоваров = Новый ТаблицаЗначений();
	ТаблицаТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТоваров.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.БазовыеЕдиницыИзмерения"));
	ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДСВРознице", Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ТаблицаТоваров.Колонки.Добавить("ЦенаВРознице", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("ЦенаВРозницеСтарая", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаПереоценки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда   
	
		ПравилоПереоценкаТоваровВРознице = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Документ_УстановкаЦенНоменклатуры_Отправка", "Имя");
		Если Не ПравилоПереоценкаТоваровВРознице = Неопределено Тогда
	
			СчетчикПереоценкиТоваровВРознице = 0;
	
			ВыборкаОрганизаций = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаОрганизаций.Следующий() Цикл
				ВыборкаМагазины = ВыборкаОрганизаций.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаМагазины.Следующий() Цикл
					ДанныеИБСтруктура = Новый Структура("Дата, Номер, Ответственный, Комментарий");
					ЗаполнитьЗначенияСвойств(ДанныеИБСтруктура, ДанныеИБ);
		   			ДанныеИБСтруктура.Вставить("УстановкаЦенНоменклатуры", Ложь);
						   			
					Если ВыборкаМагазины.Количество() = 1 Тогда
						ДанныеИБСтруктура.Вставить("Ссылка", ДанныеИБ.Ссылка);
					Иначе
						НомерБезПрефиксов = ПрефиксацияОбъектовКлиентСервер.УдалитьПрефиксыИзНомераОбъекта(ДанныеИБ.Номер, Истина, Истина);
						СтандартныеПрефиксы = СтрЗаменить(ДанныеИБ.Номер, НомерБезПрефиксов, "");
						
						ПрефиксНомера = СтандартныеПрефиксы + СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Строка(СчетчикПереоценкиТоваровВРознице), 2);
						НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеИБ.Номер, Истина, Истина);
						Если СтрДлина(ПрефиксНомера + НомерНаПечать) <= 11 Тогда
							ДанныеИБСтруктура.Номер = ПрефиксНомера
								+ СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НомерНаПечать, 11 - СтрДлина(ПрефиксНомера));
						КонецЕсли;
					КонецЕсли;
	
					ДанныеИБСтруктура.Вставить("Организация", ВыборкаМагазины.Организация);
					ДанныеИБСтруктура.Вставить("Склад", ВыборкаМагазины.Магазин);
	
					ВыборкаТовары = ВыборкаМагазины.Выбрать();
					ТаблицаТоваров.Очистить();
	
					Пока ВыборкаТовары.Следующий() Цикл
						СтрокаТовары = ТаблицаТоваров.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТовары, ВыборкаТовары);
					КонецЦикла;
				
					ОбработатьХарактеристикиТоваров(КомпонентыОбмена, ТаблицаТоваров);
					ДанныеИБСтруктура.Вставить("Товары", ТаблицаТоваров);
	
					ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, 
						ДанныеИБСтруктура, 
						ПравилоПереоценкаТоваровВРознице);
					
					СчетчикПереоценкиТоваровВРознице = СчетчикПереоценкиТоваровВРознице + 1;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ИспользованиеПКО.Документ_ПереоценкаТоваровВРознице_Отправка = Ложь;
КонецПроцедуры
Процедура ПОД_НастройкиЧастичногоВыбытияТоваров_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменУРМК" Тогда
			
		ЗаписиРС = ДанныеИБ.Выгрузить();
		Для Каждого Строка Из ЗаписиРС Цикл
			
			ШтрихкодыУпаковокОтправка = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Справочник_ШтрихкодыУпаковокТоваров_Отправка", "Имя");
			Если Не ШтрихкодыУпаковокОтправка = Неопределено Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = "
				|ВЫБРАТЬ
				|	Т.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.ШтрихкодыУпаковокТоваров КАК Т
				|ГДЕ
				|	Т.Номенклатура = &Номенклатура
				|	И Т.Характеристика = &Характеристика
				|	И Т.ТипУпаковки = &ТипУпаковки
				|";
	
				Запрос.УстановитьПараметр("Номенклатура", Строка.Номенклатура);
				Запрос.УстановитьПараметр("Характеристика", Строка.Характеристика);
				Запрос.УстановитьПараметр("ТипУпаковки", Перечисления.ТипыУпаковок.МаркированныйТовар);
	
				ВыборкаМарки = Запрос.Выполнить().Выбрать();
					
				Пока ВыборкаМарки.Следующий() Цикл
					МаркаОбъект = ВыборкаМарки.Ссылка.ПолучитьОбъект();
				КонецЦикла;
			КонецЕсли;
			
			Если МаркаОбъект <> Неопределено Тогда
				ДанныеИБСтруктура = Новый Структура("Ссылка, Упаковка, Серия, ТипУпаковки, ТипШтрихкода,
					|ЗначениеШтрихкода, Количество, ДатаУпаковки, Ответственный");
				ЗаполнитьЗначенияСвойств(ДанныеИБСтруктура, МаркаОбъект);
				
				ДанныеИБСтруктура.Вставить("Номенклатура", Строка.НоменклатураЧастичногоВыбытия);
				ДанныеИБСтруктура.Вставить("Характеристика", Строка.ХарактеристикаЧастичногоВыбытия);
	            ДанныеИБСтруктура.Вставить("ВложенныеТовары", Новый ТаблицаЗначений);
				
				ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБСтруктура, ШтрихкодыУпаковокОтправка);
			КонецЕсли;
			
			ПравилоНоменклатураОтправка = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Номенклатура_Отправка", "Имя");
			Если Не ПравилоНоменклатураОтправка = Неопределено Тогда
	            
	            НоменклатураОбъект = Строка.НоменклатураЧастичногоВыбытия.ПолучитьОбъект();
				Если НоменклатураОбъект <> Неопределено Тогда
					
					НоменклатураИС = Новый Массив;
					НоменклатураИС.Добавить(Строка.Номенклатура);
					
					ОписаниеИС = РегистрыСведений.ОписаниеНоменклатурыИС.ПолучитьОписание(НоменклатураИС);
					НоменклатураОбъект.ДополнительныеСвойства.Вставить("ОписаниеИС", ОписаниеИС[Строка.Номенклатура]);
					
					ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, НоменклатураОбъект, ПравилоНоменклатураОтправка);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;				
		
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Номенклатура_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ОчиститьИспользованиеПКО(ИспользованиеПКО);
	
	Если ДанныеИБ.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат
		И ДанныеИБ.ТипСрокаДействия <> Перечисления.СрокДействияПодарочныхСертификатов.СОграничениемНаДату Тогда
		ИспользованиеПКО.Вставить("Справочник_ВидыПодарочныхСертификатов_Отправка", Истина);
	ИначеЕсли ДанныеИБ.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
		Если ДанныеИБ.ЭтоГруппа Тогда
			ИспользованиеПКО.Вставить("Справочник_НоменклатураГруппа", Истина);
		Иначе			
			ИспользованиеПКО.Вставить("Справочник_Номенклатура_Отправка", Истина);
	    КонецЕсли;
		Если ДанныеИБ.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.АльтернативныйТабак
			ИЛИ ДанныеИБ.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.УпакованнаяВода Тогда
			
			Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.10") Тогда
				ОчиститьИспользованиеПКО(ИспользованиеПКО);
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	Если ДанныеИБ.ПометкаУдаления Тогда
		ИспользованиеПКО.Вставить("Справочник_ВидыПодарочныхСертификатов_Отправка", Ложь);
		ИспользованиеПКО.Вставить("Справочник_НоменклатураГруппа", Ложь);
		ИспользованиеПКО.Вставить("Справочник_Номенклатура_Отправка", Ложь);
	КонецЕсли;
	
	Если ИспользованиеПКО.Свойство("Справочник_Номенклатура_Отправка")
		И ИспользованиеПКО.Справочник_Номенклатура_Отправка Тогда
		Номенклатура = ДанныеИБ.Ссылка;
		
		ПравилоМаркиОтправка = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Справочник_ШтрихкодыУпаковокТоваров_Отправка", "Имя");
		Если Не ПравилоМаркиОтправка = Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ШтрихкодыУпаковокТоваров.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АкцизныеМаркиЕГАИС КАК АкцизныеМаркиЕГАИС
			|		ПО (АкцизныеМаркиЕГАИС.АкцизнаяМарка = ШтрихкодыУпаковокТоваров.Ссылка)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиЧастичногоВыбытияТоваровИСМП КАК НастройкиЧастичногоВыбытияТоваровИСМП
			|		ПО (ШтрихкодыУпаковокТоваров.Номенклатура = НастройкиЧастичногоВыбытияТоваровИСМП.Номенклатура)
			|ГДЕ
			|	ШтрихкодыУпаковокТоваров.Номенклатура = &Номенклатура
			|	И НастройкиЧастичногоВыбытияТоваровИСМП.Номенклатура ЕСТЬ NULL
			|	И (АкцизныеМаркиЕГАИС.Статус ЕСТЬ NULL
			|		ИЛИ НЕ АкцизныеМаркиЕГАИС.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.Реализована))
			|";
	
			Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
			
			ВыборкаМарки = Запрос.Выполнить().Выбрать();
				
			Пока ВыборкаМарки.Следующий() Цикл
				МаркаОбъект = ВыборкаМарки.Ссылка.ПолучитьОбъект();
				ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, МаркаОбъект, ПравилоМаркиОтправка);
			КонецЦикла;
		КонецЕсли;
	
		Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменУРМК" Тогда
			ПравилоШКОтправка = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Справочник_ШтрихкодыНоменклатуры_Отправка", "Имя");
			Если Не ПравилоШКОтправка = Неопределено Тогда
				НаборВсехШК = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
				НаборВсехШК.Отбор.Владелец.Установить(Номенклатура);
				
				НаборВсехШК.Прочитать();
				
	
				Для Каждого ЗаписьШК Из НаборВсехШК Цикл
					
					ОбъектШтрихкод = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
					
					ОбъектШтрихкод.Отбор.Штрихкод.Установить(ЗаписьШК.Штрихкод);
					ОбъектШтрихкод.Отбор.Владелец.Установить(ЗаписьШК.Владелец);
					ОбъектШтрихкод.Отбор.Характеристика.Установить(ЗаписьШК.Характеристика);
					ОбъектШтрихкод.Отбор.ТипШтрихкода.Установить(ЗаписьШК.ТипШтрихкода);
					ОбъектШтрихкод.Отбор.Упаковка.Установить(ЗаписьШК.Упаковка);
					
					ЗаполнитьЗначенияСвойств(ОбъектШтрихкод.Добавить(), ЗаписьШК);
					
					ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ОбъектШтрихкод, ПравилоШКОтправка);
					
				КонецЦикла;
			КонецЕсли;
		
			ПравилоСерииОтправка = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Справочник_СерииНоменклатуры_Отправка", "Имя");
			Если Не ПравилоСерииОтправка = Неопределено Тогда
		
				Запрос = Новый Запрос("ВЫБРАТЬ Т.Ссылка ИЗ Справочник.СерииНоменклатуры КАК Т ГДЕ Т.ВладелецСерии = &Номенклатура");
				Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
				
				ВыборкаСерии = Запрос.Выполнить().Выбрать();
					
				Пока ВыборкаСерии.Следующий() Цикл
						
					СерияОбъект = ВыборкаСерии.Ссылка.ПолучитьОбъект();
						
					ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, СерияОбъект, ПравилоСерииОтправка);
						
				КонецЦикла;
			КонецЕсли;
			
			ПравилоУпаковкиОтправка = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Справочник_Упаковки_Отправка", "Имя");
			Если Не ПравилоУпаковкиОтправка = Неопределено Тогда
		
				ВыборкаУпаковки = Справочники.УпаковкиНоменклатуры.Выбрать(, Номенклатура);
					
				Пока ВыборкаУпаковки.Следующий() Цикл
						
					УпаковкаОбъект = ВыборкаУпаковки.Ссылка.ПолучитьОбъект();
						
					ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, УпаковкаОбъект, ПравилоУпаковкиОтправка);
						
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_ОписаниеНоменклатурыИС_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменУРМК" Тогда
		ПравилоНоменклатураОтправка = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Номенклатура_Отправка", "Имя");
		Если Не ПравилоНоменклатураОтправка = Неопределено Тогда
			НоменклатураСсылка = ДанныеИБ.Отбор.Номенклатура.Значение;
	
			Если ОбщегоНазначения.СсылкаСуществует(НоменклатураСсылка) Тогда
		        НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();
				ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, НоменклатураОбъект, ПравилоНоменклатураОтправка);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_Банки_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеИБ.ЭтоГруппа Тогда
		ИспользованиеПКО.Справочник_Банки = Ложь;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_ВидыНоменклатуры_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеИБ.ЭтоГруппа
		ИЛИ Не СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.ВидыНоменклатуры") Тогда
		ОчиститьИспользованиеПКО(ИспользованиеПКО);
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_ВидыОплатЧекаККМ_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_ВидыОплатЧекаККМВЭквТерминалы_Отправка = ДанныеИБ.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ПлатежнаяСистема;
КонецПроцедуры
Процедура ПОД_Справочник_ДисконтныеКарты_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ДанныеКарты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.Ссылка, "ВладелецКарты, ВидКарты, БонуснаяПрограммаЛояльности");
	
	Если ЗначениеЗаполнено(ДанныеКарты.ВладелецКарты) Тогда
		Если НЕ (ТипЗнч(ДанныеКарты.ВладелецКарты) = Тип("СправочникСсылка.Контрагенты")
			ИЛИ ТипЗнч(ДанныеКарты.ВладелецКарты) = Тип("СправочникСсылка.ФизическиеЛица")) Тогда
			ИспользованиеПКО.Очистить();
			Возврат;
		КонецЕсли;
	Иначе
		ИспользованиеПКО.Очистить();
		Возврат;
	КонецЕсли;
	
	НомерКарты = "";				
	Если ДанныеКарты.ВидКарты = Перечисления.ВидыИнформационныхКарт.Штриховая Тогда
		
		ДанныеШтрихКода = ПодключаемоеОборудованиеРТ.ШтрихкодТовара(ДанныеИБ.Ссылка);
		Если Не ДанныеШтрихКода = Неопределено Тогда
			НомерКарты = ДанныеШтрихКода.Штрихкод;
		КонецЕсли;
	
	Иначе
		НомерКарты = ДанныеИБ.КодКарты;
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.6")
		ИЛИ НЕ ЗначениеЗаполнено(НомерКарты) Тогда
		ИспользованиеПКО.Очистить();
		Возврат;
	КонецЕсли;
	
	ДанныеИБ.ДополнительныеСвойства.Вставить("НомерКарты", НомерКарты);
	
	Если ЗначениеЗаполнено(ДанныеКарты.БонуснаяПрограммаЛояльности) Тогда
		ДанныеИБ.ДополнительныеСвойства.Вставить("ПрограммаЛояльности", ДанныеКарты.БонуснаяПрограммаЛояльности);
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_Кассы_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Кассы_Отправка = Не ДанныеИБ.КассаУправляющейСистемы;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.6") Тогда
		ИспользованиеПКО.Очистить();
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_КассыККМ_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.КассыККМ") Тогда
		ОчиститьИспользованиеПКО(ИспользованиеПКО);
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_КлассификаторТНВЭД_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.10") Тогда
		ИспользованиеПКО.Очистить();
		Возврат;
	КонецЕсли;
КонецПроцедуры
Функция ПОД_Справочник_КодыТоваровSKU_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(
		КомпонентыОбмена.УзелКорреспондента,
		КомпонентыОбмена.УзелКорреспондента.НомерОтправленного,
		Метаданные.РегистрыСведений.КодыТоваровSKU);
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("SKU", "SKU");
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");
	ПравилаЗаполнения.Вставить("Упаковка", "Упаковка");
	
	Пока ВыборкаИзменений.Следующий() Цикл
		Данные = ВыборкаИзменений.Получить();
		
		ЗаписиРегистра = Данные.Выгрузить();
		Для Каждого Строка Из ЗаписиРегистра Цикл
			ДанныеИБСтруктура = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивВыборки.Добавить(ДанныеИБСтруктура);
		КонецЦикла;
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
Процедура ПОД_Справочник_Контрагенты_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_КонтрагентыГруппа = (ДанныеИБ.ЭтоГруппа);
	ИспользованиеПКО.Справочник_Контрагенты_Отправка = НЕ (ДанныеИБ.ЭтоГруппа);
КонецПроцедуры
Процедура ПОД_Справочник_НоменклатураКартинки_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_НоменклатураКартинки_Отправка = ЗначениеЗаполнено(ДанныеИБ.ВладелецФайла);
КонецПроцедуры
Процедура ПОД_Справочник_НомераГТД_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.10") Тогда
		ИспользованиеПКО.Очистить();
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_СерииНоменклатуры_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.6") Тогда
		ИспользованиеПКО.Очистить();
	КонецЕсли;
	
	Если ДанныеИБ.ВидНоменклатуры.КиЗГИСМ Тогда
		ИспользованиеПКО.Очистить();
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_СерийныеНомераПС_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ТипСерийногоНомера = ДанныеИБ.Владелец.ТипСерийногоНомера;
	
	Если ТипСерийногоНомера <> Перечисления.ТипыСерийныхНомеровСертификатов.Магнитный Тогда
		СтруктураШтрихкода = ПодключаемоеОборудованиеРТ.ШтрихкодТовара(ДанныеИБ.Ссылка);
				
		Если СтруктураШтрихкода <> Неопределено Тогда
			Штрихкод = СтруктураШтрихкода.Штрихкод;
			ДанныеИБ.ДополнительныеСвойства.Вставить("СерийныйНомер", Штрихкод);
		Иначе
			ОчиститьИспользованиеПКО(ИспользованиеПКО);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_Склады_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ОчиститьИспользованиеПКО(ИспользованиеПКО);
КонецПроцедуры
Процедура ПОД_Справочник_СостояниеОплатыЗаказа_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Заказ = ДанныеИБ.Отбор.ЗаказПокупателя.Значение;
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.7")
		ИЛИ НЕ ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказПокупателя")
		ИЛИ ДанныеИБ.Количество() = 0 Тогда
		ИспользованиеПКО.Очистить();
		Возврат;	
	КонецЕсли;
	
	ТаблицаЗаписи = ДанныеИБ.Выгрузить();
	Если ТаблицаЗаписи.Количество() > 0 Тогда
		Состояние = ТаблицаЗаписи[0].Состояние;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Состояние) Тогда
		ИспользованиеПКО.Очистить();
	Иначе
		ДанныеИБ.ДополнительныеСвойства.Вставить("Состояние", Состояние);
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_СостояниеОтгрузкиЗаказа_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Заказ = ДанныеИБ.Отбор.ЗаказПокупателя.Значение;
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.7")
		ИЛИ НЕ ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказПокупателя")
		ИЛИ ДанныеИБ.Количество() = 0 Тогда
		ИспользованиеПКО.Очистить();
		Возврат;	
	КонецЕсли;
	
	ТаблицаЗаписи = ДанныеИБ.Выгрузить();
	Если ТаблицаЗаписи.Количество() > 0 Тогда
		Состояние = ТаблицаЗаписи[0].Состояние;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Состояние) Тогда
		ИспользованиеПКО.Очистить();
	Иначе
		ДанныеИБ.ДополнительныеСвойства.Вставить("Состояние", Состояние);
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_СостоянияЭД_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.7")
		ИЛИ ДанныеИБ.Количество() = 0  Тогда
		ИспользованиеПКО.Очистить();
		Возврат;	
	КонецЕсли;
	
	СсылкаНаОбъект = ДанныеИБ.Отбор.СсылкаНаОбъект.Значение;
	ТипСсылки = ТипЗнч(СсылкаНаОбъект);
	
	//Ошибка ED_1.7. В составном типе "СоставнойОснованияЭлектронныхДокументов" отсутствует тип "КлючевыеСвойстваВозвратТоваровПоставщику".
	Если ТипСсылки = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
		ИЛИ ТипСсылки = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		ИспользованиеПКО.Очистить();
		Возврат;
	КонецЕсли;
	
	СтрокиПКО = КомпонентыОбмена.ПравилаКонвертацииОбъектов.НайтиСтроки(Новый Структура("ТипДанных", ТипСсылки));
	
	Для Каждого СтрокаПКО Из СтрокиПКО Цикл
		ИмяПКООснованиеЭД = СтрокаПКО.ИмяПКО;
		Прервать;
	КонецЦикла;
	
	// Явное переназначение ПКО т.к. автоматически подбирается КорректировкаПоступления.
	Если ТипСсылки = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		ИмяПКООснованиеЭД = "Документ_СчетФактураПолученный_Отправка";
	КонецЕсли;
	
	ТаблицаЗаписи = ДанныеИБ.Выгрузить();
	СостояниеЭлектронногоДокумента = ТаблицаЗаписи[0].СостояниеЭДО;
	
	СтрокаПКПД = КомпонентыОбмена.ПравилаКонвертацииПредопределенныхДанных.Найти("ТипыСостоянийЭлектронногоДокумента", "ИмяПКПД");
	СоответствиеПКПД = СтрокаПКПД.КонвертацииЗначенийПриОтправке;
	ОчиститьПКО = СоответствиеПКПД[СостояниеЭлектронногоДокумента] = Неопределено;
	
	Если ОчиститьПКО 
		ИЛИ НЕ ЗначениеЗаполнено(ИмяПКООснованиеЭД)
		ИЛИ НЕ ЗначениеЗаполнено(СостояниеЭлектронногоДокумента) Тогда
		ИспользованиеПКО.Очистить();
	Иначе
		ДанныеИБ.ДополнительныеСвойства.Вставить("ОснованиеЭлектронногоДокумента",
					Новый Структура("Значение, ИмяПКО", СсылкаНаОбъект, ИмяПКООснованиеЭД));
		ДанныеИБ.ДополнительныеСвойства.Вставить("СостояниеЭлектронногоДокумента", СостояниеЭлектронногоДокумента);
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_Упаковки_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6")
		И ЗначениеЗаполнено(ДанныеИБ.Владелец) И ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
	
		ТипСтруктура = ТипЗнч(ДанныеИБ) = Тип("Структура");
	
		ИспользованиеПКО.Справочник_Упаковки_ИзСтруктуры = ТипСтруктура;
		ИспользованиеПКО.Справочник_Упаковки = НЕ ТипСтруктура;	
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_ФизическиеЛицаГруппа = (ДанныеИБ.ЭтоГруппа);
	ИспользованиеПКО.Справочник_ФизическиеЛица_Отправка = НЕ (ДанныеИБ.ЭтоГруппа);
КонецПроцедуры
Процедура ПОД_Справочник_ХарактеристикиНоменклатуры_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) <= ВерсияФорматаЧислом("1.6")
		И НЕ (ЗначениеЗаполнено(ДанныеИБ.Владелец) И ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.Номенклатура")) Тогда
		
		ОчиститьИспользованиеПКО(ИспользованиеПКО);
		Возврат;
	КонецЕсли;
	
	ЭтоСтруктура = ТипЗнч(ДанныеИБ) = Тип("Структура");
	ИспользованиеПКО.Справочник_ХарактеристикиНоменклатуры = НЕ ЭтоСтруктура;
	ИспользованиеПКО.Справочник_ХарактеристикиНоменклатуры_ИзСтруктуры = ЭтоСтруктура;
КонецПроцедуры
Процедура ПОД_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ВыполнятьВыгрузку = Истина;
	
	Если ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		КолонкиТЗ = ДанныеИБ.Записи.Колонки;
		
		Для каждого Запись Из ДанныеИБ.Записи Цикл
			Если (КолонкиТЗ.Найти("Номенклатура") <> Неопределено
				И ТипЗнч(Запись.Номенклатура) <> Тип("СправочникСсылка.Номенклатура"))
				ИЛИ (КолонкиТЗ.Найти("Упаковка") <> Неопределено 
				И ТипЗнч(Запись.Упаковка.Владелец) = Тип("СправочникСсылка.НаборыУпаковок")) Тогда // Условие к удалению см. 00-00412675
				
				ВыполнятьВыгрузку = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		ИспользованиеПКО.Справочник_ШтрихкодыНоменклатуры_Отправка = ВыполнятьВыгрузку;
		Возврат;
	КонецЕсли;
		
	ИменаСвойств = Новый Структура("Владелец,Характеристика,Упаковка");
	
	Для каждого ЭлементОтбора Из ДанныеИБ.Отбор Цикл
		Если ЗначениеЗаполнено(ЭлементОтбора.Значение)
			И ИменаСвойств.Свойство(ЭлементОтбора.Имя) Тогда
			Если ЭлементОтбора.Имя = "Владелец" 
				И ТипЗнч(ЭлементОтбора.Значение) <> Тип("СправочникСсылка.Номенклатура") Тогда
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СправочникСсылка.СерийныеНомера") Тогда
					Номенклатура = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементОтбора.Значение, "Владелец");
					
					ПараметрыСерийногоНомера = Новый Структура;
					ПараметрыСерийногоНомера.Вставить("Номенклатура", Номенклатура);
					ПараметрыСерийногоНомера.Вставить("Серия", ЭлементОтбора.Значение);
					
					ДанныеИБ.ДополнительныеСвойства.Вставить("ПараметрыСерийногоНомера", ПараметрыСерийногоНомера);
				Иначе
					ВыполнятьВыгрузку = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ИспользованиеПКО.Справочник_ШтрихкодыНоменклатуры_Отправка = ВыполнятьВыгрузку;
КонецПроцедуры
Функция ПОД_Справочник_ШтрихкодыНоменклатуры_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	ВыборкаЗаписей = РегистрыСведений.Штрихкоды.Выбрать();
	
	Пока ВыборкаЗаписей.Следующий() Цикл
		Если ТипЗнч(ВыборкаЗаписей.Владелец) <> Тип("СправочникСсылка.Номенклатура") Тогда
			Продолжить;
		КонецЕсли;
		
	 	ДанныеИБ = Новый Структура("Штрихкод");
		ЗаполнитьЗначенияСвойств(ДанныеИБ, ВыборкаЗаписей);
		
		НаборЗаписей = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
		
		ЗаписьШтрихкода = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьШтрихкода, ВыборкаЗаписей);
		
	   	ТаблицаЗаписи = НаборЗаписей.Выгрузить();
		ТаблицаЗаписи.Колонки.Владелец.Имя = "Номенклатура";
	    ДанныеИБ.Вставить("Записи", ТаблицаЗаписи);
		
		МассивВыборки.Добавить(ДанныеИБ);
	
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
Процедура ПОД_Справочник_ШтрихкодыУпаковокТоваров_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.7")
		ИЛИ Не ЗначениеЗаполнено(ДанныеИБ.Номенклатура) Тогда	
		ОчиститьИспользованиеПКО(ИспользованиеПКО);
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_ЭквайринговыеТерминалы_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.ЭквайринговыеТерминалы") Тогда
		ОчиститьИспользованиеПКО(ИспользованиеПКО);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ВозвратПодарочныхСертификатов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьВалюту(ДанныеXDTO);
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Лев(ДанныеИБ.Номер, 5) + "В" + Сред(ДанныеИБ.Номер, 7));
	ДанныеXDTO.Вставить("ОтчетОРозничныхПродажах", ДанныеИБ.ОтчетОРозничныхПродажах);
	ДанныеXDTO.Вставить("Комментарий", ДанныеИБ.Комментарий);
	
	ДанныеXDTO.Вставить("Сумма", ДанныеИБ.ПодарочныеСертификаты.Итог("Сумма"));
	
	Если ДанныеИБ.Свойство("ПодарочныеСертификаты") Тогда
		ДанныеXDTO.Вставить("ПодарочныеСертификаты", ДанныеИБ.ПодарочныеСертификаты);
	КонецЕсли;
	
	Если ДанныеИБ.Свойство("ОплатаПлатежнымиКартами") Тогда
		ДанныеXDTO.Вставить("ОплатаПлатежнымиКартами", ДанныеИБ.ОплатаПлатежнымиКартами);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.10") Тогда
		УстановитьПравилоДляПКСТабЧасти(КомпонентыОбмена,
										"Документ_ВозвратТоваровОтПокупателя_Отправка", 
										"Товары", 
										"НомерГТД", 
										Истина,
										"Справочник_НомераГТД_Отправка");
	КонецЕсли;
	
	ВыгрузитьВалюту(ДанныеXDTO);
	
	КурсКратность(ДанныеXDTO);
	
	ВыгрузитьДоговор(ДанныеИБ, ДанныеXDTO,"СПокупателем");
	
	ДанныеXDTO.Вставить("ВидОперации","ВозвратОтРозничногоПокупателя");
	
	Если ДанныеИБ.УчитыватьНДС Тогда
		Налогообложение = "ОблагаетсяНДС";
	Иначе
		Налогообложение = "НеОблагаетсяНДС";
	КонецЕсли;
	ДанныеXDTO.Вставить("Налогообложение",Налогообложение);
	
	ДокументРеализации = Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.ДокументПродажи
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		ДокументРеализации = Выборка.ДокументПродажи;
	ИначеЕсли ЗначениеЗаполнено(ДанныеИБ.ДокументОснование) Тогда
		ДокументРеализации = ДанныеИБ.ДокументОснование;
	КонецЕсли;	
	Если ДокументРеализации <> Неопределено Тогда
		ИмяПКО = "Документ_РеализацияТоваровУслуг_Отправка";
		Если ТипЗнч(ДокументРеализации) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
			ИмяПКО = "Документ_ОтчетОРозничныхПродажах_Отправка";
		КонецЕсли;
		ДанныеXDTO.Вставить("ДокументРеализации", Новый Структура("Значение, ИмяПКО", ДокументРеализации, ИмяПКО));
	Иначе
		ДанныеXDTO.Вставить("ДокументРеализации", Неопределено);
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.ДополнительныеСвойства.Товары);
	ДанныеXDTO.Вставить("АкцизныеМарки", ДанныеИБ.ДополнительныеСвойства.АкцизныеМарки);
КонецПроцедуры
Процедура ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.10") Тогда
		УстановитьПравилоДляПКСТабЧасти(КомпонентыОбмена,
										"Документ_ВозвратТоваровПоставщику_Отправка", 
										"Товары", 
										"НомерГТД", 
										Истина,
										"Справочник_НомераГТД_Отправка");
	КонецЕсли;
	
	ВыгрузитьВалюту(ДанныеXDTO);
	ВыгрузитьВалютуВзаиморасчетов(ДанныеXDTO);
	КурсКратность(ДанныеXDTO);
	
	Если ДанныеИБ.УчитыватьНДС Тогда
		Налогообложение = "ПродажаОблагаетсяНДС";
	Иначе
		Налогообложение = "ПродажаНеОблагаетсяНДС";
	КонецЕсли;
	ДанныеXDTO.Вставить("Налогообложение",Налогообложение);
	
	Если ЗначениеЗаполнено(ДанныеИБ.Договор) Тогда
		ВидОперации = "ВозвратКомитенту";
		ВыгрузитьДоговор(ДанныеИБ, ДанныеXDTO,"СКомитентом");
	Иначе 
		ВидОперации = "ВозвратПоставщику";
		ВыгрузитьДоговор(ДанныеИБ, ДанныеXDTO,"СПоставщиком");
	КонецЕсли;
	ДанныеXDTO.Вставить("ВидОперации", ВидОперации);
	
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.ДополнительныеСвойства.Товары);
	ДанныеXDTO.Вставить("АкцизныеМарки", ДанныеИБ.ДополнительныеСвойства.АкцизныеМарки);
	
	//Вариант настроек "ОбменКладовщик"
	ТелефонМенеджера = "";
	Для Каждого СтрокаКИ Из ДанныеИБ.Ответственный.КонтактнаяИнформация Цикл
		Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			ТелефонМенеджера = СтрокаКИ.Представление;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДопРеквизитов = Новый Структура;
	СтруктураДопРеквизитов.Вставить("ТелефонМенеджера", ТелефонМенеджера);
	
	МассивДопРеквизитов = Новый Массив;
	
	Для каждого ДопРеквизит Из СтруктураДопРеквизитов Цикл
		МассивДопРеквизитов.Добавить(ДопРеквизит.Ключ);
	КонецЦикла;
	
	ЗаполнитьДополнительныеРеквизиты(СтруктураДопРеквизитов, ДанныеXDTO, МассивДопРеквизитов);
КонецПроцедуры
Процедура ПКО_Документ_ЗаказПокупателя_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьВалюту(ДанныеXDTO);
	ВыгрузитьВалютуВзаиморасчетов(ДанныеXDTO);
	КурсКратность(ДанныеXDTO);
	
	ДанныеXDTO.Вставить("Товары",ДанныеИБ.ДополнительныеСвойства.Товары);
	ДанныеXDTO.Вставить("Услуги",ДанныеИБ.ДополнительныеСвойства.Услуги);
КонецПроцедуры
Процедура ПКО_Документ_ЗаказПоставщику_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьВалюту(ДанныеXDTO);
	ВыгрузитьВалютуВзаиморасчетов(ДанныеXDTO);
	КурсКратность(ДанныеXDTO);
	
	ДанныеXDTO.Вставить("Товары",ДанныеИБ.ДополнительныеСвойства.Товары);
	ДанныеXDTO.Вставить("Услуги",ДанныеИБ.ДополнительныеСвойства.Услуги);
	
	//Вариант настроек "ОбменКладовщик"
	ТелефонМенеджера = "";
	Для Каждого СтрокаКИ Из ДанныеИБ.Ответственный.КонтактнаяИнформация Цикл
		Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			ТелефонМенеджера = СтрокаКИ.Представление;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДопРеквизитов = Новый Структура;
	СтруктураДопРеквизитов.Вставить("ТелефонМенеджера", ТелефонМенеджера);
	
	МассивДопРеквизитов = Новый Массив;
	
	Для каждого ДопРеквизит Из СтруктураДопРеквизитов Цикл
		МассивДопРеквизитов.Добавить(ДопРеквизит.Ключ);
	КонецЦикла;
	
	ЗаполнитьДополнительныеРеквизиты(СтруктураДопРеквизитов, ДанныеXDTO, МассивДопРеквизитов);
КонецПроцедуры
Процедура ПКО_Документ_ИнвентаризационнаяОпись_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.ДополнительныеСвойства.Товары);
КонецПроцедуры
Процедура ПКО_Документ_КассоваяСменаЗакрытие_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьВалюту(ДанныеXDTO);
	
	ИмяПКО = "Справочник_КассыККМ_Отправка";
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Если ЗначениеЗаполнено(ДанныеИБ.КассаККМ) Тогда
			КассаККМ = ДанныеИБ.КассаККМ;
			ДанныеXDTO.Вставить("КассаККМ", Новый Структура("Значение, ИмяПКО", КассаККМ, ИмяПКО));
		КонецЕсли;	
		Возврат;
	КонецЕсли;
	
	КассаККМ = ДанныеИБ.ДополнительныеСвойства.КассаККМ;
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("КассаККМ", Новый Структура("Значение, ИмяПКО", КассаККМ, ИмяПКО));
	
	//Найдем отчет о розничных продажах
	ОтчетОРозничныхПродажах = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОтчетОРозничныхПродажах.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|ГДЕ
	|	ОтчетОРозничныхПродажах.КассоваяСмена = &КассоваяСмена";
	
	Запрос.УстановитьПараметр("КассоваяСмена", ДанныеИБ.Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ОтчетОРозничныхПродажах = Выборка.Ссылка;
		ДанныеXDTO.Вставить("Сумма", ОтчетОРозничныхПродажах.СуммаДокумента);
		ДанныеXDTO.Вставить("Кассир", Новый Структура("Значение, ИмяПКО", ОтчетОРозничныхПродажах.Ответственный, "Справочник_Пользователи_Отправка"));
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_КассоваяСменаОткрытие_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ИмяПКО = "Справочник_КассыККМ_Отправка";
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Если ЗначениеЗаполнено(ДанныеИБ.КассаККМ) Тогда
			КассаККМ = ДанныеИБ.КассаККМ;
			ДанныеXDTO.Вставить("КассаККМ", Новый Структура("Значение, ИмяПКО", КассаККМ, ИмяПКО));
			ДанныеXDTO.Вставить("Дата", ?(ЗначениеЗаполнено(ДанныеИБ.НачалоКассовойСмены), ДанныеИБ.НачалоКассовойСмены, ДанныеИБ.Дата));
		Иначе
			ДанныеXDTO = Неопределено;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	КассаККМ = ДанныеИБ.ДополнительныеСвойства.КассаККМ;
	ДанныеXDTO.КлючевыеСвойства.Вставить("КассаККМ", Новый Структура("Значение, ИмяПКО", КассаККМ, ИмяПКО));
	ДанныеXDTO.КлючевыеСвойства.Вставить("Дата", ?(ЗначениеЗаполнено(ДанныеИБ.НачалоКассовойСмены), ДанныеИБ.НачалоКассовойСмены, ДанныеИБ.Дата));
КонецПроцедуры
Процедура ПКО_Документ_КорректировкаПоступленияТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДокументОснование = ДанныеИБ.ДокументыОснования[0].ДокументОснование;
	
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", ДокументОснование.Номер);
	КонецЕсли;
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.10") Тогда
		УстановитьПравилоДляПКСТабЧасти(КомпонентыОбмена,
										"Документ_КорректировкаПоступленияТоваров_Отправка", 
										"Товары", 
										"НомерГТД", 
										Истина,
										"Справочник_НомераГТД_Отправка");
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ДокументПоступления", 				Новый Структура("Значение, ИмяПКО", ДокументОснование, "Документ_ПоступлениеТоваровУслуг_Отправка"));
	ДанныеXDTO.Вставить("ИсправляемыйДокументПоступления", 	Новый Структура("Значение, ИмяПКО", ДокументОснование, "Документ_ПоступлениеТоваровУслуг_Отправка"));
	
	ВыгрузитьВалюту(ДанныеXDTO);
	
	ДанныеXDTO.Вставить("ВидОперации", 		"СогласованноеИзменение");
	ДанныеXDTO.Вставить("ВосстановитьНДС", 	Истина);
	ДанныеXDTO.Вставить("ОтражатьВУчете", 	Истина);
	
	ЭтоКомиссия = Ложь;
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		ДанныеXDTO.Вставить("СуммаВключаетНДС", ДокументОснование.ЦенаВключаетНДС);
		ЭтоКомиссия = (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваров")) И (ДокументОснование.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию);
	КонецЕсли;
	
	СтруктураДанныеДоговора = Новый Структура;
	СтруктураДанныеДоговора.Вставить("Контрагент", ДанныеИБ.Контрагент);
	СтруктураДанныеДоговора.Вставить("Организация", ДанныеИБ.Организация);
	СтруктураДанныеДоговора.Вставить("РасчетыВУсловныхЕдиницах", Ложь);
	СтруктураДанныеДоговора.Вставить("ВидДоговора", ?(ЭтоКомиссия, "СКомитентом", "СПоставщиком"));
	ДанныеXDTO.Вставить("Договор", Новый Структура("Значение, ИмяПКО", СтруктураДанныеДоговора, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры"));
	
	//Налогообложение
	Если ЗначениеЗаполнено(ДокументОснование)
		И ДокументОснование.УчитыватьНДС Тогда
		
		Налогообложение = "ОблагаетсяНДС";
	
	Иначе
		Налогообложение = "НеОблагаетсяНДС";
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Налогообложение",Налогообложение);
	
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
	
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ПоступлениеТоваровТовары.Ссылка КАК Ссылка,
		|	ПоступлениеТоваровТовары.Номенклатура КАК Номенклатура,
		|	ПоступлениеТоваровТовары.Характеристика КАК Характеристика,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ПоступлениеТоваровТовары.Упаковка.Коэффициент, 1) = 1
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		ИНАЧЕ ПоступлениеТоваровТовары.Упаковка
		|	КОНЕЦ КАК Упаковка,
		|	ВЫБОР
		|		КОГДА ПоступлениеТоваровТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|			ТОГДА ПоступлениеТоваровТовары.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ПоступлениеТоваровТовары.Упаковка.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	СУММА(ЕСТЬNULL(ПоступлениеТоваровТовары.Количество, 0)) КАК Количество,
		|	ЕСТЬNULL(ПоступлениеТоваровТовары.Цена, 0) КАК Цена,
		|	СУММА(ЕСТЬNULL(ПоступлениеТоваровТовары.Сумма, 0)) КАК Сумма,
		|	ПоступлениеТоваровТовары.СтавкаНДС КАК СтавкаНДС,
		|	СУММА(ЕСТЬNULL(ПоступлениеТоваровТовары.СуммаНДС, 0)) КАК СуммаНДС,
		|	ПоступлениеТоваровТовары.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		|	МИНИМУМ(ПоступлениеТоваровТовары.НомерСтроки) КАК НомерСтроки,
		|	ПоступлениеТоваровТовары.НомерГТД КАК НомерГТД,
		|	СУММА(ЕСТЬNULL(ПоступлениеТоваровТовары.КоличествоПоРНПТ, 0)) КАК КоличествоПоРНПТ
		|ПОМЕСТИТЬ ТоварыПоФакту
		|ИЗ
		|	Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
		|ГДЕ
		|	(ПоступлениеТоваровТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|			ИЛИ ПоступлениеТоваровТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
		|	И ПоступлениеТоваровТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоступлениеТоваровТовары.Ссылка,
		|	ПоступлениеТоваровТовары.Номенклатура,
		|	ПоступлениеТоваровТовары.Характеристика,
		|	ЕСТЬNULL(ПоступлениеТоваровТовары.Цена, 0),
		|	ПоступлениеТоваровТовары.СтавкаНДС,
		|	ПоступлениеТоваровТовары.Ссылка.ЦенаВключаетНДС,
		|	ПоступлениеТоваровТовары.НомерГТД,
		|	ВЫБОР
		|		КОГДА ПоступлениеТоваровТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|			ТОГДА ПоступлениеТоваровТовары.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ПоступлениеТоваровТовары.Упаковка.ЕдиницаИзмерения
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ПоступлениеТоваровТовары.Упаковка.Коэффициент, 1) = 1
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		ИНАЧЕ ПоступлениеТоваровТовары.Упаковка
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыПоФакту.Номенклатура КАК Номенклатура,
		|	ТоварыПоФакту.Характеристика КАК Характеристика,
		|	МИНИМУМ(ТоварыПоФакту.НомерСтроки) КАК НомерСтроки
		|ПОМЕСТИТЬ ТоварыПоФактуНомерСтроки
		|ИЗ
		|	ТоварыПоФакту КАК ТоварыПоФакту
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыПоФакту.Номенклатура,
		|	ТоварыПоФакту.Характеристика
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоступлениеТоваровТоварыПоДаннымПоставщика.Ссылка КАК Ссылка,
		|	ПоступлениеТоваровТоварыПоДаннымПоставщика.Номенклатура КАК Номенклатура,
		|	ПоступлениеТоваровТоварыПоДаннымПоставщика.Характеристика КАК Характеристика,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ПоступлениеТоваровТоварыПоДаннымПоставщика.Упаковка.Коэффициент, 1) = 1
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		ИНАЧЕ ПоступлениеТоваровТоварыПоДаннымПоставщика.Упаковка
		|	КОНЕЦ КАК Упаковка,
		|	ВЫБОР
		|		КОГДА ПоступлениеТоваровТоварыПоДаннымПоставщика.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|			ТОГДА ПоступлениеТоваровТоварыПоДаннымПоставщика.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ПоступлениеТоваровТоварыПоДаннымПоставщика.Упаковка.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	СУММА(ЕСТЬNULL(ПоступлениеТоваровТоварыПоДаннымПоставщика.Количество, 0)) КАК Количество,
		|	ЕСТЬNULL(ПоступлениеТоваровТоварыПоДаннымПоставщика.Цена, 0) КАК Цена,
		|	СУММА(ЕСТЬNULL(ПоступлениеТоваровТоварыПоДаннымПоставщика.Сумма, 0)) КАК Сумма,
		|	ЕСТЬNULL(ПоступлениеТоваровТоварыПоДаннымПоставщика.СтавкаНДС, 0) КАК СтавкаНДС,
		|	СУММА(ЕСТЬNULL(ПоступлениеТоваровТоварыПоДаннымПоставщика.СуммаНДС, 0)) КАК СуммаНДС,
		|	ПоступлениеТоваровТоварыПоДаннымПоставщика.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		|	МИНИМУМ(ЕСТЬNULL(ТоварыПоФактуНомерСтроки.НомерСтроки, 1000)) КАК НомерСтроки
		|ПОМЕСТИТЬ ТоварыПоДокументам
		|ИЗ
		|	Документ.ПоступлениеТоваров.ТоварыПоДаннымПоставщика КАК ПоступлениеТоваровТоварыПоДаннымПоставщика
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыПоФактуНомерСтроки КАК ТоварыПоФактуНомерСтроки
		|		ПО ПоступлениеТоваровТоварыПоДаннымПоставщика.Номенклатура = ТоварыПоФактуНомерСтроки.Номенклатура
		|			И ПоступлениеТоваровТоварыПоДаннымПоставщика.Характеристика = ТоварыПоФактуНомерСтроки.Характеристика
		|ГДЕ
		|	(ПоступлениеТоваровТоварыПоДаннымПоставщика.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|			ИЛИ ПоступлениеТоваровТоварыПоДаннымПоставщика.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
		|	И ПоступлениеТоваровТоварыПоДаннымПоставщика.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоступлениеТоваровТоварыПоДаннымПоставщика.Ссылка,
		|	ПоступлениеТоваровТоварыПоДаннымПоставщика.Номенклатура,
		|	ПоступлениеТоваровТоварыПоДаннымПоставщика.Характеристика,
		|	ЕСТЬNULL(ПоступлениеТоваровТоварыПоДаннымПоставщика.Цена, 0),
		|	ЕСТЬNULL(ПоступлениеТоваровТоварыПоДаннымПоставщика.СтавкаНДС, 0),
		|	ПоступлениеТоваровТоварыПоДаннымПоставщика.Ссылка.ЦенаВключаетНДС,
		|	ВЫБОР
		|		КОГДА ПоступлениеТоваровТоварыПоДаннымПоставщика.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|			ТОГДА ПоступлениеТоваровТоварыПоДаннымПоставщика.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ПоступлениеТоваровТоварыПоДаннымПоставщика.Упаковка.ЕдиницаИзмерения
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ПоступлениеТоваровТоварыПоДаннымПоставщика.Упаковка.Коэффициент, 1) = 1
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		ИНАЧЕ ПоступлениеТоваровТоварыПоДаннымПоставщика.Упаковка
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ТоварыПоДокументам.Номенклатура, ТоварыПоФакту.Номенклатура) КАК Номенклатура,
		|	ЕСТЬNULL(ТоварыПоДокументам.Характеристика, ТоварыПоФакту.Характеристика) КАК Характеристика,
		|	ЕСТЬNULL(ТоварыПоДокументам.Упаковка, ТоварыПоФакту.Упаковка) КАК Упаковка,
		|	ПоступлениеТоваровСерии.Серия КАК Серия,
		|	ЕСТЬNULL(ТоварыПоДокументам.Количество, 0) КАК КоличествоДоКорректировки,
		|	ЕСТЬNULL(ТоварыПоДокументам.Количество, 0) КАК КоличествоДоИзменения,
		|	ЕСТЬNULL(ТоварыПоДокументам.Цена, 0) КАК ЦенаДоКорректировки,
		|	ЕСТЬNULL(ТоварыПоДокументам.Цена, 0) КАК ЦенаДоИзменения,
		|	ЕСТЬNULL(ТоварыПоДокументам.Сумма, 0) КАК СуммаДоКорректировки,
		|	ЕСТЬNULL(ТоварыПоДокументам.Сумма, 0) КАК СуммаДоИзменения,
		|	ТоварыПоДокументам.СтавкаНДС КАК СтавкаНДСДоКорректировки,
		|	ЕСТЬNULL(ТоварыПоДокументам.СуммаНДС, 0) КАК СуммаНДСДоКорректировки,
		|	ЕСТЬNULL(ТоварыПоДокументам.СуммаНДС, 0) КАК СуммаНДСДоИзменения,
		|	ЕСТЬNULL(ТоварыПоФакту.Количество, 0) КАК Количество,
		|	ЕСТЬNULL(ТоварыПоФакту.Цена, 0) КАК Цена,
		|	ЕСТЬNULL(ТоварыПоФакту.Сумма, 0) КАК Сумма,
		|	ТоварыПоФакту.СтавкаНДС КАК СтавкаНДС,
		|	ЕСТЬNULL(ТоварыПоФакту.СуммаНДС, 0) КАК СуммаНДС,
		|	ЕСТЬNULL(ТоварыПоФакту.ЦенаВключаетНДС, ЛОЖЬ) КАК ЦенаВключаетНДС,
		|	ЕСТЬNULL(ТоварыПоДокументам.ЦенаВключаетНДС, ЛОЖЬ) КАК ЦенаВключаетНДСДоКорректировки,
		|	ЕСТЬNULL(ТоварыПоДокументам.НомерСтроки, ТоварыПоФакту.НомерСтроки) КАК НомерСтроки,
		|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	&ТекстЗапросаГТД,
		|	ЕСТЬNULL(ТоварыПоФакту.КоличествоПоРНПТ, 0) КАК КоличествоРНПТ,
		|	0 КАК КоличествоРНПТДоИзменения,
		|	0 КАК КоличествоРНПТДоКорректировки,
		|	СправочникНоменклатура.КодТНВЭД.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
		|	СправочникНоменклатура.ЕдиницаИзмеренияТНВЭД КАК ЕдиницаИзмеренияПрослеживаемости
		|ИЗ
		|	ТоварыПоДокументам КАК ТоварыПоДокументам
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО ТоварыПоДокументам.Номенклатура = СправочникНоменклатура.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваров.Серии КАК ПоступлениеТоваровСерии
		|		ПО ТоварыПоДокументам.Ссылка = ПоступлениеТоваровСерии.Ссылка
		|			И ТоварыПоДокументам.Номенклатура = ПоступлениеТоваровСерии.Номенклатура
		|			И ТоварыПоДокументам.Характеристика = ПоступлениеТоваровСерии.Характеристика
		|		ПОЛНОЕ СОЕДИНЕНИЕ ТоварыПоФакту КАК ТоварыПоФакту
		|		ПО ТоварыПоДокументам.Номенклатура = ТоварыПоФакту.Номенклатура
		|			И ТоварыПоДокументам.Характеристика = ТоварыПоФакту.Характеристика
		|			И ТоварыПоДокументам.Цена = ТоварыПоФакту.Цена
		|			И ТоварыПоДокументам.СтавкаНДС = ТоварыПоФакту.СтавкаНДС
		|
		|ГДЕ
		|	СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|	И Не СправочникНоменклатура.КиЗГИСМ
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|";
	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаГТД",
				ПолучитьТекстЗапросаГТД(КомпонентыОбмена, "ТоварыПоФакту"));
	
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
	
		Запрос.УстановитьПараметр("Ссылка", ДокументОснование.Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Товары = РезультатЗапроса.Выгрузить();
			ОбработатьХарактеристикиТоваров(КомпонентыОбмена, Товары);
			ОбработатьУпаковкиТоваров(КомпонентыОбмена, Товары);
			ЗаполнитьЕдиницыИзмеренияПоУмолчанию(Товары);
			ДанныеXDTO.Вставить("Товары", Товары);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ОплатаОтПокупателяПлатежнойКартой_Отправк_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьВалюту(ДанныеXDTO);
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	ОплатаОтПокупателяПлатежнойКартойРасшифровкаПлатежа.Сумма,
	|	ОплатаОтПокупателяПлатежнойКартойРасшифровкаПлатежа.Сумма КАК СуммаВзаиморасчетов,
	|	ОплатаОтПокупателяПлатежнойКартойРасшифровкаПлатежа.ДокументРасчетовСКонтрагентом,
	|	ОплатаОтПокупателяПлатежнойКартойРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
	|	1 КАК КратностьВзаиморасчетов,
	|	1 КАК КурсВзаиморасчетов
	|ИЗ
	|	Документ.ОплатаОтПокупателяПлатежнойКартой.РасшифровкаПлатежа КАК ОплатаОтПокупателяПлатежнойКартойРасшифровкаПлатежа
	|ГДЕ
	|	ОплатаОтПокупателяПлатежнойКартойРасшифровкаПлатежа.Ссылка = &Ссылка
	|";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	РасшифровкаПлатежа = Запрос.Выполнить().Выгрузить();
	
	РасшифровкаПлатежа.Колонки.Добавить("Договор");
	РасшифровкаПлатежа.Колонки.Добавить("Заказ");
	РасшифровкаПлатежа.Колонки.Добавить("ВалютаВзаиморасчетов");
	РасшифровкаПлатежа.Колонки.Добавить("РасчетыВУсловныхЕдиницах");
	
	Для Каждого СтрокаРасшифровкаПлатежа Из РасшифровкаПлатежа Цикл
		
		СтруктураДоговор = Новый Структура;
		СтруктураДоговор.Вставить("ВидДоговора", "СПокупателем");
		СтруктураДоговор.Вставить("Организация", ДанныеИБ.Организация);
		СтруктураДоговор.Вставить("Контрагент", ДанныеИБ.Контрагент);
		СтруктураДоговор.Вставить("РасчетыВУсловныхЕдиницах", Ложь);
	
		СтруктураДанныеВалюты = Новый Структура;
		СтруктураДанныеВалюты.Вставить("Код", 643);
		СтруктураДанныеВалюты.Вставить("Наименование", "RUB");
	
		СтруктураДоговор.Вставить("ВалютаВзаиморасчетов", Новый Структура("Значение, ИмяПКО", СтруктураДанныеВалюты, "Справочник_Валюта_ИзСтруктуры"));
		
		СтрокаРасшифровкаПлатежа.Договор = Новый Структура("Значение, ИмяПКО", СтруктураДоговор, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
		
		Если ЗначениеЗаполнено(СтрокаРасшифровкаПлатежа.ДокументРасчетовСКонтрагентом) Тогда              
			ИмяПКО = "";
			ТипСсылки = ТипЗнч(СтрокаРасшифровкаПлатежа.ДокументРасчетовСКонтрагентом);
			Если ТипСсылки = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
				ИмяПКО = "Документ_ВозвратТоваровПоставщику_Отправка";
			ИначеЕсли
				ТипСсылки = Тип("ДокументСсылка.РеализацияТоваров") Тогда
				ИмяПКО = "Документ_РеализацияТоваровУслуг_Отправка";
			КонецЕсли;
	
			Если ИмяПКО <> "" Тогда
				СтрокаРасшифровкаПлатежа.Заказ = Новый Структура("Значение, ИмяПКО", СтрокаРасшифровкаПлатежа.ДокументРасчетовСКонтрагентом, ИмяПКО);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
КонецПроцедуры
Процедура ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.10") Тогда
		УстановитьПравилоДляПКСТабЧасти(КомпонентыОбмена,
										"Документ_ОприходованиеТоваров_Отправка", 
										"Товары", 
										"НомерГТД", 
										Истина,
										"Справочник_НомераГТД_Отправка");
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.ДополнительныеСвойства.Товары);
КонецПроцедуры
Процедура ПКО_Документ_ОприходованиеТоваровВПоступление_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.10") Тогда
		УстановитьПравилоДляПКСТабЧасти(КомпонентыОбмена,
										"Документ_ОприходованиеТоваровВПоступление_Отправка", 
										"Товары", 
										"НомерГТД", 
										Истина,
										"Справочник_НомераГТД_Отправка");
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидОперации", "ПриемНаКомиссию");
	ВыгрузитьДоговор(ДанныеИБ, ДанныеXDTO,"СКомитентом");
	
	ВыгрузитьВалюту(ДанныеXDTO);
	ВыгрузитьВалютуВзаиморасчетов(ДанныеXDTO);
	КурсКратность(ДанныеXDTO);
	
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.ДополнительныеСвойства.Товары);
КонецПроцедуры
Процедура ПКО_Документ_ОРП_ИзСтруктуры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6") Тогда
			ДанныеXDTO.Вставить("КассоваяСмена", ДанныеИБ.КассоваяСмена);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.10") Тогда
		УстановитьПравилоДляПКСТабЧасти(КомпонентыОбмена,
										"Документ_ОтчетОРозничныхПродажах_Отправка", 
										"ТоварыПродажа", 
										"НомерГТД", 
										Истина,
										"Справочник_НомераГТД_Отправка");
	КонецЕсли;
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Лев(ДанныеИБ.Номер, 5) + "П" + Сред(ДанныеИБ.Номер, 7));
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6") Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("КассоваяСмена", ДанныеИБ.КассоваяСмена);
		ДанныеXDTO.Вставить("КассаККМ", ДанныеИБ.КассаККМ);
	КонецЕсли;
	
	// Налогообложение
	Если ДанныеИБ.УчитыватьНДС Тогда
		Налогообложение = "ПродажаОблагаетсяНДС";
	Иначе
		Налогообложение = "ПродажаНеОблагаетсяНДС";
	КонецЕсли;
	ДанныеXDTO.Вставить("Налогообложение",Налогообложение);
	
	ВыгрузитьВалюту(ДанныеXDTO);
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.10") Тогда
		ВыгрузитьПатент(ДанныеИБ, ДанныеXDTO);
	КонецЕсли;
	
	ТипЦенМагазина = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Магазин.ПравилоЦенообразования, "ВидЦен");
	ДанныеXDTO.Вставить("ТипЦен", ТипЦенМагазина);
	
	ДанныеXDTO.Вставить("УчетВыручкиВОперационнойКассе", Истина);
	
	Инструкция = Новый Структура("Значение, ИмяПКО", ДанныеИБ.Магазин, "Справочник_Склады_Отправка");
	ДанныеXDTO.Вставить("Склад", Инструкция);
	
	ДанныеXDTO.Вставить("СуммаВключаетНДС", ДанныеИБ.ЦенаВключаетНДС);
	ДанныеXDTO.Вставить("Комментарий", ДанныеИБ.Комментарий);
	
	Если ДанныеИБ.Свойство("Товары") Тогда
		Товары = ДанныеИБ.Товары;
		ДанныеXDTO.Вставить("ТоварыПродажа", Товары);
		СуммаДокумента = ОбработкаТабличнойЧастиТоварыКлиентСервер.СуммаДокумента(Товары, ДанныеИБ.ЦенаВключаетНДС);
		ДанныеXDTO.Вставить("Сумма", СуммаДокумента);
	КонецЕсли;
	
	Если ДанныеИБ.Свойство("Возвраты") Тогда
		ДанныеXDTO.Вставить("ТоварыВозвратПродажи", ДанныеИБ.Возвраты);
	КонецЕсли;
	
	Если ДанныеИБ.Свойство("ПодарочныеСертификаты") Тогда
		ДанныеXDTO.Вставить("ПодарочныеСертификаты", ДанныеИБ.ПодарочныеСертификаты);
	КонецЕсли;
	
	Если ДанныеИБ.Свойство("ОплатаПлатежнымиКартами") Тогда
		ДанныеXDTO.Вставить("ОплатаПлатежнымиКартами", ДанныеИБ.ОплатаПлатежнымиКартами);
	КонецЕсли;
	
	Если ДанныеИБ.Свойство("ОплатаСертификатами") Тогда
		ДанныеXDTO.Вставить("ОплатаСертификатами", ДанныеИБ.ОплатаСертификатами);
	КонецЕсли;
	
	Если ДанныеИБ.Свойство("ОплатаБанковскимиКредитами") Тогда
		ДанныеXDTO.Вставить("ОплатаБанковскимиКредитами", ДанныеИБ.ОплатаБанковскимиКредитами);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ОтчетКомитенту_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьВалюту(ДанныеXDTO);
	ВыгрузитьВалютуВзаиморасчетов(ДанныеXDTO);
	КурсКратность(ДанныеXDTO);
	ВыгрузитьДоговор(ДанныеИБ, ДанныеXDTO,"СКомитентом");
	
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.СтавкаНДСВознаграждения) Тогда
		ДанныеXDTO.Вставить("СтавкаНДСВознаграждения", "БезНДС");
	КонецЕсли;
	
	//Товары
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ОтчетКомитентуОПродажахТовары.НомерСтроки КАК НомерСтрокиДокумента,
	|	ОтчетКомитентуОПродажахТовары.Номенклатура КАК Номенклатура,
	|	ОтчетКомитентуОПродажахТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ОтчетКомитентуОПродажахТовары.Характеристика КАК Характеристика,
	|	ОтчетКомитентуОПродажахТовары.Упаковка КАК Упаковка,
	|	ОтчетКомитентуОПродажахТовары.Количество КАК Количество,
	|	ОтчетКомитентуОПродажахТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ОтчетКомитентуОПродажахТовары.ЦенаЗакупки КАК ЦенаПоступления,
	|	ОтчетКомитентуОПродажахТовары.СуммаЗакупки КАК СуммаПоступления,
	|	ОтчетКомитентуОПродажахТовары.СтавкаНДС КАК СтавкаНДС,
	|	ОтчетКомитентуОПродажахТовары.СуммаНДС КАК СуммаНДС,
	|	ОтчетКомитентуОПродажахТовары.Цена КАК Цена,
	|	ОтчетКомитентуОПродажахТовары.Сумма КАК Сумма,
	|	ОтчетКомитентуОПродажахТовары.СуммаВознаграждения КАК СуммаВознаграждения,
	|	ВЫРАЗИТЬ(&КоэффициентПересчета * ОтчетКомитентуОПродажахТовары.СуммаВознаграждения КАК ЧИСЛО(15, 2)) КАК СуммаНДСВознаграждения,
	|	ОтчетКомитентуОПродажахТовары.ДокументРеализации.Дата КАК ДатаРеализации
	|ИЗ
	|	Документ.ОтчетКомитентуОПродажах.Товары КАК ОтчетКомитентуОПродажахТовары
	|ГДЕ
	|	ОтчетКомитентуОПродажахТовары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("КоэффициентПересчета", ?(ДанныеИБ.СуммаВознаграждения = 0, 0, ДанныеИБ.СуммаНДСВознаграждения / ДанныеИБ.СуммаВознаграждения));
	ДанныеXDTO.Вставить("Товары", Запрос.Выполнить().Выгрузить())
КонецПроцедуры
Процедура ПКО_Документ_ОтчетКомитентуОСписании_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Лев(ДанныеИБ.Номер, 5) + "С" + Сред(ДанныеИБ.Номер, 7));
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьВалюту(ДанныеXDTO);
	ВыгрузитьВалютуВзаиморасчетов(ДанныеXDTO);
	КурсКратность(ДанныеXDTO);
	ВыгрузитьДоговор(ДанныеИБ, ДанныеXDTO,"СКомитентом");
	
	ДанныеXDTO.Вставить("СпособРасчетаКомиссионногоВознаграждения", "НеРассчитывается");
	ДанныеXDTO.Вставить("СтавкаНДСВознаграждения", "БезНДС");
	
	//Товары
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтрокиДокумента,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Товары.Упаковка КАК Упаковка,
	|	Товары.Количество КАК Количество,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Товары.Цена КАК ЦенаПоступления,
	|	Товары.Сумма КАК СуммаПоступления,
	|	Товары.Сумма КАК Сумма,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.СуммаНДС КАК СуммаНДС
	|ИЗ
	|	Документ.ОтчетКомитентуОСписании.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДанныеXDTO.Вставить("Товары", Запрос.Выполнить().Выгрузить());
КонецПроцедуры
Процедура ПКО_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6") Тогда
			ДанныеXDTO.Вставить("КассоваяСмена", ДанныеИБ.КассоваяСмена);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.10") Тогда
		УстановитьПравилоДляПКСТабЧасти(КомпонентыОбмена,
										"Документ_ОтчетОРозничныхПродажах_Отправка", 
										"ТоварыПродажа", 
										"НомерГТД", 
										Истина,
										"Справочник_НомераГТД_Отправка");
	КонецЕсли;
	
	ВыгрузитьВалюту(ДанныеXDTO);
	
	// Налогообложение
	Если ДанныеИБ.УчитыватьНДС Тогда
		Налогообложение = "ПродажаОблагаетсяНДС";
	Иначе
		Налогообложение = "ПродажаНеОблагаетсяНДС";
	КонецЕсли;
	ДанныеXDTO.Вставить("Налогообложение",Налогообложение);
	
	ТипЦенМагазина = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Магазин.ПравилоЦенообразования, "ВидЦен");
	ДанныеXDTO.Вставить("ТипЦен", ТипЦенМагазина);
	
	ДанныеXDTO.Вставить("УчетВыручкиВОперационнойКассе", Истина);
	
	Если ДанныеИБ.ДополнительныеСвойства.Свойство("Товары") Тогда
		Товары = ДанныеИБ.ДополнительныеСвойства.Товары;
		ДанныеXDTO.Вставить("ТоварыПродажа", Товары);
		СуммаДокумента = ОбработкаТабличнойЧастиТоварыКлиентСервер.СуммаДокумента(Товары, ДанныеИБ.ЦенаВключаетНДС);
		ДанныеXDTO.Вставить("Сумма", СуммаДокумента);
	КонецЕсли;
	
	Если ДанныеИБ.ДополнительныеСвойства.Свойство("Возвраты") Тогда
		Возвраты = ДанныеИБ.ДополнительныеСвойства.Возвраты;
		ДанныеXDTO.Вставить("ТоварыВозвратПродажи", Возвраты);
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6") Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("КассоваяСмена", ДанныеИБ.КассоваяСмена);
		ДанныеXDTO.Вставить("КассаККМ", ДанныеИБ.КассаККМ);
	КонецЕсли;
	
	Если ДанныеИБ.ДополнительныеСвойства.Свойство("ПодарочныеСертификаты") Тогда
		ДанныеXDTO.Вставить("ПодарочныеСертификаты", ДанныеИБ.ДополнительныеСвойства.ПодарочныеСертификаты);
	КонецЕсли;
	
	Если ДанныеИБ.ДополнительныеСвойства.Свойство("ОплатаПлатежнымиКартами") Тогда
		ДанныеXDTO.Вставить("ОплатаПлатежнымиКартами", ДанныеИБ.ДополнительныеСвойства.ОплатаПлатежнымиКартами);
	КонецЕсли;
	
	Если ДанныеИБ.ДополнительныеСвойства.Свойство("ОплатаСертификатами") Тогда
		ДанныеXDTO.Вставить("ОплатаСертификатами", ДанныеИБ.ДополнительныеСвойства.ОплатаСертификатами);
	КонецЕсли;
	
	Если ДанныеИБ.ДополнительныеСвойства.Свойство("ОплатаБанковскимиКредитами") Тогда
		ДанныеXDTO.Вставить("ОплатаБанковскимиКредитами", ДанныеИБ.ДополнительныеСвойства.ОплатаБанковскимиКредитами);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.10") Тогда
		УстановитьПравилоДляПКСТабЧасти(КомпонентыОбмена,
										"Документ_ПеремещениеТоваров_Отправка", 
										"Товары", 
										"НомерГТД", 
										Истина,
										"Справочник_НомераГТД_Отправка");
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.ДополнительныеСвойства.Товары);
	ДанныеXDTO.Вставить("АкцизныеМарки", ДанныеИБ.ДополнительныеСвойства.АкцизныеМарки);
КонецПроцедуры
Процедура ПКО_Документ_ПереоценкаТоваровВРознице_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		ДанныеXDTO.Вставить("Товары", ДанныеИБ.Товары);
	КонецЕсли;
	
	Если ДанныеИБ.Свойство("Ссылка") Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ДанныеИБ.Ссылка);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПересортицаВОприходование_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.10") Тогда
		УстановитьПравилоДляПКСТабЧасти(КомпонентыОбмена,
										"Документ_ПересортицаВОприходование_Отправка", 
										"Товары", 
										"НомерГТД", 
										Истина,
										"Справочник_НомераГТД_Отправка");
	КонецЕсли;
	
	//Товары
	ТоварыДокумента =
	"ВЫБРАТЬ
	|   ПересортицаТоваровТовары.НоменклатураОприходование КАК Номенклатура,
	|   ПересортицаТоваровТовары.ХарактеристикаОприходование КАК Характеристика,
	|   ПересортицаТоваровТовары.Количество,
	|   СправочникНоменклатура.ЕдиницаИзмерения,
	|   СправочникНоменклатура.СтранаПроисхождения,
	|   ""СобственныеТовары"" КАК ТипЗапасов,
	|   ВЫРАЗИТЬ(ПересортицаТоваровТовары.Цена * ПересортицаТоваровТовары.Количество КАК Число(15,2)) КАК Сумма,
	|   ПересортицаТоваровТовары.ЦенаОприходование КАК Цена
	|ИЗ
	|   Документ.ПересортицаТоваров.Товары КАК ПересортицаТоваровТовары
	|       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|       ПО ПересортицаТоваровТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|   ПересортицаТоваровТовары.Ссылка = &Ссылка
	|   И СправочникНоменклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)";
	Запрос = Новый Запрос;
	Запрос.Текст = ТоварыДокумента;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатыЗапроса = Запрос.Выполнить();
	Товары = РезультатыЗапроса.Выгрузить();
	ЗаполнитьЕдиницыИзмеренияПоУмолчанию(Товары);
	
	ОбработатьХарактеристикиТоваров(КомпонентыОбмена, Товары);
	ЗаполнитьКоличествоПоРНПТ(КомпонентыОбмена, Товары, ДанныеИБ.Ссылка);
	
	ДанныеXDTO.Вставить("Сумма", Товары.Итог("Сумма"));
	ДанныеXDTO.Вставить("Товары", Товары);
КонецПроцедуры
Процедура ПКО_Документ_ПересортицаВСписание_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.10") Тогда
		УстановитьПравилоДляПКСТабЧасти(КомпонентыОбмена,
										"Документ_ПересортицаВСписание_Отправка", 
										"Товары", 
										"НомерГТД", 
										Истина,
										"Справочник_НомераГТД_Отправка");
	КонецЕсли;
	
	//Товары
	ТоварыДокумента =
	"ВЫБРАТЬ
	|   ПересортицаТоваровТовары.Номенклатура,
	|   ПересортицаТоваровТовары.Характеристика,
	|   ПересортицаТоваровТовары.Количество,
	|   ПересортицаТоваровТовары.Цена,
	|   СправочникНоменклатура.ЕдиницаИзмерения,
	|   СправочникНоменклатура.СтранаПроисхождения,
	|   ""СобственныеТовары"" КАК ТипЗапасов,
	|   ВЫРАЗИТЬ(ПересортицаТоваровТовары.Цена * ПересортицаТоваровТовары.Количество КАК Число(15,2)) КАК Сумма
	|ИЗ
	|   Документ.ПересортицаТоваров.Товары КАК ПересортицаТоваровТовары
	|       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|       ПО ПересортицаТоваровТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|   ПересортицаТоваровТовары.Ссылка = &Ссылка
	|   И СправочникНоменклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)";
	Запрос = Новый Запрос;
	Запрос.Текст = ТоварыДокумента;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатыЗапроса = Запрос.Выполнить();
	Товары = РезультатыЗапроса.Выгрузить();
	ЗаполнитьЕдиницыИзмеренияПоУмолчанию(Товары);
	
	ОбработатьХарактеристикиТоваров(КомпонентыОбмена, Товары);
	ЗаполнитьКоличествоПоРНПТ(КомпонентыОбмена, Товары, ДанныеИБ.Ссылка);
	
	ДанныеXDTO.Вставить("Сумма", Товары.Итог("Сумма"));
	ДанныеXDTO.Вставить("Товары", Товары);
КонецПроцедуры
Процедура ПКО_Документ_ПересчетТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПриказНаИнвентаризацию = ДанныеИБ.ДокументОснование;
	ДанныеXDTO.Вставить("НачалоПериодаИнвентаризации", ПриказНаИнвентаризацию.ДатаНачала);
	ДанныеXDTO.Вставить("ОкончаниеПериодаИнвентаризации", ПриказНаИнвентаризацию.ДатаОкончания);
	
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.ДополнительныеСвойства.Товары);
	
	//Вариант настроек "ОбменКладовщик"
	СтруктураДопРеквизитов = Новый Структура;
	СтруктураДопРеквизитов.Вставить("ОтображатьУчетноеКоличество", ДанныеИБ.УчетныеДанныеЗаполнены);
	
	МассивДопРеквизитов = Новый Массив;
	
	Для каждого ДопРеквизит Из СтруктураДопРеквизитов Цикл
		МассивДопРеквизитов.Добавить(ДопРеквизит.Ключ);
	КонецЦикла;
	
	ЗаполнитьДополнительныеРеквизиты(СтруктураДопРеквизитов, ДанныеXDTO, МассивДопРеквизитов);
КонецПроцедуры
Процедура ПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьВалюту(ДанныеXDTO);
	ДанныеXDTO.Вставить("ВидОперации", ДанныеИБ.ДополнительныеСвойства.ВидОперации);
КонецПроцедуры
Процедура ПКО_Документ_ПКОПоступлениеИзДругойКассы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьВалюту(ДанныеXDTO);
	
	ДанныеXDTO.Вставить("КассаОтправитель", ДанныеИБ.ДокументОснование.Касса);
КонецПроцедуры
Процедура ПКО_Документ_ПКОПоступлениеИзКассыККМ_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьВалюту(ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_Документ_ПКОПрочиеДоходы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьВалюту(ДанныеXDTO);
	
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("Сумма");
	НоваяСтрока = ТабРасшифровка.Добавить();
	Если ДанныеИБ.РасшифровкаПлатежа.Количество() >  0 И ЗначениеЗаполнено(ДанныеИБ.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств) Тогда
		НоваяСтрока.СтатьяДДС = ДанныеИБ.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
	КонецЕсли;
	НоваяСтрока.Сумма = ДанныеИБ.СуммаДокумента;
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
КонецПроцедуры
Процедура ПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоПоступлениеИзДругойОрганизации = Ложь;
	КонтрагентСсылка = ДанныеИБ.Контрагент;
	
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации Тогда
		ЭтоПоступлениеИзДругойОрганизации = Истина;
		ОрганизацияКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ДокументОснование, "Организация");
		//Поиск контрагента, соответствующего Организации
		СсылкаНаКонтрагента = Справочники.Контрагенты.ПолучитьСсылку(ОрганизацияКонтрагента.УникальныйИдентификатор());
		Если ОбщегоНазначения.СсылкаСуществует(СсылкаНаКонтрагента) Тогда
			КонтрагентСсылка = СсылкаНаКонтрагента;
		Иначе
			НайтиСоздатьКонтрагентаПоОрганизацииРТ(ОрганизацияКонтрагента, КонтрагентСсылка);
		КонецЕсли;
	
		ДанныеXDTO.Вставить("Контрагент", КонтрагентСсылка);
		ХозОперацияРКО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ДокументОснование, "ХозяйственнаяОперация");
		Если  ХозОперацияРКО = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюОрганизацию Тогда
			ВидРасчетов = "СПоставщиком";
		Иначе
			ВидРасчетов = "СПокупателем";
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика Тогда
		ВидРасчетов = "СПоставщиком";
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеДоходы Тогда
	//проверку счетов выполним в ПОД
		ВидРасчетов = "КредитыИЗаймы";
	Иначе
		ВидРасчетов = "СПокупателем";
	КонецЕсли;
	
	СтруктураДанныеВалюты = Новый Структура;
	СтруктураДанныеВалюты.Вставить("Код", 643);
	СтруктураДанныеВалюты.Вставить("Наименование", "RUB");
	
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетов);
	ДанныеXDTO.Вставить("Валюта", Новый Структура("Значение, ИмяПКО", СтруктураДанныеВалюты, "Справочник_Валюта_ИзСтруктуры"));
	
	//Расшифровка платежа
	Если ЭтоПоступлениеИзДругойОрганизации Тогда
		РасшифровкаПлатежа = "
		|	ВЫБРАТЬ
		|	ПриходныйКассовыйОрдер.СуммаДокумента КАК Сумма,
		|	ПриходныйКассовыйОрдер.СуммаДокумента КАК СуммаВзаиморасчетов,
		|	ПриходныйКассовыйОрдер.ДокументОснование КАК ДокументРасчетовСКонтрагентом,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ВыдачаДенежныхСредствВДругуюОрганизацию) КАК СтатьяДДС
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
		|ГДЕ
		|	ПриходныйКассовыйОрдер.Ссылка = &Ссылка";
		Запрос = Новый Запрос;
		Запрос.Текст = РасшифровкаПлатежа;
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Иначе
		РасшифровкаПлатежа = "
		|ВЫБРАТЬ
		|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		|	РасшифровкаПлатежа.Сумма,
		|	РасшифровкаПлатежа.Сумма КАК СуммаВзаиморасчетов,
		|	РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасшифровкаПлатежа
		|ГДЕ
		|	РасшифровкаПлатежа.Ссылка = &Ссылка";
		Запрос = Новый Запрос;
		Запрос.Текст = РасшифровкаПлатежа;
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	КонецЕсли;
	
	ТабРасшифровка = Запрос.Выполнить().Выгрузить();
	ТабРасшифровка.Колонки.Добавить("Договор");
	ТабРасшифровка.Колонки.Добавить("Заказ");
	ТабРасшифровка.Колонки.Добавить("ВалютаВзаиморасчетов");
	ТабРасшифровка.Колонки.Добавить("КурсВзаиморасчетов");
	ТабРасшифровка.Колонки.Добавить("КратностьВзаиморасчетов");
	ТабРасшифровка.Колонки.Добавить("РасчетыВУсловныхЕдиницах");
	
	Для Каждого СтрокаТаб Из ТабРасшифровка Цикл
		Если ВидРасчетов = "СПоставщиком" Тогда
			ВидДоговора = "СПоставщиком";
		Иначе
			ВидДоговора = "СПокупателем";
		КонецЕсли;
		СтруктураДоговор = Новый Структура;
		СтруктураДоговор.Вставить("ВидДоговора", ВидДоговора);
		СтруктураДоговор.Вставить("Организация", ДанныеИБ.Организация);
		СтруктураДоговор.Вставить("Контрагент", КонтрагентСсылка);
		СтруктураДоговор.Вставить("РасчетыВУсловныхЕдиницах", Ложь);
		СтруктураДоговор.Вставить("ВалютаВзаиморасчетов", Новый Структура("Значение, ИмяПКО", СтруктураДанныеВалюты, "Справочник_Валюта_ИзСтруктуры"));
		СтрокаТаб.Договор = Новый Структура("Значение, ИмяПКО", СтруктураДоговор, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
	
		СтрокаТаб.КурсВзаиморасчетов = 1;
		СтрокаТаб.КратностьВзаиморасчетов = 1;
		СтрокаТаб.РасчетыВУсловныхЕдиницах = Ложь;
		СтрокаТаб.ВалютаВзаиморасчетов = Новый Структура("Значение, ИмяПКО", СтруктураДанныеВалюты, "Справочник_Валюта_ИзСтруктуры");
	
		Если ЗначениеЗаполнено(СтрокаТаб.ДокументРасчетовСКонтрагентом) Тогда
			ИмяПКО = "";
			ТипСсылки = ТипЗнч(СтрокаТаб.ДокументРасчетовСКонтрагентом);
			Если ТипСсылки = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
				ИмяПКО = "Документ_ВозвратТоваровПоставщику_Отправка";
			КонецЕсли;
	
			Если ИмяПКО <> "" Тогда
				СтрокаТаб.Заказ = Новый Структура("Значение, ИмяПКО", СтрокаТаб.ДокументРасчетовСКонтрагентом, ИмяПКО);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
КонецПроцедуры
Процедура ПКО_Документ_ПКОРозничнаяВыручка_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьВалюту(ДанныеXDTO);
	ДанныеXDTO.Вставить("Склад", ДанныеИБ.КассаККМ.Магазин);
	ДанныеXDTO.Вставить("ВыручкаНТТ", Ложь);
КонецПроцедуры
Процедура ПКО_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.10") Тогда
		УстановитьПравилоДляПКСТабЧасти(КомпонентыОбмена,
										"Документ_ПоступлениеТоваровУслуг_Отправка", 
										"Товары", 
										"НомерГТД", 
										Истина,
										"Справочник_НомераГТД_Отправка");
	КонецЕсли;
	
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию Тогда
		ДанныеXDTO.Вставить("ВидОперации", "ПриемНаКомиссию");
		ВыгрузитьДоговор(ДанныеИБ, ДанныеXDTO,"СКомитентом");
	Иначе
		ДанныеXDTO.Вставить("ВидОперации", "ПокупкаУПоставщика");
		ВыгрузитьДоговор(ДанныеИБ, ДанныеXDTO,"СПоставщиком");
	КонецЕсли;
	
	ВыгрузитьВалюту(ДанныеXDTO);
	ВыгрузитьВалютуВзаиморасчетов(ДанныеXDTO);
	КурсКратность(ДанныеXDTO);
	
	// Налогообложение
	Если ДанныеИБ.УчитыватьНДС Тогда
		Налогообложение = "ОблагаетсяНДС";
	Иначе
		Налогообложение = "НеОблагаетсяНДС";
	КонецЕсли;
	ДанныеXDTO.Вставить("Налогообложение",Налогообложение);
	
	ДанныеXDTO.Вставить("Товары",ДанныеИБ.ДополнительныеСвойства.Товары);
	ДанныеXDTO.Вставить("Услуги",ДанныеИБ.ДополнительныеСвойства.Услуги);
	ДанныеXDTO.Вставить("Излишки",ДанныеИБ.ДополнительныеСвойства.Излишки);
	ДанныеXDTO.Вставить("Недостачи",ДанныеИБ.ДополнительныеСвойства.Недостачи);
	ДанныеXDTO.Вставить("АкцизныеМарки",ДанныеИБ.ДополнительныеСвойства.АкцизныеМарки);
КонецПроцедуры
Процедура ПКО_Документ_ПрименениеЦенНоменклатуры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ТоварыДокумента = "ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.НомерСтроки КАК НомерСтрокиДокумента,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА Товары.Цена
	|		ИНАЧЕ Товары.Цена / СпрУпаковки.Коэффициент
	|	КОНЕЦ КАК Цена
	|ИЗ
	|	Документ.ПрименениеЦенНоменклатуры.Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиНоменклатуры КАК СпрУпаковки
	|		ПО (СпрУпаковки.Ссылка = Товары.Упаковка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО (СпрНоменклатура.Ссылка = Товары.Номенклатура)
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И (СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|			ИЛИ СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТоварыДокумента;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатыЗапроса = Запрос.Выполнить();
	Товары = РезультатыЗапроса.Выгрузить();
	
	ДанныеXDTO.Вставить("Товары", Товары);
	
	ДанныеXDTO.Вставить("ТипЦен",ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ОбъектЦенообразования,"ПравилоЦенообразования"));
КонецПроцедуры
Процедура ПКО_Документ_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ВидОперации", "РеализацияКлиенту");
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.10") Тогда
		УстановитьПравилоДляПКСТабЧасти(КомпонентыОбмена,
										"Документ_РеализацияТоваровУслуг_Отправка", 
										"Товары", 
										"НомерГТД", 
										Истина,
										"Справочник_НомераГТД_Отправка");
	КонецЕсли;
	
	ВыгрузитьВалюту(ДанныеXDTO);
	ВыгрузитьВалютуВзаиморасчетов(ДанныеXDTO);
	КурсКратность(ДанныеXDTO);
	ВыгрузитьДоговор(ДанныеИБ, ДанныеXDTO,"СПокупателем");
	
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.ДополнительныеСвойства.Товары);
	ДанныеXDTO.Вставить("Услуги", ДанныеИБ.ДополнительныеСвойства.Услуги);
КонецПроцедуры
Процедура ПКО_Документ_РКОВыдачаВДругуюКассу_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьВалюту(ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_Документ_РКОВыдачаВКассуККМ_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьВалюту(ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_Документ_РКОНаБанковскийСчет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьВалюту(ДанныеXDTO);
	
	ДанныеXDTO.Вставить("ВидОперации", "ВзносНаличными");
КонецПроцедуры
Процедура ПКО_Документ_РКОПрочийРасход_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьВалюту(ДанныеXDTO);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	РасшифровкаПлатежа.Сумма,
	|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|ГДЕ
	|	РасшифровкаПлатежа.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	ТабРасшифровка = Запрос.Выполнить().Выгрузить();
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
КонецПроцедуры
Процедура ПКО_Документ_РКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ВыгрузитьВалюту(ДанныеXDTO);
	
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику Тогда
		ДанныеXDTO.Вставить("ВидРасчетов", "СПоставщиком");
		ВидДоговора = "СПоставщиком";
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюОрганизацию Тогда
		ДанныеXDTO.Вставить("ВидРасчетов", "СПоставщиком");
		ВидДоговора = "СПокупателем";
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		ДанныеXDTO.Вставить("ВидРасчетов", "СПокупателем");
		ВидДоговора = "СПокупателем";
	КонецЕсли;
	КонтрагентСсылка = ДанныеИБ.Контрагент;
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюОрганизацию Тогда
		//Поиск контрагента, соответствующего Организации
		ЭтоПоступлениеИзДругойОрганизации = Истина;
		ОрганизацияПолучатель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.КассаПолучатель, "Владелец");
		СсылкаНаКонтрагента = Справочники.Контрагенты.ПолучитьСсылку(ОрганизацияПолучатель.УникальныйИдентификатор());
		Если ОбщегоНазначения.СсылкаСуществует(СсылкаНаКонтрагента) Тогда
			КонтрагентСсылка = СсылкаНаКонтрагента;
		Иначе
			НайтиСоздатьКонтрагентаПоОрганизацииРТ(ОрганизацияПолучатель, КонтрагентСсылка);
		КонецЕсли;
		ДанныеXDTO.Вставить("Контрагент", КонтрагентСсылка);
	Иначе
		ЭтоПоступлениеИзДругойОрганизации = Ложь;
	КонецЕсли;
	
	Если ЭтоПоступлениеИзДругойОрганизации Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	РасходныйКассовыйОрдер.СуммаДокумента КАК Сумма,
		|	РасходныйКассовыйОрдер.СуммаДокумента КАК СуммаВзаиморасчетов,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ВыдачаДенежныхСредствВДругуюОрганизацию) КАК СтатьяДДС
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
		|ГДЕ
		|	РасходныйКассовыйОрдер.Ссылка = &Ссылка");
	Иначе
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Сумма,
		|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Сумма КАК СуммаВзаиморасчетов,
		|	РасходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		|	РасходныйКассовыйОрдерРасшифровкаПлатежа.ДокументРасчетовСКонтрагентом
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасходныйКассовыйОрдерРасшифровкаПлатежа
		|ГДЕ
		|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка = &Ссылка");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	ТабРасшифровка = Запрос.Выполнить().Выгрузить();
	ТабРасшифровка.Колонки.Добавить("Договор");
	ТабРасшифровка.Колонки.Добавить("Заказ");
	ТабРасшифровка.Колонки.Добавить("ВалютаВзаиморасчетов");
	ТабРасшифровка.Колонки.Добавить("КурсВзаиморасчетов");
	ТабРасшифровка.Колонки.Добавить("КратностьВзаиморасчетов");
	ТабРасшифровка.Колонки.Добавить("РасчетыВУсловныхЕдиницах");
	ТабРасшифровка.Колонки.Добавить("ДокументРасчетов");
	ТабРасшифровка.Колонки.Добавить("СпособПогашенияЗадолженности");
	ТабРасшифровка.Колонки.Добавить("СтавкаНДС");
	ТабРасшифровка.Колонки.Добавить("СуммаНДС");
	
	СтруктураДанныеВалюты = Новый Структура;
	СтруктураДанныеВалюты.Вставить("Код", 643);
	СтруктураДанныеВалюты.Вставить("Наименование", "RUB");
	
	Для Каждого СтрокаТаб Из ТабРасшифровка Цикл
		Договор = Новый Структура;
		Договор.Вставить("ВидДоговора", ВидДоговора);
		Договор.Вставить("РасчетыВУсловныхЕдиницах", Ложь);
		Договор.Вставить("Организация", ДанныеИБ.Организация);
		Договор.Вставить("Контрагент", КонтрагентСсылка);
		Договор.Вставить("ВалютаВзаиморасчетов", Новый Структура("Значение, ИмяПКО", СтруктураДанныеВалюты, "Справочник_Валюта_ИзСтруктуры"));
		СтрокаТаб.Договор = Новый Структура("Значение, ИмяПКО", Договор, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
		СтрокаТаб.КурсВзаиморасчетов = 1;
		СтрокаТаб.КратностьВзаиморасчетов = 1;
		СтрокаТаб.РасчетыВУсловныхЕдиницах = Ложь;
		СтрокаТаб.ВалютаВзаиморасчетов = Новый Структура("Значение, ИмяПКО", СтруктураДанныеВалюты, "Справочник_Валюта_ИзСтруктуры");
	КонецЦикла;
	
	ТабРасшифровкаДоп = Новый ТаблицаЗначений;
	
	Если НЕ ЭтоПоступлениеИзДругойОрганизации Тогда
		ТабРасшифровкаДоп = ТабРасшифровка.Скопировать();
		ТабРасшифровкаДоп.Очистить();
		
		Для Индекс = 0 По ТабРасшифровка.Количество() - 1 Цикл
			
			ДокументРасчетов = ТабРасшифровка[Индекс].ДокументРасчетовСКонтрагентом;
			
			Если ЗначениеЗаполнено(ДокументРасчетов) Тогда
				
				Если Не ДокументРасчетов.Метаданные().ТабличныеЧасти.Найти("Товары") = Неопределено Тогда
							
					ТипДокументаРасчетов = ТипЗнч(ДокументРасчетов);
					СтрокиПКО = КомпонентыОбмена.ПравилаКонвертацииОбъектов.НайтиСтроки(Новый Структура("ТипДанных", ТипДокументаРасчетов));
					Для Каждого СтрокаПКО Из СтрокиПКО Цикл
						ИмяПКОДокументРасчетов = СтрокаПКО.ИмяПКО;
						Прервать;
					КонецЦикла;
					
					ТЧТовары = ДокументРасчетов.Товары.Выгрузить();
					ТЧТовары.Свернуть("СтавкаНДС", "Сумма, СуммаНДС");
					СуммаОснование = ТЧТовары.Итог("Сумма");
					Коэфициент = ТабРасшифровка[Индекс].Сумма / СуммаОснование;
					
					Для Каждого СтрокаТЧТовары Из ТЧТовары Цикл
						НоваяСтрока = ТабРасшифровкаДоп.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ТабРасшифровка[Индекс],,"Сумма");
						
						Если ЗначениеЗаполнено(ИмяПКОДокументРасчетов) Тогда
							НоваяСтрока.ДокументРасчетов = Новый Структура("Значение, ИмяПКО", ДокументРасчетов, ИмяПКОДокументРасчетов);
							НоваяСтрока.СпособПогашенияЗадолженности = "ПоДокументу";
						КонецЕсли;
						НоваяСтрока.СтавкаНДС = СтрокаТЧТовары.СтавкаНДС;
						НоваяСтрока.СуммаНДС = Окр(СтрокаТЧТовары.СуммаНДС * Коэфициент, 2);
						НоваяСтрока.Сумма = Окр(СтрокаТЧТовары.Сумма * Коэфициент, 2);
						НоваяСтрока.СуммаВзаиморасчетов = НоваяСтрока.Сумма;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;		
		КонецЦикла;
	КонецЕсли;
	Если ТабРасшифровкаДоп.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровкаДоп);
	Иначе
		ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_СборкаТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.10") Тогда
		УстановитьПравилоДляПКСТабЧасти(КомпонентыОбмена,
										"Документ_СборкаТоваров_Отправка", 
										"Товары", 
										"НомерГТД", 
										Истина,
										"Справочник_НомераГТД_Отправка");
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ЕдиницаИзмерения", ДанныеИБ.Номенклатура.ЕдиницаИзмерения);
	ДанныеXDTO.Вставить("ТипЗапасов", "СобственныеТовары");
	
	//Товары
	ТоварыДокумента = 
	"ВЫБРАТЬ
	|	СборкаТоваровТовары.Номенклатура,
	|	СборкаТоваровТовары.Характеристика,
	|	СборкаТоваровТовары.Количество,
	|	СправочникНоменклатура.ЕдиницаИзмерения,
	|	СправочникНоменклатура.СтранаПроисхождения,
	|	""СобственныеТовары"" КАК ТипЗапасов,
	|	СборкаТоваровТовары.Упаковка,
	|	СборкаТоваровТовары.КоличествоУпаковок,
	|	СборкаТоваровТовары.ДоляСтоимости
	|ИЗ
	|	Документ.СборкаТоваров.Товары КАК СборкаТоваровТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО СборкаТоваровТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СборкаТоваровТовары.Ссылка = &Ссылка
	|	И СправочникНоменклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)";
	Запрос = Новый Запрос;
	Запрос.Текст = ТоварыДокумента;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатыЗапроса = Запрос.Выполнить();
	Товары = РезультатыЗапроса.Выгрузить();
	ЗаполнитьЕдиницыИзмеренияПоУмолчанию(Товары);
	
	ОбработатьХарактеристикиТоваров(КомпонентыОбмена, Товары);
	ОбработатьУпаковкиТоваров(КомпонентыОбмена, Товары);
	ЗаполнитьКоличествоПоРНПТ(КомпонентыОбмена, Товары, ДанныеИБ.Ссылка);
	
	ДанныеXDTO.Вставить("Товары", Товары);
КонецПроцедуры
Процедура ПКО_Документ_СписаниеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.10") Тогда
		УстановитьПравилоДляПКСТабЧасти(КомпонентыОбмена,
										"Документ_СписаниеТоваров_Отправка", 
										"Товары", 
										"НомерГТД", 
										Истина,
										"Справочник_НомераГТД_Отправка");
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Основание",Лев(ДанныеИБ.ОснованиеСписания,250));
	
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.ДополнительныеСвойства.Товары);
КонецПроцедуры
Процедура ПКО_Документ_СписаниеТоваровВТребование_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.10") Тогда
		УстановитьПравилоДляПКСТабЧасти(КомпонентыОбмена,
										"Документ_СписаниеТоваров_Отправка", 
										"Товары", 
										"НомерГТД", 
										Истина,
										"Справочник_НомераГТД_Отправка");
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.ДополнительныеСвойства.Товары);
КонецПроцедуры
Процедура ПКО_Документ_СчетФактураВыданный_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьВалюту(ДанныеXDTO);
	
	ДанныеXDTO.Вставить("ВидСчетаФактуры", "НаРеализацию");
	
	КонтрагентСсылка = Неопределено;
	Если ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		НайтиСоздатьКонтрагентаПоОрганизацииРТ(ДанныеИБ.ДокументОснование.ОрганизацияПолучатель, КонтрагентСсылка);
		ДанныеXDTO.Вставить("Контрагент", КонтрагентСсылка);
	ИначеЕсли ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда
		НайтиСоздатьКонтрагентаПоОрганизацииРТ(ДанныеИБ.ДокументОснование.ОрганизацияПолучатель, КонтрагентСсылка);
		ДанныеXDTO.Вставить("Контрагент", КонтрагентСсылка);
	Иначе
		ДанныеXDTO.Вставить("Контрагент", ДанныеИБ.ДокументОснование.Контрагент);
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ДатаИсходногоДокумента",?(ДанныеИБ.Исправление,ДанныеИБ.СчетФактураОснование.Дата, Неопределено));
	
	ДанныеXDTO.Вставить("Выставлен", ЗначениеЗаполнено(ДанныеИБ.ДатаВыставления));
	
	ДанныеXDTO.Вставить("СпособВыставления", ?(ДанныеИБ.ВыставленВЭлектронномВиде,"ВЭлектронномВиде", "НаБумажномНосителе"));
	
	ДокументыОснования = Новый ТаблицаЗначений();
	ДокументыОснования.Колонки.Добавить("ДокументОснование");
	ИмяПКО = "";
	
	СтрокаОснование = ДокументыОснования.Добавить();
	ИмяПКО = ИмяПКОДляДокументаОснованияСФВыданного(ДанныеИБ.ДокументОснование);
	СтрокаОснование.ДокументОснование = Новый Структура("Значение, ИмяПКО",ДанныеИБ.ДокументОснование,ИмяПКО);
	ДанныеXDTO.Вставить("ДокументыОснования", ДокументыОснования);
	
	ПлатРасчДокументы = Новый ТаблицаЗначений;
	ПлатРасчДокументы.Колонки.Добавить("ДатаДокумента");
	ПлатРасчДокументы.Колонки.Добавить("НомерДокумента");
	Если НЕ ДанныеИБ.ПлатежноРасчетныеДокументы.Количество() = 0 Тогда
		Для Каждого СтрокаДокумента Из ДанныеИБ.ПлатежноРасчетныеДокументы Цикл
			СтрокаПлатРасчДокумент = ПлатРасчДокументы.Добавить();
			СтрокаПлатРасчДокумент.ДатаДокумента = СтрокаДокумента.ДатаПлатежноРасчетногоДокумента;
			СтрокаПлатРасчДокумент.НомерДокумента = СтрокаДокумента.НомерПлатежноРасчетногоДокумента;
		КонецЦикла;
	КонецЕсли;
	Если ПлатРасчДокументы.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ПлатежноРасчетныеДокументы", ПлатРасчДокументы);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_СчетФактураПолученный_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.Контрагент)
		И ДанныеИБ.ДокументыОснования.Количество() > 0 Тогда
		
		ДокументОснование = ДанныеИБ.ДокументыОснования[0].ДокументОснование;
		РеквизитыКонтрагент = ОбщегоНазначения.ИменаРеквизитовПоТипу(ДокументОснование, Тип("СправочникСсылка.Контрагенты"));
		Если НЕ ПустаяСтрока(РеквизитыКонтрагент) Тогда
			РеквизитыМассив = СтрРазделить(РеквизитыКонтрагент, ",", Ложь);
	        Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, РеквизитыМассив[0]);
	
			ДанныеXDTO.КлючевыеСвойства.Вставить("Контрагент", Контрагент);
		КонецЕсли;
	КонецЕсли;
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьВалюту(ДанныеXDTO);
	
	ДанныеXDTO.Вставить("ВидСчетаФактуры", "НаПоступление");
	
	Если ДанныеИБ.Корректировочный Тогда
		ДанныеXDTO.Вставить("ВидСчетаФактуры", "Корректировочный");
	КонецЕсли;
	
	ДанныеXDTO.Вставить("СпособВыставления", ?(ДанныеИБ.ПолученВЭлектронномВиде,"ВЭлектронномВиде", "НаБумажномНосителе"));
	
	ДанныеXDTO.Вставить("ДатаИсходногоДокумента",?(ДанныеИБ.Исправление,ДанныеИБ.СчетФактураОснование.Дата, Неопределено));
	
	ДокументыОснования = Новый ТаблицаЗначений();
	ДокументыОснования.Колонки.Добавить("ДокументОснование");
	ИмяПКО = "";
	
	Если НЕ ДанныеИБ.ДокументыОснования.Количество() = 0 Тогда
		Для Каждого СтрокаДокумента Из ДанныеИБ.ДокументыОснования Цикл
			СтрокаОснование = ДокументыОснования.Добавить();
			ИмяПКО = ИмяПКОДляДокументаОснованияСФПолученного(СтрокаДокумента.ДокументОснование);
			СтрокаОснование.ДокументОснование = Новый Структура("Значение, ИмяПКО",СтрокаДокумента.ДокументОснование,ИмяПКО);
		КонецЦикла;
		ДанныеXDTO.Вставить("ДокументыОснования", ДокументыОснования);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		ДанныеXDTO.Вставить("ТипЦен", ДанныеИБ.ТипЦен);
		ДанныеXDTO.Вставить("Товары", ДанныеИБ.Товары);
	КонецЕсли;
	
	Если ДанныеИБ.Свойство("Ссылка") Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ДанныеИБ.Ссылка);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ЧекККМ_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ТипЗнч(ДанныеИБ) = Тип("Структура") 
		И ДанныеИБ.Свойство("Ссылка") Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ДанныеИБ.Ссылка);
	Иначе
		ДанныеXDTO.Вставить("Ссылка", ДанныеИБ.Ссылка);
		ДанныеXDTO.Вставить("Дата", ДанныеИБ.Дата);
		ДанныеXDTO.Вставить("КассаККМ", ДанныеИБ.КассаККМ);
		ДанныеXDTO.Вставить("НомерКассовойСмены", ?(ДанныеИБ.НомерСменыККМ = 0, 1, ДанныеИБ.НомерСменыККМ));
		ДанныеXDTO.Вставить("НомерЧекаФР", ДанныеИБ.НомерЧекаККМ);
	КонецЕсли;
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.10") Тогда
		УстановитьПравилоДляПКСТабЧасти(КомпонентыОбмена,
										"Документ_ЧекККМ_Отправка", 
										"ТоварыПродажа", 
										"НомерГТД", 
										Истина,
										"Справочник_НомераГТД_Отправка");
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Отменен", ДанныеИБ.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Аннулированный);
	ДанныеXDTO.Вставить("ПризнакСпособаРасчета", Документы.ЧекККМ.ПризнакСпособаРасчета(ДанныеИБ.Ссылка));
	ДанныеXDTO.Вставить("Основание", ДанныеИБ.Основание);
	
	ВыгрузитьВалюту(ДанныеXDTO);
	
	// Налогообложение
	Если ДанныеИБ.УчитыватьНДС Тогда
		Налогообложение = "ПродажаОблагаетсяНДС";
	Иначе
		Налогообложение = "ПродажаНеОблагаетсяНДС";
	КонецЕсли;
	ДанныеXDTO.Вставить("Налогообложение",Налогообложение);
	
	Товары = ДанныеИБ.Товары;
	Если ДанныеИБ.ЭтоВозврат Тогда
		ДанныеXDTO.Вставить("ТоварыВозвратПродажи", Товары);
	Иначе
		ДанныеXDTO.Вставить("ТоварыПродажа", Товары);
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Услуги", ДанныеИБ.Услуги);
	ДанныеXDTO.Вставить("ПодарочныеСертификаты", ДанныеИБ.ПодарочныеСертификаты);
	
	//ОплатыККМ
	ЕстьДвижениеНаличных = Ложь;
	ЕстьДвижениеБезналичных = Ложь;
	
	ТекстЗапроса =  
	"ВЫБРАТЬ
	|	ЧекККМОплата.ВидОплаты.ТипОплаты КАК ТипОплаты,
	|	ВЫБОР
	|		КОГДА ЧекККМОплата.ВидОплаты.ТипОплаты = &ТипОплатыНаличные
	|			ТОГДА ЧекККМ.ВыручкаНаличными
	|		ИНАЧЕ ЧекККМОплата.Сумма
	|	КОНЕЦ КАК Сумма
	|ПОМЕСТИТЬ ТаблицаСТипамиОплат
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ КАК ЧекККМ
	|		ПО (ЧекККМОплата.Ссылка = ЧекККМ.Ссылка)
	|ГДЕ
	|	ЧекККМ.Ссылка = &Ссылка
	|;
	|
	|///////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ТаблицаСТипамиОплат.Сумма) КАК Сумма,
	|	ТаблицаСТипамиОплат.ТипОплаты
	|ИЗ
	|	ТаблицаСТипамиОплат КАК ТаблицаСТипамиОплат
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСТипамиОплат.ТипОплаты
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаСТипамиОплат.Сумма) > 0
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	ТипОплатыНаличные = Перечисления.ТипыОплатЧекаККМ.Наличные; // Наличные
	
	// Установка параметров.
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("ТипОплатыНаличные", ТипОплатыНаличные);
	
	РезультатыЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатыЗапроса.Пустой() Тогда
		
		ТаблицаОплат = Новый ТаблицаЗначений;
		ТаблицаОплат.Колонки.Добавить("ТипОплаты", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыОплатыККТ"));
		ТаблицаОплат.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		
		ТаблицаПоТипамОплат = РезультатыЗапроса.Выгрузить();
		
		// Наличные
		СтрокаТаблицы = ТаблицаПоТипамОплат.Найти(Перечисления.ТипыОплатЧекаККМ.Наличные, "ТипОплаты");
		Если НЕ СтрокаТаблицы = Неопределено Тогда
			СтрокаТаблицаОплат = ТаблицаОплат.Добавить();
			СтрокаТаблицаОплат.ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные;
			СтрокаТаблицаОплат.Сумма = СтрокаТаблицы.Сумма;
			ЕстьДвижениеНаличных = Истина;
		КонецЕсли;
		
		СуммаЭлектронно = 0;
		
		// Платежная карта
		СтрокаТаблицы = ТаблицаПоТипамОплат.Найти(Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта, "ТипОплаты");
		Если НЕ СтрокаТаблицы = Неопределено Тогда
			СуммаЭлектронно = СтрокаТаблицы.Сумма;
		КонецЕсли;
		
		Если СуммаЭлектронно > 0 Тогда
			СтрокаТаблицаОплат = ТаблицаОплат.Добавить();
			СтрокаТаблицаОплат.ТипОплаты = Перечисления.ТипыОплатыККТ.Электронно;
			СтрокаТаблицаОплат.Сумма = СуммаЭлектронно;
			ЕстьДвижениеБезналичных = Истина;
		КонецЕсли;
		
		СуммаКредита = 0;
		
		// В рассрочку и кредитом
		СтрокаТаблицы = ТаблицаПоТипамОплат.Найти(Перечисления.ТипыОплатЧекаККМ.ВРассрочку, "ТипОплаты");
		Если НЕ СтрокаТаблицы = Неопределено Тогда
			СуммаКредита = СуммаКредита + СтрокаТаблицы.Сумма;
		КонецЕсли;
		
		// Банковский кредит
		СтрокаТаблицы = ТаблицаПоТипамОплат.Найти(Перечисления.ТипыОплатЧекаККМ.БанковскийКредит, "ТипОплаты");
		Если НЕ СтрокаТаблицы = Неопределено Тогда
			СуммаКредита = СуммаКредита + СтрокаТаблицы.Сумма;
		КонецЕсли;
		
		Если СуммаКредита > 0 Тогда
			СтрокаТаблицаОплат = ТаблицаОплат.Добавить();
			СтрокаТаблицаОплат.ТипОплаты = Перечисления.ТипыОплатыККТ.Постоплата;
			СтрокаТаблицаОплат.Сумма = СуммаКредита;
		КонецЕсли;
		
		ЗачетАванса = 0;
		
		// Подарочный сертификат
		СтрокаТаблицы = ТаблицаПоТипамОплат.Найти(Перечисления.ТипыОплатЧекаККМ.ПодарочныйСертификат, "ТипОплаты");
		Если НЕ СтрокаТаблицы = Неопределено Тогда
			ЗачетАванса = СтрокаТаблицы.Сумма;
		КонецЕсли;
		
		// Зачет аванс
		СтрокаТаблицы = ТаблицаПоТипамОплат.Найти(Перечисления.ТипыОплатЧекаККМ.ЗачетАванса, "ТипОплаты");
		Если НЕ СтрокаТаблицы = Неопределено Тогда
			ЗачетАванса = ЗачетАванса + СтрокаТаблицы.Сумма;
		КонецЕсли;
		
		Если ЗачетАванса > 0 Тогда
			СтрокаТаблицаОплат = ТаблицаОплат.Добавить();
			СтрокаТаблицаОплат.ТипОплаты = Перечисления.ТипыОплатыККТ.Предоплата;
			СтрокаТаблицаОплат.Сумма = ЗачетАванса;
		КонецЕсли;
	
		ДанныеXDTO.Вставить("ОплатыККМ", ТаблицаОплат);
	КонецЕсли;
	
	//ОплатаПлатежнымиКартами
	ТекстЗапроса =  
	"ВЫБРАТЬ
	|	СУММА(ЧекККМОплата.Сумма) КАК СуммаОплаты,
	|	1 КАК НомерКарты,
	|	ЧекККМОплата.ВидОплаты.Представление КАК ВидКарты
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|ГДЕ
	|	ЧекККМОплата.ВидОплаты.ТипОплаты = &ТипОплатыПлатежнаяКарта
	|	И ЧекККМОплата.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекККМОплата.ВидОплаты.Представление
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЧекККМОплата.Сумма) > 0
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	ТипОплатыПлатежнаяКарта = Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта; // Платежная карта
	
	// Установка параметров.
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("ТипОплатыПлатежнаяКарта", ТипОплатыПлатежнаяКарта);
	
	РезультатыЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатыЗапроса.Пустой() Тогда
		ДанныеXDTO.Вставить("ОплатаПлатежнымиКартами", РезультатыЗапроса.Выгрузить());
	КонецЕсли;
	
	//ОплатаСертификатами
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЧекККМПогашениеПС.ПодарочныйСертификат КАК ВидПодарочногоСертификата,
	|	ЧекККМПогашениеПС.СерийныйНомер.Код КАК СерийныйНомер,
	|	СУММА(ВЫБОР
	|			КОГДА ЧекККМПогашениеПС.ПодарочныйСертификат.ПроизвольныйНоминал
	|					ИЛИ ЧекККМПогашениеПС.ПодарочныйСертификат.ЧастичноеПогашение
	|				ТОГДА ЧекККМПогашениеПС.СуммаПогашенияСертификата
	|			ИНАЧЕ ЧекККМПогашениеПС.ПодарочныйСертификат.Номинал
	|		КОНЕЦ) КАК Сумма
	|ИЗ
	|	Документ.ЧекККМ.ПогашениеПодарочныхСертификатов КАК ЧекККМПогашениеПС
	|ГДЕ
	|	ЧекККМПогашениеПС.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекККМПогашениеПС.Ссылка,
	|	ЧекККМПогашениеПС.ПодарочныйСертификат,
	|	ЧекККМПогашениеПС.СерийныйНомер.КодСерийногоНомера,
	|	ЧекККМПогашениеПС.СерийныйНомер.Код
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА ЧекККМПогашениеПС.ПодарочныйСертификат.ПроизвольныйНоминал
	|					ИЛИ ЧекККМПогашениеПС.ПодарочныйСертификат.ЧастичноеПогашение
	|				ТОГДА ЧекККМПогашениеПС.СуммаПогашенияСертификата
	|			ИНАЧЕ ЧекККМПогашениеПС.ПодарочныйСертификат.Номинал
	|		КОНЕЦ) > 0
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	РезультатыЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатыЗапроса.Пустой() Тогда
		ДанныеXDTO.Вставить("ОплатаСертификатами", РезультатыЗапроса.Выгрузить());
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Сумма", ДанныеИБ.СуммаДокумента);
	
	//Описание дополнительной информации
	//ЕстьДвижениеНаличных (булево) – по чеку есть получение или выдача наличных денежных средств
	//ЕстьДвижениеБезналичных (булево) – по чеку есть получение или возврат безналичных денежных средств
	//ЕстьДвижениеТоваров (булево) – по чеку есть выдача или возврат товаров
	//Возврат (булево) – если Истина, то это чек на возврат
	//ВключенВОРП (булево) - если чек включен в ОРП
	
	ОперацияСДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Ссылка, "ОперацияСДенежнымиСредствами");
	
	ЕстьДвижениеТоваров = ДанныеИБ.Товары.Количество() > 0 И НЕ ОперацияСДС;
	ЕстьДвижениеПС = ДанныеИБ.ПодарочныеСертификаты.Количество() > 0 И НЕ ОперацияСДС;
	
	Дополнение = Новый Структура;
	Дополнение.Вставить("ЕстьДвижениеНаличных", ЕстьДвижениеНаличных);
	Дополнение.Вставить("ЕстьДвижениеБезналичных", ЕстьДвижениеБезналичных);
	Дополнение.Вставить("ЕстьДвижениеТоваров", ЕстьДвижениеТоваров ИЛИ ЕстьДвижениеПС);
	Дополнение.Вставить("Возврат", ДанныеИБ.ЭтоВозврат);
	Дополнение.Вставить("ВключенВОРП", Ложь);
	
	ДанныеXDTO.Вставить("AdditionalInfo", Дополнение);
КонецПроцедуры
Процедура ПКО_ПередачаМеждуОрганизациями_ПТУ_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	НомерВхДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеИБ.Номер, Ложь, Истина);
	ДанныеXDTO.Вставить("НомерВходящегоДокумента", НомерВхДокумента);
	
	ДанныеXDTO.Вставить("ВидОперации", "ПокупкаУПоставщика");
	
	КонтрагентСсылка = Неопределено;
	НайтиСоздатьКонтрагентаПоОрганизацииРТ(ДанныеИБ.Организация, КонтрагентСсылка);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Контрагент", КонтрагентСсылка);
	
	СтруктураДанныеДоговора = Новый Структура;
	СтруктураДанныеДоговора.Вставить("Контрагент", КонтрагентСсылка);
	СтруктураДанныеДоговора.Вставить("Организация", ДанныеИБ.Организация);
	СтруктураДанныеДоговора.Вставить("РасчетыВУсловныхЕдиницах", Ложь);
	СтруктураДанныеДоговора.Вставить("ВидДоговора", "СПоставщиком");
	ДанныеXDTO.Вставить("Договор", Новый Структура("Значение, ИмяПКО", СтруктураДанныеДоговора, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры"));
	
	ВыгрузитьВалюту(ДанныеXDTO);
	
	// Налогообложение
	Если ДанныеИБ.УчитыватьНДС Тогда
		Налогообложение = "ОблагаетсяНДС";
	Иначе
		Налогообложение = "НеОблагаетсяНДС";
	КонецЕсли;
	ДанныеXDTO.Вставить("Налогообложение",Налогообложение);
	
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", ДанныеXDTO.Валюта);
	
	КурсКратность(ДанныеXDTO);
	
	// Товары
	ТоварыДокумента = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Упаковка,
	|	Товары.Количество,
	|	Товары.КоличествоУпаковок,
	|	Товары.Цена,
	|	Товары.Сумма,
	|	Товары.СтавкаНДС,
	|	Товары.СуммаНДС,
	|	СправочникНоменклатура.ЕдиницаИзмерения,
	|	СправочникНоменклатура.СтранаПроисхождения,
	|	0 КАК НомерГТД,
	|	""СобственныеТовары"" КАК ТипЗапасов,
	|	Товары.НомерСтроки КАК НомерСтрокиДокумента,
	|	Товары.Характеристика
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями.Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТоварыДокумента;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатыЗапроса = Запрос.Выполнить();
	Если НЕ РезультатыЗапроса.Пустой() Тогда
		Товары = РезультатыЗапроса.Выгрузить();
		ЗаполнитьЕдиницыИзмеренияПоУмолчанию(Товары);
		
		ОбработатьХарактеристикиТоваров(КомпонентыОбмена, Товары);
		ОбработатьУпаковкиТоваров(КомпонентыОбмена, Товары);
		
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_ПередачаМеждуОрганизациями_РТУ_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидОперации", "РеализацияКлиенту");
	
	КонтрагентСсылка = Неопределено;
	НайтиСоздатьКонтрагентаПоОрганизацииРТ(ДанныеИБ.ОрганизацияПолучатель, КонтрагентСсылка);
	ДанныеXDTO.Вставить("Контрагент", КонтрагентСсылка);
	
	СтруктураДанныеДоговора = Новый Структура;
	СтруктураДанныеДоговора.Вставить("Контрагент", КонтрагентСсылка);
	СтруктураДанныеДоговора.Вставить("Организация", ДанныеИБ.Организация);
	СтруктураДанныеДоговора.Вставить("РасчетыВУсловныхЕдиницах", Ложь);
	СтруктураДанныеДоговора.Вставить("ВидДоговора", "СПоставщиком");
	ДанныеXDTO.Вставить("Договор", Новый Структура("Значение, ИмяПКО", СтруктураДанныеДоговора, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры"));
	
	ВыгрузитьВалюту(ДанныеXDTO);
	
	//Налогообложение
	Если ДанныеИБ.УчитыватьНДС Тогда
		Налогообложение = "ПродажаОблагаетсяНДС";
	Иначе
		Налогообложение = "ПродажаНеОблагаетсяНДС";
	КонецЕсли;
	ДанныеXDTO.Вставить("Налогообложение",Налогообложение);
	
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", ДанныеXDTO.Валюта);
	
	КурсКратность(ДанныеXDTO);
	
	// Товары
	ТоварыДокумента = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Упаковка,
	|	Товары.Количество,
	|	Товары.КоличествоУпаковок,
	|	Товары.Цена,
	|	Товары.Сумма,
	|	Товары.СтавкаНДС,
	|	Товары.СуммаНДС,
	|	СправочникНоменклатура.ЕдиницаИзмерения,
	|	СправочникНоменклатура.СтранаПроисхождения,
	|	0 КАК НомерГТД,
	|	""СобственныеТовары"" КАК ТипЗапасов,
	|	Товары.НомерСтроки КАК НомерСтрокиДокумента,
	|	Товары.Характеристика
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями.Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТоварыДокумента;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатыЗапроса = Запрос.Выполнить();
	Если НЕ РезультатыЗапроса.Пустой() Тогда
		Товары = РезультатыЗапроса.Выгрузить();
		
		ОбработатьХарактеристикиТоваров(КомпонентыОбмена, Товары);
		ОбработатьУпаковкиТоваров(КомпонентыОбмена, Товары);
	
		ЗаполнитьЕдиницыИзмеренияПоУмолчанию(Товары);
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_БанковскиеСчета_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	СтруктураДанныеВалюты = Новый Структура;
	СтруктураДанныеВалюты.Вставить("Код", 643);
	СтруктураДанныеВалюты.Вставить("Наименование", "RUB");
	Инструкция = Новый Структура("Значение, ИмяПКО", СтруктураДанныеВалюты, "Справочник_Валюта_ИзСтруктуры");
	ДанныеXDTO.Вставить("ВалютаДенежныхСредств", Инструкция);
	
	Банк = ДанныеИБ.Банк;
	Если ЗначениеЗаполнено(Банк) Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("Банк", Банк);
		ДанныеXDTO.КлючевыеСвойства.Вставить("БанкДляРасчетов", Банк);
	КонецЕсли;
	
	Владелец = ДанныеИБ.Владелец;
	Если ЗначениеЗаполнено(Владелец) Тогда
		Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Организации") Тогда
			Инструкция =  Новый Структура("Значение, ИмяПКО", Владелец, "Справочник_Организации_Отправка");
		ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
			Инструкция =  Новый Структура("Значение, ИмяПКО", Владелец, "Справочник_Контрагенты_Отправка");
		ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Инструкция =  Новый Структура("Значение, ИмяПКО", Владелец, "Справочник_ФизическиеЛица_Отправка");
		КонецЕсли;
		ДанныеXDTO.КлючевыеСвойства.Вставить("Владелец", Инструкция);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_БонусныеПрограммыЛояльности_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	СтруктураДанныеВалюты = Новый Структура;
	СтруктураДанныеВалюты.Вставить("Код", 643);
	СтруктураДанныеВалюты.Вставить("Наименование", "RUB");
	Инструкция = Новый Структура("Значение, ИмяПКО", СтруктураДанныеВалюты, "Справочник_Валюта_ИзСтруктуры");
	ДанныеXDTO.КлючевыеСвойства.Вставить("ВалютаКонвертацииБонусов", Инструкция);
КонецПроцедуры
Процедура ПКО_Справочник_ВидыОплатЧекаККМВЭквТерминалы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ПлатежнаяСистема = Новый Структура;
	ПлатежнаяСистема.Вставить("ВидПлатежнойСистемы", XMLСтрока(ДанныеИБ.ПлатежнаяСистема));
	ДанныеXDTO.Вставить("AdditionalInfo", ПлатежнаяСистема);
КонецПроцедуры
Процедура ПКО_Справочник_ВидыПодарочныхСертификатов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	СтруктураДанныеВалюты = Новый Структура;
	СтруктураДанныеВалюты.Вставить("Код", 643);
	СтруктураДанныеВалюты.Вставить("Наименование", "RUB");
	Инструкция = Новый Структура("Значение, ИмяПКО", СтруктураДанныеВалюты, "Справочник_Валюта_ИзСтруктуры");
	ДанныеXDTO.КлючевыеСвойства.Вставить("Валюта", Инструкция);
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("РазрешитьЧастичнуюОплату", ДанныеИБ.ЧастичноеПогашение);
	
	ТипПериодаДействия = Неопределено;
	КоличествоПериодовДействия = Неопределено;
	Если ДанныеИБ.Периодичность = Перечисления.Периодичность.День Тогда
		ТипПериодаДействия = "День";
		КоличествоПериодовДействия = ДанныеИБ.КоличествоПериодовДействия;
	ИначеЕсли ДанныеИБ.Периодичность = Перечисления.Периодичность.Неделя Тогда
		ТипПериодаДействия = "День";
		КоличествоПериодовДействия = ДанныеИБ.КоличествоПериодовДействия * 7;
	ИначеЕсли ДанныеИБ.Периодичность = Перечисления.Периодичность.Декада Тогда
		ТипПериодаДействия = "День";
		КоличествоПериодовДействия = ДанныеИБ.КоличествоПериодовДействия * 10;
	ИначеЕсли ДанныеИБ.Периодичность = Перечисления.Периодичность.Месяц Тогда
		ТипПериодаДействия = "Месяц";
		КоличествоПериодовДействия = ДанныеИБ.КоличествоПериодовДействия;
	ИначеЕсли ДанныеИБ.Периодичность = Перечисления.Периодичность.Квартал Тогда
		ТипПериодаДействия = "Месяц";
		КоличествоПериодовДействия = ДанныеИБ.КоличествоПериодовДействия * 3;
	ИначеЕсли ДанныеИБ.Периодичность = Перечисления.Периодичность.Полугодие Тогда
		ТипПериодаДействия = "Месяц";
		КоличествоПериодовДействия = ДанныеИБ.КоличествоПериодовДействия * 6;
	ИначеЕсли ДанныеИБ.Периодичность = Перечисления.Периодичность.Год Тогда
		ТипПериодаДействия = "Месяц";
		КоличествоПериодовДействия = ДанныеИБ.КоличествоПериодовДействия * 12;
	КонецЕсли;
	
	Если ДанныеИБ.ТипСрокаДействия = Перечисления.СрокДействияПодарочныхСертификатов.БезОграниченияСрока Тогда
		ТипПериодаДействия = "Месяц";
		КоличествоПериодовДействия = 999;
	Конецесли;
	
	Если ЗначениеЗаполнено(ТипПериодаДействия) И ЗначениеЗаполнено(КоличествоПериодовДействия) Тогда
		ДанныеXDTO.Вставить("ТипПериодаДействия", ТипПериодаДействия);
		ДанныеXDTO.Вставить("КоличествоПериодовДействия", КоличествоПериодовДействия);
	КонецЕсли;
	
	Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена
		И КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменУРМК" Тогда 
	
		РеквизитыУзлаОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			КомпонентыОбмена.УзелКорреспондента, "ТорговыйОбъект");
	
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("УзелКорреспондента", КомпонентыОбмена.УзелКорреспондента);
		СтруктураПараметров.Вставить("Магазин", РеквизитыУзлаОбмена.ТорговыйОбъект);
		СтруктураПараметров.Вставить("ТоварнаяГруппа", ДанныеИБ.ТоварнаяГруппа);
	
		ОрганизацияПродажи = ОрганизацияПродажи(СтруктураПараметров);
	
		Если Не ЗначениеЗаполнено(ОрганизацияПродажи)
			И КомпонентыОбмена.ПараметрыКонвертации.Свойство("Организации")
			И КомпонентыОбмена.ПараметрыКонвертации.Организации.Количество() > 0 Тогда
			ОрганизацияПродажи = КомпонентыОбмена.ПараметрыКонвертации.Организации[0].Значение;
		КонецЕсли;
	
		ПараметрыСНО = Новый Структура("Организация,Магазин,Склад");
		ПараметрыСНО.Вставить("ТоварнаяГруппа", ДанныеИБ.ТоварнаяГруппа);
		
		ПараметрыСНО.Магазин = РеквизитыУзлаОбмена.ТорговыйОбъект;
		ПараметрыСНО.Организация = ОрганизацияПродажи;
		
		Если ПараметрыСНО.Организация <> Неопределено Тогда
			СНОТовара = ПодключаемоеОборудованиеРТ.ПолучитьСистемуНалогообложения(,ПараметрыСНО.Организация,
																				ПараметрыСНО.Магазин,
																				ПараметрыСНО.Склад,
																				ПараметрыСНО.ТоварнаяГруппа);
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДопРеквизитов = Новый Структура;
	СтруктураДопРеквизитов.Вставить("ИспользоватьСерийныеНомера", ДанныеИБ.ИспользоватьСерийныеНомера);
	
	ПризнакПредметаРасчетаСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ВидНоменклатуры, "ПризнакПредметаРасчета");
	Если ЗначениеЗаполнено(ПризнакПредметаРасчетаСсылка) Тогда
		СтруктураДопРеквизитов.Вставить("КодПризнакаПредметаРасчета", ПризнакПредметаРасчетаСсылка.Код);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОрганизацияПродажи) Тогда
		СтруктураДопРеквизитов.Вставить("Организация", Новый Структура("Значение, ИмяПКО", ОрганизацияПродажи, "Справочник_Организации_Отправка"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СНОТовара) Тогда
		СтруктураДопРеквизитов.Вставить("СистемаНалогообложения", Новый Структура("Значение, ИмяПКО", СНОТовара, "СистемыНалогообложения"));
	КонецЕсли;
	
	МассивДопРеквизитов = Новый Массив;
	
	Для каждого ЭлементНстроек Из СтруктураДопРеквизитов Цикл
		МассивДопРеквизитов.Добавить(ЭлементНстроек.Ключ);
	КонецЦикла;
	
	ЗаполнитьДополнительныеРеквизиты(СтруктураДопРеквизитов, ДанныеXDTO, МассивДопРеквизитов);
КонецПроцедуры
Процедура ПКО_Справочник_ВидыЦен_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	СтруктураДанныеВалюты = Новый Структура;
	СтруктураДанныеВалюты.Вставить("Код", 643);
	СтруктураДанныеВалюты.Вставить("Наименование", "RUB");
	Инструкция = Новый Структура("Значение, ИмяПКО", СтруктураДанныеВалюты, "Справочник_Валюта_ИзСтруктуры");
	ДанныеXDTO.КлючевыеСвойства.Вставить("ВалютаЦены", Инструкция);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Наименование",Лев(ДанныеИБ.Наименование,25));
	
	Разделители	=  " .,+,-,/,*,?,=,<,>,(,)%!@#$%&*""№:;{}[]?()\|/`~'^_";
	Идентификатор = "";
	БылСпецСимвол = Ложь;
	Для НомСимвола = 1 По СтрДлина(ДанныеИБ.Наименование) Цикл
		Символ = Сред(ДанныеИБ.Наименование, НомСимвола, 1);
		Если Найти(Разделители, Символ) <> 0 Тогда
			БылСпецСимвол = Истина;
		ИначеЕсли БылСпецСимвол Тогда
			БылСпецСимвол = Ложь;
			Идентификатор = Идентификатор + ВРег(Символ);
		Иначе
			Идентификатор = Идентификатор + Символ;
		КонецЕсли;
	КонецЦикла;
	ДанныеXDTO.Вставить("Идентификатор", Идентификатор);
КонецПроцедуры
Процедура ПКО_Справочник_ДисконтныеКарты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Владелец = ДанныеИБ.ВладелецКарты;
	
	Если ЗначениеЗаполнено(Владелец) Тогда
		Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
			Инструкция =  Новый Структура("Значение, ИмяПКО", Владелец, "Справочник_Контрагенты_Отправка");
		ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Инструкция =  Новый Структура("Значение, ИмяПКО", Владелец, "Справочник_ФизическиеЛица_Отправка");
		КонецЕсли;
		ДанныеXDTO.КлючевыеСвойства.Вставить("ВладелецКарты", Инструкция);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.КодКарты)
		И ДанныеИБ.ДополнительныеСвойства.Свойство("НомерКарты") Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("НомерКарты", ДанныеИБ.ДополнительныеСвойства.НомерКарты);
	КонецЕсли;
	
	Если ДанныеИБ.ДополнительныеСвойства.Свойство("ПрограммаЛояльности") Тогда
		ДанныеXDTO.Вставить("ПрограммаЛояльности", ДанныеИБ.ДополнительныеСвойства.ПрограммаЛояльности);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	СтруктураДанныеВалюты = Новый Структура;
	СтруктураДанныеВалюты.Вставить("Код", 643);
	СтруктураДанныеВалюты.Вставить("Наименование", "RUB");
	Инструкция = Новый Структура("Значение, ИмяПКО", СтруктураДанныеВалюты, "Справочник_Валюта_ИзСтруктуры");
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", Инструкция);
КонецПроцедуры
Процедура ПКО_Справочник_Кассы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	СтруктураДанныеВалюты = Новый Структура;
	СтруктураДанныеВалюты.Вставить("Код", 643);
	СтруктураДанныеВалюты.Вставить("Наименование", "RUB");
	Инструкция = Новый Структура("Значение, ИмяПКО", СтруктураДанныеВалюты, "Справочник_Валюта_ИзСтруктуры");
	ДанныеXDTO.КлючевыеСвойства.Вставить("Валюта", Инструкция);
КонецПроцедуры
Процедура ПКО_Справочник_КассыККМ_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	СНОКассаККМ = ПодключаемоеОборудованиеРТ.ПолучитьСистемуНалогообложения(,ДанныеИБ.Владелец, ДанныеИБ.Магазин);
	
	ИнструкцияСНО = Новый Структура;
	ИнструкцияСНО.Вставить("ИмяПКО",   "СистемыНалогообложения");
	ИнструкцияСНО.Вставить("Значение", СНОКассаККМ);
	ДанныеXDTO.Вставить("СистемаНалогообложения", ИнструкцияСНО);
КонецПроцедуры
Процедура ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.10") Тогда
		ДанныеXDTO.Вставить("ФизическоеЛицо", ДанныеИБ.ФизЛицо);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.НаименованиеПолное) Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("НаименованиеПолное", ДанныеИБ.Наименование);
	КонецЕсли;
	
	ПодготовитьДанныеКонтактнаяИнформация(ДанныеИБ, ДанныеXDTO);
	
	СтруктураДопРеквизитов = Новый Структура;
	СтруктураДопРеквизитов.Вставить("ФизЛицо", Новый Структура("Значение, ИмяПКО", ДанныеИБ.ФизЛицо, "Справочник_ФизическиеЛица_Отправка"));
	
	МассивДопРеквизитов = Новый Массив;
	
	Для каждого ЭлементНстроек Из СтруктураДопРеквизитов Цикл
		МассивДопРеквизитов.Добавить(ЭлементНстроек.Ключ);
	КонецЦикла;
	
	ЗаполнитьДополнительныеРеквизиты(СтруктураДопРеквизитов, ДанныеXDTO, МассивДопРеквизитов);
КонецПроцедуры
Процедура ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена
		И КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменУРМК" Тогда 
	
		РеквизитыУзлаОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			КомпонентыОбмена.УзелКорреспондента, "ТорговыйОбъект");
	
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("УзелКорреспондента", КомпонентыОбмена.УзелКорреспондента);
		СтруктураПараметров.Вставить("Магазин", РеквизитыУзлаОбмена.ТорговыйОбъект);
		СтруктураПараметров.Вставить("ТоварнаяГруппа", ДанныеИБ.ТоварнаяГруппа);
	
		ОрганизацияПродажи = ОрганизацияПродажи(СтруктураПараметров);
		
		Если Не ЗначениеЗаполнено(ОрганизацияПродажи)
			И КомпонентыОбмена.ПараметрыКонвертации.Свойство("Организации")
			И КомпонентыОбмена.ПараметрыКонвертации.Организации.Количество() > 0 Тогда
			ОрганизацияПродажи = КомпонентыОбмена.ПараметрыКонвертации.Организации[0].Значение;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОрганизацияПродажи) Тогда
			ДанныеXDTO.Вставить("ОрганизацияПродажи", ОрганизацияПродажи);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыСНО = Новый Структура("Организация,Магазин,Склад");
	ПараметрыСНО.Вставить("ТоварнаяГруппа", ДанныеИБ.ТоварнаяГруппа);
		
	// Инициализируется в ОфлайнОборудование1СККМEDВызовСервера.
	Если КомпонентыОбмена.ПараметрыКонвертации.Свойство("ЭкземплярОборудования") Тогда
		ЭкземплярОборудования = КомпонентыОбмена.ПараметрыКонвертации.ЭкземплярОборудования;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПравилоОбмена.Склад КАК Склад,
		|	ПравилоОбмена.Склад.Организация КАК Организация,
		|	ПравилоОбмена.Склад.Магазин КАК Магазин
		|ИЗ
		|	Справочник.ПравилаОбменаСПодключаемымОборудованием КАК ПравилоОбмена
		|ГДЕ
		|	ПравилоОбмена.Ссылка = &ПравилоОбмена";
		
		Запрос.УстановитьПараметр("ПравилоОбмена",
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭкземплярОборудования, "ПравилоОбмена"));
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыСНО,Выборка); 
		КонецЕсли;
		
	ИначеЕсли КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменУРМК" Тогда
	
		ПараметрыСНО.Магазин = РеквизитыУзлаОбмена.ТорговыйОбъект;
		ПараметрыСНО.Организация = ОрганизацияПродажи;
		 
	КонецЕсли;
	
	Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена
		И КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменМК" Тогда
		
		Если НЕ КомпонентыОбмена.УзелКорреспондента.Магазины.Количество() = 0 Тогда
			
			МагазинМК = КомпонентыОбмена.УзелКорреспондента.Магазины[0].Магазин;
			
			ПараметрыСНО.Магазин = МагазинМК;
			ПараметрыСНО.Склад = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МагазинМК, "СкладПродажи");
			ПараметрыСНО.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыСНО.Склад, "Организация");
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыСНО.Организация <> Неопределено Тогда
		СНОТовара = ПодключаемоеОборудованиеРТ.ПолучитьСистемуНалогообложения(,ПараметрыСНО.Организация,
																			ПараметрыСНО.Магазин,
																			ПараметрыСНО.Склад,
																			ПараметрыСНО.ТоварнаяГруппа);
		ИнструкцияСНО = Новый Структура;
		ИнструкцияСНО.Вставить("ИмяПКО",   "СистемыНалогообложения");
		ИнструкцияСНО.Вставить("Значение", СНОТовара);
		ДанныеXDTO.Вставить("СистемаНалогообложения", ИнструкцияСНО);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.НаименованиеПолное) Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("НаименованиеПолное", ДанныеИБ.Наименование);
	КонецЕсли;
	
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.ВидыНоменклатуры") Тогда
		ДанныеXDTO.Вставить("ВидНоменклатуры", ДанныеИБ.ВидНоменклатуры);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеИБ.ЕдиницаИзмерения) Тогда
		ЕдиницаИзмеренияПоУмолчанию = Справочники.БазовыеЕдиницыИзмерения.ПолучитьЕдиницуИзмеренияПоУмолчанию();
			
		Если ЕдиницаИзмеренияПоУмолчанию <> Неопределено Тогда
			ДанныеXDTO.Вставить("ЕдиницаИзмерения", Справочники.БазовыеЕдиницыИзмерения.ПолучитьЕдиницуИзмеренияПоУмолчанию());
		Иначе
			ЕдиницаИзмерения796 = Справочники.БазовыеЕдиницыИзмерения.НайтиПоКоду("796");
			ЕдиницаИзмерения = Новый Структура;
			ЕдиницаИзмерения.Вставить("Ссылка",ЕдиницаИзмерения796.Ссылка);
			ЕдиницаИзмерения.Вставить("Код",ЕдиницаИзмерения796.Код);
			ЕдиницаИзмерения.Вставить("НаименованиеПолное",ЕдиницаИзмерения796.НаименованиеПолное);
			ЕдиницаИзмерения.Вставить("Наименование",ЕдиницаИзмерения796.Наименование);
			ДанныеXDTO.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеИБ.ВидАлкогольнойПродукцииЕГАИС) Тогда
		СтруктураВидАП = Новый Структура("Код, Наименование, ВидЛицензии, Маркируемый");
		ЗаполнитьЗначенияСвойств(СтруктураВидАП, ДанныеИБ.ВидАлкогольнойПродукцииЕГАИС);
		Если НЕ ЗначениеЗаполнено(СтруктураВидАП.Код) Тогда
			СтруктураВидАП.Код = "0";
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеИБ.ВидАлкогольнойПродукцииЕГАИС.ВидЛицензии) Тогда
			ВидЛицензии = "";
			Если ДанныеИБ.ВидАлкогольнойПродукцииЕГАИС.ВидЛицензии = Перечисления.ВидыЛицензийАлкогольнойПродукции.Пиво Тогда
				ВидЛицензии = "Пиво";
			ИначеЕсли ДанныеИБ.ВидАлкогольнойПродукцииЕГАИС.ВидЛицензии = Перечисления.ВидыЛицензийАлкогольнойПродукции.АлкогольнаяПродукция Тогда
				ВидЛицензии = "АлкогольнаяПродукция";
			ИначеЕсли ДанныеИБ.ВидАлкогольнойПродукцииЕГАИС.ВидЛицензии = Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяПищеваяПродукция Тогда
				ВидЛицензии = "СпиртосодержащаяПищеваяПродукция";
			ИначеЕсли ДанныеИБ.ВидАлкогольнойПродукцииЕГАИС.ВидЛицензии = Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяНеПищеваяПродукция Тогда
				ВидЛицензии = "СпиртосодержащаяНеПищеваяПродукция";
			КонецЕсли;
			СтруктураВидАП.Вставить("ВидЛицензии", ВидЛицензии);
		КонецЕсли;
		ДанныеXDTO.Вставить("ВидАлкогольнойПродукции", СтруктураВидАП);
	Иначе
		ДанныеXDTO.Вставить("ВидАлкогольнойПродукции", Неопределено);
	КонецЕсли;
	
	СтруктураДопРеквизитов = Новый Структура;
	
	Маркируемый = Ложь;
	
	ВидПродукцииИС = ИнтеграцияИСРТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ДанныеИБ.ОсобенностьУчета);
	ВидыПродукцииИСМП = ИнтеграцияИСКлиентСервер.ВидыПродукцииИСМП(Истина);
	Если (ЗначениеЗаполнено(ВидПродукцииИС)
			И НЕ ВидыПродукцииИСМП.Найти(ВидПродукцииИС) = Неопределено)
		ИЛИ (ЗначениеЗаполнено(ДанныеИБ.ВидАлкогольнойПродукцииЕГАИС) 
			И ДанныеИБ.ВидАлкогольнойПродукцииЕГАИС.Маркируемый) Тогда
		Маркируемый = Истина;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Маркируемый", Маркируемый);
	ДанныеXDTO.Вставить("ИспользоватьСерии", ДанныеИБ.ВидНоменклатуры.ИспользоватьСерии);
	
	ПризнакПредметаРасчетаСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ВидНоменклатуры, "ПризнакПредметаРасчета");
	Если ЗначениеЗаполнено(ПризнакПредметаРасчетаСсылка) Тогда
		СтруктураДопРеквизитов.Вставить("КодПризнакаПредметаРасчета", ПризнакПредметаРасчетаСсылка.Код);
		
		ПодакцизныйТовар = ПризнакПредметаРасчетаСсылка = ПредопределенноеЗначение("Справочник.ПризнакиПредметовРасчета.ПодакцизныйТовар");
		ДанныеXDTO.Вставить("ПодакцизныйТовар", ПодакцизныйТовар);
		
		ПризнакПредметаРасчетаОтправка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПризнакПредметаРасчетаСсылка, "ТипПризнакаПредметаРасчета");
		Если ЗначениеЗаполнено(ПризнакПредметаРасчетаОтправка) Тогда
			ДанныеXDTO.Вставить("ПризнакПредметаРасчета", ПризнакПредметаРасчетаОтправка);
		КонецЕсли;
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.8") Тогда
		ДанныеXDTO.Вставить("ВидПродукцииИС", ДанныеИБ.ОсобенностьУчета);
	КонецЕсли;
	
	//Код ТНВЭД
	Если ЗначениеЗаполнено(ДанныеИБ.КодТНВЭД)
	И ОбщегоНазначения.СсылкаСуществует(ДанныеИБ.КодТНВЭД) Тогда
		
		Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.10") Тогда
	        ЗначениеКодаТНВЭД = Новый Структура("Значение, ИмяПКО", ДанныеИБ.КодТНВЭД, "Справочник_КлассификаторТНВЭД_ЭлементСправочника");
		Иначе
			ЗначениеКодаТНВЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.КодТНВЭД, "Код, Наименование");
		КонецЕсли;
	
		ДанныеXDTO.Вставить("КодТНВЭД", ЗначениеКодаТНВЭД);
		
	КонецЕсли;
	
	Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена
		И КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК" Тогда 
		ВыгружатьКартинки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КомпонентыОбмена.УзелКорреспондента, "ВыгружатьИзображенияНоменклатуры");
		Если ВыгружатьКартинки Тогда
	        ОсновнаяКартинка = Новый Структура("Значение, ИмяПКО", ДанныеИБ.ФайлКартинки, "Справочник_НоменклатураКартинки_Отправка");
			ДанныеXDTO.Вставить("ОсновнаяКартинка", ОсновнаяКартинка);
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДопРеквизитов.Вставить("Вес", ДанныеИБ.Вес);
	СтруктураДопРеквизитов.Вставить("ИспользоватьСерии", ДанныеИБ.ВидНоменклатуры.ИспользоватьСерии);
	СтруктураДопРеквизитов.Вставить("Маркируемый", Маркируемый);
	СтруктураДопРеквизитов.Вставить("КодТРУ", ДанныеИБ.КодТРУ);
	
	Если ЗначениеЗаполнено(ОрганизацияПродажи) Тогда
		СтруктураДопРеквизитов.Вставить("Организация", Новый Структура("Значение, ИмяПКО", ОрганизацияПродажи, "Справочник_Организации_Отправка"));
	КонецЕсли;
	
	ОписаниеНоменклатурыИС(СтруктураДопРеквизитов, ДанныеИБ);
	
	МассивДопРеквизитов = Новый Массив;
	
	Для каждого ЭлементНстроек Из СтруктураДопРеквизитов Цикл
		МассивДопРеквизитов.Добавить(ЭлементНстроек.Ключ);
	КонецЦикла;
	
	ЗаполнитьДополнительныеРеквизиты(СтруктураДопРеквизитов, ДанныеXDTO, МассивДопРеквизитов);
КонецПроцедуры
Процедура ПКО_Справочник_НоменклатураКартинки_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Владелец = ДанныеИБ.ВладелецФайла;
	Если ЗначениеЗаполнено(Владелец) И ТипЗнч(Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("ВладелецФайла", Новый Структура("Значение, ИмяПКО", Владелец, "Справочник_Номенклатура_Отправка"));
	
		ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(ДанныеИБ.Ссылка);
		ДанныеXDTO.Вставить("ХранимыйФайл", ДвоичныеДанные);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.НаименованиеПолное) Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("НаименованиеПолное", ДанныеИБ.Наименование);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.НаименованиеСокращенное) Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("НаименованиеСокращенное", ДанныеИБ.Наименование);
	КонецЕсли;
	
	ПодготовитьДанныеКонтактнаяИнформация(ДанныеИБ, ДанныеXDTO);
	
	//Вариант настроек "ОбменКладовщик"
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ИспользоватьУпаковки", Константы.ИспользоватьУпаковкиНоменклатуры.Получить());
	СтруктураНастроек.Вставить("ИспользоватьСерии", Константы.ИспользоватьСерииНоменклатуры.Получить());
	СтруктураНастроек.Вставить("ИспользоватьВес", Истина);
	СтруктураНастроек.Вставить("РедактироватьЦеныТоваров", Истина);
	СтруктураНастроек.Вставить("УчетнаяЦена", "");
	СтруктураНастроек.Вставить("ЦенаЗакупки", "");
	СтруктураНастроек.Вставить("ПрефиксИБ", "");
	
	МассивДопРеквизитов = Новый Массив;
	
	Для каждого ЭлементНстроек Из СтруктураНастроек Цикл
		МассивДопРеквизитов.Добавить(ЭлементНстроек.Ключ);
	КонецЦикла;
	
	ЗаполнитьДополнительныеРеквизиты(СтруктураНастроек, ДанныеXDTO, МассивДопРеквизитов);
КонецПроцедуры
Процедура ПКО_Справочник_ПозицияПрайсЛиста_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		Если ДанныеИБ.Свойство("SKU") Тогда
			ДанныеXDTO.Вставить("SKU", ДанныеИБ.SKU);
		КонецЕсли;
		Если ДанныеИБ.Свойство("Упаковка")
			И ТипЗнч(ДанныеИБ.Упаковка) <> Тип("Структура") Тогда
			ИнструкцияУпаковка = Новый Структура;
			ИнструкцияУпаковка.Вставить("ИмяПКО",   "Справочник_Упаковки");
			ИнструкцияУпаковка.Вставить("Значение", ДанныеИБ.Упаковка);
			ДанныеXDTO.Вставить("Упаковка", ИнструкцияУпаковка);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ПравилаЦенообразованияВТипыЦен_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	СтруктураДанныеВалюты = Новый Структура;
	СтруктураДанныеВалюты.Вставить("Код", 643);
	СтруктураДанныеВалюты.Вставить("Наименование", "RUB");
	Инструкция = Новый Структура("Значение, ИмяПКО", СтруктураДанныеВалюты, "Справочник_Валюта_ИзСтруктуры");
	ДанныеXDTO.КлючевыеСвойства.Вставить("ВалютаЦены", Инструкция);
	ДанныеXDTO.Вставить("ОкруглятьВБольшуюСторону",Ложь);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Наименование",Лев(ДанныеИБ.Наименование,25));
	
	Разделители	=  " .,+,-,/,*,?,=,<,>,(,)%!@#$%&*""№:;{}[]?()\|/`~'^_";
	Идентификатор = "";
	БылСпецСимвол = Ложь;
	Для НомСимвола = 1 По СтрДлина(ДанныеИБ.Наименование) Цикл
		Символ = Сред(ДанныеИБ.Наименование, НомСимвола, 1);
		Если Найти(Разделители, Символ) <> 0 Тогда
			БылСпецСимвол = Истина;
		ИначеЕсли БылСпецСимвол Тогда
			БылСпецСимвол = Ложь;
			Идентификатор = Идентификатор + ВРег(Символ);
		Иначе
			Идентификатор = Идентификатор + Символ;
		КонецЕсли;
	КонецЦикла;
	ДанныеXDTO.Вставить("Идентификатор", Идентификатор);
КонецПроцедуры
Процедура ПКО_Справочник_СерийныеНомераПС_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеИБ.ДополнительныеСвойства.Свойство("СерийныйНомер") Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("СерийныйНомер", ДанныеИБ.ДополнительныеСвойства.СерийныйНомер);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ДанныеИБ.СкладУправляющейСистемы Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("ТипСклада", "Оптовый");
	Иначе
		ДанныеXDTO.КлючевыеСвойства.Вставить("ТипСклада", "Розничный");
	КонецЕсли;
	
	АдресСтрокой = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ДанныеИБ.Ссылка,
		Справочники.ВидыКонтактнойИнформации.ФактАдресМагазина,, Истина);
	Если ЗначениеЗаполнено(АдресСтрокой) Тогда
		ДанныеXDTO.Вставить("АдресСтрокой", АдресСтрокой);
	КонецЕсли;
	
	ПодготовитьДанныеКонтактнаяИнформация(ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_Справочник_СостояниеОплатыЗаказа_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Заказ = ДанныеИБ.Отбор.ЗаказПокупателя.Значение;
	ДанныеXDTO.КлючевыеСвойства.Вставить("Заказ", Заказ);
	
	ТаблицаЗаписи = ДанныеИБ.Выгрузить();
	
	ДанныеXDTO.Вставить("ДатаСостояния", ТаблицаЗаписи[0].Период);
	
	СостояниеОплаты = ДанныеИБ.ДополнительныеСвойства.Состояние;
	
	ДанныеXDTO.Вставить("СостояниеОплаты", СостояниеОплаты);
КонецПроцедуры
Процедура ПКО_Справочник_СостояниеОтгрузкиЗаказа_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Заказ = ДанныеИБ.Отбор.ЗаказПокупателя.Значение;
	ДанныеXDTO.КлючевыеСвойства.Вставить("Заказ", Заказ);
	
	ТаблицаЗаписи = ДанныеИБ.Выгрузить();
	
	ДанныеXDTO.Вставить("ДатаСостояния", ТаблицаЗаписи[0].Период);
	
	СостояниеОтгрузки = ДанныеИБ.ДополнительныеСвойства.Состояние;
	
	ДанныеXDTO.Вставить("СостояниеОтгрузки", СостояниеОтгрузки);
КонецПроцедуры
Процедура ПКО_Справочник_СостоянияЭД_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("ОснованиеЭлектронногоДокумента",
		ДанныеИБ.ДополнительныеСвойства.ОснованиеЭлектронногоДокумента);
		
	ТаблицаЗаписи = ДанныеИБ.Выгрузить();
	ДанныеXDTO.Вставить("СостояниеЭлектронногоДокумента",
		ДанныеИБ.ДополнительныеСвойства.СостояниеЭлектронногоДокумента);
		
	ДанныеXDTO.Вставить("СостояниеОбменаЭДНаНашейСтороне", "ВсеВыполнено");
	ДанныеXDTO.Вставить("СостояниеОбменаЭДНаСторонеКонтрагента", "ВсеВыполнено");
КонецПроцедуры
Процедура ПКО_Справочник_ТипыЦен_ИзСтруктуры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	СтруктураДанныеВалюты = Новый Структура;
	СтруктураДанныеВалюты.Вставить("Код", 643);
	СтруктураДанныеВалюты.Вставить("Наименование", "RUB");
	Инструкция = Новый Структура("Значение, ИмяПКО", СтруктураДанныеВалюты, "Справочник_Валюта_ИзСтруктуры");
	ДанныеXDTO.КлючевыеСвойства.Вставить("ВалютаЦены", Инструкция);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Наименование",Лев(ДанныеИБ.Наименование,25));
КонецПроцедуры
Процедура ПКО_Справочник_Упаковки_ИзСтруктуры_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Высота",1);
	ДанныеXDTO.Вставить("Глубина",1);
	ДанныеXDTO.Вставить("Ширина",1);
	
	Если Не ЗначениеЗаполнено(ДанныеИБ.Объем) Тогда
		ДанныеXDTO.Вставить("Объем",1);
	КонецЕсли;
	
	Владелец = ДанныеИБ.Владелец;
	Если ЗначениеЗаполнено(Владелец) И ТипЗнч(Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
		Если СтекВыгрузки.Количество() > 1 Тогда
			ДанныеXDTO.Вставить("Номенклатура", Новый Структура("Значение, ИмяПКО", Владелец, "Справочник_Номенклатура_Отправка"));
			Возврат;
		КонецЕсли;
		
		ДанныеXDTO.КлючевыеСвойства.Вставить("Номенклатура", Новый Структура("Значение, ИмяПКО", Владелец, "Справочник_Номенклатура_Отправка"));
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьДанныеКонтактнаяИнформация(ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_Справочник_ХарактеристикиНоменклатуры_ИзСтруктуры_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ЗначениеЗаполнено(ДанныеИБ.Наименование) Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("НаименованиеПолное", ДанныеИБ.Наименование);
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6")
		И ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("Номенклатура", ДанныеИБ.Владелец);
	ИначеЕсли ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.7")
		И ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.ВидыНоменклатуры") Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("ВидНоменклатуры", ДанныеИБ.Владелец);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		ДанныеXDTO.Вставить("Штрихкод", ДанныеИБ.Штрихкод);
		ДанныеXDTO.Вставить("Записи", ДанныеИБ.Записи);
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Штрихкод", ДанныеИБ.Отбор.Штрихкод.Значение);
	
	ТаблицаЗаписи = ДанныеИБ.Выгрузить();
	ТаблицаЗаписи.Колонки.Владелец.Имя = "Номенклатура";
	
	Если ДанныеИБ.ДополнительныеСвойства.Свойство("ПараметрыСерийногоНомера") Тогда
		
		ПараметрыСерийногоНомера = ДанныеИБ.ДополнительныеСвойства.ПараметрыСерийногоНомера;
		
		ТаблицаЗаписи.ЗаполнитьЗначения(ПараметрыСерийногоНомера.Номенклатура, "Номенклатура");
	
		Если ЗначениеЗаполнено(ПараметрыСерийногоНомера.Серия) Тогда
			ТаблицаЗаписи.Колонки.Добавить("Серия");
			
			СтруктураСерия = Новый Структура("Ссылка, Наименование, Владелец");
			ЗаполнитьЗначенияСвойств(СтруктураСерия, ПараметрыСерийногоНомера.Серия);
			СтруктураСерия.Вставить("КодСерийногоНомера", ДанныеИБ.Отбор.Штрихкод.Значение);
			
			Инструкция = Новый Структура;
			Инструкция.Вставить("Значение", СтруктураСерия);
			Инструкция.Вставить("ИмяПКО", "Справочник_СерийныеНомераПС_Отправка");
			
			ТаблицаЗаписи.ЗаполнитьЗначения(Инструкция, "Серия");
		КонецЕсли;
	
	КонецЕсли;	
	
	ОбработатьХарактеристикиТоваров(КомпонентыОбмена,ТаблицаЗаписи);
	ОбработатьУпаковкиТоваров(КомпонентыОбмена,ТаблицаЗаписи);
	
	ДанныеXDTO.Вставить("Записи", ТаблицаЗаписи);
КонецПроцедуры
Процедура ПКО_Справочник_ШтрихкодыУпаковокТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ЗначениеЗаполнено(ДанныеИБ.Упаковка)
		И ТипЗнч(ДанныеИБ.Упаковка) = Тип("СправочникСсылка.УпаковкиНоменклатуры") Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("Упаковка", Новый Структура("Значение, ИмяПКО", ДанныеИБ.Упаковка, "Справочник_Упаковки"));
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ЭквайринговыеТерминалы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	БанковскийСчет = Справочники.БанковскиеСчета.ПолучитьБанковскийСчетПоУмолчанию(ДанныеИБ.Организация, Истина);
	
	Если НЕ ЗначениеЗаполнено(БанковскийСчет) Тогда
		БанковскийСчет = Новый Структура("Банк");
		БанковскийСчет.Вставить("Ссылка", ДанныеИБ.Ссылка);
		БанковскийСчет.Вставить("Владелец", ДанныеИБ.Организация);
		БанковскийСчет.Вставить("НомерСчета", "1");
	КонецЕсли;
	
	Инструкция = Новый Структура;
	Инструкция.Вставить("Значение", БанковскийСчет);
	Инструкция.Вставить("ИмяПКО", "Справочник_БанковскиеСчета_Отправка");
	
	ДанныеXDTO.Вставить("БанковскийСчетОрганизации", Инструкция);
КонецПроцедуры

#КонецОбласти
#Область Получение
Процедура ПОД_Документ_ЗаявкаНаРасходДСРасчетыСКонт_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ЗаявкаНаРасходДСРасчетыСКонт_Получение = ДанныеXDTO.Свойство("ВидРасчетов") И ЗначениеЗаполнено(ДанныеXDTO.ВидРасчетов) И ДанныеXDTO.ВидРасчетов.Значение = "СПоставщиком";
КонецПроцедуры
Процедура ПОД_Документ_РеализацияТоваровУслуг_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_РеализацияТоваровУслуг_Получение = ДанныеXDTO.Свойство("ВидОперации") И ЗначениеЗаполнено(ДанныеXDTO.ВидОперации) И ДанныеXDTO.ВидОперации.Значение = "РеализацияКлиенту";
КонецПроцедуры
Процедура ПОД_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_СБДСРасчетыСКонтрагентами_Получение = ДанныеXDTO.Свойство("ВидРасчетов") И ЗначениеЗаполнено(ДанныеXDTO.ВидРасчетов) И ДанныеXDTO.ВидРасчетов.Значение = "СПоставщиком";
КонецПроцедуры
Процедура ПОД_Документ_ЧекККМ_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("Корректировочный")
		И ДанныеXDTO.Корректировочный Тогда
		ИспользованиеПКО.Очистить();
	КонецЕсли;
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК" Тогда
		ИспользованиеПКО.Документ_ЧекККМ_Получение = Ложь;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_ДополнительныеРеквизиты_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		ИспользованиеПКО.Справочник_ДополнительныеРеквизиты = Ложь;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_ЗначенияДопРеквизитов_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		ИспользованиеПКО.Справочник_ЗначенияДополнительныхРеквизитов = Ложь;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_ДоговорыКонтрагентов_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_ДоговорыКонтрагентов_Получение = Ложь;
	ТипДоговора = Неопределено;
	ВидДоговора = Неопределено;
	
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("ВидДоговора") Тогда
		
		ВидДоговора = ДанныеXDTO.КлючевыеСвойства.ВидДоговора;
		
		Если  ТипЗнч(ВидДоговора) = Тип("Структура")
			И ВидДоговора.Свойство("Значение") Тогда
		    
		    ТипДоговора = ВидДоговора.Значение;
		    
		КонецЕсли;
		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ТипДоговора) И ТипДоговора = "СКомитентом" Тогда
		ИспользованиеПКО.Справочник_ДоговорыКонтрагентов_Получение = Истина;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_СостоянияЭД_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ТипЗначенияСвойства = ДанныеXDTO.КлючевыеСвойства.ОснованиеЭлектронногоДокумента.Ссылка.ТипЗначенияXDTO;
	
	СтрокиПКО = КомпонентыОбмена.ПравилаКонвертацииОбъектов.НайтиСтроки(Новый Структура("ТипСсылкиXDTO", ТипЗначенияСвойства));
	
	Если СтрокиПКО.Количество() = 0
		ИЛИ Не Метаданные.ОпределяемыеТипы.ОснованияЭлектронныхДокументовЭДО.Тип.СодержитТип(Тип(СтрокиПКО[0].ТипПолученныхДанныхСтрокой)) Тогда
		ОчиститьИспользованиеПКО(ИспользованиеПКО);
		Возврат;
	КонецЕсли;
	
	СтрокаПКПД = КомпонентыОбмена.ПравилаКонвертацииПредопределенныхДанных.Найти("ТипыСостоянийЭлектронногоДокумента", "ИмяПКПД");
	СоответствиеПКПД = СтрокаПКПД.КонвертацииЗначенийПриПолучении;
	
	СостояниеЭДО = СоответствиеПКПД[ДанныеXDTO.СостояниеЭлектронногоДокумента.Значение];
	
	Если СостояниеЭДО = Неопределено Тогда
		ОчиститьИспользованиеПКО(ИспользованиеПКО);
		Возврат;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_Файлы_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
	
	ВладелецФайла = Неопределено;
	Если Не ДанныеXDTO.КлючевыеСвойства.Свойство("ВладелецФайла", ВладелецФайла) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВладелецФайла) Тогда
		Если Найти(ВладелецФайла.ТипЗначения, "Номенклатура") > 0 Тогда
			СпособХраненияФайлов = Константы.СпособХраненияФайлов.Получить();
			ИспользованиеПКО.Справочник_НоменклатураПрисоединенныеФайлы_Получ = (СпособХраненияФайлов = "ВИнформационнойБазе"
				ИЛИ СпособХраненияФайлов = "ВИнформационнойБазеИТомахНаДиске");	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ВводОстатковПрослеживаемыхТоваров_Получ_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	
	РеквизитыМагазина = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.Магазины.МагазинПоУмолчанию(), "СкладПоступления");
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");
	ПравилаЗаполнения.Вставить("Количество", "Количество");
	ПравилаЗаполнения.Вставить("КоличествоРНПТ", "КоличествоПоРНПТ");
	ПравилаЗаполнения.Вставить("НомерГТД", "НомерГТД");
	
	// Товары 
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("Склад", РеквизитыМагазина.СкладПоступления);
			
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ВводОстатковПрослеживаемыхТоваров_Получ_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Ответственный) Тогда
		ПолученныеДанные.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ВнесениеДСВКассуККМ_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	РеквизитыКассыККМ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПолученныеДанные.КассаККМ, "Владелец");
	ПолученныеДанные.Организация = РеквизитыКассыККМ.Владелец;
КонецПроцедуры
Процедура ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	
	Если ДанныеXDTO.Свойство("Налогообложение") 
		И ЗначениеЗаполнено(ДанныеXDTO.Налогообложение) Тогда
		ПолученныеДанные.УчитыватьНДС = ?(ДанныеXDTO.Налогообложение.Значение = "ОблагаетсяНДС", Истина, Ложь);
	Иначе
		ПолученныеДанные.УчитыватьНДС = Истина;
	КонецЕсли;
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Характеристика",    "Характеристика");
	ПравилаЗаполнения.Вставить("Упаковка",          "Упаковка");
	ПравилаЗаполнения.Вставить("КоличествоУпаковок","КоличествоУпаковок");
	ПравилаЗаполнения.Вставить("Серия",             "Серия");
	ПравилаЗаполнения.Вставить("Количество", "Количество");
	ПравилаЗаполнения.Вставить("Сумма", "Сумма");
	ПравилаЗаполнения.Вставить("Цена", "Цена");
	ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
	ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
	
	//Товары 
	МассивСтрокТовары = Новый Массив;
	
	//Серии загружаются в ТЧ Серии
	МассивСтрокСерии = Новый Массив;
	
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СуммаСНДС = Строка.Сумма;
			Если СтруктураДанныхСтроки.Свойство("СуммаНДС") И НЕ ПолученныеДанные.ЦенаВключаетНДС Тогда
				СуммаСНДС = СуммаСНДС + СтруктураДанныхСтроки.СуммаНДС
			КонецЕсли;
			
			СтруктураДанныхСтроки.Вставить("СуммаСНДС", СуммаСНДС);
			
			Если СтруктураДанныхСтроки.Свойство("КоличествоУпаковок") Тогда
			    Если СтруктураДанныхСтроки.Свойство("Упаковка") И СтруктураДанныхСтроки.Свойство("Сумма") Тогда
					СтруктураДанныхСтроки.Вставить("Цена", СтруктураДанныхСтроки.Сумма / СтруктураДанныхСтроки.КоличествоУпаковок);
				КонецЕсли;
			Иначе
				СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
			КонецЕсли;
	
			Если ЗначениеЗаполнено(Строка.Серия) Тогда
				СтруктураДанныхСтроки.Вставить("СтатусУказанияСерий", 2);
				МассивСтрокСерии.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
	
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокСерии.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Серии", МассивСтрокСерии);
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
	
	// Штрихкоды упаковок.
	ЗагрузитьШтрихкодыУпаковок(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена);
КонецПроцедуры
Процедура ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.АналитикаХозяйственнойОперации) Тогда
		ПолученныеДанные.АналитикаХозяйственнойОперации = Справочники.АналитикаХозяйственныхОпераций.РеализацияТоваров;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Ответственный) Тогда
		ПолученныеДанные.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	ТабТовары = ПолученныеДанные.Товары.Выгрузить();
	ТабТовары.Колонки.Удалить("НомерСтроки");
	КолонкиСуммирования = "Количество, КоличествоУпаковок, Сумма, СуммаНДС";
	МассивСтрок = Новый Массив;
	Для каждого Колонка Из ТабТовары.Колонки Цикл
		Если СтрНайти(КолонкиСуммирования, Колонка.Имя) > 0 Тогда
			Продолжить;
		КонецЕсли;
		МассивСтрок.Добавить(Колонка.Имя);
	КонецЦикла;
	КолонкиГруппировок = СтрСоединить(МассивСтрок, ",");
	ТабТовары.Свернуть(КолонкиГруппировок, КолонкиСуммирования);
	ПолученныеДанные.Товары.Загрузить(ТабТовары);
КонецПроцедуры
Процедура ПКО_Документ_ВыемкаДСИзКассыККМ_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствИзКассыККМ;
	
	РеквизитыКассыККМ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПолученныеДанные.КассаККМ, "Владелец, Магазин");
	
	ПолученныеДанные.Организация = РеквизитыКассыККМ.Владелец;
	ПолученныеДанные.Магазин = РеквизитыКассыККМ.Магазин;
КонецПроцедуры
Процедура ПКО_Документ_ЗаказКлиента_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	
	Если ДанныеXDTO.Свойство("Налогообложение") 
		И ЗначениеЗаполнено(ДанныеXDTO.Налогообложение) Тогда
		ПолученныеДанные.УчитыватьНДС = ?(ДанныеXDTO.Налогообложение.Значение = "ОблагаетсяНДС", Истина, Ложь);
	Иначе
		ПолученныеДанные.УчитыватьНДС = Истина;
	КонецЕсли;
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура",   "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество",     "Количество");
	ПравилаЗаполнения.Вставить("Сумма",          "Сумма");
	ПравилаЗаполнения.Вставить("Цена",           "Цена");
	ПравилаЗаполнения.Вставить("СтавкаНДС",      "СтавкаНДС");
	ПравилаЗаполнения.Вставить("СуммаНДС",       "СуммаНДС");
	ПравилаЗаполнения.Вставить("Характеристика",     "Характеристика");
	ПравилаЗаполнения.Вставить("Упаковка",           "Упаковка");
	ПравилаЗаполнения.Вставить("КоличествоУпаковок", "КоличествоУпаковок");
	
	// Товары 
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СуммаСНДС = Строка.Сумма;
			Если СтруктураДанныхСтроки.Свойство("СуммаНДС") И НЕ ПолученныеДанные.ЦенаВключаетНДС Тогда
				СуммаСНДС = СуммаСНДС + СтруктураДанныхСтроки.СуммаНДС
			КонецЕсли;
			
			СтруктураДанныхСтроки.Вставить("СуммаСНДС", СуммаСНДС);
			Если СтруктураДанныхСтроки.Свойство("КоличествоУпаковок") Тогда
			    Если СтруктураДанныхСтроки.Свойство("Упаковка") И СтруктураДанныхСтроки.Свойство("Сумма") Тогда
					СтруктураДанныхСтроки.Вставить("Цена", СтруктураДанныхСтроки.Сумма / СтруктураДанныхСтроки.КоличествоУпаковок);
				КонецЕсли;
			Иначе
				СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
			КонецЕсли;
	
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	// Услуги  загружаются в ТЧ Товары.
	Если ДанныеXDTO.Свойство("Услуги")
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
	
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СуммаСНДС = Строка.Сумма;
			Если СтруктураДанныхСтроки.Свойство("СуммаНДС") И НЕ ПолученныеДанные.ЦенаВключаетНДС Тогда
				СуммаСНДС = СуммаСНДС + СтруктураДанныхСтроки.СуммаНДС
			КонецЕсли;
			
			СтруктураДанныхСтроки.Вставить("СуммаСНДС", СуммаСНДС);
			СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
	
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ЗаказКлиента_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Ответственный) Тогда
		ПолученныеДанные.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если ДанныеИБ <> Неопределено Тогда
		ДанныеДляЗаписиВИБ = ДанныеИБ;
		ПолученныеДанные = Неопределено;
	Иначе
		ДанныеДляЗаписиВИБ = ПолученныеДанные;
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(ДанныеДляЗаписиВИБ.Статус) Тогда
		ДанныеДляЗаписиВИБ.Статус  = Перечисления.СтатусыЗаказовПокупателей.НеСогласован;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ЗаказПоставщику_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен    = Истина;
	ПолученныеДанные.ХозяйственнаяОперация  = Перечисления.ХозяйственныеОперации.ПоступлениеТоваров;
	
	Если ДанныеXDTO.Свойство("Налогообложение") 
		И ЗначениеЗаполнено(ДанныеXDTO.Налогообложение) Тогда
		ПолученныеДанные.УчитыватьНДС = ?(ДанныеXDTO.Налогообложение.Значение = "ОблагаетсяНДС", Истина, Ложь);
	Иначе
		ПолученныеДанные.УчитыватьНДС = Истина;
	КонецЕсли;
	
	//ПолученныеДанные.Закрыт  = Истина;
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура",   "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество",     "Количество");
	ПравилаЗаполнения.Вставить("Сумма",          "Сумма");
	ПравилаЗаполнения.Вставить("Цена",           "Цена");
	ПравилаЗаполнения.Вставить("СтавкаНДС",      "СтавкаНДС");
	ПравилаЗаполнения.Вставить("СуммаНДС",       "СуммаНДС");
	ПравилаЗаполнения.Вставить("Характеристика",     "Характеристика");
	ПравилаЗаполнения.Вставить("Упаковка",           "Упаковка");
	ПравилаЗаполнения.Вставить("КоличествоУпаковок", "КоличествоУпаковок");
	
	// Товары 
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СуммаСНДС = Строка.Сумма;
			Если СтруктураДанныхСтроки.Свойство("СуммаНДС") И НЕ ПолученныеДанные.ЦенаВключаетНДС Тогда
				СуммаСНДС = СуммаСНДС + СтруктураДанныхСтроки.СуммаНДС
			КонецЕсли;
			
			СтруктураДанныхСтроки.Вставить("СуммаСНДС", СуммаСНДС);
			Если СтруктураДанныхСтроки.Свойство("КоличествоУпаковок") Тогда
			    Если СтруктураДанныхСтроки.Свойство("Упаковка") И СтруктураДанныхСтроки.Свойство("Сумма") Тогда
					СтруктураДанныхСтроки.Вставить("Цена", СтруктураДанныхСтроки.Сумма / СтруктураДанныхСтроки.КоличествоУпаковок);
				КонецЕсли;
			Иначе
				СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
			КонецЕсли;
	
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	// Услуги  загружаются в ТЧ Товары с другим видом запасов.
	Если ДанныеXDTO.Свойство("Услуги")
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
	
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СуммаСНДС = Строка.Сумма;
			Если СтруктураДанныхСтроки.Свойство("СуммаНДС") И НЕ ПолученныеДанные.ЦенаВключаетНДС Тогда
				СуммаСНДС = СуммаСНДС + СтруктураДанныхСтроки.СуммаНДС
			КонецЕсли;
			
			СтруктураДанныхСтроки.Вставить("СуммаСНДС", СуммаСНДС);
			СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
	
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ЗаказПоставщику_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Ответственный) Тогда
		ПолученныеДанные.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ЗаявкаНаРасходДСРасчетыСКонт_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику;
	
	РасшифровкаПлатежаXDTO = Неопределено;
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа", РасшифровкаПлатежаXDTO)
		И ЗначениеЗаполнено(РасшифровкаПлатежаXDTO) Тогда
		
		ПравилаЗаполнения = Новый Структура;
		ПравилаЗаполнения.Вставить("СтатьяДДС", "СтатьяДвиженияДенежныхСредств");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
	
		МассивРасшифровкаПлатежа = Новый Массив;
		ОплатаПоставщику = Перечисления.ХозяйственныеОперации.ОплатаПоставщику;
		СтатьяДДС_ОплатаПоставщику = Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(ОплатаПоставщику);
	
		ИспользоватьДокументРасчетов = ДанныеXDTO.РасшифровкаПлатежа.Колонки.Найти("ДокументРасчетов") <> Неопределено;
	
		Для Каждого СтрокаРасшифровкаПлатежаXDTO Из РасшифровкаПлатежаXDTO Цикл
			СтрокаРасшифровкаПлатежа = ДанныеКоллекцииВВидеСтруктуры(СтрокаРасшифровкаПлатежаXDTO, ПравилаЗаполнения);
	
		    Если ИспользоватьДокументРасчетов И ЗначениеЗаполнено(СтрокаРасшифровкаПлатежаXDTO.ДокументРасчетов) Тогда
				ИмяПКО = "Документ_ПоступлениеТоваровУслуг_Получение";
				Инструкция = Новый Структура("Значение", СтрокаРасшифровкаПлатежаXDTO.ДокументРасчетов); 
				Инструкция.Вставить("ИмяПКО", ИмяПКО);
			    СтрокаРасшифровкаПлатежа.Вставить("ДокументРасчетовСКонтрагентом", Инструкция);
			КонецЕсли;
	
			Если НЕ ЗначениеЗаполнено(СтрокаРасшифровкаПлатежаXDTO.СтатьяДДС) Тогда
				СтрокаРасшифровкаПлатежаXDTO.СтатьяДДС = СтатьяДДС_ОплатаПоставщику;
			КонецЕсли;
	
			МассивРасшифровкаПлатежа.Добавить(СтрокаРасшифровкаПлатежа);
		КонецЦикла;
	КонецЕсли;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивРасшифровкаПлатежа);
КонецПроцедуры
Процедура ПКО_Документ_КассоваяСменаЗакрытие_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
КонецПроцедуры
Процедура ПКО_Документ_КассоваяСменаЗакрытие_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ = Неопределено Тогда
		ПолученныеДанные.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПолученныеДанные.КассаККМ, "Владелец");
		ПолученныеДанные.Дата = ПолученныеДанные.ОкончаниеКассовойСмены;
	Иначе
		ПолученныеДанные.Организация = ДанныеИБ.Организация;	
		ПолученныеДанные.Дата = ДанныеИБ.Дата;
	КонецЕсли;
	
	Если ДанныеИБ <> Неопределено
		И ДанныеИБ.Статус = Перечисления.СтатусыКассовойСмены.Закрыта Тогда
		//Смена уже загружена и закрыта в ИБ, изменение не возможно.
		ДанныеИБ = Неопределено;
		ПолученныеДанные = Неопределено;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_КассоваяСменаОткрытие_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.Статус = Перечисления.СтатусыКассовойСмены.Открыта;
КонецПроцедуры
Процедура ПКО_Документ_КассоваяСменаОткрытие_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПолученныеДанные.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПолученныеДанные.КассаККМ, "Владелец");
	
	Если ДанныеИБ <> Неопределено Тогда
		//Смена уже загружена в ИБ, изменение не возможно.
		ДанныеИБ = Неопределено;
		ПолученныеДанные = Неопределено;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ОприходованиеТоваров_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.10") Тогда
		УстановитьПравилоДляПКСТабЧасти(КомпонентыОбмена,
										"Документ_ОприходованиеТоваров_Получение", 
	                                    "Товары", 
										"НомерГТД",
										Ложь, 
										"Справочник_НомераГТД_ПолучениеЭлемента");
	КонецЕсли;
	
	ПолученныеДанные.Проведен = Истина;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.АналитикаХозяйственнойОперации) Тогда
		ПолученныеДанные.АналитикаХозяйственнойОперации = Справочники.АналитикаХозяйственныхОпераций.СкидкиПодарки;
	КонецЕсли;
	//Товары
	МассивСтрокТовары = Новый Массив;
	
	Если ДанныеXDTO.Свойство("Товары")
	И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		КонвертацииСвойств = Новый Соответствие;
		КонвертацииСвойств.Вставить("Номенклатура", "Номенклатура");
		КонвертацииСвойств.Вставить("Количество", "Количество");
		КонвертацииСвойств.Вставить("Сумма", "Сумма");
		КонвертацииСвойств.Вставить("Цена", "Цена");
		КонвертацииСвойств.Вставить("КоличествоУпаковок", "КоличествоУпаковок");
		
		Для Каждого СтрокаXDTO Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = Новый Структура;
			Если СтрокаXDTO.КоличествоУпаковок = Неопределено Тогда
				СтрокаXDTO.КоличествоУпаковок = СтрокаXDTO.Количество;
			КонецЕсли;
			ЗаполнитьСтруктуруДанныхСтроки(КонвертацииСвойств, СтрокаXDTO, СтруктураДанныхСтроки);
			
			Если ЗначениеЗаполнено(СтрокаXDTO.НомерГТД) Тогда
				Инструкция = Новый Структура("Код", СтрокаXDTO.НомерГТД);
				Если ЗначениеЗаполнено(СтрокаXDTO.СтранаПроисхождения) Тогда
					Инструкция.Вставить("СтранаПроисхождения", СтрокаXDTO.СтранаПроисхождения);
				КонецЕсли;
				СтруктураДанныхСтроки.Вставить("НомерГТД", Инструкция);
			КонецЕсли;
			
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ОприходованиеТоваров_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Ответственный) Тогда
		ПолученныеДанные.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	Если ДанныеИБ <> Неопределено И ЗначениеЗаполнено(ДанныеИБ.АналитикаХозяйственнойОперации) Тогда
		ПолученныеДанные.АналитикаХозяйственнойОперации = ДанныеИБ.АналитикаХозяйственнойОперации;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ОтчетКомитенту_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ДатаОплаты = ПолученныеДанные.Дата;
КонецПроцедуры
Процедура ПКО_Документ_ОтчетКомитенту_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Ответственный) Тогда
		ПолученныеДанные.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	// Переносим те свойства, которые указаны в ПКС
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Товары
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Характеристика");
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Товары,
		ДанныеИБ.Товары,
		МассивКлючевыхПолей,
		"СчетФактураВыданный, ДокументРеализации, Склад");
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
Процедура ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	ОплатаПодарочнымиСертификатами 	= 0;
	ОплатаПлатежнымиКартами			= 0;
	ПолученныеДанные.Проведен = Истина;
	
	Номер = ДанныеXDTO.КлючевыеСвойства.Номер;
	
	Если СтрНайти(Номер,"-") = 0 Тогда 	// Номер не соответствует шаблону БСП.
		Номер = "";						// Отдаем на автонумерацию.
	КонецЕсли;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОфлайнКасса"
		И ЗначениеЗаполнено(Номер) Тогда
	
		Запрос = Новый Запрос;
		ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОтчетОРозничныхПродажах.Номер КАК Номер
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
		|ГДЕ
		|	ОтчетОРозничныхПродажах.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаДокумента, ГОД) И КОНЕЦПЕРИОДА(&ДатаДокумента, ГОД)
		|	И ВЫБОР
		|			КОГДА (ВЫРАЗИТЬ(ОтчетОРозничныхПродажах.Номер КАК СТРОКА(2))) = &ПрефиксУзла
		|				ТОГДА ИСТИНА
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОтчетОРозничныхПродажах.Дата УБЫВ
		|";
		Запрос.УстановитьПараметр("ДатаДокумента", ПолученныеДанные.Дата);
		Запрос.УстановитьПараметр("ПрефиксУзла", Лев(Номер, 2));
		Запрос.Текст = ТекстЗапроса;
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ПоследнийНомер = Выборка.Номер;
		Иначе
			ПоследнийНомер = Номер;
		КонецЕсли;
		ПоложениеРазделителя = СтрНайти(ПоследнийНомер,"-");
		Если ПоложениеРазделителя <> 0 Тогда
			ПоследнийНомер = Прав(ПоследнийНомер, СтрДлина(ПоследнийНомер) - СтрНайти(ПоследнийНомер,"-"));
			Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПоследнийНомер) Тогда
				ЧислоНомер = Число(ПоследнийНомер);
			КонецЕсли;
		Иначе
			Для Индекс = 1 По СтрДлина(ПоследнийНомер)  Цикл
				ЭтоЦифра = КодСимвола(ПоследнийНомер, Индекс) >= 48 И КодСимвола(ПоследнийНомер, Индекс) <= 57;
				Если ЭтоЦифра Тогда
					СтрокаНомерТолькоЦифры = Прав(ПоследнийНомер, СтрДлина(ПоследнийНомер) - Индекс + 1);
					Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаНомерТолькоЦифры) Тогда
						ЧислоНомер = Число(СтрокаНомерТолькоЦифры);
					КонецЕсли;
					Прервать;
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли; 
		СледующийНомер = ?(ЧислоНомер <> Неопределено ИЛИ ЧислоНомер = 0, ЧислоНомер + 1, Номер);
		ПоложениеРазделителя = ?(ПоложениеРазделителя = 0, 3, ПоложениеРазделителя);
		ПолученныеДанные.Номер = Лев(Номер, ПоложениеРазделителя - 1) + "-" + Прав("00000000000" + Строка(СледующийНомер), СтрДлина(Номер) - ПоложениеРазделителя);
	Иначе
		
		Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменМК" Тогда
					
			ПрефиксМобильнойКассы = КомпонентыОбмена.УзелКорреспондента.Код;
			МаксимальнаяДлинаПрефикса = 2;
					
			Если СтрДлина(ПрефиксМобильнойКассы) <= МаксимальнаяДлинаПрефикса Тогда
						
				ПолученныеДанные.Номер = СформироватьНомерОРПИзМобильнойКассы(ДанныеXDTO.КлючевыеСвойства.Номер, ПрефиксМобильнойКассы);
						
			КонецЕсли;
					
		Иначе
			ПолученныеДанные.Номер = Номер;
		КонецЕсли;

	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолученныеДанные.КассаККМ) И НЕ ЗначениеЗаполнено(ПолученныеДанные.Магазин) Тогда
		
		ПолученныеДанные.Магазин = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ПолученныеДанные.КассаККМ, "Магазин"
		);
		
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("Налогообложение") 
		И ЗначениеЗаполнено(ДанныеXDTO.Налогообложение) Тогда
		ПолученныеДанные.УчитыватьНДС = ?(ДанныеXDTO.Налогообложение.Значение = "ПродажаОблагаетсяНДС", Истина, Ложь);
	Иначе
		ПолученныеДанные.УчитыватьНДС = Истина;
	КонецЕсли;
	
	РеквизитыМагазина = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПолученныеДанные.Магазин, "СкладПродажи");
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");
	ПравилаЗаполнения.Вставить("Упаковка",	   "Упаковка");
	ПравилаЗаполнения.Вставить("Количество",   "Количество");
	ПравилаЗаполнения.Вставить("Сумма",        "Сумма");
	ПравилаЗаполнения.Вставить("Цена",         "Цена");
	ПравилаЗаполнения.Вставить("СтавкаНДС",    "СтавкаНДС");
	ПравилаЗаполнения.Вставить("СуммаНДС",     "СуммаНДС");
	
	// Товары
	МассивСтрокТовары = Новый Массив;
	
	ИмяТабличнойЧастиТовары = ?(ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6"),	
		"ТоварыПродажа", "Товары");
	
	ТабличнаяЧастьТовары = Неопределено;
	Если ДанныеXDTO.Свойство(ИмяТабличнойЧастиТовары, ТабличнаяЧастьТовары)
		И ЗначениеЗаполнено(ТабличнаяЧастьТовары) Тогда
	
		Для Каждого Строка Из ТабличнаяЧастьТовары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			Если КомпонентыОбмена.ВерсияФорматаОбмена =	"1.8.Cashbox"
				И ЗначениеЗаполнено(Строка.SKU) Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	КодыТоваровSKU.Номенклатура КАК Номенклатура,
				|	КодыТоваровSKU.Характеристика КАК Характеристика,
				|	КодыТоваровSKU.Упаковка КАК Упаковка
				|ИЗ
				|	РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
				|ГДЕ
				|	КодыТоваровSKU.SKU = &SKU
				|";
				
				Запрос.УстановитьПараметр("SKU", СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Строка.SKU));
				
				Результат = Запрос.Выполнить();
				
				Если НЕ Результат.Пустой() Тогда
					Выборка = Результат.Выбрать();
					Выборка.Следующий();
		
					СтруктураДанныхСтроки.Вставить("Номенклатура", Выборка.Номенклатура);
					СтруктураДанныхСтроки.Вставить("Характеристика", Выборка.Характеристика);
					СтруктураДанныхСтроки.Вставить("Упаковка", Выборка.Упаковка);
				КонецЕсли;
			КонецЕсли;
	
			СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
			СтруктураДанныхСтроки.Вставить("Склад", РеквизитыМагазина.СкладПродажи);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("ТоварыВозвратПродажи")
		И ЗначениеЗаполнено(ДанныеXDTO.ТоварыВозвратПродажи) Тогда
		
		ТоварыВозвратПродажи = ДанныеXDTO.ТоварыВозвратПродажи.СкопироватьКолонки();
		
		Для Каждого Строка Из ДанныеXDTO.ТоварыВозвратПродажи Цикл
				
			Строка.Количество = - ?(ЗначениеЗаполнено(Строка.Количество), Строка.Количество, 0);
			Строка.Сумма      = - ?(ЗначениеЗаполнено(Строка.Сумма), Строка.Сумма, 0);
			Строка.СуммаНДС   = - ?(ЗначениеЗаполнено(Строка.СуммаНДС), Строка.СуммаНДС, 0);
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
			СтруктураДанныхСтроки.Вставить("Склад", РеквизитыМагазина.СкладПродажи);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("Услуги")
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	
	//Оплата платежными картами
	МассивСтрокОплатаПК = Новый Массив;
	
	Если ДанныеXDTO.Свойство("ОплатаПлатежнымиКартами")
		И ЗначениеЗаполнено(ДанныеXDTO.ОплатаПлатежнымиКартами) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
						|	ВидыОплатЧекаККМ.Ссылка КАК Ссылка
						|ИЗ
						|	Справочник.ВидыОплатЧекаККМ КАК ВидыОплатЧекаККМ
						|ГДЕ
						|	ВидыОплатЧекаККМ.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта)";
	
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ВидОплаты = Выборка.Ссылка;
		Иначе
			ВидОплаты = Справочники.ВидыОплатЧекаККМ.ПустаяСсылка();
		КонецЕсли;
		
		Для Каждого Строка Из ДанныеXDTO.ОплатаПлатежнымиКартами Цикл
			СтруктураДанныхСтроки = Новый Структура;
			СтруктураДанныхСтроки.Вставить("ВидОплаты", ВидОплаты);
			СтруктураДанныхСтроки.Вставить("Сумма", Строка.СуммаОплаты);
			СтруктураДанныхСтроки.Вставить("НомерПлатежнойКарты", Строка.НомерКарты);
		
			Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.4") Тогда
			    Если ЗначениеЗаполнено(Строка.Эквайрер) Тогда
			    	Эквайрер = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
						КомпонентыОбмена,
						Строка.Эквайрер,
						ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_Контрагенты_Получение"), 
						"ПолучитьСсылку");
						
					Если ТипЗнч(Эквайрер) = Тип("СправочникОбъект.Контрагенты") Тогда
						Эквайрер = Эквайрер.Ссылка;
					КонецЕсли;	
				
					Терминал = НайтиТерминалПоЭквайреруИОрганизации(ПолученныеДанные.Организация,
						Эквайрер);
					СтруктураДанныхСтроки.Вставить("ЭквайринговыйТерминал", Терминал);
			    КонецЕсли;
			Иначе //Версия 1.4 и выше
				Инструкция = Новый Структура;
				Инструкция.Вставить("Значение", Справочники.ЭквайринговыеТерминалы.ПустаяСсылка());
				Инструкция.Вставить("ИмяПКО", "Справочник_ЭквайринговыеТерминалы_Получение");
				
				СтруктураДанныхСтроки.Вставить("ЭквайринговыйТерминал", Инструкция);
			КонецЕсли;
			
			МассивСтрокОплатаПК.Добавить(СтруктураДанныхСтроки);
		
		КонецЦикла;
		ОплатаПлатежнымиКартами = ДанныеXDTO.ОплатаПлатежнымиКартами.Итог("СуммаОплаты");
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ОплатаПлатежнымиКартами", МассивСтрокОплатаПК);	
	КонецЕсли;
	
	//Подарочные сертификаты
	Если ДанныеXDTO.Свойство("ОплатаСертификатами")
		И ЗначениеЗаполнено(ДанныеXDTO.ОплатаСертификатами) Тогда
		ОплатаПодарочнымиСертификатами = ДанныеXDTO.ОплатаСертификатами.Итог("Сумма");
		ПолученныеДанные.ОплатаПодарочнымиСертификатами = ОплатаПодарочнымиСертификатами;
	КонецЕсли;
	
	//Сумма документа, Сумма оплаты наличных
	Если Не ДанныеXDTO.Свойство("Сумма")
		И МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.СуммаДокумента =
			ОбработкаТабличнойЧастиТоварыКлиентСервер.СуммаДокумента(ДанныеXDTO.ТоварыПродажа, ?(ПолученныеДанные.ЦенаВключаетНДС, Истина, Ложь));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолученныеДанные.СуммаДокумента) Тогда
		ПолученныеДанные.СуммаОплатыНаличных = ПолученныеДанные.СуммаДокумента - ОплатаПлатежнымиКартами - ОплатаПодарочнымиСертификатами;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ = Неопределено Тогда
		ПолучитьКассуККМПоОрганизацииИМагазину(ПолученныеДанные);
		Возврат;
	КонецЕсли;
	
	ДанныеИБМагазин = ДанныеИБ.Магазин;
	
	МассивИсключений = Новый Массив;
	Если ДанныеИБ <> Неопределено Тогда
		МассивИсключений.Добавить("Номер");
	КонецЕсли;
	
	// Переносим те свойства, которые указаны в ПКС.
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ, МассивИсключений);
	
	// Восстанавливаем магазин из первоначального документа.
	ДанныеИБ.Магазин = ДанныеИБМагазин;
	
	ПолучитьКассуККМПоОрганизацииИМагазину(ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	// Табличные части
	//Товары
	МассивКлючевыхПолей = Новый Массив;
	
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Характеристика");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	МассивКлючевыхПолей.Добавить("СуммаНДС");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Товары,
		ДанныеИБ.Товары,
		МассивКлючевыхПолей,
		"Продавец,ДисконтнаяКарта");
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
	//Оплаты
	ДанныеИБ.ОплатаПлатежнымиКартами.Загрузить(ПолученныеДанные.ОплатаПлатежнымиКартами.Выгрузить());
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
Процедура ПКО_Документ_ПеремещениеТоваров_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен               = Истина;
	
	МассивСтрокТовары = Новый Массив;
	Для Каждого Строка Из ДанныеXDTO.Товары Цикл
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Характеристика",    "Характеристика");
		ПравилаЗаполнения.Вставить("Упаковка",          "Упаковка");
		ПравилаЗаполнения.Вставить("Номенклатура",      "Номенклатура");
		ПравилаЗаполнения.Вставить("КоличествоУпаковок","КоличествоУпаковок");
		ПравилаЗаполнения.Вставить("Количество",        "Количество");
		СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
		Если НЕ (СтруктураДанныхСтроки.Свойство("КоличествоУпаковок") И СтруктураДанныхСтроки.КоличествоУпаковок <> 0) Тогда
			СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
		КонецЕсли;
		МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		
	КонецЦикла;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
КонецПроцедуры
Процедура ПКО_Документ_ПеремещениеТоваров_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Ответственный) Тогда
		ПолученныеДанные.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПересчетТоваров_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.Статус = Перечисления.СтатусыПересчетовТоваров.Выполнено;
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура",   			"Номенклатура");
	ПравилаЗаполнения.Вставить("Количество",     			"Количество");
	ПравилаЗаполнения.Вставить("КоличествоФакт", 			"КоличествоФакт");
	ПравилаЗаполнения.Вставить("Характеристика",         	"Характеристика");
	ПравилаЗаполнения.Вставить("Упаковка",               	"Упаковка");
	ПравилаЗаполнения.Вставить("КоличествоУпаковок",     	"КоличествоУпаковок");
	ПравилаЗаполнения.Вставить("КоличествоУпаковокФакт", 	"КоличествоУпаковокФакт");
	
	//Товары
	МассивСтрокТовары = Новый Массив;
	Для Каждого Строка Из ДанныеXDTO.Товары Цикл
		
		СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
		
		Если СтруктураДанныхСтроки.Свойство("Количество") И НЕ СтруктураДанныхСтроки.Свойство("КоличествоУпаковок") Тогда
			СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
		КонецЕсли;
		Если СтруктураДанныхСтроки.Свойство("КоличествоФакт") И НЕ СтруктураДанныхСтроки.Свойство("КоличествоУпаковокФакт") Тогда
			СтруктураДанныхСтроки.Вставить("КоличествоУпаковокФакт", СтруктураДанныхСтроки.КоличествоФакт);
		КонецЕсли;	
		
		МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		
	КонецЦикла;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПересчетТоваров_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Ответственный) Тогда
		ПолученныеДанные.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если ДанныеИБ <> Неопределено Тогда
		// Переносим те свойства, которые указаны в ПКС
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
		
		// Товары
		МассивКлючевыхПолей = Новый Массив;
		МассивКлючевыхПолей.Добавить("Номенклатура");
		МассивКлючевыхПолей.Добавить("Характеристика");
		МассивКлючевыхПолей.Добавить("Упаковка");
		
		ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
			ПолученныеДанные.Товары,
			ДанныеИБ.Товары,
			МассивКлючевыхПолей,
			Неопределено,
			"КоличествоФакт, КоличествоУпаковокФакт");
			
		ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
		
		ПолученныеДанные = Неопределено;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка;
	ПолученныеДанные.Проведен = Истина;
КонецПроцедуры
Процедура ПКО_Документ_ПКОПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеДоходы;
	
	СтрокаТаблицы = Новый Соответствие;
	СтрокаТаблицы.Вставить("Сумма", "Сумма");
	СтрокаТаблицы.Вставить("СтатьяДвиженияДенежныхСредств", "СтатьяДДС");
	МассивСтрокРасшифровкаПлатежа = Новый Массив;
	ПрочиеДоходы = Перечисления.ХозяйственныеОперации.ПрочиеДоходы;
	СтатьяДДС_ПрочиеДоходы = Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(ПрочиеДоходы);
	Для Каждого СтрокаXDTO Из ДанныеXDTO.РасшифровкаПлатежа Цикл
		СтруктураДанныхСтроки = Новый Структура;
		Если НЕ ЗначениеЗаполнено(СтрокаXDTO.СтатьяДДС) Тогда
			СтрокаXDTO.СтатьяДДС = СтатьяДДС_ПрочиеДоходы;
		КонецЕсли;
		ЗаполнитьСтруктуруДанныхСтроки(СтрокаТаблицы, СтрокаXDTO, СтруктураДанныхСтроки);
		МассивСтрокРасшифровкаПлатежа.Добавить(СтруктураДанныхСтроки);
	КонецЦикла;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровкаПлатежа);
КонецПроцедуры
Процедура ПКО_Документ_ПКОПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеДоходы;
	
	СтрокаТаблицы = Новый Соответствие;
	СтрокаТаблицы.Вставить("Сумма", "Сумма");
	СтрокаТаблицы.Вставить("СтатьяДвиженияДенежныхСредств", "СтатьяДДС");
	МассивСтрокРасшифровкаПлатежа = Новый Массив;
	ПрочиеДоходы = Перечисления.ХозяйственныеОперации.ПрочиеДоходы;
	СтатьяДДС_ПрочиеДоходы = Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(ПрочиеДоходы);
	Для Каждого СтрокаXDTO Из ДанныеXDTO.РасшифровкаПлатежа Цикл
		СтруктураДанныхСтроки = Новый Структура;
		Если НЕ ЗначениеЗаполнено(СтрокаXDTO.СтатьяДДС) Тогда
			СтрокаXDTO.СтатьяДДС = СтатьяДДС_ПрочиеДоходы;
		КонецЕсли;
		ЗаполнитьСтруктуруДанныхСтроки(СтрокаТаблицы, СтрокаXDTO, СтруктураДанныхСтроки);
		МассивСтрокРасшифровкаПлатежа.Добавить(СтруктураДанныхСтроки);
	КонецЦикла;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровкаПлатежа);
КонецПроцедуры
Процедура ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.10") Тогда
		УстановитьПравилоДляПКСТабЧасти(КомпонентыОбмена,
										"Документ_ПоступлениеТоваровУслуг_Получение", 
	                                    "Товары", 
										"НомерГТД",
										Ложь, 
										"Справочник_НомераГТД_ПолучениеЭлемента");
	КонецЕсли;
	
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеТоваров;
	
	Если ДанныеXDTO.Свойство("Налогообложение") 
		И ЗначениеЗаполнено(ДанныеXDTO.Налогообложение) Тогда
		ПолученныеДанные.УчитыватьНДС = ?(ДанныеXDTO.Налогообложение.Значение = "ОблагаетсяНДС", Истина, Ложь);
	Иначе
		ПолученныеДанные.УчитыватьНДС = Истина;
	КонецЕсли;
	
	Если ДанныеXDTO.ВидОперации.Значение = "ПриемНаКомиссию" Тогда
		ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию;
	Иначе
		ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеТоваров
	КонецЕсли;
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", 		"Номенклатура");
	ПравилаЗаполнения.Вставить("Характеристика",    "Характеристика");
	ПравилаЗаполнения.Вставить("Упаковка",          "Упаковка");
	ПравилаЗаполнения.Вставить("КоличествоУпаковок","КоличествоУпаковок");
	ПравилаЗаполнения.Вставить("Серия",             "Серия");
	ПравилаЗаполнения.Вставить("Количество",   		"Количество");
	ПравилаЗаполнения.Вставить("Сумма",        		"Сумма");
	ПравилаЗаполнения.Вставить("Цена",         		"Цена");
	ПравилаЗаполнения.Вставить("СтавкаНДС",    		"СтавкаНДС");
	ПравилаЗаполнения.Вставить("СуммаНДС",     		"СуммаНДС");
	ПравилаЗаполнения.Вставить("Склад",        		"Склад");
	ПравилаЗаполнения.Вставить("НомерАкцизнойМарки","ЗначениеШтрихкода");
	
	//Товары
	МассивСтрокТовары 	= Новый Массив;
	МассивСтрокСерии 	= Новый Массив;
	
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		Для Каждого СтрокаТовары Из ДанныеXDTO.Товары Цикл
		
			//Товары
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(СтрокаТовары, ПравилаЗаполнения);
			Если ЗначениеЗаполнено(СтрокаТовары.НомерГТД) Тогда
				Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.10") Тогда
			        СтруктураДанныхСтроки.Вставить("НомерГТД", СтрокаТовары.НомерГТД);
			    Иначе
			        СтруктураДанныхСтроки.Вставить("НомерГТД", Новый Структура("Код, СтранаПроисхождения", СтрокаТовары.НомерГТД, СтрокаТовары.СтранаПроисхождения));
			    КонецЕсли;
			КонецЕсли;
			СуммаСНДС = СтрокаТовары.Сумма;
			Если СтруктураДанныхСтроки.Свойство("СуммаНДС") И НЕ ПолученныеДанные.ЦенаВключаетНДС Тогда
				СуммаСНДС = СуммаСНДС + СтруктураДанныхСтроки.СуммаНДС
			КонецЕсли;
			
			СтруктураДанныхСтроки.Вставить("СуммаСНДС", СуммаСНДС);
	
			Если СтруктураДанныхСтроки.Свойство("КоличествоУпаковок") Тогда
			    Если СтруктураДанныхСтроки.Свойство("Упаковка") И СтруктураДанныхСтроки.Свойство("Сумма") Тогда
					СтруктураДанныхСтроки.Вставить("Цена", СтруктураДанныхСтроки.Сумма / СтруктураДанныхСтроки.КоличествоУпаковок);
				КонецЕсли;
			Иначе
				СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТовары.Серия) Тогда
				СтруктураДанныхСтроки.Вставить("СтатусУказанияСерий", 2);
			
				Номенклатура = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
				КомпонентыОбмена,
				СтрокаТовары.Номенклатура,
				ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_Номенклатура_Получение"), 
				"ПолучитьСсылку").Ссылка;
				
				Если ОбщегоНазначения.СсылкаСуществует(Номенклатура) Тогда
					СерияСтруктура = Новый Структура("Наименование, СерийныйНомер");			
					ЗаполнитьЗначенияСвойств(СерияСтруктура, СтрокаТовары.Серия);
					СерияСтруктура.Вставить("ВидНоменклатуры", Номенклатура.ВидНоменклатуры);
	
					ИмяПКО = "Справочник_СерииНоменклатуры_ИзСтруктуры";
					Инструкция = Новый Структура("Значение, ИмяПКО", СерияСтруктура, ИмяПКО);
				Иначе
					ИмяПКО = "Справочник_СерииНоменклатуры";
					Инструкция = Новый Структура("Значение, ИмяПКО", СтрокаТовары.Серия, ИмяПКО);
				КонецЕсли;
				
				СтруктураДанныхСтроки.Вставить("Серия", Инструкция);
	
				МассивСтрокСерии.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
	
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			
		КонецЦикла;
	КонецЕсли;
	
	//Услуги загружаются в ТЧ Товары
	Если ДанныеXDTO.Свойство("Услуги")
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
	
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокСерии.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Серии", МассивСтрокСерии);
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
	
	// Штрихкоды упаковок.
	ЗагрузитьШтрихкодыУпаковок(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена);
КонецПроцедуры
Процедура ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Ответственный) Тогда
		ПолученныеДанные.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	ТабТовары = ПолученныеДанные.Товары.Выгрузить();
	ТабТовары.Колонки.Удалить("НомерСтроки");
	КолонкиСуммирования = "Количество, КоличествоУпаковок, Сумма, СуммаНДС";
	МассивСтрок = Новый Массив;
	Для каждого Колонка Из ТабТовары.Колонки Цикл
		Если СтрНайти(КолонкиСуммирования, Колонка.Имя) > 0 Тогда
			Продолжить;
		КонецЕсли;
		МассивСтрок.Добавить(Колонка.Имя);
	КонецЦикла;
	КолонкиГруппировок = СтрСоединить(МассивСтрок, ",");
	ТабТовары.Свернуть(КолонкиГруппировок, КолонкиСуммирования);
	ПолученныеДанные.Товары.Загрузить(ТабТовары);
КонецПроцедуры
Процедура ПКО_Документ_РеализацияТоваровУслуг_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЗначениеЗаполнено(ПолученныеДанные.Магазин) Тогда
		ПолученныеДанные.Склад = Справочники.Склады.ПолучитьСкладПродажиПоУмолчанию(ПолученныеДанные.Магазин, Неопределено);
	КонецЕсли;
	
	Продавец = Справочники.Пользователи.ПустаяСсылка();
	Если ДанныеXDTO.Свойство("Продавец")
		И ЗначениеЗаполнено(ДанныеXDTO.Продавец) Тогда
		Продавец = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
			КомпонентыОбмена,
			ДанныеXDTO.Продавец,
			ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_Пользователи_Получение"), 
			"ПолучитьСсылку");
	КонецЕсли;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Продавец", Продавец);
	
	Если ДанныеXDTO.Свойство("Налогообложение")
		И ЗначениеЗаполнено(ДанныеXDTO.Налогообложение) И ДанныеXDTO.Налогообложение.Значение = "ПродажаОблагаетсяНДС" Тогда
		ПолученныеДанные.УчитыватьНДС = Истина;
	КонецЕсли;
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", 		"Номенклатура");
	ПравилаЗаполнения.Вставить("Характеристика",    "Характеристика");
	ПравилаЗаполнения.Вставить("Упаковка",          "Упаковка");
	ПравилаЗаполнения.Вставить("КоличествоУпаковок","КоличествоУпаковок");
	ПравилаЗаполнения.Вставить("Количество",   		"Количество");
	ПравилаЗаполнения.Вставить("Сумма",        		"Сумма");
	ПравилаЗаполнения.Вставить("Цена",         		"Цена");
	ПравилаЗаполнения.Вставить("СтавкаНДС",    		"СтавкаНДС");
	ПравилаЗаполнения.Вставить("СуммаНДС",     		"СуммаНДС");
	
	//Товары
	МассивСтрокТовары 	= Новый Массив;
	
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		Для Каждого СтрокаТовары Из ДанныеXDTO.Товары Цикл
		
			//Товары
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(СтрокаТовары, ПравилаЗаполнения);
			СуммаСНДС = СтрокаТовары.Сумма;
			Если СтруктураДанныхСтроки.Свойство("СуммаНДС") И НЕ ПолученныеДанные.ЦенаВключаетНДС Тогда
				СуммаСНДС = СуммаСНДС + СтруктураДанныхСтроки.СуммаНДС
			КонецЕсли;
			
			СтруктураДанныхСтроки.Вставить("СуммаСНДС", СуммаСНДС);
	
			Если СтруктураДанныхСтроки.Свойство("КоличествоУпаковок") Тогда
			    Если СтруктураДанныхСтроки.Свойство("Упаковка") И СтруктураДанныхСтроки.Свойство("Сумма") Тогда
					СтруктураДанныхСтроки.Вставить("Цена", СтруктураДанныхСтроки.Сумма / СтруктураДанныхСтроки.КоличествоУпаковок);
				КонецЕсли;
			Иначе
				СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
			КонецЕсли;
			
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	//Услуги загружаются в ТЧ Товары
	Если ДанныеXDTO.Свойство("Услуги")
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
	
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
	
	// Штрихкоды упаковок.
	ЗагрузитьШтрихкодыУпаковок(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена);
КонецПроцедуры
Процедура ПКО_Документ_РеализацияТоваровУслуг_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Продавец = ПолученныеДанные.ДополнительныеСвойства.Продавец;
	
	Если ЗначениеЗаполнено(Продавец.ФизическоеЛицо) Тогда
		ПолученныеДанные.Продавец = Продавец.ФизическоеЛицо;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_РКОНаБанковскийСчет_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк;
КонецПроцедуры
Процедура ПКО_Документ_РКОПрочийРасход_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеРасходы;
	
	МассивСтрокРасшифровкаПлатежа = Новый Массив;
	Если ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) Тогда
	
		РасшифровкаПлатежа = Новый Соответствие;
		РасшифровкаПлатежа.Вставить("Сумма", "Сумма");
		РасшифровкаПлатежа.Вставить("СтатьяДвиженияДенежныхСредств", "СтатьяДДС");
	
		Для Каждого СтрокаXDTO Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = Новый Структура;
			ЗаполнитьСтруктуруДанныхСтроки(РасшифровкаПлатежа, СтрокаXDTO, СтруктураДанныхСтроки);
			МассивСтрокРасшифровкаПлатежа.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровкаПлатежа);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	
	Если ДанныеXDTO.Свойство("ВидРасчетов")
		И ЗначениеЗаполнено(ДанныеXDTO.ВидРасчетов) Тогда
		ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику;
	КонецЕсли;
	
	РасшифровкаПлатежаXDTO = Неопределено;
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа", РасшифровкаПлатежаXDTO)
		И ЗначениеЗаполнено(РасшифровкаПлатежаXDTO) Тогда
		
		ПравилаЗаполнения = Новый Структура;
		ПравилаЗаполнения.Вставить("СтатьяДДС", "СтатьяДвиженияДенежныхСредств");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
	
		МассивРасшифровкаПлатежа = Новый Массив;
		ОплатаПоставщику = Перечисления.ХозяйственныеОперации.ОплатаПоставщику;
		СтатьяДДС_ОплатаПоставщику = Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(ОплатаПоставщику);
	
		Для Каждого СтрокаРасшифровкаПлатежаXDTO Из РасшифровкаПлатежаXDTO Цикл
			СтрокаРасшифровкаПлатежа = ДанныеКоллекцииВВидеСтруктуры(СтрокаРасшифровкаПлатежаXDTO, ПравилаЗаполнения);
	
			Если НЕ ЗначениеЗаполнено(СтрокаРасшифровкаПлатежаXDTO.СтатьяДДС) Тогда
				СтрокаРасшифровкаПлатежаXDTO.СтатьяДДС = СтатьяДДС_ОплатаПоставщику;
			КонецЕсли;
	
			МассивРасшифровкаПлатежа.Добавить(СтрокаРасшифровкаПлатежа);
		КонецЦикла;
	КонецЕсли;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивРасшифровкаПлатежа);
КонецПроцедуры
Процедура ПКО_Документ_СборкаТоваров_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары") И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		//Товары
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("КоличествоУпаковок", "КоличествоУпаковок");
		ПравилаЗаполнения.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
		ПравилаЗаполнения.Вставить("ДоляСтоимости", "ДоляСтоимости");
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			Если Не СтруктураДанныхСтроки.Свойство("КоличествоУпаковок") Тогда
				СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
			КонецЕсли;
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_СборкаТоваров_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Ответственный) Тогда
		ПолученныеДанные.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_СписаниеЗапасов_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.АналитикаХозяйственнойОперации) Тогда
		ПолученныеДанные.АналитикаХозяйственнойОперации = Справочники.АналитикаХозяйственныхОпераций.СкидкиПодарки;
	КонецЕсли;
	//Товары
	МассивСтрокТовары = Новый Массив;
	
	Если ДанныеXDTO.Свойство("Товары")
	И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		КонвертацииСвойств = Новый Соответствие;
		КонвертацииСвойств.Вставить("Номенклатура", "Номенклатура");
		КонвертацииСвойств.Вставить("Количество", "Количество");
		КонвертацииСвойств.Вставить("Сумма", "Сумма");
		КонвертацииСвойств.Вставить("Цена", "Цена");
		КонвертацииСвойств.Вставить("КоличествоУпаковок", "КоличествоУпаковок");
		
		Для Каждого СтрокаXDTO Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = Новый Структура;
			Если СтрокаXDTO.КоличествоУпаковок = Неопределено Тогда
				СтрокаXDTO.КоличествоУпаковок = СтрокаXDTO.Количество;
			КонецЕсли;
			ЗаполнитьСтруктуруДанныхСтроки(КонвертацииСвойств, СтрокаXDTO, СтруктураДанныхСтроки);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_СписаниеЗапасов_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Ответственный) Тогда
		ПолученныеДанные.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	Если ДанныеИБ <> Неопределено И ЗначениеЗаполнено(ДанныеИБ.АналитикаХозяйственнойОперации) Тогда
		ПолученныеДанные.АналитикаХозяйственнойОперации = ДанныеИБ.АналитикаХозяйственнойОперации;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_УведОВвозеПрослеживаемыхТоваров_Получ_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ДокументПоступления = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
				КомпонентыОбмена,
				ДанныеXDTO.ДокументПоступления,
				ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Документ_ПоступлениеТоваровУслуг_Получение"), 
				"ПолучитьСсылку").Ссылка;
				
	Если ОбщегоНазначения.СсылкаСуществует(ДокументПоступления) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДокументПоступления", ДокументПоступления);
	КонецЕсли;
	
	//Товары
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", 	 "Номенклатура");
	ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");
	ПравилаЗаполнения.Вставить("Упаковка", 		 "Упаковка");
	ПравилаЗаполнения.Вставить("КоличествоРНПТ", "КоличествоПоРНПТ");
	
	МассивСтрокТовары = Новый Массив;
	
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		Для Каждого СтрокаТовары Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(СтрокаТовары, ПравилаЗаполнения);
			Если ЗначениеЗаполнено(ДанныеXDTO.РНПТ) Тогда
		        СтруктураДанныхСтроки.Вставить("НомерГТД", ДанныеXDTO.РНПТ);
			КонецЕсли;
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_УведОВвозеПрослеживаемыхТоваров_Получ_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ДокументПоступленияСсылка = ПолученныеДанные.ДополнительныеСвойства.ДокументПоступления;
	
	Если ЗначениеЗаполнено(ДокументПоступленияСсылка)
		И ДокументПоступленияСсылка.Товары.Количество() > 0 Тогда
	
		ДокументПоступления = ДокументПоступленияСсылка.ПолучитьОбъект();
		
		ТоварыПоступления = ДокументПоступления.Товары;
		
		РеквизитыПоиска = "Номенклатура, Характеристика, Упаковка";
		СтруктураПоиска = Новый Структура(РеквизитыПоиска);
	
		Для Каждого СтрокаТовары Из ПолученныеДанные.Товары Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТовары);
			НайденныеСтроки = ТоварыПоступления.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
				СтрокаТаблицы.КоличествоПоРНПТ = СтрокаТовары.КоличествоПоРНПТ;
				СтрокаТаблицы.НомерГТД = СтрокаТовары.НомерГТД;
			КонецЦикла;
		КонецЦикла;
	
		ПравилоКонвертации = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Документ_ПоступлениеТоваровУслуг_Получение");
		ОбменДаннымиXDTOСервер.ЗаписатьОбъектВИБ(КомпонентыОбмена, ДокументПоступления, ПравилоКонвертации.ТипДанных);
		
	КонецЕсли;
	
	ДанныеИБ = Неопределено;
	ПолученныеДанные = Неопределено;
КонецПроцедуры
Процедура ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");
	ПравилаЗаполнения.Вставить("Цена", "Цена");
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	//Товары 
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			СтруктураДанныхСтроки.Вставить("ВидЦены", ДанныеXDTO.ТипЦен);
			СтруктураДанныхСтроки.Вставить("ЦенаИзмененаВручную", Истина);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
	
	МассивВидыЦен = Новый Массив;
	МассивВидыЦен.Добавить(Новый Структура("ВидЦены", ДанныеXDTO.ТипЦен));
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ВидыЦен", МассивВидыЦен);
КонецПроцедуры
Процедура ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Ответственный) Тогда
		ПолученныеДанные.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
	                            ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
Процедура ПКО_Документ_ЧекККМ_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	РеквизитыКассыККМ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПолученныеДанные.КассаККМ, "Владелец, Магазин");
	ПолученныеДанные.Организация = РеквизитыКассыККМ.Владелец;
	ПолученныеДанные.Магазин = РеквизитыКассыККМ.Магазин;
	
	ПолученныеДанные.ЦенаВключаетНДС = Истина;
	ПолученныеДанные.Проведен = Истина;
	
	Если ДанныеXDTO.Свойство("ТоварыПродажа")
		И ДанныеXDTO.ТоварыПродажа.Количество() > 0 Тогда
		ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа;
	ИначеЕсли ДанныеXDTO.Свойство("ПодарочныеСертификаты") Тогда
		Если ДанныеXDTO.ПодарочныеСертификаты.Итог("Сумма") > 0 Тогда
			ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа;
		Иначе
			ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат;
		КонецЕсли;
	ИначеЕсли ДанныеXDTO.Свойство("Услуги")
		И ДанныеXDTO.Услуги.Количество() > 0 Тогда
		ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа;
	ИначеЕсли ДанныеXDTO.Свойство("ТоварыВозвратПродажи")
		И ДанныеXDTO.ТоварыВозвратПродажи.Количество() > 0 Тогда
		ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат;
	Иначе
		ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа;
	КонецЕсли;
	
	Продавцы = Новый Соответствие;
	ОплатыПлатежнымиСистемами = Новый Соответствие;
	
	Если ДанныеXDTO.Свойство("AdditionalInfo") 
		И ТипЗнч(ДанныеXDTO.AdditionalInfo) = Тип("Структура") Тогда
		Если ДанныеXDTO.AdditionalInfo.Свойство("СведенияОбОтветственныхЗаПродажу") Тогда
			Продавцы = ДанныеXDTO.AdditionalInfo.СведенияОбОтветственныхЗаПродажу;
		КонецЕсли;
		Если ДанныеXDTO.AdditionalInfo.Свойство("ОплатыПлатежнымиСистемами") Тогда
			ОплатыПлатежнымиСистемами = ДанныеXDTO.AdditionalInfo.ОплатыПлатежнымиСистемами;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("AdditionalInfo")
		И ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		
		Если ТипЗнч(ДанныеXDTO.AdditionalInfo) = Тип("Структура")
			И ДанныеXDTO.AdditionalInfo.Свойство("Основание") Тогда
			
			Основание = ДанныеXDTO.AdditionalInfo.Основание;
			
			Если Основание.Свойство("Ссылка")
				И ЗначениеЗаполнено(Основание.Ссылка) Тогда
				
				Если ОбщегоНазначения.СсылкаСуществует(Основание.Ссылка) Тогда
					ПолученныеДанные.ЧекККМПродажа = Основание.Ссылка;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = ВидОперации;
	
	РеквизитыМагазина = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПолученныеДанные.Магазин, "СкладПродажи");
	
	ОплатаПлатежнымиКартамиПС 	= 0;
	ОплатаПлатежнымиКартами 	= 0;
	ОплатаСертификатами			= 0;
	ВстречноеПредставление		= 0;
	
	#Область ДополнительныеРеквизиты
	Если ДанныеXDTO.Свойство("ДополнительныеРеквизиты") И ЗначениеЗаполнено(ДанныеXDTO.ДополнительныеРеквизиты) Тогда
		Для каждого ЭлементКоллекции Из ДанныеXDTO.ДополнительныеРеквизиты Цикл
			ДополнительныйРеквизит = ЭлементКоллекции.Свойство;
			ЗначениеДополнительногоРеквизита = ЭлементКоллекции.ЗначениеСвойства;
			Если ДополнительныйРеквизит.Свойство("Наименование")
				И НРЕГ(СокрЛП(ДополнительныйРеквизит.Наименование)) = "идентификатордисконтнойкарты"
				И НЕ (ЗначениеДополнительногоРеквизита = Неопределено) Тогда
					ИдентификаторДисконтнойКарты = Новый УникальныйИдентификатор(ЗначениеДополнительногоРеквизита);
					СсылкаДК = Справочники.ИнформационныеКарты.ПолучитьСсылку(ИдентификаторДисконтнойКарты);
					Если ОбщегоНазначения.СсылкаСуществует(СсылкаДК) Тогда
						ПолученныеДанные.ДисконтнаяКарта = СсылкаДК;
					КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	#КонецОбласти
	
	Если ЗначениеЗаполнено(ПолученныеДанные.ДисконтнаяКарта) Тогда
		ВладелецДК = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПолученныеДанные.ДисконтнаяКарта, "ВладелецКарты");
		Если ЗначениеЗаполнено(ВладелецДК) Тогда
			ПолученныеДанные.ВладелецДисконтнойКарты = ВладелецДК;
		КонецЕсли;
	КонецЕсли;
	
	#Область ТоварыИУслуги
	МассивСтрокТовары 	= Новый Массив;
	МассивСтрокСерии 	= Новый Массив;
	МассивСтрокМарки 	= Новый Массив;
	МассивСтрокСерийныеНомера = Новый Массив;
	
	КлючСвязи = 0;
	
	ИмяТабличнойЧастиТовары = ?(ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа,
		"ТоварыПродажа", "ТоварыВозвратПродажи");
	
	ТабличнаяЧастьТовары = Неопределено;
	Если ДанныеXDTO.Свойство(ИмяТабличнойЧастиТовары, ТабличнаяЧастьТовары)
		И ЗначениеЗаполнено(ТабличнаяЧастьТовары) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", 			"Номенклатура");
		ПравилаЗаполнения.Вставить("Характеристика", 		"Характеристика");
		ПравилаЗаполнения.Вставить("Упаковка", 				"Упаковка");
		ПравилаЗаполнения.Вставить("Серия",             	"Серия");
		ПравилаЗаполнения.Вставить("Количество",   			"Количество");
		ПравилаЗаполнения.Вставить("Сумма",        			"Сумма");
		ПравилаЗаполнения.Вставить("Цена",         			"Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС",    			"СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС",     			"СуммаНДС");
		ПравилаЗаполнения.Вставить("ИдентификаторСтроки", 	"ИдентификаторСтроки");
	
		Для Каждого Строка Из ТабличнаяЧастьТовары Цикл
			КлючСвязи = КлючСвязи + 1;
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			Если СтруктураДанныхСтроки.Свойство("Упаковка")
				И СтруктураДанныхСтроки.Упаковка.Свойство("Коэффициент") Тогда
				Коэффициент = СтруктураДанныхСтроки.Упаковка.Коэффициент;
			Иначе 
				Коэффициент = 1;
			КонецЕсли;
			
			СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество / Коэффициент);
			СтруктураДанныхСтроки.Вставить("Склад", РеквизитыМагазина.СкладПродажи);
	
			Если ЗначениеЗаполнено(Продавцы) Тогда
				ПродавецСсылка = Продавцы.Получить(Строка.НомерСтрокиДокумента);
				Если ПродавецСсылка <> Неопределено
					И ОбщегоНазначения.СсылкаСуществует(ПродавецСсылка) Тогда
					СтруктураДанныхСтроки.Вставить("Продавец", ПродавецСсылка);
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ СтруктураДанныхСтроки.Свойство("СтавкаНДС") Тогда
				СтруктураДанныхСтроки.Вставить("СтавкаНДС", ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС"));
			КонецЕсли;
			
			#Область АкцизныеМарки
			//В области заполняется только КлючСвязи
			Если ДанныеXDTO.Свойство("АкцизныеМарки")
				И ЗначениеЗаполнено(ДанныеXDTO.АкцизныеМарки) Тогда
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("ИдентификаторСтроки", Строка.ИдентификаторСтроки);
				
				НайденныеСтроки = ДанныеXDTO.АкцизныеМарки.НайтиСтроки(ПараметрыОтбора);
				Если НайденныеСтроки.Количество() > 0 Тогда
					
					СтруктураДанныхСтроки.Вставить("КлючСвязи", КлючСвязи);
					
					Для Каждого СтрокаАкцизныеМарки Из НайденныеСтроки Цикл
						СтрокаАкцизныеМарки.ИдентификаторСтроки = КлючСвязи;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			#КонецОбласти
	
			#Область Серии			
			Если ЗначениеЗаполнено(Строка.Серия) Тогда
				СтруктураДанныхСтроки.Вставить("СтатусУказанияСерий", 2);
			
				Номенклатура = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
				КомпонентыОбмена,
				Строка.Номенклатура,
				ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_Номенклатура_Получение"), 
				"ПолучитьСсылку").Ссылка;
				
				Если ОбщегоНазначения.СсылкаСуществует(Номенклатура) Тогда
					СерияСтруктура = Новый Структура("Наименование, СерийныйНомер");			
					ЗаполнитьЗначенияСвойств(СерияСтруктура, Строка.Серия);
					СерияСтруктура.Вставить("ВидНоменклатуры", Номенклатура.ВидНоменклатуры);
	
					ИмяПКО = "Справочник_СерииНоменклатуры_ИзСтруктуры";
					Инструкция = Новый Структура("Значение, ИмяПКО", СерияСтруктура, ИмяПКО);
				Иначе
					ИмяПКО = "Справочник_СерииНоменклатуры";
					Инструкция = Новый Структура("Значение, ИмяПКО", Строка.Серия, ИмяПКО);
				КонецЕсли;
				
				СтруктураДанныхСтроки.Вставить("Серия", Инструкция);
	
				МассивСтрокСерии.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
			#КонецОбласти
			
			#Область СкидкиБонусы
			Если ДанныеXDTO.Свойство("СкидкиНаценки")
				И ЗначениеЗаполнено(ДанныеXDTO.СкидкиНаценки) Тогда
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("ИдентификаторСтроки", Строка.ИдентификаторСтроки);
				
				НайденныеСтроки = ДанныеXDTO.СкидкиНаценки.НайтиСтроки(ПараметрыОтбора);
				Если НайденныеСтроки.Количество() > 0 Тогда
					Для каждого СтрокаСкидкиНаценки Из НайденныеСтроки Цикл
						Если СтрокаСкидкиНаценки.ВидСкидки.Значение = "Бонус" Тогда
							СтруктураДанныхСтроки.Вставить("СуммаСкидкиОплатыБонусом", СтрокаСкидкиНаценки.СуммаСкидки);
						ИначеЕсли СтрокаСкидкиНаценки.ВидСкидки.Значение = "Дисконтная" Тогда
							СтруктураДанныхСтроки.Вставить("ПроцентАвтоматическойСкидки", СтрокаСкидкиНаценки.ПроцентСкидки);
							СтруктураДанныхСтроки.Вставить("СуммаАвтоматическойСкидки", СтрокаСкидкиНаценки.СуммаСкидки);
						ИначеЕсли СтрокаСкидкиНаценки.ВидСкидки.Значение = "НаТовар" Тогда
							СтруктураДанныхСтроки.Вставить("ПроцентРучнойСкидки", СтрокаСкидкиНаценки.ПроцентСкидки);
							СтруктураДанныхСтроки.Вставить("СуммаРучнойСкидки", СтрокаСкидкиНаценки.СуммаСкидки);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			#КонецОбласти
			
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	#Область Услуги
	Если ДанныеXDTO.Свойство("Услуги")
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
			// Услуги добавляются в ТЧ Товары
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
	
			Если ЗначениеЗаполнено(Продавцы) Тогда
				ПродавецСсылка = Продавцы.Получить(Строка.НомерСтрокиДокумента);
				Если ПродавецСсылка <> Неопределено
					И ОбщегоНазначения.СсылкаСуществует(ПродавецСсылка) Тогда
					СтруктураДанныхСтроки.Вставить("Продавец", ПродавецСсылка);
				КонецЕсли;
			КонецЕсли;
						
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	#КонецОбласти
	
	#Область ПодарочныеСертификаты
	Если ДанныеXDTO.Свойство("ПодарочныеСертификаты")
		И ЗначениеЗаполнено(ДанныеXDTO.ПодарочныеСертификаты) Тогда
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		
		Для Каждого Строка Из ДанныеXDTO.ПодарочныеСертификаты Цикл
			// ПодарочныеСертификаты добавляются в ТЧ Товары
			КлючСвязи = КлючСвязи + 1;
	
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			Если СтруктураДанныхСтроки.Сумма < 0 Тогда
				СтруктураДанныхСтроки.Сумма = - СтруктураДанныхСтроки.Сумма;
			КонецЕсли;
	
			СтруктураДанныхСтроки.Вставить("Количество", 1);
			СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
			СтруктураДанныхСтроки.Вставить("Цена", СтруктураДанныхСтроки.Сумма);
	   		СтруктураДанныхСтроки.Вставить("Склад", РеквизитыМагазина.СкладПродажи);
	
			Инструкция = Новый Структура;
			Инструкция.Вставить("Значение", Строка.ВидПодарочногоСертификата);
			Инструкция.Вставить("ИмяПКО", "Справочник_ВидыПодарочныхСертификатов_Получение");
			
			СтруктураДанныхСтроки.Вставить("Номенклатура", Инструкция);
			
			Если ЗначениеЗаполнено(Продавцы) Тогда
				ПродавецСсылка = Продавцы.Получить(Строка.ИдентификаторСтроки);
				Если ПродавецСсылка <> Неопределено
					И ОбщегоНазначения.СсылкаСуществует(ПродавецСсылка) Тогда
					СтруктураДанныхСтроки.Вставить("Продавец", ПродавецСсылка);
				КонецЕсли;
			КонецЕсли;
	
			#Область СерийныеНомера			
			Если ЗначениеЗаполнено(Строка.СерийныйНомер) Тогда
				
				ПС = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
				КомпонентыОбмена,
				Строка.ВидПодарочногоСертификата,
				ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_ВидыПодарочныхСертификатов_Получение"), 
				"ПолучитьСсылку").Ссылка;
				
				Если ОбщегоНазначения.СсылкаСуществует(ПС) Тогда
					
					СтруктураДанныхСтроки.Вставить("КлючСвязи", КлючСвязи);
					СтруктураДанныхСтроки.Вставить("КлючСвязиСерийныхНомеров", КлючСвязи);
	               
	                СтавкаНДСПС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПС, "СтавкаНДС");
					СтруктураДанныхСтроки.Вставить("СтавкаНДС", СтавкаНДСПС);
					СтруктураДанныхСтроки.Вставить("СуммаНДС",  ОбработкаТабличнойЧастиТоварыКлиентСервер.СуммаНДС(СтруктураДанныхСтроки.Сумма,
																СтавкаНДСПС,
																Истина));
	
					СерийныйНомерСсылка = Справочники.СерийныеНомера.НайтиПоНаименованию(Строка.СерийныйНомер,Истина,,ПС);
					
					СтруктураДанныхСтрокиСерийныеНомера = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
						
					СтруктураДанныхСтрокиСерийныеНомера.Вставить("КлючСвязиСерийныхНомеров", КлючСвязи);
					СтруктураДанныхСтрокиСерийныеНомера.Вставить("СерийныйНомер", СерийныйНомерСсылка);
					
					МассивСтрокСерийныеНомера.Добавить(СтруктураДанныхСтрокиСерийныеНомера);
				КонецЕсли;
	
			КонецЕсли;
			#КонецОбласти
	
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	#КонецОбласти
	
	// Штрихкоды упаковок.
	ЗагрузитьШтрихкодыУпаковок(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена, "АкцизныеМарки", "АкцизнаяМарка");
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
	
	Если МассивСтрокСерии.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Серии", МассивСтрокСерии);
	КонецЕсли;
	
	Если МассивСтрокСерийныеНомера.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("СерийныеНомера", МассивСтрокСерийныеНомера);
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Оплата
	МассивСтрокОплата = Новый Массив;
	МассивСтрокПогашениеПС = Новый Массив;
	
	ЕстьЭСНСПК = Ложь;
	Если ЗначениеЗаполнено(ОплатыПлатежнымиСистемами) Тогда
		Для каждого Элемент Из ОплатыПлатежнымиСистемами Цикл 
			Если Элемент.Значение.ТипПлатежнойСистемы = "СертификатНСПК" Тогда
				ЕстьЭСНСПК = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;		
	
	Если ДанныеXDTO.Свойство("ОплатаПлатежнымиКартами")
		И ЗначениеЗаполнено(ДанныеXDTO.ОплатаПлатежнымиКартами) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.ОплатаПлатежнымиКартами Цикл
			
			СтруктураДанныхСтроки = Новый Структура;
			СтруктураДанныхСтроки.Вставить("Сумма", Строка.СуммаОплаты);
			СтруктураДанныхСтроки.Вставить("ДанныеПереданыВБанк", Истина);
			
			ОплатаПлатежнойСистемой = Неопределено;
			Если ЗначениеЗаполнено(ОплатыПлатежнымиСистемами) Тогда
				ОплатаПлатежнойСистемой = ОплатыПлатежнымиСистемами.Получить(Строка.ИдентификаторСтроки);
			КонецЕсли;
			
			Если ОплатаПлатежнойСистемой <> Неопределено Тогда
				ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ПлатежнаяСистема;
	
				СтруктураДанныхСтроки.Вставить("ИдентификаторПлатежнойСистемы",
					ОплатаПлатежнойСистемой.ИдентификаторПлатежнойСистемы);
				СтруктураДанныхСтроки.Вставить("СсылочныйНомер", ОплатаПлатежнойСистемой.ИдентификаторОплаты);
				СтруктураДанныхСтроки.Вставить("ВидОплаты", 
					ВидОплатыПоТипуОплат(ТипОплаты, ОплатаПлатежнойСистемой.ТипПлатежнойСистемы));
			Иначе
				ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта;
				СтруктураДанныхСтроки.Вставить("ВидОплаты", ВидОплатыПоТипуОплат(ТипОплаты, ?(ЕстьЭСНСПК,"СертификатНСПК","")));
			КонецЕсли;
		
			Инструкция = Новый Структура;
			Инструкция.Вставить("Значение", Справочники.ЭквайринговыеТерминалы.ПустаяСсылка());
			Инструкция.Вставить("ИмяПКО", "Справочник_ЭквайринговыеТерминалы_Получение");
			
			СтруктураДанныхСтроки.Вставить("ЭквайринговыйТерминал", Инструкция);
			
			МассивСтрокОплата.Добавить(СтруктураДанныхСтроки);
		
		КонецЦикла;
		ОплатаПлатежнымиКартами = ДанныеXDTO.ОплатаПлатежнымиКартами.Итог("СуммаОплаты");
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("ОплатаПлатежнымиКартамиПодарочныхСертификатов")
		И ЗначениеЗаполнено(ДанныеXDTO.ОплатаПлатежнымиКартамиПодарочныхСертификатов) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.ОплатаПлатежнымиКартамиПодарочныхСертификатов Цикл
			
			СтруктураДанныхСтроки = Новый Структура;
			СтруктураДанныхСтроки.Вставить("Сумма", Строка.СуммаОплаты);
			
			ОплатаПлатежнойСистемой = Неопределено;
			Если ЗначениеЗаполнено(ОплатыПлатежнымиСистемами) Тогда
				ОплатаПлатежнойСистемой = ОплатыПлатежнымиСистемами.Получить(Строка.ИдентификаторСтроки);
			КонецЕсли;
	
			Если ОплатаПлатежнойСистемой <> Неопределено Тогда
				ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ПлатежнаяСистема;
				
				СтруктураДанныхСтроки.Вставить("ИдентификаторПлатежнойСистемы",
					ОплатаПлатежнойСистемой.ИдентификаторПлатежнойСистемы);
				СтруктураДанныхСтроки.Вставить("СсылочныйНомер", ОплатаПлатежнойСистемой.ИдентификаторОплаты);
				СтруктураДанныхСтроки.Вставить("ВидОплаты", 
					ВидОплатыПоТипуОплат(ТипОплаты, ОплатаПлатежнойСистемой.ТипПлатежнойСистемы));
			Иначе
				ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта;
				СтруктураДанныхСтроки.Вставить("ВидОплаты", ВидОплатыПоТипуОплат(ТипОплаты, ?(ЕстьЭСНСПК,"СертификатНСПК","")));
			КонецЕсли;
	
			Инструкция = Новый Структура;
			Инструкция.Вставить("ИмяПКО", "Справочник_ЭквайринговыеТерминалы_Получение");
			Инструкция.Вставить("Значение", ?(Строка.ЭквайринговыйТерминал = Неопределено,
				Справочники.ЭквайринговыеТерминалы.ПустаяСсылка(), Строка.ЭквайринговыйТерминал));
			
			СтруктураДанныхСтроки.Вставить("ЭквайринговыйТерминал", Инструкция);
			
			МассивСтрокОплата.Добавить(СтруктураДанныхСтроки);
		
		КонецЦикла;
		ОплатаПлатежнымиКартамиПС = ДанныеXDTO.ОплатаПлатежнымиКартамиПодарочныхСертификатов.Итог("СуммаОплаты");
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("ОплатаСертификатами")
		И ЗначениеЗаполнено(ДанныеXDTO.ОплатаСертификатами) Тогда
		
		ВидОплатыПС = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом");
		
		Для Каждого Строка Из ДанныеXDTO.ОплатаСертификатами Цикл
			
			СтруктураДанныхСтроки = Новый Структура;
			
			Если ЗначениеЗаполнено(Строка.СерийныйНомер) Тогда
				
				ПС = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
				КомпонентыОбмена,
				Строка.ВидПодарочногоСертификата,
				ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_ВидыПодарочныхСертификатов_Получение"), 
				"ПолучитьСсылку").Ссылка;
				
				Если ОбщегоНазначения.СсылкаСуществует(ПС) Тогда
					СерийныйНомерСсылка = Справочники.СерийныеНомера.НайтиПоНаименованию(Строка.СерийныйНомер,Истина,,ПС);
						
					СтруктураДанныхСтроки.Вставить("СерийныйНомер", СерийныйНомерСсылка);
				КонецЕсли;
			КонецЕсли;
					
			Инструкция = Новый Структура;
			Инструкция.Вставить("Значение", Строка.ВидПодарочногоСертификата);
			Инструкция.Вставить("ИмяПКО", "Справочник_ВидыПодарочныхСертификатов_Получение");
			
			СтруктураДанныхСтроки.Вставить("ПодарочныйСертификат", Инструкция);
			СтруктураДанныхСтроки.Вставить("СуммаПогашенияСертификата", Строка.Сумма);
			
			МассивСтрокПогашениеПС.Добавить(СтруктураДанныхСтроки);
	
			СтруктураДанныхСтрокиОплатаСертификатами = Новый Структура;
			СтруктураДанныхСтрокиОплатаСертификатами.Вставить("ВидОплаты", ВидОплатыПС);
			СтруктураДанныхСтрокиОплатаСертификатами.Вставить("Сумма", Строка.Сумма);
			
			МассивСтрокОплата.Добавить(СтруктураДанныхСтрокиОплатаСертификатами);
		КонецЦикла;
		ОплатаСертификатами = ДанныеXDTO.ОплатаСертификатами.Итог("Сумма");
	КонецЕсли;
	
	//ВстречноеПредоставление
	Если ДанныеXDTO.Свойство("ОплатыККМ")
		И ЗначениеЗаполнено(ДанныеXDTO.ОплатыККМ) Тогда
	
		Для Каждого Строка Из ДанныеXDTO.ОплатыККМ Цикл
			Если ЗначениеЗаполнено(Строка.ТипОплаты)
				И Строка.ТипОплаты.Значение = "ВстречноеПредставление"
				И Строка.Сумма > 0 Тогда
				ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ВстречноеПредоставление;
				
				СтруктураДанныхСтроки = Новый Структура;
				СтруктураДанныхСтроки.Вставить("Сумма", Строка.Сумма);
				СтруктураДанныхСтроки.Вставить("ВидОплаты", ВидОплатыПоТипуОплат(ТипОплаты));
				ВстречноеПредставление = Строка.Сумма;
	
				МассивСтрокОплата.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	
	//Сумма оплаты наличных
	СуммаОплатыНаличных = ПолученныеДанные.СуммаДокумента
		- ОплатаПлатежнымиКартами
		- ОплатаПлатежнымиКартамиПС
		- ОплатаСертификатами
		- ВстречноеПредставление;
	
	Если СуммаОплатыНаличных > 0 Тогда
		СтруктураДанныхСтрокиНаличные = Новый Структура;
		СтруктураДанныхСтрокиНаличные.Вставить("ВидОплаты", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОплатЧекаККМ.Наличные"));
		СтруктураДанныхСтрокиНаличные.Вставить("Сумма", СуммаОплатыНаличных);
		
		МассивСтрокОплата.Добавить(СтруктураДанныхСтрокиНаличные);
	КонецЕсли;
	
	Если МассивСтрокОплата.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Оплата", МассивСтрокОплата);	
	КонецЕсли;
	
	Если МассивСтрокПогашениеПС.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ПогашениеПодарочныхСертификатов", МассивСтрокПогашениеПС);	
	КонецЕсли;
	#КонецОбласти
КонецПроцедуры
Процедура ПКО_Документ_ЧекККМ_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ТоварнаяГруппа = Неопределено;
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Контрагент) Тогда
		ПолученныеДанные.Контрагент = КомпонентыОбмена.ПараметрыКонвертации.КонтрагентРозничныйПокупатель;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.АналитикаХозяйственнойОперации) Тогда
		ПолученныеДанные.АналитикаХозяйственнойОперации = Справочники.АналитикаХозяйственныхОпераций.РеализацияТоваров;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Ответственный) Тогда
		ПолученныеДанные.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	//Оплаты
	ОплатыБонусами = ПолученныеДанные.Товары.Итог("СуммаСкидкиОплатыБонусом");
	Если ОплатыБонусами <> 0 Тогда
		СтрокаОплатыБонусом = ПолученныеДанные.Оплата.Добавить();
		СтрокаОплатыБонусом.ВидОплаты = ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.ОплатаБонусамиКакСкидкой");
		СтрокаОплатыБонусом.СуммаБонусовВСкидках = ОплатыБонусами;
	КонецЕсли;
	
	Если ДанныеИБ <> Неопределено
		И ЗначениеЗаполнено(ДанныеИБ.ОтчетОРозничныхПродажах) Тогда
		//Чек уже загружен в ИБ, смена закрыта, ОРП сформирован. Изменение не возможно.
		ДанныеИБ = Неопределено;
		ПолученныеДанные = Неопределено;
	Иначе
		ПараметрыСмены = Новый Структура("КассаККМ, НомерСменыККТ, ДатаЧека",
			ПолученныеДанные.КассаККМ, ПолученныеДанные.НомерСменыККМ, ПолученныеДанные.Дата);
		
		ОтчетОРозничныхПродажах = НайтиОРППоНомеруКассовойСмены(ПараметрыСмены);
		
		Если Не ОтчетОРозничныхПродажах.Пустая() Тогда
			ПолученныеДанные.ОтчетОРозничныхПродажах = ОтчетОРозничныхПродажах;
		КонецЕсли;
		
		Если ПолученныеДанные.Товары.Количество() > 0 ТОгда
			ТоварнаяГруппа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПолученныеДанные.Товары[0].Номенклатура, "ТоварнаяГруппа");
		КонецЕсли;
		ПолученныеДанные.СистемаНалогообложения = ПодключаемоеОборудованиеРТ.ПолучитьСистемуНалогообложения(,ПолученныеДанные.Организация,
																										ПолученныеДанные.Магазин,,ТоварнаяГруппа);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_БанковскиеСчета_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Владелец = ДанныеXDTO.КлючевыеСвойства.Владелец;
	Если ЗначениеЗаполнено(Владелец) Тогда
		Если Владелец.ТипЗначения = "Организация" Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Владелец", Новый Структура("Значение, ИмяПКО", Владелец, "Справочник_Организации_Получение"));
		ИначеЕсли Владелец.ТипЗначения = "Контрагент" Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Владелец", Новый Структура("Значение, ИмяПКО", Владелец, "Справочник_Контрагенты_Получение"));
		ИначеЕсли Владелец.ТипЗначения = "ФизическоеЛицо" Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Владелец", Новый Структура("Значение, ИмяПКО", Владелец, "Справочник_ФизическиеЛица_Получение"));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ВидыАлкогольнойПродукции_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если НЕ ДанныеXDTO.КлючевыеСвойства.Свойство("Код") Тогда
		ПолученныеДанные.Код = "0";
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ДисконтныеКарты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ВладелецКарты = ДанныеXDTO.КлючевыеСвойства.ВладелецКарты;
	Если ЗначениеЗаполнено(ВладелецКарты) Тогда
		ТипВладельца = ВладелецКарты.ТипЗначения;
		ИмяПКО = "";
		Если Найти(ТипВладельца, "Контрагент") > 0 Тогда
			ИмяПКО = "Справочник_Контрагенты_Получение";
		ИначеЕсли Найти(ТипВладельца, "ФизическоеЛицо") > 0 Тогда
			ИмяПКО = "Справочник_ФизическиеЛица_Получение";
		ИначеЕсли Найти(ТипВладельца, "Пользователи") > 0 Тогда
			ИмяПКО = "Справочник_Пользователи_Получение";
		КонецЕсли;
		Если ЗначениеЗаполнено(ИмяПКО) Тогда
			ВладелецКарты = Новый Структура("Значение, ИмяПКО", ВладелецКарты, ИмяПКО);
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ВладелецКарты", ВладелецКарты);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ДисконтныеКарты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПолученныеДанные = Неопределено;
КонецПроцедуры
Процедура ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ПризнакАгента = Перечисления.ПризнакиАгента.Комиссионер;
	ПолученныеДанные.ТипДоговора = Перечисления.ТипыДоговоровПлатежныхАгентов.Прямой;
	
	Если ДанныеXDTO.КлючевыеСвойства.Контрагент.Свойство("ИНН") Тогда
		ПолученныеДанные.ИННПоставщикаУслуг = ДанныеXDTO.КлючевыеСвойства.Контрагент.ИНН;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_КассыККМ_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено
		И ЗначениеЗаполнено(ДанныеИБ.ТипКассы) Тогда
		ДанныеИБ = Неопределено;
		ПолученныеДанные = Неопределено;
	Иначе
		ПолученныеДанные.ТипКассы = Перечисления.ТипыКассККМ.ККМED;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	// ФизЛицо.
	Если ДанныеXDTO.Свойство("ФизическоеЛицо") Тогда
		ФизическоеЛицо = ДанныеXDTO.ФизическоеЛицо;
		ИмяПКО = "Справочник_ФизическиеЛица_Получение";
		ПолученныеДанные.ДополнительныеСвойства.Вставить(
			"ФизЛицо", Новый Структура("Значение, ИмяПКО", ФизическоеЛицо, ИмяПКО));
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("КодТНВЭД") И ЗначениеЗаполнено(ДанныеXDTO.КодТНВЭД) Тогда
	    Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.10") Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("КодТНВЭД",
				Новый Структура("Значение, ИмяПКО", ДанныеXDTO.КодТНВЭД, "Справочник_КлассификаторТНВЭД_ЭлементСправочника"));
		Иначе
			ПолученныеДанные.ДополнительныеСвойства.Вставить("КодТНВЭД",
				Новый Структура("Значение, ИмяПКО", ДанныеXDTO.КодТНВЭД, "Справочник_КлассификаторТНВЭД"));
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если Не ЗначениеЗаполнено(ПолученныеДанные.СтавкаНДС) Тогда
		ПолученныеДанные.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ПолученныеДанные.ОсобенностьУчета) Тогда
		ПолученныеДанные.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.БезОсобенностейУчета;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_НоменклатураПрисоединенныеФайлы_Получ_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ВладелецФайла = ДанныеXDTO.КлючевыеСвойства.ВладелецФайла;
	Если ЗначениеЗаполнено(ВладелецФайла) Тогда
		Если Найти(ВладелецФайла.ТипЗначения, "Номенклатура") > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ВладелецФайла", Новый Структура("Значение, ИмяПКО", ВладелецФайла, "Справочник_Номенклатура_Получение"));
		КонецЕсли;
	КонецЕсли;
	
	ПолученныеДанные.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ДвоичныеДанныеФайла", ДанныеXDTO.ХранимыйФайл);
КонецПроцедуры
Процедура ПКО_Справочник_НомераГТД_ПолучениеЭлемента_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Реквизиты = Справочники.НомераГТД.РегистрационныйНомерИСтранаВвоза(ПолученныеДанные.Код);
	ПолученныеДанные.РегистрационныйНомерДекларации = Реквизиты.РегистрационныйНомер;
	ПолученныеДанные.ПорядковыйНомерТовара = Реквизиты.ПорядковыйНомерТовара;
КонецПроцедуры
Процедура ПКО_Справочник_НомерГТД_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Код = ДанныеXDTO.КлючевыеСвойства.Код;
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("СтранаПроисхождения") Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("СтранаПроисхождения",
			ДанныеXDTO.КлючевыеСвойства.СтранаПроисхождения);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_НомерГТД_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Реквизиты = Справочники.НомераГТД.РегистрационныйНомерИСтранаВвоза(ПолученныеДанные.Код);
	ПолученныеДанные.РегистрационныйНомерДекларации = Реквизиты.РегистрационныйНомер;
	ПолученныеДанные.СтранаВвозаНеРФ = Реквизиты.СтранаВвозаНеРФ;
	ПолученныеДанные.ПорядковыйНомерТовара = Реквизиты.ПорядковыйНомерТовара;
КонецПроцедуры
Процедура ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено И ЗначениеЗаполнено(ДанныеИБ.СпособОценкиТоваровВРознице) Тогда
		ПолученныеДанные.СпособОценкиТоваровВРознице = ДанныеИБ.СпособОценкиТоваровВРознице;
	Иначе
		ПолученныеДанные.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоСтоимостиПриобретения;
	КонецЕсли;
	
	Если ПолученныеДанные.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		ПолученныеДанные.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель;
	КонецЕсли;
	
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации()
		И ДанныеИБ = Неопределено Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации");
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ШаблонСообщения = НСтр("ru = 'Ограничение базовой версии. В информационной базе может быть введена только одна организация.
				|Рекомендуется сопоставление данных.
				|Организация в базе данных: %1
				|Загружаемая организация: %2'");
			
			ТекстОшибки = СтрШаблон(ШаблонСообщения,
				Выборка.Ссылка.Наименование,
				ПолученныеДанные.Наименование);
			
			КомпонентыОбмена.СостояниеОбменаДанными.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
			ОбменДаннымиXDTOСервер.ЗаписатьВПротоколВыполнения(
				КомпонентыОбмена, ТекстОшибки);
				
			ПолученныеДанные = Неопределено;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_СерииНоменклатуры_ИзСтруктуры_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Наименование = ДанныеXDTO.КлючевыеСвойства.Наименование;
	ПолученныеДанные.Номер = ДанныеXDTO.КлючевыеСвойства.СерийныйНомер;
	
	// ВидНоменклатуры
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("ВидНоменклатуры") Тогда
		
		ВидНоменклатуры = ДанныеXDTO.КлючевыеСвойства.ВидНоменклатуры;
		ИмяПКО = "Справочник_ВидыНоменклатуры";
		ПолученныеДанные.ДополнительныеСвойства.Вставить(
			"ВидНоменклатуры", Новый Структура("Значение,ИмяПКО", ВидНоменклатуры, ИмяПКО));
		ПолученныеДанные.ДополнительныеСвойства.Вставить(
			"ВладелецСерии", Новый Структура("Значение,ИмяПКО", ВидНоменклатуры, ИмяПКО));
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_Склады_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.КлючевыеСвойства.ТипСклада.Значение = "Розничный"
		ИЛИ ДанныеXDTO.КлючевыеСвойства.ТипСклада.Значение = "НеавтоматизированнаяТорговаяТочка" Тогда
		ПолученныеДанные.СкладУправляющейСистемы = Ложь;
	Иначе
		ПолученныеДанные.СкладУправляющейСистемы = Истина;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_СостоянияЭД_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ТипЗначенияСвойства = ДанныеXDTO.КлючевыеСвойства.ОснованиеЭлектронногоДокумента.Ссылка.ТипЗначенияXDTO;
	СтрокиПКО = КомпонентыОбмена.ПравилаКонвертацииОбъектов.НайтиСтроки(Новый Структура("ТипСсылкиXDTO", ТипЗначенияСвойства));
	
	Для Каждого СтрокаПКО Из СтрокиПКО Цикл
		ИнструкцияСсылкаНаОбъект = Новый Структура("Значение, ИмяПКО", ДанныеXDTO.КлючевыеСвойства.ОснованиеЭлектронногоДокумента, СтрокаПКО.ИмяПКО);
		Прервать;
	КонецЦикла;
	
	ПКОСсылки = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИнструкцияСсылкаНаОбъект.ИмяПКО);
			
	СтрокаПКПД = КомпонентыОбмена.ПравилаКонвертацииПредопределенныхДанных.Найти("ТипыСостоянийЭлектронногоДокумента", "ИмяПКПД");
	СоответствиеПКПД = СтрокаПКПД.КонвертацииЗначенийПриПолучении;
	
	СостояниеЭДО = СоответствиеПКПД[ДанныеXDTO.СостояниеЭлектронногоДокумента.Значение];
	
	Если СостояниеЭДО <> Неопределено Тогда
		ПолученныеДанные.Отбор.СсылкаНаОбъект.Значение = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
			КомпонентыОбмена, 
			ИнструкцияСсылкаНаОбъект.Значение, 
			ПКОСсылки, 
			"ПолучитьСсылку").Ссылка;
		ПолученныеДанные.Отбор.СсылкаНаОбъект.Использование = Истина;
		
		ПолученныеДанные.Прочитать();
		
		ТаблицаЗаписи = ПолученныеДанные.Выгрузить();
		Если ТаблицаЗаписи.Количество() > 0 Тогда
			СтрокаЗаписи = ТаблицаЗаписи[0];
		Иначе
			СтрокаЗаписи = ТаблицаЗаписи.Добавить();
		КонецЕсли;
		
		
		СтрокаЗаписи.СсылкаНаОбъект = ПолученныеДанные.Отбор.СсылкаНаОбъект.Значение;
		СтрокаЗаписи.СостояниеЭДО = СостояниеЭДО;
		
		ПолученныеДанные.Загрузить(ТаблицаЗаписи);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ТипыЦен_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	// Если идентификатор, сформированный по наименованию, занят, устанавливается автосгенерированный.
	ПолученныеДанные.Идентификатор = ПолучитьИдентификаторТипЦены(ПолученныеДанные.Наименование);
	Запрос = Новый Запрос();
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	1 КАК Поле1
		|ИЗ
		|	Справочник.ВидыЦен КАК ВидыЦен
		|ГДЕ
		|	ВидыЦен.Идентификатор = &Идентификатор";
	Запрос.УстановитьПараметр("Идентификатор", ПолученныеДанные.Идентификатор);
	Если Не Запрос.Выполнить().Пустой() Тогда
		ПолученныеДанные.Идентификатор = Строка(Новый УникальныйИдентификатор());
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ТипыЦен_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено И ЗначениеЗаполнено(ДанныеИБ.Идентификатор) Тогда
		ПолученныеДанные.Идентификатор = ДанныеИБ.Идентификатор;
	ИначеЕсли НЕ ЗначениеЗаполнено(ПолученныеДанные.Идентификатор) Тогда
		Разделители	=  " .,+,-,/,*,?,=,<,>,(,)%!@#$%&*""№:;{}[]?()\|/`~'^_";
		Идентификатор = "";
		БылСпецСимвол = Ложь;
		Для НомСимвола = 1 По СтрДлина(ПолученныеДанные.Наименование) Цикл
			Символ = Сред(ПолученныеДанные.Наименование, НомСимвола, 1);
			Если Найти(Разделители, Символ) <> 0 Тогда
				БылСпецСимвол = Истина;
			ИначеЕсли БылСпецСимвол Тогда
				БылСпецСимвол = Ложь;
				Идентификатор = Идентификатор + ВРег(Символ);
			Иначе
				Идентификатор = Идентификатор + Символ;
			КонецЕсли;
		КонецЦикла;
		ПолученныеДанные.Идентификатор = Идентификатор;
	КонецЕсли;
	Если ДанныеИБ <> Неопределено И ЗначениеЗаполнено(ДанныеИБ.СпособЗаданияЦены) Тогда
		ПолученныеДанные.СпособЗаданияЦены = ДанныеИБ.СпособЗаданияЦены;
	Иначе
		ПолученныеДанные.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗадаватьВручную;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено Тогда
		ДанныеИБ = Неопределено;
		ПолученныеДанные = Неопределено;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ШтрихкодыНоменклатуры_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Штрихкод = ДанныеXDTO.Штрихкод;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Штрихкод", ДанныеXDTO.Штрихкод);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Записи", Неопределено);
	
	Если ДанныеXDTO.Свойство("Записи")
		И ЗначениеЗаполнено(ДанныеXDTO.Записи) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Записи", ДанныеXDTO.Записи);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ШтрихкодыНоменклатуры_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Справочник_Номенклатура_Получение = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_Номенклатура_Получение");
	Справочник_ХарактеристикиНоменклатуры = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_ХарактеристикиНоменклатуры");
	Справочник_Упаковки = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_Упаковки");
	
	Для каждого Свойство Из ПолученныеДанные.ДополнительныеСвойства Цикл
		Если Свойство.Ключ = "Записи" Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(Свойство.Значение) Тогда
			ПолученныеДанные.Отбор[Свойство.Ключ].Установить(Свойство.Значение);
		КонецЕсли;
	КонецЦикла;
		
	// Добавление записей в набор записей.		
	Если ПолученныеДанные.ДополнительныеСвойства.Записи <> Неопределено Тогда
		Для Каждого Строка Из ПолученныеДанные.ДополнительныеСвойства.Записи Цикл
			СтрокаЗаписи = ПолученныеДанные.Добавить();
			СтрокаЗаписи.Штрихкод = ПолученныеДанные.ДополнительныеСвойства.Штрихкод;
			
			СтрокаЗаписи.Владелец = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
				Строка.Номенклатура, 
				Справочник_Номенклатура_Получение, 
				"ПолучитьСсылку").Ссылка;
				
			Если ЗначениеЗаполнено(Строка.Характеристика) Тогда
				СтрокаЗаписи.Характеристика = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
					Строка.Характеристика, 
					Справочник_ХарактеристикиНоменклатуры, 
					"ПолучитьСсылку").Ссылка;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.Упаковка) Тогда
				СтрокаЗаписи.Упаковка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
					Строка.Упаковка, 
					Справочник_Упаковки, 
					"ПолучитьСсылку").Ссылка;
			КонецЕсли;
			СтрокаЗаписи.ТипШтрихкода = ПодключаемоеОборудованиеРТ.ТипШтрихкода(ПолученныеДанные.ДополнительныеСвойства.Штрихкод);
		КонецЦикла;
	КонецЕсли;
	
	Если ПолученныеДанные.Количество() > 0 Тогда
		Отбор = Новый Структура("Штрихкод",ПолученныеДанные.ДополнительныеСвойства.Штрихкод);
		ВыборкаЗаписей = РегистрыСведений.Штрихкоды.Выбрать(Отбор);
		Если ВыборкаЗаписей.Следующий() Тогда
			ПолученныеДанные = Неопределено;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ШтрихкодыУпаковокТоваров_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");
	ПравилаЗаполнения.Вставить("Упаковка", "Упаковка");
	ПравилаЗаполнения.Вставить("Серия", "Серия");
	ПравилаЗаполнения.Вставить("Количество", "Количество");
	ПравилаЗаполнения.Вставить("КоличествоУпаковок", "КоличествоУпаковок");
	
	// Вложенные товары. 
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("ВложенныеТовары")
		И ЗначениеЗаполнено(ДанныеXDTO.ВложенныеТовары) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.ВложенныеТовары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			Если НЕ СтруктураДанныхСтроки.Свойство("КоличествоУпаковок")
				И СтруктураДанныхСтроки.Свойство("Количество") Тогда
				СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
			КонецЕсли;
		
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВложенныеТовары", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ШтрихкодыУпаковокТоваровИзСтр_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
КонецПроцедуры
Процедура ПКО_Справочник_ШтрихкодыУпаковокТоваровИзСтр_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если СтрДлина(ПолученныеДанные.ЗначениеШтрихкода) = 150 Тогда
		ПолученныеДанные.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix;
	Иначе
		ПолученныеДанные.ТипШтрихкода = Перечисления.ТипыШтрихкодов.PDF417;
	КонецЕсли;
	
	//Правила используются только для поиска и идентификации существующих АМ среди марок с типом ТипыУпаковок.МаркированныйТовар.
	//Отключаем создание новых АМ.
	ДанныеИБ = Неопределено;
	ПолученныеДанные = Неопределено;
КонецПроцедуры
Процедура ПКО_Справочник_ЭквайринговыеТерминалы_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ИспользоватьБезПодключенияОборудования = Истина;
КонецПроцедуры

#КонецОбласти
#Область ОтправкаИПолучение
Процедура ПКО_Справочник_ВидыНоменклатуры_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("ТипНоменклатуры", ДанныеИБ.ТипНоменклатуры);
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.10") Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("ИспользоватьХарактеристики", ДанныеИБ.ИспользоватьХарактеристики);
		ДанныеXDTO.КлючевыеСвойства.Вставить("ИспользоватьСерии", ДанныеИБ.ИспользоватьСерии);
		ДанныеXDTO.КлючевыеСвойства.Вставить("ИспользоватьСрокГодностиСерии", ДанныеИБ.ИспользоватьСрокГодностиСерии);
	КонецЕсли;
	
	СтруктураДопРеквизитов = Новый Структура;
	СтруктураДопРеквизитов.Вставить("ИспользоватьХарактеристики", ДанныеИБ.ИспользоватьХарактеристики);
	
	ПризнакПредметаРасчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ПризнакПредметаРасчета, "ТипПризнакаПредметаРасчета");
	Если ЗначениеЗаполнено(ПризнакПредметаРасчета) Тогда
		СтруктураДопРеквизитов.Вставить("КодПризнакаПредметаРасчета", ДанныеИБ.ПризнакПредметаРасчета.Код);
	КонецЕсли;
	
	МассивДопРеквизитов = Новый Массив;
	
	Для каждого ЭлементНстроек Из СтруктураДопРеквизитов Цикл
		МассивДопРеквизитов.Добавить(ЭлементНстроек.Ключ);
	КонецЦикла;
	
	ЗаполнитьДополнительныеРеквизиты(СтруктураДопРеквизитов, ДанныеXDTO, МассивДопРеквизитов);
КонецПроцедуры
Процедура ПКО_Справочник_ВидыНоменклатуры_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("ТипНоменклатуры")
		И ЗначениеЗаполнено(ДанныеXDTO.КлючевыеСвойства.ТипНоменклатуры) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ТипНоменклатуры", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.КлючевыеСвойства.ТипНоменклатуры, "ТипыНоменклатуры_Получение"));
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ВидыНоменклатуры_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено Тогда
		
		ДанныеИБ = Неопределено;
		ПолученныеДанные = Неопределено;
	
	Иначе
		ПолученныеДанные.ИспользованиеХарактеристик = Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать;
		ПолученныеДанные.ИспользованиеСерий = Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ДополнительныеРеквизиты_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Заголовок) Тогда
		ПолученныеДанные.Заголовок = ПолученныеДанные.Наименование;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_СерииНоменклатуры_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.Номер) Тогда
		Если СтекВыгрузки.Количество() > 1 Тогда
			ДанныеXDTO.Вставить("СерийныйНомер", ДанныеИБ.Наименование);
		Иначе
			ДанныеXDTO.КлючевыеСвойства.Вставить("СерийныйНомер", ДанныеИБ.Наименование);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.ВладелецСерии) Тогда
		Если ТипЗнч(ДанныеИБ.ВладелецСерии) = Тип("СправочникСсылка.Номенклатура") Тогда
			ДанныеXDTO.КлючевыеСвойства.Вставить("Номенклатура", ДанныеИБ.ВладелецСерии);
		ИначеЕсли ТипЗнч(ДанныеИБ.ВладелецСерии) = Тип("СправочникСсылка.ВидыНоменклатуры") Тогда
			ДанныеXDTO.КлючевыеСвойства.Вставить("ВидНоменклатуры", ДанныеИБ.ВладелецСерии);
		КонецЕсли;
	Иначе
		ДанныеXDTO = Неопределено;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_Упаковки_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Высота",1);
	ДанныеXDTO.Вставить("Глубина",1);
	ДанныеXDTO.Вставить("Ширина",1);
	
	Если Не ЗначениеЗаполнено(ДанныеИБ.Объем) Тогда
		ДанныеXDTO.Вставить("Объем",1);
	КонецЕсли;
	
	Владелец = ДанныеИБ.Владелец;
	Если ЗначениеЗаполнено(Владелец) И ТипЗнч(Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
		Если СтекВыгрузки.Количество() > 1 Тогда
			ДанныеXDTO.Вставить("Номенклатура", Новый Структура("Значение, ИмяПКО", Владелец, "Справочник_Номенклатура_Отправка"));
			Возврат;
		КонецЕсли;
		
		ДанныеXDTO.КлючевыеСвойства.Вставить("Номенклатура", Новый Структура("Значение, ИмяПКО", Владелец, "Справочник_Номенклатура_Отправка"));
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_Упаковки_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("Номенклатура")
		И ЗначениеЗаполнено(ДанныеXDTO.КлючевыеСвойства.Номенклатура) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Владелец", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.КлючевыеСвойства.Номенклатура, "Справочник_Номенклатура_Получение"));
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ХарактеристикиНоменклатуры_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Наименование", 	ДанныеИБ.Наименование);
	ДанныеXDTO.КлючевыеСвойства.Вставить("НаименованиеПолное", 	ДанныеИБ.Наименование);
	
	Если ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("Номенклатура", ДанныеИБ.Владелец);
	ИначеЕсли ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.ВидыНоменклатуры") Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("ВидНоменклатуры", ДанныеИБ.Владелец);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ХарактеристикиНоменклатуры_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ИнструкцияВладелец = Новый Структура;
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("ВидНоменклатуры") Тогда
		ИнструкцияВладелец.Вставить("Значение", ДанныеXDTO.КлючевыеСвойства.ВидНоменклатуры);
		ИнструкцияВладелец.Вставить("ИмяПКО",   "Справочник_ВидыНоменклатуры");
	ИначеЕсли ДанныеXDTO.КлючевыеСвойства.Свойство("Номенклатура") Тогда
		Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Владелец) Тогда
			ИнструкцияВладелец.Вставить("Значение", ДанныеXDTO.КлючевыеСвойства.Номенклатура);
			ИнструкцияВладелец.Вставить("ИмяПКО",   "Справочник_Номенклатура_Получение");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИнструкцияВладелец) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Владелец", ИнструкцияВладелец);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ХарактеристикиНоменклатуры_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено
		И ТипЗнч(ДанныеИБ.Владелец) <> ТипЗнч(ПолученныеДанные.Владелец) Тогда
		ПолученныеДанные.Владелец = ДанныеИБ.Владелец;
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Владелец)
		ИЛИ (НЕ ДанныеИБ = Неопределено И ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.ВидыНоменклатуры")
		И ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.7")) Тогда
		ПолученныеДанные = Неопределено;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецОбласти
#Область Алгоритмы


Функция ВерсияФорматаЧислом(СтрокаВерсии)
	Если Не ЗначениеЗаполнено(СтрокаВерсии) Или СтрокаВерсии = "1.0.beta" Тогда
		Возврат 0;
	КонецЕсли;
	
	ВерсияФорматаЧислом = 0;
	
	РазрядыВерсии = СтрРазделить(СтрокаВерсии, ".");
	
	МножительРазряда = 10000;
	Для ИндексРазрядаОбратный = 0 По 1 Цикл
		ВерсияФорматаЧислом = ВерсияФорматаЧислом + Число(РазрядыВерсии[ИндексРазрядаОбратный])*МножительРазряда;
		МножительРазряда = МножительРазряда / 100;
	КонецЦикла;
	Возврат ВерсияФорматаЧислом;
КонецФункции
Функция ВидОплатыПоТипуОплат(ТипОплаты, ТипПлатежнойСистемы = "")
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТипОплаты", ТипОплаты);
	
	ТекстОтборов = "";
	Если ЗначениеЗаполнено(ТипПлатежнойСистемы) Тогда
		ТекстОтборов = "И ВидыОплатЧекаККМ.ПлатежнаяСистема = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежнойСистемыККТ.%1)";
		ТекстОтборов = СтрШаблон(ТекстОтборов, СокрЛП(ТипПлатежнойСистемы));
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
					|	ВидыОплатЧекаККМ.Ссылка КАК Ссылка
					|ИЗ
					|	Справочник.ВидыОплатЧекаККМ КАК ВидыОплатЧекаККМ
					|ГДЕ
					|	ВидыОплатЧекаККМ.ТипОплаты = &ТипОплаты
					|	%ТекстОтборов%
					|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ТекстОтборов%", ТекстОтборов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.ВидыОплатЧекаККМ.ПустаяСсылка();
	КонецЕсли;
КонецФункции
Процедура ВыгрузитьВалюту(ДанныеXDTO)
	СтруктураДанныеВалюты = Новый Структура;
	СтруктураДанныеВалюты.Вставить("Код", 643);
	СтруктураДанныеВалюты.Вставить("Наименование", "RUB");
	Инструкция = Новый Структура("Значение, ИмяПКО", СтруктураДанныеВалюты, "Справочник_Валюта_ИзСтруктуры");
	ДанныеXDTO.Вставить("Валюта", Инструкция);
КонецПроцедуры
Процедура ВыгрузитьВалютуВзаиморасчетов(ДанныеXDTO)
	СтруктураДанныеВалюты = Новый Структура;
	СтруктураДанныеВалюты.Вставить("Код", 643);
	СтруктураДанныеВалюты.Вставить("Наименование", "RUB");
	Инструкция = Новый Структура("Значение, ИмяПКО", СтруктураДанныеВалюты, "Справочник_Валюта_ИзСтруктуры");
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", Инструкция);
КонецПроцедуры
Процедура ВыгрузитьДоговор(ДанныеИБ, ДанныеXDTO, ВидДоговора)
	СтруктураДанныеДоговора = Новый Структура("Наименование, Номер, Дата, Контрагент, Организация");
	ЗаполнитьЗначенияСвойств(СтруктураДанныеДоговора, ДанныеИБ);
	
	Если ТипЗнч(ДанныеИБ) <> Тип("Структура") Тогда
		МетаданныеОбъекта = ДанныеИБ.Метаданные();
		Если МетаданныеОбъекта.Реквизиты.Найти("Договор") <> Неопределено Тогда
			Договор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Ссылка, "Договор");
	
			Если ЗначениеЗаполнено(Договор) Тогда
				СтруктураДанныеДоговора.Вставить("Наименование", Договор.Наименование);
			КонецЕсли;
		Иначе
			СтруктураДанныеДоговора.Вставить("Наименование", "Договор по умолчанию");
		КонецЕсли;
		СтруктураДанныеДоговора.Вставить("Номер", ДанныеИБ.Номер);
		СтруктураДанныеДоговора.Вставить("Дата", ДанныеИБ.Дата);
		СтруктураДанныеДоговора.Вставить("РасчетыВУсловныхЕдиницах", Ложь);
	Иначе
		СтруктураДанныеДоговора.Вставить("Наименование", "Договор по умолчанию");
	КонецЕсли;
	
	СтруктураДанныеДоговора.Вставить("ВидДоговора", ВидДоговора);
	ДанныеXDTO.Вставить("Договор", Новый Структура("Значение, ИмяПКО", СтруктураДанныеДоговора, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры"));
КонецПроцедуры
Процедура ВыгрузитьМаркиДокумента(КомпонентыОбмена, АкцизныеМарки)
	Если АкцизныеМарки.Количество() > 0 Тогда
		Для каждого Строка Из АкцизныеМарки Цикл
			МаркаОбъект = Строка.МаркаСсылка.ПолучитьОбъект();
				
			ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, МаркаОбъект);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
Процедура ВыгрузитьПатент(ДанныеИБ, ДанныеXDTO)
	СтруктураДанныеПатента = Новый Структура;
	СтруктураДанныеПатента.Вставить("КодНалоговогоОргана", "1");
	СтруктураДанныеПатента.Вставить("НомерПатента", "1");
	СтруктураДанныеПатента.Вставить("Организация", ДанныеИБ.Организация);
	
	Инструкция = Новый Структура("Значение, ИмяПКО", СтруктураДанныеПатента, "Справочник_Патенты_ИзСтруктуры");
	ДанныеXDTO.Вставить("Патент", Инструкция);
КонецПроцедуры
Функция ДанныеКоллекцииВВидеСтруктуры(Источник, ПравилаЗаполнения)
	Результат = Новый Структура;
	Для Каждого ПравилоЗаполнения Из ПравилаЗаполнения Цикл
		СтруктураДляПереносаЗначения = Новый Структура(ПравилоЗаполнения.Ключ, Неопределено);
		ЗаполнитьЗначенияСвойств(СтруктураДляПереносаЗначения, Источник);
		Значение = СтруктураДляПереносаЗначения[ПравилоЗаполнения.Ключ];
		Если Значение <> Неопределено Тогда
			Результат.Вставить(ПравилоЗаполнения.Значение, Значение);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат
КонецФункции
Процедура ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, ЕстьТЧДопРеквизиты = Ложь)
	Если НЕ (ДанныеXDTO.Свойство("ДополнительныеРеквизиты")
			И ЗначениеЗаполнено(ДанныеXDTO.ДополнительныеРеквизиты)) Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		Возврат;
	КонецЕсли;
	МетаОбъект = ПолученныеДанные.Метаданные();
	ИмяБазовогоТипа = "";
	Если Метаданные.Документы.Содержит(МетаОбъект) Тогда
		ИмяБазовогоТипа = "Документ";
	ИначеЕсли Метаданные.Справочники.Содержит(МетаОбъект) Тогда
		ИмяБазовогоТипа = "Справочник";
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаОбъект) Тогда
		ИмяБазовогоТипа = "ПланВидовХарактеристик";
	КонецЕсли;	
	
	ТипДанныхСтрокой = ИмяБазовогоТипа+"."+МетаОбъект.Имя;
	
	МассивСтрокДопРеквизиты = Новый Массив;
	МассивСтрокДопСведения = Новый Массив;
	Для Каждого СтрокаТЧ ИЗ ДанныеXDTO.ДополнительныеРеквизиты Цикл
		ЭтоДопСведение = СтрокаТЧ.Свойство.Свойство("ЭтоДополнительноеСведение") И СтрокаТЧ.Свойство.ЭтоДополнительноеСведение;
		ДопРеквизитыСтрока = КомпонентыОбмена.ПараметрыКонвертации.ЗагруженныеДопРеквизитыИСведения.Добавить();
		ДопРеквизитыСтрока.Свойство = СтрокаТЧ.Свойство;
		ДопРеквизитыСтрока.ЭтоДопСведение = ЭтоДопСведение;
		ДопРеквизитыСтрока.ТипОбъекта = ТипДанныхСтрокой;
	
		СтруктураДанныхСтроки = Новый Структура("Свойство, Значение");
	
		//Проверка на простой тип
		Если ТипЗнч(СтрокаТЧ.ЗначениеСвойства) = Тип("Строка")
			ИЛИ ТипЗнч(СтрокаТЧ.ЗначениеСвойства) = Тип("Число")
			ИЛИ ТипЗнч(СтрокаТЧ.ЗначениеСвойства) = Тип("Дата")
			ИЛИ ТипЗнч(СтрокаТЧ.ЗначениеСвойства) = Тип("Булево") Тогда
			СтруктураДанныхСтроки.Свойство = СтрокаТЧ.Свойство;
			СтруктураДанныхСтроки.Значение = СтрокаТЧ.ЗначениеСвойства;
		Иначе
			ИмяПКО = "";
			ЗагрузкаДопРеквизитов_ОпределитьИмяПКО(СтрокаТЧ.ЗначениеСвойства, ИмяПКО);
			Если ИмяПКО = "" Тогда
				Продолжить;
			КонецЕсли;
			СтруктураДанныхСтроки.Свойство = СтрокаТЧ.Свойство;
			ЗначениеСвойства = СтрокаТЧ.ЗначениеСвойства;
			Если ИмяПКО = "Справочник_ЗначенияДополнительныхРеквизитов" Тогда
				Если НЕ (ЗначениеСвойства.Свойство("Владелец") И ЗначениеЗаполнено(ЗначениеСвойства.Владелец)) Тогда
					// Ключевое свойство Владелец необходимо указать явно
					ЗначениеСвойства.Вставить("Владелец", СтрокаТЧ.Свойство);
				КонецЕсли;
			КонецЕсли;
			СтруктураДанныхСтроки.Значение = Новый Структура("Значение, ИмяПКО", СтрокаТЧ.ЗначениеСвойства, ИмяПКО);
		КонецЕсли;
		Если ЭтоДопСведение Тогда
			МассивСтрокДопСведения.Добавить(СтруктураДанныхСтроки);
		ИначеЕсли ЕстьТЧДопРеквизиты Тогда
			МассивСтрокДопРеквизиты.Добавить(СтруктураДанныхСтроки);
		КонецЕсли;
	КонецЦикла;
	Если МассивСтрокДопРеквизиты.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДополнительныеРеквизиты", МассивСтрокДопРеквизиты);
	КонецЕсли;
	Если МассивСтрокДопСведения.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДополнительныеСведения", МассивСтрокДопСведения);
	КонецЕсли;
КонецПроцедуры
Процедура ЗагрузитьДополнительныеСведения(ОбъектСсылка, СтруктураДопСвойства, КомпонентыОбмена)
	Если СтруктураДопСвойства.Свойство("ДополнительныеСведения") = Ложь ИЛИ 
		СтруктураДопСвойства.ДополнительныеСведения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		Возврат;
	КонецЕсли;
	
	ДопСведенияНаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	ДопСведенияНаборЗаписей.Отбор.Объект.Установить(ОбъектСсылка);
	ДопСведенияНаборЗаписей.ОбменДанными.Загрузка = Истина;
	ПКО_ДопРеквизиты = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_ДополнительныеРеквизиты");
	Для Каждого СтрокаДопСведения ИЗ СтруктураДопСвойства.ДополнительныеСведения Цикл
		СвойствоСсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
			СтрокаДопСведения.Свойство, 
			ПКО_ДопРеквизиты, 
			"ПолучитьСсылку");
		Если Найти(СокрЛП(СвойствоСсылка), "Объект не найден") > 0 Тогда
			СвойствоСсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
				СтрокаДопСведения.Свойство, 
				ПКО_ДопРеквизиты, 
				"КонвертироватьИЗаписать").Ссылка;
		КонецЕсли;
			
		Если ТипЗнч(СтрокаДопСведения.Значение) = Тип("Структура") Тогда
			ПКО_ЗначениеСвойства = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,СтрокаДопСведения.Значение.ИмяПКО);
			ЗначениеСвойства = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
					СтрокаДопСведения.Значение.Значение, 
					ПКО_ЗначениеСвойства, 
					"ПолучитьСсылку");
			Если Найти(СокрЛП(ЗначениеСвойства), "Объект не найден") > 0 Тогда
				ЗначениеСвойства = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
					СтрокаДопСведения.Значение.Значение, 
					ПКО_ЗначениеСвойства, 
					"КонвертироватьИЗаписать").Ссылка;
			КонецЕсли;
		Иначе
			ЗначениеСвойства = СтрокаДопСведения.Значение;
		КонецЕсли;
		НовЗапись = ДопСведенияНаборЗаписей.Добавить();
		НовЗапись.Объект = ОбъектСсылка;
		НовЗапись.Свойство = СвойствоСсылка;
		НовЗапись.Значение = ЗначениеСвойства;
	КонецЦикла;	
	ДопСведенияНаборЗаписей.Записать();
КонецПроцедуры
Процедура ЗагрузитьШтрихкодыУпаковок(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена, ИмяТаблицы = "ШтрихкодыУпаковок", ИмяСвойства = "ШтрихкодУпаковки")
	МассивСтрокШтрихкодыУпаковок = Новый Массив;
	ДанныеЧастичногоВыбытия = Новый Соответствие;
	
	Если ДанныеXDTO.Свойство("AdditionalInfo") 
		И ТипЗнч(ДанныеXDTO.AdditionalInfo) = Тип("Структура") Тогда
		Если ДанныеXDTO.AdditionalInfo.Свойство("ДанныеЧастичногоВыбытия") Тогда
			ДанныеЧастичногоВыбытия = ДанныеXDTO.AdditionalInfo.ДанныеЧастичногоВыбытия;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("АкцизныеМарки")
		И ЗначениеЗаполнено(ДанныеXDTO.АкцизныеМарки) Тогда
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");
		ПравилаЗаполнения.Вставить("Серия", "Серия");
		ПравилаЗаполнения.Вставить("Упаковка", "Упаковка");
		ПравилаЗаполнения.Вставить("НомерАкцизнойМарки", "ЗначениеШтрихкода");
		ПравилаЗаполнения.Вставить("ИдентификаторСтроки", "КлючСвязи");
		
		Для Каждого Строка Из ДанныеXDTO.АкцизныеМарки Цикл
			СтруктураАкцизнаяМарка = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
	
			ИнструкцияШтрихкодУпаковки = Новый Структура("Значение, ИмяПКО");
			ИнструкцияШтрихкодУпаковки.Значение = СтруктураАкцизнаяМарка;
			ИнструкцияШтрихкодУпаковки.ИмяПКО = "Справочник_ШтрихкодыУпаковокТоваровИзСтр_Получение";
			
			СтруктураДанныхСтроки = Новый Структура;
			СтруктураДанныхСтроки.Вставить(ИмяСвойства, ИнструкцияШтрихкодУпаковки);
			СтруктураДанныхСтроки.Вставить("КодАкцизнойМарки", Строка.НомерАкцизнойМарки);
	
			Если СтруктураАкцизнаяМарка.Свойство("КлючСвязи")
				И ЗначениеЗаполнено(СтруктураАкцизнаяМарка.КлючСвязи) Тогда
				СтруктураДанныхСтроки.Вставить("КлючСвязи", СтруктураАкцизнаяМарка.КлючСвязи);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеЧастичногоВыбытия) Тогда
				СтруктураДанных = ДанныеЧастичногоВыбытия.Получить(Строка.НомерСтрокиДокумента);
				
				Если СтруктураДанных <> Неопределено
					И ОбщегоНазначения.СсылкаСуществует(СтруктураДанных.ЧастичноеВыбытиеНоменклатура) Тогда
					
					СтруктураДанныхСтроки.Вставить("ЧастичноеВыбытиеНоменклатура", СтруктураДанных.ЧастичноеВыбытиеНоменклатура);
					СтруктураДанныхСтроки.Вставить("ЧастичноеВыбытиеХарактеристика", СтруктураДанных.ЧастичноеВыбытиеХарактеристика);
					СтруктураДанныхСтроки.Вставить("ЧастичноеВыбытиеВариантУчета", СтруктураДанных.ЧастичноеВыбытиеВариантУчета);
					СтруктураДанныхСтроки.Вставить("ЧастичноеВыбытиеКоличество", СтруктураДанных.ЧастичноеВыбытиеКоличество);
				КонецЕсли;
			КонецЕсли;
			
			МассивСтрокШтрихкодыУпаковок.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("МаркировкиУпаковок")
		И ЗначениеЗаполнено(ДанныеXDTO.МаркировкиУпаковок) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.МаркировкиУпаковок Цикл
				
			ИнструкцияШтрихкодУпаковки = Новый Структура("Значение, ИмяПКО");
			ИнструкцияШтрихкодУпаковки.Значение = Строка.МаркировкаУпаковки;
			ИнструкцияШтрихкодУпаковки.ИмяПКО = "Справочник_ШтрихкодыУпаковокТоваров_Получение";
			
			МассивСтрокШтрихкодыУпаковок.Добавить(Новый Структура(ИмяСвойства, ИнструкцияШтрихкодУпаковки));
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокШтрихкодыУпаковок.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить(ИмяТаблицы, МассивСтрокШтрихкодыУпаковок);
	КонецЕсли;
КонецПроцедуры
Процедура ЗагрузкаДопРеквизитов_ОпределитьИмяПКО(ЗначениеСвойства, ИмяПКО)
	ТипЗначенияСвойства = ЗначениеСвойства.ТипЗначения;
	
	Если Найти(ТипЗначенияСвойства, "Номенклатура")>0 Тогда
		ИмяПКО = "Справочник_Номенклатура_Получение";
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьДополнительныеРеквизиты(ДанныеИБ, ДанныеXDTO, МассивДопРеквизитов)
	ДопРеквизиты = Новый ТаблицаЗначений;
	ДопРеквизиты.Колонки.Добавить("Свойство");
	ДопРеквизиты.Колонки.Добавить("ЗначениеСвойства");
		
	Для каждого Элемент Из МассивДопРеквизитов Цикл
		СтрокаДопРеквизита = ДопРеквизиты.Добавить();
		Свойство = Новый Структура("Наименование", Элемент);
		СтрокаДопРеквизита.Свойство = Свойство;
		СтрокаДопРеквизита.ЗначениеСвойства = ДанныеИБ[Элемент];
	КонецЦикла;
		
	ДанныеXDTO.Вставить("ДополнительныеРеквизиты", ДопРеквизиты);
КонецПроцедуры
Процедура ЗаполнитьЕдиницыИзмеренияПоУмолчанию(Товары)
	ЕдиницаИзмеренияПоУмолчанию = Неопределено;
	Для каждого Строка Из Товары Цикл
		Если НЕ ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда
			Если ЕдиницаИзмеренияПоУмолчанию = Неопределено Тогда
				ЕдиницаИзмеренияПоУмолчанию = Справочники.БазовыеЕдиницыИзмерения.НайтиПоКоду("796 ");
			КонецЕсли;
			Строка.ЕдиницаИзмерения = ЕдиницаИзмеренияПоУмолчанию;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Функция ЗаполнитьКоличествоПоРНПТ(КомпонентыОбмена, Товары, Ссылка)
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.10") Тогда
	
		Выборка = РегистрыНакопления.ТоварыОрганизаций.ВыбратьПоРегистратору(Ссылка);
		
		Товары.Колонки.Добавить("НомерГТД");
		Товары.Колонки.Добавить("КоличествоРНПТ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		Товары.Колонки.Добавить("ПрослеживаемыйТовар");
		Товары.Колонки.Добавить("ЕдиницаИзмеренияПрослеживаемости");
		
		РеквизитыТНВЭД = "КодТНВЭД, ЕдиницаИзмеренияТНВЭД";
		РеквизитыПоиска = "Номенклатура, Характеристика";
		СтруктураПоиска = Новый Структура(РеквизитыПоиска);
		
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
			НайденныеСтроки = Товары.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
				СтруктураРеквизитыТНВЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТаблицы.Номенклатура, РеквизитыТНВЭД);
				
				СтрокаТаблицы.НомерГТД = Выборка.НомерГТД;
				СтрокаТаблицы.КоличествоРНПТ = Выборка.КоличествоПоРНПТ;
				СтрокаТаблицы.ПрослеживаемыйТовар = СтруктураРеквизитыТНВЭД.КодТНВЭД.ПрослеживаемыйТовар;
				СтрокаТаблицы.ЕдиницаИзмеренияПрослеживаемости = СтруктураРеквизитыТНВЭД.ЕдиницаИзмеренияТНВЭД;
			КонецЦикла;
		КонецЦикла;
	
	КонецЕсли;
КонецФункции
Процедура ЗаполнитьМагазинПоУмолчанию(ПолученныеДанные)
	Если ПолученныеДанные.Магазин.Пустая() Тогда
		ПолученныеДанные.Магазин = Справочники.Магазины.МагазинПоУмолчанию();
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ, МассивИсключений = Неопределено)
	Для Каждого СвойствоОбъекта Из КонвертацияСвойств Цикл
		СвойствоИБ = СвойствоОбъекта.СвойствоКонфигурации;
		Если СокрЛП(СвойствоИБ) = "" Тогда
			Продолжить;
		КонецЕсли;
		Если МассивИсключений <> Неопределено И МассивИсключений.Найти(СвойствоИБ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДанныеИБ[СвойствоИБ] = ПолученныеДанные[СвойствоИБ];
	КонецЦикла;
КонецПроцедуры
Процедура ЗаполнитьСкладПоступления(ПолученныеДанные)
	Если НЕ ПолученныеДанные.Магазин.Пустая() Тогда
		СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПолученныеДанные.Магазин, "СкладУправляющейСистемы, СкладПоступления"); 
		Если СтруктураРеквизитов.СкладУправляющейСистемы = Истина Тогда
			ПолученныеДанные.Склад = Справочники.Склады.ПустаяСсылка();
		ИначеЕсли ПолученныеДанные.Склад.Пустая() Тогда
			ПолученныеДанные.Склад = СтруктураРеквизитов.СкладПоступления;
		Иначе
			РеквизитМагазин = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПолученныеДанные.Склад, "Магазин");
			Если РеквизитМагазин <> Неопределено
				И ЗначениеЗаполнено(РеквизитМагазин)
				И РеквизитМагазин <> ПолученныеДанные.Магазин Тогда
				ПолученныеДанные.Склад = Справочники.Склады.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьСкладПродажи(ПолученныеДанные)
	Если НЕ ПолученныеДанные.Магазин.Пустая() Тогда
		СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПолученныеДанные.Магазин, "СкладУправляющейСистемы, СкладПродажи"); 
		Если СтруктураРеквизитов.СкладУправляющейСистемы = Истина Тогда
			ПолученныеДанные.Склад = Справочники.Склады.ПустаяСсылка();
		ИначеЕсли ПолученныеДанные.Склад.Пустая() Тогда
			ПолученныеДанные.Склад = СтруктураРеквизитов.СкладПродажи;
		Иначе
			РеквизитМагазин = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПолученныеДанные.Склад, "Магазин");
			Если РеквизитМагазин <> Неопределено
				И ЗначениеЗаполнено(РеквизитМагазин)
				И РеквизитМагазин <> ПолученныеДанные.Магазин Тогда
				ПолученныеДанные.Склад = Справочники.Склады.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьСтруктуруДанныхСтроки(СоответствиеРеквизитовТЧ, СтрокаXDTO, СтруктураДанныхСтроки)
	Для Каждого ЭлементСоответствия Из СоответствиеРеквизитовТЧ Цикл
		ЗначениеРеквизитаТЧ = СтрокаXDTO[ЭлементСоответствия.Значение];
		Если НЕ ЗначениеЗаполнено(ЗначениеРеквизитаТЧ) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураДанныхСтроки.Вставить(ЭлементСоответствия.Ключ,ЗначениеРеквизитаТЧ); 
	КонецЦикла;
КонецПроцедуры
Процедура ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(ТабличнаяЧастьОбъектаПослеОбработки, ТабличнаяЧастьОбъектаДоОбработки, КлючевыеПоля = "", КолонкиДляВключения = "", КолонкиДляИсключения = "")
	ОбменДаннымиXDTOСервер.ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ТабличнаяЧастьОбъектаПослеОбработки, 
		ТабличнаяЧастьОбъектаДоОбработки,
		КлючевыеПоля, 
		КолонкиДляВключения, 
		КолонкиДляИсключения);
КонецПроцедуры
Функция ИмяПКОДляДокументаОснованияСФВыданного(ДокументОснование)
	ТипОснования = ТипЗнч(ДокументОснование);
	Если ТипОснования = Тип("ДокументСсылка.РеализацияТоваров") Тогда
		ИмяПКО = "Документ_РеализацияТоваровУслуг_Отправка";
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		ИмяПКО = "Документ_ВозвратТоваровПоставщику_Отправка";
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
		ИмяПКО = "Документ_ПоступлениеТоваровУслуг_Отправка";
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
		ИмяПКО = "Документ_ОтчетКомитенту_Отправка";
	Иначе
		ИмяПКО = "ПередачаМеждуОрганизациями_РТУ_Отправка";
	КонецЕсли;
	Возврат ИмяПКО;
КонецФункции
Функция ИмяПКОДляДокументаОснованияСФПолученного(ДокументОснование)
	ТипСсылки = ТипЗнч(ДокументОснование);
	ИмяПКО = "";
	Если ТипСсылки = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
		ИмяПКО = "Документ_ПоступлениеТоваровУслуг_Отправка";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		ИмяПКО = "Документ_ВозвратТоваровОтПокупателя_Отправка";
	Иначе
		ИмяПКО = "ПередачаМеждуОрганизациями_РТУ_Отправка";
	КонецЕсли;
	Возврат ИмяПКО;
КонецФункции
Функция КассаПоУмолчанию(Организация)
	Перем КассаПоУмолчанию;
	КассаПоУмолчанию = Справочники.Кассы.ПустаяСсылка();
	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Кассы.Ссылка КАК Касса
	|ИЗ
	|	Справочник.Кассы КАК Кассы
	|ГДЕ
	|	Кассы.Владелец = &Организация
	|	И НЕ Кассы.ПометкаУдаления
	|	И НЕ Кассы.КассаУправляющейСистемы
	|";
	Запрос.УстановитьПараметр("Организация", Организация);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Количество() = 1.00 Тогда
			Выборка.Следующий();
			КассаПоУмолчанию = Выборка.Касса;
		КонецЕсли;
	КонецЕсли;
	Возврат КассаПоУмолчанию;
КонецФункции
Процедура КурсКратность(ДанныеXDTO)
	ДанныеXDTO.Вставить("КурсВзаиморасчетов", 1);
	ДанныеXDTO.Вставить("КратностьВзаиморасчетов", 1);
	ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах", Ложь);
КонецПроцедуры
Функция НайтиОРППоНомеруКассовойСмены(ПараметрыСмены)
	Запрос = Новый Запрос;
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ОтчетОРозничныхПродажах.Ссылка КАК Ссылка,
		|	ОтчетОРозничныхПродажах.Дата КАК Дата
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КассоваяСмена КАК ДокКассоваяСмена
		|		ПО (ОтчетОРозничныхПродажах.КассоваяСмена = ДокКассоваяСмена.Ссылка)
		|ГДЕ
		|	ДокКассоваяСмена.КассаККМ = &КассаККМ
		|	И ДокКассоваяСмена.НомерСменыККТ = &НомерСменыККТ
		|	И &ДатаЧека МЕЖДУ ДокКассоваяСмена.НачалоКассовойСмены И ДокКассоваяСмена.ОкончаниеКассовойСмены
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ
		|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("КассаККМ", ПараметрыСмены.КассаККМ);
	Запрос.УстановитьПараметр("НомерСменыККТ", ПараметрыСмены.НомерСменыККТ);
	Запрос.УстановитьПараметр("ДатаЧека", ПараметрыСмены.ДатаЧека);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
	Возврат Документы.ОтчетОРозничныхПродажах.ПустаяСсылка();
КонецФункции
Процедура НайтиСоздатьКонтрагентаПоОрганизацииРТ(ОрганизацияКонтрагента, СсылкаНаКонтрагента)
	ИспользоватьОбменЭД = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД");
	Если ИспользоватьОбменЭД Тогда
		СсылкаНаКонтрагента = ОбщегоНазначенияРТВызовСервера.ЗначениеРеквизитаОбъекта(ОрганизацияКонтрагента,"СобственныйКонтрагент");
	Иначе
		СсылкаНаКонтрагента = Справочники.Контрагенты.ПолучитьСсылку(ОрганизацияКонтрагента.УникальныйИдентификатор());
	КонецЕсли;
	Если НЕ ОбщегоНазначения.СсылкаСуществует(СсылкаНаКонтрагента) Тогда
		НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
		НовыйКонтрагент.ПометкаУдаления		= ОрганизацияКонтрагента.ПометкаУдаления;
		НовыйКонтрагент.ИНН					= ОрганизацияКонтрагента.ИНН;
		НовыйКонтрагент.КодПоОКПО			= ОрганизацияКонтрагента.КодПоОКПО;
		НовыйКонтрагент.КПП					= ОрганизацияКонтрагента.КПП;
		НовыйКонтрагент.НаименованиеПолное	= ОрганизацияКонтрагента.НаименованиеПолное;
		НовыйКонтрагент.ЮрФизЛицо			= ОрганизацияКонтрагента.ЮрФизЛицо;
		НовыйКонтрагент.Наименование		= ОрганизацияКонтрагента.Наименование;
		НовыйКонтрагент.УстановитьСсылкуНового(СсылкаНаКонтрагента);
		НовыйКонтрагент.ОбменДанными.Загрузка = Истина;
		НовыйКонтрагент.Записать();
	КонецЕсли;
КонецПроцедуры
Функция НайтиТерминалПоЭквайреруИОрганизации(Организация, Эквайрер)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	запрос.УстановитьПараметр("Эквайрер", Эквайрер);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЭквайринговыеТерминалы.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	               |ГДЕ
	               |	ЭквайринговыеТерминалы.Эквайрер = &Эквайрер
	               |	И ЭквайринговыеТерминалы.Организация = &Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 1 Тогда
		//Неоднозначное представление
		Возврат Неопределено;
	Иначе
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
КонецФункции
Процедура ОбработатьЗагруженныеДопРеквизитыИСведения(КомпонентыОбмена)
	ДопРеквизитыИСведения = КомпонентыОбмена.ПараметрыКонвертации.ЗагруженныеДопРеквизитыИСведения;
	Если ДопРеквизитыИСведения = Неопределено ИЛИ ДопРеквизитыИСведения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	СоответствиеТипОбъектаИНабор = Новый Соответствие;
	ИменаПредопределенных = Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений.ПолучитьИменаПредопределенных();
	Для Каждого СтрокаДопРеквизиты ИЗ ДопРеквизитыИСведения Цикл
		// Получение набора доп реквизитов.
		НаборДопРеквизитов = СоответствиеТипОбъектаИНабор.Получить(СтрокаДопРеквизиты.ТипОбъекта);
		Если НаборДопРеквизитов = Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка() Тогда
			//На прошлых итерациях не удалось найти набор доп реквизитов.
			Продолжить;
		ИначеЕсли НаборДопРеквизитов = Неопределено Тогда
			// Поиск набора еще не выполнялся.
			//1 этап - прямой поиск.
			ИмяПредопределенногоЭлемента = СтрЗаменить(СтрокаДопРеквизиты.ТипОбъекта, ".", "_");
			Если ИменаПредопределенных.Найти(ИмяПредопределенногоЭлемента) <> Неопределено Тогда
				НаборДопРеквизитов = Справочники.НаборыДополнительныхРеквизитовИСведений[ИмяПредопределенногоЭлемента];
				Если НаборДопРеквизитов.ЭтоГруппа Тогда
					НаборДопРеквизитов = Неопределено;
				КонецЕсли;
			КонецЕсли;
			//2 этап - поиск общего элемента.
			Если НаборДопРеквизитов = Неопределено Тогда
				ИмяПредопределенногоЭлемента = ИмяПредопределенногоЭлемента + "_Общие";
				Если ИменаПредопределенных.Найти(ИмяПредопределенногоЭлемента) <> Неопределено Тогда
					НаборДопРеквизитов = Справочники.НаборыДополнительныхРеквизитовИСведений[ИмяПредопределенногоЭлемента];
					Если НаборДопРеквизитов.ЭтоГруппа Тогда
						НаборДопРеквизитов = Неопределено;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			//3 этап - поиск по наименованию.
			Если НаборДопРеквизитов = Неопределено Тогда
				ИмяТипаОбъекта = Прав(СтрокаДопРеквизиты.ТипОбъекта, СтрДлина(СтрокаДопРеквизиты.ТипОбъекта) - Найти(СтрокаДопРеквизиты.ТипОбъекта, "."));
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка
				|ИЗ Справочник.НаборыДополнительныхРеквизитовИСведений
				|ГДЕ ЭтоГруппа = Ложь И Наименование ПОДОБНО &ИмяПоиск";
				Запрос.УстановитьПараметр("ИмяПоиск", "%"+ИмяТипаОбъекта+"%");
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					НаборДопРеквизитов = Выборка.Ссылка;
				КонецЕсли;
			КонецЕсли;
			Если НаборДопРеквизитов = Неопределено Тогда
				СоответствиеТипОбъектаИНабор.Вставить(СтрокаДопРеквизиты.ТипОбъекта, Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка());
				Продолжить;
			Иначе
				СоответствиеТипОбъектаИНабор.Вставить(СтрокаДопРеквизиты.ТипОбъекта, НаборДопРеквизитов);
			КонецЕсли;
		КонецЕсли; 
		// Преобразование свойства из XDTO в ссылку.
		СвойствоСсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
							СтрокаДопРеквизиты.Свойство, 
							ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_ДополнительныеРеквизиты"),
							"ПолучитьСсылку").Ссылка;
		Если НЕ ЗначениеЗаполнено(СвойствоСсылка) Тогда
			//Возможно на этапе анализа данных, когда данные еще не загружены в ИБ.					
			Продолжить;
		КонецЕсли;
		// Проверка наличия в наборе доп реквизита или доп сведения.
		ИмяТабЧасти = ?(СтрокаДопРеквизиты.ЭтоДопСведение, "ДополнительныеСведения", "ДополнительныеРеквизиты");
		Если НаборДопРеквизитов[ИмяТабЧасти].Найти(СвойствоСсылка, "Свойство") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(НаборДопРеквизитов) = Тип("СправочникСсылка.НаборыДополнительныхРеквизитовИСведений") Тогда
			// Набор еще не менялся. Получение объекта и размещение его в соответствии.
			НаборДопРеквизитовОбъект = НаборДопРеквизитов.ПолучитьОбъект();
			СоответствиеТипОбъектаИНабор.Вставить(СтрокаДопРеквизиты.ТипОбъекта, НаборДопРеквизитовОбъект); 
		Иначе
			НаборДопРеквизитовОбъект = НаборДопРеквизитов;
		КонецЕсли;
		НаборДопРеквизитовОбъект.ОбменДанными.Загрузка = Истина;
		СтрокаТЧ = НаборДопРеквизитовОбъект[ИмяТабЧасти].Добавить();
		СтрокаТЧ.Свойство = СвойствоСсылка;	
	КонецЦикла;
	// Запись измененных наборов.
	Для Каждого ЭлементСоответствияНабора ИЗ СоответствиеТипОбъектаИНабор Цикл
		Если ТипЗнч(ЭлементСоответствияНабора.Значение) = Тип("СправочникОбъект.НаборыДополнительныхРеквизитовИСведений") Тогда
			НаборДопРеквизитовОбъект = ЭлементСоответствияНабора.Значение;
			НаборДопРеквизитовОбъект.КоличествоРеквизитов = Формат(НаборДопРеквизитовОбъект.ДополнительныеРеквизиты.НайтиСтроки(
				Новый Структура("ПометкаУдаления", Ложь)).Количество(), "ЧГ=");
			
			НаборДопРеквизитовОбъект.КоличествоСведений   = Формат(НаборДопРеквизитовОбъект.ДополнительныеСведения.НайтиСтроки(
				Новый Структура("ПометкаУдаления", Ложь)).Количество(), "ЧГ=");
			НаборДопРеквизитовОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ОбработатьУпаковкиТоваров(КомпонентыОбмена, Товары)
	КолонкаУпаковкаСсылка = Товары.Колонки.Найти("УпаковкаСсылка");
	Если КолонкаУпаковкаСсылка <> Неопределено Тогда
		Товары.Колонки.Удалить(КолонкаУпаковкаСсылка);
	КонецЕсли;	
	
	Товары.Колонки.Упаковка.Имя = "УпаковкаСсылка";
	Товары.Колонки.Добавить("Упаковка");
	
	Для каждого Строка Из Товары Цикл
		Если ЗначениеЗаполнено(Строка.УпаковкаСсылка) Тогда
			Упаковка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					Строка.УпаковкаСсылка, "Владелец, Наименование, ЕдиницаИзмерения, Коэффициент, Объем");
			
			Если Упаковка.Владелец = Строка.Номенклатура Тогда
				Строка.Упаковка = Строка.УпаковкаСсылка;
			Иначе
				Упаковка.Вставить("Владелец", Строка.Номенклатура);
				Строка.Упаковка = Новый Структура("Значение, ИмяПКО",
					Упаковка, "Справочник_Упаковки_ИзСтруктуры");
					
				ПравилоОбработки = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Справочник_Упаковки_Отправка", "Имя");
				Если Не ПравилоОбработки = Неопределено Тогда
					ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, Упаковка, ПравилоОбработки);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Строка.Упаковка = Строка.УпаковкаСсылка;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ОбработатьХарактеристикиТоваров(КомпонентыОбмена, Товары)
	Если ЗначениеЗаполнено(КомпонентыОбмена.УзелКорреспондента)
		И КомпонентыОбмена.ПоддерживаемыеОбъектыXDTO.Найти("Справочник.ВидыНоменклатуры") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КолонкаХарактеристикаСсылка = Товары.Колонки.Найти("ХарактеристикаСсылка");
	Если КолонкаХарактеристикаСсылка <> Неопределено Тогда
		Товары.Колонки.Удалить(КолонкаХарактеристикаСсылка);
	КонецЕсли;	
	
	Товары.Колонки.Характеристика.Имя = "ХарактеристикаСсылка";
	Товары.Колонки.Добавить("Характеристика");
	
	Для каждого Строка Из Товары Цикл
		Если ЗначениеЗаполнено(Строка.ХарактеристикаСсылка) Тогда
			Характеристика = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.ХарактеристикаСсылка,
				"Владелец, Наименование");
			Если Характеристика.Владелец = Строка.Номенклатура Тогда
				Строка.Характеристика = Строка.ХарактеристикаСсылка;	
			Иначе	
				Характеристика.Вставить("Владелец", Строка.Номенклатура);
				Строка.Характеристика = Новый Структура("Значение, ИмяПКО",
					Характеристика, "Справочник_ХарактеристикиНоменклатуры_ИзСтруктуры");
					
				ПравилоОбработки = КомпонентыОбмена.ПравилаОбработкиДанных.Найти(
					"Справочник_ХарактеристикиНоменклатуры_Отправка", "Имя");
				Если Не ПравилоОбработки = Неопределено Тогда
					ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, Характеристика, ПравилоОбработки);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Строка.Характеристика = Строка.ХарактеристикаСсылка;	
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Функция ОпеределитьДлинуНомераОРП()
	Возврат Метаданные.Документы.ОтчетОРозничныхПродажах.СтандартныеРеквизиты.Номер.Тип.КвалификаторыСтроки.Длина;
КонецФункции
Процедура ОписаниеНоменклатурыИС(СтруктураДопРеквизитов, ДанныеИБ)
	ДанныеНоменклатуры = Новый Структура("ЕмкостьПотребительскойУпаковки, КоличествоВПотребительскойУпаковке,
		|ВариантЧастичногоВыбытия, ВариантИспользованияЕдиницыХранения");	
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ОписаниеНоменклатурыИС.ЕмкостьПотребительскойУпаковки КАК ЕмкостьПотребительскойУпаковки,
		|	ОписаниеНоменклатурыИС.КоличествоВПотребительскойУпаковке КАК КоличествоВПотребительскойУпаковке,
		|	ОписаниеНоменклатурыИС.ВариантЧастичногоВыбытия КАК ВариантЧастичногоВыбытия,
		|	ОписаниеНоменклатурыИС.ВариантИспользованияЕдиницыХранения КАК ВариантИспользованияЕдиницыХранения
		|ИЗ
		|	РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
		|ГДЕ
		|	ОписаниеНоменклатурыИС.Номенклатура = &Номенклатура
		|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Номенклатура", ДанныеИБ.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Если ДанныеИБ.ДополнительныеСвойства.Свойство("ОписаниеИС") Тогда
			ОписаниеИС = ДанныеИБ.ДополнительныеСвойства.ОписаниеИС;
			ЗаполнитьЗначенияСвойств(ДанныеНоменклатуры, ОписаниеИС);
			ДанныеНоменклатуры.Вставить("КоличествоВПотребительскойУпаковке", ОписаниеИС.ЕмкостьПотребительскойУпаковки);
			ДанныеНоменклатуры.Вставить("ВариантЧастичногоВыбытия", Перечисления.ВариантыУчетаЧастичногоВыбытияИСМП.ТекущаяНоменклатура);
			ДанныеНоменклатуры.Вставить("ВариантИспользованияЕдиницыХранения", Перечисления.ВариантыИспользованияЕдиницыХраненияИСМП.ЧастьПотребительскойУпаковки);
		КонецЕсли;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ДанныеНоменклатуры, Выборка);
		КонецЦикла; 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеНоменклатуры.ВариантЧастичногоВыбытия) Тогда
		СтруктураДопРеквизитов.Вставить("ЕмкостьПотребительскойУпаковки", ДанныеНоменклатуры.ЕмкостьПотребительскойУпаковки);
		СтруктураДопРеквизитов.Вставить("КоличествоВПотребительскойУпаковке", ДанныеНоменклатуры.КоличествоВПотребительскойУпаковке);
		СтруктураДопРеквизитов.Вставить("ВариантЧастичногоВыбытия", XMLСтрока(ДанныеНоменклатуры.ВариантЧастичногоВыбытия));
		СтруктураДопРеквизитов.Вставить("ВариантИспользованияЕдиницыХранения", XMLСтрока(ДанныеНоменклатуры.ВариантИспользованияЕдиницыХранения));
	КонецЕсли;
КонецПроцедуры
Функция ОрганизацияПродажи(СтруктураПараметров)
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ОрганизацииУзла.КассаККМ.Владелец КАК Организация
		|ПОМЕСТИТЬ втОрганизацииУзла
		|ИЗ
		|	ПланОбмена.ОбменСУРМК.КассыККМ КАК ОрганизацииУзла
		|ГДЕ
		|	ОрганизацииУзла.Ссылка = &УзелКорреспондента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	РаспределениеНоменклатуры.Организация КАК Организация,
		|	1 КАК ПолеУпорядочивания
		|ИЗ
		|	РегистрСведений.РаспределениеНоменклатуры КАК РаспределениеНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втОрганизацииУзла КАК ОрганизацииУзла
		|		ПО РаспределениеНоменклатуры.Организация = ОрганизацииУзла.Организация
		|ГДЕ
		|	РаспределениеНоменклатуры.Магазин = &Магазин
		|	И РаспределениеНоменклатуры.ТоварнаяГруппа = &ТоварнаяГруппа
		|	И РаспределениеНоменклатуры.РабочееМесто = ЗНАЧЕНИЕ(Справочник.РабочиеМеста.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Магазины.СкладПродажи.Организация,
		|	2
		|ИЗ
		|	Справочник.Магазины КАК Магазины
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втОрганизацииУзла КАК ОрганизацииУзла
		|		ПО Магазины.СкладПродажи.Организация = ОрганизацииУзла.Организация
		|ГДЕ
		|	Магазины.Ссылка = &Магазин
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПолеУпорядочивания
		|";
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("УзелКорреспондента", СтруктураПараметров.УзелКорреспондента);
	Запрос.УстановитьПараметр("Магазин", СтруктураПараметров.Магазин);
	Запрос.УстановитьПараметр("ТоварнаяГруппа", СтруктураПараметров.ТоварнаяГруппа);
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Организация;
	Иначе
		Возврат Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
КонецФункции
Процедура ОтложеннаяОбработка_Документ_ВозвратПоставщику(Объект, ОбъектМодифицирован)
	ЗаполнитьМагазинПоУмолчанию(Объект);
	ЗаполнитьСкладПоступления(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_Документ_ЗаказКлиента(Объект, ОбъектМодифицирован)
	ЗаполнитьМагазинПоУмолчанию(Объект);
	ЗаполнитьСкладПоступления(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_Документ_ЗаказПоставщику(Объект, ОбъектМодифицирован)
	ЗаполнитьМагазинПоУмолчанию(Объект);
	ЗаполнитьСкладПоступления(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_Документ_Оприходование(Объект, ОбъектМодифицирован)
	ЗаполнитьМагазинПоУмолчанию(Объект);
	ЗаполнитьСкладПоступления(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_Документ_ОтчетКомитенту(Объект)
	ЗаполнитьМагазинПоУмолчанию(Объект);
	
	Если Объект.ЭтапыОплат.Количество() > 0 И Объект.Товары.Итог("Сумма") <> Объект.ЭтапыОплат.Итог("Сумма") Тогда
		Объект.ЭтапыОплат.Очистить();
	КонецЕсли;
	Если Объект.ЭтапыОплат.Количество() = 0 Тогда
		СтрокаОплаты = Объект.ЭтапыОплат.Добавить();
		СтрокаОплаты.ДатаПлатежа    = ?(ЗначениеЗаполнено(Объект.ДатаОплаты), Объект.ДатаОплаты, Объект.Дата);
		СтрокаОплаты.ПроцентОплаты = 100;
		СтрокаОплаты.Сумма = Объект.Товары.Итог("Сумма");
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_Документ_Перемещение(Объект, ОбъектМодифицирован)
	Если НЕ Объект.МагазинОтправитель.Пустая() Тогда
		СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.МагазинОтправитель, "СкладУправляющейСистемы, СкладПродажи"); 
		Если СтруктураРеквизитов.СкладУправляющейСистемы = Истина Тогда
			Объект.СкладОтправитель = Справочники.Склады.ПустаяСсылка();
		ИначеЕсли Объект.СкладОтправитель.Пустая() Тогда
			Объект.СкладОтправитель = СтруктураРеквизитов.СкладПродажи;
		Иначе
			РеквизитМагазин = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СкладОтправитель, "Магазин");
			Если РеквизитМагазин <> Неопределено
				И ЗначениеЗаполнено(РеквизитМагазин)
				И РеквизитМагазин <> Объект.МагазинОтправитель Тогда
				Объект.СкладОтправитель = Справочники.Склады.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	Если НЕ Объект.МагазинПолучатель.Пустая() Тогда
		СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.МагазинПолучатель, "СкладУправляющейСистемы, СкладПоступления"); 
		Если СтруктураРеквизитов.СкладУправляющейСистемы = Истина Тогда
			Объект.СкладПолучатель = Справочники.Склады.ПустаяСсылка();
		ИначеЕсли Объект.СкладПолучатель.Пустая() Тогда
			Объект.СкладПолучатель = СтруктураРеквизитов.СкладПоступления;
		Иначе
			РеквизитМагазин = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СкладПолучатель, "Магазин");
			Если РеквизитМагазин <> Неопределено
				И ЗначениеЗаполнено(РеквизитМагазин)
				И РеквизитМагазин <> Объект.МагазинПолучатель Тогда
				Объект.СкладПолучатель = Справочники.Склады.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_Документ_ПКО(Объект)
	Если НЕ ЗначениеЗаполнено(Объект.Касса) Тогда
		Объект.Касса = КассаПоУмолчанию(Объект.Организация);
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_Документ_ПТУ(Объект, ОбъектМодифицирован)
	ЗаполнитьМагазинПоУмолчанию(Объект);
	ЗаполнитьСкладПоступления(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_Документ_РКО(Объект)
	Если НЕ ЗначениеЗаполнено(Объект.Касса) Тогда
		Объект.Касса = КассаПоУмолчанию(Объект.Организация);
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_Документ_СБДС(Объект, ОбъектМодифицирован)
	ЗаполнитьМагазинПоУмолчанию(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_Документ_Сборка(Объект, ОбъектМодифицирован)
	ЗаполнитьМагазинПоУмолчанию(Объект);
	ЗаполнитьСкладПоступления(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_Документ_Списание(Объект, ОбъектМодифицирован)
	ЗаполнитьМагазинПоУмолчанию(Объект);
	ЗаполнитьСкладПродажи(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_Документ_Чек(Объект, ОбъектМодифицирован)
	Если НЕ ЗначениеЗаполнено(Объект.ОтчетОРозничныхПродажах) Тогда
		Объект.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.ПустаяСсылка();
		
		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			ПараметрыПоискаСклада = Новый Структура;
			ПараметрыПоискаСклада.Вставить("Организация", Объект.Организация);
			ПараметрыПоискаСклада.Вставить("Магазин", Объект.Магазин);
			ПараметрыПоискаСклада.Вставить("Номенклатура", СтрокаТовары.Номенклатура);
			
			СкладПоУмолчанию = РозничныеПродажиСервер.СкладПродажиПоУмолчанию(ПараметрыПоискаСклада);
	        Если ЗначениеЗаполнено(СкладПоУмолчанию) Тогда
				СтрокаТовары.Склад = СкладПоУмолчанию;
			КонецЕсли;
		КонецЦикла;	
	
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_Справочник_Номенклатура(Объект, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(Объект.ВидНоменклатуры) Тогда
		//вид номенклатуры подбирается по типу и по признаку алкогольной продукции
		ВидНоменклатуры = Неопределено;
		Если Не ЗначениеЗаполнено(Объект.ТипНоменклатуры) Тогда
			Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
		КонецЕсли;
		ПараметрыПоиска = Новый Структура("ТипНоменклатуры, АлкогольнаяПродукция");
		ЗаполнитьЗначенияСвойств(ПараметрыПоиска, Объект);
		НайденныеСтроки = КомпонентыОбмена.ПараметрыКонвертации.ВидыНоменклатурыПоУмолчанию.НайтиСтроки(ПараметрыПоиска);
		НайденнаяСтрока = ?(НайденныеСтроки.Количество() = 0, Неопределено, НайденныеСтроки[0]);
		
		Если НайденнаяСтрока = Неопределено Тогда
	
			НеобходимоСоздатьЭлемент = Ложь;
	
			Если ПараметрыПоиска.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Тогда
				НаименованиеЭлементаДляОбменаПоУмолчанию = НСтр("ru = 'Товар'", Метаданные.ОсновнойЯзык.КодЯзыка);
						ИначеЕсли ПараметрыПоиска.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
				НаименованиеЭлементаДляОбменаПоУмолчанию = НСтр("ru = 'Услуга'", Метаданные.ОсновнойЯзык.КодЯзыка);
			КонецЕсли;
			
			Если ПараметрыПоиска.АлкогольнаяПродукция Тогда
				НаименованиеЭлементаДляОбменаПоУмолчанию = НаименованиеЭлементаДляОбменаПоУмолчанию + "; Алк";
			КонецЕсли;
			
			Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 2
			|	ВидыНоменклатуры.Ссылка КАК ВидНоменклатуры,
			|	ВЫБОР
			|		КОГДА ВидыНоменклатуры.Наименование = &НаименованиеЭлементаДляОбменаПоУмолчанию
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЭтоЭлементПоУмолчаниюДляОбмена
			|ИЗ
			|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
			|ГДЕ
			|	НЕ ВидыНоменклатуры.ПометкаУдаления
			|	И ВидыНоменклатуры.ТипНоменклатуры = &ТипНоменклатуры
			|	И ВидыНоменклатуры.АлкогольнаяПродукция = &АлкогольнаяПродукция
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЭтоЭлементПоУмолчаниюДляОбмена УБЫВ");
			Запрос.УстановитьПараметр("ТипНоменклатуры", ПараметрыПоиска.ТипНоменклатуры);
			Запрос.УстановитьПараметр("АлкогольнаяПродукция", ПараметрыПоиска.АлкогольнаяПродукция);
			Запрос.УстановитьПараметр("НаименованиеЭлементаДляОбменаПоУмолчанию", НаименованиеЭлементаДляОбменаПоУмолчанию);
			РезультатЗапроса = Запрос.Выполнить();
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Следующий() Тогда
				Если Выборка.Количество() = 1 ИЛИ Выборка.ЭтоЭлементПоУмолчаниюДляОбмена Тогда
					ВидНоменклатуры = Выборка.ВидНоменклатуры;
				Иначе
					НеобходимоСоздатьЭлемент = Истина;
				КонецЕсли;
			Иначе
				НеобходимоСоздатьЭлемент = Истина;
			КонецЕсли;
			
			Если НеобходимоСоздатьЭлемент Тогда
				
				ВидНоменклатурыОбъект = Справочники.ВидыНоменклатуры.СоздатьЭлемент();
				ЗаполнитьЗначенияСвойств(ВидНоменклатурыОбъект, ПараметрыПоиска);
				ВидНоменклатурыОбъект.Наименование                            = НаименованиеЭлементаДляОбменаПоУмолчанию;
				ВидНоменклатурыОбъект.ИспользованиеХарактеристик              = Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать;
				ВидНоменклатурыОбъект.ИспользоватьХарактеристики              = Ложь;
				ВидНоменклатурыОбъект.ИспользованиеХарактеристик = Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать;
	
				Попытка
					ВидНоменклатурыОбъект.Записать();
					ВидНоменклатуры = ВидНоменклатурыОбъект.Ссылка;
				Исключение
					ВидНоменклатуры = Справочники.ВидыНоменклатуры.ПустаяСсылка();
				КонецПопытки
			КонецЕсли;
			
			НоваяСтрока = КомпонентыОбмена.ПараметрыКонвертации.ВидыНоменклатурыПоУмолчанию.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыПоиска);
			НоваяСтрока.ВидНоменклатуры = ВидНоменклатуры;
			
		Иначе
			ВидНоменклатуры = НайденнаяСтрока.ВидНоменклатуры;
		КонецЕсли;
		Объект.ВидНоменклатуры = ВидНоменклатуры;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_Справочник_Организации(Объект)
	Если ЗначениеЗаполнено(Объект.СпособОценкиТоваровВРознице) Тогда
		Объект.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоСтоимостиПриобретения;
	КонецЕсли;
КонецПроцедуры
Процедура ОчиститьИспользованиеПКО(ИспользованиеПКО)
	Для Каждого Правило Из ИспользованиеПКО Цикл
		ИспользованиеПКО.Удалить(Правило.Ключ);
	КонецЦикла;
КонецПроцедуры
Процедура ПодготовитьДанныеКонтактнаяИнформация(ДанныеИБ, ДанныеXDTO)
	Если ДанныеИБ.КонтактнаяИнформация.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТабКонтактнаяИнформация = Новый ТаблицаЗначений;
	ТабКонтактнаяИнформация.Колонки.Добавить("ЗначенияПолей");
	ТабКонтактнаяИнформация.Колонки.Добавить("ВидКонтактнойИнформации");
	ТабКонтактнаяИнформация.Колонки.Добавить("НаименованиеКонтактнойИнформации");
	
	МетаданныеКИ = ДанныеИБ.Метаданные().ТабличныеЧасти.Найти("КонтактнаяИнформация");
	
	Для Каждого СтрокаКИ Из ДанныеИБ.КонтактнаяИнформация Цикл
		Если НЕ ОбщегоНазначения.СсылкаСуществует(СтрокаКИ.Вид) Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаКИ.Вид)
			ИЛИ (НЕ ЗначениеЗаполнено(СтрокаКИ.ЗначенияПолей) И НЕ ЗначениеЗаполнено(СтрокаКИ.Представление)) Тогда
			Продолжить;
		КонецЕсли;
	
		СвойстваВидаКИ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаКИ.Вид, "Наименование, Предопределенный, ХранитьИсториюИзменений");
		Если СвойстваВидаКИ.ХранитьИсториюИзменений = Истина
			И МетаданныеКИ <> Неопределено
			И МетаданныеКИ.Реквизиты.Найти("ДействуетС") <> Неопределено Тогда
			НайденныеСтроки = ДанныеИБ.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", СтрокаКИ.Вид));
			Если НайденныеСтроки.Количество() > 1 Тогда
				АктуальнаяВерсия = Истина;
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					Если НайденнаяСтрока <> СтрокаКИ И НайденнаяСтрока.ДействуетС > СтрокаКИ.ДействуетС Тогда
						АктуальнаяВерсия = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если Не АктуальнаяВерсия Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	
		СтрокаТЗКИ = ТабКонтактнаяИнформация.Добавить();
	
		Если Лев(СокрЛ(СтрокаКИ.ЗначенияПолей),1) = "<" Тогда
		    // КИ в правильном формате.
		    СтрокаТЗКИ.ЗначенияПолей = СокрЛП(СтрокаКИ.ЗначенияПолей);
		Иначе
		    ЗначенияПолей = "";
		    // Попытка №1.
		    Если ЗначениеЗаполнено(СокрЛП(СтрокаКИ.ЗначенияПолей)) Тогда 
		    	ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СокрЛП(СтрокаКИ.ЗначенияПолей), СокрЛП(СтрокаКИ.Представление), СтрокаКИ.Вид);
		    КонецЕсли;
		    Если Лев(СокрЛ(ЗначенияПолей),1) <> "<" Тогда
		    	// Попытка №2.
		        ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(СокрЛП(СтрокаКИ.Представление), СтрокаКИ.Вид);
		    КонецЕсли;
		    СтрокаТЗКИ.ЗначенияПолей = ЗначенияПолей;
		КонецЕсли;
	
		Если СвойстваВидаКИ.Предопределенный И СтрокаКИ.Вид <> Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации
			И СтрокаКИ.Вид <> Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагента Тогда
	
			СтрокаТЗКИ.ВидКонтактнойИнформации = СтрокаКИ.Вид;
	
		Иначе
	
			// Получение наименования значения перечисления.
			ИндексТипаКИ = Перечисления.ТипыКонтактнойИнформации.Индекс(СтрокаКИ.Тип);
			ИмяТипаКИ = Метаданные.Перечисления.ТипыКонтактнойИнформации.ЗначенияПеречисления[ИндексТипаКИ].Имя;
	
			СтрокаТЗКИ.ВидКонтактнойИнформации = "ПользовательскаяКИ"+ИмяТипаКИ;
			СтрокаТЗКИ.НаименованиеКонтактнойИнформации = СвойстваВидаКИ.Наименование;
		КонецЕсли;
	
	КонецЦикла;
	
	ДанныеXDTO.Вставить("КонтактнаяИнформация", ТабКонтактнаяИнформация);
КонецПроцедуры
Функция ПолучитьДанныеИнвентаризации(КомпонентыОбмена, Объект)
	СтруктураВозврата = Новый Структура("РезультатПоТабличнойЧасти");
	
	ТоварыДокумента = 
			
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка 				КАК Ссылка,
	|	ВложенныйЗапрос.Номенклатура 		КАК Номенклатура,
	|	ВложенныйЗапрос.Характеристика 		КАК Характеристика,
	|	ВложенныйЗапрос.ЕдиницаИзмерения 	КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Количество 			КАК Количество,
	|	ВложенныйЗапрос.Сумма 				КАК Сумма,
	|	ВложенныйЗапрос.КоличествоУчет 		КАК КоличествоУчет,
	|	ВложенныйЗапрос.Цена 				КАК Цена,
	|	ВложенныйЗапрос.СуммаУчет 			КАК СуммаУчет,
	|	""СобственныеТовары"" 				КАК ТипЗапасов
	|ИЗ
	|	(ВЫБРАТЬ
	|		Документ.Ссылка.ДокументОснование КАК Ссылка,
	|		Документ.Номенклатура КАК Номенклатура,
	|		ВЫБОР
	|			КОГДА Документ.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|				ТОГДА Документ.Номенклатура.ЕдиницаИзмерения
	|			ИНАЧЕ Документ.Упаковка.ЕдиницаИзмерения
	|		КОНЕЦ КАК ЕдиницаИзмерения,
	|		Документ.Характеристика КАК Характеристика,
	|		ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА Документ.КоличествоУпаковок = 0
	|				ТОГДА Документ.Цена
	|			ИНАЧЕ Документ.Сумма / Документ.КоличествоУпаковок
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
	|		Документ.КоличествоФакт КАК Количество,
	|		Документ.Количество КАК КоличествоУчет,
	|		Документ.СуммаФакт КАК Сумма,
	|		Документ.Сумма КАК СуммаУчет
	|	ИЗ
	|		Документ.ПересчетТоваров.Товары КАК Документ
	|	ГДЕ
	|		Документ.Ссылка.ДокументОснование В(&ДокументОснование)
	|		И Документ.Ссылка.Проведен
	|		И Документ.Ссылка.ДокументОснование.Проведен
	|		И Документ.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)) КАК ВложенныйЗапрос
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТоварыДокумента;		
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Товары = Результат.Выгрузить();
		ОбработатьХарактеристикиТоваров(КомпонентыОбмена, Товары);
		ЗаполнитьКоличествоПоРНПТ(КомпонентыОбмена, Товары, Объект.Ссылка);
		СтруктураВозврата.РезультатПоТабличнойЧасти = Товары;
		Возврат СтруктураВозврата;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции
Функция ПолучитьИдентификаторТипЦены(СтрНаименование)
	// Вычисляет значение идентификатора из строки соответствии с правилами
	// именования идентификаторов
	//
	// Возвращаемое значение:
	// Строка
	// Идентификатор, соответствующий правилам именования идентификаторов
	//
	Разделители	=  " .,+,-,/,*,?,=,<,>,(,)%!@#$%&*""№:;{}[]?()\|/`~'^_";
	
	Идентификатор = "";
	БылСпецСимвол = Ложь;
	
	Для НомСимвола = 1 По СтрДлина(СтрНаименование) Цикл
		
		Символ = Сред(СтрНаименование, НомСимвола, 1);
		
		Если СтрНайти(Разделители, Символ) <> 0 Тогда
			БылСпецСимвол = Истина;
		ИначеЕсли БылСпецСимвол Тогда
			БылСпецСимвол = Ложь;
			Идентификатор = Идентификатор + ВРег(Символ);
		Иначе
			Идентификатор = Идентификатор + Символ;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Идентификатор;
КонецФункции
Процедура ПолучитьКассуККМПоОрганизацииИМагазину(ПолученныеДанные)
	Магазин = ПолученныеДанные.Магазин;
		
	РеквизитыКассыККМ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПолученныеДанные.КассаККМ, "Владелец, Магазин");
	
	Если РеквизитыКассыККМ.Владелец <> ПолученныеДанные.Организация
		ИЛИ РеквизитыКассыККМ.Магазин <> Магазин Тогда
		
		КассаККМ = Неопределено;
		Организация = ПолученныеДанные.Организация;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Организация", Организация);
		ПараметрыОтбора.Вставить("Магазин", Магазин);
	
		НеобходимоСоздатьЭлемент = Ложь;
	
		Если ОбщегоНазначения.СсылкаСуществует(Организация) Тогда
			НаименованиеЭлементаДляОбменаПоУмолчанию = СокрЛП(Организация) + " (" + СокрЛП(Магазин) + ")";
		Иначе
			НаименованиеЭлементаДляОбменаПоУмолчанию = НСтр("ru='Основная касса ККМ'");
		КонецЕсли;
		
		КассаККМ = ЗначениеНастроекПовтИсп.КассаККМПоУмолчанию(Организация, Магазин);
		
		Если НЕ ЗначениеЗаполнено(КассаККМ) Тогда
			НеобходимоСоздатьЭлемент = Истина;
		КонецЕсли;
	
		// Создание элемента для обмена с заданными параметрами
		Если НеобходимоСоздатьЭлемент Тогда
			КассаОбъект = Справочники.КассыККМ.СоздатьЭлемент();
			КассаОбъект.Наименование			= НаименованиеЭлементаДляОбменаПоУмолчанию;
			КассаОбъект.Владелец				= Организация;
			КассаОбъект.Магазин					= Магазин;
			КассаОбъект.ТипКассы                = Перечисления.ТипыКассККМ.АвтономнаяККМ;
	
			Попытка
				КассаОбъект.Записать();
				КассаККМ = КассаОбъект.Ссылка;
			Исключение
				КассаККМ = Справочники.КассыККМ.ПустаяСсылка();
			КонецПопытки
		КонецЕсли;
		
		ПолученныеДанные.КассаККМ = КассаККМ;
	КонецЕсли;
КонецПроцедуры
Функция ПолучитьТекстЗапросаГТД(КомпонентыОбмена, НаименованиеИсточника)
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.НомерГТД") Тогда
		ТекстЗапроса = "&НаименованиеИсточника.НомерГТД КАК НомерГТД";
	Иначе
		ТекстЗапроса = "&НаименованиеИсточника.НомерГТД.Код КАК НомерГТД";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НаименованиеИсточника", НаименованиеИсточника);
	
	Возврат ТекстЗапроса;
КонецФункции
Функция РасчетыСКлиентамиОстатки(ДатаОстатков, Аванс)
	Запрос = Новый Запрос;
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РасчетыСКлиентамиОстатки.Организация КАК Организация,
		|	РасчетыСКлиентамиОстатки.Контрагент КАК Контрагент,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(РасчетыСКлиентамиОстатки.СуммаОстаток, 0) > 0
		|			ТОГДА 1
		|	КОНЕЦ КАК Аванс,
		|	РасчетыСКлиентамиОстатки.СуммаОстаток КАК Сумма,
		|	РасчетыСКлиентамиОстатки.СуммаОстаток КАК СуммаРегл
		|ПОМЕСТИТЬ РасчетыСКлиентам
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Остатки(&ДатаОстатков, ) КАК РасчетыСКлиентамиОстатки
		|ГДЕ
		|	РасчетыСКлиентамиОстатки.СуммаОстаток <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасчетыСКлиентам.Организация КАК Организация,
		|	РасчетыСКлиентам.Контрагент КАК Контрагент,
		|	ВЫБОР
		|		КОГДА РасчетыСКлиентам.Сумма > 0
		|			ТОГДА РасчетыСКлиентам.Сумма
		|		ИНАЧЕ -РасчетыСКлиентам.Сумма
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР
		|		КОГДА РасчетыСКлиентам.СуммаРегл > 0
		|			ТОГДА РасчетыСКлиентам.СуммаРегл
		|		ИНАЧЕ -РасчетыСКлиентам.СуммаРегл
		|	КОНЕЦ КАК СуммаРегл
		|ИЗ
		|	РасчетыСКлиентам КАК РасчетыСКлиентам
		|ГДЕ
		|	%УсловиеОтбора%
		|";
	
	Если Аванс Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОтбора%", "НЕ РасчетыСКлиентам.Аванс ЕСТЬ NULL");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОтбора%", "РасчетыСКлиентам.Аванс ЕСТЬ NULL");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ДатаОстатков",ДатаОстатков); 
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции
Функция РасчетыСПоставщикамиОстатки(ДатаОстатков)
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА РасчетыСПоставщикамиОбороты.Регистратор.Организация ЕСТЬ NULL
		|			ТОГДА РасчетыСПоставщикамиОбороты.Магазин.СкладПоступления.Организация
		|		ИНАЧЕ РасчетыСПоставщикамиОбороты.Регистратор.Организация
		|	КОНЕЦ КАК Организация,
		|	РасчетыСПоставщикамиОбороты.Поставщик КАК Поставщик,
		|	ВЫБОР
		|		КОГДА СУММА(РасчетыСПоставщикамиОбороты.СуммаПриход - РасчетыСПоставщикамиОбороты.СуммаРасход) > 0
		|			ТОГДА СУММА(РасчетыСПоставщикамиОбороты.СуммаПриход - РасчетыСПоставщикамиОбороты.СуммаРасход)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Аванс,
		|	ВЫБОР
		|		КОГДА СУММА(РасчетыСПоставщикамиОбороты.СуммаПриход - РасчетыСПоставщикамиОбороты.СуммаРасход) < 0
		|			ТОГДА -СУММА(РасчетыСПоставщикамиОбороты.СуммаПриход - РасчетыСПоставщикамиОбороты.СуммаРасход)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Долг
		|ПОМЕСТИТЬ ВременнаяТаблица
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Обороты(, &ДатаОстатков, Регистратор, ) КАК РасчетыСПоставщикамиОбороты
		|ГДЕ
		|	РасчетыСПоставщикамиОбороты.ДокументРасчета = НЕОПРЕДЕЛЕНО
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА РасчетыСПоставщикамиОбороты.Регистратор.Организация ЕСТЬ NULL
		|			ТОГДА РасчетыСПоставщикамиОбороты.Магазин.СкладПоступления.Организация
		|		ИНАЧЕ РасчетыСПоставщикамиОбороты.Регистратор.Организация
		|	КОНЕЦ,
		|	РасчетыСПоставщикамиОбороты.Поставщик
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РасчетыСПоставщикамиОбороты.ДокументРасчета.Организация,
		|	РасчетыСПоставщикамиОбороты.Поставщик,
		|	ВЫБОР
		|		КОГДА РасчетыСПоставщикамиОбороты.СуммаПриход - РасчетыСПоставщикамиОбороты.СуммаРасход > 0
		|			ТОГДА РасчетыСПоставщикамиОбороты.СуммаПриход - РасчетыСПоставщикамиОбороты.СуммаРасход
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА РасчетыСПоставщикамиОбороты.СуммаПриход - РасчетыСПоставщикамиОбороты.СуммаРасход < 0
		|			ТОГДА -(РасчетыСПоставщикамиОбороты.СуммаПриход - РасчетыСПоставщикамиОбороты.СуммаРасход)
		|		ИНАЧЕ 0
		|	КОНЕЦ
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Обороты(, &ДатаОстатков, Регистратор, ) КАК РасчетыСПоставщикамиОбороты
		|ГДЕ
		|	РасчетыСПоставщикамиОбороты.ДокументРасчета <> НЕОПРЕДЕЛЕНО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблица.Организация КАК Организация,
		|	ВременнаяТаблица.Поставщик КАК Поставщик,
		|	ВЫБОР
		|		КОГДА СУММА(ВременнаяТаблица.Аванс - ВременнаяТаблица.Долг) > 0
		|			ТОГДА СУММА(ВременнаяТаблица.Аванс - ВременнаяТаблица.Долг)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Аванс,
		|	ВЫБОР
		|		КОГДА СУММА(ВременнаяТаблица.Аванс - ВременнаяТаблица.Долг) < 0
		|			ТОГДА СУММА(ВременнаяТаблица.Долг - ВременнаяТаблица.Аванс)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Долг
		|ПОМЕСТИТЬ втИтоги
		|ИЗ
		|	ВременнаяТаблица КАК ВременнаяТаблица
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблица.Организация,
		|	ВременнаяТаблица.Поставщик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втИтоги.Организация КАК Организация,
		|	втИтоги.Поставщик КАК Контрагент,
		|	втИтоги.Аванс КАК Аванс,
		|	втИтоги.Долг КАК Долг
		|ИЗ
		|	втИтоги КАК втИтоги
		|ГДЕ
		|	(втИтоги.Аванс <> 0
		|			ИЛИ втИтоги.Долг <> 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	Контрагент
	    |";
		
	Запрос.УстановитьПараметр("ДатаОстатков",ДатаОстатков); 
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции
Функция СвойствоФорматаОбмена(КомпонентыОбмена, ИмяСвойства)
	Результат = Ложь;
	
	ПространствоИмен = КомпонентыОбмена.XMLСхема;
	
	Если ФабрикаXDTO.Тип(Новый ТипДанныхXML(ИмяСвойства, ПространствоИмен)) <> Неопределено Тогда
		Результат = Истина;
	Иначе
		МассивСтрок = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ИмяСвойства);
		
		Если МассивСтрок.Количество() > 1 Тогда
			ИмяОбъекта = МассивСтрок[0] + "." + МассивСтрок[1];
			ТипФабрики = ФабрикаXDTO.Тип(Новый ТипДанныхXML(ИмяОбъекта, ПространствоИмен));
			Если ТипФабрики <> Неопределено Тогда
				Для Сч = 2 По МассивСтрок.Количество() - 1 Цикл
					ИмяТекОбъекта = МассивСтрок[Сч];
					Если ТипЗнч(ТипФабрики) = Тип("СвойствоXDTO") Тогда
						ТипФабрики = ТипФабрики.Тип.Свойства.Получить(ИмяТекОбъекта);
					Иначе
						ТипФабрики = ТипФабрики.Свойства.Получить(ИмяТекОбъекта);
					КонецЕсли;
					Если ТипФабрики = Неопределено Тогда
						Возврат Ложь;
					КонецЕсли
				КонецЦикла;
				Результат = ТипФабрики <> Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции
Функция СформироватьНомерОРПИзМобильнойКассы(Номер, ПрефиксМобильнойКассы)
	ПрефиксИнформационнойБазы = "";
	
	ПрефиксацияОбъектовСобытия.ПриОпределенииПрефиксаИнформационнойБазы(ПрефиксИнформационнойБазы);
	
	ШаблонНомера = "[МК][ИБ]-[Номер]";
	ШаблонНомера = СтрЗаменить(ШаблонНомера, "[МК]", ПрефиксМобильнойКассы);
	ШаблонНомера = СтрЗаменить(ШаблонНомера, "[ИБ]", ПрефиксИнформационнойБазы);
	
	ДлинаРазделителя = 1;
	
	ДлинаНомераДокумента = ОпеределитьДлинуНомераОРП();
	
	ДлинаШаблонаНомера = СтрДлина(ПрефиксМобильнойКассы) + СтрДлина(ПрефиксИнформационнойБазы) + ДлинаРазделителя;
	ДлинаСтроки = ДлинаНомераДокумента - ДлинаШаблонаНомера;
	
	Номер = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Номер, ДлинаСтроки, "0", "Слева");
	
	ШаблонНомера = СтрЗаменить(ШаблонНомера, "[Номер]", Номер);
	
	Номер = ШаблонНомера;
	
	Возврат Номер;
КонецФункции
Процедура СформироватьЦеныНоменклатуры(КомпонентыОбмена, ДополнительныеПараметры)
	Запрос = Новый Запрос;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Магазины.Ссылка КАК Магазин,
		|	Магазины.ПравилоЦенообразования КАК ПравилоЦенообразования
		|ПОМЕСТИТЬ ТаблицаМагазиновЦеныНоменклатуры
		|ИЗ
		|	Справочник.Магазины КАК Магазины
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеновыеГруппы.ЦеноваяГруппа КАК ЦеноваяГруппа,
		|	ЦеновыеГруппы.ВидЦен КАК ВидЦен,
		|	ЦеновыеГруппы.Ссылка КАК ПравилоЦенообразования
		|ПОМЕСТИТЬ ЦеновыеГруппыПравила
		|ИЗ
		|	Справочник.ПравилаЦенообразования.ЦеновыеГруппы КАК ЦеновыеГруппы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаМагазиновЦеныНоменклатуры КАК ТаблицаМагазинов
		|		ПО (ЦеновыеГруппы.Ссылка = ТаблицаМагазинов.ПравилоЦенообразования)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидЦен,
		|	ЦеноваяГруппа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидЦеныПравила.ВидЦен КАК ВидЦен,
		|	ВидЦеныПравила.Ссылка КАК ПравилоЦенообразования
		|ПОМЕСТИТЬ ВидЦеныПравила
		|ИЗ
		|	Справочник.ПравилаЦенообразования КАК ВидЦеныПравила
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаМагазиновЦеныНоменклатуры КАК ТаблицаМагазинов
		|		ПО (ВидЦеныПравила.Ссылка = ТаблицаМагазинов.ПравилоЦенообразования)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИтоговыйЗапрос.ВидЦен КАК ТипЦен,
		|	ИтоговыйЗапрос.Номенклатура КАК Номенклатура,
		|	ИтоговыйЗапрос.Характеристика КАК Характеристика,
		|	ИтоговыйЗапрос.Упаковка КАК Упаковка,
		|	ИтоговыйЗапрос.Цена КАК Цена,
		|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СправочникНоменклатура.Весовой КАК Весовой,
		|	ВЫРАЗИТЬ(КодыТоваровSKU.SKU КАК Число(9)) КАК SKU
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПодЗапрос.ВидЦен КАК ВидЦен,
		|		ПодЗапрос.Номенклатура КАК Номенклатура,
		|		ПодЗапрос.Характеристика КАК Характеристика,
		|		ВЫБОР
		|			КОГДА МАКСИМУМ(ПодЗапрос.ЦенаПоЦеновымГруппам) > 0
		|				ТОГДА МАКСИМУМ(ПодЗапрос.УпаковкаПоЦеновымГруппам)
		|			ИНАЧЕ МАКСИМУМ(ПодЗапрос.УпаковкаПоВидуЦен)
		|		КОНЕЦ КАК Упаковка,
		|		ВЫБОР
		|			КОГДА МАКСИМУМ(ПодЗапрос.ЦенаПоЦеновымГруппам) > 0
		|				ТОГДА МАКСИМУМ(ПодЗапрос.ЦенаПоЦеновымГруппам)
		|			ИНАЧЕ МАКСИМУМ(ПодЗапрос.ЦенаПоВидуЦен)
		|		КОНЕЦ КАК Цена
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ЦеныНоменклатурыПоВидуЦен.Номенклатура КАК Номенклатура,
		|			ЦеныНоменклатурыПоВидуЦен.Характеристика КАК Характеристика,
		|			ЦеныНоменклатурыПоВидуЦен.Упаковка КАК УпаковкаПоВидуЦен,
		|			ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) КАК УпаковкаПоЦеновымГруппам,
		|			ЦеныНоменклатурыПоВидуЦен.Цена КАК ЦенаПоВидуЦен,
		|			0 КАК ЦенаПоЦеновымГруппам,
		|			ВидЦеныПравила.ВидЦен КАК ВидЦен
		|		ИЗ
		|			РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ЦеныНаДату,) КАК ЦеныНоменклатурыПоВидуЦен
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВидЦеныПравила КАК ВидЦеныПравила
		|				ПО (ВидЦеныПравила.ВидЦен = ЦеныНоменклатурыПоВидуЦен.ВидЦены)
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			СправочникНоменклатура.Ссылка,
		|			ЦеныНоменклатурыПоЦеновымГруппам.Характеристика,
		|			ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка),
		|			ЦеныНоменклатурыПоЦеновымГруппам.Упаковка,
		|			0,
		|			ЕСТЬNULL(ЦеныНоменклатурыПоЦеновымГруппам.Цена, 0),
		|			ЦеновыеГруппыПравила.ПравилоЦенообразования
		|		ИЗ
		|			ЦеновыеГруппыПравила КАК ЦеновыеГруппыПравила
		|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|				ПО ЦеновыеГруппыПравила.ЦеноваяГруппа = СправочникНоменклатура.ЦеноваяГруппа
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ЦеныНаДату,
		|						ВидЦены В
		|								(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|									ЦеновыеГруппыПравила.ВидЦен
		|								ИЗ
		|									ЦеновыеГруппыПравила КАК ЦеновыеГруппыПравила)
		|						) КАК ЦеныНоменклатурыПоЦеновымГруппам
		|				ПО (ЦеныНоменклатурыПоЦеновымГруппам.Номенклатура = СправочникНоменклатура.Ссылка)
		|					И (ЦеныНоменклатурыПоЦеновымГруппам.ВидЦены = ЦеновыеГруппыПравила.ВидЦен)) КАК ПодЗапрос
		|	ГДЕ
		|		ПодЗапрос.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ПодЗапрос.Номенклатура,
		|		ПодЗапрос.Характеристика,
		|		ПодЗапрос.ВидЦен) КАК ИтоговыйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ [ИсточникКодовSKU] КАК КодыТоваровSKU
		|		ПО (КодыТоваровSKU.Номенклатура = ИтоговыйЗапрос.Номенклатура)
		|			И (КодыТоваровSKU.Характеристика = ИтоговыйЗапрос.Характеристика)
		|			И (КодыТоваровSKU.Упаковка = ИтоговыйЗапрос.Упаковка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО (СправочникНоменклатура.Ссылка = ИтоговыйЗапрос.Номенклатура)
		|ГДЕ
		|	НЕ КодыТоваровSKU.SKU ЕСТЬ NULL
		|	И ВЫБОР
		|		КОГДА &ТипЦенДляИзмененияЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ИтоговыйЗапрос.ВидЦен = &ТипЦенДляИзмененияЦен
		|	КОНЕЦ
		|ИТОГИ ПО
		|	ТипЦен
		|";
		
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Если ДополнительныеПараметры.Свойство("ТаблицаКодовSKU")
		И ЗначениеЗаполнено(ДополнительныеПараметры.ТаблицаКодовSKU) Тогда
		
		ЗапросSKU = Новый Запрос(
		"ВЫБРАТЬ
		|	Т.SKU КАК SKU,
		|	Т.Номенклатура КАК Номенклатура,
		|	Т.Характеристика КАК Характеристика,
		|	Т.Упаковка КАК Упаковка
		|ПОМЕСТИТЬ втКодыТоваровSKU
		|ИЗ
		|	&ТаблицаКодовSKU КАК Т");
		
		ЗапросSKU.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		ЗапросSKU.УстановитьПараметр("ТаблицаКодовSKU", ДополнительныеПараметры.ТаблицаКодовSKU);
		ЗапросSKU.Выполнить();
	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ИсточникКодовSKU]", "втКодыТоваровSKU");
		Запрос.УстановитьПараметр("ЦеныНаДату", ТекущаяДатаСеанса());
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ИсточникКодовSKU]", "РегистрСведений.КодыТоваровSKU");
		
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если НЕ Запрос.Параметры.Свойство("ЦеныНаДату") Тогда
		Запрос.УстановитьПараметр("ЦеныНаДату", КомпонентыОбмена.УзелКорреспондента.ДатаНачалаВыгрузкиДокументов);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТипЦенДляИзмененияЦен", КомпонентыОбмена.ПараметрыКонвертации.ТипЦенДляИзмененияЦен);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ШаблонТаблицаТоваров = Новый ТаблицаЗначений;
	Для Каждого КолонкаРезультата Из РезультатЗапроса.Колонки Цикл
		ШаблонТаблицаТоваров.Колонки.Добавить(КолонкаРезультата.Имя, КолонкаРезультата.ТипЗначения);
	КонецЦикла;
	
	ВыборкаВидЦены = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Префикс = Константы["ПрефиксУзлаРаспределеннойИнформационнойБазы"].Получить(); 
	
	Если ПустаяСтрока(Префикс) Тогда
		ОбменДаннымиПереопределяемый.ПриОпределенииПрефиксаИнформационнойБазыПоУмолчанию(Префикс);
	КонецЕсли;
	
	ПравилоУстановкаЦенОтправка = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Документ_УстановкаЦенНоменклатуры_Отправка", "Имя");
	Если Не ПравилоУстановкаЦенОтправка = Неопределено Тогда
		
		СчетчикЦены = 1;
		
		Пока ВыборкаВидЦены.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(ВыборкаВидЦены.ТипЦен) Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеИБСтруктура = Новый Структура("Дата, Номер, Ответственный, Комментарий");
			
			ШаблонПрефикса = Префикс + "-" + "А";
			НомерДокумента = ШаблонПрефикса + СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Строка(СчетчикЦены), 11 - СтрДлина(ШаблонПрефикса));
			
			ДанныеИБСтруктура.Дата        = КомпонентыОбмена.УзелКорреспондента.ДатаНачалаВыгрузкиДокументов;
			ДанныеИБСтруктура.Номер       = НомерДокумента;
			ДанныеИБСтруктура.Комментарий = НСтр("ru = 'Создан автоматически при первой выгрузке.'");
			
			ВыборкаДетали  = ВыборкаВидЦены.Выбрать();
			ТаблицаТоваров = ШаблонТаблицаТоваров.Скопировать();
			
			Пока ВыборкаДетали.Следующий() Цикл
				СтрокаТовары = ТаблицаТоваров.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТовары, ВыборкаДетали);
			КонецЦикла;
			
			Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменУРМК"
				И ПодключаемоеОборудованиеOfflineВызовСервера.ДоступностьРаботыСКодамиТоваровSKU()
				И ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("АвтоматическиГенерироватьSKU") Тогда
			    РегистрыСведений.КодыТоваровSKU.ОбновитьКоды_SKU_PLU(ТаблицаТоваров, Истина);
			КонецЕсли;
	
			ОбработатьХарактеристикиТоваров(КомпонентыОбмена, ТаблицаТоваров);
			ОбработатьУпаковкиТоваров(КомпонентыОбмена, ТаблицаТоваров);
			
			ДанныеИБСтруктура.Вставить("Товары", ТаблицаТоваров);
			ДанныеИБСтруктура.Вставить("ТипЦен", ВыборкаВидЦены.ТипЦен);
			ДанныеИБСтруктура.Вставить("УстановкаЦенНоменклатуры", Истина);
			
			ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, 
				ДанныеИБСтруктура, 
				ПравилоУстановкаЦенОтправка);
			
			СчетчикЦены = СчетчикЦены + 1;
			
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры
Функция ТекстЗапросаОРПОплаты()
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	&Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ДокументыПоЧекам
	|ИЗ
	|	КритерийОтбора.СвязанныеДокументы(&Ссылка) КАК СвязанныеДокументы
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(СвязанныеДокументы.Ссылка) = ТИП(Документ.ЧекККМ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЧекККМ.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ЧЕКИ54ФЗ
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ КАК ЧекККМ
	|		ПО РасчетыСКлиентами.Регистратор = ЧекККМ.ОтчетОРозничныхПродажах
	|ГДЕ
	|	ЧекККМ.ОтчетОРозничныхПродажах = &Ссылка
	|	И (ЧекККМ.Оплата.ВидОплаты В (&ВидОплаты)
	|			ИЛИ ЧекККМ.ОперацияСДенежнымиСредствами = ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СерийныеНомера.Ссылка КАК Чек,
	|	СерийныеНомера.СерийныйНомер КАК СерийныйНомер,
	|	СерийныеНомера.КлючСвязиСерийныхНомеров КАК КлючСвязиСерийныхНомеров
	|ПОМЕСТИТЬ втСерийныеНомера
	|ИЗ
	|	Документ.ЧекККМ.СерийныеНомера КАК СерийныеНомера
	|ГДЕ
	|	СерийныеНомера.Ссылка.ОтчетОРозничныхПродажах = &Ссылка
	|	И НЕ СерийныеНомера.Ссылка В
	|				(ВЫБРАТЬ
	|					ЧЕКИ54ФЗ.Ссылка КАК Ссылка
	|				ИЗ
	|					ЧЕКИ54ФЗ КАК ЧЕКИ54ФЗ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Штрихкоды.Штрихкод КАК Штрихкод,
	|	СерийныеНомера.СерийныйНомер КАК СерийныйНомер
	|ПОМЕСТИТЬ втШКСерийныхНомеров
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСерийныеНомера КАК СерийныеНомера
	|		ПО Штрихкоды.Владелец = СерийныеНомера.СерийныйНомер
	|ГДЕ
	|	Штрихкоды.Владелец ССЫЛКА Справочник.СерийныеНомера
	|	И Штрихкоды.Владелец В
	|			(ВЫБРАТЬ
	|				Т.СерийныйНомер
	|			ИЗ
	|				втСерийныеНомера КАК Т)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СерийныеНомера.Чек КАК Чек,
	|	ЕСТЬNULL(ШКСерийныхНомеров.Штрихкод, ВЫРАЗИТЬ("""" КАК СТРОКА(200))) КАК Штрихкод,
	|	СерийныеНомера.СерийныйНомер КАК СерийныйНомер,
	|	СерийныеНомера.КлючСвязиСерийныхНомеров КАК КлючСвязиСерийныхНомеров
	|ПОМЕСТИТЬ втДанныеПоСертификатам
	|ИЗ
	|	втСерийныеНомера КАК СерийныеНомера
	|		ЛЕВОЕ СОЕДИНЕНИЕ втШКСерийныхНомеров КАК ШКСерийныхНомеров
	|		ПО СерийныеНомера.СерийныйНомер = ШКСерийныхНомеров.СерийныйНомер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМТовары.Ссылка.ОтчетОРозничныхПродажах КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ЧекККМТовары.Ссылка.СистемаНалогообложения = ЗНАЧЕНИЕ(перечисление.ТипыСистемНалогообложенияККТ.Патент)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДеятельностьНаПатенте,
	|	ЧекККМТовары.Номенклатура.Ссылка КАК ВидПодарочногоСертификата,
	|	СУММА(ВЫБОР
	|			КОГДА ЧекККМТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа)
	|				ТОГДА ЧекККМТовары.Сумма
	|			ИНАЧЕ -ЧекККМТовары.Сумма
	|		КОНЕЦ) КАК Сумма,
	|	ДанныеПоСертификатам.Штрихкод КАК Штрихкод,
	|	ДанныеПоСертификатам.СерийныйНомер.КодСерийногоНомера КАК МагнитныйКод,
	|	ДанныеПоСертификатам.СерийныйНомер.Код КАК СерийныйНомер
	|ПОМЕСТИТЬ втПодарочныеСертификаты
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ЧекККМТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДанныеПоСертификатам КАК ДанныеПоСертификатам
	|		ПО (ДанныеПоСертификатам.КлючСвязиСерийныхНомеров = ЧекККМТовары.КлючСвязиСерийныхНомеров)
	|			И (ДанныеПоСертификатам.Чек = ЧекККМТовары.Ссылка)
	|ГДЕ
	|	ЧекККМТовары.Ссылка.ОтчетОРозничныхПродажах = &Ссылка
	|	И ЧекККМТовары.Ссылка.Проведен
	|	И НЕ ЧекККМТовары.Ссылка.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Аннулированный)
	|	И НЕ ЧекККМТовары.Ссылка.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Отложенный)
	|	И НЕ ЧекККМТовары.Ссылка В
	|				(ВЫБРАТЬ
	|					ЧЕКИ54ФЗ.Ссылка КАК Ссылка
	|				ИЗ
	|					ЧЕКИ54ФЗ КАК ЧЕКИ54ФЗ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекККМТовары.Ссылка.ОтчетОРозничныхПродажах,
	|	ВЫБОР
	|		КОГДА ЧекККМТовары.Ссылка.СистемаНалогообложения = ЗНАЧЕНИЕ(перечисление.ТипыСистемНалогообложенияККТ.Патент)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ДанныеПоСертификатам.Штрихкод,
	|	ДанныеПоСертификатам.СерийныйНомер.КодСерийногоНомера,
	|	ДанныеПоСертификатам.СерийныйНомер.Код,
	|	ЧекККМТовары.Номенклатура.Ссылка
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА ЧекККМТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа)
	|				ТОГДА ЧекККМТовары.Сумма
	|			ИНАЧЕ -ЧекККМТовары.Сумма
	|		КОНЕЦ) <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПродажаПС.Ссылка,
	|	&ДеятельностьНаПатенте,
	|	Товары.Номенклатура.Ссылка,
	|	Товары.Сумма,
	|	МАКСИМУМ(Штрихкоды.Штрихкод),
	|	ПродажаПС.СерийныйНомер.КодСерийногоНомера,
	|	ПродажаПС.СерийныйНомер.Код
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.СерийныеНомера КАК ПродажаПС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах.Товары КАК Товары
	|		ПО ПродажаПС.Ссылка = Товары.Ссылка
	|			И ПродажаПС.КлючСвязиСерийныхНомеров = Товары.КлючСвязиСерийныхНомеров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ПО ПродажаПС.СерийныйНомер = Штрихкоды.Владелец
	|ГДЕ
	|	ПродажаПС.Ссылка = &Ссылка
	|	И ПродажаПС.СерийныйНомер <> ЗНАЧЕНИЕ(Справочник.СерийныеНомера.ПустаяСсылка)
	|	И НЕ ПродажаПС.Ссылка В
	|				(ВЫБРАТЬ
	|					ДокументыПоЧекам.Ссылка КАК Ссылка
	|				ИЗ
	|					ДокументыПоЧекам КАК ДокументыПоЧекам)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПродажаПС.Ссылка,
	|	ПродажаПС.СерийныйНомер.КодСерийногоНомера,
	|	ПродажаПС.СерийныйНомер.Код,
	|	Товары.Номенклатура.Ссылка,
	|	Товары.Сумма
	|
	|ИМЕЮЩИЕ
	|	СУММА(Товары.Сумма) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМОплата.Ссылка КАК Ссылка,
	|	ЧекККМОплата.ВидОплаты КАК ВидОплаты,
	|	ВЫБОР
	|		КОГДА ЧекККМОплата.Сумма >= ЧекККМТовары.Сумма
	|			ТОГДА ЧекККМТовары.Сумма
	|		ИНАЧЕ ЧекККМОплата.Сумма
	|	КОНЕЦ КАК Сумма
	|ПОМЕСТИТЬ втЧекиВозвратовПС
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ЧекККМТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.СерийныеНомера КАК ЧекККМСерийныеНомера
	|		ПО ЧекККМТовары.КлючСвязиСерийныхНомеров = ЧекККМСерийныеНомера.КлючСвязиСерийныхНомеров
	|			И ЧекККМТовары.Ссылка = ЧекККМСерийныеНомера.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|		ПО ЧекККМТовары.Ссылка = ЧекККМОплата.Ссылка
	|ГДЕ
	|	ЧекККМОплата.Ссылка.ОтчетОРозничныхПродажах = &Ссылка
	|	И ЧекККМОплата.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|	И ЧекККМОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПодарочныеСертификаты.Ссылка КАК Ссылка,
	|	втПодарочныеСертификаты.ДеятельностьНаПатенте КАК ДеятельностьНаПатенте,
	|	втПодарочныеСертификаты.ВидПодарочногоСертификата КАК ВидПодарочногоСертификата,
	|	втПодарочныеСертификаты.Сумма КАК Сумма,
	|	втПодарочныеСертификаты.Штрихкод КАК Штрихкод,
	|	втПодарочныеСертификаты.МагнитныйКод КАК МагнитныйКод,
	|	втПодарочныеСертификаты.СерийныйНомер КАК СерийныйНомер
	|ИЗ
	|	втПодарочныеСертификаты КАК втПодарочныеСертификаты
	|ГДЕ
	|	втПодарочныеСертификаты.Сумма > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПодарочныеСертификаты.Ссылка КАК Ссылка,
	|	втПодарочныеСертификаты.ДеятельностьНаПатенте КАК ДеятельностьНаПатенте,
	|	втПодарочныеСертификаты.ВидПодарочногоСертификата КАК ВидПодарочногоСертификата,
	|	-втПодарочныеСертификаты.Сумма КАК Сумма,
	|	втПодарочныеСертификаты.Штрихкод КАК Штрихкод,
	|	втПодарочныеСертификаты.МагнитныйКод КАК МагнитныйКод,
	|	втПодарочныеСертификаты.СерийныйНомер КАК СерийныйНомер
	|ИЗ
	|	втПодарочныеСертификаты КАК втПодарочныеСертификаты
	|ГДЕ
	|	втПодарочныеСертификаты.Сумма < 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМОплата.Ссылка.ОтчетОРозничныхПродажах КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ЧекККМОплата.Ссылка.СистемаНалогообложения = ЗНАЧЕНИЕ(перечисление.ТипыСистемНалогообложенияККТ.Патент)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДеятельностьНаПатенте,
	|	СУММА(ВЫБОР
	|			КОГДА ЧекККМОплата.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа)
	|				ТОГДА ЧекККМОплата.Сумма
	|			ИНАЧЕ -(ЧекККМОплата.Сумма - ЕСТЬNULL(втЧекиВозвратовПС.Сумма, 0))
	|		КОНЕЦ) КАК СуммаОплаты,
	|	1 КАК НомерКарты,
	|	ЧекККМОплата.ВидОплаты.Представление КАК ВидКарты,
	|	ЧекККМОплата.ЭквайринговыйТерминал.Код КАК Номер,
	|	ЧекККМОплата.ЭквайринговыйТерминал.Ссылка КАК ЭквайринговыйТерминалСсылка,
	|	ЧекККМОплата.ЭквайринговыйТерминал.Эквайрер КАК Эквайрер
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЧекиВозвратовПС КАК втЧекиВозвратовПС
	|		ПО ЧекККМОплата.Ссылка = втЧекиВозвратовПС.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыПоЧекам КАК ДокументыПоЧекам
	|		ПО (ДокументыПоЧекам.Ссылка = ЧекККМОплата.Ссылка.ОтчетОРозничныхПродажах)
	|ГДЕ
	|	ЧекККМОплата.Ссылка.Проведен
	|	И НЕ ЧекККМОплата.Ссылка.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Аннулированный)
	|	И НЕ ЧекККМОплата.Ссылка.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Отложенный)
	|	И ЧекККМОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта)
	|	И НЕ ЧекККМОплата.Ссылка В
	|				(ВЫБРАТЬ
	|					ЧЕКИ54ФЗ.Ссылка КАК Ссылка
	|				ИЗ
	|					ЧЕКИ54ФЗ КАК ЧЕКИ54ФЗ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекККМОплата.Ссылка.ОтчетОРозничныхПродажах,
	|	ВЫБОР
	|		КОГДА ЧекККМОплата.Ссылка.СистемаНалогообложения = ЗНАЧЕНИЕ(перечисление.ТипыСистемНалогообложенияККТ.Патент)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ЧекККМОплата.ВидОплаты,
	|	ЧекККМОплата.ЭквайринговыйТерминал,
	|	ЧекККМОплата.ВидОплаты.Представление,
	|	ЧекККМОплата.ЭквайринговыйТерминал.Код,
	|	ЧекККМОплата.ЭквайринговыйТерминал.Ссылка,
	|	ЧекККМОплата.ЭквайринговыйТерминал.Эквайрер
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА ЧекККМОплата.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа)
	|				ТОГДА ЧекККМОплата.Сумма
	|			ИНАЧЕ -(ЧекККМОплата.Сумма - ЕСТЬNULL(втЧекиВозвратовПС.Сумма, 0))
	|		КОНЕЦ) <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОплатаПлатежнымиКартами.Ссылка,
	|	&ДеятельностьНаПатенте,
	|	СУММА(ОплатаПлатежнымиКартами.Сумма),
	|	1,
	|	ОплатаПлатежнымиКартами.ВидОплаты.Представление,
	|	ОплатаПлатежнымиКартами.ЭквайринговыйТерминал.Код,
	|	ОплатаПлатежнымиКартами.ЭквайринговыйТерминал.Ссылка,
	|	ОплатаПлатежнымиКартами.ЭквайринговыйТерминал.Эквайрер
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.ОплатаПлатежнымиКартами КАК ОплатаПлатежнымиКартами
	|ГДЕ
	|	ОплатаПлатежнымиКартами.Ссылка = &Ссылка
	|	И ОплатаПлатежнымиКартами.Ссылка.Проведен
	|	И НЕ ОплатаПлатежнымиКартами.Ссылка В
	|				(ВЫБРАТЬ
	|					ДокументыПоЧекам.Ссылка КАК Ссылка
	|				ИЗ
	|					ДокументыПоЧекам КАК ДокументыПоЧекам)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОплатаПлатежнымиКартами.Ссылка,
	|	ОплатаПлатежнымиКартами.ВидОплаты,
	|	ОплатаПлатежнымиКартами.ЭквайринговыйТерминал,
	|	ОплатаПлатежнымиКартами.ВидОплаты.Представление,
	|	ОплатаПлатежнымиКартами.ЭквайринговыйТерминал.Код,
	|	ОплатаПлатежнымиКартами.ЭквайринговыйТерминал.Ссылка,
	|	ОплатаПлатежнымиКартами.ЭквайринговыйТерминал.Эквайрер
	|
	|ИМЕЮЩИЕ
	|	СУММА(ОплатаПлатежнымиКартами.Сумма) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМПогашениеПС.Ссылка.ОтчетОРозничныхПродажах КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ЧекККМПогашениеПС.Ссылка.СистемаНалогообложения = ЗНАЧЕНИЕ(перечисление.ТипыСистемНалогообложенияККТ.Патент)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДеятельностьНаПатенте,
	|	СУММА(ВЫБОР
	|			КОГДА ЧекККМПогашениеПС.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа)
	|				ТОГДА ВЫБОР
	|						КОГДА ЧекККМПогашениеПС.ПодарочныйСертификат.ПроизвольныйНоминал
	|								ИЛИ ЧекККМПогашениеПС.ПодарочныйСертификат.ЧастичноеПогашение
	|							ТОГДА ЧекККМПогашениеПС.СуммаПогашенияСертификата
	|						ИНАЧЕ ЧекККМПогашениеПС.ПодарочныйСертификат.Номинал
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ЧекККМПогашениеПС.ПодарочныйСертификат.ПроизвольныйНоминал
	|							ИЛИ ЧекККМПогашениеПС.ПодарочныйСертификат.ЧастичноеПогашение
	|						ТОГДА -ЧекККМПогашениеПС.СуммаПогашенияСертификата
	|					ИНАЧЕ -ЧекККМПогашениеПС.ПодарочныйСертификат.Номинал
	|				КОНЕЦ
	|		КОНЕЦ) КАК Сумма,
	|	ЧекККМПогашениеПС.СерийныйНомер.КодСерийногоНомера КАК МагнитныйКод,
	|	МАКСИМУМ(Штрихкоды.Штрихкод) КАК Штрихкод,
	|	ЧекККМПогашениеПС.СерийныйНомер.Код КАК СерийныйНомер
	|ИЗ
	|	Документ.ЧекККМ.ПогашениеПодарочныхСертификатов КАК ЧекККМПогашениеПС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ПО ЧекККМПогашениеПС.СерийныйНомер = Штрихкоды.Владелец
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыПоЧекам КАК ДокументыПоЧекам
	|		ПО (ДокументыПоЧекам.Ссылка = ЧекККМПогашениеПС.Ссылка.ОтчетОРозничныхПродажах)
	|ГДЕ
	|	ЧекККМПогашениеПС.Ссылка.Проведен
	|	И НЕ ЧекККМПогашениеПС.Ссылка.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Аннулированный)
	|	И НЕ ЧекККМПогашениеПС.Ссылка.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Отложенный)
	|	И НЕ ЧекККМПогашениеПС.Ссылка В
	|				(ВЫБРАТЬ
	|					ЧЕКИ54ФЗ.Ссылка КАК Ссылка
	|				ИЗ
	|					ЧЕКИ54ФЗ КАК ЧЕКИ54ФЗ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекККМПогашениеПС.Ссылка.ОтчетОРозничныхПродажах,
	|	ВЫБОР
	|		КОГДА ЧекККМПогашениеПС.Ссылка.СистемаНалогообложения = ЗНАЧЕНИЕ(перечисление.ТипыСистемНалогообложенияККТ.Патент)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ЧекККМПогашениеПС.СерийныйНомер.КодСерийногоНомера,
	|	ЧекККМПогашениеПС.СерийныйНомер.Код
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА ЧекККМПогашениеПС.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа)
	|				ТОГДА ВЫБОР
	|						КОГДА ЧекККМПогашениеПС.ПодарочныйСертификат.ПроизвольныйНоминал
	|								ИЛИ ЧекККМПогашениеПС.ПодарочныйСертификат.ЧастичноеПогашение
	|							ТОГДА ЧекККМПогашениеПС.СуммаПогашенияСертификата
	|						ИНАЧЕ ЧекККМПогашениеПС.ПодарочныйСертификат.Номинал
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ЧекККМПогашениеПС.ПодарочныйСертификат.ПроизвольныйНоминал
	|							ИЛИ ЧекККМПогашениеПС.ПодарочныйСертификат.ЧастичноеПогашение
	|						ТОГДА -ЧекККМПогашениеПС.СуммаПогашенияСертификата
	|					ИНАЧЕ -ЧекККМПогашениеПС.ПодарочныйСертификат.Номинал
	|				КОНЕЦ
	|		КОНЕЦ) <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПогашениеПС.Ссылка,
	|	&ДеятельностьНаПатенте,
	|	ВЫБОР
	|		КОГДА ПогашениеПС.ПодарочныйСертификат.ПроизвольныйНоминал
	|				ИЛИ ПогашениеПС.ПодарочныйСертификат.ЧастичноеПогашение
	|			ТОГДА ПогашениеПС.СуммаПогашенияСертификата
	|		ИНАЧЕ ПогашениеПС.ПодарочныйСертификат.Номинал
	|	КОНЕЦ,
	|	ПогашениеПС.СерийныйНомер.КодСерийногоНомера,
	|	МАКСИМУМ(Штрихкоды.Штрихкод),
	|	ПогашениеПС.СерийныйНомер.Код
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.ПогашениеПодарочныхСертификатов КАК ПогашениеПС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ПО ПогашениеПС.СерийныйНомер = Штрихкоды.Владелец
	|ГДЕ
	|	ПогашениеПС.Ссылка = &Ссылка
	|	И ПогашениеПС.Ссылка.Проведен
	|	И ПогашениеПС.СерийныйНомер <> ЗНАЧЕНИЕ(Справочник.СерийныеНомера.ПустаяСсылка)
	|	И НЕ ПогашениеПС.Ссылка В
	|				(ВЫБРАТЬ
	|					ДокументыПоЧекам.Ссылка КАК Ссылка
	|				ИЗ
	|					ДокументыПоЧекам КАК ДокументыПоЧекам)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПогашениеПС.Ссылка,
	|	ПогашениеПС.СерийныйНомер.КодСерийногоНомера,
	|	ПогашениеПС.СерийныйНомер.Код,
	|	ВЫБОР
	|		КОГДА ПогашениеПС.ПодарочныйСертификат.ПроизвольныйНоминал
	|				ИЛИ ПогашениеПС.ПодарочныйСертификат.ЧастичноеПогашение
	|			ТОГДА ПогашениеПС.СуммаПогашенияСертификата
	|		ИНАЧЕ ПогашениеПС.ПодарочныйСертификат.Номинал
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМОплата.Ссылка.ОтчетОРозничныхПродажах КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ЧекККМОплата.Ссылка.СистемаНалогообложения = ЗНАЧЕНИЕ(перечисление.ТипыСистемНалогообложенияККТ.Патент)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДеятельностьНаПатенте,
	|	СУММА(ВЫБОР
	|			КОГДА ЧекККМОплата.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа)
	|				ТОГДА ЧекККМОплата.Сумма
	|			ИНАЧЕ -ЧекККМОплата.Сумма
	|		КОНЕЦ) КАК СуммаОплаты,
	|	ЧекККМОплата.ВидОплаты.БанкКредитор КАК БанкСсылка,
	|	ЧекККМОплата.ВидОплаты.БанкКредитор.Наименование КАК БанкНаименование
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыПоЧекам КАК ДокументыПоЧекам
	|		ПО (ДокументыПоЧекам.Ссылка = ЧекККМОплата.Ссылка.ОтчетОРозничныхПродажах)
	|ГДЕ
	|	ЧекККМОплата.Ссылка.Проведен
	|	И НЕ ЧекККМОплата.Ссылка.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Аннулированный)
	|	И НЕ ЧекККМОплата.Ссылка.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Отложенный)
	|	И НЕ ЧекККМОплата.Ссылка В
	|				(ВЫБРАТЬ
	|					ЧЕКИ54ФЗ.Ссылка КАК Ссылка
	|				ИЗ
	|					ЧЕКИ54ФЗ КАК ЧЕКИ54ФЗ)
	|	И ЧекККМОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.БанковскийКредит)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекККМОплата.Ссылка.ОтчетОРозничныхПродажах,
	|	ВЫБОР
	|		КОГДА ЧекККМОплата.Ссылка.СистемаНалогообложения = ЗНАЧЕНИЕ(перечисление.ТипыСистемНалогообложенияККТ.Патент)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ЧекККМОплата.ВидОплаты.БанкКредитор,
	|	ЧекККМОплата.ВидОплаты.БанкКредитор.Наименование
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА ЧекККМОплата.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа)
	|				ТОГДА ЧекККМОплата.Сумма
	|			ИНАЧЕ -ЧекККМОплата.Сумма
	|		КОНЕЦ) <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОплатаБанковскимиКредитами.Ссылка,
	|	&ДеятельностьНаПатенте,
	|	СУММА(ОплатаБанковскимиКредитами.Сумма),
	|	ОплатаБанковскимиКредитами.БанкКредитор,
	|	ОплатаБанковскимиКредитами.БанкКредитор.Наименование
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.ОплатаБанковскимиКредитами КАК ОплатаБанковскимиКредитами
	|ГДЕ
	|	ОплатаБанковскимиКредитами.Ссылка = &Ссылка
	|	И ОплатаБанковскимиКредитами.Ссылка.Проведен
	|	И НЕ ОплатаБанковскимиКредитами.Ссылка В
	|				(ВЫБРАТЬ
	|					ДокументыПоЧекам.Ссылка КАК Ссылка
	|				ИЗ
	|					ДокументыПоЧекам КАК ДокументыПоЧекам)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОплатаБанковскимиКредитами.Ссылка,
	|	ОплатаБанковскимиКредитами.БанкКредитор,
	|	ОплатаБанковскимиКредитами.БанкКредитор.Наименование
	|
	|ИМЕЮЩИЕ
	|	СУММА(ОплатаБанковскимиКредитами.Сумма) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМОплата.Ссылка.ОтчетОРозничныхПродажах КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ЧекККМОплата.Ссылка.СистемаНалогообложения = ЗНАЧЕНИЕ(перечисление.ТипыСистемНалогообложенияККТ.Патент)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДеятельностьНаПатенте,
	|	СУММА(втЧекиВозвратовПС.Сумма) КАК СуммаОплаты,
	|	1 КАК НомерКарты,
	|	ЧекККМОплата.ВидОплаты.Представление КАК ВидКарты,
	|	ЧекККМОплата.ЭквайринговыйТерминал.Код КАК Номер,
	|	ЧекККМОплата.ЭквайринговыйТерминал.Ссылка КАК ЭквайринговыйТерминалСсылка,
	|	ЧекККМОплата.ЭквайринговыйТерминал.Эквайрер КАК Эквайрер
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЧекиВозвратовПС КАК втЧекиВозвратовПС
	|		ПО ЧекККМОплата.Ссылка = втЧекиВозвратовПС.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыПоЧекам КАК ДокументыПоЧекам
	|		ПО (ДокументыПоЧекам.Ссылка = ЧекККМОплата.Ссылка.ОтчетОРозничныхПродажах)
	|ГДЕ
	|	ЧекККМОплата.Ссылка.Проведен
	|	И НЕ ЧекККМОплата.Ссылка.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Аннулированный)
	|	И НЕ ЧекККМОплата.Ссылка.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Отложенный)
	|	И ЧекККМОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта)
	|	И НЕ ЧекККМОплата.Ссылка В
	|				(ВЫБРАТЬ
	|					ЧЕКИ54ФЗ.Ссылка КАК Ссылка
	|				ИЗ
	|					ЧЕКИ54ФЗ КАК ЧЕКИ54ФЗ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекККМОплата.Ссылка.ОтчетОРозничныхПродажах,
	|	ВЫБОР
	|		КОГДА ЧекККМОплата.Ссылка.СистемаНалогообложения = ЗНАЧЕНИЕ(перечисление.ТипыСистемНалогообложенияККТ.Патент)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ЧекККМОплата.ВидОплаты,
	|	ЧекККМОплата.ЭквайринговыйТерминал,
	|	ЧекККМОплата.ВидОплаты.Представление,
	|	ЧекККМОплата.ЭквайринговыйТерминал.Код,
	|	ЧекККМОплата.ЭквайринговыйТерминал.Ссылка,
	|	ЧекККМОплата.ЭквайринговыйТерминал.Эквайрер
	|
	|ИМЕЮЩИЕ
	|	СУММА(втЧекиВозвратовПС.Сумма) <> 0
	|";
	
	Возврат ТекстЗапроса;
КонецФункции
Функция ТекстЗапросаОРПТоварыВозвраты()
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	&Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ДокументыПоЧекам
	|ИЗ
	|	КритерийОтбора.СвязанныеДокументы(&Ссылка) КАК СвязанныеДокументы
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(СвязанныеДокументы.Ссылка) = ТИП(Документ.ЧекККМ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЧекККМ.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ЧЕКИ54ФЗ
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ КАК ЧекККМ
	|		ПО РасчетыСКлиентами.Регистратор = ЧекККМ.ОтчетОРозничныхПродажах
	|ГДЕ
	|	ЧекККМ.ОтчетОРозничныхПродажах = &Ссылка
	|	И (ЧекККМ.Оплата.ВидОплаты В (&ВидОплаты)
	|			ИЛИ ЧекККМ.ОперацияСДенежнымиСредствами = ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМТовары.Ссылка.ОтчетОРозничныхПродажах КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ЧекККМТовары.Ссылка.СистемаНалогообложения = ЗНАЧЕНИЕ(перечисление.ТипыСистемНалогообложенияККТ.Патент)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДеятельностьНаПатенте,
	|	ЧекККМТовары.Номенклатура КАК Номенклатура,
	|	ЧекККМТовары.Характеристика КАК Характеристика,
	|	ЧекККМТовары.Упаковка КАК Упаковка,
	|	ЧекККМСерии.Серия КАК Серия,
	|	СУММА(ВЫБОР
	|			КОГДА ЧекККМТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа)
	|				ТОГДА ЕСТЬNULL(ЧекККМСерии.Количество, ЧекККМТовары.Количество)
	|			ИНАЧЕ -ЕСТЬNULL(ЧекККМСерии.Количество, ЧекККМТовары.Количество)
	|		КОНЕЦ) КАК Количество,
	|	СУММА(ВЫБОР
	|			КОГДА ЧекККМТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа)
	|				ТОГДА ЕСТЬNULL(ЧекККМСерии.Количество, ЧекККМТовары.КоличествоУпаковок)
	|			ИНАЧЕ -ЕСТЬNULL(ЧекККМСерии.Количество, ЧекККМТовары.КоличествоУпаковок)
	|		КОНЕЦ) КАК КоличествоУпаковок,
	|	ЧекККМТовары.Цена КАК Цена,
	|	ЧекККМТовары.СтавкаНДС КАК СтавкаНДС,
	|	ЧекККМТоварыОрганизации.Поставщик КАК Поставщик,
	|	СУММА(ВЫБОР
	|			КОГДА ЧекККМТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа)
	|				ТОГДА ВЫБОР
	|						КОГДА ЧекККМСерии.Серия ЕСТЬ NULL
	|							ТОГДА ЧекККМТовары.Сумма
	|						ИНАЧЕ ВЫРАЗИТЬ(ЧекККМТовары.Сумма / ЧекККМТовары.Количество * ЧекККМСерии.Количество КАК ЧИСЛО(15, 2))
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ЧекККМСерии.Серия ЕСТЬ NULL
	|						ТОГДА -ЧекККМТовары.Сумма
	|					ИНАЧЕ -(ВЫРАЗИТЬ(ЧекККМТовары.Сумма / ЧекККМТовары.Количество * ЧекККМСерии.Количество КАК ЧИСЛО(15, 2)))
	|				КОНЕЦ
	|		КОНЕЦ) КАК Сумма,
	|	СУММА(ВЫБОР
	|			КОГДА ЧекККМТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа)
	|				ТОГДА ВЫБОР
	|						КОГДА ЧекККМСерии.Серия ЕСТЬ NULL
	|							ТОГДА ЧекККМТовары.СуммаНДС
	|						ИНАЧЕ ВЫРАЗИТЬ(ЧекККМТовары.СуммаНДС / ЧекККМТовары.Количество * ЧекККМСерии.Количество КАК ЧИСЛО(15, 2))
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ЧекККМСерии.Серия ЕСТЬ NULL
	|						ТОГДА -ЧекККМТовары.СуммаНДС
	|					ИНАЧЕ -(ВЫРАЗИТЬ(ЧекККМТовары.СуммаНДС / ЧекККМТовары.Количество * ЧекККМСерии.Количество КАК ЧИСЛО(15, 2)))
	|				КОНЕЦ
	|		КОНЕЦ) КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА ЧекККМТоварыОрганизации.Поставщик <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
	|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
	|	КОНЕЦ КАК ТипЗапасов,
	|	ЧекККМТовары.НомерСтроки КАК НомерСтроки,
	|	ЧекККМТовары.КлючСвязи КАК КлючСвязи
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ЧекККМТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыПоЧекам КАК ДокументыПоЧекам
	|		ПО (ДокументыПоЧекам.Ссылка = ЧекККМТовары.Ссылка.ОтчетОРозничныхПродажах)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Серии КАК ЧекККМСерии
	|		ПО ЧекККМТовары.Ссылка = ЧекККМСерии.Ссылка
	|			И ЧекККМТовары.Номенклатура = ЧекККМСерии.Номенклатура
	|			И ЧекККМТовары.Характеристика = ЧекККМСерии.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ.ТоварыОрганизации КАК ЧекККМТоварыОрганизации
	|		ПО ЧекККМТовары.Ссылка = ЧекККМТоварыОрганизации.Ссылка
	|			И ЧекККМТовары.КлючСвязи = ЧекККМТоварыОрганизации.КлючСвязи
	|ГДЕ
	|	ЧекККМТовары.Ссылка.ОтчетОРозничныхПродажах = &Ссылка
	|	И ЧекККМТовары.Ссылка.Проведен
	|	И НЕ ЧекККМТовары.Ссылка.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Аннулированный)
	|	И НЕ ЧекККМТовары.Ссылка.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Отложенный)
	|	И НЕ ЧекККМТовары.Ссылка В
	|				(ВЫБРАТЬ
	|					ЧЕКИ54ФЗ.Ссылка КАК Ссылка
	|				ИЗ
	|					ЧЕКИ54ФЗ КАК ЧЕКИ54ФЗ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекККМТовары.Ссылка.ОтчетОРозничныхПродажах,
	|	ВЫБОР
	|		КОГДА ЧекККМТовары.Ссылка.СистемаНалогообложения = ЗНАЧЕНИЕ(перечисление.ТипыСистемНалогообложенияККТ.Патент)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ЧекККМТовары.Номенклатура,
	|	ЧекККМТовары.Характеристика,
	|	ЧекККМТовары.Упаковка,
	|	ЧекККМСерии.Серия,
	|	ЧекККМТовары.СтавкаНДС,
	|	ЧекККМТовары.Цена,
	|	ЧекККМТоварыОрганизации.Поставщик,
	|	ВЫБОР
	|		КОГДА ЧекККМТоварыОрганизации.Поставщик <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
	|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЧекККМТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|				И (ЧекККМТовары.Ссылка.ЧекККМПродажа.ОтчетОРозничныхПродажах <> &Ссылка
	|					ИЛИ ЧекККМТовары.Ссылка.ЧекККМПродажа = ЗНАЧЕНИЕ(Документ.ЧекККМ.ПустаяСсылка))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ЧекККМТовары.НомерСтроки,
	|	ЧекККМТовары.КлючСвязи
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтчетОРозничныхПродажахТовары.Ссылка,
	|	&ДеятельностьНаПатенте,
	|	ОтчетОРозничныхПродажахТовары.Номенклатура,
	|	ОтчетОРозничныхПродажахТовары.Характеристика,
	|	ОтчетОРозничныхПродажахТовары.Упаковка,
	|	ОтчетОРозничныхПродажахСерии.Серия,
	|	ЕСТЬNULL(ОтчетОРозничныхПродажахСерии.Количество, ОтчетОРозничныхПродажахТовары.Количество),
	|	ЕСТЬNULL(ОтчетОРозничныхПродажахСерии.Количество, ОтчетОРозничныхПродажахТовары.КоличествоУпаковок),
	|	ОтчетОРозничныхПродажахТовары.Цена,
	|	ОтчетОРозничныхПродажахТовары.СтавкаНДС,
	|	ОтчетОРозничныхПродажахТовары.Поставщик,
	|	ВЫБОР
	|		КОГДА ОтчетОРозничныхПродажахСерии.Серия ЕСТЬ NULL
	|			ТОГДА ОтчетОРозничныхПродажахТовары.Сумма
	|		ИНАЧЕ ВЫРАЗИТЬ(ОтчетОРозничныхПродажахТовары.Цена * ОтчетОРозничныхПродажахСерии.Количество КАК ЧИСЛО(15, 2))
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ОтчетОРозничныхПродажахСерии.Серия ЕСТЬ NULL
	|			ТОГДА ОтчетОРозничныхПродажахТовары.СуммаНДС
	|		ИНАЧЕ ВЫРАЗИТЬ(ОтчетОРозничныхПродажахТовары.СуммаНДС / ОтчетОРозничныхПродажахТовары.Количество КАК ЧИСЛО(15, 2))
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ОтчетОРозничныхПродажахТовары.Поставщик <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
	|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
	|	КОНЕЦ,
	|	ОтчетОРозничныхПродажахТовары.НомерСтроки,
	|	ОтчетОРозничныхПродажахТовары.КлючСвязи
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Товары КАК ОтчетОРозничныхПродажахТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах.Серии КАК ОтчетОРозничныхПродажахСерии
	|		ПО ОтчетОРозничныхПродажахТовары.Ссылка = ОтчетОРозничныхПродажахСерии.Ссылка
	|			И ОтчетОРозничныхПродажахТовары.Номенклатура = ОтчетОРозничныхПродажахСерии.Номенклатура
	|			И ОтчетОРозничныхПродажахТовары.Характеристика = ОтчетОРозничныхПродажахСерии.Характеристика
	|ГДЕ
	|	ОтчетОРозничныхПродажахТовары.Ссылка = &Ссылка
	|	И ОтчетОРозничныхПродажахТовары.Ссылка.Проведен
	|	И НЕ ОтчетОРозничныхПродажахТовары.Ссылка В
	|				(ВЫБРАТЬ
	|					ДокументыПоЧекам.Ссылка КАК Ссылка
	|				ИЗ
	|					ДокументыПоЧекам КАК ДокументыПоЧекам)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.ДеятельностьНаПатенте КАК ДеятельностьНаПатенте,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Упаковка КАК Упаковка,
	|	Товары.Серия КАК Серия,
	|	Товары.Количество КАК Количество,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Товары.Цена КАК Цена,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	Товары.Сумма КАК Сумма,
	|	Справочник_Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Справочник_Номенклатура.СтранаПроисхождения КАК СтранаПроисхождения,
	|	Товары.Поставщик КАК Поставщик,
	|	Товары.ТипЗапасов КАК ТипЗапасов,
	|	Товары.НомерСтроки КАК НомерСтрокиДокумента
	|ИЗ
	|	втТовары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Справочник_Номенклатура
	|		ПО Товары.Номенклатура = Справочник_Номенклатура.Ссылка
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И Товары.Количество > 0
	|	И Справочник_Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|	И Справочник_Номенклатура.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.ДеятельностьНаПатенте КАК ДеятельностьНаПатенте,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Упаковка КАК Упаковка,
	|	-Товары.Сумма КАК Сумма,
	|	Товары.Цена КАК Цена,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	-Товары.Количество КАК Количество,
	|	-Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Справочник_Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	-Товары.СуммаНДС КАК СуммаНДС,
	|	Товары.НомерСтроки КАК НомерСтрокиДокумента,
	|	ВложенныйЗапрос.ДатаПродажи КАК ДатаПродажи,
	|	ВложенныйЗапрос.НомерЧекаККМ КАК НомерЧекаККМПродажи
	|ИЗ
	|	втТовары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЧекККМТовары.Номенклатура КАК Номенклатура,
	|			ЧекККМТовары.Характеристика КАК Характеристика,
	|			МАКСИМУМ(ВозвратыДанныеОПродажах.Дата) КАК ДатаПродажи,
	|			МАКСИМУМ(ВозвратыДанныеОПродажах.НомерЧекаККМ) КАК НомерЧекаККМ
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ЧекиВозврата.Ссылка КАК Ссылка,
	|				ЧекиПродажи.Дата КАК Дата,
	|				ЧекиПродажи.НомерЧекаККМ КАК НомерЧекаККМ
	|			ИЗ
	|				Документ.ЧекККМ КАК ЧекиВозврата
	|					ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ КАК ЧекиПродажи
	|					ПО ЧекиВозврата.ЧекККМПродажа = ЧекиПродажи.Ссылка
	|			ГДЕ
	|				ЧекиВозврата.ОтчетОРозничныхПродажах = &Ссылка
	|				И ЧекиВозврата.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)) КАК ВозвратыДанныеОПродажах
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Товары КАК ЧекККМТовары
	|				ПО ВозвратыДанныеОПродажах.Ссылка = ЧекККМТовары.Ссылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ЧекККМТовары.Номенклатура,
	|			ЧекККМТовары.Характеристика) КАК ВложенныйЗапрос
	|		ПО Товары.Номенклатура = ВложенныйЗапрос.Номенклатура
	|			И Товары.Характеристика = ВложенныйЗапрос.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Справочник_Номенклатура
	|		ПО Товары.Номенклатура = Справочник_Номенклатура.Ссылка
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И Товары.Количество < 0
	|	И Справочник_Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|	И Справочник_Номенклатура.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|";
	
	Возврат ТекстЗапроса;
КонецФункции
Процедура УстановитьИспользованиеПКО(ИспользованиеПКО, Режим)
	Для Каждого Правило Из ИспользованиеПКО Цикл
		ИспользованиеПКО[Правило.Ключ] = Режим;
	КонецЦикла;
КонецПроцедуры
Процедура УстановитьПравилоДляДокумента(Ссылка, Правило, Тип, ДополнительноеУсловие = "")
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|   Товары.НомерСтроки
	|ИЗ
	|   Документ."+Тип+".Товары КАК Товары
	|       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|       ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|   Товары.Ссылка = &Ссылка
	|   И СправочникНоменклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)" + ДополнительноеУсловие;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Если Тип = "ОтчетОРозничныхПродажах" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И СправочникНоменклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)","");
	КонецЕсли;
	
	Если Тип = "РеализацияТоваров" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст," <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)"," = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Правило = Ложь;
	КонецЕсли;
КонецПроцедуры
Процедура УстановитьПравилоДляПКСТабЧасти(КомпонентыОбмена, ИмяПКО, ИмяТЧ, ИмяСвойства, ИскатьВИменахФормата, ИмяНовогоПКС)
	СтрокаПравилКонвертации = КомпонентыОбмена.ПравилаКонвертацииОбъектов.Найти(ИмяПКО, "ИмяПКО");
	
	Если ИскатьВИменахФормата Тогда
		СвойствоТЧ = СтрокаПравилКонвертации.СвойстваТабличныхЧастей.Найти(ИмяТЧ, "ТЧФормата");
		СтрокаСвойствТЧ = СвойствоТЧ.Свойства.Найти(ИмяСвойства, "СвойствоФормата");
	Иначе
		СвойствоТЧ = СтрокаПравилКонвертации.СвойстваТабличныхЧастей.Найти(ИмяТЧ, "ТЧКонфигурации");
		СтрокаСвойствТЧ = СвойствоТЧ.Свойства.Найти(ИмяСвойства, "СвойствоКонфигурации");
	КонецЕсли;
	
	СтрокаСвойствТЧ.ПравилоКонвертацииСвойства = ИмяНовогоПКС;
КонецПроцедуры
Функция ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO)
	// ДанныеXDTO содержат только 1 свойство, 
	// значит выполняется загрузка значения свойства, а не самого объекта. 
	Возврат ДанныеXDTO.Количество() = 1;
КонецФункции

#КонецОбласти
#КонецОбласти
