
///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Поиск кассира по считанному коду.
//
// Параметры
//  Объект - ДанныеФормыСткруктура - форма, в которой переопредляются значения.
//  Штрихкод - Строка - код, по которому выполняется поиск.
//
Процедура ВыполнитьПоискКассира(Объект, Штрихкод) Экспорт
	ШтрихкодированиеРМКПереопределяемый.ВыполнитьПоискКассира(Объект, Штрихкод);
КонецПроцедуры

// Поиск упаковки и вычисление МРЦ для табачной продукции.
//
// Параметры
//  СтрокаТовары - ДанныеФормыЭлементКоллекции - строка с заполненнмы данными по товару.
//  КодМарки - Строка - код марки.
//  ОсобенностьУчета - ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры - особенность учета товара.
//  ПараметрыШтрихкодирования - Структура - параметры для обработки результата.
//
Процедура РазобратьМаркуИЗаполнитьДанные(СтрокаТовары, КодМарки, ОсобенностьУчета, ПараметрыШтрихкодирования) Экспорт
	
	// Для табака проверяем МРЦ.
	Если ОбщегоНазначенияРМКПереопределяемый.ЭтоТабачнаяПродукция(ОсобенностьУчета) Тогда
		
		СимволGS1 = МенеджерОборудованияМаркировкаКлиентСервер.РазделительGS1();
		Разделитель = МенеджерОборудованияМаркировкаКлиентСервер.ЭкранированныйСимволGS1();
		КодМаркировкиОригинал = СтрЗаменить(КодМарки, Разделитель, СимволGS1);
		ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(
			КодМаркировкиОригинал, Перечисления.ВидыПродукцииИС.Табак);
			
		Если ОбщегоНазначенияРМККлиентСервер.ЕстьСвойство(ДанныеРазбора, "СоставКодаМаркировки") Тогда
			
			СоставКодаМаркировки = ДанныеРазбора.СоставКодаМаркировки;
			Если ОбщегоНазначенияРМККлиентСервер.ЕстьСвойство(СоставКодаМаркировки, "МРЦСтрокой")
				И ЗначениеЗаполнено(СоставКодаМаркировки.МРЦСтрокой)
				И ПараметрыШтрихкодирования.УчитыватьМРЦ Тогда
				
				МРЦ = СоставКодаМаркировки.МРЦ;
				СтрокаТовары.МРЦ = МРЦ;
				МинимумОтМРЦ = МРЦ*0.75;
				
				Если НЕ МРЦ = 0 Тогда
					
					Если СтрокаТовары.Цена > МРЦ ИЛИ СтрокаТовары.Цена < МинимумОтМРЦ Тогда
						СтрокаТовары.Цена = МРЦ;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПараметрыШтрихкодирования.КонтролироватьЕМРЦ Тогда
				
				ЕМРЦ = 0;
				Коэффициент = 1;
				УпаковкаТовара = СтрокаТовары.Упаковка;
				Если ЗначениеЗаполнено(УпаковкаТовара) Тогда
					Коэффициент = УпаковкаТовара.Коэффициент;
				КонецЕсли;
				ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.Табак;
				ОбщегоНазначенияРМКПереопределяемый.ПолучитьЦенуЕМРЦ(ВидМаркированнойПродукции,, ЕМРЦ);
				
				Если СтрокаТовары.Цена < ЕМРЦ*Коэффициент И НЕ ЕМРЦ = 0 Тогда
					СтрокаТовары.Цена = ЕМРЦ*Коэффициент;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ОбщегоНазначенияРМККлиентСервер.ЕстьСвойство(ДанныеРазбора, "ВидУпаковки")
				И ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
				
				Если Не ЗначениеЗаполнено(СтрокаТовары.Упаковка) Тогда
					
					НайтиУпаковкуДляТовара(СтрокаТовары);
					Если ЗначениеЗаполнено(СтрокаТовары.Упаковка) Тогда
						ЗаполнитьПредставлениеЕдиницыИзмерения(СтрокаТовары);
					Иначе
						ПараметрыШтрихкодирования.Вставить("УпаковкаНеНайдена");
						ПараметрыШтрихкодирования.Вставить("НоменклатураБезУпаковки", СтрокаТовары.Номенклатура);
						УдалитьТекущуюСтроку(ПараметрыШтрихкодирования.Объект, СтрокаТовары);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ОбщегоНазначенияРМКПереопределяемый.ЭтоМолочнаяПродукция(ОсобенностьУчета) Тогда
		
		СимволGS1 = МенеджерОборудованияМаркировкаКлиентСервер.РазделительGS1();
		Разделитель = МенеджерОборудованияМаркировкаКлиентСервер.ЭкранированныйСимволGS1();
		КодМаркировкиОригинал = СтрЗаменить(КодМарки, Разделитель, СимволGS1);
		ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(КодМаркировкиОригинал);
			
		Если ОбщегоНазначенияРМККлиентСервер.ЕстьСвойство(ДанныеРазбора, "СоставКодаМаркировки") Тогда
				
			СоставКодаМаркировки = ДанныеРазбора.СоставКодаМаркировки;
			Если ОбщегоНазначенияРМККлиентСервер.ЕстьСвойство(СоставКодаМаркировки, "МассаНеттоВКг")
				И НЕ СоставКодаМаркировки.МассаНеттоВКг = Неопределено Тогда
				
				СтрокаТовары.Количество = СоставКодаМаркировки.МассаНеттоВКг;
				СтрокаТовары.КоличествоУпаковок = СоставКодаМаркировки.МассаНеттоВКг;
				СтрокаТовары.Весовой = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаТовары.ИзменятьКоличествоМаркируемойПродукции = СтрокаТовары.Весовой;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполнение представления единицы измерения, в соответствии с заполненностью упаковки.
//
// Параметры
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка с заполненнмы данными по товару.
//
Процедура ЗаполнитьПредставлениеЕдиницыИзмерения(ТекущаяСтрока) Экспорт
	
	ПреставлениеЕИ = Неопределено;
	
	Упаковка = ТекущаяСтрока.Упаковка;
	
	Если ЗначениеЗаполнено(Упаковка) Тогда
		Если ТипЗнч(Упаковка) = Тип("Строка") Тогда
			ПреставлениеЕИ = Упаковка;
		Иначе
			ПреставлениеЕИ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Упаковка, "Наименование");
		КонецЕсли;
	Иначе
		ПреставлениеЕИ = ШтрихкодированиеРМКПереопределяемый.ПредставлениеЕдиницыИзмерения(ТекущаяСтрока.Номенклатура);
	КонецЕсли;
	
	ТекущаяСтрока.ПредставлениеЕдиницыИзмерения = ПреставлениеЕИ;
	
КонецПроцедуры

// Возвращает структуру дисконтной карты
//
// Параметры:
//  МагнитныйКод - Строка - код, по которому выполняется поиск.
//
// Возвращаемое значение:
//  Результат - Структура,Неопределено - Параметры дисконтной карты, или Неопределено если карта не найдена
//
Функция ПолучитьДисконтнуюКарту(МагнитныйКод) Экспорт
	
	НомерТелефона = НомерТелефонаБезДопСимволов(МагнитныйКод);
	Возврат ШтрихкодированиеРМКПереопределяемый.ДанныеКартыЛояльностиПоМагнитномуКоду(МагнитныйКод, НомерТелефона);
	
КонецФункции

// Возвращает номер телефона без дополнительных символов: ()- и без пробелов
//
// Параметры:
//  НомерТелефонаИсходный - Строка - Номер телефона в исходном виде.
//  БезЗнакаПлюс - Булево - Возможность удалять знак +
//
// Возвращаемое значение:
//  Строка - Номер телефона без скобок, без знаков +- и без пробелов
//
Функция НомерТелефонаБезДопСимволов(НомерТелефонаИсходный, БезЗнакаПлюс = Ложь) Экспорт
	
	НомерТелефона = СокрЛП(НомерТелефонаИсходный);
	НомерТелефона = СтрЗаменить(НомерТелефона, "(", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, ")", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, "-", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, " ", "");
	
	Если БезЗнакаПлюс Тогда
		НомерТелефона = СтрЗаменить(НомерТелефона, "+", "");
	КонецЕсли;
	
	Возврат НомерТелефона;
	
КонецФункции

// Заполнение формы значениями дисконтной карты.
//
// Параметры
//  Форма - ФормаКлиентскогоПриложения - форма, в которой переопредляются значения.
//  Параметры - Структура - параметры дисконтной карты.
//
Процедура ЗаполнитьФормуПоДисконтнойКарте(Форма, Параметры) Экспорт
	
	Если ОбщегоНазначенияРМККлиентСервер.ЕстьСвойство(Форма, "Объект") Тогда
		
		Форма.Объект.ДисконтнаяКарта = Параметры.КартаЛояльности;
		Форма.Объект.Контрагент = Параметры.Контрагент;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.КодКарты) Тогда
		Форма.НайденнаяКартаНомер = Параметры.КодКарты;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.АдресЭПВладельцаКарты) Тогда
		
		Форма.НайденнаяКартаПочта = Параметры.АдресЭПВладельцаКарты;
		Форма.ОтправкаЧекаПочта = Параметры.АдресЭПВладельцаКарты;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.НомерТелефонаВладельцаКарты) Тогда
		
		Форма.НайденнаяКартаТелефон = Параметры.НомерТелефонаВладельцаКарты;
		Форма.ОтправкаЧекаТелефон = Параметры.НомерТелефонаВладельцаКарты;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ДатаРождения) Тогда
		Форма.НайденнаяКартаДатаРождения = Формат(Параметры.ДатаРождения, "ДЛФ=Д");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СокрЛП(Параметры.ФИО)) Тогда
		Форма.НайденнаяКартаФИО = Параметры.ФИО;
	КонецЕсли;
	
КонецПроцедуры

// Добавление товара в корзину при сканировании
//
// Параметры
//  ПараметрыДляОбработкиШтрихкода - Структура - данные для обработки штрихкода.
//  СтрокаТовары - Структура - данные строки товара для добавления в корзину.
//
Процедура ДобавитьСтрокуВТабличнуюЧастьПоШтрихкоду(ПараметрыДляОбработкиШтрихкода, СтрокаТовары) Экспорт
	
	Штрихкод = ПараметрыДляОбработкиШтрихкода.Штрихкод;
	
	ДанныеМаркировки = Неопределено;
	ПараметрыДляОбработкиШтрихкода.Свойство("ДанныеМаркировки", ДанныеМаркировки);
	Если ДанныеМаркировки = Неопределено Тогда
		ДанныеМаркировки = МенеджерОборудованияМаркировкаКлиентСервер.РазобратьШтриховойКодТовара(Штрихкод);
	КонецЕсли;
	
	ЭтоКодМарки = ЭтоКодМаркировки(ДанныеМаркировки);
	
	Если НЕ СтрокаТовары = Неопределено Тогда
		
		// Маркируемый товар добавляем отдельной строкой.
		Если СтрокаТовары.Маркируемый Тогда
			
			Если ОбщегоНазначенияРМКПереопределяемый.ЭтоАлкогольнаяПродукция(СтрокаТовары.ОсобенностьУчета) Тогда
				НужнаПроверкаСтатусаМарки = ШтрихкодированиеРМКПереопределяемый.НужнаПроверкаСтатусаМарки();
				Если НужнаПроверкаСтатусаМарки Тогда
					ПараметрыДляОбработкиШтрихкода.Вставить("СтрокаТовары", СтрокаТовары);
					ШтрихкодированиеРМКПереопределяемый.ПроверитьСтатусМарки(ПараметрыДляОбработкиШтрихкода);
					Если ПараметрыДляОбработкиШтрихкода.Свойство("ОшибкаЕГАИС") Тогда
						Возврат;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		
			ДобавитьСтрокуСМаркируемымТоваром(ПараметрыДляОбработкиШтрихкода, СтрокаТовары, ЭтоКодМарки);
			ПараметрыДляОбработкиШтрихкода.Вставить("СтрокаТовараДобавлена");
		ИначеЕсли СтрокаТовары.НеобходимостьВводаСерии Тогда
			ДобавитьСтрокуВТабличнуюЧасть(ПараметрыДляОбработкиШтрихкода, СтрокаТовары);
			ПараметрыДляОбработкиШтрихкода.Вставить("СтрокаТовараДобавлена");
		Иначе
			
			МассивСтрок = ПараметрыДляОбработкиШтрихкода.Объект.Товары.НайтиСтроки(СтруктураПоискаТовара(СтрокаТовары));
			
			Если МассивСтрок.Количество() > 0 Тогда
				ИзменитьСтрокуВТабличнойЧасти(ПараметрыДляОбработкиШтрихкода, МассивСтрок[0], СтрокаТовары);
			Иначе
				ДобавитьСтрокуВТабличнуюЧасть(ПараметрыДляОбработкиШтрихкода, СтрокаТовары);
			КонецЕсли;
			
			ПараметрыДляОбработкиШтрихкода.Вставить("СтрокаТовараДобавлена");
			
		КонецЕсли;
		
	Иначе
		
		// Если по марке не нашли товар, то пробуем искать по EAN или GTIN.
		Если ДанныеМаркировки.Разобран И ЭтоКодМарки Тогда
			
			Если ОбщегоНазначенияРМККлиентСервер.ЕстьСвойство(ДанныеМаркировки, "ТипИдентификатораТовара")
				И (ДанныеМаркировки.ТипИдентификатораТовара = Перечисления.ТипыИдентификаторовТовараККТ.КодТовараВФорматеЕГАИС3
					Или ДанныеМаркировки.ТипИдентификатораТовара = Перечисления.ТипыИдентификаторовТовараККТ.КодТовараВФорматеЕГАИС2) Тогда
					
				ПараметрыДляОбработкиШтрихкода.Вставить("ПодтвердитьВыборАлкоголя");
				ПараметрыДляОбработкиШтрихкода.Вставить("КодМарки", Штрихкод);
				ПараметрыДляОбработкиШтрихкода.Вставить("EAN", ДанныеМаркировки.EAN);
				
			Иначе
				
				ПараметрыДляОбработкиШтрихкода.Вставить("ТоварНеНайденПоМарке");
				ПараметрыДляОбработкиШтрихкода.Вставить("КодМарки", Штрихкод);
				ПараметрыДляОбработкиШтрихкода.Вставить("EAN", ДанныеМаркировки.EAN);
				
			КонецЕсли;
			
		Иначе
			
			ПараметрыДляОбработкиШтрихкода.Вставить("ТоварНеНайденПоШтрихкоду");
			ПараметрыДляОбработкиШтрихкода.Вставить("EAN", ДанныеМаркировки.EAN);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция осуществляет формирование штрихкода EAN13 для
// Сотрудников
//
// Возвращаемое значение:
//  Строка
//
Функция СформироватьШтрихкодEAN13Кассира() Экспорт 

	ПрефиксСотрудника= "1";
	ПрефиксВнутреннегоШтрихкода = "0";
	
	Код = Мин(ПоследнийКодСотрудника(ПрефиксСотрудника, ПрефиксВнутреннегоШтрихкода) + 1,
		МаксимальныйКодШтучногоТовара(13));

	Возврат ПолучитьШтрихкодПоКоду(Код, ПрефиксСотрудника, ПрефиксВнутреннегоШтрихкода, 13);

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПоследнийКодСотрудника(Префикс, ПрефиксВнутреннегоШтрихкода) Экспорт
	
	Результат = 0;
	
	ТекстЗапросаПоУмолчанию = "ВЫБРАТЬ
	|	МАКСИМУМ(ПОДСТРОКА(Штрихкоды.Штрихкод, 5, 8)) КАК Код
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Штрихкод ПОДОБНО &ШаблонШтрихкод
	|	И ЛОЖЬ";
	
	ПереопределенныйТекстЗапроса =
		ОбщегоНазначенияРМККлиентСерверПереопределяемый.ТекстЗапросаПоследнегоНазначенногоШтрихкодаСотрудника();
		
	ТекстЗапроса = ?(ЗначениеЗаполнено(ПереопределенныйТекстЗапроса),
		ПереопределенныйТекстЗапроса, ТекстЗапросаПоУмолчанию);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	ШаблонШтрихкод = СтрШаблон("2%1%2_________", Префикс, ПрефиксВнутреннегоШтрихкода);
	
	Запрос.УстановитьПараметр("ШаблонШтрихкод", ШаблонШтрихкод);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ОписаниеТипаЧисла = Новый ОписаниеТипов("Число");
		Результат = ОписаниеТипаЧисла.ПривестиЗначение(Выборка.Код);
		
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

// Функция возвращает максимальный код штучного товара.
//
// Возвращаемое значение:
//  Число - Максимальный код штучного товара.
//
Функция МаксимальныйКодШтучногоТовара(EAN)
	
	Если EAN = 13 Тогда
		Возврат 99999999;
	КонецЕсли;
	
	Если EAN = 8 Тогда
		Возврат 999999;
	КонецЕсли;
	
	ВызватьИсключение НСтр("ru = 'Недопустимая длина EAN. Ожидается 8 или 13.'");
	
КонецФункции

Функция ПолучитьШтрихкодПоКоду(Код, ПрефиксШтучногоТовара, ПрефиксВнутреннегоШтрихкода, EAN) Экспорт
	
	Если EAN = 8 Тогда
		Штрихкод = СтрШаблон("2%1", Формат(Код, "ЧЦ=6; ЧВН=; ЧГ="));
	ИначеЕсли EAN = 13 Тогда
		
		КоличествоВедущихНулей = 10 - СтрДлина(Код);
		Штрихкод = СтрШаблон("2%1%2%3", ПрефиксШтучногоТовара, ПрефиксВнутреннегоШтрихкода,
			Формат(Код, СтрШаблон("ЧЦ=%1; ЧВН=; ЧГ=", КоличествоВедущихНулей)));
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Недопустимая длина EAN. Ожидается 8 или 13.'")
	КонецЕсли;
	Результат = СтрШаблон("%1%2", Штрихкод, КонтрольныйСимволEAN(ШтрихКод, EAN));
	
	Возврат Результат;

КонецФункции

// Функция вычисляет контрольный символ кода EAN
//
// Параметры:
//  ШтрихКод     - штрихкод (без контрольной цифры)
//  Тип          - тип штрихкода: 13 - EAN13, 8 - EAN8
//
// Возвращаемое значение:
//  Контрольный символ штрихкода
//
Функция КонтрольныйСимволEAN(Знач ШтрихКод, Знач Тип)
	
	Четное = 0;
	Нечетное = 0;
	
	КоличествоИтераций = ?(Тип = 13, 6, 4);
	
	Для Индекс = 1 По КоличествоИтераций Цикл
		Если (Тип = 8) И (Индекс = КоличествоИтераций) Тогда
		Иначе
			Четное = Четное + Сред(ШтрихКод, 2 * Индекс, 1);
		КонецЕсли;
		Нечетное = Нечетное + Сред(ШтрихКод, 2 * Индекс - 1, 1);
	КонецЦикла;
	
	Если Тип = 13 Тогда
		Четное = Четное * 3;
	Иначе
		Нечетное = Нечетное * 3;
	КонецЕсли;
	
	КонтЦифра = 10 - (Четное + Нечетное) % 10;
	
	Возврат ?(КонтЦифра = 10, "0", Строка(КонтЦифра));
	
КонецФункции

Процедура ДобавитьСтрокуСМаркируемымТоваром(ПараметрыДляОбработкиШтрихкода, СтрокаТовары, ЭтоКодМарки, КодМаркиПриПоискеПоGTIN = "")
	
	Если ПараметрыДляОбработкиШтрихкода.Свойство("ЭтоЧекКоррекции") И
		
		ПараметрыДляОбработкиШтрихкода.ЭтоЧекКоррекции = Истина Тогда
		Возврат;
		
	КонецЕсли;
	
	Если ПараметрыДляОбработкиШтрихкода.ИспользоватьЗапретПродаж
		И ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
		
		КэшЗапретовПродаж = ПараметрыДляОбработкиШтрихкода.КэшЗапретовПродаж;

				ДействующиеЗапреты = ОбщегоНазначенияРМК.НаличиеЗапретовПродажи(
					СтрокаТовары.Номенклатура, КэшЗапретовПродаж);
				
				Если ДействующиеЗапреты.Количество() Тогда
					
					ПараметрыДляОбработкиШтрихкода.ДействующиеЗапреты = ДействующиеЗапреты;
					Возврат;
					
				КонецЕсли;
				
	КонецЕсли;
	
	Отказ = Ложь;
	ПроверитьНеобходимостьВводаМаркиДляНоменклатуры(ПараметрыДляОбработкиШтрихкода, СтрокаТовары, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийШтрихкод = ?(ЗначениеЗаполнено(КодМаркиПриПоискеПоGTIN), КодМаркиПриПоискеПоGTIN, СтрокаТовары.Штрихкод);
	
	Если ЭтоКодМарки Тогда
		
		// Проверка на наличие марки.
		МассивСтрок = ПараметрыДляОбработкиШтрихкода.Объект.Товары.НайтиСтроки(Новый Структура("КодМаркировки", ТекущийШтрихкод));
			
		Если МассивСтрок.Количество() > 0 Тогда
			Возврат;
		КонецЕсли;
		
		// Найти строку, подставить туда код марки и вернуться. Сменить страницу в форме РМК на Оплата.
		Если ПараметрыДляОбработкиШтрихкода.Свойство("НомерСтроки") Тогда
			
			НайденнаяСтрока = ПараметрыДляОбработкиШтрихкода.Объект.Товары.НайтиПоИдентификатору(
				ПараметрыДляОбработкиШтрихкода.НомерСтроки);
			
			Если Не НайденнаяСтрока = Неопределено Тогда
				
				Если НайденнаяСтрока.Количество = 0 И СтрокаТовары.Количество > 0 Тогда
					НайденнаяСтрока.Количество = СтрокаТовары.Количество;
					НайденнаяСтрока.КоличествоУпаковок = СтрокаТовары.КоличествоУпаковок;
				КонецЕсли;
				
				НайденнаяСтрока.КодМаркировки = ТекущийШтрихкод;
				ПараметрыДляОбработкиШтрихкода.Вставить("МаркаВведена");
				ПараметрыДляОбработкиШтрихкода.Вставить("Организация", НайденнаяСтрока.Организация);
				РазобратьМаркуИЗаполнитьДанные(НайденнаяСтрока, ТекущийШтрихкод, СтрокаТовары.ОсобенностьУчета,
					ПараметрыДляОбработкиШтрихкода); 
				Возврат;
				
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ПараметрыДляОбработкиШтрихкода.Свойство("НеобходимоВвестиМарку") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НоваяСтрокаВРМК = ПараметрыДляОбработкиШтрихкода.Объект.Товары.Добавить();
	НоваяСтрокаВРМК.ИдентификаторСтроки = Новый УникальныйИдентификатор;
	ЗаполнитьЗначенияСвойств(НоваяСтрокаВРМК, СтрокаТовары,, "Штрихкод");
	
	СистемаНалогообложенияПоУмолчанию = ?( ПараметрыДляОбработкиШтрихкода.Свойство("СистемаНалогообложенияПоУмолчанию")
		И ЗначениеЗаполнено(ПараметрыДляОбработкиШтрихкода.СистемаНалогообложенияПоУмолчанию),
			ПараметрыДляОбработкиШтрихкода.СистемаНалогообложенияПоУмолчанию,
			Неопределено);
		
	СтавкаНДС = ПродажиРМК.АктуальнаяСтавкаНДСДляТовара(
		ПараметрыДляОбработкиШтрихкода.Объект,
		НоваяСтрокаВРМК,
		СистемаНалогообложенияПоУмолчанию);
		
	НоваяСтрокаВРМК.СтавкаНДС = СтавкаНДС;
	
	НоваяСтрокаВРМК.НеобходимостьВводаКодаМаркировки = Истина;
	
	Если ЭтоКодМарки Тогда
		НоваяСтрокаВРМК.КодМаркировки = ТекущийШтрихкод;
	Иначе
		НоваяСтрокаВРМК.Штрихкод = ТекущийШтрихкод;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КодМаркиПриПоискеПоGTIN) Тогда
		НоваяСтрокаВРМК.КодМаркировки = КодМаркиПриПоискеПоGTIN;
	КонецЕсли;
	
	ЗаполнитьПредставлениеЕдиницыИзмерения(НоваяСтрокаВРМК);
	РазобратьМаркуИЗаполнитьДанные(НоваяСтрокаВРМК, ТекущийШтрихкод, СтрокаТовары.ОсобенностьУчета, ПараметрыДляОбработкиШтрихкода);
	
	ПараметрыДляОбработкиШтрихкода.ИдентификаторСтроки = НоваяСтрокаВРМК.ПолучитьИдентификатор();
	
КонецПроцедуры

Процедура ПроверитьНеобходимостьВводаМаркиДляНоменклатуры(ПараметрыДляОбработкиШтрихкода, СтрокаТовары, Отказ)
	
	Если ОбщегоНазначенияРМККлиентСервер.ЕстьСвойство(ПараметрыДляОбработкиШтрихкода, "ТекущаяНоменклатура") Тогда
		
		Если Не ПараметрыДляОбработкиШтрихкода.ТекущаяНоменклатура = СтрокаТовары.Номенклатура Тогда
			
			ПараметрыДляОбработкиШтрихкода.Вставить("НеверныйКод");
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоКодМаркировки(ДанныеМаркировки)
	
	Если Не ОбщегоНазначенияРМККлиентСервер.ЕстьСвойство(ДанныеМаркировки, "ТипИдентификатораТовара") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТипИдентификатораТовара = ДанныеМаркировки.ТипИдентификатораТовара;
	
	ТипыИдентификаторов = Перечисления.ТипыИдентификаторовТовараККТ;
	
	Возврат (ТипИдентификатораТовара = ТипыИдентификаторов.ИзделияИзНатуральногоМеха 
		ИЛИ ТипИдентификатораТовара = ТипыИдентификаторов.КодТовараВФорматеDataMatrixGS1
		ИЛИ ТипИдентификатораТовара = ТипыИдентификаторов.КодТовараВФорматеЕГАИС2
		ИЛИ ТипИдентификатораТовара = ТипыИдентификаторов.КодТовараВФорматеЕГАИС3);
	
КонецФункции

Процедура ДобавитьСтрокуВТабличнуюЧасть(ПараметрыДляОбработкиШтрихкода, СтрокаТовары, ДействующиеЗапреты = Неопределено)
	

	Если ПараметрыДляОбработкиШтрихкода.ИспользоватьЗапретПродаж
		И ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
		
		КэшЗапретовПродаж = ПараметрыДляОбработкиШтрихкода.КэшЗапретовПродаж;

				ДействующиеЗапреты = ОбщегоНазначенияРМК.НаличиеЗапретовПродажи(
					СтрокаТовары.Номенклатура, КэшЗапретовПродаж);
				
				Если ДействующиеЗапреты.Количество() Тогда
					
					ПараметрыДляОбработкиШтрихкода.ДействующиеЗапреты = ДействующиеЗапреты;
					Возврат;
					
				КонецЕсли;
				
		
	КонецЕсли;
	
	Отказ = Ложь;
	ПроверитьНеобходимостьВводаМаркиДляНоменклатуры(ПараметрыДляОбработкиШтрихкода, СтрокаТовары, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = ПараметрыДляОбработкиШтрихкода.Объект.Товары.Добавить();
	НоваяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор;
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
	
	СистемаНалогообложенияПоУмолчанию = ?( ПараметрыДляОбработкиШтрихкода.Свойство("СистемаНалогообложенияПоУмолчанию")
		И ЗначениеЗаполнено(ПараметрыДляОбработкиШтрихкода.СистемаНалогообложенияПоУмолчанию),
			ПараметрыДляОбработкиШтрихкода.СистемаНалогообложенияПоУмолчанию,
			Неопределено);
			
	СтавкаНДС = ПродажиРМК.АктуальнаяСтавкаНДСДляТовара(
		ПараметрыДляОбработкиШтрихкода.Объект,
		НоваяСтрока,
		СистемаНалогообложенияПоУмолчанию);
		
	НоваяСтрока.СтавкаНДС = СтавкаНДС;
	
	ЗаполнитьПредставлениеЕдиницыИзмерения(НоваяСтрока);
	
	ПараметрыДляОбработкиШтрихкода.ИдентификаторСтроки = НоваяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры

Процедура ИзменитьСтрокуВТабличнойЧасти(ПараметрыДляОбработкиШтрихкода, НайденнаяСтрока, ДанныеПоиска)
	
	Отказ = Ложь;
	ПроверитьНеобходимостьВводаМаркиДляНоменклатуры(ПараметрыДляОбработкиШтрихкода, НайденнаяСтрока, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НайденнаяСтрока.ИдентификаторСтроки) Тогда
		НайденнаяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	Если ПараметрыДляОбработкиШтрихкода.ИспользоватьЗапретПродаж
		И ЗначениеЗаполнено(НайденнаяСтрока.Номенклатура) Тогда
		
		КэшЗапретовПродаж = ПараметрыДляОбработкиШтрихкода.КэшЗапретовПродаж;

				ДействующиеЗапреты = ОбщегоНазначенияРМК.НаличиеЗапретовПродажи(
					НайденнаяСтрока.Номенклатура, КэшЗапретовПродаж);
				
				Если ДействующиеЗапреты.Количество() Тогда
					
					ПараметрыДляОбработкиШтрихкода.ДействующиеЗапреты = ДействующиеЗапреты;
					Возврат;
					
				КонецЕсли;
				
		
	КонецЕсли;
	
	НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + ДанныеПоиска.Количество;
	НайденнаяСтрока.КоличествоУпаковок = НайденнаяСтрока.КоличествоУпаковок + ДанныеПоиска.КоличествоУпаковок;
	
	ЗаполнитьПредставлениеЕдиницыИзмерения(НайденнаяСтрока);
	
	ПараметрыДляОбработкиШтрихкода.ИдентификаторСтроки = НайденнаяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры

Процедура НайтиУпаковкуДляТовара(ТекущаяСтрока)
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		
		Номенклатура = ТекущаяСтрока.Номенклатура;
		ДанныеУпаковки = ШтрихкодированиеРМКПереопределяемый.ДанныеУпаковкиДляТовара(Номенклатура);
		ТекущаяСтрока.Упаковка = ДанныеУпаковки.Упаковка;
		
	КонецЕсли;

КонецПроцедуры

Процедура УдалитьТекущуюСтроку(Объект, ТекущаяСтрока)
	Объект.Товары.Удалить(ТекущаяСтрока);
КонецПроцедуры

Функция СтруктураПоискаТовара(ВыборкаПоТовару)
	
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("Номенклатура", ВыборкаПоТовару.Номенклатура);
	СтруктураПоиска.Вставить("Характеристика", ВыборкаПоТовару.Характеристика);
	СтруктураПоиска.Вставить("Упаковка", ВыборкаПоТовару.Упаковка);
	СтруктураПоиска.Вставить("ЭтоНабор", Ложь);
	СтруктураПоиска.Вставить("ТоварКЗамене", Ложь);
	
	Возврат СтруктураПоиска;
	
КонецФункции

#КонецОбласти