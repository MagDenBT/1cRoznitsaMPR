
#Область СлужебныеПроцедурыИФункции

Функция Тест_РассчитатьСкидку(СтрокаДереваСкидок, ПараметрыВнешнейОбработки, ПараметрыРасчета) Экспорт
	
	РезультатРасчета = Новый Структура;
	
	ТаблицаСкидок = СкидкиНаценкиСервер.ПустаяТаблицаСкидок();
	ТаблицаПодарков = СкидкиНаценкиСервер.ПустаяТаблицаПодарков();
	ЭтоУмножение = СтрокаДереваСкидок.ВариантСовместногоПримененияРодителя = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.ПоследовательноеПрименение;
	Если ПараметрыВнешнейОбработки = Неопределено Тогда
		ТекстИсключения = НСтр("ru = 'Не заполнены параметры расчета скидки в скидке ""%1""'");
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИсключения, СтрокаДереваСкидок.СкидкаНаценка);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	ОстаточнаяСтоимость = ПараметрыВнешнейОбработки.ОстаточнаяСтоимость;
	СегментНоменклатуры = ПараметрыВнешнейОбработки.СегментНоменклатуры;
	СписокНоменклатуры = ПараметрыВнешнейОбработки.СписокНоменклатуры;
	СегментСписок = ПараметрыВнешнейОбработки.СегментСписок;
	НаКаждый = ПараметрыВнешнейОбработки.НаКаждый;
	СуммаПроцент = ПараметрыВнешнейОбработки.СуммаПроцент;
	АлгоритмРасчета = ПараметрыВнешнейОбработки.АлгоритмРасчета;
	Если НаКаждый = 0 Или ОстаточнаяСтоимость = 0 Тогда
		РезультатРасчета.Вставить("ТаблицаСкидок", ТаблицаСкидок);
		РезультатРасчета.Вставить("ТаблицаПодарков", ТаблицаПодарков);
		Возврат РезультатРасчета;
	КонецЕсли;
							
	Запрос = Новый Запрос;
	//Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	Товары.КлючСвязи КАК КлючСвязи,
	//|	Товары.Номенклатура КАК Номенклатура,
	//|	Товары.Характеристика КАК Характеристика,
	//|	Товары.Количество КАК Количество,
	//|	Товары.Цена КАК Цена,
	//|	Товары.Сумма КАК Сумма,
	//|	Товары.СуммаВГруппе КАК СуммаВГруппе,
	//|	Товары.СуммаБезСкидки КАК СуммаБезСкидки,
	//|	Товары.ИсключенаИзРасчета КАК ИсключенаИзРасчета
	//|ПОМЕСТИТЬ ТоварыДокумента
	//|ИЗ
	//|	&Товары КАК Товары
	//|";
	//Запрос.УстановитьПараметр("Товары", СтрокаДереваСкидок.СтруктураДополнительныхДанных.ТаблицаТоваровПоСегментам);
	//Запрос.Выполнить();
	
	Если СегментСписок = 0 Тогда 
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Товары.КлючСвязи КАК КлючСвязи,
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Количество КАК Количество,
		|	Товары.Цена КАК Цена,
		|	Товары.Сумма КАК Сумма,
		|	Товары.СуммаВГруппе КАК СуммаВГруппе,
		|	Товары.СуммаБезСкидки КАК СуммаБезСкидки
		|ИЗ
		|	ТоварыДокумента КАК Товары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
		|		ПО (НоменклатураСегмента.Сегмент = &Сегмент)
		|			И Товары.Номенклатура = НоменклатураСегмента.Номенклатура
		|			И Товары.Характеристика = НоменклатураСегмента.Характеристика
		|ГДЕ
		|	НЕ Товары.ИсключенаИзРасчета";
		Запрос.УстановитьПараметр("Сегмент", СегментНоменклатуры);
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Товары.КлючСвязи КАК КлючСвязи,
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Количество КАК Количество,
		|	Товары.Цена КАК Цена,
		|	Товары.Сумма КАК Сумма,
		|	Товары.СуммаВГруппе КАК СуммаВГруппе,
		|	Товары.СуммаБезСкидки КАК СуммаБезСкидки,
		|	Товары.ИсключенаИзРасчета КАК ИсключенаИзРасчета
		|ПОМЕСТИТЬ ТоварыДокумента
		|ИЗ
		|	&Товары КАК Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.КлючСвязи КАК КлючСвязи,
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Количество КАК Количество,
		|	Товары.Цена КАК Цена,
		|	Товары.Сумма КАК Сумма,
		|	Товары.СуммаВГруппе КАК СуммаВГруппе,
		|	Товары.СуммаБезСкидки КАК СуммаБезСкидки
		|ИЗ
		|	ТоварыДокумента КАК Товары
		|ГДЕ
		|	НЕ Товары.ИсключенаИзРасчета
		|	И Товары.Номенклатура В ИЕРАРХИИ(&СписокНоменклатуры)";
		Запрос.УстановитьПараметр("Товары", СтрокаДереваСкидок.СтруктураДополнительныхДанных.ТаблицаТоваровПоСегментам);
		Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры[0].Значение);
	КонецЕсли;
	ТоварыСегмента = Запрос.Выполнить().Выгрузить();
	
	ТаблицаТоваровПоштучно = Новый ТаблицаЗначений;
	ТаблицаТоваровПоштучно.Колонки.Добавить("КлючСвязи");
	ТаблицаТоваровПоштучно.Колонки.Добавить("Цена");
	
	Для Каждого Стр Из ТоварыСегмента Цикл
		Количество = Стр.Количество;
		Пока Количество	> 0 Цикл
			НовСтр = ТаблицаТоваровПоштучно.Добавить();
			НовСтр.КлючСвязи = Стр.КлючСвязи;
			НовСтр.Цена = Стр.Цена;
			
			Количество = Количество - 1;
		КонецЦикла;	
	КонецЦикла;
	
	ТаблицаТоваровПоштучно.Сортировать("Цена УБЫВ");
	
	СкидкиНаКаждый =Новый ТаблицаЗначений;
	СкидкиНаКаждый.Колонки.Добавить("КлючСвязи");
	СкидкиНаКаждый.Колонки.Добавить("Количество");
	
	МаксимальныйИндекс = ТаблицаТоваровПоштучно.Количество() - 1;
	
	Если АлгоритмРасчета = 1 Тогда 
		Для Индекс = 0 По МаксимальныйИндекс Цикл	
			Если (Индекс + 1) / НаКаждый = Цел((Индекс + 1) / НаКаждый) Тогда
				НовСтр = СкидкиНаКаждый.Добавить();
				НовСтр.КлючСвязи = ТаблицаТоваровПоштучно[Индекс].КлючСвязи;
				НовСтр.Количество = 1;
			КонецЕсли;
		КонецЦикла;	
	Иначе
		ТоваровСоСкидкой = Цел(ТаблицаТоваровПоштучно.Количество() / НаКаждый);
		Пока ТоваровСоСкидкой > 0 Цикл 
			НовСтр = СкидкиНаКаждый.Добавить();
			НовСтр.КлючСвязи = ТаблицаТоваровПоштучно[МаксимальныйИндекс + 1 - ТоваровСоСкидкой].КлючСвязи;
			НовСтр.Количество = 1;
			
			ТоваровСоСкидкой = ТоваровСоСкидкой - 1;	
		КонецЦикла;	
	КонецЕсли;	
	
	СкидкиНаКаждый.Свернуть("КлючСвязи", "Количество");
	
	Для Каждого ТоварСегмента Из ТоварыСегмента Цикл
		СтрокаСкидки = СкидкиНаКаждый.Найти(ТоварСегмента.КлючСвязи, "КлючСвязи");
		
		СтрокаЧека = СтрокаДереваСкидок.СтруктураДополнительныхДанных.ТаблицаТоваровПоСегментам.Найти(ТоварСегмента.КлючСвязи, "КлючСвязи");
		СтрокаЧека.ИсключенаИзРасчета = Истина;
		
		Если СтрокаСкидки <> Неопределено Тогда
			СуммаСкидки = (ТоварСегмента.Цена - ?(СуммаПроцент = 0, (ОстаточнаяСтоимость / 100) * ТоварСегмента.Цена, ОстаточнаяСтоимость)) * СтрокаСкидки.Количество;
			
			НоваяСтрока = ТаблицаСкидок.Добавить();
			НоваяСтрока.СкидкаНаценка = СтрокаДереваСкидок.СкидкаНаценка;
			НоваяСтрока.СпособПредоставления = СтрокаДереваСкидок.СпособПредоставления;
			НоваяСтрока.РеквизитДопУпорядочивания = СтрокаДереваСкидок.РеквизитДопУпорядочивания;
			НоваяСтрока.КлючСвязи = ТоварСегмента.КлючСвязи;
			НоваяСтрока.Сегмент = СтрокаДереваСкидок.СегментНоменклатурыПредоставления;
			НоваяСтрока.Действует = Истина;
			НоваяСтрока.Сумма = СуммаСкидки;
			НоваяСтрока.СуммаВсехСкидок = СуммаСкидки;
			
			//СтруктураПоиска = Новый Структура;
			//СтруктураПоиска.Вставить("Сегмент", Справочники.СегментыНоменклатуры.ПустаяСсылка());
			//СтруктураПоиска.Вставить("Номенклатура", ТоварСегмента.Номенклатура);
			//СтруктураПоиска.Вставить("Характеристика", ТоварСегмента.Характеристика);
			//СтрокаЧека = СтрокаДереваСкидок.СтруктураДополнительныхДанных.ТаблицаТоваровПоСегментам.НайтиСтроки(СтруктураПоиска)[0];
			СтрокаЧека.Сумма = СтрокаЧека.Сумма - СуммаСкидки;
			СтрокаЧека.СуммаВГруппе = СтрокаЧека.СуммаВГруппе - СуммаСкидки;
		КонецЕсли;
	КонецЦикла;	
	
	РезультатРасчета.Вставить("ТаблицаСкидок", ТаблицаСкидок);
	РезультатРасчета.Вставить("ТаблицаПодарков", ТаблицаПодарков);
	
	Возврат РезультатРасчета;
		
КонецФункции

Процедура ИсключитьИзРасчетаСкидокПоКатегорииНоменклатуры(Магазин, СкидкаНаценка, ТаблицаТовары) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПравилаЦенообразования.ВидЦен КАК ВидЦен
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаЦенообразования КАК ПравилаЦенообразования
	|		ПО Магазины.ПравилоЦенообразования = ПравилаЦенообразования.Ссылка
	|ГДЕ
	|	Магазины.Ссылка = &Магазин";
	Запрос.УстановитьПараметр("Магазин", Магазин);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ВидЦены = Выборка.ВидЦен;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.КлючСвязи КАК КлючСвязи,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.ИсключенаИзРасчета КАК ИсключенаИзРасчета
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.КлючСвязи КАК КлючСвязи,
	|	Товары.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) КАК Цена,
	|	ЕСТЬNULL(ЦеныНоменклатуры.ds_КатегорияНоменклатуры, ЗНАЧЕНИЕ(Справочник.ds_КатегорииНоменклатуры.ПустаяСсылка)) КАК Категория,
	|	ЕСТЬNULL(КатегорииИсключение.Категория, ЗНАЧЕНИЕ(Справочник.ds_КатегорииНоменклатуры.ПустаяСсылка)) КАК КатегорияИсключение,
	|	ЕСТЬNULL(ЦеныНоменклатуры.ds_КатегорияНоменклатуры.ВидКатегории.СкидкаПриПовышенииЦены, ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)) КАК СкидкаПриПовышенииЦены,
	|	ЕСТЬNULL(ЦеныНоменклатуры.ds_КатегорияНоменклатуры.ВидКатегории.СкидкаПриПониженииЦены, ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)) КАК СкидкаПриПониженииЦены
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|		ПО Товары.Номенклатура = ЦеныНоменклатуры.Номенклатура
	|			И (&ВидЦены = ЦеныНоменклатуры.ВидЦены)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки.ds_КатегорииИсключение КАК КатегорииИсключение
	|		ПО (КатегорииИсключение.Ссылка = &СкидкаНаценка)
	|			И (ЦеныНоменклатуры.ds_КатегорияНоменклатуры = КатегорииИсключение.Категория)
	|ГДЕ
	|	НЕ Товары.ИсключенаИзРасчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЦеныНоменклатуры.Период УБЫВ
	|ИТОГИ ПО
	|	Номенклатура";
	Запрос.УстановитьПараметр("Товары", ТаблицаТовары);
	Запрос.УстановитьПараметр("СкидкаНаценка", СкидкаНаценка);
	Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
	
	ВыборкаНоменклатура = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаНоменклатура.Следующий() Цикл 
		Выборка = ВыборкаНоменклатура.Выбрать();
		Выборка.Следующий();
		
		Если Выборка.Категория.Пустая() Или Выборка.Категория = Выборка.КатегорияИсключение Тогда 
			Продолжить;
		КонецЕсли;
		
		КлючСвязи = Выборка.КлючСвязи;
		Цена = Выборка.Цена;
		СкидкаПриПовышенииЦены = Выборка.СкидкаПриПовышенииЦены;
		СкидкаПриПониженииЦены = Выборка.СкидкаПриПониженииЦены;
		
		Если Выборка.Следующий() И Выборка.Цена > Цена Тогда
			Статус = СкидкаПриПониженииЦены;
		Иначе
			Статус = СкидкаПриПовышенииЦены;
		КонецЕсли;
		
		Если Статус = Перечисления.СтатусыДействияСкидок.Отменена Тогда 
			СтрокаТаблицы = ТаблицаТовары.Найти(КлючСвязи, "КлючСвязи");
			СтрокаТаблицы.ИсключенаИзРасчета = Истина;
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

Функция ЗначениеСвойства(Объект, Свойство) Экспорт 
	
	Возврат УправлениеСвойствами.ЗначениеСвойства(Объект, Свойство);
	
КонецФункции	

Функция ОкруглитьЦену(ЗначениеЦены, ПравилаОкругленияЦены, ОкруглятьВБольшуюСторону) Экспорт 
	
	КоличествоСтрок = ПравилаОкругленияЦены.Количество();
	
	Для Индекс = 1 По КоличествоСтрок Цикл
		ПравилаОкругления = ПравилаОкругленияЦены[КоличествоСтрок - Индекс];
		
		Если ПравилаОкругления.НижняяГраницаДиапазонаЦен <= ЗначениеЦены Тогда
			Если ЗначениеЗаполнено(ПравилаОкругления.ТочностьОкругления) Тогда
				ЗначениеЦены = Ценообразование.ОкруглитьЦену(ЗначениеЦены, ПравилаОкругления.ТочностьОкругления, ОкруглятьВБольшуюСторону);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПравилаОкругления.ПсихологическоеОкругление) Тогда
				ЗначениеЦены = ЦенообразованиеКлиентСервер.ПрименитьПсихологическоеОкругление(ЗначениеЦены, ПравилаОкругления.ПсихологическоеОкругление);
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеЦены = Окр(ЗначениеЦены, 2);
	
	Возврат ЗначениеЦены;
	
КонецФункции

Процедура ВыполнитьОбменССайтом(Параметры, РезультатОбмена, ТаблицаИнформации) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	СсылкаНаОбъект = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию("Обмен с сайтом", Истина);
	
	ИмяОбработки = ВнешниеОбработки.Подключить(ПолучитьНавигационнуюСсылку(СсылкаНаОбъект, "ХранилищеОбработки"),, Ложь, ОбщегоНазначения.ОписаниеЗащитыБезПредупреждений());
	Обработка = ВнешниеОбработки.Создать(ИмяОбработки);
	
	Обработка.ВыполнитьОбменССайтом(Параметры, РезультатОбмена, ТаблицаИнформации);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция НайтиПоШтрихкоду(Наименование, Список = Неопределено) Экспорт
	
	Если Не ТипЗнч(Список) = Тип("СписокЗначений") Тогда
		Результат = Новый СписокЗначений;
	Иначе
		Результат = Список;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО Штрихкоды.Владелец = Номенклатура.Ссылка
	|ГДЕ
	|	Штрихкоды.Штрихкод ПОДОБНО &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", "%"+Наименование+"%");
	
	РезультатЗапроса = Запрос.Выполнить();
	ТЗ = РезультатЗапроса.Выгрузить();
	
	Результат.ЗагрузитьЗначения(ТЗ.ВыгрузитьКолонку("Ссылка"));
		
	Возврат Результат;
	
КонецФункции

Функция РольДоступнаТекущемуПользователю(Роль) Экспорт
	
	Возврат РольДоступна(Роль) Или РольДоступна("ПолныеПрава");
	
КонецФункции	

Функция КатегорияНоменклатуры(ВидЦены, Номенклатура, Дата = Неопределено) Экспорт 
	
	Результат = Справочники.ds_КатегорииНоменклатуры.ПустаяСсылка();
	
	Если Дата = Неопределено Тогда 
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.ds_КатегорияНоменклатуры КАК Категория
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&Дата,
	|			ВидЦены = &ВидЦены
	|				И Номенклатура = &Номенклатура) КАК ЦеныНоменклатурыСрезПоследних";
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда 
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Результат = Выборка.Категория;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	

Функция МассивНоменклатурыИзБуфераОбмена(ТекстБуфера) Экспорт
	
	ТекстБуфера = СтрЗаменить(ТекстБуфера, Символ(13), Символы.ПС);

	МассивЭлементов = СтрРазделить(ТекстБуфера, Символы.ПС, Ложь);	
	
	ТЗ = Новый ТаблицаЗначений();
	ТЗ.Колонки.Добавить("ПолеПоиска", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(200)));
	Для Каждого Стр Из МассивЭлементов Цикл
		НовСтр = ТЗ.Добавить();
		НовСтр.ПолеПоиска = Стр;
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЗ.ПолеПоиска КАК ПолеПоиска
	|ПОМЕСТИТЬ ТЗ
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЕСТЬNULL(НоменклатураПоКоду.Ссылка, ЕСТЬNULL(НоменклатураПоНаименованию.Ссылка, ЕСТЬNULL(Штрихкоды.Владелец,
	|			НоменклатураПоАртикулу.Ссылка))) КАК Номенклатура
	|	ИЗ
	|		ТЗ КАК ТЗ
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|			ПО ТЗ.ПолеПоиска = Штрихкоды.Штрихкод
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураПоНаименованию
	|			ПО ТЗ.ПолеПоиска = НоменклатураПоНаименованию.Наименование
	|			И НЕ НоменклатураПоНаименованию.ЭтоГруппа
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураПоАртикулу
	|			ПО ТЗ.ПолеПоиска = НоменклатураПоАртикулу.Артикул
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураПоКоду
	|			ПО ТЗ.ПолеПоиска = НоменклатураПоКоду.Код
	|			И НЕ НоменклатураПоКоду.ЭтоГруппа) ВложенныйЗапрос
	|ГДЕ
	|	НЕ ВложенныйЗапрос.Номенклатура ЕСТЬ NULL";
	Запрос.УстановитьПараметр("ТЗ", ТЗ);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	МассивНоменклатуры = Новый Массив();
	
	Для Каждого Стр Из Результат Цикл
		Структура = Новый Структура("Номенклатура, ТипНоменклатуры", Стр.Номенклатура, Стр.ТипНоменклатуры);
		МассивНоменклатуры.Добавить(Структура);	
	КонецЦикла;
		
	Возврат МассивНоменклатуры;	
	
КонецФункции

Функция ПодключитьВнешнююОбработку(НаименованиеОбработки) Экспорт
	
	ВнОбработка = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(НаименованиеОбработки, Истина).Ссылка.ХранилищеОбработки.Получить();
	АдресВоВнутреннемХранилище = ПоместитьВоВременноеХранилище(ВнОбработка);
	Возврат ВнешниеОбработки.Подключить(АдресВоВнутреннемХранилище, , Ложь);

КонецФункции

Функция ВнешняяОбработка(НаименованиеОбработки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СсылкаНаОбъект = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(НаименованиеОбработки, Истина);
	ИмяОбработки = ВнешниеОбработки.Подключить(ПолучитьНавигационнуюСсылку(СсылкаНаОбъект, "ХранилищеОбработки"),, Ложь, ОбщегоНазначения.ОписаниеЗащитыБезПредупреждений());
	Обработка = ВнешниеОбработки.Создать(ИмяОбработки);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Обработка;	
	
КонецФункции

Функция ПолучитьИзображение(Номенклатура, Идентификатор) Экспорт
	
	Картинка = Новый Картинка;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.ds_УИД,
	|	Номенклатура.ФайлКартинки
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура";
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	УИД = СокрЛП(Выборка.ds_УИД);
	Если Не ПустаяСтрока(УИД) Тогда 
		СерверHTTP = Константы.ds_АдресИзображенийТоваров.Получить();
		СерверHTTP = СтрЗаменить(СерверHTTP, "http://", "");
		СерверHTTP = ?(Прав(СерверHTTP, 1) = "/", СерверHTTP + "", СерверHTTP + "/");
		
		СтрокаПараметраПолучения = УИД + ".jpg";
		ИмяВходящегоФайла = КаталогВременныхФайлов() + УИД + ".jpg";
		ТаймаутСоединения = Константы.ds_ТаймаутСоедиененияЗагрузкиИзображения.Получить();
		
		Попытка
			HTTP = Новый HTTPСоединение(СерверHTTP,,,,, ?(ТаймаутСоединения <> 0, ТаймаутСоединения, 2));
			HTTP.Получить(СтрокаПараметраПолучения, ИмяВходящегоФайла);
			Картинка = Новый Картинка(ИмяВходящегоФайла);
			УдалитьФайлы(ИмяВходящегоФайла);
		Исключение
			Картинка = Новый Картинка;
		КонецПопытки;
		
		Результат = ПоместитьВоВременноеХранилище(Картинка, Идентификатор);
	ИначеЕсли Не ПустаяСтрока(Выборка.ФайлКартинки) Тогда
		Результат = НавигационнаяСсылкаКартинки(Выборка.ФайлКартинки, Идентификатор);  
	Иначе
		Результат = ПоместитьВоВременноеХранилище(Картинка, Идентификатор);  
	КонецЕсли;  
	
	Возврат Результат;
	
КонецФункции

Функция НавигационнаяСсылкаКартинки(ФайлКартинки, ИдентификаторФормы)
	
	УстановитьПривилегированныйРежим(Истина);    
	
	ДополнительныеПараметры = новый Структура("ИдентификаторФормы, ВызыватьИсключение", ИдентификаторФормы, Ложь);
	
	ДанныеФайла = РаботаСФайлами.ДанныеФайла(ФайлКартинки, ДополнительныеПараметры);
	
	Если не ДанныеФайла = Неопределено Тогда
		Картинка = ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
	Иначе 
		Картинка = Новый Картинка;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Картинка;
	
КонецФункции

Функция СписокТоваровИсключениеПоКатегории(Магазин, ТаблицаТовары) Экспорт 
	
	СписокТоваров = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПравилаЦенообразования.ВидЦен КАК ВидЦен
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаЦенообразования КАК ПравилаЦенообразования
	|		ПО Магазины.ПравилоЦенообразования = ПравилаЦенообразования.Ссылка
	|ГДЕ
	|	Магазины.Ссылка = &Магазин";
	Запрос.УстановитьПараметр("Магазин", Магазин);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ВидЦены = Выборка.ВидЦен;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) КАК Цена,
	|	ЕСТЬNULL(ЦеныНоменклатуры.ds_КатегорияНоменклатуры, ЗНАЧЕНИЕ(Справочник.ds_КатегорииНоменклатуры.ПустаяСсылка)) КАК Категория,
	|	ЕСТЬNULL(ЦеныНоменклатуры.ds_КатегорияНоменклатуры.ВидКатегории.СкидкаПриПовышенииЦены, ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)) КАК СкидкаПриПовышенииЦены,
	|	ЕСТЬNULL(ЦеныНоменклатуры.ds_КатегорияНоменклатуры.ВидКатегории.СкидкаПриПониженииЦены, ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)) КАК СкидкаПриПониженииЦены
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|		ПО Товары.Номенклатура = ЦеныНоменклатуры.Номенклатура
	|			И (&ВидЦены = ЦеныНоменклатуры.ВидЦены)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЦеныНоменклатуры.Период УБЫВ
	|ИТОГИ ПО
	|	Номенклатура";
	Запрос.УстановитьПараметр("Товары", ТаблицаТовары);
	Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
	
	ВыборкаНоменклатура = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаНоменклатура.Следующий() Цикл 
		Выборка = ВыборкаНоменклатура.Выбрать();
		Выборка.Следующий();
		
		Если Выборка.Категория.Пустая() Тогда 
			Продолжить;
		КонецЕсли;
		
		Цена = Выборка.Цена;
		СкидкаПриПовышенииЦены = Выборка.СкидкаПриПовышенииЦены;
		СкидкаПриПониженииЦены = Выборка.СкидкаПриПониженииЦены;
		
		Если Выборка.Следующий() И Выборка.Цена > Цена Тогда
			Статус = СкидкаПриПониженииЦены;
		Иначе
			Статус = СкидкаПриПовышенииЦены;
		КонецЕсли;
		
		Если Статус = Перечисления.СтатусыДействияСкидок.Отменена Тогда 
			СписокТоваров.Добавить(ВыборкаНоменклатура.Номенклатура);
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат СписокТоваров;
	
КонецФункции

#Область ДеревоЗначенийИТаблицаЗначений

// Функция формирует значение нового ключа строки табличной части.
//
// Параметры:
// Дерево - дерево значений
//
Функция ПолучитьНовыйКлючСтрокиДерева(Дерево, СписокКлючей = Неопределено) Экспорт
	
	Если СписокКлючей = Неопределено Тогда
		СписокКлючей = Новый СписокЗначений;
		СписокКлючей.Добавить(0);
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		СписокКлючей.Добавить(СтрокаДерева.КлючСтроки);
		ПолучитьНовыйКлючСтрокиДерева(СтрокаДерева, СписокКлючей);
		СписокКлючей.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
		МаксКлюч = СписокКлючей[0].Значение + 1;
	КонецЦикла;
	
	Возврат МаксКлюч;
	
КонецФункции // ПолучитьНовыйКлючСтрокиДерева()

// Процедура обновляет ключи связи в дереве значений
//
Процедура ОбновитьКлючиСвязиВДеревеЗначений(Дерево) Экспорт
	
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		Попытка
			СтрокаДерева.КлючСвязи = СтрокаДерева.Родитель.КлючСтроки;
		Исключение
			СтрокаДерева.КлючСвязи = 0;
		КонецПопытки;
		
		ОбновитьКлючиСвязиВДеревеЗначений(СтрокаДерева);
	КонецЦикла;
	
КонецПроцедуры // ОбновитьКлючиСвязиВДеревеЗначений()

// Процедура обновляет ключи связи в дереве значений
//
Процедура ОбновитьКлючиСтрокВДеревеЗначений(Дерево, КлючСтроки = 1) Экспорт
	
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		СтрокаДерева.КлючСтроки = КлючСтроки;
		КлючСтроки = КлючСтроки + 1;
		ОбновитьКлючиСтрокВДеревеЗначений(СтрокаДерева, КлючСтроки);
	КонецЦикла;
	
КонецПроцедуры // ОбновитьКлючиСвязиВДеревеЗначений()

// Процедура выгружает данные из дерева значений в таблицу значений
// данные выгружаются только в таблицу со сходным набором реквизитов
//
Функция ВыгрузитьДеревоЗначенийВТаблицуЗначений(Дерево, Таблица = Неопределено) Экспорт
	
	Если Таблица = Неопределено Тогда
		Таблица = Новый ТаблицаЗначений;
		
		Для Каждого Колонка Из Дерево.Колонки Цикл
			Таблица.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		ЗаполнитьЗначенияСвойств(Таблица.Добавить(), СтрокаДерева);
		ВыгрузитьДеревоЗначенийВТаблицуЗначений(СтрокаДерева, Таблица);
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции //ВыгрузитьДеревоЗначенийВТаблицуЗначений()

// Процедура выгружает данные из таблицы значений в дерево значений
// данные выгружаются только в таблицу со сходным набором реквизитов
//
// Параметры:
//
// КлючСтроки - имя колонки ТаблицыЗначений - уникальный идентификатор
// КлючСвязи - имя колонки ТаблицыЗначений - указатель привязки к строке Дерева,
// своего рода указатель на "Родителя"
//
Функция ВыгрузитьТаблицуЗначенийВДеревоЗначений(Таблица, КлючСтроки = "КлючСтроки", КлючСвязи = "КлючСвязи") Экспорт
	
	Дерево = Новый ДеревоЗначений;
	
	Для Каждого Колонка Из Таблица.Колонки Цикл
		Дерево.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		СтрокаГруппировки = Дерево.Строки.Найти(СтрокаТаблицы[КлючСвязи], КлючСтроки,Истина);
		
		Если СтрокаГруппировки = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Дерево.Строки.Добавить(), СтрокаТаблицы);
		Иначе
			ЗаполнитьЗначенияСвойств(СтрокаГруппировки.Строки.Добавить(), СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Дерево;
	
КонецФункции //ВыгрузитьТаблицуЗначенийВДеревоЗначений()

// Процедура устанавливает значение во всем дереве значений
//
Процедура УстановитьЗначениеКолонкиДерева(Дерево, Колонка, Значение) Экспорт
	
	Для каждого СтрокаДерева Из Дерево.Строки Цикл
		СтрокаДерева[Колонка] = Значение;
		
		УстановитьЗначениеКолонкиДерева(СтрокаДерева, Колонка, Значение);
	КонецЦикла;
	
КонецПроцедуры //УстановитьЗначениеКолонкиДерева()

// Процедура копирует подчиненные строки дерева значений
//
Процедура СкопироватьПодчиненныеСтроки(СтрокаПриемник, СтрокаИсточник)
	
	Для каждого Строка Из СтрокаИсточник.Строки Цикл
		НоваяСтрока = СтрокаПриемник.Строки.Добавить();
		НоваяСтрока.КлючСвязи = СтрокаПриемник.КлючСтроки;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		СкопироватьПодчиненныеСтроки(НоваяСтрока, Строка);
	КонецЦикла;
	
КонецПроцедуры // СкопироватьПодчиненныеСтроки()

// Процедура переносит выделенные строки дерева значений в указанную ветку
//
Процедура ПеренестиСтрокиДереваЗначений(СтрокаПриемник, ВыделенныеСтроки) Экспорт
	
	Если НЕ СтрокаПриемник = Неопределено Тогда
		МассивСтрок = Новый Массив;
		
		Для Каждого СтрокаПереноса Из ВыделенныеСтроки Цикл
			МассивСтрок.Добавить(СтрокаПереноса);
			НоваяСтрока = СтрокаПриемник.Строки.Добавить();
			СкопироватьПодчиненныеСтроки(НоваяСтрока, СтрокаПереноса);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПереноса);
			
			НоваяСтрока.КлючСвязи = СтрокаПриемник.КлючСтроки;
		КонецЦикла;
		
		Для Каждого СтрокаДерева Из МассивСтрок Цикл
			Если СтрокаДерева.Родитель = Неопределено Тогда
				СтрокаДерева.Строки.Удалить(СтрокаДерева);
			Иначе
				СтрокаДерева.Родитель.Строки.Удалить(СтрокаДерева);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры //ПеренестиСтрокиДереваЗначений()

#КонецОбласти

#КонецОбласти