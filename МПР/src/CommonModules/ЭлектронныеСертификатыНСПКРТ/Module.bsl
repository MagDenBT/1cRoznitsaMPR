#Область ПрограммныйИнтерфейс

// Возвращает вид оплаты "Платежная карта" с привязкой к платежной системе "Сертификат НСПК".
//
Функция ВидОплатыПлатежнаяКартаНСПК() Экспорт
	
	ВидОплатыПлатежнаяКартаНСПК = Справочники.ВидыОплатЧекаККМ.ПустаяСсылка();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыОплат.Ссылка КАК ВидОплаты
	|ИЗ
	|	Справочник.ВидыОплатЧекаККМ КАК ВидыОплат
	|ГДЕ
	|	ВидыОплат.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта)
	|	И ВидыОплат.ПлатежнаяСистема = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежнойСистемыККТ.СертификатНСПК)
	|	И НЕ ВидыОплат.ПометкаУдаления");
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		ВидОплатыПлатежнаяКартаНСПК = Результат.ВидОплаты;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ВидОплатыПлатежнаяКартаНСПК;
	
КонецФункции

// Возвращает вид оплаты "Платежная система" с привязкой к платежной системе "Сертификат НСПК".
//
Функция ВидОплатыПлатежнаяСистемаНСПК() Экспорт
	
	ВидОплатыПлатежнаяСистемаНСПК = Справочники.ВидыОплатЧекаККМ.ПустаяСсылка();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыОплат.Ссылка КАК ВидОплаты
	|ИЗ
	|	Справочник.ВидыОплатЧекаККМ КАК ВидыОплат
	|ГДЕ
	|	ВидыОплат.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ПлатежнаяСистема)
	|	И ВидыОплат.ПлатежнаяСистема = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежнойСистемыККТ.СертификатНСПК)
	|	И НЕ ВидыОплат.ПометкаУдаления");
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		ВидОплатыПлатежнаяСистемаНСПК = Результат.ВидОплаты;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ВидОплатыПлатежнаяСистемаНСПК;
	
КонецФункции

// Возвращает общие параметры подключения к сервису НСПК.
//
// Возвращаемое значение:
//  Структура - содержит значения по ключам АдресСервисаНСПК, КлючДоступаНСПК.
//
Функция ОбщиеПараметрыПодключенияНСПК() Экспорт
	
	ОбщиеПараметрыПодключенияНСПК = Новый Структура();
	ОбщиеПараметрыПодключенияНСПК.Вставить("АдресСервисаНСПК", "");
	ОбщиеПараметрыПодключенияНСПК.Вставить("КлючДоступаНСПК", "");
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаполнитьЗначенияСвойств(ОбщиеПараметрыПодключенияНСПК,
		ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("ЭС_НСПК_МИР", "АдресСервисаНСПК, КлючДоступаНСПК"));
		
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ОбщиеПараметрыПодключенияНСПК;
КонецФункции

// Возвращает параметры операции НСПК по кассе.
//
// Параметры:
//  КассаККМ - СправочникСсылка.КассыККМ - Касса ККМ, для которой необходимо получить параметры операции;
//  ИдентификаторКорзины - Строка - идентификатор корзины для операции возврата;
//  ИдентификаторЗапроса - Строка - идентификатор запроса операции.
//
// Возвращаемое значение:
//  Структура - ЭлектронныеСертификатыНСПК.ПараметрыОперацииНСПК().
//
Функция ПараметрыОперацииНСПКПоКассеККМ(КассаККМ, ИдентификаторКорзины = "", ИдентификаторЗапроса = "0") Экспорт
	
	ОбщиеПараметрыПодключенияНСПК = ОбщиеПараметрыПодключенияНСПК();
	ПараметрыПодключенияКассыНСПК = ПараметрыПодключенияКассыНСПК(КассаККМ);
	ПараметрыПодключенияОрганизацииНСПК = ПараметрыПодключенияОрганизацииНСПК(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КассаККМ, "ПодключаемоеОборудование.Организация"));
	ПараметрыОперации = ЭлектронныеСертификатыНСПК.ПараметрыОперацииНСПК();
	ПараметрыОперации.АдресСервера = ОбщиеПараметрыПодключенияНСПК.АдресСервисаНСПК;
	ПараметрыОперации.КлючДоступа =
		?(ЗначениеЗаполнено(ПараметрыПодключенияОрганизацииНСПК.КлючОрганизацииНСПК),
			ПараметрыПодключенияОрганизацииНСПК.КлючОрганизацииНСПК,
			ОбщиеПараметрыПодключенияНСПК.КлючДоступаНСПК);
	ПараметрыОперации.КлючКассы = ПараметрыПодключенияКассыНСПК.КлючКассыНСПК;
	ПараметрыОперации.ИдентификаторКассы = ПараметрыПодключенияКассыНСПК.ИдентификаторНСПК;
	ПараметрыОперации.ИдентификаторКорзины = ИдентификаторКорзины;
	ПараметрыОперации.ИдентификаторЗапроса = ИдентификаторЗапроса;
	
	Возврат ПараметрыОперации;
	
КонецФункции

// Возвращает параметры подключения кассы к сервису НСПК.
//
// Параметры:
//  КассаККМ - СправочникСсылка.КассыККМ - Касса ККМ, для которой необходимо получить параметры подключения.
//
// Возвращаемое значение:
//  Структура - содержит значения по ключам ИдентификаторНСПК, КлючКассыНСПК.
//
Функция ПараметрыПодключенияКассыНСПК(КассаККМ) Экспорт
	
	ОбщиеПараметрыПодключенияНСПК = Новый Структура();
	ОбщиеПараметрыПодключенияНСПК.Вставить("ИдентификаторНСПК", "");
	ОбщиеПараметрыПодключенияНСПК.Вставить("КлючКассыНСПК", "");
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаполнитьЗначенияСвойств(ОбщиеПараметрыПодключенияНСПК,
		ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(КассаККМ, "ИдентификаторНСПК, КлючКассыНСПК"));
		
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ОбщиеПараметрыПодключенияНСПК;
КонецФункции

// Возвращает параметры подключения организации к сервису НСПК.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - Организация, для которой необходимо получить параметры подключения.
//
// Возвращаемое значение:
//  Структура - содержит значения по ключам КлючОрганизацииНСПК.
//
Функция ПараметрыПодключенияОрганизацииНСПК(Организация) Экспорт
	
	ПараметрыПодключенияОрганизацииНСПК = Новый Структура();
	ПараметрыПодключенияОрганизацииНСПК.Вставить("КлючОрганизацииНСПК", "");
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыПодключенияОрганизацииНСПК.Вставить("КлючОрганизацииНСПК",
		ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Организация, "КлючОрганизацииНСПК"));
		
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ПараметрыПодключенияОрганизацииНСПК;
КонецФункции

// Возвращает результат передачи подтверждения операции ЭС НСПК.
//
// Параметры:
//  ЧекККМ - ДокументСсылка.ЧекККМ - Чек ККМ, который необходимо отправить для подтверждения операции с ЭС НСПК;
//  ИдентификаторКорзины - Строка - идентификатор корзины операции ЭС НСПК;
//  ИдентификаторЗапроса - Строка - идентификатор запроса операции ЭС НСПК.
//
// Возвращаемое значение:
//  РезультатВыполнения - Структура - содержит:
//  **Результат - Булево;
//  **КодРезультата - Число;
//  **ОписаниеОшибки - Строка.
//
Функция ПередачаДанныхФискальногоЧека(ЧекККМ, СуммаСертификатамиНСПК = 0, ИдентификаторКорзины = "", ИдентификаторЗапроса = "0") Экспорт
	
	РезультатВыполнения = Новый Структура("Результат, КодРезультата, ОписаниеОшибки", Ложь, 999, "");
	
	ДанныеФискальнойОперации = ОборудованиеЧекопечатающиеУстройстваВызовСервера.ДанныеФискальнойОперации(ЧекККМ);
		
	Если ДанныеФискальнойОперации = Неопределено Тогда
		РезультатВыполнения.Вставить("ОписаниеОшибки",
			СтрШаблон(НСтр("ru = 'Отсутствуют данные о фискализации чека: %1'"), СокрЛП(ЧекККМ)));
			
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Подтверждение операции ЭС НСПК'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			ЧекККМ,
			РезультатВыполнения.ОписаниеОшибки);
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	ПараметрыОперации = ЭлектронныеСертификатыНСПКРТ.ПараметрыОперацииНСПКПоКассеККМ(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЧекККМ, "КассаККМ"),
		ДанныеФискальнойОперации.ИдентификаторОплатыПлатежнойСистемы);
	
	ПараметрыОперации.НомерФискальногоНакопителя = ДанныеФискальнойОперации.ЗаводскойНомерФН;
	ПараметрыОперации.ФискальныйТипРасчета = ДанныеФискальнойОперации.ТипРасчета;
	ПараметрыОперации.ФискальныйПризнакЧека = ЛЕВ(ДанныеФискальнойОперации.ФискальныйПризнак, 10);
	ПараметрыОперации.ФискальныйЧекНомер = Строка(ДанныеФискальнойОперации.НомерЧекаККМ);
	ПараметрыОперации.ФискальныйЧекДатаВремя = ДанныеФискальнойОперации.Дата;
	ПараметрыОперации.ФискальныйЧекСумма = СуммаСертификатамиНСПК;
	
	ПараметрыОперации.ФискальныйМестоРасчетов =
		ОбщегоНазначенияРТ.АдресМагазина(ДанныеФискальнойОперации.ТорговыйОбъект);
	
	ПараметрыОперации.ФискальныйЧекСумма = СуммаСертификатамиНСПК;
	
	РезультатПередачи = ЭлектронныеСертификатыНСПК.ПередачаДанныхФискальногоЧека(ПараметрыОперации);
	
	ЗаполнитьЗначенияСвойств(РезультатВыполнения, РезультатПередачи);
	
	Если РезультатВыполнения.Результат Тогда
		СообщениеПользователю = СтрШаблон(
			НСтр("ru = 'Подтверждение операции %1 успешно отправлено на сервер НСПК'", ОбщегоНазначения.КодОсновногоЯзыка()),
			ДанныеФискальнойОперации.ИдентификаторОплатыПлатежнойСистемы);
		УровеньЖурнала = УровеньЖурналаРегистрации.Информация;
	Иначе
		СообщениеПользователю = СтрШаблон(
			НСтр("ru = 'При отправке подтверждения операции %1 на сервер НСПК произошла ошибка (код %2):
			|%3'", ОбщегоНазначения.КодОсновногоЯзыка()),
			ДанныеФискальнойОперации.ИдентификаторОплатыПлатежнойСистемы,
			Строка(РезультатВыполнения.КодРезультата),
			РезультатВыполнения.ОписаниеОшибки);
		УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка;
	КонецЕсли;
	
	РезультатВыполнения.Вставить("ОписаниеОшибки", СообщениеПользователю);
		
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Подтверждение операции ЭС НСПК'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурнала,
		,
		ЧекККМ,
		СообщениеПользователю);
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Возвращает результат передачи подтверждения операции ЭС НСПК.
//
// Параметры:
//  ЧекККМ - ДокументСсылка.ЧекККМ - Чек ККМ, который необходимо отправить для подтверждения операции с ЭС НСПК.
//
// Возвращаемое значение:
//  СуммаСертификатамиНСПК - Число - сумма, оплаченная сертификатом.
//
Функция СуммаСертификатамиНСПК(ЧекККМ) Экспорт
	
	СуммаСертификатамиНСПК = 0;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЕстьNULL(СУММА(Оплата.Сумма), 0) КАК СуммаСертификатамиНСПК
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК Оплата
	|ГДЕ
	|	Оплата.Ссылка = &ЧекККМ
	|	И Оплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ПлатежнаяСистема)
	|	И Оплата.ВидОплаты.ПлатежнаяСистема = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежнойСистемыККТ.СертификатНСПК)");
	
	Запрос.УстановитьПараметр("ЧекККМ", ЧекККМ);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество()>0 Тогда
		СуммаСертификатамиНСПК = Результат[0].СуммаСертификатамиНСПК;
	КонецЕсли;
	
	Возврат СуммаСертификатамиНСПК;
КонецФункции

// Проверяет подтверждение оплаты электронным сертификатом или платежной картой
// в табличной части "Оплата" чека ККМ в НСПК.
//
// Параметры:
//  ЧекККМ - ДокументОбъект.ЧекККМ - Чек ККМ, который необходимо проверить;
//  Отказ - Булево - флаг отказа от продолжения операции проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОплата(ЧекККМ, Отказ) Экспорт
	
	Неподтверждено = Ложь;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Оплата.ДанныеПереданыВБанк КАК ДанныеПереданыВБанк,
	|	ВЫРАЗИТЬ(Оплата.ВидОплаты КАК Справочник.ВидыОплатЧекаККМ) КАК ВидОплаты
	|ПОМЕСТИТЬ ТаблицаОплат
	|ИЗ
	|	&Оплата КАК Оплата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаОплат.ДанныеПереданыВБанк КАК ДанныеПереданыВБанк
	|ИЗ
	|	ТаблицаОплат КАК ТаблицаОплат
	|ГДЕ
	|	НЕ ТаблицаОплат.ДанныеПереданыВБанк
	|	И ТаблицаОплат.ВидОплаты.ПлатежнаяСистема = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежнойСистемыККТ.СертификатНСПК)");
	
	Запрос.УстановитьПараметр("Оплата", ЧекККМ.Оплата.Выгрузить());
	
	Неподтверждено = НЕ Запрос.Выполнить().Пустой();
	
	Если Неподтверждено Тогда
		Текст = НСтр("ru = 'Оплата или возврат ЭС НСПК должны быть подтверждены платежной системой.'");
			ОбщегоНазначения.СообщитьПользователю(
			Текст,
			ЧекККМ,
			"Оплата",
			,
			Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет возможность оплаты НСПК и возвращает форматированную строку
// с гиперссылками необходимых настроек
// Параметры:
//  ФормаРМК - ФормаКлиентскогоПриложения - Форма рабочего места кассира
//
Функция ПроверитьВозможностьОплатыНСПК(ФормаРМК) Экспорт
	
	КассаККМ = ФормаРМК.Объект.КассаККМ;
	ТаблицаЭквайринговыхТерминалов = ФормаРМК.ТаблицаТерминалы;
	
	ЧастиФорматированнойСтроки = Новый Массив;
	
	АдресМагазина = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		КассаККМ.Магазин, Справочники.ВидыКонтактнойИнформации.ФактАдресМагазина, ТекущаяДатаСеанса(), Истина);
	Если Не ЗначениеЗаполнено(АдресМагазина) Тогда
			ЧастиФорматированнойСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Необходимо указать адрес '")));
			ЧастиФорматированнойСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'магазина.'"),,,, ПолучитьНавигационнуюСсылку(КассаККМ.Магазин)));
			ЧастиФорматированнойСтроки.Добавить(Символы.ПС);
	КонецЕсли;
	
	ПлатежнаяКартаНСПК = ЭлектронныеСертификатыНСПКРТ.ВидОплатыПлатежнаяКартаНСПК();
	ПлатежнаяСистемаНСПК = ЭлектронныеСертификатыНСПКРТ.ВидОплатыПлатежнаяСистемаНСПК();
	
	СтруктураПоиска = Новый Структура("ВидОплаты", ПлатежнаяКартаНСПК);
	МассивВидовОплат = ФормаРМК.ТаблицаПлатежныхКарт.НайтиСтроки(СтруктураПоиска);
	Если МассивВидовОплат.Количество() > 0 Тогда
		ФормаРМК.ВыбранныйВидОплаты = МассивВидовОплат[0].ИмяКоманды;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТаблицаЭквайринговыхТерминалов) Тогда
		ЧастиФорматированнойСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Для указанной '")));
		ЧастиФорматированнойСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'кассы ККМ'"),,,, ПолучитьНавигационнуюСсылку(КассаККМ)));
		ЧастиФорматированнойСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = ' необходимо создать эквайринговый терминал'")));
		ЧастиФорматированнойСтроки.Добавить(Символы.ПС);
		Возврат Новый ФорматированнаяСтрока(ЧастиФорматированнойСтроки);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПлатежнаяКартаНСПК) Тогда
		ЧастиФорматированнойСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Необходимо создать '")));
		ЧастиФорматированнойСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'вид оплаты'"),,,, НСтр("ru='e1cib/list/Справочник.ВидыОплатЧекаККМ'")));
		ЧастиФорматированнойСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = ' Платежная карта НСПК'")));
		ЧастиФорматированнойСтроки.Добавить(Символы.ПС);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПлатежнаяСистемаНСПК) Тогда
		ЧастиФорматированнойСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Необходимо создать '")));
		ЧастиФорматированнойСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'вид оплаты'"),,,, НСтр("ru='e1cib/list/Справочник.ВидыОплатЧекаККМ'")));
		ЧастиФорматированнойСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = ' Платежная система НСПК'")));
		ЧастиФорматированнойСтроки.Добавить(Символы.ПС);
	КонецЕсли;

	Если ЗначениеЗаполнено(ПлатежнаяКартаНСПК) И ЗначениеЗаполнено(ПлатежнаяСистемаНСПК) Тогда
		СтруктураОтбора = Новый Структура("ВидОплаты", ПлатежнаяКартаНСПК);
		НайденныеСтрокиПлатежнаяКарта = ТаблицаЭквайринговыхТерминалов.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтрокиПлатежнаяКарта.Количество() = 0 Тогда
			ЧастиФорматированнойСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'В доступные виды оплаты эквайрингового терминала'")));
			ЧастиФорматированнойСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = ' необходимо добавить вид оплаты Платежная карта НСПК'")));
			ЧастиФорматированнойСтроки.Добавить(Символы.ПС);
		Иначе
			ЕстьНастроенныйТерминал = Ложь;
			Для Каждого ТерминалСПлатежнойКартойНСПК ИЗ НайденныеСтрокиПлатежнаяКарта Цикл
				СтруктураОтбора = Новый Структура("ЭквайринговыйТерминал, ВидОплаты", ТерминалСПлатежнойКартойНСПК.ЭквайринговыйТерминал, ПлатежнаяСистемаНСПК);
				НайденныеСтроки = ТаблицаЭквайринговыхТерминалов.НайтиСтроки(СтруктураОтбора);
				Если НЕ НайденныеСтроки.Количество() = 0 Тогда
					ЕстьНастроенныйТерминал = Истина;
				КонецЕсли;
			КонецЦикла;
			Если Не ЕстьНастроенныйТерминал Тогда
				ЧастиФорматированнойСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'В доступные виды оплаты эквайрингового терминала'")));
				ЧастиФорматированнойСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = ' необходимо добавить вид оплаты Платежная система НСПК'")));
				ЧастиФорматированнойСтроки.Добавить(Символы.ПС);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(ЧастиФорматированнойСтроки);
	
КонецФункции

// Получает параметры фискальной операции для отправки подтверждения в НСПК
// Параметры:
//  ЧекККМ - ДокументСсылка.ЧекККМ - ЧекККМ, для которого получаются параметры операции
//
Функция ПолучитьПараметрыФискальнойОперацииНСПК(ЧекККМ) Экспорт
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЧекККМ, "Магазин, КассаККМ");
	Магазин = РеквизитыДокумента.Магазин;
	КассаККМ = РеквизитыДокумента.КассаККМ;
	СуммаОплаченоСертификатамиНСПК = СуммаСертификатамиНСПК(ЧекККМ);
	
	ДанныеФискальнойОперации = ОборудованиеЧекопечатающиеУстройстваВызовСервера.ДанныеФискальнойОперации(ЧекККМ);
		
	Если ДанныеФискальнойОперации = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	АдресМагазина = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		Магазин, Справочники.ВидыКонтактнойИнформации.ФактАдресМагазина, ТекущаяДатаСеанса(), Истина);
	
	ПараметрыОперации = ПараметрыОперацииНСПКПоКассеККМ(КассаККМ, 
		ДанныеФискальнойОперации.ИдентификаторОплатыПлатежнойСистемы);
	
	ПараметрыОперации.НомерФискальногоНакопителя = ДанныеФискальнойОперации.ЗаводскойНомерФН;
	ПараметрыОперации.ФискальныйТипРасчета = ДанныеФискальнойОперации.ТипРасчета;
	ПараметрыОперации.ФискальныйПризнакЧека = ЛЕВ(ДанныеФискальнойОперации.ФискальныйПризнак, 10);
	ПараметрыОперации.ФискальныйЧекНомер = Строка(ДанныеФискальнойОперации.НомерЧекаККМ);
	ПараметрыОперации.ФискальныйЧекДатаВремя = ДанныеФискальнойОперации.Дата;
	ПараметрыОперации.ФискальныйЧекСумма = СуммаОплаченоСертификатамиНСПК;
	ПараметрыОперации.ФискальныйМестоРасчетов = АдресМагазина;
	ПараметрыОперации.ФискальныйЧекСумма = СуммаОплаченоСертификатамиНСПК;
	
	Возврат ПараметрыОперации;
	
КонецФункции

// Заполняет Организацию и КассуККМ по умолчанию
// для формы настроек НСПК.
//
// Параметры:
//  СтруктураОрганизацияКассаККМ - Структура с ключами Организация, КассаККМ;
//
Процедура ЗаполнитьЗначенияФормыНастроек(СтруктураОрганизацияКассаККМ) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	КассыККМ.Ссылка КАК КассаККМ
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КассыККМ КАК КассыККМ
	|		ПО (КассыККМ.Владелец = Организации.Ссылка)
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|	И НЕ КассыККМ.ПометкаУдаления
	|	И ВЫБОР
	|			КОГДА &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ Организации.Ссылка = &Организация
	|		КОНЕЦ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Организация", СтруктураОрганизацияКассаККМ.Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() И Выборка.Количество() = 1 Тогда
		ЗаполнитьЗначенияСвойств(СтруктураОрганизацияКассаККМ, Выборка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
