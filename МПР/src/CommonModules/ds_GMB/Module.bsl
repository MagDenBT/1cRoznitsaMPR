
Функция НастройкиПодключения() Экспорт  
	
	Результат = Неопределено;
	
 	Запрос = Новый Запрос;
 	Запрос.Текст = 
 	"ВЫБРАТЬ ПЕРВЫЕ 1
 	|	ds_НастройкиGMB.ApiKey КАК ApiKey,
 	|	ВЫБОР ds_НастройкиGMB.РежимОбъединенияСкидок
 	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ds_РежимыОбъединенияСкидок.НеНачислятьНаСуммуДругихСкидок)
 	|			ТОГДА ""НеНачислятьНаСуммуДругихСкидок""  
 	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ds_РежимыОбъединенияСкидок.НеНачислятьНаТоварыСоСкидкой)
 	|			ТОГДА ""НеНачислятьНаТоварыСоСкидкой""
 	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ds_РежимыОбъединенияСкидок.НачислятьНаВсе)
 	|			ТОГДА ""НачислятьНаВсе""
 	|	КОНЕЦ КАК РежимОбъединенияСкидок,
 	|	ds_НастройкиGMB.ВебАдрес КАК ВебАдрес,
 	|	ds_НастройкиGMB.ЗащищенноеСоединение КАК ЗащищенноеСоединение,
 	|	ds_НастройкиGMB.АдресРесурса КАК АдресРесурса
 	|ИЗ
 	|	Справочник.ds_НастройкиGMB КАК ds_НастройкиGMB
 	|ГДЕ
 	|	ds_НастройкиGMB.ApiKey <> """"
 	|	И ds_НастройкиGMB.ВебАдрес <> """"";
 	
 	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Результат = Новый Структура("ЗащищенноеСоединение, ВебАдрес, АдресРесурса, ApiKey, РежимОбъединенияСкидок");
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;	
 	
 	Возврат Результат;
 	
 КонецФункции

Функция НайтиПользователя(ВводимоеЧисло, НастройкиПодключения) Экспорт
	
	Результат = Неопределено;
	
	Если НастройкиПодключения.ЗащищенноеСоединение Тогда 
		ssl = Новый ЗащищенноеСоединениеOpenSSL();
		HTTPСоединение = Новый HTTPСоединение(НастройкиПодключения.ВебАдрес,,,,, 10, ssl); 
	Иначе 
		HTTPСоединение = Новый HTTPСоединение(НастройкиПодключения.ВебАдрес,,,,, 10); 
	КонецЕсли;	
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	Данные = Новый Структура;
	Данные.Вставить("api_key", НастройкиПодключения.ApiKey);
	
	Если СтрДлина(ВводимоеЧисло) = 9 Тогда 
		Данные.Вставить("code", ВводимоеЧисло);
	Иначе
		Данные.Вставить("phone", "7" + ВводимоеЧисло);
	КонецЕсли;	
	
	ЗаписатьJSON(ЗаписьJSON, Данные);

	Текст = ЗаписьJSON.Закрыть();
	
	ТекстЗапроса = Новый HTTPЗапрос;
	ТекстЗапроса.Заголовки.Вставить("Content-Type", "application/json"); 
	
	Если СтрДлина(ВводимоеЧисло) = 9 Тогда 
		ТекстЗапроса.АдресРесурса = НастройкиПодключения.АдресРесурса + "code";   
	Иначе
		ТекстЗапроса.АдресРесурса = НастройкиПодключения.АдресРесурса + "get-users";   
	КонецЕсли;	
		
	ТекстЗапроса.УстановитьТелоИзСтроки(Текст, "UTF-8", ИспользованиеByteOrderMark.НеИспользовать);
	
	Попытка
		ОтветЗапроса = HTTPСоединение.ОтправитьДляОбработки(ТекстЗапроса);
		Если ОтветЗапроса.КодСостояния = 200 Тогда 
			СтрокаСообщения = ОтветЗапроса.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
			
			ЧтениеJson = Новый ЧтениеJSON;
			ЧтениеJson.УстановитьСтроку(СтрокаСообщения);
			Ответ = ПрочитатьJSON(ЧтениеJson);
			
			Если СтрДлина(ВводимоеЧисло) = 9 И Ответ.status = "ok" Тогда 
				Результат = Ответ.client;	
			КонецЕсли;
			
			Если СтрДлина(ВводимоеЧисло) = 10 И Ответ.users.Количество() Тогда 
				Результат = Ответ.users[0];	
			КонецЕсли;	
		КонецЕсли;	
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось получить ответ от сервера GetMeBack!"
			+ Символы.ПС + ОписаниеОшибки());		
	КонецПопытки;		
	
	Возврат Результат;
	
КонецФункции    

Функция ОтправитьОплату(ПараметрыОплаты, НастройкиПодключения, ДисконтнаяКарта) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("bonus_id", "");
	Результат.Вставить("paid_bonus_id", "");
	Результат.Вставить("client_migration", "");	
					
	Если НастройкиПодключения.ЗащищенноеСоединение Тогда 
		ssl = Новый ЗащищенноеСоединениеOpenSSL();
		HTTPСоединение = Новый HTTPСоединение(НастройкиПодключения.ВебАдрес,,,,, 10, ssl); 
	Иначе 
		HTTPСоединение = Новый HTTPСоединение(НастройкиПодключения.ВебАдрес,,,,, 10); 
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ИнформационныеКарты.ВладелецКарты КАК Справочник.ФизическиеЛица).ds_ВнешнийИдентификатор КАК КодКлиента
	|ИЗ
	|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	|ГДЕ
	|	ИнформационныеКарты.Ссылка = &ДисконтнаяКарта";
	Запрос.УстановитьПараметр("ДисконтнаяКарта", ДисконтнаяКарта);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		
		Данные = Новый Структура;
		Данные.Вставить("api_key", НастройкиПодключения.ApiKey);
		Данные.Вставить("id_branch", ПараметрыОплаты.Магазин.ds_ИдентификаторАДЗ); 
		Данные.Вставить("id_client", СтрЗаменить(Выборка.КодКлиента, Символ(160), ""));
		Данные.Вставить("order_price", Формат(ПараметрыОплаты.order_price, "ЧГ="));
		Данные.Вставить("paid_bonus", Формат(ПараметрыОплаты.paid_bonus, "ЧГ="));
		Данные.Вставить("invoice_num", ПараметрыОплаты.invoice_num);
		Данные.Вставить("manager_name", ПараметрыОплаты.manager_name);
		
		ЗаписатьJSON(ЗаписьJSON, Данные);

		Текст = ЗаписьJSON.Закрыть();
		
		ТекстЗапроса = Новый HTTPЗапрос;
		ТекстЗапроса.Заголовки.Вставить("Content-Type", "application/json");
		ТекстЗапроса.АдресРесурса = НастройкиПодключения.АдресРесурса + "bonus";
		ТекстЗапроса.УстановитьТелоИзСтроки(Текст, "UTF-8", ИспользованиеByteOrderMark.НеИспользовать);
		
		Попытка
			ОтветЗапроса = HTTPСоединение.ОтправитьДляОбработки(ТекстЗапроса);
			Если ОтветЗапроса.КодСостояния = 200 Тогда 
				СтрокаСообщения = ОтветЗапроса.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
				
				ЧтениеJson = Новый ЧтениеJSON;
				ЧтениеJson.УстановитьСтроку(СтрокаСообщения);
				Ответ = ПрочитатьJSON(ЧтениеJson);
				
				Если Ответ.status = "ok" Тогда 
					Результат.Вставить("bonus_id", Ответ.bonus_id);
					Результат.Вставить("paid_bonus_id", Ответ.paid_bonus_id);	
				КонецЕсли;	
			КонецЕсли;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось получить ответ от сервера GetMeBack! Баллы будут начислены позже."
				+ Символы.ПС + ОписаниеОшибки());		
		КонецПопытки;				
	ИначеЕсли ПараметрыОплаты.Свойство("phone") Тогда 
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		
		Данные = Новый Структура;
		Данные.Вставить("api_key", НастройкиПодключения.ApiKey); 
		Данные.Вставить("phone", ПараметрыОплаты.phone);
		Данные.Вставить("invoice", ПараметрыОплаты.order_price);
		Данные.Вставить("invoice_num", ПараметрыОплаты.invoice_num);
		Данные.Вставить("invoice_date", Формат(ТекущаяДата(), "ДФ='yyyy-MM-dd ЧЧ:мм:сс'"));
		Данные.Вставить("bonus_value", КоличествоБалловПоСумме(ПараметрыОплаты.order_price));
		
		ЗаписатьJSON(ЗаписьJSON, Данные);

		Текст = ЗаписьJSON.Закрыть();
		
		ТекстЗапроса = Новый HTTPЗапрос;
		ТекстЗапроса.Заголовки.Вставить("Content-Type", "application/json");
		ТекстЗапроса.АдресРесурса = НастройкиПодключения.АдресРесурса + "client-migration";
		ТекстЗапроса.УстановитьТелоИзСтроки(Текст, "UTF-8", ИспользованиеByteOrderMark.НеИспользовать);
		
		Попытка
			ОтветЗапроса = HTTPСоединение.ОтправитьДляОбработки(ТекстЗапроса);
			Если ОтветЗапроса.КодСостояния = 200 Тогда 
				СтрокаСообщения = ОтветЗапроса.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
				
				ЧтениеJson = Новый ЧтениеJSON;
				ЧтениеJson.УстановитьСтроку(СтрокаСообщения);
				Ответ = ПрочитатьJSON(ЧтениеJson);
				
				Если Ответ.code = "bad_phone" Тогда 
					Результат.Вставить("client_migration", "bad_phone");	
				КонецЕсли;	
			КонецЕсли;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось получить ответ от сервера GetMeBack! Баллы будут начислены позже."
				+ Символы.ПС + ОписаниеОшибки());		
		КонецПопытки;	
	КонецЕсли;	
		
	Возврат Результат;
	
КонецФункции    

Функция ВыполнитьВозвратБаллов(ДокументСсылка, СуммаВозврата, НачислениеБонусов) Экспорт
	
	Результат = "";
	
	НастройкиПодключения = НастройкиПодключения();
	Если НастройкиПодключения = Неопределено Тогда 
		Возврат Результат;
	КонецЕсли;	
	
	Если НачислениеБонусов Тогда
		НомерТранзакции = ДокументСсылка.ds_НомерТранзакцииНачисленияБонусов;
	Иначе
		НомерТранзакции = ДокументСсылка.ds_НомерТранзакцииОплатыБонусами;	
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(НомерТранзакции) Тогда 
		Данные = Новый Структура;
		Данные.Вставить("api_key", НастройкиПодключения.ApiKey); 
		
		Если НачислениеБонусов Тогда 
			Данные.Вставить("bonus_id", НомерТранзакции); 
		Иначе 
			Данные.Вставить("bonus_id", НомерТранзакции); 
		КонецЕсли;	
		
		Если НастройкиПодключения.ЗащищенноеСоединение Тогда 
			ssl = Новый ЗащищенноеСоединениеOpenSSL();
			HTTPСоединение = Новый HTTPСоединение(НастройкиПодключения.ВебАдрес,,,,, 10, ssl); 
		Иначе 
			HTTPСоединение = Новый HTTPСоединение(НастройкиПодключения.ВебАдрес,,,,, 10); 
		КонецЕсли;	
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		
		ЗаписатьJSON(ЗаписьJSON, Данные);

		Текст = ЗаписьJSON.Закрыть();
		
		ТекстЗапроса = Новый HTTPЗапрос;
		ТекстЗапроса.Заголовки.Вставить("Content-Type", "application/json");
		ТекстЗапроса.АдресРесурса = НастройкиПодключения.АдресРесурса + "cancel-operation";
		ТекстЗапроса.УстановитьТелоИзСтроки(Текст, "UTF-8", ИспользованиеByteOrderMark.НеИспользовать);
		
		Попытка
			ОтветЗапроса = HTTPСоединение.ОтправитьДляОбработки(ТекстЗапроса);
			Если ОтветЗапроса.КодСостояния = 200 Тогда 
				СтрокаСообщения = ОтветЗапроса.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
				
				ЧтениеJson = Новый ЧтениеJSON;
				ЧтениеJson.УстановитьСтроку(СтрокаСообщения);
				Ответ = ПрочитатьJSON(ЧтениеJson);
				
				Если Ответ.status = "ok" Тогда
					Результат = НомерТранзакции;	
				КонецЕсли;	
			КонецЕсли;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось получить ответ от сервера GetMeBack! Баллы будут скорректированы позже."
				+ Символы.ПС + ОписаниеОшибки());		
		КонецПопытки;	
				
		Если НачислениеБонусов Тогда 
			СписатьБаллыСДК(ДокументСсылка.ДисконтнаяКарта, СуммаВозврата - ДокументСсылка.СуммаДокумента); 
		КонецЕсли;	
	КонецЕсли;	
		
	Возврат Результат;	
		
КонецФункции

Функция КоличествоБалловПоСумме(Сумма)
	
	Результат = 0;
	
	НастройкиПодключения = ds_GMB.НастройкиПодключения();
	
	Если НастройкиПодключения.ЗащищенноеСоединение Тогда 
		ssl = Новый ЗащищенноеСоединениеOpenSSL();
		HTTPСоединение = Новый HTTPСоединение(НастройкиПодключения.ВебАдрес,,,,, 10, ssl); 
	Иначе 
		HTTPСоединение = Новый HTTPСоединение(НастройкиПодключения.ВебАдрес,,,,, 10); 
	КонецЕсли;	
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	Данные = Новый Структура;
	Данные.Вставить("api_key", НастройкиПодключения.ApiKey); 
	Данные.Вставить("to_pay", Сумма);
	
	ЗаписатьJSON(ЗаписьJSON, Данные);

	Текст = ЗаписьJSON.Закрыть();
	
	ТекстЗапроса = Новый HTTPЗапрос;
	ТекстЗапроса.Заголовки.Вставить("Content-Type", "application/json");
	ТекстЗапроса.АдресРесурса = НастройкиПодключения.АдресРесурса + "calculate-bonus";
	ТекстЗапроса.УстановитьТелоИзСтроки(Текст, "UTF-8", ИспользованиеByteOrderMark.НеИспользовать);
	
	Попытка
		ОтветЗапроса = HTTPСоединение.ОтправитьДляОбработки(ТекстЗапроса);
		Если ОтветЗапроса.КодСостояния = 200 Тогда 
			СтрокаСообщения = ОтветЗапроса.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
			
			ЧтениеJson = Новый ЧтениеJSON;
			ЧтениеJson.УстановитьСтроку(СтрокаСообщения);
			Ответ = ПрочитатьJSON(ЧтениеJson);
			
			Результат = Ответ.bonus_value;
		КонецЕсли;
	Исключение	
	КонецПопытки;		
	
	Возврат Результат;
	
КонецФункции

Функция ПроверкаБонусныхБалловДК(ДисконтнаяКарта) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ОстаткиБонусныхБаллов = БонусныеБаллыСервер.ОстаткиИДвиженияБонусныхБаллов(ДисконтнаяКарта,КонецДня(ТекущаяДата()));
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ОстаткиБонусныхБаллов[0].Сумма;
	
КонецФункции

Процедура НачислитьБаллыНаДК(ДисконтнаяКарта, НачисляемыеБаллы) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачислимБонусы = Документы.НачислениеИСписаниеБонусныхБаллов.СоздатьДокумент();
	НачислимБонусы.Дата = ТекущаяДата();
	НачислимБонусы.БонуснаяПрограммаЛояльности = Справочники.БонусныеПрограммыЛояльности.GMB;
	ДобавимСтроку = НачислимБонусы.Начисление.Добавить();
	ДобавимСтроку.ДисконтнаяКарта = ДисконтнаяКарта;
	ДобавимСтроку.Баллы = НачисляемыеБаллы;
	НачислимБонусы.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный); 
	
	УстановитьПривилегированныйРежим(Ложь); 
	
КонецПроцедуры

Процедура СписатьБаллыСДК(ДисконтнаяКарта, СписываемыеБаллы) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СпишемБонусы = Документы.НачислениеИСписаниеБонусныхБаллов.СоздатьДокумент();
	СпишемБонусы.Дата = ТекущаяДата();
	СпишемБонусы.БонуснаяПрограммаЛояльности = Справочники.БонусныеПрограммыЛояльности.GMB;
	ДобавимСтроку = СпишемБонусы.Списание.Добавить();
	ДобавимСтроку.ДисконтнаяКарта = ДисконтнаяКарта;
	ДобавимСтроку.Баллы = СписываемыеБаллы;
	СпишемБонусы.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Оперативный); 
	
	УстановитьПривилегированныйРежим(Ложь);  
	
КонецПроцедуры

Процедура ЗаписатьНомераТранзакций(НомераТранзакций, ДокументСсылка) Экспорт 
	
	ДобавимIDВДок = ДокументСсылка.ПолучитьОбъект();
	ДобавимIDВДок.ds_НомерТранзакцииНачисленияБонусов = Формат(НомераТранзакций.bonus_id, "ЧГ=");
	ДобавимIDВДок.ds_НомерТранзакцииОплатыБонусами = Формат(НомераТранзакций.paid_bonus_id, "ЧГ=");
	ДобавимIDВДок.Записать();
	
КонецПроцедуры

Функция ЭтоКартаGMB(ДисконтнаяКарта) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИнформационныеКарты.Ссылка
	|ИЗ
	|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	|ГДЕ
	|	ИнформационныеКарты.Ссылка = &Ссылка
	|	И ИнформационныеКарты.ВидДисконтнойКарты = ЗНАЧЕНИЕ(Справочник.ВидыДисконтныхКарт.GMB)";
	Запрос.УстановитьПараметр("Ссылка", ДисконтнаяКарта);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

Процедура ds_ОтправкаНеотправленныхЧековВGMB() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	НастройкиПодключенияGMB = НастройкиПодключения();
	Если НастройкиПодключенияGMB = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
		
	#Область Продажа
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЧекККМ.Ссылка КАК Ссылка,
	|	ЧекККМ.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	ЧекККМ.СуммаДокумента КАК СуммаДокумента,
	|	СУММА(ЕСТЬNULL(ЧекККМОплата.СуммаБонусовВСкидках, 0)) КАК СуммаБонусов,
	|	ЧекККМ.НомерЧекаККМ КАК НомерЧекаККМ,
	|	ЧекККМ.СтатусЧекаККМ КАК СтатусЧекаККМ,
	|	ПРЕДСТАВЛЕНИЕ(ЧекККМ.Ответственный) КАК Ответственный,
	|	ЧекККМ.Магазин КАК Магазин
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|		ПО ЧекККМ.Ссылка = ЧекККМОплата.Ссылка
	|ГДЕ
	|	ЧекККМ.ds_НомерТранзакцииНачисленияБонусов = """"
	|	И ЧекККМ.СтатусЧекаККМ В (&СтатусыЧекаККМ)
	|	И ЧекККМ.Проведен
	|	И ЧекККМ.ДисконтнаяКарта.ВидДисконтнойКарты = &ВидДисконтнойКарты
	|	И ЧекККМ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа)
	|СГРУППИРОВАТЬ ПО
	|	ЧекККМ.Ссылка,
	|	ЧекККМ.ДисконтнаяКарта,
	|	ЧекККМ.СуммаДокумента,
	|	ЧекККМ.НомерЧекаККМ,
	|	ЧекККМ.СтатусЧекаККМ,
	|	ЧекККМ.Магазин,
	|	ПРЕДСТАВЛЕНИЕ(ЧекККМ.Ответственный)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЧекККМ.Дата";
	Запрос.УстановитьПараметр("ВидДисконтнойКарты", Справочники.ВидыДисконтныхКарт.GMB);
	
	СтатусыЧекаККМ = Новый Массив;
	СтатусыЧекаККМ.Добавить(Перечисления.СтатусыЧековККМ.Архивный);
	Запрос.УстановитьПараметр("СтатусыЧекаККМ", СтатусыЧекаККМ);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
		
	Для Каждого Стр Из ТЗ Цикл 
		ПараметрыОплатыGMB = Новый Структура;
		ПараметрыОплатыGMB.Вставить("order_price", Стр.СуммаДокумента + Стр.СуммаБонусов);
		ПараметрыОплатыGMB.Вставить("paid_bonus", Стр.СуммаБонусов);
		ПараметрыОплатыGMB.Вставить("invoice_num", Стр.НомерЧекаККМ); 
		ПараметрыОплатыGMB.Вставить("manager_name", Стр.Ответственный);
		ПараметрыОплатыGMB.Вставить("Магазин", Стр.Магазин);
		
		РезультатОплатыGMB = ОтправитьОплату(ПараметрыОплатыGMB, НастройкиПодключенияGMB, Стр.ДисконтнаяКарта);
		
		Если РезультатОплатыGMB <> Неопределено И ЗначениеЗаполнено(РезультатОплатыGMB.bonus_id) Тогда
			Чек = Стр.Ссылка.ПолучитьОбъект();
			
			Если Стр.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Архивный Тогда 
				Чек.ОбменДанными.Загрузка = Истина;
			КонецЕсли;	
			
			Чек.ds_НомерТранзакцииНачисленияБонусов = Формат(РезультатОплатыGMB.bonus_id, "ЧГ=");
			Чек.ds_НомерТранзакцииОплатыБонусами = Формат(РезультатОплатыGMB.paid_bonus_id, "ЧГ=");
			Чек.Записать();
		КонецЕсли;
	КонецЦикла;	
	
	#КонецОбласти
	
	#Область Возвраты
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЧекККМ.Ссылка КАК Ссылка,
	|	ЧекККМ.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	ЧекККМ.СуммаДокумента КАК СуммаДокумента,
	|	ЧекККМ.Магазин КАК Магазин,
	|	ЧекККМ.ds_НомерТранзакцииНачисленияБонусов,
	|	ЧекККМ.ds_НомерТранзакцииОплатыБонусами,
	|	ЧекККМ.ЧекККМПродажа,
	|	ЧекККМ.ЧекККМПродажа.ds_НомерТранзакцииОплатыБонусами КАК ds_НомерТранзакцииОплатыБонусамиПродажа
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	(ЧекККМ.ds_НомерТранзакцииНачисленияБонусов = """"
	|	ИЛИ ЧекККМ.ds_НомерТранзакцииОплатыБонусами = """"
	|	И ЧекККМ.ЧекККМПродажа.ds_НомерТранзакцииОплатыБонусами = """")
	|	И ЧекККМ.СтатусЧекаККМ В (&СтатусыЧекаККМ)
	|	И ЧекККМ.Проведен
	|	И ЧекККМ.ДисконтнаяКарта.ВидДисконтнойКарты = &ВидДисконтнойКарты
	|	И ЧекККМ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|СГРУППИРОВАТЬ ПО
	|	ЧекККМ.Ссылка,
	|	ЧекККМ.ДисконтнаяКарта,
	|	ЧекККМ.Магазин,
	|	ПРЕДСТАВЛЕНИЕ(ЧекККМ.Ответственный),
	|	ЧекККМ.ds_НомерТранзакцииНачисленияБонусов,
	|	ЧекККМ.ds_НомерТранзакцииОплатыБонусами,
	|	ЧекККМ.СуммаДокумента,
	|	ЧекККМ.ЧекККМПродажа,
	|	ЧекККМ.ЧекККМПродажа.ds_НомерТранзакцииОплатыБонусами
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЧекККМ.Дата";
	Запрос.УстановитьПараметр("ВидДисконтнойКарты", Справочники.ВидыДисконтныхКарт.GMB);
	
	СтатусыЧекаККМ = Новый Массив;
	СтатусыЧекаККМ.Добавить(Перечисления.СтатусыЧековККМ.Архивный);
	Запрос.УстановитьПараметр("СтатусыЧекаККМ", СтатусыЧекаККМ);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Стр Из ТЗ Цикл 
		Чек = Стр.Ссылка.ПолучитьОбъект();
		
		Если Стр.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Архивный Тогда 
			Чек.ОбменДанными.Загрузка = Истина;
		КонецЕсли;	
		
		Если ПустаяСтрока(Стр.ds_НомерТранзакцииНачисленияБонусов) Тогда
			Чек.ds_НомерТранзакцииНачисленияБонусов = ds_GMB.ВыполнитьВозвратБаллов(Стр.ЧекККМПродажа, ЭтаФорма.СуммаДокументаБезСкидок, Истина);
		ИначеЕсли ПустаяСтрока(Стр.ds_НомерТранзакцииОплатыБонусами) И Не ПустаяСтрока(Стр.ds_НомерТранзакцииОплатыБонусамиПродажа) Тогда 	
			Чек.ds_НомерТранзакцииОплатыБонусами = ds_GMB.ВыполнитьВозвратБаллов(Стр.ЧекККМПродажа, ЭтаФорма.СуммаДокументаБезСкидок, Ложь);
		КонецЕсли;				
			
		Чек.Записать();
	КонецЦикла;	
	
	#КонецОбласти
		
КонецПроцедуры
