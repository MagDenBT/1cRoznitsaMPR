
#Область ПрограммныйИнтерфейс

//Определение относится ли считанный штрихкод к весовым товарам.
//
// Параметры
//  ЭтоШтрихкодПоШаблону - Булево - признак того, что штрихкод относится к весовым товарам.
//  Штрихкод - Строка - считанный штрихкод.
//  ДанныеМаркировки - см. МенеджерОборудованияМаркировкаКлиентСервер.РазобратьШтриховойКодТовара().
//
Процедура РазобратьШтрихкодПоШаблону(ЭтоШтрихкодПоШаблону, Штрихкод, ДанныеМаркировки) Экспорт
	
	Если ОбщегоНазначенияРМККлиентСервер.ЕстьСвойство(ДанныеМаркировки, "ТипИдентификатораТовара")
		И Не ДанныеМаркировки.ТипИдентификатораТовара =
			Перечисления.ТипыИдентификаторовТовараККТ.КодТовараВФорматеEAN13 Тогда
				Возврат;
	КонецЕсли;
	
	ПрефиксШтрихкодаВесовогоТовара = ОбщегоНазначенияРМКПовтИсп.ПолучитьЗначениеКонстанты("ПрефиксШтрихкодаВесовогоТовара");
	ПрефиксШтрихкодаШтучногоФасованногоТовара = ОбщегоНазначенияРМКПовтИсп.ПолучитьЗначениеКонстанты("ПрефиксШтрихкодаШтучногоФасованногоТовара");
	ШаблонШтрихкодаВесовыхТоваров = ОбщегоНазначенияРМКПовтИсп.ПолучитьЗначениеКонстанты("ШаблонШтрихкодаВесовыхТоваров");
	
	ШаблонШтрихкодаВесовогоТовараСтрокой = ШаблонШтрихкодаВесовогоТовара(ШаблонШтрихкодаВесовыхТоваров);
	
	ПрефиксКода = Лев(Штрихкод, 2);
	ПрефиксВесовой = НСтр("ru = '2'") + ПрефиксШтрихкодаВесовогоТовара;
	ПрефиксШтучный = НСтр("ru = '2'") + ПрефиксШтрихкодаШтучногоФасованногоТовара;
	ЭтоВесовой = ПрефиксКода = ПрефиксВесовой;
	ЭтоШтучный = ПрефиксКода = ПрефиксШтучный;
	
	Если ЗначениеЗаполнено(ШаблонШтрихкодаВесовогоТовараСтрокой)
		И ЭтоВесовой Или ЭтоШтучный Тогда
		
		ЭтоШтрихкодПоШаблону = Истина;
		
		РезультатРазбора = Новый Структура;
		
		РезультатРазбора.Вставить("ЭтоФасованныйТовар",ЭтоШтучный);
		РезультатРазбора.Вставить("КодОборудования", 0);
		РезультатРазбора.Вставить("Количество", 0);
		
		ПозицияШаблонаКодаТовара = ПозицияШаблонаКодаТовараВШаблонеШтрихкода(ШаблонШтрихкодаВесовогоТовараСтрокой);
		ДлинаШаблонаКодаТовара = ДлинаШаблонаКодаТовараВШаблонеШтрихкода(ШаблонШтрихкодаВесовогоТовараСтрокой);
		
		ПозицияШаблонаВесаТовара = ПозицияШаблонаВесаТовараВШаблонеШтрихкода(ШаблонШтрихкодаВесовогоТовараСтрокой);
		ДлинаШаблонаВесаТовара = ДлинаШаблонаВесаТовараВШаблонеШтрихкода(ШаблонШтрихкодаВесовогоТовараСтрокой);
		
		КодТовараСтрокой = Сред(Штрихкод, ПозицияШаблонаКодаТовара, ДлинаШаблонаКодаТовара);
		КодТовара = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(КодТовараСтрокой);
		
		ВесТовараСтрокой = Сред(Штрихкод, ПозицияШаблонаВесаТовара, ДлинаШаблонаВесаТовара);
		ВесТовара = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ВесТовараСтрокой);
		ВесТовара = ВесТовара / 1000;
		
		РезультатРазбора.КодОборудования = КодТовара;
		РезультатРазбора.Количество = ВесТовара;
		
		ДанныеМаркировки.Вставить("РезультатРазбораПоШаблону", РезультатРазбора);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает представление единицы измерения номенклатуры.
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - номенклатура, для которой необходимо получить представление единицы измерения.
//
// ВозвращаемоеЗначение:
//  ПредставлениеЕдиницыИзмерения - Строка - представление единицы измерения номенклатуры.
//
Функция ПредставлениеЕдиницыИзмерения(Номенклатура) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕдиницыИзмерения.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БазовыеЕдиницыИзмерения КАК ЕдиницыИзмерения
	|		ПО Номенклатура.ЕдиницаИзмерения = ЕдиницыИзмерения.Ссылка
	|ГДЕ
	|	Номенклатура.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Наименование;
	
КонецФункции

// Поиск кассира по считанному коду.
//
// Параметры
//  Объект - ДанныеФормыСткруктура - форма, в которой переопредляются значения.
//  Штрихкод - Строка - код, по которому выполняется поиск.
//
Процедура ВыполнитьПоискКассира(Объект, Штрихкод) Экспорт
	
	Если Не ЗначениеЗаполнено(Штрихкод) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИнформационныеКарты.ВладелецКарты КАК Кассир
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	|		ПО Штрихкоды.Владелец = ИнформационныеКарты.Ссылка
	|ГДЕ
	|	Штрихкоды.Штрихкод = &Штрихкод
	|	И Штрихкоды.Владелец ССЫЛКА Справочник.ИнформационныеКарты
	|	И ИнформационныеКарты.ВладелецКарты ССЫЛКА Справочник.ФизическиеЛица
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИнформационныеКарты.ВладелецКарты
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	|		ПО Штрихкоды.Владелец = ИнформационныеКарты.Ссылка
	|ГДЕ
	|	Штрихкоды.Штрихкод = &Штрихкод
	|	И Штрихкоды.Владелец ССЫЛКА Справочник.ИнформационныеКарты
	|	И ИнформационныеКарты.ВладелецКарты ССЫЛКА Справочник.Пользователи
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИнформационныеКарты.ВладелецКарты
	|ИЗ
	|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	|ГДЕ
	|	НЕ ИнформационныеКарты.ПометкаУдаления
	|	И ИнформационныеКарты.ВладелецКарты ССЫЛКА Справочник.ФизическиеЛица
	|	И ИнформационныеКарты.КодКарты = &Штрихкод
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИнформационныеКарты.ВладелецКарты
	|ИЗ
	|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	|ГДЕ
	|	НЕ ИнформационныеКарты.ПометкаУдаления
	|	И ИнформационныеКарты.ВладелецКарты ССЫЛКА Справочник.Пользователи
	|	И ИнформационныеКарты.КодКарты = &Штрихкод");
	
	Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Если ТипЗнч(Выборка.Кассир) = Тип("СправочникСсылка.Пользователи") Тогда
			
			Объект.Кассир = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Кассир, "ФизическоеЛицо");
			Объект.ПользовательБД = Выборка.Кассир;
			
		Иначе
			
			Объект.Кассир = Выборка.Кассир;
			Объект.ПользовательБД = Пользователи.ТекущийПользователь();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру кассира если владельцем является пользователь или физическое лицо.
//
// Параметры:
//  ВладелецШтрихкода - СправочникСсылка - объект для проверки и заполнения структуры.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
// ВозвращаемоеЗначение:
//  Структура - содержащая данные кассира
//
Функция НайденныйКассир(ВладелецШтрихкода, Форма) Экспорт
	
	СтруктураКассира = Неопределено;
	
	Если ТипЗнч(ВладелецШтрихкода) = Тип("СправочникСсылка.ИнформационныеКарты") Тогда
		
		Если ВладелецШтрихкода.ТипКарты = Перечисления.ТипыИнформационныхКарт.Регистрационная Тогда
			
			СтруктураКассира = Новый Структура;
			СтруктураКассира.Вставить("Кассир");
			СтруктураКассира.Вставить("ПользовательБД");
			
			ВладелецКарты = ВладелецШтрихкода.ВладелецКарты;
			
			Если ТипЗнч(ВладелецКарты) = Тип("СправочникСсылка.Пользователи") Тогда
				
				СтруктураКассира.Кассир = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецКарты, "ФизЛицо");
				СтруктураКассира.ПользовательБД = ВладелецКарты;
				
			ИначеЕсли ТипЗнч(ВладелецКарты) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				
				СтруктураКассира.Кассир = ВладелецКарты;
				СтруктураКассира.ПользовательБД = Пользователи.ТекущийПользователь();
				
			ИначеЕсли ТипЗнч(ВладелецКарты) = Тип("СправочникСсылка.Контрагенты") Тогда
				
				СтруктураКассира.Кассир = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецКарты, "ФизЛицо");
				СтруктураКассира.ПользовательБД = Пользователи.ТекущийПользователь();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураКассира;
	
КонецФункции

// Возвращает структуру дисконтной карты если владельцем является карта лояльности.
//
// Параметры:
//  ВладелецШтрихкода - СправочникСсылка - объект для проверки и заполнения структуры.
//
// ВозвращаемоеЗначение:
//  Структура - содержащая данные карты лояльности
//
Функция НайденнаяКартаЛояльности(ВладелецШтрихкода) Экспорт
	
	Если ТипЗнч(ВладелецШтрихкода) = Тип("СправочникСсылка.ИнформационныеКарты") Тогда
		
		Если ВладелецШтрихкода.ТипКарты = Перечисления.ТипыИнформационныхКарт.Дисконтная Тогда
			
			СтруктураДисконтнойКарты = Новый Структура;
			СтруктураДисконтнойКарты.Вставить("КартаЛояльности");
			СтруктураДисконтнойКарты.Вставить("Контрагент");
			СтруктураДисконтнойКарты.Вставить("КодКарты");
			СтруктураДисконтнойКарты.Вставить("АдресЭПВладельцаКарты");
			СтруктураДисконтнойКарты.Вставить("НомерТелефонаВладельцаКарты");
			СтруктураДисконтнойКарты.Вставить("ДатаРождения");
			СтруктураДисконтнойКарты.Вставить("ФИО");
			
			ВледелецКарты = ВладелецШтрихкода;
			
			ЗаполнитьЗначенияСвойств(СтруктураДисконтнойКарты, ВледелецКарты);
			
			СтруктураДисконтнойКарты.КартаЛояльности = ВледелецКарты;
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ИнформационныеКарты.КодКарты КАК КодКарты
			|ИЗ
			|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
			|ГДЕ
			|	ИнформационныеКарты.Ссылка = &КартаЛояльности
			|	И НЕ ИнформационныеКарты.КодКарты = """"
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Штрихкоды.Штрихкод
			|ИЗ
			|	РегистрСведений.Штрихкоды КАК Штрихкоды
			|ГДЕ
			|	Штрихкоды.Владелец = &КартаЛояльности";
			
			Запрос.УстановитьПараметр("КартаЛояльности", ВладелецШтрихкода);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				СтруктураДисконтнойКарты.КодКарты = Выборка.КодКарты;
			КонецЕсли;
			
			СтруктураДисконтнойКарты.Контрагент = ВледелецКарты.ВладелецКарты;
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ФизическиеЛица.Наименование КАК ФИО,
			|	ФизическиеЛица.ДатаРождения КАК ДатаРождения
			|ИЗ
			|	Справочник.ФизическиеЛица КАК ФизическиеЛица
			|ГДЕ
			|	НЕ ФизическиеЛица.ЭтоГруппа
			|	И НЕ ФизическиеЛица.ПометкаУдаления
			|	И ФизическиеЛица.Ссылка = &ВледелецКарты
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ФизическиеЛица.Наименование,
			|	ФизическиеЛица.ДатаРождения
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
			|		ПО Контрагенты.ФизЛицо = ФизическиеЛица.Ссылка
			|ГДЕ
			|	НЕ Контрагенты.ЭтоГруппа
			|	И НЕ Контрагенты.ПометкаУдаления
			|	И Контрагенты.Ссылка = &ВледелецКарты";
			
			Запрос.УстановитьПараметр("ВледелецКарты", СтруктураДисконтнойКарты.Контрагент);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ЗаполнитьЗначенияСвойств(СтруктураДисконтнойКарты, Выборка);
			КонецЕсли;
			
			СписокТелефонов = ПодключаемоеОборудованиеРТ.ТелефоныОбъектаДляЧека(ВладелецШтрихкода);
			Если СписокТелефонов.Количество() > 0 Тогда
				СтруктураДисконтнойКарты.НомерТелефонаВладельцаКарты = СписокТелефонов[0].Представление;
			КонецЕсли;
			
			СписокЭлПочты = ПодключаемоеОборудованиеРТ.EmailОбъектаДляЧека(ВладелецШтрихкода);
			Если СписокЭлПочты.Количество() > 0 Тогда
				СтруктураДисконтнойКарты.АдресЭПВладельцаКарты = СписокЭлПочты[0].Значение;
			КонецЕсли;
			
			Возврат СтруктураДисконтнойКарты;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает структуру позиции номенклатуры если владельцем является номенклатура.
//
// Параметры:
//  СтрокаРезультата - Структура - параметры для проверки и заполнения.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
// ВозвращаемоеЗначение:
//  Структура - содержащая данные номенклатуры
//
Функция НайденнаяНоменклатура(СтрокаРезультата, Форма, ПараметрыДляОбработкиШтрихкода) Экспорт
	
	ВладелецШтрихкода = СтрокаРезультата.Владелец;
	
	Если ТипЗнч(ВладелецШтрихкода) = Тип("СправочникСсылка.ШтрихкодыУпаковокТоваров") Тогда
		ВладелецШтрихкода = ВладелецШтрихкода.Номенклатура;
	ИначеЕсли ТипЗнч(ВладелецШтрихкода) = Тип("СправочникСсылка.СерийныеНомера") Тогда
		ВладелецШтрихкода = ВладелецШтрихкода.Владелец;
	КонецЕсли;
	
	Если ТипЗнч(ВладелецШтрихкода) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		СтруктураВыбора = Новый Структура;
		ЗаполнитьСтруктуруВыбора(СтруктураВыбора);
		
		СтруктураВыбора.Номенклатура = ВладелецШтрихкода;
		СтруктураВыбора.Характеристика = СтрокаРезультата.Характеристика;
		
		СвостваМаркируемойПродукции = ИнтеграцияИС.СвойстваМаркируемойПродукции(СтруктураВыбора.Номенклатура,
			СтруктураВыбора.Характеристика);
		СтруктураВыбора.Маркируемый = СвостваМаркируемойПродукции.МаркируемаяПродукция;
		
		Если СтруктураВыбора.Маркируемый Тогда
			ЗаполнитьПризнакиПоштучногоВыбытия(СтруктураВыбора.Номенклатура, СтруктураВыбора.Характеристика, СтруктураВыбора, Форма);
		КонецЕсли;
		
		ЗаполнитьДанныеНоменклатуры(СтруктураВыбора);
		
		Количество = СтрокаРезультата.Количество;
		Если НЕ СтрокаРезультата.Свойство("ВесИзШтрихкода") И ВладелецШтрихкода.Весовой Тогда
			Количество = 0;
		КонецЕсли;
		
		СтруктураВыбора.Количество = Количество;
		СтруктураВыбора.КоличествоУпаковок = Количество;
		
		Если СтрокаРезультата.Свойство("СерияНоменклатуры") Тогда
			СтруктураВыбора.Серия = СтрокаРезультата.СерияНоменклатуры;
		КонецЕсли;
		
		Если СтрокаРезультата.Свойство("Упаковка") Тогда
			СтруктураВыбора.Упаковка = СтрокаРезультата.Упаковка;
		КонецЕсли;
		
		СтруктураВыбора.ЭтоНабор = Ложь;
		СтруктураВыбора.ИспользоватьПартии = Ложь;
		СтруктураВыбора.ПроверятьЗаполнениеПартий = Ложь;
		СтруктураВыбора.ПроверятьЗаполнениеСерий = СтруктураВыбора.НеобходимостьВводаСерии;
		
		СтруктураВыбора.Фасованный = Ложь;
		СтруктураВыбора.Штрихкод = СтрокаРезультата.ДанныеПО;
		
		ОбщегоНазначенияРМКРТ.ЗаполнитьОрганизациюПродажи(СтруктураВыбора, Форма);
		Если Не ЗначениеЗаполнено(СтруктураВыбора.Организация) Тогда
			СтруктураВыбора.Организация = Форма.ОсновнаяОрганизация;
		Иначе
			
			ОтборПоОрганизации = Новый Структура("Организация", СтруктураВыбора.Организация);
			КассыККМПоОрганизации = Форма.ТаблицаКассККМОрганизаций.НайтиСтроки(ОтборПоОрганизации);
			Если КассыККМПоОрганизации.Количество() = 0 Тогда
				СтруктураВыбора.Организация = Форма.ОсновнаяОрганизация;
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураВыбора.СистемаНалогообложения = ОбщегоНазначенияРМКРТ.СНОККТДляОрганизации(Форма.Объект, СтруктураВыбора);
		Если Не ЗначениеЗаполнено(СтруктураВыбора.СистемаНалогообложения) Тогда
			СтруктураВыбора.СистемаНалогообложения = Форма.СистемаНалогообложенияОрганизацииПоУмолчанию;
		КонецЕсли;
		
		ПредставлениеХарактеристики = "";
		Если ЗначениеЗаполнено(СтруктураВыбора.Характеристика) Тогда
			ПредставлениеХарактеристики = " (" + СтруктураВыбора.Характеристика.Наименование + ")";
		КонецЕсли;
		
		ПредставлениеСерии = "";
		Если ЗначениеЗаполнено(СтруктураВыбора.Серия) Тогда
			ПредставлениеСерии = " (" + СтруктураВыбора.Серия.Наименование + ")";
		КонецЕсли;
		
		ПредставлениеТовара = СтруктураВыбора.Наименование + ПредставлениеХарактеристики + ПредставлениеСерии;
		СтруктураВыбора.ПредставлениеНоменклатураХарактеристика = ПредставлениеТовара;
		
		Цена = ЗапасыСервер.ЦенаПродажи(
			Форма.Объект.ТорговыйОбъект,
			ТекущаяДатаСеанса(),
			СтруктураВыбора.Номенклатура,
			СтруктураВыбора.Характеристика,
			СтруктураВыбора.Упаковка,
			Истина);
			
		СтруктураВыбора.Цена = Цена;
		
		Возврат СтруктураВыбора;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает серию номенклатуры если ею является.
//
// Параметры:
//  ВладелецШтрихкода - СправочникСсылка - объект для проверки и заполнения структуры.
//
// ВозвращаемоеЗначение:
//  СправочникСсылка.СерииНоменклатуры
//
Функция НайденнаяСерияНоменклатуры(ВладелецШтрихкода) Экспорт
	
	Если ТипЗнч(ВладелецШтрихкода) = Тип("СправочникСсылка.СерииНоменклатуры")
		ИЛИ ТипЗнч(ВладелецШтрихкода) = Тип("СправочникСсылка.СерийныеНомера") Тогда
		
		Возврат ВладелецШтрихкода;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает признак того, нужно ли проверять статус акцизной марки.
//
// ВозвращаемоеЗначение:
//  Истина - если нужна проверка статуса марки.
//
Функция НужнаПроверкаСтатусаМарки() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Проверка статуса марки.
//
// Параметры
//  ПараметрыПроверки - Структура - параметры для проверки марки.
//
Процедура ПроверитьСтатусМарки(ПараметрыПроверки) Экспорт
	
	ТекстОшибки = "";
	
	Объект = ПараметрыПроверки.Объект;
	СтрокаТовары = ПараметрыПроверки.СтрокаТовары;
	ОрганизацияЕГАИС = Справочники.КлассификаторОрганизацийЕГАИС.ОрганизацияЕГАИСПоОрганизацииИТорговомуОбъекту(
		СтрокаТовары.Организация,
		Объект.ТорговыйОбъект);
		
	Если ОрганизацияЕГАИС = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Не удалось определить организацию ЕГАИС.'");
		ПараметрыПроверки.Вставить("ОшибкаЕГАИС", ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Операция = "Продажа";
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		Операция = "Возврат";
	КонецЕсли;
	
	АкцизныеМаркиЕГАИСРТ.ПроверитьУникальностьАкцизнойМарки(
		Операция,
		ПараметрыПроверки.Штрихкод,
		ТекстОшибки,
		ОрганизацияЕГАИС);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ПараметрыПроверки.Вставить("ОшибкаЕГАИС", ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает найденный товар или товары по переданным исходным данным
//
// Параметры:
//  Штрихкод - Строка - штрихкод для поиска номенклатуры;
//  ВидЦены - СправочникСсылка.ВидыЦен - вид цены (розничная цена);
//  СистемаНалогообложения - ПеречислениеСсылка.ТипыСистемНалогообложенияККТ - система налогообложения;
//  ДанныеМаркировки - (необязательный)Структура:
//		* EAN - Строка;
//		* GTIN - Строка;
//
// Возвращаемое значение:
//  Результат - Выборка, ТаблицаЗначений
//
Функция ВыполнитьПоискТовара(Штрихкод, ВидЦены, СистемаНалогообложения, ДанныеМаркировки = Неопределено) Экспорт
	
	
	
КонецФункции

// Возвращает структуру дисконтной карты
//
// Параметры:
//  МагнитныйКод - Строка - код, по которому выполняется поиск;
//  НомерТелефона - Строка - (необязательный) номер телефона владельца карты
//
// Возвращаемое значение:
//  Результат - Структура,Неопределено - Параметры дисконтной карты, или Неопределено если карта не найдена
//
Функция ДанныеКартыЛояльностиПоМагнитномуКоду(МагнитныйКод, НомерТелефона = Неопределено) Экспорт
	
	
	
КонецФункции

// Возвращает сведения о существующей для номенклатуры упаковки
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - номенклатура, для запроса информации об упаковке
//
// Возвращаемое значение:
//  Результат - Структура
//		*Коэффициент - Число - коэффициент кратности упаковки
//		*Упаковка - СправочникСсылка.Упаковки - найденная упаковка для номенклатуры
//
Функция ДанныеУпаковкиДляТовара(Номенклатура) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Коэффициент", 1);
	Результат.Вставить("Упаковка",
		ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.УпаковкиНоменклатуры.ПустаяСсылка"));
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Упаковки.Ссылка КАК Упаковка,
		|	Упаковки.Коэффициент КАК Коэффициент
		|ИЗ
		|	Справочник.УпаковкиНоменклатуры КАК Упаковки
		|ГДЕ
		|	НЕ Упаковки.ПометкаУдаления
		|	И Упаковки.Владелец = &Номенклатура");
		
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Выборка = Запрос.Выполнить().Выбрать();
		
		МаксимальныйКоэффициент = 0;
		УпаковкаМаксКоэффициент = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Коэффициент > МаксимальныйКоэффициент Тогда
				
				МаксимальныйКоэффициент = Выборка.Коэффициент;
				УпаковкаМаксКоэффициент = Выборка.Упаковка;
				ЗаполнитьЗначенияСвойств(Результат, Выборка);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает партию номенклатуры если ею является.
//
// Параметры:
//  ВладелецШтрихкода - СправочникСсылка - объект для проверки и заполнения структуры.
//
// ВозвращаемоеЗначение:
//  СправочникСсылка.ПартииНоменклатуры
//
Функция НайденнаяПартияНоменклатуры(ВладелецШтрихкода) Экспорт
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ШаблонШтрихкодаВесовогоТовара(ШаблонШтрихкодаВесовогоТовара)
	
	ИмяЗначения = НСтр("ru = ''");
	
	Если ЗначениеЗаполнено(ШаблонШтрихкодаВесовогоТовара) Тогда
		
		ИмяПеречисления = ШаблонШтрихкодаВесовогоТовара.Метаданные().Имя;
		ИндексЗначения = Перечисления[ИмяПеречисления].Индекс(ШаблонШтрихкодаВесовогоТовара);
		ИмяЗначения = Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[ИндексЗначения].Имя;
		
	КонецЕсли;
	
	Возврат ИмяЗначения;
	
КонецФункции

//Возвращает позицию шаблона кода товара, входящего в шаблон штрихкода.
//
//Параметры:
//	ШаблонШтрихкода - Строка - шаблон штрихкода.
//
// Возвращаемое значение:
//	Число - позиция шаблона
//
Функция ПозицияШаблонаКодаТовараВШаблонеШтрихкода(ШаблонШтрихкода)
	Возврат СтрНайти(ШаблонШтрихкода, ОбозначениеКодаТовараВШаблонеШтрихкода());
КонецФункции

//Возвращает символ, обозначающий код товара в шаблоне штрихкода.
//
//Возвращаемое значение:
//	Строка - обозначение кода товара.
//
Функция ОбозначениеКодаТовараВШаблонеШтрихкода()
	Возврат "T";
КонецФункции

//Возвращает символ, обозначающий вес товара в шаблоне штрихкода.
//
//Возвращаемое значение:
//	Строка - обозначение веса товара.
//
Функция ОбозначениеВесаТовараВШаблонеШтрихкода()
	Возврат "W";
КонецФункции

//Возвращает длину шаблона кода товара, входящего в шаблон штрихкода
//
//Параметры:
//	ШаблонШтрихкода - Строка - шаблон штрихкода.
//
//Возвращаемое значение:
//	Число - длина шаблона
//
Функция ДлинаШаблонаКодаТовараВШаблонеШтрихкода(ШаблонШтрихкода)
	Возврат СтрЧислоВхождений(ШаблонШтрихкода, ОбозначениеКодаТовараВШаблонеШтрихкода());
КонецФункции

//Возвращает позицию шаблона веса товара, входящего в шаблон штрихкода
//
//Параметры:
//	ШаблонШтрихкода - Строка - шаблон штрихкода.
//
//Возвращаемое значение:
//	Число - позиция шаблона
//
Функция ПозицияШаблонаВесаТовараВШаблонеШтрихкода(ШаблонШтрихкода)
	Возврат СтрНайти(ШаблонШтрихкода, ОбозначениеВесаТовараВШаблонеШтрихкода());
КонецФункции

//Возвращает длину шаблона веса товара, входящего в шаблон штрихкода.
//
//Параметры:
//	ШаблонШтрихкода - Строка - шаблон штрихкода.
//
//Возвращаемое значение:
//	Число - длина шаблона
//
Функция ДлинаШаблонаВесаТовараВШаблонеШтрихкода(ШаблонШтрихкода)
	Возврат СтрЧислоВхождений(ШаблонШтрихкода, ОбозначениеВесаТовараВШаблонеШтрихкода());
КонецФункции

Процедура ЗаполнитьСтруктуруВыбора(СтруктураВыбора)
	
	СтруктураВыбора = Новый Структура;
	СтруктураВыбора.Вставить("Весовой");
	СтруктураВыбора.Вставить("Количество");
	СтруктураВыбора.Вставить("КоличествоУпаковок");
	СтруктураВыбора.Вставить("Маркируемый");
	СтруктураВыбора.Вставить("НеобходимостьВводаСерии");
	СтруктураВыбора.Вставить("Номенклатура");
	СтруктураВыбора.Вставить("ОсобенностьУчета");
	СтруктураВыбора.Вставить("ПредставлениеНоменклатураХарактеристика");
	СтруктураВыбора.Вставить("Серия");
	СтруктураВыбора.Вставить("СистемаНалогообложения");
	СтруктураВыбора.Вставить("СтавкаНДС");
	СтруктураВыбора.Вставить("ТипНоменклатуры");
	СтруктураВыбора.Вставить("Упаковка");
	СтруктураВыбора.Вставить("Фасованный");
	СтруктураВыбора.Вставить("Характеристика");
	СтруктураВыбора.Вставить("Цена");
	СтруктураВыбора.Вставить("Штрихкод");
	СтруктураВыбора.Вставить("Организация");
	СтруктураВыбора.Вставить("Партия");
	СтруктураВыбора.Вставить("ИспользоватьПартии");
	СтруктураВыбора.Вставить("ПроверятьЗаполнениеПартий");
	СтруктураВыбора.Вставить("ПроверятьЗаполнениеСерий");
	СтруктураВыбора.Вставить("ЭтоНабор");
	СтруктураВыбора.Вставить("ПоштучноеВыбытие");
	СтруктураВыбора.Вставить("ЧастичноеВыбытиеНоменклатура");
	СтруктураВыбора.Вставить("ЧастичноеВыбытиеХарактеристика");
	СтруктураВыбора.Вставить("ЧастичноеВыбытиеВариантУчета");
	СтруктураВыбора.Вставить("ЧастичноеВыбытиеКоличество");
	СтруктураВыбора.Вставить("КоличествоВПотребительскойУпаковке");
	СтруктураВыбора.Вставить("Наименование");
	
КонецПроцедуры

Процедура ЗаполнитьПризнакиПоштучногоВыбытия(Номенклатура, Характеристика, СтруктураВыбора, Форма)
	
	Если Форма.Объект.Товары.Количество() > 0 Тогда
		
		ТекущаяСтрока = Форма.Объект.Товары.НайтиПоИдентификатору(Форма.Элементы.Товары.ТекущаяСтрока);
		Если ТекущаяСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;
	
		Если Не ТекущаяСтрока.ПоштучноеВыбытие Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиЧастичногоВыбытияТоваровИСМП.Номенклатура КАК Номенклатура,
	|	НастройкиЧастичногоВыбытияТоваровИСМП.Характеристика КАК Характеристика,
	|	НастройкиЧастичногоВыбытияТоваровИСМП.НоменклатураЧастичногоВыбытия КАК НоменклатураЧастичногоВыбытия,
	|	НастройкиЧастичногоВыбытияТоваровИСМП.ХарактеристикаЧастичногоВыбытия КАК ХарактеристикаЧастичногоВыбытия
	|ПОМЕСТИТЬ ТаблицаЧастичногоВыбытияПодменыНоменклатуры
	|ИЗ
	|	РегистрСведений.НастройкиЧастичногоВыбытияТоваровИСМП КАК НастройкиЧастичногоВыбытияТоваровИСМП
	|ГДЕ
	|	НастройкиЧастичногоВыбытияТоваровИСМП.Номенклатура = &Номенклатура
	|	И НастройкиЧастичногоВыбытияТоваровИСМП.Характеристика = &Характеристика
	|	И НЕ НастройкиЧастичногоВыбытияТоваровИСМП.Номенклатура ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИСТИНА КАК ПоштучноеВыбытие,
	|	ТаблицаЧастичногоВыбытияПодменыНоменклатуры.НоменклатураЧастичногоВыбытия КАК ЧастичноеВыбытиеНоменклатура,
	|	ТаблицаЧастичногоВыбытияПодменыНоменклатуры.ХарактеристикаЧастичногоВыбытия КАК ЧастичноеВыбытиеХарактеристика,
	|	ЕСТЬNULL(ОписаниеНоменклатурыИС.ВариантЧастичногоВыбытия, ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаЧастичногоВыбытияИСМП.ПустаяСсылка)) КАК ЧастичноеВыбытиеВариантУчета,
	|	ЕСТЬNULL(ОписаниеНоменклатурыИС.ЕмкостьПотребительскойУпаковки, 0) КАК КоличествоВПотребительскойУпаковке,
	|	1 КАК ЧастичноеВыбытиеКоличество,
	|	ТаблицаЧастичногоВыбытияПодменыНоменклатуры.НоменклатураЧастичногоВыбытия КАК Номенклатура,
	|	ТаблицаЧастичногоВыбытияПодменыНоменклатуры.ХарактеристикаЧастичногоВыбытия КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаДанныеПодменыНоменклатуры
	|ИЗ
	|	ТаблицаЧастичногоВыбытияПодменыНоменклатуры КАК ТаблицаЧастичногоВыбытияПодменыНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
	|		ПО ТаблицаЧастичногоВыбытияПодменыНоменклатуры.Номенклатура = ОписаниеНоменклатурыИС.Номенклатура
	|ГДЕ
	|	НЕ ОписаниеНоменклатурыИС.Номенклатура ЕСТЬ NULL
	|	И ОписаниеНоменклатурыИС.ВариантЧастичногоВыбытия = ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаЧастичногоВыбытияИСМП.НастроеннаяНоменклатура)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиЧастичногоВыбытияТоваровИСМП.Номенклатура КАК Номенклатура,
	|	НастройкиЧастичногоВыбытияТоваровИСМП.Характеристика КАК Характеристика,
	|	НастройкиЧастичногоВыбытияТоваровИСМП.НоменклатураЧастичногоВыбытия КАК НоменклатураЧастичногоВыбытия,
	|	НастройкиЧастичногоВыбытияТоваровИСМП.ХарактеристикаЧастичногоВыбытия КАК ХарактеристикаЧастичногоВыбытия
	|ПОМЕСТИТЬ ТаблицаЧастичногоВыбытия
	|ИЗ
	|	РегистрСведений.НастройкиЧастичногоВыбытияТоваровИСМП КАК НастройкиЧастичногоВыбытияТоваровИСМП
	|ГДЕ
	|	НастройкиЧастичногоВыбытияТоваровИСМП.НоменклатураЧастичногоВыбытия = &Номенклатура
	|	И НастройкиЧастичногоВыбытияТоваровИСМП.ХарактеристикаЧастичногоВыбытия = &Характеристика
	|	И НЕ НастройкиЧастичногоВыбытияТоваровИСМП.НоменклатураЧастичногоВыбытия ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИСТИНА КАК ПоштучноеВыбытие,
	|	ТаблицаЧастичногоВыбытия.НоменклатураЧастичногоВыбытия КАК ЧастичноеВыбытиеНоменклатура,
	|	ТаблицаЧастичногоВыбытия.ХарактеристикаЧастичногоВыбытия КАК ЧастичноеВыбытиеХарактеристика,
	|	ЕСТЬNULL(ОписаниеНоменклатурыИС.ВариантЧастичногоВыбытия, ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаЧастичногоВыбытияИСМП.ПустаяСсылка)) КАК ЧастичноеВыбытиеВариантУчета,
	|	ЕСТЬNULL(ОписаниеНоменклатурыИС.ЕмкостьПотребительскойУпаковки, 0) КАК КоличествоВПотребительскойУпаковке,
	|	1 КАК ЧастичноеВыбытиеКоличество,
	|	ТаблицаЧастичногоВыбытия.НоменклатураЧастичногоВыбытия КАК Номенклатура,
	|	ТаблицаЧастичногоВыбытия.ХарактеристикаЧастичногоВыбытия КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаДанныеПоштучногоВыбытия
	|ИЗ
	|	ТаблицаЧастичногоВыбытия КАК ТаблицаЧастичногоВыбытия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
	|		ПО ТаблицаЧастичногоВыбытия.Номенклатура = ОписаниеНоменклатурыИС.Номенклатура
	|ГДЕ
	|	НЕ ОписаниеНоменклатурыИС.Номенклатура ЕСТЬ NULL
	|	И ОписаниеНоменклатурыИС.ВариантЧастичногоВыбытия = ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаЧастичногоВыбытияИСМП.НастроеннаяНоменклатура)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанныеПодменыНоменклатуры.ПоштучноеВыбытие КАК ПоштучноеВыбытие,
	|	ТаблицаДанныеПодменыНоменклатуры.ЧастичноеВыбытиеНоменклатура КАК ЧастичноеВыбытиеНоменклатура,
	|	ТаблицаДанныеПодменыНоменклатуры.ЧастичноеВыбытиеХарактеристика КАК ЧастичноеВыбытиеХарактеристика,
	|	ТаблицаДанныеПодменыНоменклатуры.ЧастичноеВыбытиеВариантУчета КАК ЧастичноеВыбытиеВариантУчета,
	|	ТаблицаДанныеПодменыНоменклатуры.КоличествоВПотребительскойУпаковке КАК КоличествоВПотребительскойУпаковке,
	|	ТаблицаДанныеПодменыНоменклатуры.ЧастичноеВыбытиеКоличество КАК ЧастичноеВыбытиеКоличество,
	|	ТаблицаДанныеПодменыНоменклатуры.Номенклатура КАК Номенклатура,
	|	ТаблицаДанныеПодменыНоменклатуры.Характеристика КАК Характеристика
	|ИЗ
	|	ТаблицаДанныеПодменыНоменклатуры КАК ТаблицаДанныеПодменыНоменклатуры
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДанныеПоштучногоВыбытия.ПоштучноеВыбытие,
	|	ТаблицаДанныеПоштучногоВыбытия.ЧастичноеВыбытиеНоменклатура,
	|	ТаблицаДанныеПоштучногоВыбытия.ЧастичноеВыбытиеХарактеристика,
	|	ТаблицаДанныеПоштучногоВыбытия.ЧастичноеВыбытиеВариантУчета,
	|	ТаблицаДанныеПоштучногоВыбытия.КоличествоВПотребительскойУпаковке,
	|	ТаблицаДанныеПоштучногоВыбытия.ЧастичноеВыбытиеКоличество,
	|	ТаблицаДанныеПоштучногоВыбытия.Номенклатура,
	|	ТаблицаДанныеПоштучногоВыбытия.Характеристика
	|ИЗ
	|	ТаблицаДанныеПоштучногоВыбытия КАК ТаблицаДанныеПоштучногоВыбытия";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураВыбора, Выборка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеНоменклатуры(СтруктураВыбора)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СпрНоменклатура.Весовой КАК Весовой,
	|	ЕСТЬNULL(ВидыНоменклатуры.ИспользоватьСерии, ЛОЖЬ) КАК НеобходимостьВводаСерии,
	|	СпрНоменклатура.ОсобенностьУчета КАК ОсобенностьУчета,
	|	СпрНоменклатура.СтавкаНДС КАК СтавкаНДС,
	|	СпрНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	СпрНоменклатура.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО СпрНоменклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
	|ГДЕ
	|	СпрНоменклатура.Ссылка = &Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", СтруктураВыбора.Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураВыбора, Выборка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
