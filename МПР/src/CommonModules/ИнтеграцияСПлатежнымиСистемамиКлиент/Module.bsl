///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "ИнтернетПоддержкаПользователей.ИнтеграцияСПлатежнымиСистемами".
// ОбщийМодуль.ИнтеграцияСПлатежнымиСистемамиКлиент.
//
// Клиентские процедуры настройки интеграции с платежными системами:
//  - открытие форм настройки параметров интеграции;
//  - отправка сообщений в службу технической поддержки;
//  - переход в журнал регистрации для просмотра лога;
//  - создание новых настроек интеграции;
//  - алгоритмы настройки формы "Интернет-поддержка и сервисы".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Открывает форму списка настроек интеграции с Системой быстрых платежей.
//
// Параметры:
//  Владелец - ФормаКлиентскогоПриложения - форма которая будет установлена в качестве владельца.
//
Процедура НастройкиИнтеграции(Владелец) Экспорт
	
	ОткрытьФорму(
		"Справочник.НастройкиИнтеграцииСПлатежнымиСистемами.ФормаСписка",
		,
		Владелец);
	
КонецПроцедуры

// Открывает форму настройки подключения к с Системой быстрых платежей.
//
// Параметры:
//  БИК - Строка, Неопределено - идентификатор банка. Используется для автоматического
//    выбора участника СБП.
//  ОписаниеОповещения - ОписаниеОповещения, Неопределено - оповещение, которое
//    необходимо вызвать после завершения настройки подключения. В случае успешного
//    завершения настройки интеграции в результате оповещения будет возвращено Истина;
//  ДополнительныеПараметры - Структура, Неопределено - дополнительные параметры подключения.
//    Значение будет передано в переопределяемые методы:
//     - ИнтеграцияСПлатежнымиСистемамиПереопределяемый.ПриЗаполненииФормыИнтеграции;
//     - ИнтеграцияСПлатежнымиСистемамиПереопределяемый.ПриНастройкеЭлементовФормыИнтеграции.
//
Процедура ПодключитьИнтеграциюССБП(
		БИК = Неопределено,
		ОписаниеОповещения = Неопределено,
		ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("БИК", БИК);
	ПараметрыПодключения.Вставить("ТорговаяТочка", Неопределено);
	ПараметрыПодключения.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	
	СлужебнаяПодключитьИнтеграциюССБП(ПараметрыПодключения, ОписаниеОповещения);
	
КонецПроцедуры

// Отправляет сообщение в службу технической поддержки.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииБИП - документ, который отражает
//                     продажу в информационной базе;
//  ТорговаяТочка - СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами -
//                  настройка выполнения оплаты;
//  ТекстСообщения - Строка - сообщение для технической поддержки.
//
Процедура ОтправитьСообщениеВСлужбуТехническойПоддержки(
		ДокументОперации,
		ТорговаяТочка,
		ТекстСообщения = "") Экспорт
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СообщенияВСлужбуТехническойПоддержки") Тогда
		
		ДанныеОперации = ИнтеграцияСПлатежнымиСистемамиВызовСервера.ИнформацияДляТехническойПоддержки(
			ДокументОперации,
			ТорговаяТочка);
		
		Вложения = Новый Массив;
		Вложения.Добавить(
			Новый Структура(
				"Представление, ВидДанных, Данные",
				НСтр("ru = 'Служебные данные операции.txt'"),
				"Текст",
				ДанныеОперации));
		
		ДанныеСообщения = Новый Структура;
		ДанныеСообщения.Вставить("Получатель", "webIts");
		ДанныеСообщения.Вставить("Тема",       НСтр("ru = 'Интернет-поддержка. Интеграция с платежными системами'"));
		ДанныеСообщения.Вставить("Сообщение",  ТекстСообщения);
		
		МодульСообщенияВСлужбуТехническойПоддержкиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СообщенияВСлужбуТехническойПоддержкиКлиент");
		МодульСообщенияВСлужбуТехническойПоддержкиКлиент.ОтправитьСообщение(
			ДанныеСообщения,
			Вложения);
	Иначе
		ВызватьИсключение НСтр("ru = 'Для отправки сообщений в техническую поддержку необходимо встроить подсистему ""СообщенияВСлужбуТехническойПоддержки""'");
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Сформировано сообщение в техническую поддержку.'"),
		,
		,
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.НастройкиПрограммы

// Обработчик команды БИПНастройкаИнтеграцииСПлатежнымиСистемами
// на форме панели администрирования "Интернет-поддержка и сервисы"
// Библиотеки стандартных подсистем.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма панели администрирования;
//  Команда - КомандаФормы - команда на панели администрирования.
//
Процедура ИнтернетПоддержкаИСервисы_БИПНастройкаИнтеграцииСПлатежнымиСистемами(Форма, Команда) Экспорт
	
	НастройкиИнтеграции(Форма);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента БИПДлительностьОперацииПлатежнойСистемы
// на форме панели администрирования "Интернет-поддержка и сервисы"
// Библиотеки стандартных подсистем.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма панели администрирования;
//  Элемент - КомандаФормы - команда на панели администрирования.
//
Процедура БИПДлительностьОперацииПлатежнойСистемыПриИзменении(Форма, Элемент) Экспорт
	
	ИнтеграцияСПлатежнымиСистемамиВызовСервера.УстановитьДлительностьОперации(
		Форма.БИПДлительностьОперацииПлатежнойСистемы);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.НастройкиПрограммы

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Переходит на страницу с описанием инструкций по работе
// механизма сверки взаиморасчетов.
//
Процедура ОткрытьИнформациюОСверкеВзаиморасчетов() Экспорт
	
	ИнтернетПоддержкаПользователейКлиент.ОткрытьСтраницуИнтегрированногоСайта(
		"https://its.1c.ru/");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПодключениеКСистемеБыстрыхПлатежей

// Открывает форму настройки подключения к с Системой быстрых платежей.
//
// Параметры:
//  ПараметрыПодключения - Структура - параметры настройки подключения к Системе быстрых платежей:
//    * БИК - Строка, Неопределено - идентификатор банка. Используется для автоматического
//      выбора участника СБП.
//    * ТорговаяТочка - СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами, Неопределено - настройка
//      для автоматического заполнения параметров подключения на основании;
//    * ДополнительныеПараметры - Структура, Неопределено - дополнительные параметры подключения.
//      Значение будет передано в переопределяемые методы:
//       - ИнтеграцияСПлатежнымиСистемамиПереопределяемый.ПриЗаполненииФормыИнтеграции;
//       - ИнтеграцияСПлатежнымиСистемамиПереопределяемый.ПриНастройкеЭлементовФормыИнтеграции.
//  ОписаниеОповещения - ОписаниеОповещения, Неопределено - оповещение, которое
//    необходимо вызвать после завершения настройки подключения. В случае успешного
//    завершения настройки интеграции в результате оповещения будет возвращено Истина;
//
Процедура СлужебнаяПодключитьИнтеграциюССБП(
		ПараметрыПодключения,
		ОписаниеОповещения = Неопределено) Экспорт
	
	ОткрытьФорму(
		"Обработка.ПодключениеКСБП.Форма",
		ПараметрыПодключения,
		,
		,
		,
		,
		ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеСлужебныеПроцедурыФункции

// Открывает форму журнала регистрации с отбором
// по событию см. ИмяСобытияЖурналаРегистрации.
//
Процедура ОткрытьЖурналРегистрации() Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("СобытиеЖурналаРегистрации", ИмяСобытияЖурналаРегистрации());
	ЖурналРегистрацииКлиент.ОткрытьЖурналРегистрации(Отбор);
	
КонецПроцедуры

// Открывает журнал регистрации с отбором по событию "Интеграция с платежными системами".
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма с описанием ошибки;
//  Элемент - ДекорацияФормы - элемент описания ошибки;
//  НавигационнаяСсылкаФорматированнойСтроки - Строка - значение ссылки;
//  СтандартнаяОбработка - Булево - признак стандартной обработки ссылки.
//
Процедура ДекорацияОшибкаОбработкаНавигационнойСсылки(
		Форма,
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка) Экспорт
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "OpenLog" Тогда
		СтандартнаяОбработка = Ложь;
		Отбор = Новый Структура;
		Отбор.Вставить("СобытиеЖурналаРегистрации", ИмяСобытияЖурналаРегистрации());
		Отбор.Вставить("Уровень",                   "Ошибка");
		ЖурналРегистрацииКлиент.ОткрытьЖурналРегистрации(Отбор, Форма);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает имя события для журнала регистрации, которое используется
// для записи событий загрузки данных из внешних систем.
//
// Возвращаемое значение:
//  Строка - имя события.
//
Функция ИмяСобытияЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Переводы СБП'",
		ОбщегоНазначенияКлиент.КодОсновногоЯзыка());
	
КонецФункции

#КонецОбласти

#КонецОбласти
