
///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ПрограммныйИнтерфейс_ПереопределениеАутентификацииПользователейПоКодамДоступа

// Проверяет наличие ошибок при настройке текущего пользователя 
//
// Параметры:
//  Отказ - Истина - признак наличия отказа, выставляется при выявлении ошибки настройки.
//  ТекстЗаголовка - Строка - текст заголовка ошибки для передачи в заголовок панели ошибок формы РМК.
//  ТекстСообщения - Строка - текст ошибки для передачи в тело ошибки панели ошибок формы РМК.
//
//
Процедура ПроверитьНастройкиПользователя(Отказ, ТекстЗаголовка, ТекстСообщения) Экспорт
КонецПроцедуры

// Возвращает текст запроса соответствия кассира текущему пользователю.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаСоответствияКассираТекущемуПользователю() Экспорт
	
	Возврат "ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка КАК Сотрудник
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО Пользователи.ФизическоеЛицо = ФизическиеЛица.Ссылка
	|ГДЕ
	|	Пользователи.Ссылка = &ТекущийПользователь
	|	И НЕ Пользователи.Служебный
	|	И НЕ Пользователи.ПометкаУдаления
	|	И НЕ ФизическиеЛица.ЭтоГруппа
	|	И НЕ ФизическиеЛица.ПометкаУдаления";

КонецФункции

// Возвращает вновь сгенерированный код доступа кассира
//
// Возвращаемое значение:
//  Результат - Строка
//
Функция НовыйКодДоступаКассира() Экспорт
	Возврат ШтрихкодированиеРМК.СформироватьШтрихкодEAN13Кассира();
КонецФункции

// Возвращает изображение штрихкода в табличном документе
//
// Параметры:
//  КодКассира - Строка - исходные данные кода доступа кассира для выведения в виде сканируемого изображения
//  Наименование - Строка - исходные данные кассира для выведения в виде сканируемого изображения
//
// Возвращаемое значение:
//  Результат - ТабличныйДокумент
//
Функция ПодготовитьКодДоступаПользователяДляСохранения(КодКассира, Наименование) Экспорт
	
	Результат = Новый ТабличныйДокумент;
	ПараметрыШтрихкода = ГенерацияШтрихкода.ПараметрыГенерацииШтрихкода();
	ПараметрыШтрихкода.Ширина = 200;
	ПараметрыШтрихкода.Высота = 100;
	ПараметрыШтрихкода.УровеньКоррекцииQR = 0;
	ПараметрыШтрихкода.Штрихкод = КодКассира;
	ПараметрыШтрихкода.ТипКода = 99;
	ПараметрыШтрихкода.ОтображатьТекст = Истина;
	ПараметрыШтрихкода.РазмерШрифта = 11;
	ПараметрыШтрихкода.УголПоворота = 0;

	ИзображениеШтрихкода = ГенерацияШтрихкода.ИзображениеШтрихкода(ПараметрыШтрихкода);

	ДиапазонНаименованияСотрудника = "R2C1:R3C6";
	ИсходныеДанные = Результат.Область(ДиапазонНаименованияСотрудника);
	ИсходныеДанные.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	ИсходныеДанные.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	ИсходныеДанные.Объединить();
	ИсходныеДанные.Текст = Наименование;
	
	ДиапазонОтображенияКартинки = "R4C1:R7C6";
	Результат.ВставитьОбласть(Результат.Область(ДиапазонОтображенияКартинки));
	ОбластьКартинки = Результат.ПолучитьОбласть(ДиапазонОтображенияКартинки);
	НовыйРисунок = ОбластьКартинки.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
	НовыйРисунок.Картинка = ИзображениеШтрихкода.Картинка;
	НовыйРисунок.Верх = 3;
	НовыйРисунок.Лево = 20;
	НовыйРисунок.Ширина = 60;
	НовыйРисунок.Высота = 30;

	Результат.Вывести(ОбластьКартинки);

	Возврат Результат;
	
КонецФункции


// Возвращает запрос на получение паролей текущего пользователя
//
// Параметры:
//  ТекущийПользователь - СправочникСсылка.Пользователи - пользователь - владелец кодов доступа
//
// Возвращаемое значение:
//  Результат - Запрос
//
Функция ЗапросПолученияКодовДоступаПользователя(ТекущийПользователь) Экспорт
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает признак возможности отправки электронной почты без функциональности БСП
//
// Возвращаемое значение:
//  Результат - Булево
//
Функция ДоступнаОтправкаЭлектроннойПочтыБезБиблиотечнойФункциональности() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Возвращает признак результата успешно формирования email при отправке 
//
// Параметры:
//  ТемаПисьма - Строка - тема отправляемого email
//  ТелоПисьма - Строка - тело текста отправляемого email
//  АдресаПолучателей - Строка - адреса получателей через разделитель
//	РазделительАдресовПолучателей - Строка
//
// Возвращаемое значение:
//  ОтправкаУспешна - Булево - признак успешной отправки
//
Функция ОтправитьEmail(ТемаПисьма, ТелоПисьма, АдресаПолучателей, РазделительАдресовПолучателей = ";") Экспорт
	
	Возврат Ложь;
	
КонецФункции

//Переопределяет значение владельца кода доступа по исходным данным
Процедура ПереопределитьВладельцаКодаДоступа(ВладелецКодаДоступа) Экспорт
	
	Если ЗначениеЗаполнено(ВладелецКодаДоступа) Тогда
		
		Если ТипЗнч(ВладелецКодаДоступа) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			ТипВладельцаКодаДоступа = "Справочник.ФизическиеЛица";
		ИначеЕсли ТипЗнч(ВладелецКодаДоступа) = Тип("СправочникСсылка.Пользователи") Тогда
			ТипВладельцаКодаДоступа = "Справочник.Пользователи";
		Иначе
			ТипВладельцаКодаДоступа = "";
		КонецЕсли;
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ИнформационныеКарты.Ссылка КАК Карта
		|ИЗ
		|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
		|ГДЕ
		|	НЕ ИнформационныеКарты.ЭтоГруппа
		|	И НЕ ИнформационныеКарты.ПометкаУдаления
		|	И ИнформационныеКарты.ВладелецКарты = &ВладелецКарты");
		
		Если ЗначениеЗаполнено(ТипВладельцаКодаДоступа) Тогда
			
			Запрос.Текст = СтрШаблон("%1 И ИнформационныеКарты.ВладелецКарты ССЫЛКА %2",
				Запрос.Текст, ТипВладельцаКодаДоступа);
				
			Запрос.УстановитьПараметр("ВладелецКарты", ВладелецКодаДоступа);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ВладелецКодаДоступа = Выборка.Карта;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Календарные_запреты_продаж_ПрограммныйИнтерфейс

// Заполняет признак использования запретов продаж по данным сервера лояльности
//
// Параметры:
//  Результат - Булево - устанавливаемое значение признака
//
Процедура ЗаполнитьПризнакИспользованияОграниченийПродажРМК(Результат) Экспорт
	Результат = ПолучитьФункциональнуюОпцию("ИспользоватьЗапретПродаж");
КонецПроцедуры

// Обновляет признак использования календарного запрета продаж по данным использования поставляемого конфигурацией
// признака запрета продаж
//
// Параметры:
//  ИспользоватьОграниченияПродаж - Булево - устанавливаемое значение признака
//  ПараметрыОбновления - Структура - дополнительные параметры
//
Процедура ОбновитьПризнакИспользованияОграниченийПродаж(ИспользоватьОграниченияПродаж, ПараметрыОбновления) Экспорт
КонецПроцедуры

// Возвращает признак использования запретов продаж по дням.
//
// ВозвращаемоеЗначение:
//  ИспользоватьЗапретПродаж - Булево - признак использования оплат платежными системами.
//
Функция ИспользоватьЗапретыПродажПоДням() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьЗапретПродаж");
	
КонецФункции

// Устанавливает признак использования запретов продаж, поставляемых конфигурацией
//
// Параметры:
//  ИспользоватьОграниченияПродаж - Булево - исходное значение признака
//
Процедура ЗаполнитьПризнакИспользованияПоставляемыхОграниченийПродаж(ИспользоватьОграниченияПродаж) Экспорт
	
	ЗначениеПризнакаИспользования = ПолучитьФункциональнуюОпцию("ИспользоватьЗапретРозничнойПродажиАлкоголя");
	ИспользоватьОграниченияПродаж = ЗначениеПризнакаИспользования;
	
КонецПроцедуры

// Обновляет регистр сведений запретов продаж по поставляемым (встроенным) конфигурацией ограничениям 
//
// Параметры:
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектРМК- торговый объект для отбора перечня ограничений.
//  Результат - Структура:
//  	* КомментарийОбновленияЗапретов - Строка - при наличии ошибок обновления данных содержит пояснение.
//
Процедура ОбновитьОграниченияПродажИзПоставляемыхДанных(ТорговыйОбъект, Результат) Экспорт
	
	ПараметрыМетода = Новый Структура("Магазин", ТорговыйОбъект);
	ОграниченияПродаж = СервисЛояльности.ДанныеОЗапретахПродаж(ПараметрыМетода);
	
	Результат = Новый Структура();
	Результат.Вставить("ЗапретыПродажУспешноЗагружены", Ложь);
	Результат.Вставить("КомментарийОбновленияЗапретов", НСтр("ru = ''"));
	РезультатОбработки = ОбщегоНазначенияРМКВызовСервера.ОбработатьДанныеЗапретовИзОтвета(ОграниченияПродаж);
	ЗаполнитьЗначенияСвойств(Результат, РезультатОбработки);
	
КонецПроцедуры

// Возвращает признак ведения сведений для передачи в ЕГАИС.
//
// ВозвращаемоеЗначение:
//  ИспользоватьЗапретПродаж - Булево - признак использования оплат платежными системами.
//
Функция ВестиСведенияДляДекларацийПоАлкоголю() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции");
	
КонецФункции

// Возвращает имя константы ведения сведений для декларации по алкоголю.
//
// ВозвращаемоеЗначение:
//  Строка - наименование константы, в которой хранится признак использования ведения деклараций для ЕГАИС.
//
Функция ИмяКонстантыВестиСведенияДляДекларацийПоАлкоголю() Экспорт
	
	Возврат Метаданные.Константы.ВестиСведенияДляДекларацийПоАлкогольнойПродукции.Имя;
	
КонецФункции

// Возвращает имя константы использования запретов на продажи.
//
// ВозвращаемоеЗначение:
//  Строка - наименование константы, в которой хранится признак использования запрета продаж.
//
Функция ИмяКонстантыИспользоватьЗапретПродаж() Экспорт
	
	Возврат Метаданные.Константы.ИспользоватьЗапретПродаж.Имя;
	
КонецФункции

// Возвращает текст запроса наличия запретов продаж по времени.
//
// ВозвращаемоеЗначение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаДействующихЗапретовПродаж() Экспорт
	
	Возврат "ВЫБРАТЬ
	|	УсловияЗапретаПродаж.Организация КАК Организация,
	|	УсловияЗапретаПродаж.ВидНоменклатуры КАК ВидНоменклатуры,
	|	УсловияЗапретаПродаж.ОсобенностьУчета КАК ОсобенностьУчета,
	|	УсловияЗапретаПродаж.ДеньНедели КАК ДеньНедели,
	|	УсловияЗапретаПродаж.ДатаНачалаДействия КАК ДатаНачалаДействия,
	|	УсловияЗапретаПродаж.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
	|	УсловияЗапретаПродаж.ВремяНачала КАК ВремяНачала,
	|	УсловияЗапретаПродаж.ВремяОкончания КАК ВремяОкончания,
	|	УсловияЗапретаПродаж.ИдентификаторЗапрета КАК ИдентификаторЗапрета,
	|	РАЗНОСТЬДАТ(УсловияЗапретаПродаж.ДатаНачалаДействия, &ТекущаяДата, СЕКУНДА) КАК КоличествоСекундМеждуНачаломИТекущейДатой
	|ПОМЕСТИТЬ втИсходныеДанные
	|ИЗ
	|	РегистрСведений.УсловияЗапретаПродажРМК КАК УсловияЗапретаПродаж
	|ГДЕ
	|	УсловияЗапретаПродаж.Организация = &Организация
	|	И НАЧАЛОПЕРИОДА(УсловияЗапретаПродаж.ДатаНачалаДействия, ДЕНЬ) <= &ТекущаяДата
	|	И КОНЕЦПЕРИОДА(УсловияЗапретаПродаж.ДатаОкончанияДействия, ДЕНЬ) >= &ТекущаяДата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УсловияЗапретаПродаж.Организация,
	|	УсловияЗапретаПродаж.ВидНоменклатуры,
	|	УсловияЗапретаПродаж.ОсобенностьУчета,
	|	УсловияЗапретаПродаж.ДеньНедели,
	|	УсловияЗапретаПродаж.ДатаНачалаДействия,
	|	УсловияЗапретаПродаж.ДатаОкончанияДействия,
	|	УсловияЗапретаПродаж.ВремяНачала,
	|	УсловияЗапретаПродаж.ВремяОкончания,
	|	УсловияЗапретаПродаж.ИдентификаторЗапрета,
	|	РАЗНОСТЬДАТ(УсловияЗапретаПродаж.ДатаНачалаДействия, &ТекущаяДата, СЕКУНДА)
	|ИЗ
	|	РегистрСведений.УсловияЗапретаПродажРМК КАК УсловияЗапретаПродаж
	|ГДЕ
	|	УсловияЗапретаПродаж.Организация = &Организация
	|	И НАЧАЛОПЕРИОДА(УсловияЗапретаПродаж.ДатаНачалаДействия, ДЕНЬ) <= &ТекущаяДата
	|	И УсловияЗапретаПродаж.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УсловияЗапретаПродаж.Организация,
	|	УсловияЗапретаПродаж.ВидНоменклатуры,
	|	УсловияЗапретаПродаж.ОсобенностьУчета,
	|	УсловияЗапретаПродаж.ДеньНедели,
	|	УсловияЗапретаПродаж.ДатаНачалаДействия,
	|	УсловияЗапретаПродаж.ДатаОкончанияДействия,
	|	УсловияЗапретаПродаж.ВремяНачала,
	|	УсловияЗапретаПродаж.ВремяОкончания,
	|	УсловияЗапретаПродаж.ИдентификаторЗапрета,
	|	РАЗНОСТЬДАТ(УсловияЗапретаПродаж.ДатаНачалаДействия, &ТекущаяДата, СЕКУНДА)
	|ИЗ
	|	РегистрСведений.УсловияЗапретаПродажРМК КАК УсловияЗапретаПродаж
	|ГДЕ
	|	УсловияЗапретаПродаж.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И НАЧАЛОПЕРИОДА(УсловияЗапретаПродаж.ДатаНачалаДействия, ДЕНЬ) <= &ТекущаяДата
	|	И КОНЕЦПЕРИОДА(УсловияЗапретаПродаж.ДатаОкончанияДействия, ДЕНЬ) >= &ТекущаяДата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УсловияЗапретаПродаж.Организация,
	|	УсловияЗапретаПродаж.ВидНоменклатуры,
	|	УсловияЗапретаПродаж.ОсобенностьУчета,
	|	УсловияЗапретаПродаж.ДеньНедели,
	|	УсловияЗапретаПродаж.ДатаНачалаДействия,
	|	УсловияЗапретаПродаж.ДатаОкончанияДействия,
	|	УсловияЗапретаПродаж.ВремяНачала,
	|	УсловияЗапретаПродаж.ВремяОкончания,
	|	УсловияЗапретаПродаж.ИдентификаторЗапрета,
	|	РАЗНОСТЬДАТ(УсловияЗапретаПродаж.ДатаНачалаДействия, &ТекущаяДата, СЕКУНДА)
	|ИЗ
	|	РегистрСведений.УсловияЗапретаПродажРМК КАК УсловияЗапретаПродаж
	|ГДЕ
	|	УсловияЗапретаПродаж.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И НАЧАЛОПЕРИОДА(УсловияЗапретаПродаж.ДатаНачалаДействия, ДЕНЬ) <= &ТекущаяДата
	|	И УсловияЗапретаПродаж.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ВидНоменклатуры,
	|	ОсобенностьУчета,
	|	ИдентификаторЗапрета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИсходныеДанные.Организация КАК Организация,
	|	втИсходныеДанные.ВидНоменклатуры КАК ВидНоменклатуры,
	|	втИсходныеДанные.ОсобенностьУчета КАК ОсобенностьУчета,
	|	втИсходныеДанные.ИдентификаторЗапрета КАК ИдентификаторЗапрета,
	|	МИНИМУМ(втИсходныеДанные.КоличествоСекундМеждуНачаломИТекущейДатой) КАК КоличествоСекундМеждуНачаломИТекущейДатой
	|ПОМЕСТИТЬ втМинимальныеОтклоненияОтНачалаДня
	|ИЗ
	|	втИсходныеДанные КАК втИсходныеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	втИсходныеДанные.Организация,
	|	втИсходныеДанные.ВидНоменклатуры,
	|	втИсходныеДанные.ОсобенностьУчета,
	|	втИсходныеДанные.ИдентификаторЗапрета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторЗапрета,
	|	Организация,
	|	ВидНоменклатуры,
	|	ОсобенностьУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИсходныеДанные.КоличествоСекундМеждуНачаломИТекущейДатой КАК КоличествоСекундМеждуНачаломИТекущейДатой,
	|	втИсходныеДанные.Организация КАК Организация,
	|	втИсходныеДанные.ВидНоменклатуры КАК ВидНоменклатуры,
	|	втИсходныеДанные.ОсобенностьУчета КАК ОсобенностьУчета,
	|	втИсходныеДанные.ДеньНедели КАК ДеньНедели,
	|	втИсходныеДанные.ДатаНачалаДействия КАК ДатаНачалаДействия,
	|	втИсходныеДанные.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
	|	втИсходныеДанные.ВремяНачала КАК ВремяНачала,
	|	втИсходныеДанные.ВремяОкончания КАК ВремяОкончания,
	|	втИсходныеДанные.ИдентификаторЗапрета КАК ИдентификаторЗапрета
	|ИЗ
	|	втИсходныеДанные КАК втИсходныеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втМинимальныеОтклоненияОтНачалаДня КАК втМинимальныеОтклоненияОтНачалаДня
	|		ПО втИсходныеДанные.ИдентификаторЗапрета = втМинимальныеОтклоненияОтНачалаДня.ИдентификаторЗапрета
	|			И втИсходныеДанные.Организация = втМинимальныеОтклоненияОтНачалаДня.Организация
	|			И втИсходныеДанные.ВидНоменклатуры = втМинимальныеОтклоненияОтНачалаДня.ВидНоменклатуры
	|			И втИсходныеДанные.ОсобенностьУчета = втМинимальныеОтклоненияОтНачалаДня.ОсобенностьУчета
	|			И втИсходныеДанные.КоличествоСекундМеждуНачаломИТекущейДатой = втМинимальныеОтклоненияОтНачалаДня.КоличествоСекундМеждуНачаломИТекущейДатой";
	
КонецФункции

#КонецОбласти

#Область Помощник_настройки_кассового_места_ПрограммныйИнтерфейс

// Возвращает текст запроса организаций и подразделений.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаОрганизацийИПодразделений() Экспорт

	Возврат "ВЫБРАТЬ
		|	Организации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	НЕ Организации.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТорговыеОбъекты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Магазины КАК ТорговыеОбъекты
		|ГДЕ
		|	НЕ ТорговыеОбъекты.ПометкаУдаления";
	
КонецФункции

// Возвращает текст запроса для видов оплат.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаВидовОплатПомощникаНастройкиКассовогоМеста() Экспорт

	Возврат "ВЫБРАТЬ
	|	СправочникВидыОплат.Ссылка КАК Ссылка,
	|	СправочникВидыОплат.ПометкаУдаления КАК ПометкаУдаления,
	|	СправочникВидыОплат.Код КАК Код,
	|	СправочникВидыОплат.Наименование КАК Наименование,
	|	СправочникВидыОплат.ТипОплаты КАК ТипОплаты,
	|	СправочникВидыОплат.БанкКредитор КАК БанкКредитор,
	|	СправочникВидыОплат.ПроцентБанковскойКомиссии КАК ПроцентБанковскойКомиссии,
	|	СправочникВидыОплат.Предопределенный КАК Предопределенный,
	|	СправочникВидыОплат.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
	|ИЗ
	|	Справочник.ВидыОплатЧекаККМ КАК СправочникВидыОплат
	|ГДЕ
	|	НЕ СправочникВидыОплат.ПометкаУдаления
	|	И НЕ СправочникВидыОплат.Ссылка В (ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом), ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.ВстречноеПредоставление), ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.БанковскийПлатеж), ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.ЗачетАванса), ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.ОплатаБонусамиКакСкидкой), ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.ОплатаВрассрочку))";

	
КонецФункции

// Возвращает текст запроса признаков использования оплат картами и платежными системами
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаИспользованияВидовОплатПомощникаНастройкиКассовогоМеста() Экспорт
	
	Возврат "ВЫБРАТЬ
	|	ИспользоватьОплатуПлатежнымиКартами.Значение КАК ИспользоватьОплатуПлатежнымиКартами,
	|	ЛОЖЬ КАК ИспользоватьОплатуПлатежнымиСистемами
	|ИЗ
	|	Константа.ИспользоватьОплатуПлатежнымиКартами КАК ИспользоватьОплатуПлатежнымиКартами";
	
КонецФункции

// Возвращает имя основной таблицы для программно переопределяемого динамического списка
//
// Параметры:
//  ИмяСущности - Строка - имя динамического списка
//
// Возвращаемое значение:
//  Результат - Строка
//
Функция ИмяОсновнойТаблицыДляСущности(ИмяСущности) Экспорт
	
	Результат = "";

	Если ЗначениеЗаполнено(ИмяСущности) Тогда
	
		Если ИмяСущности = "ДополнительныеДанныеПользователей" Тогда
			Результат = "Справочник.Пользователи";
		ИначеЕсли ИмяСущности = "КодыДоступаПользователей" Тогда
			Результат = "РегистрСведений.Штрихкоды";
		ИначеЕсли ИмяСущности = "" Тогда
		Иначе
			Результат = "";
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает текст запроса для данных пользователей.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаДополнительныхДанныхПользователей() Экспорт
	
	Возврат "ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь,
	|	""Подразделение"" КАК Настройка,
	|	Пользователи.Подразделение КАК Значение
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Подразделение = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
	|	И НЕ Пользователи.ПометкаУдаления
	|	И НЕ Пользователи.Недействителен
	|	И НЕ Пользователи.Служебный";
	
КонецФункции

// Возвращает текст запроса для отчета о подключенном оборудовании.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаДляОтчетаОПодключенномОборудовании() Экспорт

	Возврат "ВЫБРАТЬ
	|	КассыККМ.Ссылка КАК КассаККМ,
	|	КассыККМ.Наименование КАК НаименованиеКасса,
	|	КассыККМ.Владелец КАК Организация,
	|	КассыККМ.ИспользоватьБезПодключенияОборудования КАК НаличныеПОСкрыть,
	|	КассыККМ.ПодключаемоеОборудование КАК НаличныеПОСсылка
	|ПОМЕСТИТЬ ТаблицаНаличные
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	КассыККМ.РабочееМесто = &РабочееМесто
	|	И НЕ КассыККМ.ТипКассы = ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ККМOffline)
	|	И КассыККМ.Владелец = &Организация
	|	И НЕ КассыККМ.ПодключаемоеОборудование = ЗНАЧЕНИЕ(Справочник.ПодключаемоеОборудование.ПустаяСсылка)
	|	И НЕ КассыККМ.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭквайринговыеТерминалы.Организация КАК Организация,
	|	МИНИМУМ(ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования) КАК ИспользоватьБезПодключенияОборудования
	|ПОМЕСТИТЬ ТаблицаЭТ
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|ГДЕ
	|	ЭквайринговыеТерминалы.Магазин = &ТорговыйОбъект
	|	И &ИспользоватьОплатуПлатежнымиКартами
	|	И ЭквайринговыеТерминалы.Организация = &Организация
	|	И НЕ ЭквайринговыеТерминалы.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭквайринговыеТерминалы.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНаличные.КассаККМ КАК КассаККМ,
	|	ТаблицаНаличные.НаименованиеКасса КАК НаименованиеКасса,
	|	ТаблицаНаличные.Организация КАК Организация,
	|	ТаблицаНаличные.НаличныеПОСкрыть КАК НаличныеПОСкрыть,
	|	ТаблицаНаличные.НаличныеПОСсылка КАК НаличныеПОСсылка,
	|	ВЫБОР
	|		КОГДА ТаблицаЭТ.Организация ЕСТЬ NULL
	|			ТОГДА """"
	|		ИНАЧЕ ""V""
	|	КОНЕЦ КАК ОплатаКартой,
	|	ЕСТЬNULL(ТаблицаЭТ.ИспользоватьБезПодключенияОборудования, ИСТИНА) КАК ОплатаКартойПОСкрыть
	|ИЗ
	|	ТаблицаНаличные КАК ТаблицаНаличные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЭТ КАК ТаблицаЭТ
	|		ПО ТаблицаНаличные.Организация = ТаблицаЭТ.Организация";
	
	
КонецФункции

// Возвращает текст запроса для данных КассыККМ.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаПеречняКассККМПомощникаНастройкиКассовогоМеста() Экспорт
	
	Возврат "ВЫБРАТЬ
	|	СправочникКассыККМ.Ссылка КАК Ссылка,
	|	СправочникКассыККМ.Владелец КАК Организация,
	|	СправочникКассыККМ.Магазин КАК ТорговыйОбъект,
	|	НЕ СправочникКассыККМ.ПодключаемоеОборудование = ЗНАЧЕНИЕ(Справочник.ПодключаемоеОборудование.ПустаяСсылка) КАК КассаПодключена
	|ИЗ
	|	Справочник.КассыККМ КАК СправочникКассыККМ
	|ГДЕ
	|	НЕ СправочникКассыККМ.ПометкаУдаления";
	
КонецФункции

// Возвращает текст запроса для данных КассыККМ.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаКассККМСОтборомПоВладельцуИСтруктурнойЕдинице() Экспорт

	Возврат "ВЫБРАТЬ
	|	КассыККМ.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	КассыККМ.Владелец = &Владелец
	|	И КассыККМ.Магазин = &ТорговыйОбъект
	|	И НЕ КассыККМ.ПометкаУдаления";

КонецФункции

// Возвращает текст запроса для кодов доступа пользователей в интерфейс нового рабочего места кассира.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаКодовДоступаПользователей() Экспорт

	Возврат "ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь,
	|	ЕСТЬNULL(Штрихкоды.Штрихкод, """") КАК КодДоступа
	|ИЗ
	|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ПО (Штрихкоды.Владелец ССЫЛКА Справочник.ИнформационныеКарты)
	|			И ИнформационныеКарты.Ссылка = Штрихкоды.Владелец
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО (ИнформационныеКарты.ВладелецКарты ССЫЛКА Справочник.ФизическиеЛица)
	|			И (Пользователи.ФизическоеЛицо = ИнформационныеКарты.ВладелецКарты)
	|ГДЕ
	|	ЕСТЬNULL(Штрихкоды.Штрихкод, """") = """"
	|	И НЕ Пользователи.ПометкаУдаления
	|	И НЕ Пользователи.Недействителен
	|	И НЕ Пользователи.Служебный
	|	И НЕ ИнформационныеКарты.ПометкаУдаления
	|	И НЕ ИнформационныеКарты.ЭтоГруппа";
	
КонецФункции

// Возвращает текст запроса эквайринговых терминалов.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаПеречняЭквайринговыхТерминалов() Экспорт

	Возврат "ВЫБРАТЬ
	|	СправочникЭквайринговыеТерминалы.Ссылка КАК Ссылка,
	|	СправочникЭквайринговыеТерминалы.ПометкаУдаления КАК ПометкаУдаления,
	|	СправочникЭквайринговыеТерминалы.Код КАК Код,
	|	СправочникЭквайринговыеТерминалы.Наименование КАК Наименование,
	|	СправочникЭквайринговыеТерминалы.Организация КАК Организация,
	|	СправочникЭквайринговыеТерминалы.Касса КАК Касса,
	|	СправочникЭквайринговыеТерминалы.Магазин КАК ТорговыйОбъект,
	|	СправочникЭквайринговыеТерминалы.ПодключаемоеОборудование КАК ПодключаемоеОборудование,
	|	НЕ СправочникЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования КАК ОборудованиеИспользуется,
	|	СправочникЭквайринговыеТерминалы.Предопределенный КАК Предопределенный,
	|	СправочникЭквайринговыеТерминалы.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
	|	1 КАК ПолеУпорядочивания,
	|	СправочникЭквайринговыеТерминалы.Недействителен КАК Недействителен,
	|	""КассаККМ"" КАК ТипКассы
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы КАК СправочникЭквайринговыеТерминалы
	|ГДЕ
	|	НЕ СправочникЭквайринговыеТерминалы.ПометкаУдаления";

КонецФункции

// Возвращает текст запроса для подключенных эквайринговых терминалов.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаПеречняПодключенныхКассККМ() Экспорт

	Возврат "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КассыККМ.ПодключаемоеОборудование КАК ПодключаемоеОборудование,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ФискальныйРегистратор) КАК ТипОборудования,
	|	КассыККМ.Владелец КАК Организация,
	|	КассыККМ.ПодключаемоеОборудование.СерийныйНомер КАК СерийныйНомер
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	КассыККМ.ТипКассы = ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ФискальныйРегистратор)
	|	И НЕ КассыККМ.ИспользоватьБезПодключенияОборудования
	|	И НЕ КассыККМ.ПометкаУдаления
	|	И НЕ КассыККМ.ПодключаемоеОборудование = ЗНАЧЕНИЕ(Справочник.ПодключаемоеОборудование.ПустаяСсылка)
	|	И КассыККМ.РабочееМесто = &РабочееМесто
	|	И КассыККМ.ПодключаемоеОборудование.РабочееМесто = &РабочееМесто
	|	И КассыККМ.ПодключаемоеОборудование.УстройствоИспользуется
	|	И КассыККМ.Владелец В(&Организации)
	|	И КассыККМ.Магазин = &ТорговыйОбъект";
	
КонецФункции

// Возвращает текст запроса для подключенных эквайринговых терминалов.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаПеречняПодключенныхЭквайринговыхТерминалов() Экспорт

	Возврат "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭквайринговыеТерминалы.ПодключаемоеОборудование,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал) КАК ТипОборудования,
	|	ЭквайринговыеТерминалы.Организация,
	|	ЭквайринговыеТерминалы.ПодключаемоеОборудование.СерийныйНомер КАК СерийныйНомер
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|ГДЕ
	|	НЕ ЭквайринговыеТерминалы.ПометкаУдаления
	|	И ЭквайринговыеТерминалы.Касса ССЫЛКА Справочник.КассыККМ
	|	И ЭквайринговыеТерминалы.Магазин = &ТорговыйОбъект
	|	И НЕ ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования
	|	И НЕ ЭквайринговыеТерминалы.ПодключаемоеОборудование = ЗНАЧЕНИЕ(Справочник.ПодключаемоеОборудование.ПустаяСсылка)";
	
КонецФункции

// Возвращает текст запроса для подключенных эквайринговых терминалов с незаполненными тарифами на обслуживание.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаЭквайринговыхТерминаловСПустымиТарифамиНаОбслуживание() Экспорт

	Возврат "ВЫБРАТЬ
		|	ЭквайринговыеТерминалы.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ втТерминалы
		|ИЗ
		|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
		|ГДЕ
		|	НЕ ЭквайринговыеТерминалы.ПометкаУдаления
		|	И ЭквайринговыеТерминалы.Организация = &Организация
		|	И ЭквайринговыеТерминалы.Магазин = &ТорговыйОбъект
		|	И ЭквайринговыеТерминалы.Касса = &Касса
		|
		|СГРУППИРОВАТЬ ПО
		|	ЭквайринговыеТерминалы.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание.НомерСтроки) КАК КоличествоЗаписейТарифов,
		|	ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ втТарифыОбслуживанияТерминалов
		|ИЗ
		|	втТерминалы КАК втТерминалы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭквайринговыеТерминалы.ТарифыЗаРасчетноеОбслуживание КАК ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание
		|		ПО втТерминалы.Ссылка = ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТерминалы.Ссылка КАК Ссылка,
		|	втТарифыОбслуживанияТерминалов.КоличествоЗаписейТарифов КАК КоличествоЗаписейТарифов
		|ИЗ
		|	втТерминалы КАК втТерминалы
		|		ЛЕВОЕ СОЕДИНЕНИЕ втТарифыОбслуживанияТерминалов КАК втТарифыОбслуживанияТерминалов
		|		ПО втТерминалы.Ссылка = втТарифыОбслуживанияТерминалов.Ссылка
		|ГДЕ
		|	ЕСТЬNULL(втТарифыОбслуживанияТерминалов.КоличествоЗаписейТарифов, 0) = 0";

КонецФункции

// Возвращает текст запроса для отображения результатов настройки ККМ.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаДляОтображенияРезультатовНастройкиККМ() Экспорт

	Возврат "ВЫБРАТЬ
	|	Организации.Организация КАК Организация
	|ПОМЕСТИТЬ ТаблицаОрганизации
	|ИЗ
	|	&Организации КАК Организации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КассыККМ.Ссылка КАК КассаККМ,
	|	КассыККМ.Наименование КАК Наименование,
	|	КассыККМ.РегистрационныйНомер КАК РегистрационныйНомер,
	|	КассыККМ.ПодключаемоеОборудование КАК ПодключаемоеОборудование,
	|	КассыККМ.ТипКассы КАК ТипКассы,
	|	КассыККМ.Владелец КАК Организация
	|ПОМЕСТИТЬ ТаблицаКассККМ
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	КассыККМ.Магазин = &ТорговыйОбъект
	|	И КассыККМ.РабочееМесто = &РабочееМесто
	|	И КассыККМ.Владелец В
	|			(ВЫБРАТЬ
	|				ТаблицаОрганизации.Организация КАК Организация
	|			ИЗ
	|				ТаблицаОрганизации КАК ТаблицаОрганизации)
	|	И КассыККМ.ТипКассы В(&ТипыКассы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОрганизации.Организация КАК Организация,
	|	ЕСТЬNULL(ТаблицаКассККМ.КассаККМ, ЗНАЧЕНИЕ(Справочник.КассыККМ.ПустаяСсылка)) КАК КассаККМ,
	|	ЕСТЬNULL(ТаблицаКассККМ.Наименование, """") КАК Наименование,
	|	ЕСТЬNULL(ТаблицаКассККМ.РегистрационныйНомер, """") КАК РегистрационныйНомер,
	|	ЕСТЬNULL(ТаблицаКассККМ.ПодключаемоеОборудование, ЗНАЧЕНИЕ(Справочник.ПодключаемоеОборудование.ПустаяСсылка)) КАК ПодключаемоеОборудование,
	|	ЕСТЬNULL(ТаблицаКассККМ.ТипКассы, ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ПустаяСсылка)) КАК ТипКассы
	|ИЗ
	|	ТаблицаОрганизации КАК ТаблицаОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКассККМ КАК ТаблицаКассККМ
	|		ПО ТаблицаОрганизации.Организация = ТаблицаКассККМ.Организация";
	
КонецФункции

#КонецОбласти

// Возвращает признак использования бонусных программ.
//
// Параметры:
//  ЗапуститьНовыйРМК - Булево - признак использования нового РМК. Значение по умолчанию ложь.
//
Процедура ОпределитьРежимЗапуска(ЗапуститьНовыйРМК) Экспорт
	
	Если Не ВключеноИспользованиеНовогоРМК() Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьТекущегоПользователя = Истина;
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Если ИнтернетПоддержкаПользователей.СеансЗапущенБезРазделителей() Тогда
			ПолучитьТекущегоПользователя = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ТекущийПользователь = Справочники.Пользователи.ПустаяСсылка();
	Если ПолучитьТекущегоПользователя Тогда
		ТекущийПользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийПользователь) Тогда
		ОткрыватьРМКПриСтарте = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
			ПланыВидовХарактеристик.ПраваПользователей.ОткрыватьРМКПриЗапускеПрограммы,
			Ложь,
			ТекущийПользователь);
		ПользовательСПолнымиПравами = УправлениеДоступом.ЕстьРоль("ПолныеПрава",, ТекущийПользователь);
		ЗапуститьНовыйРМК = ОткрыватьРМКПриСтарте И Не ПользовательСПолнымиПравами;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает признак использования оплат платежными картами.
//
// ВозвращаемоеЗначение:
//  ИспользоватьОплатуПлатежнымиКартами - булево - признак использования оплат платежными картами.
//
Функция ИспользоватьОплатуПлатежнымиКартами() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами");
	
КонецФункции

// Возвращает признак использования оплат платежными системами.
//
// ВозвращаемоеЗначение:
//  ИспользоватьОплатуПлатежнымиСистемами - булево - признак использования оплат платежными системами.
//
Функция ИспользоватьОплатуПлатежнымиСистемами() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Возвращает признак использования бонусных программ.
//  Форма - ФормаКлиентскогоПриложения - данные формы.
//
// Параметры:
//  ИспользоватьБонусныеПрограммы - булево - признак использования бонусных программ.
//
Процедура ИспользоватьБонусныеПрограммы(Форма) Экспорт
	
	Форма.ИспользоватьСервисЛояльности = ПолучитьФункциональнуюОпцию("ИспользоватьСервисЛояльности");
	
КонецПроцедуры

// Возвращает имя константы оплата платежными картами.
//
// ВозвращаемоеЗначение:
//  Строка - наименование константы, в которой хранится признак использования оплат платежными картами.
//
Функция ИмяКонстантыИспользоватьОплатуПлатежнымиКартами() Экспорт
	
	Возврат "ИспользоватьОплатуПлатежнымиКартами";
	
КонецФункции

// Возвращает имя константы оплата платежными системами.
//
// ВозвращаемоеЗначение:
//  Строка - наименование константы, в которой хранится признак использования оплат платежными системами.
//
Функция ИмяКонстантыИспользоватьОплатуПлатежнымиСистемами() Экспорт
	
	Возврат "";
	
КонецФункции

// Возвращает имя константы использовать бонусные программы.
//
// ВозвращаемоеЗначение:
//  Строка - наименование константы, в которой хранится признак использования бонусных программ.
//
Функция ИмяКонстантыИспользоватьБонуснуюПрограмму() Экспорт
	
	Возврат "ИспользоватьБонусныеПрограммыЛояльности";
	
КонецФункции

// Настройка элементов формы "Настройки рабочего места кассира".
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - общая форма настроек РМК.
//
Процедура ПереопределитьНастройкиРМК(Форма) Экспорт
	
	ЗаполнитьПрефиксыВесовогоТовара(Форма);
	НастроитьГруппуСинхронизацияДанных(Форма);
	ИспользоватьБонусныеПрограммы(Форма);
	НастроитьГруппуШаблоныЧеков(Форма);
	НастроитьГруппуЗапретыПродаж(Форма);
	НастроитьИспользованиеНовогоПодбораТоваров(Форма);
	НастроитьИспользованиеОтправкиSMS(Форма);
	НастроитьИспользованиеРежимаСкупки(Форма);
	НастроитьГруппуШаблоныШтрихкодов(Форма);
	
КонецПроцедуры

// Возвращает значение параметра сеанса, в котором хранится текущий магазин.
//
// ВозвращаемоеЗначение:
//  СправочникСсылка - значение текущего магазина из параметра сеанса.
//
Функция ТекущийМагазин() Экспорт
	
	Возврат ПараметрыСеанса.ТекущийМагазин;
	
КонецФункции

// Процедура заполняет данные для работы рабочего места кассира.
// Список параметров: Текущий магазин, розничный вид цен, цена включает НДС, использование подключаемого оборудования,
// использование оплат платежными картами использование бонусных программ, настройка динамического списка товаров.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура ЗаполнитьДанныеДляРМК(Форма) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Возврат;
	КонецЕсли;
	
	Объект.ТорговыйОбъект = ТекущийМагазин();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПравилаЦенообразования.ВидЦен КАК ВидЦен,
	|	ПравилаЦенообразования.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаЦенообразования КАК ПравилаЦенообразования
	|		ПО Магазины.ПравилоЦенообразования = ПравилаЦенообразования.Ссылка
	|ГДЕ
	|	Магазины.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.ТорговыйОбъект);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Форма.РозничныйВидЦены = Выборка.ВидЦен;
		Объект.ЦенаВключаетНДС = Выборка.ЦенаВключаетНДС;
	КонецЕсли;
	
	Объект.ВидОперации = ВидОперацииЧекаККМ();
	Форма.ИспользоватьПодключаемоеОборудование = ПолучитьФункциональнуюОпцию("ИспользоватьПодключаемоеОборудование");
	ИспользоватьОплатуПлатежнымиКартами = ИспользоватьОплатуПлатежнымиКартами();
	ИспользоватьБонусныеПрограммы(Форма);
	НастроитьДинамическийСписокТоваров(Форма);
	Форма.ИспользоватьОплатуПлатежнымиКартами = ИспользоватьОплатуПлатежнымиКартами;
	
	Форма.ИспользоватьОплатуСертификатамиНСПК = ИспользоватьОплатуСертификатамиНСПК();
	Форма.ВидОплатыНСПК = ЭлектронныеСертификатыНСПКРМКПереопределяемый.ВидОплатыПлатежнаяСистемаНСПК();
	Форма.ИспользоватьЗаменуТоваров = ИспользоватьЗаменуТоваров();
	Форма.ИспользоватьПоставляемыеОграниченияПродаж = ОбщегоНазначенияРМК.ИспользоватьПоставляемыеОграниченияПродаж();
	
	Форма.ИспользоватьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьБонусныеПрограммыЛояльности");
	
	ПрограммноСоздатьРеквизитыФормы(Форма);
	
	Форма.Элементы.ЧекКоррекции.Видимость = Ложь;
	
	НастроитьИспользованиеПродажПоЗаказам(Форма);
	НастроитьИспользованиеБезналичныхПлатежей(Форма);
	НастроитьИспользованиеРасчетовСКлиентами(Форма);
	
	НастроитьВидимостьМенюСозданияКарты(Форма);
	ОпределитьЗапускПодАдминистратором(Форма);
	ЗаполнитьСтавкиНДСДляЧекаКоррекции(Форма);
	
	НастройкиСканирования = ИнтеграцияИСМПКлиентСерверПовтИсп.НастройкиСканированияКодовМаркировки();
	Если НЕ НастройкиСканирования = Неопределено И НастройкиСканирования.Свойство("УчитыватьМРЦ") Тогда
		Форма.УчитыватьМРЦ = НастройкиСканирования.УчитыватьМРЦ;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает текст запроса для заполнения избранных товаров.
//
// ВозвращаемоеЗначение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаИзбранныхТоваров() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	НастройкиРМКБыстрыеТовары.Номенклатура КАК Номенклатура,
	|	спрНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристикиНоменклатуры
	|			ТОГДА НастройкиРМКБыстрыеТовары.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	НастройкиРМКБыстрыеТовары.НомерСтроки КАК НомерСтроки,
	|	спрНоменклатура.Представление КАК НоменклатураПредставление,
	|	ПРЕДСТАВЛЕНИЕ(НастройкиРМКБыстрыеТовары.Характеристика) КАК ХарактеристикаПредставление,
	|	ВидыНоменклатуры.ИспользоватьСерии КАК ИспользоватьСерии,
	|	спрНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	спрНоменклатура.ПроизвольныйНоминал КАК ПроизвольныйНоминал,
	|	спрНоменклатура.Номинал КАК Номинал
	|ПОМЕСТИТЬ втНоменклатура
	|ИЗ
	|	Справочник.НастройкиРабочегоМестаКассира.БыстрыеТовары КАК НастройкиРМКБыстрыеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК спрНоменклатура
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|			ПО спрНоменклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
	|		ПО НастройкиРМКБыстрыеТовары.Номенклатура = спрНоменклатура.Ссылка
	|ГДЕ
	|	НастройкиРМКБыстрыеТовары.Ссылка = &НастройкаРМК
	|	И НЕ НастройкиРМКБыстрыеТовары.Ссылка.ПометкаУдаления
	|	И НЕ спрНоменклатура.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	|ПОМЕСТИТЬ втЦеныНоменклатуры
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&Дата,
	|			(Номенклатура, Характеристика) В
	|					(ВЫБРАТЬ
	|						втНоменклатура.Номенклатура КАК Номенклатура,
	|						втНоменклатура.Характеристика КАК Характеристика
	|					ИЗ
	|						втНоменклатура КАК втНоменклатура)
	|				И ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНоменклатура.НомерСтроки КАК НомерСтроки,
	|	втНоменклатура.Номенклатура КАК Номенклатура,
	|	втНоменклатура.Характеристика КАК Характеристика,
	|	втНоменклатура.НоменклатураПредставление КАК НоменклатураПредставление,
	|	втНоменклатура.ХарактеристикаПредставление КАК ХарактеристикаПредставление,
	|	втНоменклатура.ЕдиницаИзмерения КАК Упаковка,
	|	ВЫБОР
	|		КОГДА втНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|			ТОГДА втНоменклатура.Номинал
	|		ИНАЧЕ ЕСТЬNULL(втЦеныНоменклатуры.Цена, 0)
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА втНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|			ТОГДА ИСТИНА
	|		КОГДА ЕСТЬNULL(втЦеныНоменклатуры.Цена, 0) > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДоступностьКоманды
	|ИЗ
	|	втНоменклатура КАК втНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЦеныНоменклатуры КАК втЦеныНоменклатуры
	|		ПО втНоменклатура.Номенклатура = втЦеныНоменклатуры.Номенклатура
	|			И втНоменклатура.Характеристика = втЦеныНоменклатуры.Характеристика
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текущее значение признака использования характеристик номенклатуры
//
// Возвращаемое значение:
//   Результат - Булево
//
Функция ИспользоватьХарактеристикиНоменклатуры() Экспорт

	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");

КонецФункции

// Возвращает текст запроса для данных КассыККМ.
//
// ВозвращаемоеЗначение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаДанныеКассыККМ() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КассыККМ.Ссылка КАК КассаККМ,
	|	КассыККМ.Магазин КАК ТорговыйОбъект,
	|	КассыККМ.Владелец КАК Организация,
	|	КассыККМ.ПодключаемоеОборудование КАК ПодключаемоеОборудование,
	|	КассыККМ.ИспользоватьБезПодключенияОборудования КАК ИспользоватьБезПодключенияОборудования
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	НЕ КассыККМ.ПометкаУдаления
	|	И НЕ КассыККМ.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
	|	И НЕ КассыККМ.ТипКассы = ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ККМOffline)
	|	И КассыККМ.РабочееМесто = &РабочееМестоККМ
	|	И КассыККМ.Магазин = &ТорговыйОбъект
	|	И КассыККМ.ПодключаемоеОборудование.УстройствоИспользуется
	|
	|УПОРЯДОЧИТЬ ПО
	|	КассыККМ.Наименование";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает значение налогообложения НДС для текущей организации.
//
// Параметры:
//  Организация - Справочник.Ссылка - организация, для которой необходимо получить тип налогообложения.
//
// ВозвращаемоеЗначение:
//  ТипНалогообложения - ОпределяемыйТип.НалогообложениеНДСАРМК - тип налогообложения для текущей организации.
//
Функция СНОНДСДляОрганизации(Организация) Экспорт
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает значение налогообложения ККТ для текущей строки.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - данные текущего объекта.
//  ТекущаяСтрока - СтрокаТабличнойЧасти - текущая строка.
//  Дата - ДатаВремя - (необязательный).
//
// Возвращаемое значение:
//  ТипСистемыНалолгообложения - ПеречислениеСсылка.ТипыСистемНалогообложенияККТ.
//
Функция СНОККТДляОрганизации(Объект, ТекущаяСтрока, Дата = '00010101') Экспорт
	
	СНО = Неопределено;
	
	ТекущаяДата = ОбщегоНазначения.ТекущаяДатаПользователя();
	Дата = ?(Дата = '00010101', ТекущаяДата, Дата);
	СкладПродажи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТорговыйОбъект, "СкладПродажи");
	Организация = ?(ТекущаяСтрока = Неопределено, Объект.Организация, ТекущаяСтрока.Организация);
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		ТоварнаяГруппа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Номенклатура, "ТоварнаяГруппа");
	КонецЕсли;
	
	СНО = ПодключаемоеОборудованиеРТ.ПолучитьСистемуНалогообложения(
		Дата,
		Организация,
		Объект.ТорговыйОбъект,
		СкладПродажи,
		ТоварнаяГруппа);
		
	Возврат СНО;
	
КонецФункции

// Возвращает значение налогообложения ККТ для текущей организации.
//
// Параметры:
//  Организация - СправочникСсылка.Организации;
//  Дата - ДатаВремя - (необязательный).
//
// Возвращаемое значение:
//  ТипСистемыНалолгообложения - ПеречислениеСсылка.ТипыСистемНалогообложенияККТ.
//
Функция СНОККТДляОрганизацииПоУмолчанию(Организация, Дата = '00010101') Экспорт
	
	СНО = Неопределено;
	
	Дата = ?(Дата = '00010101', Неопределено, Дата);
	ДанныеСНО = РегистрыСведений.ПрименениеСистемНалогообложения.СистемаНалогообложенияОрганизации(Организация, Дата);
	Если ОбщегоНазначенияРМККлиентСервер.ЕстьСвойство(ДанныеСНО, "СистемаНалогообложения") Тогда
		СНО = ДанныеСНО.СистемаНалогообложения;
	КонецЕсли;
		
	Возврат СНО;
	
КонецФункции

// Процедура заполняет системы налогообложения в чеке ККМ.
//
// Параметры:
//  ЧекККМСсылка - ДокументСсылка.ЧекККМ - документ, в котором нужно заполнить СНО перед записью.
//  СтруктураПараметров - Структура/Неопределено - параметры для выполнения процедуры.
//
Процедура ЗаполнитьСНОВЧекККМ(ЧекККМСсылка, СтруктураПараметров = Неопределено) Экспорт
	
	ЧекККМСсылка.СистемаНалогообложения = СтруктураПараметров.СистемаНалогообложения;
	
КонецПроцедуры

// Возвращает текст запроса для данных эквайрингового терминала.
//
// ВозвращаемоеЗначение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаДанныеЭквайринговогоТерминала() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание.ВидОплаты КАК ВидОплаты,
	|	ЭквайринговыеТерминалы.Ссылка КАК ЭквайринговыйТерминал,
	|	ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования КАК ИспользоватьБезПодключенияОборудования,
	|	ЭквайринговыеТерминалы.ПодключаемоеОборудование КАК ПодключаемоеОборудование,
	|	ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание.ПроцентКомиссииПриПродаже КАК ПроцентКомиссииПриПродаже,
	|	ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание.ПроцентКомиссииПриОтмене КАК ПроцентКомиссииПриОтмене,
	|	ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание.ПроцентКомиссииПриВозврате КАК ПроцентКомиссииПриВозврате,
	|	ЭквайринговыеТерминалы.Организация КАК Организация
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы.ТарифыЗаРасчетноеОбслуживание КАК ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|		ПО ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание.Ссылка = ЭквайринговыеТерминалы.Ссылка
	|ГДЕ
	|	НЕ ЭквайринговыеТерминалы.ПометкаУдаления
	|	И ЭквайринговыеТерминалы.Касса В(&КассаККМ)
	|	И ЭквайринговыеТерминалы.Магазин = &ТорговыйОбъект";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Процедура фомирует запрос и его параметры для получения чеков при закрытии смены.
//
// Параметры:
//  Запрос - Новый Запрос - объект запрос.
//  Форма - ФормаКлиентскогоПриложения - данные формы РМК.
//
Процедура СформироватьЗапросЧековККМДляЗакрытияСмены(Запрос, Форма) Экспорт
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЧекККМ КАК Док
	|ГДЕ
	|	Док.КассаККМ = &КассаККМ
	|	И Док.Проведен
	|	И НЕ Док.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Архивный)
	|	И НЕ Док.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Аннулированный)
	|	И НЕ Док.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Отложенный)";
	
	Запрос.УстановитьПараметр("КассаККМ", Форма.Объект.КассаККМ);
	
КонецПроцедуры

// Возвращает признак нужно ли удалять чеки при закрытии смены.
//
// ВозвращаемоеЗначение:
//  Булево - нужно удалять чеки при закрытии смены.
//
Функция УдалятьЧекиПриЗакрытииСмены() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Процедура фомирует запрос и его параметры для получения чеков для удаления при закрытии смены.
//
// Параметры:
//  Запрос - Новый Запрос - объект запрос.
//  Форма - ФормаКлиентскогоПриложения - данные формы РМК.
//
Процедура СформироватьЗапросЧековККМДляУдаления(Запрос, Форма) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Возвращает режим записи документа ЧекККМ.
//
// ВозвращаемоеЗначение:
//  РежимЗаписиДокумента - режим, который необходим при записи документа ЧекККМ.
//
Функция РежимЗаписи() Экспорт
	
	Возврат РежимЗаписиДокумента.Проведение;
	
КонецФункции

// Формирование текста запроса динамического списка для списка товаров.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура НастроитьДинамическийСписокТоваров(Форма) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	СпрНоменклатура.Ссылка КАК Номенклатура,
		|	СпрНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СпрНоменклатура.Код КАК Код,
		|	СпрНоменклатура.Артикул КАК Артикул,
		|	СпрНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры,
		|	СпрНоменклатура.ОсобенностьУчета КАК ОсобенностьУчета,
		|	СпрНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	СпрНоменклатура.Номинал КАК Номинал
		|ПОМЕСТИТЬ ТаблицаНоменклатура
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|ГДЕ
		|	НЕ СпрНоменклатура.ПометкаУдаления
		|	И НЕ СпрНоменклатура.ЭтоГруппа
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ЦеныНоменклатуры.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
		|	ЕСТЬNULL(ЦеныНоменклатуры.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|			ТОГДА ТаблицаНоменклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка))
		|	КОНЕЦ КАК Упаковка,
		|	МАКСИМУМ(ЕСТЬNULL(ЦеныНоменклатуры.Период, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))) КАК Период,
		|	ЕСТЬNULL(ЦеныНоменклатуры.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) КАК ВидЦены,
		|	ТаблицаНоменклатура.Код КАК Код,
		|	ТаблицаНоменклатура.Артикул КАК Артикул,
		|	ТаблицаНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры,
		|	ТаблицаНоменклатура.ОсобенностьУчета КАК ОсобенностьУчета,
		|	ТаблицаНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	0 КАК Номинал
		|ПОМЕСТИТЬ ТаблицаМаксПериод
		|ИЗ
		|	ТаблицаНоменклатура КАК ТаблицаНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
		|		ПО ТаблицаНоменклатура.Номенклатура = ЦеныНоменклатуры.Номенклатура
		|ГДЕ
		|	ЦеныНоменклатуры.ВидЦены = &ВидЦены
		|	И ЦеныНоменклатуры.Период <= &Дата
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаНоменклатура.Артикул,
		|	ТаблицаНоменклатура.ТипНоменклатуры,
		|	ТаблицаНоменклатура.ОсобенностьУчета,
		|	ЕСТЬNULL(ЦеныНоменклатуры.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)),
		|	ТаблицаНоменклатура.ВидНоменклатуры,
		|	ТаблицаНоменклатура.Код,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|			ТОГДА ТаблицаНоменклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка))
		|	КОНЕЦ,
		|	ЕСТЬNULL(ЦеныНоменклатуры.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)),
		|	ЕСТЬNULL(ЦеныНоменклатуры.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаНоменклатура.Номенклатура,
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
		|	ТаблицаНоменклатура.ЕдиницаИзмерения,
		|	&Дата,
		|	&ВидЦены,
		|	ТаблицаНоменклатура.Код,
		|	ТаблицаНоменклатура.Артикул,
		|	ТаблицаНоменклатура.ВидНоменклатуры,
		|	ТаблицаНоменклатура.ОсобенностьУчета,
		|	ТаблицаНоменклатура.ТипНоменклатуры,
		|	ТаблицаНоменклатура.Номинал
		|ИЗ
		|	ТаблицаНоменклатура КАК ТаблицаНоменклатура
		|ГДЕ
		|	ТаблицаНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	ВидЦены,
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаМаксПериод.Номенклатура КАК Номенклатура,
		|	ТаблицаМаксПериод.Характеристика КАК Характеристика,
		|	ТаблицаМаксПериод.Упаковка КАК Упаковка,
		|	ТаблицаМаксПериод.Период КАК Период,
		|	ТаблицаМаксПериод.ВидЦены КАК ВидЦены,
		|	ТаблицаМаксПериод.Код КАК Код,
		|	ТаблицаМаксПериод.Артикул КАК Артикул,
		|	ТаблицаМаксПериод.ВидНоменклатуры КАК ВидНоменклатуры,
		|	ТаблицаМаксПериод.ОсобенностьУчета КАК ОсобенностьУчета,
		|	ВЫБОР
		|		КОГДА ТаблицаМаксПериод.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
		|			ТОГДА ТаблицаМаксПериод.Номинал
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0)
		|	КОНЕЦ КАК Цена
		|ПОМЕСТИТЬ ТаблицаЦен
		|ИЗ
		|	ТаблицаМаксПериод КАК ТаблицаМаксПериод
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
		|		ПО ТаблицаМаксПериод.Номенклатура = ЦеныНоменклатуры.Номенклатура
		|			И ТаблицаМаксПериод.Характеристика = ЦеныНоменклатуры.Характеристика
		|			И ТаблицаМаксПериод.Период = ЦеныНоменклатуры.Период
		|			И ТаблицаМаксПериод.ВидЦены = ЦеныНоменклатуры.ВидЦены
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Склады.Ссылка КАК Склад
		|ПОМЕСТИТЬ СписокСкладов
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Магазин = &Магазин
		|	И НЕ Склады.ПометкаУдаления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЦен.Номенклатура КАК Номенклатура,
		|	ТаблицаЦен.Характеристика КАК Характеристика,
		|	ТаблицаЦен.Упаковка КАК Упаковка,
		|	ТаблицаЦен.Период КАК Период,
		|	ТаблицаЦен.ВидЦены КАК ВидЦены,
		|	ТаблицаЦен.Код КАК Код,
		|	ТаблицаЦен.Артикул КАК Артикул,
		|	ТаблицаЦен.ВидНоменклатуры КАК ВидНоменклатуры,
		|	ТаблицаЦен.ОсобенностьУчета КАК ОсобенностьУчета,
		|	ТаблицаЦен.Цена КАК Цена,
		|	ЕСТЬNULL(ТоварыНаСкладахОстатки.РезервОстаток, 0) КАК ВРезерве,
		|	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыНаСкладахОстатки.РезервОстаток, 0) КАК Доступно
		|ИЗ
		|	ТаблицаЦен КАК ТаблицаЦен
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
		|				,
		|				(Номенклатура, Характеристика) В
		|						(ВЫБРАТЬ
		|							ТаблицаЦен.Номенклатура КАК Номенклатура,
		|							ТаблицаЦен.Характеристика КАК Характеристика
		|						ИЗ
		|							ТаблицаЦен КАК ТаблицаЦен)
		|					И Склад В
		|						(ВЫБРАТЬ
		|							СписокСкладов.Склад КАК Склад
		|						ИЗ
		|							СписокСкладов КАК СписокСкладов)) КАК ТоварыНаСкладахОстатки
		|		ПО ТаблицаЦен.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
		|			И ТаблицаЦен.Характеристика = ТоварыНаСкладахОстатки.Характеристика";
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	СпрНоменклатура.Ссылка КАК Номенклатура,
		|	СпрНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СпрНоменклатура.Код КАК Код,
		|	СпрНоменклатура.Артикул КАК Артикул,
		|	СпрНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры,
		|	СпрНоменклатура.ОсобенностьУчета КАК ОсобенностьУчета,
		|	СпрНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	СпрНоменклатура.Номинал КАК Номинал
		|ПОМЕСТИТЬ ТаблицаНоменклатура
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|ГДЕ
		|	НЕ СпрНоменклатура.ПометкаУдаления
		|	И НЕ СпрНоменклатура.ЭтоГруппа
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ЦеныНоменклатуры.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|			ТОГДА ТаблицаНоменклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка))
		|	КОНЕЦ КАК Упаковка,
		|	МАКСИМУМ(ЕСТЬNULL(ЦеныНоменклатуры.Период, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))) КАК Период,
		|	ЕСТЬNULL(ЦеныНоменклатуры.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) КАК ВидЦены,
		|	ТаблицаНоменклатура.Код КАК Код,
		|	ТаблицаНоменклатура.Артикул КАК Артикул,
		|	ТаблицаНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры,
		|	ТаблицаНоменклатура.ОсобенностьУчета КАК ОсобенностьУчета,
		|	ТаблицаНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	0 КАК Номинал
		|ПОМЕСТИТЬ ТаблицаМаксПериод
		|ИЗ
		|	ТаблицаНоменклатура КАК ТаблицаНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
		|		ПО ТаблицаНоменклатура.Номенклатура = ЦеныНоменклатуры.Номенклатура
		|ГДЕ
		|	ЦеныНоменклатуры.ВидЦены = &ВидЦены
		|	И ЦеныНоменклатуры.Период <= &Дата
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаНоменклатура.Артикул,
		|	ТаблицаНоменклатура.ТипНоменклатуры,
		|	ТаблицаНоменклатура.ОсобенностьУчета,
		|	ЕСТЬNULL(ЦеныНоменклатуры.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)),
		|	ТаблицаНоменклатура.ВидНоменклатуры,
		|	ТаблицаНоменклатура.Код,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|			ТОГДА ТаблицаНоменклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка))
		|	КОНЕЦ,
		|	ЕСТЬNULL(ЦеныНоменклатуры.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаНоменклатура.Номенклатура,
		|	ТаблицаНоменклатура.ЕдиницаИзмерения,
		|	&Дата,
		|	&ВидЦены,
		|	ТаблицаНоменклатура.Код,
		|	ТаблицаНоменклатура.Артикул,
		|	ТаблицаНоменклатура.ВидНоменклатуры,
		|	ТаблицаНоменклатура.ОсобенностьУчета,
		|	ТаблицаНоменклатура.ТипНоменклатуры,
		|	ТаблицаНоменклатура.Номинал
		|ИЗ
		|	ТаблицаНоменклатура КАК ТаблицаНоменклатура
		|ГДЕ
		|	ТаблицаНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	ВидЦены,
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаМаксПериод.Номенклатура КАК Номенклатура,
		|	ТаблицаМаксПериод.Упаковка КАК Упаковка,
		|	ТаблицаМаксПериод.Период КАК Период,
		|	ТаблицаМаксПериод.ВидЦены КАК ВидЦены,
		|	ТаблицаМаксПериод.Код КАК Код,
		|	ТаблицаМаксПериод.Артикул КАК Артикул,
		|	ТаблицаМаксПериод.ВидНоменклатуры КАК ВидНоменклатуры,
		|	ТаблицаМаксПериод.ОсобенностьУчета КАК ОсобенностьУчета,
		|	ВЫБОР
		|		КОГДА ТаблицаМаксПериод.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
		|			ТОГДА ТаблицаМаксПериод.Номинал
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0)
		|	КОНЕЦ КАК Цена
		|ПОМЕСТИТЬ ТаблицаЦен
		|ИЗ
		|	ТаблицаМаксПериод КАК ТаблицаМаксПериод
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
		|		ПО ТаблицаМаксПериод.Номенклатура = ЦеныНоменклатуры.Номенклатура
		|			И ТаблицаМаксПериод.Период = ЦеныНоменклатуры.Период
		|			И ТаблицаМаксПериод.ВидЦены = ЦеныНоменклатуры.ВидЦены
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Склады.Ссылка КАК Склад
		|ПОМЕСТИТЬ СписокСкладов
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Магазин = &Магазин
		|	И НЕ Склады.ПометкаУдаления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЦен.Номенклатура КАК Номенклатура,
		|	ТаблицаЦен.Упаковка КАК Упаковка,
		|	ТаблицаЦен.Период КАК Период,
		|	ТаблицаЦен.ВидЦены КАК ВидЦены,
		|	ТаблицаЦен.Код КАК Код,
		|	ТаблицаЦен.Артикул КАК Артикул,
		|	ТаблицаЦен.ВидНоменклатуры КАК ВидНоменклатуры,
		|	ТаблицаЦен.ОсобенностьУчета КАК ОсобенностьУчета,
		|	ТаблицаЦен.Цена КАК Цена,
		|	ЕСТЬNULL(ТоварыНаСкладахОстатки.РезервОстаток, 0) КАК ВРезерве,
		|	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыНаСкладахОстатки.РезервОстаток, 0) КАК Доступно
		|ИЗ
		|	ТаблицаЦен КАК ТаблицаЦен
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
		|				,
		|				Номенклатура В
		|						(ВЫБРАТЬ
		|							ТаблицаЦен.Номенклатура КАК Номенклатура
		|						ИЗ
		|							ТаблицаЦен КАК ТаблицаЦен)
		|					И Склад В
		|						(ВЫБРАТЬ
		|							СписокСкладов.Склад КАК Склад
		|						ИЗ
		|							СписокСкладов КАК СписокСкладов)) КАК ТоварыНаСкладахОстатки
		|		ПО ТаблицаЦен.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура"
		
	КонецЕсли;
	
	Форма.СписокТоваров.ТекстЗапроса = ТекстЗапроса;
	Форма.СписокТоваров.Параметры.УстановитьЗначениеПараметра("ВидЦены", Форма.РозничныйВидЦены);
	Форма.СписокТоваров.Параметры.УстановитьЗначениеПараметра("Магазин", Форма.Объект.ТорговыйОбъект);
	Форма.СписокТоваров.Параметры.УстановитьЗначениеПараметра("Дата", ТекущаяДатаСеанса());
	
	НоваяКолонка = Форма.Элементы.Добавить("СписокТоваровДоступно", Тип("ПолеФормы"), Форма.Элементы.СписокТоваров);
	НоваяКолонка.Вид = ВидПоляФормы.ПолеНадписи;
	НоваяКолонка.ПутьКДанным = "СписокТоваров.Доступно";
	НоваяКолонка.Заголовок = "Доступно";
	НоваяКолонка.ШрифтЗаголовка = ШрифтыСтиля.КрупныйШрифтТекста;
	НоваяКолонка.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
	НоваяКолонка.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево;
	
	НоваяКолонка = Форма.Элементы.Добавить("СписокТоваровВРезерве", Тип("ПолеФормы"), Форма.Элементы.СписокТоваров);
	НоваяКолонка.Вид = ВидПоляФормы.ПолеНадписи;
	НоваяКолонка.ПутьКДанным = "СписокТоваров.ВРезерве";
	НоваяКолонка.Заголовок = "В резерве";
	НоваяКолонка.ШрифтЗаголовка = ШрифтыСтиля.КрупныйШрифтТекста;
	НоваяКолонка.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
	НоваяКолонка.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево;
	
КонецПроцедуры

// Процедура создает отложенный документ "Чек ККМ".
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы РМК.
//  ЧекСоздан - Булево - признак, того, что создан отложенный чек.
//
Процедура СоздатьОтложенныйЧек(Форма, ЧекСоздан) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Возврат;
	КонецЕсли;
	
	Попытка
		
		Если ЗначениеЗаполнено(Форма.ОтложенныйЧек) 
			И ОбщегоНазначения.СсылкаСуществует(Форма.ОтложенныйЧек) Тогда
			
			ЧекККМОбъект = Форма.ОтложенныйЧек.ПолучитьОбъект();
			ЧекККМОбъект.Товары.Очистить();
			
		Иначе
			
			ЧекККМОбъект = Документы.ЧекККМ.СоздатьДокумент();
			
			Если ЗначениеЗаполнено(Форма.ОтложенныйЧек) Тогда
				ЧекККМОбъект.УстановитьСсылкуНового(Форма.ОтложенныйЧек);
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЧекККМОбъект, Объект);
		
		ЧекККМОбъект.Магазин = Объект.ТорговыйОбъект;
		ЧекККМОбъект.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Отложенный;
		ЧекККМОбъект.Дата = ТекущаяДатаСеанса();
		
		ЗаполнитьАналитикуХозОперации(ЧекККМОбъект);
		
		ЗаполнитьТабличныеЧастиЧекККМ(Форма, Объект, ЧекККМОбъект);
		
		ОбщегоНазначенияРМККлиентСервер.СуммаДокумента(ЧекККМОбъект);
		
		ЧекККМОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		Форма.ОтложенныйЧек = Документы.ЧекККМ.ПустаяСсылка();
		
		ЧекСоздан = Истина;
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка при попытке отложить чек.'"),
			УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

// Возвращает текущую кассовую смену.
//
// Параметры:
//  КассаККМ - СправочникСсылка.КассыККМ - касса ККМ, для которой нужно определеить кассовую смену.
//
// ВозвращаемоеЗначение:
//  ДокументСсылка.КассоваяСмена - ссылка на документ "Кассовая смена".
//
Функция ТекущаяКассоваяСмена(КассаККМ) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КассоваяСмена.Ссылка КАК КассоваяСмена
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	КассоваяСмена.КассаККМ = &КассаККМ
	|	И НЕ КассоваяСмена.ПометкаУдаления
	|	И КассоваяСмена.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)");
	
	Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
	
	КассоваяСмена = Документы.КассоваяСмена.ПустаяСсылка();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		КассоваяСмена = Выборка.КассоваяСмена;
	КонецЕсли;
	
	Возврат КассоваяСмена;
	
КонецФункции

// Возвращает пустую ссылку на дисконтную карту.
//
// ВозвращаемоеЗначение:
//  СправочникСсылка - пустая ссылка на дисконтную карту.
//
Функция ПустаяСсылкаНаДисконтнуюКарту() Экспорт
	
	Возврат Справочники.ИнформационныеКарты.ПустаяСсылка();
	
КонецФункции

// Возвращает пустую ссылку на контрагента.
//
// ВозвращаемоеЗначение:
//  СправочникСсылка - пустая ссылка на контрагента.
//
Функция ПустаяСсылкаНаКонтрагента() Экспорт
	
	Возврат Справочники.Контрагенты.ПустаяСсылка();
	
КонецФункции

// Возвращает пустую ссылку на серию номенклатуры.
//
// ВозвращаемоеЗначение:
//  СправочникСсылка - пустая ссылка на серию номенклатуры.
//
Функция ПустаяСсылкаНаСериюНоменклатуры() Экспорт
	
	Возврат Справочники.СерииНоменклатуры.ПустаяСсылка();
	
КонецФункции

// Возвращает пустую ссылку на документ чекККМ.
//
// ВозвращаемоеЗначение:
//  ДокументСсылка - пустая ссылка на документ чекККМ.
//
Функция ПустаяСсылкаНаЧекККМ() Экспорт
	
	Возврат Документы.ЧекККМ.ПустаяСсылка();
	
КонецФункции

// Возвращает вид операции чека ККМ.
//
// Параметры:
//  ЭтоВозврат - Булево - признак того, что нужно вернуть вид операции возврат.
//  ЭтоСкупка - Булево - признак того, что нужно вернуть вид операции скупка.
//
// Возвращаемое значение:
//  ПеречислениеСсылка - вид операции чека ККМ (Продажа, Возврат, Скупка, ВозвратСкупки).
//
Функция ВидОперацииЧекаККМ(ЭтоВозврат = Ложь, ЭтоСкупка = Ложь) Экспорт
	
	ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа;
	Если ЭтоВозврат Тогда
		ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат;
	КонецЕсли;
	
	Возврат ВидОперации;
	
КонецФункции

// Возвращает признак того, является ли операция продажей.
//
// Параметры:
//  ВидОперации - ПеречислениеСсылка - текущий вид операции.
//
// ВозвращаемоеЗначение:
//  Булево - Истина, если текущий вид операции продажа.
//
Функция ВидОперацииПродажа(ВидОперации) Экспорт
	
	ЭтоПродажа = Истина;
	Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		ЭтоПродажа = Ложь;
	КонецЕсли;
	
	Возврат ЭтоПродажа;
	
КонецФункции

// Возвращает количество отложенных чеков. Если количество отложенных чеков = 1, то заполняет
// реквизит "Отложенный чек" ссылкой на чекККМ.
//
// Параметры:
//  СтруктураПараметров - Структура - Параметры для выполнения запроса.
//  ОтложенныйЧек - ДокументСсылка.ЧекККМ - реквизит формы, для хранения текущего отложенного чека.
//
// ВозвращаемоеЗначение:
//  КоличествоЧеков - Число - количество чеков ККМ со статусом "Отложен".
//
Функция ПроверитьКоличествоОтложенныхЧеков(СтруктураПараметров, ОтложенныйЧек) Экспорт
	
	КоличествоЧеков = 0;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЧекККМ.Ссылка КАК ЧекККМ
	|ПОМЕСТИТЬ ТаблицаЧеков
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.КассаККМ В (&МассивКассККМ)
	|	И ЧекККМ.Магазин = &ТорговыйОбъект
	|	И ЧекККМ.Организация В (&МассивОрганизаций)
	|	И НЕ ЧекККМ.ПометкаУдаления
	|	И ЧекККМ.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Отложенный)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекККМ.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ТаблицаЧеков.ЧекККМ) КАК КоличествоЧеков
	|ИЗ
	|	ТаблицаЧеков КАК ТаблицаЧеков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЧеков.ЧекККМ КАК ЧекККМ
	|ИЗ
	|	ТаблицаЧеков КАК ТаблицаЧеков");
	
	Запрос.УстановитьПараметр("МассивКассККМ", СтруктураПараметров.МассивКассККМ);
	Запрос.УстановитьПараметр("МассивОрганизаций", СтруктураПараметров.МассивОрганизаций);
	Запрос.УстановитьПараметр("ТорговыйОбъект", СтруктураПараметров.ТорговыйОбъект);
	
	МассивРезультат = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	КоличествоЧеков = МассивРезультат[1].Выгрузить()[0].КоличествоЧеков;
	
	Если КоличествоЧеков = 1 Тогда
		ОтложенныйЧек = МассивРезультат[2].Выгрузить()[0].ЧекККМ;
	КонецЕсли;
	
	Возврат КоличествоЧеков;
	
КонецФункции

// Формирует и записывает документ "Чек ККМ" перед пробитием на ККТ.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы РМК.
//  Отказ - Булево - признак наличия ошибки при записи документа.
//  ТекстОшибки - Строка - текст ошибки.
//  СистемаНалогообложения - ОпределяемыеТипы.ТипыСистемНалогообложенияККТРМК - СНО ККТ для текущего чека.
//
// ВозвращаемоеЗначение:
//  ДокументСсылка.ЧекККМ - ссылка на документ Чек ККМ.
//
Функция ЗаписатьЧекККМПередПробитием(Форма, Отказ, ТекстОшибки, СистемаНалогообложения) Экспорт
	
	ЧекККМ = Документы.ЧекККМ.ПустаяСсылка();
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Возврат ЧекККМ;
	КонецЕсли;
	
	ТоварыИОплаты = ДанныеЧекаПоСистемеНалогообложения(Форма, СистемаНалогообложения, Форма.ОжидаемоеКоличествоЧеков);
	
	Если ЗначениеЗаполнено(Форма.ЧекККМВОбработке)
		И ОбщегоНазначения.СсылкаСуществует(Форма.ЧекККМВОбработке) Тогда
		
		ТекущийЧек = Форма.ЧекККМВОбработке.ПолучитьОбъект();
		
		ТекущийЧек.Товары.Очистить();
		ТекущийЧек.Оплата.Очистить();
		
	ИначеЕсли ЗначениеЗаполнено(Форма.ОтложенныйЧек)
		И ОбщегоНазначения.СсылкаСуществует(Форма.ОтложенныйЧек) Тогда
		
		ТекущийЧек = Форма.ОтложенныйЧек.ПолучитьОбъект();
		
		ТекущийЧек.Товары.Очистить();
		ТекущийЧек.Оплата.Очистить();
		
	Иначе
		
		ТекущийЧек = Документы.ЧекККМ.СоздатьДокумент();
		
		Если ЗначениеЗаполнено(Форма.ЧекККМВОбработке) Тогда
			ТекущийЧек.УстановитьСсылкуНового(Форма.ЧекККМВОбработке);
		ИначеЕсли ЗначениеЗаполнено(Форма.ОтложенныйЧек) Тогда
			ТекущийЧек.УстановитьСсылкуНового(Форма.ОтложенныйЧек);
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		ТекущийЧек.Заблокировать();
	Исключение
		Отказ = Истина;
		ТекстОшибки = НСтр("ru = 'Ошибка блокировки документа.'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ТекстОшибки,
			УровеньЖурналаРегистрации.Ошибка,,
			ТекущийЧек,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат ЧекККМ;
	КонецПопытки;
	
	ТекущийЧек.Дата = ТекущаяДатаСеанса();
	
	СписокСвойств = "Товары, Оплата";
	
	Если Не ЗначениеЗаполнено(ТекущийЧек.ИдентификаторЧекаВОчереди) Тогда
		
		Идентификатор = Новый УникальныйИдентификатор;
		ТекущийЧек.ИдентификаторЧекаВОчереди = XMLСтрока(Идентификатор);
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ТекущийЧек, Объект,,СписокСвойств);
	ТекущийЧек.Магазин = Объект.ТорговыйОбъект;
	ТекущийЧек.Ответственный = Объект.ПользовательБД;
	ТекущийЧек.Продавец = Объект.Кассир;
	
	Если ЗначениеЗаполнено(ТекущийЧек.ДисконтнаяКарта) И Не ЗначениеЗаполнено(ТекущийЧек.ВладелецДисконтнойКарты) Тогда
		ТекущийЧек.ВладелецДисконтнойКарты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийЧек.ДисконтнаяКарта,
			"ВладелецКарты");
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("СистемаНалогообложения", СистемаНалогообложения);
	ЗаполнитьСНОВЧекККМ(ТекущийЧек, СтруктураПараметров);
	ЗаполнитьАналитикуХозОперации(ТекущийЧек);
	
	ЗаполнитьТабличныеЧастиЧекККМ(Форма, ТоварыИОплаты, ТекущийЧек);
	
	ОбщегоНазначенияРМККлиентСервер.СуммаДокумента(ТекущийЧек);
	
	Если Не ВидОперацииПродажа(Объект.ВидОперации) И ЗначениеЗаполнено(Форма.ЧекККМПродажа)
		И Не Форма.ЭтоВозвратАванса Тогда
		
		ТекущийЧек.ЧекККМПродажа = Форма.ЧекККМПродажа;
		ПроверитьВозможностьВозвратаПоЧекуККМ(ТекущийЧек, Отказ, ТекстОшибки);
		
		Если Отказ Тогда
			Возврат ЧекККМ;
		КонецЕсли;
		
	КонецЕсли;
	
	ПроверитьСкладПродажи(ТекущийЧек, Отказ, ТекстОшибки);
	Если Отказ Тогда
		Возврат ЧекККМ;
	КонецЕсли;
	
	Попытка
		ТекущийЧек.Записать(РежимЗаписи());
		ЧекККМ = ТекущийЧек.Ссылка;
	Исключение
		Отказ = Истина;
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Запись документа ЧекККМ перед пробитием на ККТ.'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
	КонецПопытки;
	
	Возврат ЧекККМ;
	
КонецФункции

// Функция возвращает подготовленные данные для пробития на ККТ.
//
// Параметры:
//  ЧекККМВОбработке - ДокументСсылка.ЧекККМ - ссылка на документ ЧекККМ печать, которого производится.
//  ДополнительныеПараметры - Структура:
//   *ЕстьПродукцияЕГАИС - Булево - признак наличия маркируемой алкогольной продукции.
//   *ПечататьБумажныйЧек - Булево - признак нужно печатать чек на ККТ или отправлять в эл.виде.
//   *СистемаНалогообложения - ОпределяемыеТипы.ТипыСистемНалогообложенияККТРМК - СНО ККТ для текущего чека.
//   *СворачиватьСтрокиПриПечатиЧека - Булево - признак нужно ли сворачивать маркируемые товары в чеке.
//   *ОсобенностиУчетаВозвращаемойМаркируемойПродукции - Список - значения особенностей учета товаров из чека,
//     по которым осуществляется возврат без марки
//
// Возвращаемое значение:
//  Структура - см. ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОперацииФискализацииЧека().
//
Функция ПодготовитьДанныеДляПробитияЧека(ЧекККМВОбработке, ДополнительныеПараметры) Экспорт
	
	ЕстьПродукцияЕГАИС = ДополнительныеПараметры.ЕстьПродукцияЕГАИС;
	ПечататьБумажныйЧек = ДополнительныеПараметры.ПечататьБумажныйЧек;
	СистемаНалогообложения = ДополнительныеПараметры.СистемаНалогообложения;
	СворачиватьСтрокиПриПечатиЧека = ДополнительныеПараметры.СворачиватьСтрокиПриПечатиЧека;
	ОсобенностиУчетаВозвращаемойМаркируемойПродукции =
		ДополнительныеПараметры.ОсобенностиУчетаВозвращаемойМаркируемойПродукции;
	
	СтруктураДанных = РозничныеПродажиКлиентСервер.СтруктураДанныхДляПробитияЧека();
	СтруктураДанных.ЧекККМСсылка = ЧекККМВОбработке;
	СтруктураДанных.НеПечататьБумажныйЧек = НЕ ПечататьБумажныйЧек;
	СтруктураДанных.ЕстьАлкогольнаяПродукцияЕГАИС = ЕстьПродукцияЕГАИС;
	СтруктураДанных.ЭтоВозвратПродукцииИСМПБезМарки =
		ОсобенностиУчетаВозвращаемойМаркируемойПродукции.Количество() > 0 ;
	
	ДанныеДляПробитияЧека = РозничныеПродажиСервер.ПодготовитьДанныеДляПробитияЧека(СтруктураДанных);
	
	ЕстьПродукцияЕГАИС = СтруктураДанных.ЕстьАлкогольнаяПродукцияЕГАИС;
	ДополнительныеПараметры.ЕстьПродукцияЕГАИС = ЕстьПродукцияЕГАИС;
	
	Если СворачиватьСтрокиПриПечатиЧека Тогда
		СвернутьСтрокиПриПечатиЧека(ДанныеДляПробитияЧека);
	КонецЕсли;
	
	Возврат ДанныеДляПробитияЧека;
	
КонецФункции

// Процедура обрабатывает ЧекККМ после пробития на ККИ.
//
// Параметры:
//  ВходящиеДанные - Структура - данные о результате пробития чека на ККТ.
//  Форма - ФормаКлиентскогоПриложения - данные формы РМК.
//
Процедура ПробитьЧекЗавершение(ВходящиеДанные, Форма) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ВходящиеДанные.Свойство("Результат") Тогда
		
		//Чек в состоянии "Фискализируется".
		Если ВходящиеДанные.Результат = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		//Чек в состоянии "Ошибка".
		Если Не ВходящиеДанные.Результат Тогда
		
			Если Не ВходящиеДанные.ЧекККМСсылка = Неопределено Тогда
				ЧекККМОбъект = ВходящиеДанные.ЧекККМСсылка.ПолучитьОбъект();
				
				ДокументЗаблокирован = Ложь;
				Попытка
					ЧекККМОбъект.Заблокировать();
					ЧекККМОбъект.Оплата.Очистить();
					ДокументЗаблокирован = Истина;
				Исключение
					ТекстОшибки = НСтр("ru = 'Ошибка блокировки документа.'", ОбщегоНазначения.КодОсновногоЯзыка());
					ЗаписьЖурналаРегистрации(ТекстОшибки,
						УровеньЖурналаРегистрации.Ошибка,,
						ЧекККМОбъект,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;
				
				Если ДокументЗаблокирован Тогда
					ЧекККМОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				КонецЕсли;
			КонецЕсли;
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	ЧекККМОбъект = ВходящиеДанные.ЧекККМСсылка.ПолучитьОбъект();
	
	Если ЧекККМОбъект.Товары.Количество() > 0 Тогда
		
		Если Форма.ЭтоЗаменаТоваров Тогда
		
			ЭтоЧекНаВозврат = ЧекККМОбъект.ВидОперации = ОбщегоНазначения.ПредопределенныйЭлемент("Перечисление.ВидыОперацийЧекККМ.Возврат");
			ОтборПоВидуОперации = Новый Структура("Возврат", ЭтоЧекНаВозврат);
			СистемаНалогообложенияПродажи = СистемаНалогообложенияЧека(ЧекККМОбъект);
			
			Если Форма.ПробитыеЧеки.НайтиСтроки(ОтборПоВидуОперации).Количество() = 0
				И Форма.ОжидаемоеКоличествоЧеков > 0 Тогда
				
				УспешноПробитыйЧек = Форма.ПробитыеЧеки.Добавить();
				УспешноПробитыйЧек.ЧекККМ = ВходящиеДанные.ЧекККМСсылка;
				УспешноПробитыйЧек.СистемаНалогообложения = СистемаНалогообложенияПродажи;
				УспешноПробитыйЧек.Возврат = ЭтоЧекНаВозврат;
				УспешноПробитыйЧек.Организация = ЧекККМОбъект.Организация;
				
			КонецЕсли;
			
		Иначе
			ОплатыКРаспределению = Объект.Оплата.Выгрузить();
			
			Для каждого СтрокаОплатыЧека Из ЧекККМОбъект.Оплата Цикл
				
				ОтборПоВидуОплаты = Новый Структура("ВидОплаты",СтрокаОплатыЧека.ВидОплаты);
				СтрокиОплатыКРаспределению = ОплатыКРаспределению.НайтиСтроки(ОтборПоВидуОплаты);
				
				Если СтрокиОплатыКРаспределению.Количество() > 0 Тогда
					СтрокиОплатыКРаспределению[0].Сумма = СтрокиОплатыКРаспределению[0].Сумма - СтрокаОплатыЧека.Сумма;
				КонецЕсли;
				
			КонецЦикла;
			
			Объект.Оплата.Загрузить(ОплатыКРаспределению);
			
			СистемаНалогообложенияПродажи = ЧекККМОбъект.СистемаНалогообложения;
			
			ОтборПоСистемеНалогообложения = Новый Структура("СистемаНалогообложения", СистемаНалогообложенияПродажи);
			
			Если Форма.ПробитыеЧеки.НайтиСтроки(ОтборПоСистемеНалогообложения).Количество() = 0
				И Форма.ОжидаемоеКоличествоЧеков > 0 Тогда
				
				УспешноПробитыйЧек = Форма.ПробитыеЧеки.Добавить();
				УспешноПробитыйЧек.ЧекККМ = ВходящиеДанные.ЧекККМСсылка;
				УспешноПробитыйЧек.СистемаНалогообложения = СистемаНалогообложенияПродажи;
				УспешноПробитыйЧек.Организация = ЧекККМОбъект.Организация;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура настраивает динамический список для получения списка чеков для возврата.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы выбора чеков.
//
Процедура ЗаполнитьТаблицуЧековККМНаВозврат(Форма) Экспорт
	
	НастроитьЗапросСписокЧеков(Форма);
	
	СтатусыЧеков = Новый Массив;
	СтатусыЧеков.Добавить(Перечисления.СтатусыЧековККМ.Архивный);
	СтатусыЧеков.Добавить(Перечисления.СтатусыЧековККМ.Пробитый);
	
	ВидыОперацииПродажа = Перечисления.ВидыОперацийЧекККМ.Продажа;
	
	ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(
		Форма.ТаблицаЧековККМ,
		"Статус",
		СтатусыЧеков,
		ВидСравненияКомпоновкиДанных.ВСписке);
		
	ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(
		Форма.ТаблицаЧековККМ,
		"ВидОперации",
		ВидыОперацииПродажа,
		ВидСравненияКомпоновкиДанных.Равно);
	
КонецПроцедуры

// Процедура настраивает динамический список для получения списка отложенных чеков.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы выбора чеков.
//
Процедура ЗаполнитьТаблицуОтложенныхЧековККМ(Форма) Экспорт
	
	НастроитьЗапросСписокЧеков(Форма);
	
	СтатусОтложенногоЧека = Перечисления.СтатусыЧековККМ.Отложенный;
	
	ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(
		Форма.ТаблицаЧековККМ,
		"Статус",
		СтатусОтложенногоЧека,
		ВидСравненияКомпоновкиДанных.Равно);
	
КонецПроцедуры

// Процедура настраивает динамический список для получения списка чеков для повторной печати.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы выбора чеков.
//
Процедура ЗаполнитьТаблицуЧековККМДляПовторнойПечати(Форма) Экспорт
	
	НастроитьЗапросСписокЧеков(Форма);
	
	СтатусыЧеков = Новый Массив;
	СтатусыЧеков.Добавить(Перечисления.СтатусыЧековККМ.Архивный);
	СтатусыЧеков.Добавить(Перечисления.СтатусыЧековККМ.Пробитый);
	
	ВидыОперацийЧеков = Новый Массив;
	ВидыОперацийЧеков.Добавить(Перечисления.ВидыОперацийЧекККМ.Продажа);
	ВидыОперацийЧеков.Добавить(Перечисления.ВидыОперацийЧекККМ.Возврат);
	
	ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(
		Форма.ТаблицаЧековККМ,
		"Статус",
		СтатусыЧеков,
		ВидСравненияКомпоновкиДанных.ВСписке);
	
	ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(
		Форма.ТаблицаЧековККМ,
		"ВидОперации",
		ВидыОперацийЧеков,
		ВидСравненияКомпоновкиДанных.ВСписке);
		
КонецПроцедуры

// Процедура архивирует чеки при закрытии смены. При необходимости удаляет чеки.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы РМК.
//  Параметры - Структура - параметры для анализа закрытия смены.
//
Процедура ЗаархивироватьЧекиККМ(Форма, Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(Форма.РабочееМесто) Тогда
		
		Параметры.ТекстОшибки = НСтр("ru = 'Ошибка определения рабочего места.
			|Обратитесь к администратору системы.'");
		Параметры.Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	СформироватьЗапросЧековККМДляЗакрытияСмены(Запрос, Форма);
	
	ТаблицаЧеков = Запрос.Выполнить().Выгрузить();
	
	//Архивация чеков ККМ.
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Документ.ЧекККМ");
	ЭлементБлокировки.ИсточникДанных = ТаблицаЧеков;
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
	Блокировка.Заблокировать();
	
	Попытка
		
		Для Каждого ТекущийЧек Из ТаблицаЧеков Цикл
			
			ДокументОбъект = ТекущийЧек.Ссылка.ПолучитьОбъект();
			ДокументОбъект.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Архивный;
			ДокументОбъект.КассоваяСмена = Форма.КассоваяСмена;
			ДокументОбъект.Записать(РежимЗаписи());
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Параметры.ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Не удалось заархивировать чеки. %1'"),
			ОписаниеОшибки());
		Параметры.Отказ = Истина;
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка при архивации документов ""Чек ККМ"".'"),
			УровеньЖурналаРегистрации.Ошибка,,,Параметры.ТекстОшибки);
			
		Возврат;
		
	КонецПопытки;
	
	Если Не УдалятьЧекиПриЗакрытииСмены() Тогда
		Возврат;
	КонецЕсли;
	
	//Удаление отложенных и прочих чеков за текущую кассовую смену.
	Запрос = Новый Запрос;
	СформироватьЗапросЧековККМДляУдаления(Запрос, Форма);
	
	ТаблицаЧековДляУдаления = Запрос.Выполнить().Выгрузить();
	
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Документ.ЧекККМ");
	ЭлементБлокировки.ИсточникДанных = ТаблицаЧековДляУдаления;
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
	Блокировка.Заблокировать();
	
	Попытка
		
		Для Каждого ЧекДляУдаления Из ТаблицаЧековДляУдаления Цикл
			
			ЧекДляУдаления = ЧекДляУдаления.Ссылка.ПолучитьОбъект();
			Если ЧекДляУдаления.Проведен Тогда
				ЧекДляУдаления.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли;
			ЧекДляУдаления.Удалить();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Параметры.ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось удалить чеки. %1'"),ОписаниеОшибки());
		Параметры.Отказ = Истина;
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка при попытке удалить документ ""Чек ККМ"".'"),
			УровеньЖурналаРегистрации.Ошибка,,,Параметры.ТекстОшибки);
			
	КонецПопытки;
	
КонецПроцедуры

// Процедура заполняет доступные права для текущего пользователя.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы РМК.
//
Процедура ЗаполнитьТаблицуРолейПользователя(Форма) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Возврат;
	КонецЕсли;
	
	Форма.СписокРолейПользователя.Очистить();
	
	ТекущийПользователь = Объект.ПользовательБД;
	
	ЕстьПравоРучнаяСкидка = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
		ПланыВидовХарактеристик.ПраваПользователей.РазрешитьНазначениеРучныхСкидок,
		Ложь,
		ТекущийПользователь);
	Если ЕстьПравоРучнаяСкидка Тогда
		Форма.СписокРолейПользователя.Добавить("ПравоРучнаяСкидкаРМК");
	КонецЕсли;
	
	ЕстьПравоУдалитьСтроку = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
		ПланыВидовХарактеристик.ПраваПользователей.РазрешитьСторнированиеТовара,
		Ложь,
		ТекущийПользователь);
	Если ЕстьПравоУдалитьСтроку Тогда
		Форма.СписокРолейПользователя.Добавить("ПравоУдалитьСтрокуРМК");
	КонецЕсли;
	
	ЕстьПравоЧекНаВозврат = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
		ПланыВидовХарактеристик.ПраваПользователей.РазрешитьЧекВозврата,
		Ложь,
		ТекущийПользователь);
	Если ЕстьПравоЧекНаВозврат Тогда
		Форма.СписокРолейПользователя.Добавить("ПравоЧекНаВозвратРМК");
	КонецЕсли;
	
	ЕстьПравоУдалитьЧек = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
		ПланыВидовХарактеристик.ПраваПользователей.РазрешитьРедактироватьНабранныйЧек,
		Ложь,
		ТекущийПользователь);
	Если ЕстьПравоУдалитьЧек Тогда
		Форма.СписокРолейПользователя.Добавить("ПравоУдалитьЧекРМК");
	КонецЕсли;
	
	ЕстьПравоИзменитьЦену = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
		ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену,
		Ложь,
		ТекущийПользователь);
	Если ЕстьПравоИзменитьЦену Тогда
		Форма.СписокРолейПользователя.Добавить("ПравоИзменятьЦенуРМК");
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет данные на форме РМК на освновании выбранного чека.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы РМК.
//  ЧекККМ - ДокументСсылка.ЧекККМ - выбранный чек ККМ.
//
Процедура ЗаполнитьНаОснованииЧекаККМ(Форма, ЧекККМ) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Возврат;
	КонецЕсли;
	
	Форма.ЧекККМПродажа = ЧекККМ.Ссылка;
	
	ЧекПродажиНаАванс = ЧекККМ.ОперацияСДенежнымиСредствами И ЧекККМ.Товары.Количество() = 0;
	ЧекПредоплаты = ЧекККМ.ОперацияСДенежнымиСредствами И ЧекККМ.Товары.Количество() > 0;
	
	ЭтоВозвратПредоплаты = Ложь;
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат И ЧекПредоплаты Тогда
		ЭтоВозвратПредоплаты = Истина;
	КонецЕсли;
	
	ЭтоВозвратАванса = Ложь;
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат И ЧекПродажиНаАванс Тогда
		ЭтоВозвратАванса = Истина;
	КонецЕсли;
	Форма.ЭтоВозвратАванса = ЭтоВозвратАванса;
	
	СписокСвойств = "Товары, Оплата, ВидОперации";
	Если ЗначениеЗаполнено(Объект.ДокументРасчета) Тогда
		СписокСвойств = "Товары, Оплата, ВидОперации, ДокументРасчета";
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Объект, ЧекККМ,,СписокСвойств);
	
	Если ЧекПродажиНаАванс И Не ЗначениеЗаполнено(Объект.ДокументРасчета) Тогда
		
		Форма.ПриемАванса = Истина;
		
		НоваяСтрокаТовары = Объект.Товары.Добавить();
		НоваяСтрокаТовары.ПредставлениеНоменклатураХарактеристика = НСтр("ru = 'Аванс'");
		НоваяСтрокаТовары.ПредставлениеЕдиницыИзмерения = НСтр("ru = 'шт'");
		НоваяСтрокаТовары.Количество = 1;
		НоваяСтрокаТовары.КоличествоУпаковок = 1;
		НоваяСтрокаТовары.СистемаНалогообложения = ЧекККМ.СистемаНалогообложения;
		НоваяСтрокаТовары.Организация = ЧекККМ.Организация;
		НоваяСтрокаТовары.Цена = ЧекККМ.СуммаДокумента;
		НоваяСтрокаТовары.Сумма = ЧекККМ.СуммаДокумента;
		НоваяСтрокаТовары.СуммаБезСкидки = ЧекККМ.СуммаДокумента;
		
	Иначе
		ЗаполнитьТабличныеЧастиИзЧекККМ(ЧекККМ, Форма);
	КонецЕсли;
	
	Если Форма.ЭтоЗачетАванса Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоВозвратАванса ИЛИ ЭтоВозвратПредоплаты Тогда
		Объект.ДокументРасчета = ЧекККМ;
	КонецЕсли;
	
	Объект.Оплата.Очистить();
	ВидОплатыКартой = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОплатЧекаККМ.ПустаяСсылка");
	
	Для Каждого СтрокаОплатыЧекККМ Из ЧекККМ.Оплата Цикл
		
		НоваяСтрокаОплата = Объект.Оплата.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаОплата, СтрокаОплатыЧекККМ);
		
		Если СтрокаОплатыЧекККМ.ВидОплаты = Справочники.ВидыОплатЧекаККМ.Наличные Тогда
			Форма.СуммаОплаченоНал = Форма.СуммаОплаченоНал + СтрокаОплатыЧекККМ.Сумма;
		ИначеЕсли СтрокаОплатыЧекККМ.ВидОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта Тогда
			
			Форма.СуммаОплаченоБН = Форма.СуммаОплаченоБН + СтрокаОплатыЧекККМ.Сумма;
			ВидОплатыКартой = СтрокаОплатыЧекККМ.ВидОплаты;
			
		ИначеЕсли СтрокаОплатыЧекККМ.ВидОплаты = Справочники.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом Тогда
			Если ЧекККМ.ПогашениеПодарочныхСертификатов.Количество() > 0 Тогда
				Форма.СуммаОплаченоСертификатами = Форма.СуммаОплаченоСертификатами +
					ЧекККМ.ПогашениеПодарочныхСертификатов[0].СуммаПогашенияСертификата;
				Форма.НомерСертификата = Строка(ЧекККМ.ПогашениеПодарочныхСертификатов[0].СерийныйНомер);
			КонецЕсли;
			
		Иначеесли СтрокаОплатыЧекККМ.ВидОплаты = Справочники.ВидыОплатЧекаККМ.ОплатаВрассрочку Тогда
			Форма.СуммаОплаченоВРассрочку = Форма.СуммаОплаченоВРассрочку + СтрокаОплатыЧекККМ.Сумма;
		КонецЕсли;
		
	КонецЦикла;

	Если ЗначениеЗаполнено(ВидОплатыКартой) Тогда
		
		СтруктураПоиска = Новый Структура("ВидОплаты", ВидОплатыКартой);
		МассивВидовОплат = Форма.ТаблицаПлатежныхКарт.НайтиСтроки(СтруктураПоиска);
		Если МассивВидовОплат.Количество() > 0 Тогда
			Форма.ВыбранныйВидОплаты = МассивВидовОплат[0].ИмяКоманды;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет данные на форме РМК на освновании выбранного отложенного чека.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы РМК.
//  ОтложенныйЧек - ДокументСсылка.ЧекККМ - выбранный отложенный чек ККМ.
//
Процедура ЗаполнитьДанныеИзОтложенногоЧека(Форма, ОтложенныйЧек) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Возврат;
	КонецЕсли;
	
	СписокСвойств = "Товары, Оплата, ДисконтнаяКарта";
	ЗаполнитьЗначенияСвойств(Объект, ОтложенныйЧек,,СписокСвойств);
	
	ЗаполнитьТабличныеЧастиИзЧекККМ(ОтложенныйЧек, Форма);
	
	СкладПродажи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТорговыйОбъект, "СкладПродажи");
	ТекущаяДата = ОбщегоНазначения.ТекущаяДатаПользователя();
	
	Для Каждого НоваяСтрокаТовары Из Объект.Товары цикл
		
		ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьОрганизациюПродажи(НоваяСтрокаТовары, Форма);
		Если НЕ ЗначениеЗаполнено(НоваяСтрокаТовары.Организация) Тогда
			НоваяСтрокаТовары.Организация = Форма.ОсновнаяОрганизация;
		Иначе
			
			ОтборПоОрганизации = Новый Структура("Организация", НоваяСтрокаТовары.Организация);
			КассыККМПоОрганизации = Форма.ТаблицаКассККМОрганизаций.НайтиСтроки(ОтборПоОрганизации);
			Если КассыККМПоОрганизации.Количество() = 0 Тогда
				НоваяСтрокаТовары.Организация = Форма.ОсновнаяОрганизация;
			КонецЕсли;
			
		КонецЕсли;
		
		ТоварнаяГруппа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрокаТовары.Номенклатура, "ТоварнаяГруппа");
		НоваяСтрокаТовары.СистемаНалогообложения = ПодключаемоеОборудованиеРТ.ПолучитьСистемуНалогообложения(
			ТекущаяДата,
			НоваяСтрокаТовары.Организация,
			Объект.ТорговыйОбъект,
			СкладПродажи,
			ТоварнаяГруппа);
			
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Объект.ДокументРасчета)
		И ТипЗнч(Объект.ДокументРасчета) = Тип("ДокументСсылка.РегистрацияБезналичнойОплаты") Тогда
		
		Форма.ВыбранБанковскийПлатеж = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет данные на форме РМК о номенклатуре.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы РМК.
//
Процедура ДополнитьСведенияОТоварах(Форма) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Упаковка КАК Упаковка,
	|	ТаблицаТовары.Серия КАК Серия
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	СпрНоменклатура.Наименование КАК НаименованиеНоменклатуры,
	|	СпрНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СпрНоменклатура.ОсобенностьУчета КАК ОсобенностьУчета,
	|	СпрХарактеристикиНоменклатуры.Наименование КАК НаименованиеХарактеристики,
	|	Товары.Характеристика КАК Характеристика,
	|	СпрНоменклатура.Наименование + ВЫБОР
	|		КОГДА НЕ Товары.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ТОГДА "" ("" + ЕСТЬNULL(СпрХарактеристикиНоменклатуры.Наименование, """") + "")""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ПредставлениеНоменклатураХарактеристика,
	|	Товары.Упаковка КАК Упаковка,
	|	Товары.Серия КАК Серия
	|ПОМЕСТИТЬ ПредставлениеТовара
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО Товары.Номенклатура = СпрНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК СпрХарактеристикиНоменклатуры
	|		ПО Товары.Характеристика = СпрХарактеристикиНоменклатуры.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПредставлениеТовара.Номенклатура КАК Номенклатура,
	|	ПредставлениеТовара.Характеристика КАК Характеристика,
	|	ПредставлениеТовара.Серия КАК Серия,
	|	ПредставлениеТовара.Упаковка КАК Упаковка,
	|	ПредставлениеТовара.ОсобенностьУчета КАК ОсобенностьУчета,
	|	ПредставлениеТовара.ПредставлениеНоменклатураХарактеристика КАК ПредставлениеНоменклатураХарактеристика,
	|	ВЫБОР
	|		КОГДА ПредставлениеТовара.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(ЕдиницыИзмерения.Наименование, """")
	|		ИНАЧЕ ЕСТЬNULL(Упаковки.Наименование, """")
	|	КОНЕЦ КАК ПредставлениеЕдиницыИзмерения
	|ИЗ
	|	ПредставлениеТовара КАК ПредставлениеТовара
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БазовыеЕдиницыИзмерения КАК ЕдиницыИзмерения
	|		ПО ПредставлениеТовара.ЕдиницаИзмерения = ЕдиницыИзмерения.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиНоменклатуры КАК Упаковки
	|		ПО ПредставлениеТовара.Упаковка = Упаковки.Ссылка");
	
	Запрос.УстановитьПараметр("ТаблицаТовары", Объект.Товары.Выгрузить());
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из Объект.Товары Цикл
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("Номенклатура", Строка.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", Строка.Характеристика);
		СтруктураПоиска.Вставить("Серия", Строка.Серия);
		СтруктураПоиска.Вставить("Упаковка", Строка.Упаковка);
		
		МассивСтрок = ТаблицаРезультат.НайтиСтроки(СтруктураПоиска);
		
		Если МассивСтрок.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(Строка, МассивСтрок[0]);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет является ли вид оплаты безналичной формой оплаты.
//
//Параметры:
//  ВидОплаты - СправочникСсылка.ВидыОплат - вид оплаты.
//
// ВозвращаемоеЗначение:
//  Булево - Истина, если переданный вид оплаты является безналичной формой оплаты.
//
Функция ЭтоОплатаПлатежнойКартой(ВидОплаты) Экспорт
	
	Возврат ВидОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта;
	
КонецФункции

// Проверяет является ли статус чека пробит.
//
// Параметры:
//  ЧекККМ - ДокументСсылка.ЧекККМ - чек ККМ, в котором нужно проверит статус.
//
// ВозвращаемоеЗначение:
//  Булево - Истина, если статус чека пробит.
//
Функция СтатусЧекаПробит(ЧекККМ) Экспорт
	
	Возврат ЧекККМ.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Пробитый;
	
КонецФункции

// Возвращает систему налогообложения чека ККМ.
//
// Параметры:
//  ЧекККМ - ДокументСсылка.ЧекККМ - чек ККМ, для которого нужно определеить систему налогообложения.
//
// ВозвращаемоеЗначение:
//  ПеречислениеСсылка.ТипыСистемНалогообложенияККТ - система налогообложения.
//
Функция СистемаНалогообложенияЧека(ЧекККМ) Экспорт
	
	Возврат ЧекККМ.СистемаНалогообложения;
	
КонецФункции

// Процедура устанавливает статус чека.
//
// Параметры:
//  ЧекККМ - ДокументОбъект.ЧекККМ - чек ККМ для смены статуса.
//  Статус - Строка - статус, который необходимо установить. Если пустая строка, то очистить статус.
//
Процедура УстановитьСтатусЧека(ЧекККМ, Статус) Экспорт
	
	Если Статус = "" Тогда
		ЧекККМ.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

// Возвращает вид оплаты платежной картой при продаже
//
// Параметры:
//  ЧекПродажи - ДокументСсылка.ЧекККМ - чек ККМ продажи.
//
// ВозвращаемоеЗначение:
//  ВидОплаты - СправочникСсылка.ВидыОплат - вид оплаты платежной карты, который был учтен при продаже.
//
Функция ВидОплатыПриПродаже(ЧекПродажи) Экспорт
	
	ВидОплаты = Неопределено;
	Для Каждого СтрокаОплаты Из ЧекПродажи.Оплата Цикл
		Если СтрокаОплаты.ВидОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта Тогда
			ВидОплаты = СтрокаОплаты.ВидОплаты;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ВидОплаты) Тогда
		Для Каждого СтрокаОплаты Из ЧекПродажи.Оплата Цикл
			Если СтрокаОплаты.ВидОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ПлатежнаяСистема Тогда
				ВидОплаты = СтрокаОплаты.ВидОплаты;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ВидОплаты;
	
КонецФункции

// Процедура заполняет массив серий, исключая серии, которые уже присутствуют в РМК.
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - товар, для которого необходимо заполнить серии.
//  МассивСерий - Массив - массив, в который необходимо добавить найденные серии.
//  ИсключаяСерии - Массив - массив, в котором содержаться серии, которые уже присутствуют в РМК и их нужно исключить.
//
Процедура ЗаполнитьСписокВыбораСерийНоменклатуры(Номенклатура, МассивСерий, ИсключаяСерии) Экспорт
	
	МассивДобавленныхСерий = Новый Массив;
	Для Каждого СтрокаМассива Из ИсключаяСерии Цикл
		Если ЗначениеЗаполнено(СтрокаМассива) Тогда
			МассивДобавленныхСерий.Добавить(СтрокаМассива);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СерииНоменклатуры.Ссылка КАК Серия
	|ИЗ
	|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|ГДЕ
	|	СерииНоменклатуры.ВладелецСерии = &Номенклатура
	|	И НЕ СерииНоменклатуры.ПометкаУдаления
	|	И НЕ СерииНоменклатуры.Ссылка В (&МассивСерий)
	|	И ВЫБОР
	|			КОГДА СерииНоменклатуры.ГоденДо = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ СерииНоменклатуры.ГоденДо > &ТекущаяДата
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СерииНоменклатуры.Ссылка
	|ИЗ
	|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|ГДЕ
	|	СерииНоменклатуры.ВладелецСерии = &ВидНоменклатуры
	|	И НЕ СерииНоменклатуры.ПометкаУдаления
	|	И НЕ СерииНоменклатуры.Ссылка В (&МассивСерий)
	|	И ВЫБОР
	|			КОГДА СерииНоменклатуры.ГоденДо = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ СерииНоменклатуры.ГоденДо > &ТекущаяДата
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СерийныеНомера.Ссылка
	|ИЗ
	|	Справочник.СерийныеНомера КАК СерийныеНомера
	|ГДЕ
	|	СерийныеНомера.Владелец = &Номенклатура
	|	И НЕ СерийныеНомера.ПометкаУдаления");
	
	ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ВидНоменклатуры");
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	Запрос.УстановитьПараметр("МассивСерий", МассивДобавленныхСерий);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивСерий.Добавить(Выборка.Серия);
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет шаблон чека в параметры перед пробитием чека на ККТ.
//
// Параметры:
//  ЧекККМ - ДокументСсылка.ЧекККМ - ссылка на чек, который будет пробит.
//  ОбщиеПараметры - Структура - см. МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека().
//  ТекущаяНастройкаРМК - СправочникСсылка.НастройкиРабочегоМестаКассира - текущая настройка рабочего места кассира.
//
Процедура ЗаполнитьШаблонЧека(ЧекККМ, ОбщиеПараметры, ТекущаяНастройкаРМК) Экспорт
	
	
	
КонецПроцедуры

// Определяет возможность внесения денег.
//
// Параметры:
//  КассаККМ - СправочникСсылка.КассыККМ.
//  Организация - СправочникСсылка.Организации.
//
// Возвращаемое значение:
//  Булево - Ложь, если документы для внесения отсутствуют.
//
Функция ВозможностьВнесенияДенег(КассаККМ, Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДенежныеСредстваКПоступлениюНаличныеОстатки.ДокументПередачи КАК Документ,
	|	ДенежныеСредстваКПоступлениюНаличныеОстатки.СуммаОстаток КАК СуммаОстаток,
	|	ДенежныеСредстваКПоступлениюНаличныеОстатки.Организация КАК Организация,
	|	ДенежныеСредстваКПоступлениюНаличныеОстатки.Касса КАК Касса
	|ПОМЕСТИТЬ ТаблицаДокументовСОстатками
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКПоступлениюНаличные.Остатки(
	|			,
	|			Касса = &КассаККМ
	|				И Организация = &Организация) КАК ДенежныеСредстваКПоступлениюНаличныеОстатки
	|ГДЕ
	|	ДенежныеСредстваКПоступлениюНаличныеОстатки.СуммаОстаток > 0
	|	И ДенежныеСредстваКПоступлениюНаличныеОстатки.ДокументПередачи ССЫЛКА Документ.РасходныйКассовыйОрдер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Ссылка КАК РасходныйКассовыйОрдер,
	|	РасходныйКассовыйОрдер.Номер КАК Номер,
	|	РасходныйКассовыйОрдер.Дата КАК Дата,
	|	ТаблицаДокументовСОстатками.СуммаОстаток КАК СуммаОстаток,
	|	ТаблицаДокументовСОстатками.Организация КАК Организация,
	|	ТаблицаДокументовСОстатками.Касса КАК Касса
	|ИЗ
	|	ТаблицаДокументовСОстатками КАК ТаблицаДокументовСОстатками
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|		ПО ТаблицаДокументовСОстатками.Документ = РасходныйКассовыйОрдер.Ссылка";
	
	Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

// Процедура изменяет запрос, если при пробитии чеков необходимо сворачивать строки.
//
// Параметры:
//  ТекстЗапроса - Строка - Текст запрос.
//
Процедура ПереопределитьЗапросДляСворачиванияСтрок(ТекстЗапроса) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Возвращает пустую ссылку на документ чекККМ.
//
// Параметры:
//  ОтложенныйЧек - ДокументСсылка.ЧекККМ - ссылка на отложенный чек.
//
Процедура УстановитьПустойСтатусВОтложенныйЧек(ОтложенныйЧек) Экспорт
	
	Если ОтложенныйЧек.СтатусЧекаККМ.Пустая() Тогда
		ОтложенныйЧек = ПустаяСсылкаНаЧекККМ();
	КонецЕсли;
	
КонецПроцедуры

// Заполнение данных из выбранного документа заказ покупателя.
//
// Параметры:
//  Заказ - Структура, ДокументСсылка - выбранный документ заказ покупателя;
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира;
//  Отказ - Булево - флаг ошибки при выполнении;
//  ОписаниеОшибки - Строка - описание ошибки выполнения.
//
Процедура ЗаполнитьПоЗаказу(Заказ, Форма, Отказ = Ложь, ОписаниеОшибки = "") Экспорт
	
	ЗаказПокупателя = Заказ;
	Если Не ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Заказ, "ЗаказПокупателя")
			И ЗначениеЗаполнено(Заказ.ЗаказПокупателя) Тогда
			ЗаказПокупателя = Заказ.ЗаказПокупателя;
		Иначе
			Отказ = Истина;
			ОписаниеОшибки = НСтр("ru='Не выбран заказ покупателя'");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ИННЗаполненУКонтрагента(ЗаказПокупателя.Контрагент) Тогда
		Отказ = Истина;
		ОписаниеОшибки = НСтр("ru='У контрагента с правовым статусом ""Юридическое лицо"" не заполнен ИНН.'");
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	Объект.ЗаказПокупателя = ЗаказПокупателя;
	
	ЗаполнитьЗначенияСвойств(Объект, ЗаказПокупателя,, "КассаККМ, Товары, ДисконтнаяКарта");
	Форма.ВыбраннаяСистемаНалогообложения = Форма.СистемаНалогообложенияОрганизацииПоУмолчанию;
	Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа;
	
	Объект.Товары.Очистить();
	
	СкладПродажи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТорговыйОбъект, "СкладПродажи");
	ТекущаяДата = ОбщегоНазначения.ТекущаяДатаПользователя();
	ТаблицаТоваровЗаказа = ДанныеПоТоварамЗаказаПокупателя(ЗаказПокупателя);
	
	Для Каждого СтрокаЗаказа Из ТаблицаТоваровЗаказа Цикл
		
		Если (СтрокаЗаказа.НеобходимостьВводаКодаМаркировки И Не СтрокаЗаказа.ПоштучноеВыбытие)
			Или СтрокаЗаказа.НеобходимостьВводаСерии Тогда
			
			Для НомерСтроки = 1 По СтрокаЗаказа.Количество Цикл
				
				НоваяСтрокаТовары = Объект.Товары.Добавить();
				НоваяСтрокаТовары.Количество = 1;
				НоваяСтрокаТовары.КоличествоУпаковок = 1;
				
				ИсключаяСвойства = "Количество, КоличествоУпаковок";
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтрокаЗаказа, , ИсключаяСвойства);
				
				НоваяСтрокаТовары.СуммаАвтоматическойСкидки = Окр(НоваяСтрокаТовары.КоличествоУпаковок *
					НоваяСтрокаТовары.Цена * НоваяСтрокаТовары.ПроцентАвтоматическойСкидки / 100, 2);
				НоваяСтрокаТовары.СуммаСкидкиНаценки = Окр(НоваяСтрокаТовары.КоличествоУпаковок *
					НоваяСтрокаТовары.Цена * НоваяСтрокаТовары.ПроцентСкидкиНаценки / 100, 2);
				НоваяСтрокаТовары.Сумма = НоваяСтрокаТовары.КоличествоУпаковок * НоваяСтрокаТовары.Цена -
					НоваяСтрокаТовары.СуммаАвтоматическойСкидки - НоваяСтрокаТовары.СуммаСкидкиНаценки;
				НоваяСтрокаТовары.СуммаБезСкидки = НоваяСтрокаТовары.КоличествоУпаковок * НоваяСтрокаТовары.Цена;
				
				СтруктураДействий = Новый Структура;
				СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
				СтруктураДействий.Вставить("ПересчитатьСуммуНДС",
					ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));
				
				КэшированныеЗначения = Новый Структура;
				ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(НоваяСтрокаТовары, СтруктураДействий, КэшированныеЗначения);
				
				НоваяСтрокаТовары.Организация = Объект.Организация;
				ТоварнаяГруппа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрокаТовары.Номенклатура, "ТоварнаяГруппа");
				НоваяСтрокаТовары.СистемаНалогообложения = ПодключаемоеОборудованиеРТ.ПолучитьСистемуНалогообложения(
					ТекущаяДата,
					Объект.Организация,
					Объект.ТорговыйОбъект,
					СкладПродажи,
					ТоварнаяГруппа);
					
			КонецЦикла;
			
		Иначе
			
			НоваяСтрокаТовары = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтрокаЗаказа);
			НоваяСтрокаТовары.Организация = Объект.Организация;
			ТоварнаяГруппа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрокаТовары.Номенклатура, "ТоварнаяГруппа");
			НоваяСтрокаТовары.СистемаНалогообложения = ПодключаемоеОборудованиеРТ.ПолучитьСистемуНалогообложения(
				ТекущаяДата,
				Объект.Организация,
				Объект.ТорговыйОбъект,
				СкладПродажи,
				ТоварнаяГруппа);
				
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполнение данных из выбранного документа безналичной оплаты.
//
// Параметры:
//  ДанныеВыбора - Структура - данные выбранного документа безналичной оплаты.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура ЗаполнитьПоДокументуБезналичнойОплаты(ДанныеВыбора, Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Если Не ДанныеВыбора.Свойство("ДокументРасчета") Тогда
		Возврат;
	КонецЕсли;
	Если Не ДанныеВыбора.Свойство("ЗаказПокупателя") Тогда
		Возврат;
	КонецЕсли;
	Если Не ДанныеВыбора.Свойство("Сумма") И Не ДанныеВыбора.Сумма = 0 Тогда
		Возврат;
	КонецЕсли;
	Если Не ДанныеВыбора.Свойство("Контрагент") Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ОписаниеОшибки = "";
	
	ЗаполнитьПоЗаказу(ДанныеВыбора.ЗаказПокупателя, Форма, Отказ, ОписаниеОшибки);
	
	Если НЕ Отказ Тогда
		Объект.Контрагент = ДанныеВыбора.Контрагент;
		Объект.ДокументРасчета = ДанныеВыбора.ДокументРасчета;
		
		Объект.Оплата.Очистить();
		
		НоваяСтрокаОплаты = Объект.Оплата.Добавить();
		НоваяСтрокаОплаты.ВидОплаты = Справочники.ВидыОплатЧекаККМ.БанковскийПлатеж;
		НоваяСтрокаОплаты.Сумма = ДанныеВыбора.Сумма;
		
		НастроитьЭлементыФормыПриБезналичнойОплате(Форма, ДанныеВыбора.Сумма);
	КонецЕсли;
	
КонецПроцедуры


// Возвращает имя константы использовать бонусные программы.
//
// ВозвращаемоеЗначение:
//  Строка - наименование константы, в которой хранится признак использования бонусных программ.
//
Функция ИмяКонстантыИспользоватьСервисЛояльности() Экспорт
	
	Возврат Метаданные.Константы.ИспользоватьСервисЛояльности.Имя;
	
КонецФункции

// Возвращает пустую ссылку на справочник.
//
// ВозвращаемоеЗначение:
//  СправочникСсылка - пустая ссылка на справочник .
//
Функция ПустаяСсылкаНаСправочник(ИмяСправочника) Экспорт
	
	ИмяСущности = СтрШаблон("Справочник.%1.ПустаяСсылка",ИмяСправочника);
	Возврат ОбщегоНазначения.ПредопределенныйЭлемент(ИмяСущности);
	
КонецФункции

// Устанавливает признак формы по одноименному значению функциональной опции.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы.
//  ИспользоватьБонусныеПрограммы - булево - признак использования бонусных программ.
//
Процедура УстановитьПризнакФормеПоДаннымФункциональнойОпции(Форма, ИмяФункциональнойОпции) Экспорт
	
	Если НЕ (Метаданные.ФункциональныеОпции.Найти(ИмяФункциональнойОпции) = Неопределено)
			И РеквизитФормыСуществует(Форма,ИмяФункциональнойОпции) Тогда
				Форма[ИмяФункциональнойОпции] = ПолучитьФункциональнуюОпцию(ИмяФункциональнойОпции);
	КонецЕсли;
	
КонецПроцедуры

// Процедура производит дополнительные действия для настройки работы с оплатой по карте.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы.
//
Процедура НастроитьОплатуПлатежнымиКартами(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	ТипРеквизита = Новый Массив;
	ТипРеквизита.Добавить(Тип("Строка"));
	ОписаниеТиповДляРеквизита = Новый ОписаниеТипов(ТипРеквизита);
	НовыйРеквизит = Новый РеквизитФормы("ВыбранныйВидОплаты", ОписаниеТиповДляРеквизита);
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	ТипРеквизита = Новый Массив;
	ТипРеквизита.Добавить(Тип("ТаблицаЗначений"));
	ОписаниеТиповДляРеквизита = Новый ОписаниеТипов(ТипРеквизита);
	НовыйРеквизит = Новый РеквизитФормы("ТаблицаПлатежныхКарт", ОписаниеТиповДляРеквизита);
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("ВидОплаты", Новый ОписаниеТипов("СправочникСсылка.ВидыОплатЧекаККМ"), "ТаблицаПлатежныхКарт");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("ИмяКоманды", Новый ОписаниеТипов("Строка"), "ТаблицаПлатежныхКарт");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыОплатЧекаККМ.Наименование КАК Наименование,
	|	ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание.ВидОплаты КАК ВидОплаты
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы.ТарифыЗаРасчетноеОбслуживание КАК ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыОплатЧекаККМ КАК ВидыОплатЧекаККМ
	|		ПО ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание.ВидОплаты = ВидыОплатЧекаККМ.Ссылка
	|ГДЕ
	|	НЕ ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание.Ссылка.ПометкаУдаления
	|	И ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание.Ссылка.Касса В (&КассыККМ)
	|	И ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание.Ссылка.Магазин = &Магазин";
	
	МассивКассККМ = Форма.ТаблицаКассККМОрганизаций.Выгрузить().ВыгрузитьКолонку("КассаККМ");

	Запрос.УстановитьПараметр("КассыККМ", МассивКассККМ);
	Запрос.УстановитьПараметр("Магазин", Объект.ТорговыйОбъект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	НужноСоздаватьПодменюКарта = Выборка.Количество() > 1;
	Итератор = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НазваниеКоманды = СтрШаблон("ОплатаКартой_%1", Итератор);
		
		НоваяСтрокаТаблицыПлатКарт = Форма.ТаблицаПлатежныхКарт.Добавить();
		НоваяСтрокаТаблицыПлатКарт.ИмяКоманды = НазваниеКоманды;
		НоваяСтрокаТаблицыПлатКарт.ВидОплаты = Выборка.ВидОплаты;
		
		Итератор = Итератор + 1;
		
	КонецЦикла;
	
	Если НужноСоздаватьПодменюКарта Тогда
		
		Форма.Элементы.ГруппаQRCode.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

//Возвращает структуру дисконтной карты
//
//Параметры:
//  МагнитныйКод - Строка - код, по которому выполняется поиск.
//
//Возвращаемое значение:
//  Структура - Параметры дисконтной карты, или Неопределено если карта не найдена
//
Функция ПолучитьДисконтнуюКарту(МагнитныйКод) Экспорт
	
	НеизвестныеДанныеПО = Истина;
	НайденоОбъектов = 0;
	СтруктураПараметров = ПодключаемоеОборудованиеРТ.СтруктураДанныхПоиска();
	
	Если ШтрихкодированиеРТКлиентСервер.ТелефонКорректен(МагнитныйКод) Тогда
		
		НомерТелефона = ШтрихкодированиеРТКлиентСервер.ПодготовитьТелефон(МагнитныйКод);
		ПолныйНомер = НСтр("ru = '7'") + НомерТелефона;
		
		ШтрихкодированиеРТ.НайтиДисконтнуюКарту(Неопределено, СтруктураПараметров, ПолныйНомер, "НомерТелефона", НеизвестныеДанныеПО, НайденоОбъектов);
		
	ИначеЕсли ШтрихкодированиеРТКлиентСервер.ЕмаилКорректен(МагнитныйКод) Тогда
		
		ШтрихкодированиеРТ.НайтиДисконтнуюКарту(Неопределено, СтруктураПараметров, МагнитныйКод, "Email", НеизвестныеДанныеПО, НайденоОбъектов);
		
	Иначе
		
		ШтрихкодированиеРТ.НайтиДисконтнуюКарту(Неопределено, СтруктураПараметров, МагнитныйКод, "КодКарты", НеизвестныеДанныеПО, НайденоОбъектов);
		
	КонецЕсли;
	
	СтруктураДисконтнойКарты = Неопределено;
	Если СтруктураПараметров.ЗначенияПоиска.Количество() = 0 Тогда
		Возврат СтруктураДисконтнойКарты;
	КонецЕсли;
	
	СтруктураДисконтнойКарты = Новый Структура();
	СтруктураДисконтнойКарты.Вставить("КартаЛояльности");
	СтруктураДисконтнойКарты.Вставить("Контрагент");
	СтруктураДисконтнойКарты.Вставить("КодКарты");
	СтруктураДисконтнойКарты.Вставить("АдресЭПВладельцаКарты");
	СтруктураДисконтнойКарты.Вставить("НомерТелефонаВладельцаКарты");
	СтруктураДисконтнойКарты.Вставить("ДатаРождения");
	СтруктураДисконтнойКарты.Вставить("ФИО");
	
	ДанныеКарты = СтруктураПараметров.ЗначенияПоиска[0];
	
	СтруктураДисконтнойКарты.КартаЛояльности = ДанныеКарты.Карта;
	СтруктураДисконтнойКарты.Контрагент = ДанныеКарты.ВладелецКарты;
	СтруктураДисконтнойКарты.КодКарты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеКарты.Карта, "КодКарты");
	СтруктураДисконтнойКарты.АдресЭПВладельцаКарты = ДанныеКарты.АдресЭП;
	СтруктураДисконтнойКарты.НомерТелефонаВладельцаКарты = ДанныеКарты.НомерТелефона;
	
	Если ЗначениеЗаполнено(ДанныеКарты.ВладелецКарты)
		И ТипЗнч(ДанныеКарты.ВладелецКарты) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФизическиеЛица.Наименование КАК ФИО,
		|	ФизическиеЛица.ДатаРождения КАК ДатаРождения
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ПО Контрагенты.ФизЛицо = ФизическиеЛица.Ссылка
		|ГДЕ
		|	Контрагенты.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеКарты.ВладелецКарты);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(СтруктураДисконтнойКарты, Выборка);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураДисконтнойКарты;
	
КонецФункции

// Процедура производит обработку выбранного документа расчета.
//
// Параметры:
//  ПараметрыВыбора - Структура - данные выбранного документа расчета.
//  Форма - ФормаКлиентскогоПриложения - данные формы.
//
Процедура ОбработатьВыборДокументаРасчета(ПараметрыВыбора, Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Форма.ЭтоЗачетАванса = ПараметрыВыбора.ЭтоЗачетАванса;
	Форма.ЭтоОплатаРассрочки = ПараметрыВыбора.ЭтоОплатаРассрочки;
	
	Объект.ДокументРасчета = ПараметрыВыбора.ДокументРасчета;
	Объект.Контрагент = ПараметрыВыбора.Контрагент;
	Если Не Объект.ЗаказПокупателя = ПараметрыВыбора.ЗаказПокупателя Тогда
		Объект.ЗаказПокупателя = ПараметрыВыбора.ЗаказПокупателя;
		Если ЗначениеЗаполнено(Объект.ЗаказПокупателя) Тогда
			Объект.ЗаказПокупателя = ПараметрыВыбора.ЗаказПокупателя;
			ЗаполнитьПоЗаказу(ПараметрыВыбора.ЗаказПокупателя, Форма);
			ЕстьТоварыВДокументеРасчета = Объект.Товары.Количество() > 0;
			Если ПараметрыВыбора.ЭтоОплатаРассрочки И Не ЕстьТоварыВДокументеРасчета Тогда
				ЗаполнитьНаОснованииЧекаККМ(Форма, Объект.ДокументРасчета);
				Объект.ОперацияСДенежнымиСредствами = Истина;
			КонецЕсли;
			Форма.ТаблицаДокументовРасчета.Очистить();
			Для Каждого ДокументРасчета Из ПараметрыВыбора.МассивДокументовРасчета Цикл
				НоваяСтрока = Форма.ТаблицаДокументовРасчета.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДокументРасчета);
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Объект.ДокументРасчета) = Тип("ДокументСсылка.ЧекККМ") Тогда
		ЗаполнитьНаОснованииЧекаККМ(Форма, Объект.ДокументРасчета);
		Объект.ОперацияСДенежнымиСредствами = НЕ Объект.ОперацияСДенежнымиСредствами;
		ЕстьТоварыВДокументеРасчета = Объект.Товары.Количество() > 0;
	КонецЕсли;
	
	Если ПараметрыВыбора.МассивДокументовРасчета.Количество() > 1 Тогда
		Форма.СуммаОстаткаДокументаРасчета = 0;
		Для Каждого ДокументРасчета Из ПараметрыВыбора.МассивДокументовРасчета Цикл
			Форма.СуммаОстаткаДокументаРасчета = Форма.СуммаОстаткаДокументаРасчета + ДокументРасчета.Сумма;
		КонецЦикла;
	Иначе
		Форма.СуммаОстаткаДокументаРасчета = ПараметрыВыбора.Сумма;
	КонецЕсли;
	
	Если Форма.ЭтоЗачетАванса И Объект.Товары.Количество() = 0 Тогда
		
		Форма.ВыбраннаяСистемаНалогообложения = ОбщегоНазначенияРМКПереопределяемый.СистемаНалогообложенияЧека(Объект.ДокументРасчета);
		Форма.ВыбраннаяОрганизация = Объект.ДокументРасчета.Организация;
		
		Отбор = Новый Структура("Организация", Форма.ВыбраннаяОрганизация);
		СтрокаКассы = Форма.ТаблицаКассККМОрганизаций.НайтиСтроки(Отбор)[0];
		
		Форма.ПодключаемоеОборудование = СтрокаКассы.ИдентификаторУстройства;
		Объект.Организация = СтрокаКассы.Организация;
		Объект.КассаККМ = СтрокаКассы.КассаККМ;
		Форма.КассоваяСмена = СтрокаКассы.КассоваяСмена;
		Форма.ККМПоддерживаетПроверкуКодовМаркировки = СтрокаКассы.ПоддерживаетПроверкуКодовМаркировки;
		
	КонецЕсли;
	
КонецПроцедуры

// Получает цену на товар.
//
//Параметры:
//  Магазин - СправочникСсылка.Магазины - Магазин, для которого нужно получить цену.
//  ДанныеТовара - Структура - структура с параметрами товара, для которых нужно получить цену.
//
// ВозвращаемоеЗначение:
//  Цена - Число - актцальное значения цены.
//
Функция ЦенаПродажи(Магазин, ДанныеТовара) Экспорт
	
	Номенклатура = ДанныеТовара.Номенклатура;
	
	Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	Если ДанныеТовара.Свойство("Характеристика") Тогда
		Характеристика = ДанныеТовара.Характеристика;
	КонецЕсли;
	
	Упаковка = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
	Если ДанныеТовара.Свойство("Упаковка") Тогда
		Упаковка = ДанныеТовара.Упаковка;
	КонецЕсли;
	
	Дата = ТекущаяДатаСеанса();
	
	Цена = ЗапасыСервер.ЦенаПродажи(Магазин, Дата, Номенклатура, Характеристика, Упаковка, Истина);
	
	Возврат Цена;
	
КонецФункции

// Процедура формирует структуру данных, которая затем будет выгружена в XML.
//
// Параметры:
//  СтруктураНастроек - Структура - структура, в которую нужно добавить настройки.
//  НастройкаРМК - СправочникСсылка.НастройкиРабочегоМестаКассира - текущая настройка РМК.
//
Процедура СформироватьСтруктуруНастроек(СтруктураНастроек, Знач НастройкаРМК) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИспользоватьСервисЛояльности.Значение КАК ИспользоватьСервисЛояльности,
	|	НастройкиРабочегоМестаКассира.МаксимальныйПроцентРучнойСкидки КАК НастройкаРМК_МаксимальныйПроцентРучнойСкидки,
	|	НастройкиРабочегоМестаКассира.ПечататьБумажныйЧек КАК НастройкаРМК_ПечататьБумажныйЧек,
	|	НастройкиРабочегоМестаКассира.ВидОтображения КАК НастройкаРМК_ВидОтображения,
	|	НастройкиРабочегоМестаКассира.ТочностьОкругления КАК НастройкаРМК_ТочностьОкругления,
	|	НастройкиРабочегоМестаКассира.ОкруглятьПриПроизвольномВидеОплаты КАК НастройкаРМК_ОкруглятьПриПроизвольномВидеОплаты,
	|	НастройкиРабочегоМестаКассира.ОкруглятьЧекВПользуПокупателяПострочно КАК НастройкаРМК_ОкруглятьЧекВПользуПокупателяПострочно,
	|	НастройкиРабочегоМестаКассира.АдресСервисаЛояльности КАК НастройкаРМК_АдресСервисаЛояльности,
	|	НастройкиРабочегоМестаКассира.ПользовательСервисаЛояльности КАК НастройкаРМК_ПользовательСервисаЛояльности,
	|	НастройкиРабочегоМестаКассира.СворачиватьСтрокиПриПечатиЧека КАК НастройкаРМК_СворачиватьСтрокиПриПечатиЧека,
	|	НастройкиРабочегоМестаКассира.Наименование КАК НастройкаРМК_Наименование,
	|	НастройкиРабочегоМестаКассира.ЗапрашиватьПодтверждениеВозраста18Плюс КАК НастройкаРМК_ЗапрашиватьПодтверждениеВозраста18Плюс,
	|	НастройкиРабочегоМестаКассира.ЗапрещеноРедактированиеУсловийОграниченийПродаж КАК НастройкаРМК_ЗапрещеноРедактированиеУсловийОграниченийПродаж,
	|	НастройкиРабочегоМестаКассира.ИспользоватьНовыйПодборТоваров КАК НастройкаРМК_ИспользоватьНовыйПодборТоваров,
	|	НастройкиРабочегоМестаКассира.ЗакрыватьПодборПриВыбореТовара КАК НастройкаРМК_ЗакрыватьПодборПриВыбореТовара,
	|	НастройкиРабочегоМестаКассира.ПоказыватьАртикулНоменклатуры КАК НастройкаРМК_ПоказыватьАртикулНоменклатуры,
	|	НастройкиРабочегоМестаКассира.ПоказыватьКодНоменклатуры КАК НастройкаРМК_ПоказыватьКодНоменклатуры
	|ИЗ
	|	Константа.ИспользоватьСервисЛояльности КАК ИспользоватьСервисЛояльности,
	|	Справочник.НастройкиРабочегоМестаКассира КАК НастройкиРабочегоМестаКассира
	|ГДЕ
	|	НастройкиРабочегоМестаКассира.Ссылка = &НастройкаРМК");
	
	Запрос.УстановитьПараметр("НастройкаРМК", НастройкаРМК.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	СтруктураНастроек = Новый Структура;
	Для Каждого КолонкаЗапроса Из РезультатЗапроса.Колонки Цикл
		СтруктураНастроек.Вставить(КолонкаЗапроса.Имя, Выборка[КолонкаЗапроса.Имя]);
	КонецЦикла;
	
	ТаблицаГорячиеКлавиши = НастройкаРМК.ГорячиеКлавиши.Выгрузить();
	ТаблицаГорячиеКлавиши.Колонки.Удалить("НомерСтроки");
	ТаблицаГорячиеКлавиши.Колонки.Удалить("ИсходныйНомерСтроки");
	СтруктураНастроек.Вставить("НастройкаРМК_ГорячиеКлавиши", ТаблицаГорячиеКлавиши);
	
	ТаблицаБыстрыеТовары = НастройкаРМК.БыстрыеТовары.Выгрузить(, "Номенклатура, Характеристика");
	СтруктураНастроек.Вставить("НастройкаРМК_БыстрыеТовары", ТаблицаБыстрыеТовары);
	
КонецПроцедуры

// Процедура производит переопределение запроса для формирования списка продавцов.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма выбора продавцов.
//
Процедура ПереопределитьЗапросДоступныхПродавцов(Форма) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка КАК Продавец
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СубъектыДляСкрытияПерсональныхДанных КАК СубъектыДляСкрытияПерсональныхДанных
	|		ПО ФизическиеЛица.Ссылка = СубъектыДляСкрытияПерсональныхДанных.Субъект
	|			И (СубъектыДляСкрытияПерсональныхДанных.Состояние = &СостояниеСкрытиеВыполнено)
	|ГДЕ
	|	НЕ ФизическиеЛица.ПометкаУдаления
	|	И НЕ ФизическиеЛица.ЭтоГруппа
	|	И ФизическиеЛица.Сотрудник
	|	И СубъектыДляСкрытияПерсональныхДанных.Субъект ЕСТЬ NULL";
	
	Форма.СписокПродавцов.ТекстЗапроса = ТекстЗапроса;
	Форма.СписокПродавцов.Параметры.УстановитьЗначениеПараметра("СостояниеСкрытиеВыполнено",
		Перечисления.СостоянияСубъектовДляСкрытия.СкрытиеВыполнено);
	
КонецПроцедуры

// Определяет актуальную ставку НДС для товара по данным СНО
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - данные текущего объекта.
//  ТекущаяСтрока - СтрокаТабличнойЧасти - текущая строка.
//  СистемаНалогообложенияПоУмолчанию - ПеречислениеСсылка.ТипыСистемНалогообложенияККТ,Неопределено.
//
// Возвращаемое значение:
//  АктуальнаяСтавкаНДС - ПеречислениеСсылка.СтавкиНДС
//
Функция АктуальнаяСтавкаНДСДляТовара(Объект, ТекущаяСтрока, СистемаНалогообложенияПоУмолчанию) Экспорт
	
	СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	
	ПрименяетсяНДС = ТекущаяСтрока.СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.ОСН;
	
	Если ПрименяетсяНДС Тогда
		Дата = ТекущаяДатаСеанса();
		РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ТекущаяСтрока.Номенклатура,
			"ТоварнаяГруппа, СтавкаНДС");
		СтавкаНДС = УчетНДС.СкорректироватьСтавкуНДС(РеквизитыНоменклатуры.СтавкаНДС, Дата);
	КонецЕсли;
	
	Возврат СтавкаНДС;
	
КонецФункции

// Процедура записывает в базу штрихкод.
//
// Параметры:
//  ДанныеСтроки - Структура - данные для записи в регистр штрихкодов.
//
Процедура ЗаписатьШтрихкод(ДанныеСтроки) Экспорт
	
	Штрихкод = ДанныеСтроки.Штрихкод;
	Если НЕ ЗначениеЗаполнено(Штрихкод) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		Штрихкод = ДанныеСтроки.Штрихкод;
		ТипШтрихкодаРТ = ПодключаемоеОборудованиеРТ.ТипШтрихкода(Штрихкод);
		
		НовыйШтрихкод = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
		НовыйШтрихкод.Владелец = ДанныеСтроки.Номенклатура;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
			НовыйШтрихкод.Характеристика = ДанныеСтроки.Характеристика;
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
			НовыйШтрихкод.Упаковка = ДанныеСтроки.Упаковка;
		КонецЕсли;
		
		НовыйШтрихкод.ТипШтрихкода = ТипШтрихкодаРТ;
		НовыйШтрихкод.Штрихкод = Штрихкод;
		НовыйШтрихкод.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка записи в регистр ""Штрихкоды"".'"),
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение;
	
	КонецПопытки;

	
КонецПроцедуры

// Возвращает структуру дисконтной карты
//
// Параметры:
//  СтруктураРезультат - Структура - параметры создания карты лояльности.
//  Форма - ФормаКлиентскогоПриложения - данные формы.
//
Процедура СоздатьЛокальноКартуЛояльности(СтруктураРезультат, Форма) Экспорт
	
	ПараметрыКарты = Новый Структура;
	ПараметрыКарты.Вставить("ИдентификаторКартыКлиента", Форма.НоваяКартаНомер);
	ПараметрыКарты.Вставить("НомерТелефона", Форма.НоваяКартаТелефон);
	ПараметрыКарты.Вставить("АдресЭП", Форма.НоваяКартаПочта);
	ПараметрыКарты.Вставить("Клиент", Форма.НоваяКартаФИО);
	
	Попытка
		КартаКлиента 	= СервисЛояльностиПереопределяемый.НайтиКартуКлиента(ПараметрыКарты);
		СтруктураОтвета = СервисЛояльности.ПолучистьСтруктуруОтвета("КартаКлиента");
		КартаСуществует = ЗначениеЗаполнено(КартаКлиента);
		
		Если Не КартаСуществует Тогда
			КартаКлиента  = СервисЛояльности.СоздатьКартуКлиента(ПараметрыКарты);  
			СтруктураРезультат.Вставить("ТекстСообщения", НСтр("ru = 'Карта успешно создана'"));
			СтруктураРезультат.Вставить("КартинкаСообщения", БиблиотекаКартинок.Успешно32);
		Иначе
			СтруктураРезультат.Вставить("ТекстСообщения", НСтр("ru = 'Карта уже существует'"));
			СтруктураРезультат.Вставить("КартинкаСообщения", БиблиотекаКартинок.Предупреждение32);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КартаКлиента) Тогда
			
			Форма.Элементы.СтраницаСозданиеКарты.Доступность = Ложь;
			Форма.Объект.ДисконтнаяКарта = КартаКлиента;
			
			Форма.Элементы.ГруппаПоискКартыКартаНайдена.Видимость = Истина;
			Форма.Элементы.ГруппаПоискКартыДанныеКарты.Доступность = Ложь;
			Форма.Элементы.ГруппаПоискКартыПоиск.Видимость = Ложь;
			
			Форма.НоваяКартаНомер = КартаКлиента.Наименование;
			Форма.НайденнаяКартаНомер = Форма.НоваяКартаНомер;
			Форма.НоваяКартаФИО = Строка(КартаКлиента.ВладелецКарты);
			Форма.НайденнаяКартаФИО = Форма.НоваяКартаФИО;
			
			Для Каждого СтрокаКИ Из КартаКлиента.КонтактнаяИнформация Цикл
				Если СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонИнформационнойКарты Тогда
					Форма.НоваяКартаТелефон = СтрокаКИ.Представление;
					Форма.НайденнаяКартаТелефон = Форма.НоваяКартаТелефон;
				КонецЕсли;
				Если СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailИнформационнойКарты Тогда
					Форма.НоваяКартаПочта = СтрокаКИ.Представление;
					Форма.НайденнаяКартаПочта = Форма.НоваяКартаПочта;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	Исключение
		СтруктураРезультат.ЕстьОшибки 	= Истина;
		СтруктураРезультат.ТекстОшибки	= СтрШаблон(НСтр("ru = 'Не удалось создать карту по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

// Обновляет исходные данные запрета продаж с выведением статуса обновления
//
// Параметры:
//  ИсходныеДанные - Структура - содержит десериализованные данные ответа из сервиса лояльности
//
// Возвращаемое значение:
//  Результат - Булево - отображает факт успешного обновления данных запрета
//
Функция АктуализироватьДанныеЗапрета(ИсходныеДанные) Экспорт

	ДанныеУспешноОбновлены = Ложь;
	
	Если ЗначениеЗаполнено(ИсходныеДанные) Тогда
		
		БазовыеУсловияЗапрета = Новый ТаблицаЗначений;
		БазовыеУсловияЗапрета.Колонки.Добавить("ДатаНачалаДействия");
		БазовыеУсловияЗапрета.Колонки.Добавить("ДатаОкончанияДействия");
		БазовыеУсловияЗапрета.Колонки.Добавить("ИдентификаторЗапрета");
		БазовыеУсловияЗапрета.Колонки.Добавить("ИмяЗапрещающегоДокументаМастерСистемы");
		БазовыеУсловияЗапрета.Колонки.Добавить("Организация");
		
		ЗаполнитьЗначенияСвойств(БазовыеУсловияЗапрета.Добавить(), ИсходныеДанные);
		
		ИсходныеДниНеделиЗапрета = Новый ТаблицаЗначений;
		ИсходныеДниНеделиЗапрета.Колонки.Добавить("ДеньНедели");
		ИсходныеДниНеделиЗапрета.Колонки.Добавить("ВремяНачала");
		ИсходныеДниНеделиЗапрета.Колонки.Добавить("ВремяОкончания");
		
		Для каждого День Из ИсходныеДанные.ДниНедели Цикл
			ЗаполнитьЗначенияСвойств(ИсходныеДниНеделиЗапрета.Добавить(), День);
		КонецЦикла;
		
		ДополнительныеУсловияЗапрета = Новый ТаблицаЗначений;
		ДополнительныеУсловияЗапрета.Колонки.Добавить("ВидНоменклатуры");
		ДополнительныеУсловияЗапрета.Колонки.Добавить("ОсобенностьУчета");
		
		ИтоговаяТаблица = БазовыеУсловияЗапрета.СкопироватьКолонки();
		ИтоговаяТаблица.Колонки.Добавить("ДеньНедели");
		ИтоговаяТаблица.Колонки.Добавить("ВремяНачала");
		ИтоговаяТаблица.Колонки.Добавить("ВремяОкончания");
		ИтоговаяТаблица.Колонки.Добавить("ВидНоменклатуры");
		ИтоговаяТаблица.Колонки.Добавить("ОсобенностьУчета");
		
		Для каждого ДополнительноеУсловие Из ИсходныеДанные.ДополнительныеУсловия Цикл
			ЗаполнитьЗначенияСвойств(ДополнительныеУсловияЗапрета.Добавить(), ДополнительноеУсловие);
		КонецЦикла;
		
	#Область Сворачивание_строк_запретов
		
		// запреты, действующие все дни недели в одно и то же время сворачиваются в одну запись
		
		ДанныеДляСворачивания = ИсходныеДниНеделиЗапрета.Скопировать();
		ДанныеДляСворачивания.Колонки.Добавить("Счетчик");
		
		ДанныеДляПодсчета = Новый Массив;
		Для ш = 0 По ДанныеДляСворачивания.Количество() - 1 Цикл
			ДанныеДляПодсчета.Добавить(1);
		КонецЦикла;
		
		ДанныеДляСворачивания.ЗагрузитьКолонку(ДанныеДляПодсчета, "Счетчик");
		ДанныеДляСворачивания.Свернуть("ВремяНачала,ВремяОкончания", "Счетчик");
		
		// опорная таблица для сворачивания подневных запретов в недельный
		ДниНеделиЗапрета = ИсходныеДниНеделиЗапрета.СкопироватьКолонки();
		
		Для каждого СтрокаДанныхДляСворачивания Из ДанныеДляСворачивания Цикл
			
			// для недельных запретов дни пустые
			Если СтрокаДанныхДляСворачивания.Счетчик = 7 Тогда
				ЗаполнитьЗначенияСвойств(ДниНеделиЗапрета.Добавить(), СтрокаДанныхДляСворачивания);
			Иначе
				
				ОтборПоиска = Новый Структура("ВремяНачала,ВремяОкончания");
				ЗаполнитьЗначенияСвойств(ОтборПоиска, СтрокаДанныхДляСворачивания);
				РезультатПоиска = ИсходныеДниНеделиЗапрета.НайтиСтроки(ОтборПоиска);
				
				Если РезультатПоиска.Количество() > 0 Тогда
					ЗаполнитьЗначенияСвойств(ДниНеделиЗапрета.Добавить(), РезультатПоиска[0]);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	#КонецОбласти
		
		//исходные данные для записи в регистр запретов
		Для каждого ЧасыЗапрета Из ДниНеделиЗапрета Цикл
			
			Для каждого ДополнительноеУсловие Из ДополнительныеУсловияЗапрета Цикл
				
				Для каждого БазовоеУсловиеЗапрета Из БазовыеУсловияЗапрета Цикл
					
					ДанныеИтоговойТаблицы = ИтоговаяТаблица.Добавить();
					ЗаполнитьЗначенияСвойств(ДанныеИтоговойТаблицы, БазовоеУсловиеЗапрета);
					ЗаполнитьЗначенияСвойств(ДанныеИтоговойТаблицы, ДополнительноеУсловие);
					ЗаполнитьЗначенияСвойств(ДанныеИтоговойТаблицы, ЧасыЗапрета);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;

		// обновить данные:
		// - ранее выгруженные из мастер - системы
		// - с ключом записи, аналогичным полученному из мастер - системы
		// создать новые записи
		
		ИдентификаторЗапрета = БазовыеУсловияЗапрета[0].ИдентификаторЗапрета;
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	УсловияЗапретаПродаж.Организация КАК Организация,
		|	УсловияЗапретаПродаж.ВидНоменклатуры КАК ВидНоменклатуры,
		|	УсловияЗапретаПродаж.ОсобенностьУчета КАК ОсобенностьУчета,
		|	УсловияЗапретаПродаж.ДеньНедели КАК ДеньНедели,
		|	УсловияЗапретаПродаж.ДатаНачалаДействия КАК ДатаНачалаДействия,
		|	УсловияЗапретаПродаж.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
		|	УсловияЗапретаПродаж.ВремяНачала КАК ВремяНачала,
		|	УсловияЗапретаПродаж.ВремяОкончания КАК ВремяОкончания
		|ИЗ
		|	РегистрСведений.УсловияЗапретаПродажРМК КАК УсловияЗапретаПродаж
		|ГДЕ
		|	УсловияЗапретаПродаж.ИдентификаторЗапрета = &ИдентификаторЗапрета");
		Запрос.УстановитьПараметр("ИдентификаторЗапрета", ИдентификаторЗапрета);
		
		ЗаписиЗапретов = Запрос.Выполнить().Выбрать();
		
		Пока ЗаписиЗапретов.Следующий() Цикл
		
			ЗаписьЗапрета = РегистрыСведений.УсловияЗапретаПродажРМК.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(ЗаписьЗапрета, ЗаписиЗапретов);
			ЗаписьЗапрета.Удалить();
		
		КонецЦикла;
		
		Для каждого НовыйЗапрет Из ИтоговаяТаблица Цикл
		
			ЗаписьНовогоЗапрета = РегистрыСведений.УсловияЗапретаПродажРМК.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(ЗаписьНовогоЗапрета, НовыйЗапрет);
			ЗаписьНовогоЗапрета.Прочитать();
			
			Если НЕ ЗаписьНовогоЗапрета.Выбран() Тогда
				
				ЗаполнитьЗначенияСвойств(ЗаписьНовогоЗапрета, НовыйЗапрет);
				
				Попытка
					ЗаписьНовогоЗапрета.Записать();
				Исключение
					
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Не удалось записать данные запрета продаж'"),
						УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					Возврат ДанныеУспешноОбновлены;
						
				КонецПопытки;
					
			КонецЕсли;
			
		КонецЦикла;
		
		ДанныеУспешноОбновлены = Истина;
		
	КонецЕсли;
	
	Возврат ДанныеУспешноОбновлены;

КонецФункции

// Возвращает текущий торговый объект, который далее используется в РМК.
//
// ВозвращаемоеЗначение:
//  СправочникСсылка.ТорговыеОбъекты - текущий торговый объект РМК.
//
Функция ОпределитьТекущийТорговыйОбъект() Экспорт
	
	Возврат ПараметрыСеанса.ТекущийМагазин;
	
КонецФункции

// Адрес торгового объекта.
//
// Параметры:
//  ТорговыйОбъект - СправочникСсылка.ТорговыеОбъекты - магазин для получения адреса.
//
Процедура АдресТорговогоОбъекта(АдресМагазина, ТорговыйОбъект) Экспорт
	
	АдресМагазина = ОбщегоНазначенияРТ.АдресМагазина(ТорговыйОбъект);
	
КонецПроцедуры

// Проверяет наличие в таблице товаров алкогольной продукция ЕГАИС по реквизиту НеобходимостьВводаКодаМаркировки
//
// Параметры:
//  ТабличнаяЧасть - Документ.ЧекККМ.Товары
//
// Возвращаемое значение:
//  ЕстьПродукцияЕГАИС - Булево
//
Функция ЕстьПродукцияЕГАИС(ТабличнаяЧасть) Экспорт
	
	Возврат ИнтеграцияЕГАИСРТ.ЕстьАлкогольнаяПродукцияЕГАИС(ТабличнаяЧасть);
	
КонецФункции

// Возвращает количество записей запретов продаж
//
// Возвращаемое значение:
//  Число
//
Функция КоличествоЗаписейЗапретовПродаж() Экспорт
	
	Результат = 0;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК КоличествоЗаписей
	|ИЗ
	|	РегистрСведений.УсловияЗапретаПродажРМК КАК УсловияЗапретаПродаж");
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.КоличествоЗаписей;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает значение основной организации.
//
// Параметры:
//  НастройкаРМК - СправочникСсылка.НастройкиРабочегоМестаКассира - настройка РМК, для которой необходимо получить основную организацию.
//
// ВозвращаемоеЗначение:
//  Организация - ОпределяемыйТип.ОрганизацияРМК - основная организации.
//
Функция ОсновнаяОрганизацияПоНастройке(НастройкаРМК) Экспорт
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаРМК.ОсновнаяКассаККМ, "Владелец");
КонецФункции

// Возвращает текст запроса на получение данных для пробития чека 
//
//
// Возвращаемое значение:
//  ТекстЗапроса - Строка - текст запроса 
Функция ТекстЗапросаДанныхДляПробитияЧека() Экспорт
	
	Возврат "";
	
КонецФункции

// Определяет значение системы налогообложения организации на указанную дату.
//
//  Параметры:
//   Организация - СправочникСсылка.Организации - организация для которой нужно определить СНО.
//   ДатаДокумента - Дата, Неопределено - дата на которую нужно определить тип СНО.
//  
// ВозвращаемоеЗначение:
//  СистемыНалогообложенияККТ - Перечисление.ТипыСистемНалогообложенияККТ - значение СНО.
//
Функция ТипСистемыНалогообложенияККТ(Организация, ДатаДокумента) Экспорт
	
	СНООрганизации = РегистрыСведений.ПрименениеСистемНалогообложения.СистемаНалогообложенияОрганизации(Организация, ДатаДокумента);
	
КонецФункции

// Обновляет данные карты лояльности
//
// Параметры:
//	КартаЛояльности - СправочникСсылка.КартыЛояльности - карта, данные которой будут изменены
//	ДанныеДляИзменения - Структура
//		* НомерКартыДоИзменения - Строка - предыдущее значение номера карты лояльности
//		* МагнитныйКодКартыЛояльности - Строка - магнитный код карты лояльности
//		* НовыйEmailКлиента - Строка - новый email владельца карты
//		* НовыйНомерТелефонаКлиента - Строка - новый номер телефона владельца карты
//
Процедура СохранитьДанныеКартыЛояльности(КартаЛояльности, ДанныеДляИзменения) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Получает последний порядковый номер документа (чека) для КассыККМ.
//
// Параметры:
//  КассаККМ - СправочникСсылка.КассыККМ - значение справочника "КассыККМ" для которого нужно получить 
//    максимальный номер чека.
// 
// Возвращаемое значение:
//  НомерЧекаККМ - Число - номер последнего документа.
//
Функция НомерЧекаККМ(КассаККМ) Экспорт 
	
	Возврат ОбщегоНазначенияРТВызовСервера.ПоследнийНомерДокументаКассыККМ(КассаККМ);
	
КонецФункции

// Функция получает реквизиты кассы.
//
// Параметры:
//  КассаККМ - СправочникСсылка.КассыККМ - Ссылка на кассу ККМ.
//  РабочееМесто - СправочникСсылка.РабочиеМеста, Неопределено - (необязательный) ссылка на рабочее место.
//
// Возвращаемое значение:
//	Структура.
//
Функция РеквизитыКассыККМ(КассаККМ, РабочееМесто) Экспорт
	
	Возврат Справочники.КассыККМ.РеквизитыКассыККМ(КассаККМ);
	
КонецФункции

// Процедура заполняет организацию продажи в строке.
//
// Параметры:
//  ДанныеСтроки - Структура - данные текущей строки.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура ЗаполнитьОрганизациюПродажи(ДанныеСтроки, Форма) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	РаспределениеНоменклатуры.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА РаспределениеНоменклатуры.РабочееМесто = &РабочееМесто
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК ПолеУпорядочивания
	|ИЗ
	|	РегистрСведений.РаспределениеНоменклатуры КАК РаспределениеНоменклатуры
	|ГДЕ
	|	РаспределениеНоменклатуры.Магазин = &Магазин
	|	И РаспределениеНоменклатуры.ТоварнаяГруппа = &ТоварнаяГруппа
	|	И (РаспределениеНоменклатуры.РабочееМесто = &РабочееМесто
	|			ИЛИ РаспределениеНоменклатуры.РабочееМесто = ЗНАЧЕНИЕ(Справочник.РабочиеМеста.ПустаяСсылка))";
	
	Магазин = Форма.Объект.ТорговыйОбъект;
	ТоварнаяГруппа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.Номенклатура, "ТоварнаяГруппа");
	СкладПродажи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Магазин, "СкладПродажи");
	
	Запрос.УстановитьПараметр("Магазин", Форма.Объект.ТорговыйОбъект);
	Запрос.УстановитьПараметр("РабочееМесто", Форма.РабочееМесто);
	Запрос.УстановитьПараметр("ТоварнаяГруппа", ТоварнаяГруппа);
	Запрос.УстановитьПараметр("Склад", СкладПродажи);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ДанныеСтроки.Организация = Выборка.Организация;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеСтроки.Организация) Тогда
		ДанныеСтроки.Организация = Форма.ОсновнаяОрганизация;
	КонецЕсли;
	
	ТекущаяДата = ОбщегоНазначения.ТекущаяДатаПользователя();
	СистемаНалогообложения = ПодключаемоеОборудованиеРТ.ПолучитьСистемуНалогообложения(
		ТекущаяДата,
		ДанныеСтроки.Организация,
		Магазин,
		СкладПродажи,
		ТоварнаяГруппа); 
	
	Если ДанныеСтроки.Свойство("СистемаНалогообложения") Тогда
		ДанныеСтроки.СистемаНалогообложения = СистемаНалогообложения;
	КонецЕсли;
	
КонецПроцедуры

// Процедура производит поиск подарочного сертификата.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
Процедура НайтиСертификатЛокально(Форма) Экспорт
	
	ПодарочныйСертификат = Неопределено;
	НомерСертификата = Форма.НомерСертификата;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СерийныеНомера.Владелец КАК Номенклатура,
	|	СерийныеНомера.Ссылка КАК СерийныйНомер
	|ИЗ
	|	Справочник.СерийныеНомера КАК СерийныеНомера
	|ГДЕ
	|	НЕ СерийныеНомера.ПометкаУдаления
	|	И СерийныеНомера.КодСерийногоНомера = &НомерСертификата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СерийныеНомера.Владелец,
	|	СерийныеНомера.Ссылка
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СерийныеНомера КАК СерийныеНомера
	|		ПО Штрихкоды.Владелец = СерийныеНомера.Ссылка
	|ГДЕ
	|	Штрихкоды.Штрихкод = &НомерСертификата
	|	И Штрихкоды.Владелец ССЫЛКА Справочник.СерийныеНомера";
	
	Запрос.УстановитьПараметр("НомерСертификата", НомерСертификата);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПодарочныйСертификат = Выборка.Номенклатура;
		СерийныйНомер = Выборка.СерийныйНомер;
	КонецЕсли;
	
	Если ПодарочныйСертификат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСертификата = РаботаСПодарочнымиСертификатами.ПолучитьСтруктуруДанныхСертификата(ПодарочныйСертификат, СерийныйНомер);
	
	Форма.СуммаСертификата = ДанныеСертификата.Остаток;
	Форма.ПодарочныйСертификат = ПодарочныйСертификат;
	
КонецПроцедуры

// Процедура производит поиск бонусных баллов.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
Процедура НайтиБонусыЛокально(Форма) Экспорт
	
	ДисконтнаяКарта = Форма.Объект.ДисконтнаяКарта;
	БонуснаяПрограмма = ДисконтнаяКарта.БонуснаяПрограммаЛояльности;
	ДанныеБонусов = СервисЛояльностиПереопределяемый.ПолучитьБонусыКлиента(ДисконтнаяКарта);
	
	Форма.КоличествоБонусов = ДанныеБонусов.Итог("Сумма");
	Форма.БонусыДоступноКОплате = Форма.КоличествоБонусов * ?(БонуснаяПрограмма.КурсКонвертацииБонусовВВалюту = 0, 1, БонуснаяПрограмма.КурсКонвертацииБонусовВВалюту);
	Форма.ПроцентОплатыБонусами = БонуснаяПрограмма.МаксимальныйПроцентОплатыБонусами;
	
	Форма.Элементы.ГруппаБонусыКартыЛояльности.Видимость = Истина;
	Форма.Элементы.ОплатитьБонусами.Доступность = (Форма.КоличествоБонусов > 0 И Форма.Элементы.ГруппаОплатаБонусами.Доступность);
	
	ТекстСообщения = СтрШаблон(НСтр("ru = 'Бонусами можно оплатить до %1%2 от суммы чека'"), Форма.ПроцентОплатыБонусами, "%");
	Форма.Элементы.ДекорацияВозможноОплатитьБонусами.Заголовок = ТекстСообщения;	
	
КонецПроцедуры

// Функция определяет нужно ли контролировать остатки для текущего пользователя.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
// Возвращаемое значение:
//  КонтролироватьОстатки - булево - Истина, если нужно контролировать остатки.
//
Функция ТребуетсяКонтрольОстатков(Форма) Экспорт
	
	Возврат УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
		ПланыВидовХарактеристик.ПраваПользователей.КонтролироватьОстатокПриПроведении,
		Ложь,
		Форма.Объект.ПользовательБД);
	
КонецФункции

// Процедура производит контроль остатков.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//  КонтрольОстатковПройден - Булево - признак успешной проверки остатков.
//  ТекстОшибки - Строка - текст возможной ошибки.
//
Процедура ПроверитьНаличиеТоваров(Форма, КонтрольОстатковПройден, ТекстОшибки) Экспорт
	
	ТаблицаТовары = Форма.Объект.Товары;
	
	СтруктураПараметровЗаполнения = Новый Структура;
	СтруктураПараметровЗаполнения.Вставить("Магазин", Форма.Объект.ТорговыйОбъект);
	СтруктураПараметровЗаполнения.Вставить("РабочееМесто", Форма.РабочееМесто);
	СтруктураПараметровЗаполнения.Вставить("Организация", Форма.Объект.Организация);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСкладПродажи", СтруктураПараметровЗаполнения);
	
	Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
		Если Не ЗначениеЗаполнено(СтрокаТовары.Склад) Тогда
			ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСкладПродажиВСтрокеТЧСервер(СтрокаТовары, СтруктураДействий, Неопределено);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Склад КАК Склад,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ТоварыДокумента
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыДокумента.Номенклатура КАК Номенклатура,
	|	ТоварыДокумента.Характеристика КАК Характеристика,
	|	ТоварыДокумента.Склад КАК Склад,
	|	ТоварыДокумента.Количество КАК Количество,
	|	СпрНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТоварыДокумента.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ТоварыДляПроверки
	|ИЗ
	|	ТоварыДокумента КАК ТоварыДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО ТоварыДокумента.Номенклатура = СпрНоменклатура.Ссылка
	|ГДЕ
	|	НЕ СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
	|	ТоварыНаСкладахОстатки.Склад КАК Склад,
	|	ТоварыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|	ТоварыНаСкладахОстатки.РезервОстаток КАК РезервОстаток
	|ПОМЕСТИТЬ ТаблицаОстатки
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			,
	|			(Номенклатура, Характеристика, Склад) В
	|				(ВЫБРАТЬ
	|					ТоварыДляПроверки.Номенклатура КАК Номенклатура,
	|					ТоварыДляПроверки.Характеристика КАК Характеристика,
	|					ТоварыДляПроверки.Склад КАК Склад
	|				ИЗ
	|					ТоварыДляПроверки КАК ТоварыДляПроверки)) КАК ТоварыНаСкладахОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыДляПроверки.Номенклатура КАК Номенклатура,
	|	ТоварыДляПроверки.Характеристика КАК Характеристика,
	|	ТоварыДляПроверки.Склад КАК Склад,
	|	ТоварыДляПроверки.Количество - ЕСТЬNULL(ТаблицаОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТаблицаОстатки.РезервОстаток, 0) КАК НедостающееКоличество,
	|	ТоварыДляПроверки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТоварыДляПроверки.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ТоварыДляПроверки КАК ТоварыДляПроверки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОстатки КАК ТаблицаОстатки
	|		ПО ТоварыДляПроверки.Номенклатура = ТаблицаОстатки.Номенклатура
	|			И ТоварыДляПроверки.Характеристика = ТаблицаОстатки.Характеристика
	|			И ТоварыДляПроверки.Склад = ТаблицаОстатки.Склад
	|ГДЕ
	|	ТоварыДляПроверки.Количество > ЕСТЬNULL(ТаблицаОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТаблицаОстатки.РезервОстаток, 0)";
	
	Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаТовары.Выгрузить());
	Выборка = Запрос.Выполнить().Выбрать();
	
	ШаблонСообщения = НСтр("ru = 'Товар: %1
		|Превышен остаток на складе %2 на %3 %4'");
		
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРезервированиеПоЗаказамПокупателей") Тогда
		ШаблонСообщения = НСтр("ru = 'Товар: %1
			|Превышен сводобный остаток на складе %2 на %3 %4'");
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		Форма.Элементы.Товары.ТекущаяСтрока = Форма.Объект.Товары[Выборка.НомерСтроки - 1].ПолучитьИдентификатор();
		
		ПредставлениеТовара = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(
			Выборка.Номенклатура,
			Выборка.Характеристика);
		
		ТекстОшибки = ТекстОшибки + ?(КонтрольОстатковПройден, "", Символы.ПС) +
			СтрШаблон(ШаблонСообщения, ПредставлениеТовара, Выборка.Склад, Выборка.НедостающееКоличество, Выборка.ЕдиницаИзмерения) + Символы.ПС;
		
		КонтрольОстатковПройден = Ложь;
		
	КонецЦикла;
	
	Если Не КонтрольОстатковПройден Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Форма.Объект.ОперацияСДенежнымиСредствами Тогда
		
		МассивСерийныхНомеров = ТаблицаТовары.Выгрузить().ВыгрузитьКолонку("Серия");
		Если МассивСерийныхНомеров.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СерийныеНомера.Ссылка КАК СерийныйНомер
		|ПОМЕСТИТЬ ТаблицаСерийныхНомеров
		|ИЗ
		|	Справочник.СерийныеНомера КАК СерийныеНомера
		|ГДЕ
		|	СерийныеНомера.Ссылка В(&МассивСерийныхНомеров)
		|	И НЕ СерийныеНомера.Ссылка = ЗНАЧЕНИЕ(Справочник.СерийныеНомера.ПустаяСсылка)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СерийныйНомер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияСерийныхНомеров.Номенклатура КАК Номенклатура,
		|	ДвиженияСерийныхНомеров.СерийныйНомер КАК СерийныйНомер,
		|	ДвиженияСерийныхНомеров.Период КАК Период,
		|	ВЫБОР
		|		КОГДА ДвиженияСерийныхНомеров.АналитикаХозяйственнойОперации = ЗНАЧЕНИЕ(Справочник.АналитикаХозяйственныхОпераций.ПогашениеПодарочныхСертификатов)
		|			ТОГДА ДвиженияСерийныхНомеров.Получатель.Магазин
		|		ИНАЧЕ ДвиженияСерийныхНомеров.Отправитель.Магазин
		|	КОНЕЦ КАК Магазин,
		|	ВЫБОР
		|		КОГДА ДвиженияСерийныхНомеров.АналитикаХозяйственнойОперации = ЗНАЧЕНИЕ(Справочник.АналитикаХозяйственныхОпераций.РеализацияТоваров)
		|			ТОГДА ""Реализован""
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ДвиженияСерийныхНомеров.АналитикаХозяйственнойОперации = ЗНАЧЕНИЕ(Справочник.АналитикаХозяйственныхОпераций.ПогашениеПодарочныхСертификатов)
		|					ТОГДА ""Погашен""
		|				ИНАЧЕ ""Списан""
		|			КОНЕЦ
		|	КОНЕЦ КАК Действие
		|ИЗ
		|	РегистрСведений.ДвиженияСерийныхНомеров КАК ДвиженияСерийныхНомеров
		|ГДЕ
		|	ДвиженияСерийныхНомеров.Период < &Дата
		|	И ДвиженияСерийныхНомеров.СерийныйНомер В
		|			(ВЫБРАТЬ
		|				ТаблицаСерийныхНомеров.СерийныйНомер КАК СерийныйНомер
		|			ИЗ
		|				ТаблицаСерийныхНомеров КАК ТаблицаСерийныхНомеров)
		|	И (ДвиженияСерийныхНомеров.АналитикаХозяйственнойОперации = ЗНАЧЕНИЕ(Справочник.АналитикаХозяйственныхОпераций.РеализацияТоваров)
		|			ИЛИ ДвиженияСерийныхНомеров.АналитикаХозяйственнойОперации = ЗНАЧЕНИЕ(Справочник.АналитикаХозяйственныхОпераций.ПогашениеПодарочныхСертификатов)
		|			ИЛИ ДвиженияСерийныхНомеров.АналитикаХозяйственнойОперации.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеНаЗатраты)
		|			ИЛИ ДвиженияСерийныхНомеров.АналитикаХозяйственнойОперации.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеПоИнвентаризации))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
		
		Запрос.УстановитьПараметр("МассивСерийныхНомеров", МассивСерийныхНомеров);
		Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
		
		ШаблонСообщения = НСтр("ru = 'Номер подарочного сертификата номенклатуры ""%1"" %2
									|%3 в магазине %4 Дата %5'");
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекстОшибки = ТекстОшибки + ?(КонтрольОстатковПройден, "", Символы.ПС)
				+ СтрШаблон(ШаблонСообщения, Выборка.Номенклатура, Выборка.СерийныйНомер, Выборка.Действие, Выборка.Магазин, Выборка.Период)
				+ Символы.ПС;
			
			КонтрольОстатковПройден = Ложь;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает реквизиты экваринговой операции Чека продажи.
//
// Параметры:
//  ЧекПродажи - ДокументСсылка.ЧекККМ - чек продажи, основание чека на возврат.
//
// Возвращаемое значение:
//  Результат - Структура - (содержит НомерПлатежнойКарты, НомерЧекаЭТ, СсылочныйНомер, ЭквайринговыйТерминал)
//
Функция РеквизитыЭквайринговойОперацииПродажи(ЧекПродажи) Экспорт
	
	СтруктураРеквизитовОплаты = Новый Структура;
	СтруктураРеквизитовОплаты.Вставить("НомерПлатежнойКарты");
	СтруктураРеквизитовОплаты.Вставить("НомерЧекаЭТ");
	СтруктураРеквизитовОплаты.Вставить("СсылочныйНомер");
	СтруктураРеквизитовОплаты.Вставить("ЭквайринговыйТерминал");
	
	Для Каждого СтрокаОплатыПродажи Из ЧекПродажи.Оплата Цикл
		Если СтрокаОплатыПродажи.ВидОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта Тогда
			
			ЗаполнитьЗначенияСвойств(СтруктураРеквизитовОплаты, СтрокаОплатыПродажи);
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураРеквизитовОплаты;
	
КонецФункции

// Процедура устанавливает статус аннулированный у чекаККМ.
//
// Параметры:
//  ЧекККМ - ДокументСсылка.ЧекККМ - документ для изменения статуса.
//
Процедура АннулироватьЧек(ЧекККМ) Экспорт
	
	ЧекККМОбъект = ЧекККМ.ПолучитьОбъект();
	ДокументЗаблокирован = Истина;
	
	Попытка
		ЧекККМОбъект.Заблокировать();
	Исключение
		ДокументЗаблокирован = Ложь;
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка блокировки документа.'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,
			ЧекККМОбъект,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Если ДокументЗаблокирован Тогда
		ЧекККМОбъект.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Аннулированный;
		
		РежимЗаписи = ?(ЧекККМОбъект.Проведен, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись);
		Попытка
			ЧекККМОбъект.Записать(РежимЗаписи);
			ЧекККМ = Документы.ЧекККМ.ПустаяСсылка();
		Исключение
			ДокументЗаблокирован = Ложь;
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка при аннулировании чека ККМ.'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,
				ЧекККМОбъект,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает признак можно ли открывать рабочее место кассира.
//
// Возвращаемое значение:
//  Булево - Истина, если можно открывать рабочее место кассира
//
Функция МожноОткрыватьРМК() Экспорт
	
	Возврат ВключеноИспользованиеНовогоРМК();
	
КонецФункции

// Возвращает строку для печати на ФР разбитую по ширине ленты.
//
// Параметры:
//  МассивДокументов - Массив - массив документов для которых возвращается строка.
//  ШиринаЛенты - Число - ширина ленты печати.
//
// Возвращаемое значение:
//  Строка - строка печати на оборудовании.
//
Функция СтрокаПечатиНаФР(МассивДокументов, ШиринаЛенты) Экспорт
	Возврат Документы.ЧекККМ.ТекстПечатиЧекаНаФР(МассивДокументов, ШиринаЛенты);
КонецФункции

// Возвращает текст запроса для поиска чека в регистре "Фискальные операции" по фискальному признаку.
//
// ВозвращаемоеЗначение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаЧекПоФискальномуПризнаку() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФискальныеОперации.ДокументОснование КАК Ссылка
	|ИЗ
	|	РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
	|ГДЕ
	|	ФискальныеОперации.ФискальныйПризнак = &ФискальныйПризнак
	|	И ТИПЗНАЧЕНИЯ(ФискальныеОперации.ДокументОснование) = ТИП(Документ.ЧекККМ)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Определяет присутствие товаров с возрастным ограничением в ЧекеККМ
//
// Параметры:
//  ЧекККМ - ДокументСсылка.ЧекККМ - анализируемый документ.
//
// Возвращаемое значение:
//  Булево - Истина, если есть товары с возрастным ограничением (табак, алкоголь)
//
Функция ЕстьТоварыСВозрастнымОграничением(ЧекККМ) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ИСТИНА КАК ЕстьТоварыСВозрастнымОграничением
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ЧекККМТовары
	|ГДЕ
	|	ЧекККМТовары.Номенклатура.ОсобенностьУчета В(&ОсобенностиУчета)
	|	И ЧекККМТовары.Ссылка = &ЧекККМ");
	
	ОсобенностиУчета = Новый Массив;
	ОсобенностиУчета.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция);
	ОсобенностиУчета.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция);
	ОсобенностиУчета.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.АльтернативныйТабак);
	
	Запрос.УстановитьПараметр("ОсобенностиУчета", ОсобенностиУчета);
	Запрос.УстановитьПараметр("ЧекККМ", ЧекККМ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Следующий();
	
КонецФункции

// Возвращает текст запроса для проверки уникальности избранных товаров.
// Текст запроса должен проверять наличиие дублей строк с одинаковыми товарами.
//
// ВозвращаемоеЗначение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаУникальностьИзбранныхТоваров() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	НастройкиРМКБыстрыеТовары.Номенклатура КАК Номенклатура,
	|	НастройкиРМКБыстрыеТовары.Характеристика КАК Характеристика,
	|	СУММА(1) КАК КоличествоПозиций
	|ПОМЕСТИТЬ втДубли
	|ИЗ
	|	Справочник.НастройкиРабочегоМестаКассира.БыстрыеТовары КАК НастройкиРМКБыстрыеТовары
	|ГДЕ
	|	НастройкиРМКБыстрыеТовары.Ссылка = &Ссылка
	|	И НЕ НастройкиРМКБыстрыеТовары.Ссылка.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	НастройкиРМКБыстрыеТовары.Номенклатура,
	|	НастройкиРМКБыстрыеТовары.Характеристика
	|
	|ИМЕЮЩИЕ
	|	СУММА(1) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиРМКБыстрыеТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	втДубли КАК втДубли
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиРабочегоМестаКассира.БыстрыеТовары КАК НастройкиРМКБыстрыеТовары
	|		ПО втДубли.Номенклатура = НастройкиРМКБыстрыеТовары.Номенклатура
	|			И втДубли.Характеристика = НастройкиРМКБыстрыеТовары.Характеристика
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса для проверки заполнения характеристик
// для товаров, для которых ведется учет по характеристикам.
//
// ВозвращаемоеЗначение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаЗаполнениеХарактеристик() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	НастройкиРМКБыстрыеТовары.Номенклатура КАК Номенклатура,
	|	ВидыНоменклатуры.ИспользоватьХарактеристики КАК ИспользоватьХарактеристики,
	|	НастройкиРМКБыстрыеТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Справочник.НастройкиРабочегоМестаКассира.БыстрыеТовары КАК НастройкиРМКБыстрыеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО НастройкиРМКБыстрыеТовары.Номенклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
	|ГДЕ
	|	НЕ ВидыНоменклатуры.ПометкаУдаления
	|	И НЕ ВидыНоменклатуры.ЭтоГруппа
	|	И НастройкиРМКБыстрыеТовары.Ссылка = &Ссылка
	|	И НастройкиРМКБыстрыеТовары.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	И ВидыНоменклатуры.ИспользоватьХарактеристики";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Определяет необходимость ввода характеристики по переданной номенклатуре.
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - номенклатура, для которой необходимо проверить характеристики.
//
// Возвращаемое значение:
//  Булево - Истина, если необходим ввод характеристик.
//
Функция ТребуетсяВводХарактеристики(Номенклатура) Экспорт
	
	Возврат Справочники.Номенклатура.ХарактеристикиИспользуются(Номенклатура);
	
КонецФункции

// Возвращает текущее рабочее место.
//
// Возвращаемое значение:
//  СправочникСсылка.РабочиеМеста - текущее рабочее место.
//
Функция ТекущееРабочееМесто() Экспорт
	
	Возврат МенеджерОборудованияВызовСервера.РабочееМестоКлиента();
	
КонецФункции

// Определяет виды номенклатуры по переданному значению Особенность учета.
//
// Параметры:
//  ОсобенностьУчета - ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры - особенность учета.
//
// Возвращаемое значение:
//  Массив - массив, в котором содержатся виды номенклатуры.
//
Функция ВидыНоменклатурыПоОсобенностиУчета(ОсобенностьУчета) Экспорт
	
	МассивВидовНоменклатуры = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 5
	|	Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ПометкаУдаления
	|	И Номенклатура.ОсобенностьУчета = &ОсобенностьУчета
	|	И НЕ Номенклатура.ЭтоГруппа
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура.ВидНоменклатуры,
	|	Номенклатура.ОсобенностьУчета");

	Запрос.УстановитьПараметр("ОсобенностьУчета", ОсобенностьУчета);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВидовНоменклатуры.Добавить(Выборка.ВидНоменклатуры);
	КонецЦикла;
	
	Возврат МассивВидовНоменклатуры;
	
КонецФункции

// Возвращает актуальное значение префикса информационной базы
//
// Параметры:
//  ОчищатьПрефикс - Булево - признак необходимости сброса значения префикса
//
// Возвращаемое значение:
//  АктуальноеЗначениеПрефикса - Строка, Неопределено - актуальное значение префикса
//
Функция АктуальноеЗначениеПрефикса(ОчищатьПрефикс) Экспорт
	Возврат Неопределено;
КонецФункции

// Определяет кассира по переданному значению пользователя.
//
// Параметры:
//  ПользовательБД - СправочникСсылка.Пользователи - пользователь базы данных.
//
// Возвращаемое значение:
//  Кассир - ОпределяемыйТип.КассирРМК - кассир для текущего пользователя.
//
Функция КассирДляРМК(ПользовательБД) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПользовательБД, "ФизическоеЛицо");
	
КонецФункции

// Возвращает текст сообщения по шаблону сообщения.
//
// Параметры:
//  ШаблонСообщения - СправочникСсылка.ШаблоныСообщений - ссылка на шаблон сообщения.
//  ДополнительныеПараметры - Структура - список дополнительных параметров, который будет передан в параметр
//                                        Сообщение в процедурах ПриФормированииСообщения при создании сообщения.
//
// Возвращаемое значение:
//  Строка - текст сообщения.
//
Функция СформироватьТекстСообщения(ШаблонСообщения, ДополнительныеПараметры) Экспорт
	
	Предмет = Справочники.ИнформационныеКарты.ПустаяСсылка();
	НовыйИдентификатор = Новый УникальныйИдентификатор;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатСообщение =
		ШаблоныСообщений.СформироватьСообщение(ШаблонСообщения, Предмет , НовыйИдентификатор, ДополнительныеПараметры);
		
	ТекстСообщения = РезультатСообщение.Текст;
	
	Возврат ТекстСообщения;
	
КонецФункции

// Отправляет SMS через настроенного поставщика услуги, возвращает идентификатор сообщения.
//
// Параметры:
//  НомераПолучателей - Массив из Строка - номера получателей в формате +7ХХХХХХХХХХ;
//  ТекстСообщения - Строка - текст сообщения, максимальная длина у операторов может быть разной;
//
// Возвращаемое значение:
//  Структура:
//    * ОтправленныеСообщения - Массив из Структура:
//      ** НомерПолучателя - Строка - номер получателя SMS.
//      ** ИдентификаторСообщения - Строка - идентификатор SMS, присвоенный провайдером для отслеживания доставки.
//    * ОписаниеОшибки - Строка - пользовательское представление ошибки, если пустая строка, то ошибки нет.
//
Функция ОтправитьSMS(НомераПолучателей, ТекстСообщения) Экспорт
	
	РезультатОтправкиБСП = ОтправкаSMS.ОтправитьSMS(НомераПолучателей, ТекстСообщения);
	
	Возврат РезультатОтправкиБСП;
	
КонецФункции

// Заполняет имя кассира и его ИНН для печати на ККТ.
//
// Параметры:
//  ПараметрыОперации - см.ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОткрытияЗакрытияСмены().
//  Пользователь - СправочникСсылка.Пользователи - пользователь РМК.
//  Кассир - ОпределяемыйТип.КассирРМК - кассир РМК
//
Процедура ЗаполнитьПараметрыКассираДляПечати(ПараметрыОперации, Пользователь, Кассир) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка КАК ФизЛицо,
	|	1 КАК Приоритет
	|ПОМЕСТИТЬ СписокФизЛиц
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.Ссылка = &Кассир
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Пользователи.ФизическоеЛицо,
	|	2
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Ссылка = &Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СписокФизЛиц.ФизЛицо КАК ФизЛицо,
	|	МИНИМУМ(СписокФизЛиц.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ ТаблицаФизЛицо
	|ИЗ
	|	СписокФизЛиц КАК СписокФизЛиц
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокФизЛиц.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпрФизЛица.Наименование КАК ФИО,
	|	СпрФизЛица.ИНН КАК ИНН
	|ИЗ
	|	ТаблицаФизЛицо КАК ТаблицаФизЛицо
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК СпрФизЛица
	|		ПО ТаблицаФизЛицо.ФизЛицо = СпрФизЛица.Ссылка";
	
	Запрос.УстановитьПараметр("Кассир", Кассир);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПараметрыОперации.Кассир = Выборка.ФИО;
		ПараметрыОперации.КассирИНН = Выборка.ИНН;
	Иначе
		ПараметрыОперации.Кассир = НСтр("ru='Администратор'");
	КонецЕсли;
	
КонецПроцедуры

// Возвращает сумму оплат, которые были приняты используя эквайринговый
// терминал, подключенный к программе.
//
// Параметры:
//  ЧекККМ - ОпределяемыйТип.ЧекККМРМК - анализируемый документ.
//
// Возвращаемое значение:
//  Число - сумма безналичной оплаты.
//
Функция СуммаОплатНаПодключенномЭТ(ЧекККМ) Экспорт
	
	СуммаБНОплаты = 0;
	Для Каждого СтрокаОплаты Из ЧекККМ.Оплата Цикл
		Если ЗначениеЗаполнено(СтрокаОплаты.СсылочныйНомер) тогда
			СуммаБНОплаты = СуммаБНОплаты + СтрокаОплаты.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СуммаБНОплаты;
	
КонецФункции

// Заполняет массив статусами,в которых чек ККМ считается пробитым.
//
// Параметры:
//  МассивСтатусов - Массив - массив статусов чека ККМ.
//
Процедура ЗаполнитьСтатусыПробитыхЧековККМ(МассивСтатусов) Экспорт
	
	МассивСтатусов.Добавить(Перечисления.СтатусыЧековККМ.Пробитый);
	МассивСтатусов.Добавить(Перечисления.СтатусыЧековККМ.Архивный);
	
КонецПроцедуры

// В процедуре описывается условное оформление для настроек рабочего места кассира.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура НастроитьУсловноеОформлениеВНастройкахРМК(Форма) Экспорт
	
	Форма.УсловноеОформление.Элементы.Очистить();
	
	//Пустое рабочее место.
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.СписокНастроек.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокНастроек.РабочееМесто");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.РабочиеМеста.ПустаяСсылка();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(220, 220, 220));
	
	//Характеристики не используются.
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.НастройкаРМКБыстрыеТоварыХарактеристика.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(
		Форма.Элементы.НастройкаРМКБыстрыеТоварыХарактеристикиИспользуются.ПутьКДанным);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
	//Характеристики не заполнены.
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.НастройкаРМКБыстрыеТоварыХарактеристика.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(
		Форма.Элементы.НастройкаРМКБыстрыеТоварыХарактеристикиИспользуются.ПутьКДанным);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(
		Форма.Элементы.НастройкаРМКБыстрыеТоварыХарактеристика.ПутьКДанным);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
КонецПроцедуры

// Получает цену емрц из данных информационной базы на дату.
//
// Параметры:
//  ОсобенностьУчета - Перечисления.ВидыМаркированнойПродукцииБПО - тип маркированной продукции для проверки цены.
//  Период - Дата - дата проверки цены.
//  ЕМРЦ - Число - значение емрц.
//
Процедура ПолучитьЦенуЕМРЦ(ОсобенностьУчета, Период = Неопределено, ЕМРЦ = 0) Экспорт
	
	РегистрыСведений.ЗначенияЕМРЦ.ПолучитьЦенуЕМРЦ(ОсобенностьУчета, Период, ЕМРЦ);
	
КонецПроцедуры

// Процедура фискализирует ЧекККМ после пробития на ККТ.
//
// Параметры:
//  ВходящиеДанные - Структура - данные о результате пробития чека на ККТ.
//  ДополнительныеПараметры - Структура - дополнительные параметры пробития чека.
//
Процедура ФискализироватьЧекЗавершение(ВходящиеДанные, ДополнительныеПараметры)Экспорт
	
	Если ТипЗнч(ДополнительныеПараметры.ДокументОснование) = Тип("ДокументСсылка.РегистрацияБезналичнойОплаты") Тогда
		
		РегистрацияБезналичнойОплатыОбъект = ДополнительныеПараметры.ДокументОснование.ПолучитьОбъект();
		ДокументЗаблокирован = Истина;
		
		Попытка
			РегистрацияБезналичнойОплатыОбъект.Заблокировать();
		Исключение
			ДокументЗаблокирован = Ложь;
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка блокировки документа.'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,
			РегистрацияБезналичнойОплатыОбъект,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		Если ДокументЗаблокирован Тогда
			
			РегистрацияБезналичнойОплатыОбъект.ПробитЧек = Истина;
			РегистрацияБезналичнойОплатыОбъект.НомерЧекаККМ = ДополнительныеПараметры.НомерЧека;
			
			Попытка
				РегистрацияБезналичнойОплатыОбъект.Записать(РежимЗаписи());
			Исключение
				ДокументЗаблокирован = Ложь;
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка при записи документа.'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,
				РегистрацияБезналичнойОплатыОбъект,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
			ЗаказПокупателя = РегистрацияБезналичнойОплатыОбъект.ДокументОснование;
			ОбменССайтомРТ.ЗаписатьСостояниеОплатыЗаказаПокупателя(ЗаказПокупателя, ВходящиеДанные.ДокументОснование);
			
		КонецЕсли
		
	ИначеЕсли ТипЗнч(ДополнительныеПараметры.ДокументОснование) = Тип("ДокументСсылка.ЧекККМ") Тогда
		
		ЧекККМОбъект = ДополнительныеПараметры.ДокументОснование.ПолучитьОбъект();
		ДокументЗаблокирован = Истина;
		
		Если Не ДополнительныеПараметры.Свойство("ПечатьИзФормыЧека") Тогда
			Попытка
				ЧекККМОбъект.Заблокировать();
			Исключение
				ДокументЗаблокирован = Ложь;
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка блокировки документа.'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,
				ЧекККМОбъект,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
		
		Если ДокументЗаблокирован Тогда
			
			Если ВходящиеДанные = Неопределено Тогда
				ЧекККМОбъект.НомерЧекаККМ = ДополнительныеПараметры.НомерЧека;
				ЧекККМОбъект.НомерСменыККМ = ДополнительныеПараметры.НомерСмены;
			Иначе
				ЧекККМОбъект.НомерЧекаККМ = ВходящиеДанные.НомерЧекаККМ;
				ЧекККМОбъект.НомерСменыККМ = ВходящиеДанные.НомерСменыККМ;
			КонецЕсли;
			
			ЧекККМОбъект.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Пробитый;
			ЧекККМОбъект.Дата = ТекущаяДатаСеанса();
			
			Если ДополнительныеПараметры.Свойство("ЕстьАлкогольнаяПродукцияЕГАИС") И ДополнительныеПараметры.ЕстьАлкогольнаяПродукцияЕГАИС Тогда
				ЧекККМОбъект.ПодписьЧекаЕГАИС = ДополнительныеПараметры.ДополнительныеПараметры.ПодписьЧека;
				ЧекККМОбъект.АдресЧекаЕГАИС = ДополнительныеПараметры.ДополнительныеПараметры.АдресЧека;
			КонецЕсли;
			
			//{ds-19.01.2020
			ЧекККМОбъект.ds_ОтправленВHeado = ds_Heado.Отправить(ДополнительныеПараметры.ДокументОснование);
			//}
			
			Попытка
				ЧекККМОбъект.Записать(РежимЗаписи());
			Исключение
				ДокументЗаблокирован = Ложь;
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка при записи документа.'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,
				ЧекККМОбъект,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
			//{ds
			// Обработка интернет-заказов оплаченных на сайте.
			ОснованиеСсылка = ДополнительныеПараметры.ДокументОснование;
			Если ТипЗнч(ОснованиеСсылка.ДокументРасчета) = Тип("ДокументСсылка.РегистрацияБезналичнойОплаты") Тогда
				РегистрацияБОСсылка = ОснованиеСсылка.ДокументРасчета;
				ЭлектронноеВзаимодействиеРТ.УстановитьУправляемуюБлокировкуПоСсылке(РегистрацияБОСсылка);
				
				ОбъектРегистрацияБО = РегистрацияБОСсылка.ПолучитьОбъект();
				ОбъектРегистрацияБО.ПробитЧек = Истина;
				Если (ВходящиеДанные = Неопределено) Тогда
					ОбъектРегистрацияБО.НомерЧекаККМ = ДополнительныеПараметры.НомерЧека;
				Иначе
					ОбъектРегистрацияБО.НомерЧекаККМ = ВходящиеДанные.НомерЧекаККМ;
				КонецЕсли;
				ОбъектРегистрацияБО.Записать();
				
				ОбменССайтомРТ.ЗаписатьСостояниеОплатыЗаказаПокупателя(ОснованиеСсылка.ЗаказПокупателя, ОснованиеСсылка);
			КонецЕсли;
			//}
			
			Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетТоваровФСС") Тогда
				СуммаСертификатамиНСПК = ЭлектронныеСертификатыНСПКРТ.СуммаСертификатамиНСПК(ЧекККМОбъект.Ссылка);
				Если НЕ СуммаСертификатамиНСПК = 0 Тогда
					ЭлектронныеСертификатыНСПКРТ.ПередачаДанныхФискальногоЧека(ЧекККМОбъект.Ссылка, СуммаСертификатамиНСПК);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Перечень особенностей учета, поддерживающих возврат товаров без марок
//
// Возвращаемое значение:
//   Результат - Массив из ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры
//
Функция ОсобенностиУчетаДопускающиеВозвратБезМарки() Экспорт

	Результат = Новый Массив();
	Результат.Добавить(
		ОбщегоНазначения.ПредопределенныйЭлемент("Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция"));
		
	Возврат Результат;

КонецФункции

// Возвращает признак табачной продукции
//
// Параметры:
//  ОсобенностьУчета - ОпределяемыйТип.ОсобенностиУчетаНоменклатурыРМК - особенность учета
//
// Возвращаемое значение:
//  Булево - Истина, если особенность учета является табачной
//
Функция ЭтоТабачнаяПродукция(ОсобенностьУчета) Экспорт
	
	ТабачнаяПродукция = ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция;
	Возврат ТабачнаяПродукция;
	
КонецФункции

// Возвращает признак алкогольной продукции
//
// Параметры:
//  ОсобенностьУчета - ОпределяемыйТип.ОсобенностиУчетаНоменклатурыРМК - особенность учета
//
// Возвращаемое значение:
//  Булево - Истина, если особенность учета является алкогольной
//
Функция ЭтоАлкогольнаяПродукция(ОсобенностьУчета) Экспорт
	
	АлкогольнаяПродукция = ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция;
	Возврат АлкогольнаяПродукция;
	
КонецФункции

// Рассчитывает автоматические скидки 
//
// Параметры:
//  ФормаРМК - ДанныеФормыКоллекция - данные объекта рабочего места кассира.
//
Процедура РассчитатьАвтоматическиеСкидки(ФормаРМК) Экспорт
	
	ПараметрыРасчета = ПолучитьПараметрыРасчетаСкидок(ФормаРМК);
	СтруктураСкидок = СкидкиНаценкиСервер.ДеревоСкидокНаценок(ПараметрыРасчета, ПараметрыРасчета.ВходныеПараметры);
	Если СтруктураСкидок.Свойство("ТаблицаСкидкиНаценки") Тогда
		СкидкиНаценкиСервер.ПрименитьРезультатРасчетаСкидокКОбъекту(ПараметрыРасчета, "Товары", СтруктураСкидок.ТаблицаСкидкиНаценки);     
		СкидкиНаценкиСервер.ОкруглитьЧекВПользуПокупателя(ПараметрыРасчета, "Товары", "СкидкиНаценки");
		ФормаРМК.Объект.Товары.Очистить();
		ФормаРМК.Объект.Товары.Загрузить(ПараметрыРасчета.Товары);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает имя константы оплата сертификатами НСПК.
//
// Возвращаемое значение:
//  Строка - наименование константы, в которой хранится признак использования оплат сертификатами НСПК.
//
Функция ИмяКонстантыИспользоватьОплатуСертификатамиНСПК() Экспорт
	
	Возврат Метаданные.Константы.ИспользоватьУчетТоваровФСС.Имя;
	
КонецФункции

// Возвращает признак использования оплат сертификатами НСПК.
//
// Возвращаемое значение:
//  ИспользоватьОплатуСертификатамиНСПК - Булево - признак использования оплат сертификатами НСПК.
//
Функция ИспользоватьОплатуСертификатамиНСПК() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьУчетТоваровФСС");
	
КонецФункции

// Процедура заполняет свойства "КодТРУ" и "ВозможнаОплатаЭС" в строке товара.
//
// Параметры:
//  ДанныеСтроки - Структура - данные текущей строки.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура ЗаполнитьВозможностьОплатыЭС(ДанныеСтроки, Форма) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Номенклатура.КодТРУ КАК СТРОКА(30)) КАК КодТРУ,
	|	ВЫБОР
	|		КОГДА Номенклатура.КодТРУ = """"
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ВозможнаОплатаЭС
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура");
	
	Запрос.УстановитьПараметр("Номенклатура", ДанныеСтроки.Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если ДанныеСтроки.Свойство("КодТРУ") Тогда
			ДанныеСтроки.КодТРУ = Выборка.КодТРУ;
		КонецЕсли;
		Если ДанныеСтроки.Свойство("ВозможнаОплатаЭС") Тогда
			ДанныеСтроки.ВозможнаОплатаЭС = Выборка.ВозможнаОплатаЭС;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Определяет необходимость выполнения интерактивной проверки кода маркировки в форме РМК.
// Под проверкой понимается отправка и ожидание результата проверки кода маркировки от ОИСМ (если настройка включена).
//
// Параметры:
//  Выборка - ВыборкаИзРезультатаЗапроса - см. текст запроса в методе
//                                         ОбщегоНазначенияРМКПереопределяемый.ТекстЗапросаДанныеКассыККМ.
// 
// Возвращаемое значение:
//  Булево - Истина в форме РМК будет выполняться проверка с выводом результатов пользователю.
//           Ложь - в форме РМК проверка кода маркировки выполняться не будет и марка безусловно добавляется в чек.
//           В этом случае проверку марок перед фискализацией чека необходимо реализовать самостоятельно.
//
Функция ПроверятьМаркированныйТоварНаККТ(Выборка) Экспорт
	
	Результат = ОборудованиеЧекопечатающиеУстройстваВызовСервера.ФискальноеУстройствоПоддерживаетПроверкуКодовМаркировки(
		Выборка.ПодключаемоеОборудование);
	
	Возврат Результат;
	
КонецФункции

// Возвращает текст запроса для заполнения таблицы чеков ККМ при выборе чека в РМК.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаТаблицаЧековККМ() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЧекККМ.Номер КАК Номер,
	|	ЧекККМ.Дата КАК Дата,
	|	ЧекККМ.СуммаДокумента КАК СуммаДокумента
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает имя константы префикс штрихкода весового товара.
//
// Возвращаемое значение:
//  Строка - наименование константы, в которой хранится префикс штрихкода весового товара.
//
Функция ИмяКонстантыПрефиксШтрихкодаВесовогоТовара() Экспорт
	Возврат "";
КонецФункции

// Возвращает имя константы префикс штучного фасованного товара.
//
// Возвращаемое значение:
//  Строка - наименование константы, в которой хранится префикс штрихкода штучного фасованного товара.
//
Функция ИмяКонстантыПрефиксШтрихкодаФасованногоТовара() Экспорт
	Возврат "";
КонецФункции

// Возвращает имя константы шаблон штрихкода весовых товаров.
//
// Возвращаемое значение:
//  Строка - наименование константы, в которой хранится шаблон штрихкода весовых товаров.
//
Функция ИмяКонстантыШаблонШтрихкодаВесовыхТоваров() Экспорт
	Возврат "";
КонецФункции

// Определяет возможность классификации операции как сторнирующей
 //
 // Параметры:
 //  ЧекККМПродажи - ДокументСсылка.ЧекККМ - документ - основание для оформления сторнирования.
 //  СуммаСторнирования  - Число - сумма к сторнированию.
 //  ТекущаяКассоваяСмена - ДокументСсылка.КассоваяСмена. 
 //
 // Возвращаемое значение:
 //   Результат  - Булево
 //
Функция ЭтоСторноОплаты(ЧекККМПродажа, СуммаСторнирования, ТекущаяКассоваяСмена) Экспорт
	
	Результат = Ложь;
	
	Если ЗначениеЗаполнено(ЧекККМПродажа) И ЗначениеЗаполнено(ТекущаяКассоваяСмена)
		И ТипЗнч(СуммаСторнирования) = Тип("Число") И СуммаСторнирования > 0 Тогда
		
		НомерСменыККМ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяКассоваяСмена, "НомерСменыККТ");
		
		Если НЕ НомерСменыККМ = Неопределено Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ЧекККМ.НомерСменыККМ = &НомерСменыККМ
			|		И ЧекККМ.СуммаДокумента = &СуммаКСторнированию
			|		И ЧекККМ.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробитый) КАК ЭтоСторноОплаты
			|ИЗ
			|	Документ.ЧекККМ КАК ЧекККМ
			|ГДЕ
			|	ЧекККМ.Ссылка = &ЧекККМ");
			
			Запрос.УстановитьПараметр("НомерСменыККМ", НомерСменыККМ);
			Запрос.УстановитьПараметр("ЧекККМ", ЧекККМПродажа);
			Запрос.УстановитьПараметр("СуммаКСторнированию", СуммаСторнирования);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Результат = Выборка.ЭтоСторноОплаты;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Проверяет правильность сохраненных настроек отправки SMS.
//
// Возвращаемое значение:
//  Булево - Истина, если отправка SMS уже настроена.
//
Функция НастройкаОтправкиSMSВыполнена() Экспорт
	Возврат ОтправкаSMS.НастройкаОтправкиSMSВыполнена();
КонецФункции

// Возвращает имя константы использования замены товаров.
//
// Возвращаемое значение:
//  Строка - наименование константы, в которой хранится признак использования замены товаров.
//
Функция ИмяКонстантыИспользоватьЗаменуТоваров() Экспорт
	
	Возврат Метаданные.Константы.ИспользоватьЗаменуТоваров.Имя;
	
КонецФункции

// Возвращает признак использования замены товаров.
//
// Возвращаемое значение:
//  ИспользоватьЗаменуТоваров - Булево - признак использования замены товаров.
//
Функция ИспользоватьЗаменуТоваров() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьЗаменуТоваров");
	
КонецФункции

// Возвращает таблицу с данными по товарам для добавления в РМК.
//
// Параметры:
//  МассивТоваров - Массив - массив, в котором содержится список товаров.
//
// ВозвращаемоеЗначение:
//  ТаблицаЗначений - таблица с данными по товарам для добавления в РМК.
//
Функция ТаблицаДанныхОТоварах(МассивТоваров) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СпрНоменклатура.ВидАлкогольнойПродукцииЕГАИС.Маркируемый, ЛОЖЬ)
	|			И НЕ ЕСТЬNULL(СпрНоменклатура.ВидНоменклатуры.ПродаетсяВРозлив, ЛОЖЬ)
	|		ИЛИ СпрНоменклатура.ОсобенностьУчета В (ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция), ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция), ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность), ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС), ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияБезВЕТИС), ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Шины), ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Фотоаппараты), ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Велосипеды), ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КреслаКоляски), ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Духи), ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АльтернативныйТабак), ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.УпакованнаяВода)) КАК Маркируемый,
	|	СпрНоменклатура.СтавкаНДС КАК СтавкаНДС,
	|	СпрНоменклатура.ОсобенностьУчета КАК ОсобенностьУчета,
	|	ВЫБОР
	|		КОГДА СпрНоменклатура.Весовой
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА СпрНоменклатура.Весовой
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КоличествоУпаковок,
	|	СпрНоменклатура.Наименование КАК Наименование,
	|	СпрНоменклатура.Весовой КАК Весовой,
	|	ЛОЖЬ КАК Фасованный,
	|	СпрНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ВидыНоменклатуры.ИспользоватьСерии
	|		ИЛИ СпрНоменклатура.ИспользоватьСерийныеНомера КАК НеобходимоДобавитьСтроку,
	|	ВидыНоменклатуры.ИспользоватьСерии
	|		ИЛИ СпрНоменклатура.ИспользоватьСерийныеНомера КАК НеобходимостьВводаСерии,
	|	ВидыНоменклатуры.ИспользоватьСерии
	|		ИЛИ СпрНоменклатура.ИспользоватьСерийныеНомера КАК ПроверятьЗаполнениеСерий,
	|	ЛОЖЬ КАК ИспользоватьПартии,
	|	ЛОЖЬ КАК ПроверятьЗаполнениеПартий,
	|	ЛОЖЬ КАК ЭтоНабор,
	|	СпрНоменклатура.Ссылка КАК Номенклатура
	|ПОМЕСТИТЬ ТаблицаНоменклатура
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО СпрНоменклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
	|ГДЕ
	|	СпрНоменклатура.Ссылка В(&МассивТоваров)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатура.Маркируемый КАК Маркируемый,
	|	ТаблицаНоменклатура.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаНоменклатура.ОсобенностьУчета КАК ОсобенностьУчета,
	|	ТаблицаНоменклатура.Количество КАК Количество,
	|	ТаблицаНоменклатура.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТаблицаНоменклатура.Наименование КАК Наименование,
	|	ТаблицаНоменклатура.Весовой КАК Весовой,
	|	ТаблицаНоменклатура.Фасованный КАК Фасованный,
	|	ТаблицаНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ТаблицаНоменклатура.НеобходимоДобавитьСтроку КАК НеобходимоДобавитьСтроку,
	|	ТаблицаНоменклатура.НеобходимостьВводаСерии КАК НеобходимостьВводаСерии,
	|	ТаблицаНоменклатура.ПроверятьЗаполнениеСерий КАК ПроверятьЗаполнениеСерий,
	|	ТаблицаНоменклатура.ИспользоватьПартии КАК ИспользоватьПартии,
	|	ТаблицаНоменклатура.ПроверятьЗаполнениеПартий КАК ПроверятьЗаполнениеПартий,
	|	ТаблицаНоменклатура.ЭтоНабор КАК ЭтоНабор,
	|	ЕСТЬNULL(ОписаниеНоменклатурыИС.ЕмкостьПотребительскойУпаковки, 0) КАК КоличествоВПотребительскойУпаковке,
	|	ЕСТЬNULL(ОписаниеНоменклатурыИС.ВариантЧастичногоВыбытия, ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаЧастичногоВыбытияИСМП.ПустаяСсылка)) КАК ВариантЧастичногоВыбытия,
	|	НЕ НастройкиЧастичногоВыбытияТоваровИСМП.НоменклатураЧастичногоВыбытия ЕСТЬ NULL КАК ПоштучноеВыбытие
	|ИЗ
	|	ТаблицаНоменклатура КАК ТаблицаНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиЧастичногоВыбытияТоваровИСМП КАК НастройкиЧастичногоВыбытияТоваровИСМП
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
	|			ПО НастройкиЧастичногоВыбытияТоваровИСМП.Номенклатура = ОписаниеНоменклатурыИС.Номенклатура
	|		ПО ТаблицаНоменклатура.Номенклатура = НастройкиЧастичногоВыбытияТоваровИСМП.НоменклатураЧастичногоВыбытия";
	
	Запрос.УстановитьПараметр("МассивТоваров", МассивТоваров);
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаРезультат;
	
КонецФункции

// В процедуре производится получение состава набора и заполнение
// таблицы товарами, которые входят в состав набора.
// Также необходимо заполнить в таблице все данные для товара, которые получают в
// ОбщегоНазначенияРМКПереопределяемый.ТаблицаДанныхОТоварах.
//
// Параметры:
//  ДанныеНабора - Структура - данные выбранного набора.
//  ТаблицаСоставНабора - ТаблицаЗначений - таблица, в которой находятся строки с товарами из состава набора и их данные.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура ЗаполнитьСоставНабора(ДанныеНабора, ТаблицаСоставНабора, Форма) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Процедура заполняет массив серий, исключая серии, которые уже присутствуют в РМК.
//
// Параметры:
//  Номенклатура - ОпределяемыйТип.НоменклатураРМК - товар, для которого необходимо заполнить партии.
//  МассивПартий - Массив - массив, в который необходимо добавить найденные партии.
//
Процедура ЗаполнитьСписокВыбораПартийНоменклатуры(Номенклатура, МассивПартий) Экспорт
	
	Возврат;
	
КонецПроцедуры

// В процедуре производится прикладная логика, влияющая на
// заполнение серий и партий в строке товаров.
//
// Параметры:
//  ТекущаяСтрока - ДанныеТекущейСтроки - текущая строка товаров.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура ПереопределитьПараметрыЗаполненияСерийИПартий(ТекущаяСтрока, Форма) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Возвращает признак продажи чека
//
// Параметры:
//  ЧекККМ - ОпределяемыйТип.ОпределяемыйТип.ЧекККМРМК - чек ккм
//
// Возвращаемое значение:
//  Булево - Истина, если это чек продажи
//
Функция ЭтоЧекПродажи(ЧекККМ) Экспорт
	
	Возврат ЧекККМ.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа;
	
КонецФункции

// Процедура настраивает динамический список для получения списка чеков для возврата скупки.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы выбора чеков.
//
Процедура ЗаполнитьТаблицуЧековККМНаВозвратСкупки(Форма) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Процедура настраивает элементы настроек форм подбора в настройках РМК.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы настроек РМК.
//
Процедура НастроитьЭлементыПодбораТоваров(Форма) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Метод реализующий дополнительную логику при сохранении настроек рабочего места кассира.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - ОбщаяФорма.НастройкиРабочегоМестаКассира.
//  Результат - Структура - возвращаемый параметр работы метода, ключи структуры:
//   * ВыполненоУспешно - Булево - Ложь, если сохранение настроек формы недопустимо.
//   * ТекстПредупрежденийОшибок - Строка - текст сообщения об ошибке, который будет выведен пользователю.
//
Процедура ПриСохраненииНастроекРМК(Форма, Результат) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Возвращает признак молочной продукции
//
// Параметры:
//  ОсобенностьУчета - ОпределяемыйТип.ОсобенностиУчетаНоменклатурыРМК - особенность учета
//
// Возвращаемое значение:
//  Булево - Истина, если особенность учета является молочной
//
Функция ЭтоМолочнаяПродукция(ОсобенностьУчета) Экспорт
	
	МолочнаяПродукция = Ложь;
	Если ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияБезВЕТИС
		ИЛИ ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС Тогда
			МолочнаяПродукция = Истина;
	КонецЕсли;
		
	Возврат МолочнаяПродукция;
	
КонецФункции

// Позволяет обработать событие ОбработкаОповещения для формы Обработки.РабочееМестоКассира.Формы.ФормаРМК. на сервере.
// Дополнительно см. метод ОбщегоНазначенияРМККлиентПереопределяемый.ОбработкаОповещения.
//
Процедура ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Позволяет реализовать дополнительную логику заполнения подключаемого оборудования при обновлении
//  
// Параметры:
//  СсылкаПодключаемоеОборудование - СправочникСсылка.ПодключаемоеОборудование 
//
Процедура ОбновитьСправочникПодключаемогоОборудования(СсылкаПодключаемоеОборудование) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Возвращает имя реквизита, в котором хранится код карты лояльности
//
// Возвращаемое значение:
//  Строка - наименование реквизита, в котором хранится код карты лояльности
//
Функция ИмяРеквизитаКодКартыЛольности() Экспорт
	
	Возврат "";

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИННЗаполненУКонтрагента(Контрагент)
	
	Результат = Истина;
	ДанныеКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент, "ИНН, ЮрФизЛицо");
	Если ДанныеКонтрагента.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		Если Не ЗначениеЗаполнено(ДанныеКонтрагента.ИНН) Тогда
			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура НастроитьИспользованиеРежимаСкупки(Форма)
	Форма.Элементы.НастройкаРМКИспользоватьРежимСкупки.Видимость = Ложь;
КонецПроцедуры

Процедура ОпределитьЗапускПодАдминистратором(Форма)
	
	Пользователь = Пользователи.ТекущийПользователь();
	ОткрыватьРМКПриСтарте = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
		ПланыВидовХарактеристик.ПраваПользователей.ОткрыватьРМКПриЗапускеПрограммы,
		Ложь,
		Пользователь);

	Форма.ЗапущеноПодАдминистратором = Не ОткрыватьРМКПриСтарте;
	
КонецПроцедуры

// Возвращает значение ФО ИспользоватьНовыйРМК.
// Значение по умолчанию Истина.
//
// ВозвращаемоеЗначение:
//  ИспользоватьНовыйРМК - булево - признак использования нового РМК.
//
Функция ВключеноИспользованиеНовогоРМК()
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьНовоеРМК");
	
КонецФункции

// Настройки видимости группы с шаблонами штрихкодов и заполнение значений префиксов.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - общая форма настроек РМК.
//
Процедура ЗаполнитьПрефиксыВесовогоТовара(Форма) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Настройки видимости группы синхронизация данных.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - общая форма настроек РМК.
//
Процедура НастроитьГруппуСинхронизацияДанных(Форма) Экспорт
	
	Возврат;
	
КонецПроцедуры

Процедура ПроверитьВозможностьВозвратаПоЧекуККМ(ЧекККМ, Отказ, ТекстОшибки)
	
	Таблица = ПродажиСервер.СтрокиРасхожденияПоТоварамСЧекомПродажи(ЧекККМ);
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		
		Отказ = Истина;
		ШаблонТекстаОшибки = НСтр("ru = 'Попытка вернуть
										|%1 %2
										|в количестве %4 %3.
										|
										|Было продано: %5 %3.
										|Ранее возвращено: %6 %3.'");
		
		ТекстОшибки = СтрШаблон(ШаблонТекстаОшибки,
			СтрокаТаблицы.Номенклатура,
			СтрокаТаблицы.Характеристика,
			СтрокаТаблицы.ЕдиницаИзмерения,
			СтрокаТаблицы.КоличествоВозвратаТекущего,
			СтрокаТаблицы.КоличествоПродажи,
			СтрокаТаблицы.КоличествоВозвратаПрошлого);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрограммноСоздатьРеквизитыФормы(Форма)
	
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить(Новый РеквизитФормы("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"), "Объект.Товары"));
	
	КвалификаторЧисла = Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Любой);
	МассивРеквизитов.Добавить(Новый РеквизитФормы("КодСтроки", Новый ОписаниеТипов("Число", КвалификаторЧисла), "Объект.Товары"));
	
	Форма.ИзменитьРеквизиты(МассивРеквизитов);
	
КонецПроцедуры

Процедура ЗаполнитьАналитикуХозОперации(ЧекККМ)
	
	Если ЧекККМ.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
		ЧекККМ.АналитикаХозяйственнойОперации = Справочники.АналитикаХозяйственныхОпераций.РеализацияТоваров;
	Иначе
		ЧекККМ.АналитикаХозяйственнойОперации =
			Справочники.АналитикаХозяйственныхОпераций.ПолучитьОперациюПоУмолчанию(Перечисления.ХозяйственныеОперации.ВозвратОтПокупателя);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает количество отложенных чеков. Если количество отложенных чеков = 1, то заполняет
// реквизит "Отложенный чек" ссылкой на чекККМ.
//
// Параметры:
//  Объект - ДанныеФормыКоллекция - данные объекта рабочего места кассира.
//  СистемаНалогообложения - ПеречисленияСсылка.СистемыНалогообложения - СНО, для которой нужно получить данные по товарам и оплатам.
//  ОжидаемоеКоличествоЧеков - Число - количество предполагаемых чеков для печати.
//
// ВозвращаемоеЗначение:
//  Структура - структура со свойствами "Товары", "Оплата", в которых хранятся данные для пробития чека.
//
Функция ДанныеЧекаПоСистемеНалогообложения(Форма, СистемаНалогообложения, ОжидаемоеКоличествоЧеков)
	
	Результат = Новый Структура("Товары,Оплата");
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Возврат Результат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СистемаНалогообложения) Тогда
		
		СтруктураПараметровЗаполнения = Новый Структура;
		СтруктураПараметровЗаполнения.Вставить("Магазин", Объект.ТорговыйОбъект);
		СтруктураПараметровЗаполнения.Вставить("РабочееМесто", Форма.РабочееМесто);
		СтруктураПараметровЗаполнения.Вставить("Организация", Объект.Организация);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьСкладПродажи", СтруктураПараметровЗаполнения);
		
		ОрганизацияКассыККМ = Объект.КассаККМ.Владелец;
		ОтборПоСНО = Новый Структура("СистемаНалогообложения, Организация",СистемаНалогообложения, ОрганизацияКассыККМ);
		ПокупкиСУчетомСНО = Объект.Товары.НайтиСтроки(ОтборПоСНО);
		
		СуммаПокупокПоСНО = 0;
		Для каждого СтрокаПокупок Из ПокупкиСУчетомСНО Цикл
			Если Не ЗначениеЗаполнено(СтрокаПокупок.Склад) Тогда
				ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСкладПродажиВСтрокеТЧСервер(СтрокаПокупок, СтруктураДействий, Неопределено);
			КонецЕсли;
			СуммаПокупокПоСНО = СуммаПокупокПоСНО + СтрокаПокупок.Сумма;
		КонецЦикла;
		
		ОплатаПокупокПоСНО = Новый Массив;
		
		ОплатаСпискаПокупок = Объект.Оплата;
		ОплатаПокупокПоВидамОплат = ОплатаСпискаПокупок.Выгрузить();
		
		ОсталосьРаспределить = СуммаПокупокПоСНО;
		
		ОплатаПокупокПоВидамОплат.Колонки.Добавить("Ранг",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(1,0)));
		
		ВидыОплат = Справочники.ВидыОплатЧекаККМ;
		
		Для каждого СтрокаОплаты Из ОплатаПокупокПоВидамОплат Цикл
			
			ВидОплаты = СтрокаОплаты.ВидОплаты;
			
			Если ВидОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ЗачетАванса Тогда
				СтрокаОплаты.Ранг = 0;
			ИначеЕсли ВидОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ВРассрочку Тогда
				СтрокаОплаты.Ранг = 1;
			ИначеЕсли ВидОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.БанковскийПлатеж Тогда
				СтрокаОплаты.Ранг = 2;
			ИначеЕсли ВидОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ПодарочныйСертификат Тогда
				СтрокаОплаты.Ранг = 3;
			ИначеЕсли ВидОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ВстречноеПредоставление Тогда
				СтрокаОплаты.Ранг = 4;
			ИначеЕсли ВидОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта Тогда
				СтрокаОплаты.Ранг = 5;
			ИначеЕсли ВидОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ПлатежнаяСистема Тогда
				СтрокаОплаты.Ранг = 6;
			ИначеЕсли ВидОплаты = ВидыОплат.Наличные Тогда
				СтрокаОплаты.Ранг = 7;
			Иначе
				СтрокаОплаты.Ранг = 8;
			КонецЕсли;
			
		КонецЦикла;
		
		ОплатаПокупокПоВидамОплат.Сортировать("Ранг Возр");
		
		Для каждого ОплатаСРазделениемПоВиду Из ОплатаПокупокПоВидамОплат Цикл
		
			Если ОсталосьРаспределить <= 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если ОплатаСРазделениемПоВиду.Сумма > 0 Тогда
				
				ЧастьОплаты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ОплатаСРазделениемПоВиду);
				
				Если ОплатаСРазделениемПоВиду.ВидОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта Тогда
					ЧастьСуммыОплаты = Мин(ОсталосьРаспределить, ОплатаСРазделениемПоВиду.Сумма);
				ИначеЕсли ОплатаСРазделениемПоВиду.ВидОплаты = ВидыОплат.Наличные Тогда
						ЧастьСуммыОплаты = Макс(ОсталосьРаспределить, ОплатаСРазделениемПоВиду.Сумма);
				ИначеЕсли ОплатаСРазделениемПоВиду.ВидОплаты = ВидыОплат.БанковскийПлатеж
					И ОжидаемоеКоличествоЧеков = 1 Тогда
						ЧастьСуммыОплаты = Мин(ОсталосьРаспределить, ОплатаСРазделениемПоВиду.Сумма);
				ИначеЕсли ОплатаСРазделениемПоВиду.ВидОплаты = ВидыОплат.ОплатаВрассрочку
					И ОжидаемоеКоличествоЧеков = 1 Тогда
						ЧастьСуммыОплаты = Мин(ОсталосьРаспределить, ОплатаСРазделениемПоВиду.Сумма);
				ИначеЕсли ОплатаСРазделениемПоВиду.ВидОплаты = ВидыОплат.ЗачетАванса
					И ОжидаемоеКоличествоЧеков = 1 Тогда
						ЧастьСуммыОплаты = Мин(ОсталосьРаспределить, ОплатаСРазделениемПоВиду.Сумма);
				ИначеЕсли ОплатаСРазделениемПоВиду.ВидОплаты = ВидыОплат.ОплатаПодарочнымСертификатом
					И ОжидаемоеКоличествоЧеков = 1 Тогда
						ЧастьСуммыОплаты = Мин(ОсталосьРаспределить, ОплатаСРазделениемПоВиду.Сумма);
				ИначеЕсли ОплатаСРазделениемПоВиду.ВидОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ПлатежнаяСистема Тогда
						ЧастьСуммыОплаты = Мин(ОсталосьРаспределить, ОплатаСРазделениемПоВиду.Сумма);
				ИначеЕсли ОплатаСРазделениемПоВиду.ВидОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ВстречноеПредоставление Тогда
						ЧастьСуммыОплаты = Мин(ОсталосьРаспределить, ОплатаСРазделениемПоВиду.Сумма);
				КонецЕсли;
				
				ЧастьОплаты.Сумма = ЧастьСуммыОплаты;
				ОплатаПокупокПоСНО.Добавить(ЧастьОплаты);
				ОплатаСРазделениемПоВиду.Сумма = ОплатаСРазделениемПоВиду.Сумма - ЧастьСуммыОплаты;
				ОсталосьРаспределить = ОсталосьРаспределить - ЧастьСуммыОплаты;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Форма.ЭтоЗаменаТоваров 
			И Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
				ТоварыИОплаты = Новый Структура("Товары,Оплата");

				СтруктураОтбораТовары = Новый Структура("ТоварКЗамене", Истина);
				СтруктураОтбораОплаты = Новый Структура("ВидОплаты", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОплатЧекаККМ.ВстречноеПредоставление"));
				ПокупкиСУчетомСНО = Форма.Объект.Товары.Выгрузить(СтруктураОтбораТовары);
				ОплатаПокупокПоСНО = Форма.Объект.Оплата.Выгрузить(СтруктураОтбораОплаты);
				
		КонецЕсли;
		
		Результат.Вставить("Товары",ПокупкиСУчетомСНО);
		Результат.Вставить("Оплата",ОплатаПокупокПоСНО)
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура НастроитьЗапросСписокЧеков(Форма)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДокументЧекККМ.Ссылка КАК Ссылка,
	|	ДокументЧекККМ.Номер КАК Номер,
	|	ДокументЧекККМ.Дата КАК Дата,
	|	ДокументЧекККМ.ВидОперации КАК ВидОперации,
	|	ДокументЧекККМ.СтатусЧекаККМ КАК Статус,
	|	ДокументЧекККМ.СуммаДокумента КАК СуммаДокумента
	|ИЗ
	|	Документ.ЧекККМ КАК ДокументЧекККМ
	|ГДЕ
	|	НЕ ДокументЧекККМ.ПометкаУдаления
	|	И ДокументЧекККМ.КассаККМ В (&МассивКассККМ)
	|	И ДокументЧекККМ.Магазин = &ТорговыйОбъект
	|	И ДокументЧекККМ.Организация В (&МассивОрганизаций)";
	
	Форма.ТаблицаЧековККМ.ПроизвольныйЗапрос = Истина;
	Форма.ТаблицаЧековККМ.ТекстЗапроса = ТекстЗапроса;
	
КонецПроцедуры

Процедура НастроитьГруппуШаблоныЧеков(Форма)
	
	Форма.Элементы.ШаблоныЧекаККТ.Видимость = Ложь;
	
КонецПроцедуры

Процедура ЗаполнитьТабличныеЧастиЧекККМ(Форма, Источник, ТекущийЧек)
	
	ОрганизацияЕГАИС = Справочники.КлассификаторОрганизацийЕГАИС.ОрганизацияЕГАИСПоОрганизацииИТорговомуОбъекту(
		ТекущийЧек.Организация,
		ТекущийЧек.Магазин);
	
	ДобавлятьТовары = Истина;
	Если Форма.ЭтоАванс Или Форма.ПриемАванса Тогда
		ДобавлятьТовары = Ложь;
	ИначеЕсли Форма.ЭтоВозвратАванса Тогда
		ДобавлятьТовары = Ложь;
	КонецЕсли;
	
	ОсобенностиУчетаНеИСМП = МассивОсобенностейУчетаНеИСМП();
	
	ТекущийЧек.АкцизныеМарки.Очистить();
	ТекущийЧек.СерийныеНомера.Очистить();
	ТекущийЧек.Серии.Очистить();
	ТекущийЧек.Товары.Очистить();
	
	Если ДобавлятьТовары Тогда
		
		Для Каждого СтрокаТовара Из Источник.Товары Цикл
			
			НоваяСтрокаЧека = ТекущийЧек.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаЧека, СтрокаТовара);
			
			Если ЗначениеЗаполнено(НоваяСтрокаЧека.Упаковка) Тогда
				КоэффициентУпаковки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрокаЧека.Упаковка, "Коэффициент");
				НоваяСтрокаЧека.Количество = НоваяСтрокаЧека.КоличествоУпаковок * КоэффициентУпаковки;
			КонецЕсли;
			
			НоваяСтрокаЧека.ПроцентРучнойСкидки = СтрокаТовара.ПроцентСкидкиНаценки;
			НоваяСтрокаЧека.СуммаРучнойСкидки = СтрокаТовара.СуммаСкидкиНаценки;
			
			НоваяСтрокаЧека.ПроцентАвтоматическойСкидки = СтрокаТовара.ПроцентАвтоматическойСкидки;
			НоваяСтрокаЧека.СуммаАвтоматическойСкидки = СтрокаТовара.СуммаАвтоматическойСкидки;
			
			НоваяСтрокаЧека.СуммаСкидкиОплатыБонусом = СтрокаТовара.СуммаСкидкиОплатыБонусом;
			
			НоваяСтрокаЧека.НеобходимостьВводаАкцизнойМарки = СтрокаТовара.НеобходимостьВводаКодаМаркировки;
			
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(ТекущийЧек.Товары, НоваяСтрокаЧека, "КлючСвязи");
			
			КодМарки = СтрокаТовара.КодМаркировки;
			Если НоваяСтрокаЧека.НеобходимостьВводаАкцизнойМарки И ЗначениеЗаполнено(КодМарки) Тогда
				
				СтруктураШтрихкода = ШтрихкодУпаковкиТовараПоПолномуКодуМарки(КодМарки, СтрокаТовара);
				
				КодМаркировкиНормализованный = СтруктураШтрихкода.КодМаркировкиНормализованный;
				АкцизнаяМарка = СтруктураШтрихкода.ШтрихкодУпаковки;
				
				СтрокаТовара.КодМаркировки = КодМаркировкиНормализованный;
				
				Если НЕ ЗначениеЗаполнено(НоваяСтрокаЧека.Штрихкод)
					ИЛИ ОсобенностиУчетаНеИСМП.Найти(СтрокаТовара.ОсобенностьУчета) = Неопределено Тогда
					НоваяСтрокаЧека.Штрихкод = КодМаркировкиНормализованный;
				КонецЕсли;
				
				Если НЕ ТекущийЧек.ОперацияСДенежнымиСредствами Тогда
					
					НоваяСтрокаАкцизныеМарки = ТекущийЧек.АкцизныеМарки.Добавить();
					НоваяСтрокаАкцизныеМарки.КлючСвязи = НоваяСтрокаЧека.КлючСвязи;
					НоваяСтрокаАкцизныеМарки.КодАкцизнойМарки = КодМаркировкиНормализованный;
					
					НоваяСтрокаАкцизныеМарки.АкцизнаяМарка = АкцизнаяМарка;
					НоваяСтрокаАкцизныеМарки.ШтрихкодУпаковки = АкцизнаяМарка;
					
					Если ШтрихкодированиеЕГАИС.ЭтоШтрихкодАкцизнойМарки(КодМаркировкиНормализованный) И Не ОрганизацияЕГАИС = Неопределено Тогда
						ЗаполнитьСправку2(НоваяСтрокаАкцизныеМарки, ОрганизацияЕГАИС);
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(НоваяСтрокаАкцизныеМарки, СтрокаТовара);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаТовара.НеобходимостьВводаСерии И ЗначениеЗаполнено(СтрокаТовара.Серия)
				И НЕ ТекущийЧек.ОперацияСДенежнымиСредствами Тогда
				
				Если СтрокаТовара.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
					ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(ТекущийЧек.Товары, НоваяСтрокаЧека, "КлючСвязиСерийныхНомеров");
					Если ЗначениеЗаполнено(НоваяСтрокаЧека.КлючСвязиСерийныхНомеров) Тогда
						НоваяСтрокаПС = ТекущийЧек.СерийныеНомера.Добавить();
						НоваяСтрокаПС.СерийныйНомер = СтрокаТовара.Серия;
						НоваяСтрокаПС.КлючСвязиСерийныхНомеров = НоваяСтрокаЧека.КлючСвязиСерийныхНомеров;
					КонецЕсли;
				Иначе
					НоваяСтрокаСерии = ТекущийЧек.Серии.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаСерии, СтрокаТовара);
				КонецЕсли;
				
				НоваяСтрокаЧека.СтатусУказанияСерий = 2;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекущийЧек.ЗаказПокупателя) Тогда
				НоваяСтрокаЧека.ЗаказПокупателя = ТекущийЧек.ЗаказПокупателя;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТекущийЧек.Оплата.Очистить();
	Для Каждого СтрокаОплатыРМК Из Источник.Оплата Цикл
		
		НоваяСтрокаОплатыЧекККМ = ТекущийЧек.Оплата.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаОплатыЧекККМ, СтрокаОплатыРМК);
		
		Если СтрокаОплатыРМК.ВидОплаты = Справочники.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом Тогда
			
			МассивСерийныхНомеров = МаркетинговыеАкцииСервер.СерийныеНомераПоТексту(
				СтрокаОплатыРМК.НомерСертификата,
				Новый Массив,
				СтрокаОплатыРМК.ПодарочныйСертификат);
				
			Если МассивСерийныхНомеров.Количество() > 0 Тогда
				НоваяСтрокаПогашенияПС = ТекущийЧек.ПогашениеПодарочныхСертификатов.Добавить();
				НоваяСтрокаПогашенияПС.ПодарочныйСертификат = СтрокаОплатыРМК.ПодарочныйСертификат;
				НоваяСтрокаПогашенияПС.СерийныйНомер = МассивСерийныхНомеров[0];
				НоваяСтрокаПогашенияПС.СуммаПогашенияСертификата = СтрокаОплатыРМК.Сумма;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НоваяСтрокаОплатыЧекККМ.ЭквайринговыйТерминал) Тогда
			НоваяСтрокаОплатыЧекККМ.ДанныеПереданыВБанк = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция МассивОсобенностейУчетаНеИСМП()
	
	МассивНеИСМП = Новый Массив;
	МассивНеИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ПустаяСсылка"));
	МассивНеИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.БезОсобенностейУчета"));
	МассивНеИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция"));
	
	Возврат МассивНеИСМП;
	
КонецФункции

Функция ШтрихкодУпаковкиТовараПоПолномуКодуМарки(КодМаркировки, СтруктураТовара)
	
	СимволGS1 = МенеджерОборудованияМаркировкаКлиентСервер.РазделительGS1();
	Разделитель = МенеджерОборудованияМаркировкаКлиентСервер.ЭкранированныйСимволGS1();
	КодМаркировкиОригинал = СтрЗаменить(КодМаркировки, Разделитель, СимволGS1);
	ДанныеРазбораКода = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(КодМаркировкиОригинал);
	
	Если НЕ ДанныеРазбораКода = Неопределено Тогда
		КодМаркировкиНормализованный = ДанныеРазбораКода.НормализованныйКодМаркировки;
	Иначе
		КодМаркировкиНормализованный = КодМаркировкиОригинал;
	КонецЕсли;
	
	ШтрихкодУпаковки = Справочники.ШтрихкодыУпаковокТоваров.ПолучитьПоЗначениюШтрихкода(КодМаркировкиНормализованный);
	Если ШтрихкодУпаковки = Неопределено Тогда
		
		СтруктураСоздания = Справочники.ШтрихкодыУпаковокТоваров.СтруктураСозданияШтрихкодаУпаковки();
		СтруктураСоздания.Номенклатура = СтруктураТовара.Номенклатура;
		СтруктураСоздания.Характеристика = СтруктураТовара.Характеристика;
		СтруктураСоздания.Штрихкод = КодМаркировкиНормализованный;
		
		Если НЕ ДанныеРазбораКода = Неопределено И ДанныеРазбораКода.Свойство("ВидУпаковки")
			И ДанныеРазбораКода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
			
			СтруктураСоздания.Количество = СтруктураТовара.Количество;
			СтруктураСоздания.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
			СтруктураСоздания.Упаковка = СтруктураТовара.Упаковка;
		Иначе
			СтруктураСоздания.Количество = 1;
			Если СтруктураТовара.ПоштучноеВыбытие Тогда
				СтруктураСоздания.Количество = 1;
			Иначе
				СтруктураСоздания.Количество = СтруктураТовара.Количество;
			КонецЕсли;
			СтруктураСоздания.КоличествоПотребительскихУпаковок = 1;
			СтруктураСоздания.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
		КонецЕсли;
	
		ШтрихкодУпаковки = Справочники.ШтрихкодыУпаковокТоваров.СоздатьШтрихкодУпаковки(СтруктураСоздания);
		
	Иначе
		
		КоличествоВШтрихкодеДолжноБыть = 0;
		Если НЕ ДанныеРазбораКода = Неопределено И ДанныеРазбораКода.Свойство("ВидУпаковки")
			И ДанныеРазбораКода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
			
			КоличествоВШтрихкодеДолжноБыть = СтруктураТовара.Количество;
		Иначе
			Если СтруктураТовара.ПоштучноеВыбытие Тогда
				КоличествоВШтрихкодеДолжноБыть = 1;
			Иначе
				КоличествоВШтрихкодеДолжноБыть = СтруктураТовара.Количество;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ КоличествоВШтрихкодеДолжноБыть = ШтрихкодУпаковки.Количество Тогда
			НовыеРеквизиты = Новый Структура;
			НовыеРеквизиты.Вставить("Количество", КоличествоВШтрихкодеДолжноБыть);
			Справочники.ШтрихкодыУпаковокТоваров.ИзменитьШтрихкодУпаковки(ШтрихкодУпаковки, НовыеРеквизиты);
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураШтрихкода = Новый Структура;
	СтруктураШтрихкода.Вставить("КодМаркировкиНормализованный", КодМаркировкиНормализованный);
	СтруктураШтрихкода.Вставить("ШтрихкодУпаковки", ШтрихкодУпаковки);
	
	Возврат СтруктураШтрихкода;
	
КонецФункции

Процедура ЗаполнитьСправку2(СтрокаАкцизныеМарки, ОрганизацияЕГАИС)
	
	Справка2 = Справочники.Справки2ЕГАИС.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АкцизныеМаркиЕГАИС.Справка2 КАК Справка2
	|ИЗ
	|	РегистрСведений.АкцизныеМаркиЕГАИС КАК АкцизныеМаркиЕГАИС
	|ГДЕ
	|	АкцизныеМаркиЕГАИС.ОрганизацияЕГАИС = &ОрганизацияЕГАИС
	|	И АкцизныеМаркиЕГАИС.АкцизнаяМарка = &АкцизнаяМарка
	|	И АкцизныеМаркиЕГАИС.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.ВНаличии)";
	
	Запрос.УстановитьПараметр("АкцизнаяМарка", СтрокаАкцизныеМарки.АкцизнаяМарка);
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС", ОрганизацияЕГАИС);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Справка2 = Выборка.Справка2;
	КонецЕсли;
	
	СтрокаАкцизныеМарки.Справка2 = Справка2;
	
КонецПроцедуры

Процедура ЗаполнитьТабличныеЧастиИзЧекККМ(ЧекККМ, Форма)
	
	Объект = Форма.Объект;
	СкладПродажи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТорговыйОбъект, "СкладПродажи");
	ТекущаяДата = ОбщегоНазначения.ТекущаяДатаПользователя();
	
	Если Форма.ЭтоЗаменаТоваров Тогда
		Объект.Товары.Очистить();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЧекККМТовары.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЧекККМТовары.КлючСвязи КАК КлючСвязи,
	|	ЧекККМТовары.Количество КАК Количество,
	|	ЧекККМТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ЧекККМТовары.НеобходимостьВводаАкцизнойМарки КАК НеобходимостьВводаАкцизнойМарки,
	|	ЧекККМТовары.Номенклатура КАК Номенклатура,
	|	ЧекККМТовары.Продавец КАК Продавец,
	|	ЧекККМТовары.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ЧекККМТовары.ПроцентРучнойСкидки КАК ПроцентСкидкиНаценки,
	|	ЧекККМТовары.Склад КАК Склад,
	|	ЧекККМТовары.СтавкаНДС КАК СтавкаНДС,
	|	ЧекККМТовары.Сумма КАК Сумма,
	|	ЧекККМТовары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ЧекККМТовары.СуммаНДС КАК СуммаНДС,
	|	ЧекККМТовары.СуммаРучнойСкидки КАК СуммаСкидкиНаценки,
	|	ЧекККМТовары.СуммаСкидкиОплатыБонусом КАК СуммаСкидкиОплатыБонусом,
	|	ЧекККМТовары.Упаковка КАК Упаковка,
	|	ЧекККМТовары.Характеристика КАК Характеристика,
	|	ЧекККМТовары.Цена КАК Цена,
	|	ЧекККМТовары.Штрихкод КАК Штрихкод,
	|	ЧекККМТовары.НеобходимостьВводаКодаМаркировки КАК НеобходимостьВводаКодаМаркировки,
	|	ЧекККМТовары.МРЦ КАК МРЦ,
	|	СпрНоменклатура.Весовой КАК Весовой,
	|	ЕСТЬNULL(ВидыНоменклатуры.ИспользоватьСерии, ЛОЖЬ) КАК НеобходимостьВводаСерии,
	|	ЕСТЬNULL(ВидыНоменклатуры.ИспользоватьСерии, ЛОЖЬ) КАК ПроверятьЗаполнениеСерий,
	|	ЕСТЬNULL(СпрНоменклатура.ВидАлкогольнойПродукцииЕГАИС.Маркируемый, ЛОЖЬ)
	|			И НЕ ЕСТЬNULL(ВидыНоменклатуры.ПродаетсяВРозлив, ЛОЖЬ)
	|		ИЛИ СпрНоменклатура.ОсобенностьУчета В (ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция), ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция), ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность), ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС), ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияБезВЕТИС), ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Шины), ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Фотоаппараты), ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Велосипеды), ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КреслаКоляски), ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Духи), ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АльтернативныйТабак), ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.УпакованнаяВода)) КАК Маркируемый,
	|	ЕСТЬNULL(ОписаниеНоменклатурыИС.ЕмкостьПотребительскойУпаковки, 0) КАК КоличествоВПотребительскойУпаковке,
	|	ЕСТЬNULL(ОписаниеНоменклатурыИС.ВариантЧастичногоВыбытия, ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаЧастичногоВыбытияИСМП.ПустаяСсылка)) КАК ВариантЧастичногоВыбытия,
	|	НЕ НастройкиЧастичногоВыбытияТоваровИСМП.НоменклатураЧастичногоВыбытия ЕСТЬ NULL КАК ПоштучноеВыбытие,
	|	ЧекККМТовары.Цена * ЧекККМТовары.Количество КАК СуммаБезСкидки,
	|	ЕСТЬNULL(ЧекККМАкцизныеМарки.ЧастичноеВыбытиеКоличество, 0) КАК ЧастичноеВыбытиеКоличество,
	|	ЕСТЬNULL(ЧекККМАкцизныеМарки.ЧастичноеВыбытиеВариантУчета, ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаЧастичногоВыбытияИСМП.ПустаяСсылка)) КАК ЧастичноеВыбытиеВариантУчета,
	|	ЕСТЬNULL(ЧекККМАкцизныеМарки.ЧастичноеВыбытиеНоменклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК ЧастичноеВыбытиеНоменклатура,
	|	ЕСТЬNULL(ЧекККМАкцизныеМарки.ЧастичноеВыбытиеХарактеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ЧастичноеВыбытиеХарактеристика,
	|	ЕСТЬNULL(ЧекККМСерии.Серия, ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)) КАК Серия,
	|	СпрНоменклатура.КодТРУ КАК КодТРУ
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ЧекККМТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|			ПО СпрНоменклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиЧастичногоВыбытияТоваровИСМП КАК НастройкиЧастичногоВыбытияТоваровИСМП
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
	|				ПО НастройкиЧастичногоВыбытияТоваровИСМП.Номенклатура = ОписаниеНоменклатурыИС.Номенклатура
	|			ПО СпрНоменклатура.Ссылка = НастройкиЧастичногоВыбытияТоваровИСМП.НоменклатураЧастичногоВыбытия
	|		ПО ЧекККМТовары.Номенклатура = СпрНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ.АкцизныеМарки КАК ЧекККМАкцизныеМарки
	|		ПО ЧекККМТовары.Ссылка = ЧекККМАкцизныеМарки.Ссылка
	|			И ЧекККМТовары.КлючСвязи = ЧекККМАкцизныеМарки.КлючСвязи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Серии КАК ЧекККМСерии
	|		ПО ЧекККМТовары.Ссылка = ЧекККМСерии.Ссылка
	|			И ЧекККМТовары.Номенклатура = ЧекККМСерии.Номенклатура
	|			И ЧекККМТовары.Характеристика = ЧекККМСерии.Характеристика
	|			И ЧекККМТовары.Количество = ЧекККМСерии.Количество
	|ГДЕ
	|	ЧекККМТовары.Ссылка = &ЧекККМ";
	
	Запрос.УстановитьПараметр("ЧекККМ", ЧекККМ.Ссылка);
	ТаблицаТоварыЧека = Запрос.Выполнить().Выгрузить();;
	
	Для Каждого СтрокаЧека Из ТаблицаТоварыЧека Цикл
		
		НоваяСтрокаТовары = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтрокаЧека);
		
		Если ЗначениеЗаполнено(НоваяСтрокаТовары.КодТРУ) Тогда
			НоваяСтрокаТовары.ВозможнаОплатаЭС = Истина;
		КонецЕсли;
		
		ТоварнаяГруппа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрокаТовары.Номенклатура, "ТоварнаяГруппа");
		НоваяСтрокаТовары.СистемаНалогообложения = ПодключаемоеОборудованиеРТ.ПолучитьСистемуНалогообложения(
			ТекущаяДата,
			Объект.Организация,
			Объект.ТорговыйОбъект,
			СкладПродажи,
			ТоварнаяГруппа);
			
		ЗаполнитьОрганизациюПродажи(НоваяСтрокаТовары, Форма);
		
	КонецЦикла;
	
	ОбщегоНазначенияРМК.ЗагрузитьВТаблицуЗначений(ЧекККМ.Оплата, Объект.Оплата, Истина);
	
КонецПроцедуры

Процедура НастроитьИспользованиеПродажПоЗаказам(Форма)
	
	Форма.Элементы.ПродажаПоЗаказу.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПокупателей");
	
КонецПроцедуры

Функция ДанныеПоТоварамЗаказаПокупателя(ЗаказПокупателя)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.Характеристика КАК Характеристика,
	|	ВложенныйЗапрос.КодСтроки КАК КодСтроки,
	|	СУММА(ВложенныйЗапрос.ЗаказаноОстаток) КАК ЗаказаноОстаток
	|ПОМЕСТИТЬ ТаблицаРегистра
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	|		ЗаказыПокупателейОстатки.Характеристика КАК Характеристика,
	|		ЗаказыПокупателейОстатки.КодСтроки КАК КодСтроки,
	|		ЗаказыПокупателейОстатки.ЗаказаноОстаток КАК ЗаказаноОстаток
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей.Остатки(, Заказ = &Заказ) КАК ЗаказыПокупателейОстатки
	|	ГДЕ
	|		ЗаказыПокупателейОстатки.ЗаказаноОстаток > 0) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяТовары.Характеристика КАК Характеристика,
	|	ЗаказПокупателяТовары.Количество КАК Количество,
	|	ЗаказПокупателяТовары.Упаковка КАК Упаковка,
	|	ЗаказПокупателяТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ЗаказПокупателяТовары.Цена КАК Цена,
	|	ЗаказПокупателяТовары.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ЗаказПокупателяТовары.ПроцентРучнойСкидки КАК ПроцентСкидкиНаценки,
	|	ЗаказПокупателяТовары.Сумма КАК Сумма,
	|	ЗаказПокупателяТовары.СтавкаНДС КАК СтавкаНДС,
	|	ЗаказПокупателяТовары.СуммаНДС КАК СуммаНДС,
	|	ЗаказПокупателяТовары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ЗаказПокупателяТовары.СуммаРучнойСкидки КАК СуммаСкидкиНаценки,
	|	ЗаказПокупателяТовары.КлючСвязи КАК КлючСвязи,
	|	ЗаказПокупателяТовары.КодСтроки КАК КодСтроки
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	|ГДЕ
	|	ЗаказПокупателяТовары.Ссылка = &Заказ
	|	И ЗаказПокупателяТовары.Количество > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика КАК Характеристика,
	|	ТаблицаДокумента.Количество КАК Количество,
	|	ТаблицаДокумента.Упаковка КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТаблицаДокумента.Цена КАК Цена,
	|	ТаблицаДокумента.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ТаблицаДокумента.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	ТаблицаДокумента.Сумма КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаНДС КАК СуммаНДС,
	|	ТаблицаДокумента.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ТаблицаДокумента.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
	|	ТаблицаДокумента.КлючСвязи КАК КлючСвязи,
	|	ТаблицаДокумента.КодСтроки КАК КодСтроки,
	|	ТаблицаРегистра.ЗаказаноОстаток КАК ЗаказаноОстаток
	|ПОМЕСТИТЬ ТаблицаДокументРегистр
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРегистра КАК ТаблицаРегистра
	|		ПО ТаблицаДокумента.Номенклатура = ТаблицаРегистра.Номенклатура
	|			И ТаблицаДокумента.Характеристика = ТаблицаРегистра.Характеристика
	|			И ТаблицаДокумента.КодСтроки = ТаблицаРегистра.КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументРегистр.Номенклатура КАК Номенклатура,
	|	ТаблицаДокументРегистр.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументРегистр.Количество = ТаблицаДокументРегистр.ЗаказаноОстаток
	|			ТОГДА ТаблицаДокументРегистр.Упаковка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Упаковка,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументРегистр.Количество = ТаблицаДокументРегистр.ЗаказаноОстаток
	|			ТОГДА ТаблицаДокументРегистр.КоличествоУпаковок
	|		ИНАЧЕ ТаблицаДокументРегистр.ЗаказаноОстаток
	|	КОНЕЦ КАК КоличествоУпаковок,
	|	ТаблицаДокументРегистр.Цена КАК Цена,
	|	ТаблицаДокументРегистр.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ТаблицаДокументРегистр.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	ТаблицаДокументРегистр.Сумма * ВЫБОР
	|		КОГДА ТаблицаДокументРегистр.Количество = ТаблицаДокументРегистр.ЗаказаноОстаток
	|			ТОГДА 1
	|		ИНАЧЕ ТаблицаДокументРегистр.ЗаказаноОстаток / ТаблицаДокументРегистр.Количество
	|	КОНЕЦ КАК Сумма,
	|	ТаблицаДокументРегистр.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаДокументРегистр.СуммаНДС * ВЫБОР
	|		КОГДА ТаблицаДокументРегистр.Количество = ТаблицаДокументРегистр.ЗаказаноОстаток
	|			ТОГДА 1
	|		ИНАЧЕ ТаблицаДокументРегистр.ЗаказаноОстаток / ТаблицаДокументРегистр.Количество
	|	КОНЕЦ КАК СуммаНДС,
	|	ТаблицаДокументРегистр.СуммаАвтоматическойСкидки * ВЫБОР
	|		КОГДА ТаблицаДокументРегистр.Количество = ТаблицаДокументРегистр.ЗаказаноОстаток
	|			ТОГДА 1
	|		ИНАЧЕ ТаблицаДокументРегистр.ЗаказаноОстаток / ТаблицаДокументРегистр.Количество
	|	КОНЕЦ КАК СуммаАвтоматическойСкидки,
	|	ТаблицаДокументРегистр.СуммаСкидкиНаценки * ВЫБОР
	|		КОГДА ТаблицаДокументРегистр.Количество = ТаблицаДокументРегистр.ЗаказаноОстаток
	|			ТОГДА 1
	|		ИНАЧЕ ТаблицаДокументРегистр.ЗаказаноОстаток / ТаблицаДокументРегистр.Количество
	|	КОНЕЦ КАК СуммаСкидкиНаценки,
	|	ТаблицаДокументРегистр.КлючСвязи КАК КлючСвязи,
	|	ТаблицаДокументРегистр.КодСтроки КАК КодСтроки,
	|	ТаблицаДокументРегистр.ЗаказаноОстаток КАК Количество,
	|	&Заказ КАК ЗаказПокупателя,
	|	&Склад КАК Склад,
	|	ЕСТЬNULL(ВидыНоменклатуры.ИспользоватьСерии, ЛОЖЬ) КАК НеобходимостьВводаСерии,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВидыАлкогольнойПродукции.Маркируемый, ЛОЖЬ) = ИСТИНА
	|				И НЕ ЕСТЬNULL(ВидыНоменклатуры.ПродаетсяВРозлив, ЛОЖЬ)
	|			ТОГДА ИСТИНА
	|		КОГДА НЕ СпрНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПустаяСсылка)
	|				И НЕ СпрНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БезОсобенностейУчета)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеобходимостьВводаКодаМаркировки,
	|	ТаблицаДокументРегистр.ЗаказаноОстаток * ТаблицаДокументРегистр.Цена КАК СуммаБезСкидки,
	|	ЕСТЬNULL(ОписаниеНоменклатурыИС.ЕмкостьПотребительскойУпаковки, 0) КАК КоличествоВПотребительскойУпаковке,
	|	ЕСТЬNULL(ОписаниеНоменклатурыИС.ВариантЧастичногоВыбытия, ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаЧастичногоВыбытияИСМП.ПустаяСсылка)) КАК ЧастичноеВыбытиеВариантУчета,
	|	НЕ НастройкиЧастичногоВыбытияТоваровИСМП.НоменклатураЧастичногоВыбытия ЕСТЬ NULL КАК ПоштучноеВыбытие,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументРегистр.Количество = ТаблицаДокументРегистр.ЗаказаноОстаток
	|			ТОГДА ТаблицаДокументРегистр.КоличествоУпаковок
	|		ИНАЧЕ ТаблицаДокументРегистр.ЗаказаноОстаток
	|	КОНЕЦ КАК ЧастичноеВыбытиеКоличество,
	|	ТаблицаДокументРегистр.Номенклатура КАК ЧастичноеВыбытиеНоменклатура,
	|	ТаблицаДокументРегистр.Характеристика КАК ЧастичноеВыбытиеХарактеристика
	|ИЗ
	|	ТаблицаДокументРегистр КАК ТаблицаДокументРегистр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО ТаблицаДокументРегистр.Номенклатура = СпрНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО (СпрНоменклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыАлкогольнойПродукции КАК ВидыАлкогольнойПродукции
	|		ПО (СпрНоменклатура.ВидАлкогольнойПродукцииЕГАИС = ВидыАлкогольнойПродукции.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиЧастичногоВыбытияТоваровИСМП КАК НастройкиЧастичногоВыбытияТоваровИСМП
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
	|			ПО НастройкиЧастичногоВыбытияТоваровИСМП.Номенклатура = ОписаниеНоменклатурыИС.Номенклатура
	|		ПО ТаблицаДокументРегистр.Номенклатура = НастройкиЧастичногоВыбытияТоваровИСМП.НоменклатураЧастичногоВыбытия
	|ГДЕ
	|	ТаблицаДокументРегистр.ЗаказаноОстаток > 0";
	
	Запрос.УстановитьПараметр("Заказ", ЗаказПокупателя);
	Запрос.УстановитьПараметр("Склад", ЗаказПокупателя.Склад);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;
	
КонецФункции

// Проверяет факт существования реквизита формы по имени реквизита 
//
// Параметры:
//  Форма - Форма - форма, наличие реквизита у которой предстоит проверить
//  ИмяРеквизита - Строка - имя реквизита, наличие которого у формы предстоит проверить
//
// Возвращаемое значение:
//  Результат - Булево - результат проверки наличия реквизита
//
Функция РеквизитФормыСуществует(Форма, ИмяРеквизита)

	Результат = Ложь;
	
	Если ТипЗнч(ИмяРеквизита) = Тип("Строка") 
		И НЕ ПустаяСтрока(ИмяРеквизита) Тогда
		
		ИмяРеквизита = СокрЛП(ИмяРеквизита);
		РеквизитыФормы = Форма.ПолучитьРеквизиты();
		
		Для каждого РеквизитФормы Из РеквизитыФормы Цикл
		
			Если РеквизитФормы.Имя = ИмяРеквизита Тогда
				
				Результат = Истина;
				Прервать;
				
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Процедура НастроитьГруппуЗапретыПродаж(Форма)
	
	ИспользоватьПоставляемыеОрганиченияПродаж = ОбщегоНазначенияРМК.ИспользоватьПоставляемыеОграниченияПродаж();
	Форма.Элементы.ГруппаИспользованиеЗапретовПродаж.Видимость = ИспользоватьПоставляемыеОрганиченияПродаж;
	
КонецПроцедуры

Процедура НастроитьИспользованиеБезналичныхПлатежей(Форма)
	
	Форма.Элементы.БезналичныеПлатежи.Видимость = Истина;
	
КонецПроцедуры

Процедура НастроитьЭлементыФормыПриБезналичнойОплате(Форма, Сумма)
	
	Форма.Элементы.ГруппаОплатаБезнал.Видимость = Истина;
	Форма.СуммаОплаченоБезнал = Сумма;
	
КонецПроцедуры

Процедура НастроитьИспользованиеРасчетовСКлиентами(Форма)
	
	ИспользоватьРасчетыСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетыСКлиентами");
	
	Форма.Элементы.ПриемАванса.Видимость = ИспользоватьРасчетыСКлиентами;
	Форма.Элементы.ДокументРасчета.Видимость = ИспользоватьРасчетыСКлиентами;
	Форма.Элементы.ОплатаВРассрочку.Видимость = ИспользоватьРасчетыСКлиентами;
	Форма.Элементы.Предоплата.Видимость = ИспользоватьРасчетыСКлиентами;
	
	ПрограммноСоздатьТаблицуДокументовРасчета(Форма);
	
КонецПроцедуры

Процедура ПрограммноСоздатьТаблицуДокументовРасчета(Форма)
	
	ДобавляемыеРеквизиты = Новый Массив;
	КвалификаторЧисла15_2 = Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный);
	
	ТипРеквизита = Новый Массив;
	ТипРеквизита.Добавить(Тип("ТаблицаЗначений"));
	ОписаниеТиповДляРеквизита = Новый ОписаниеТипов(ТипРеквизита);
	НовыйРеквизит = Новый РеквизитФормы("ТаблицаДокументовРасчета", ОписаниеТиповДляРеквизита);
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы("ДокументРасчета", Метаданные.ОпределяемыеТипы.ДокументРасчетаРМК.Тип, "ТаблицаДокументовРасчета");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы("Сумма", Новый ОписаниеТипов("Число", КвалификаторЧисла15_2), "ТаблицаДокументовРасчета");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы("ЭтоОплатаРассрочки", Новый ОписаниеТипов("Булево"), "ТаблицаДокументовРасчета");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы("ЭтоЗачетАванса", Новый ОписаниеТипов("Булево"), "ТаблицаДокументовРасчета");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы("Рассрочка", Новый ОписаниеТипов("Число", КвалификаторЧисла15_2), "ТаблицаДокументовРасчета");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы("Аванс", Новый ОписаниеТипов("Число", КвалификаторЧисла15_2), "ТаблицаДокументовРасчета");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы("ЗаказПокупателя", Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"), "ТаблицаДокументовРасчета");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"), "ТаблицаДокументовРасчета");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"), "ТаблицаДокументовРасчета");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
КонецПроцедуры

Процедура НастроитьИспользованиеНовогоПодбораТоваров(Форма)
	
	Возврат;
	
КонецПроцедуры

Процедура НастроитьВидимостьМенюСозданияКарты(Форма)
	
	Форма.Элементы.ГруппаЗаведениеКарты.Видимость = Истина;
	
КонецПроцедуры

Процедура ПроверитьСкладПродажи(ЧекККМ, Отказ, ТекстОшибки)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&ОрганизацияПродажи КАК ОрганизацияПродажи,
	|	ТоварыДокумента.Склад КАК Склад,
	|	ТоварыДокумента.Номенклатура КАК Номенклатура,
	|	ТоварыДокумента.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&ТоварыДокумента КАК ТоварыДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.ОрганизацияПродажи КАК ОрганизацияПродажи,
	|	ТаблицаТовары.Склад КАК Склад,
	|	ЕСТЬNULL(Склады.Организация, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК ОрганизацияСклада,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|		ПО ТаблицаТовары.Склад = Склады.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО ТаблицаТовары.Номенклатура = СпрНоменклатура.Ссылка
	|ГДЕ
	|	НЕ СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)";
	
	Запрос.УстановитьПараметр("ТоварыДокумента", ЧекККМ.Товары.Выгрузить());
	Запрос.УстановитьПараметр("ОрганизацияПродажи", ЧекККМ.Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПредставлениеТовара = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(
			Выборка.Номенклатура,
			Выборка.Характеристика);
			
		Если Выборка.Склад = Справочники.Склады.ПустаяСсылка() Тогда
			
			Отказ = Истина;
			ШаблонОшибки = НСтр("ru = 'В строке: %1
										|не заполнен склад продажи.'");
			ТекстОшибки = СтрШаблон(ШаблонОшибки, ПредставлениеТовара);
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Запись нового документа ЧекККМ перед пробитием на ККТ.'"),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстОшибки);
			
		ИначеЕсли Не Выборка.ОрганизацияПродажи = Выборка.ОрганизацияСклада Тогда
			
			Отказ = Истина;
			ШаблонОшибки = НСтр("ru = 'В строке: ""%1"" неверно заполнен склад.
										|В документе: ""%2""
										|В складе ""%3"": ""%4"".'");
			ТекстОшибки = СтрШаблон(ШаблонОшибки, ПредставлениеТовара, Выборка.ОрганизацияПродажи, Выборка.Склад, Выборка.ОрганизацияСклада);
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Запись нового документа ЧекККМ перед пробитием на ККТ.'"),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстОшибки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СвернутьСтрокиПриПечатиЧека(ДанныеДляПробитияЧека)
	
	ПозицииЧека = ДанныеДляПробитияЧека.ПозицииЧека;
	
	Если ПозицииЧека.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//Чеки с текстовыми строками не сворачиваются
	Для Каждого ПозицияЧека Из ПозицииЧека Цикл
		Если ПозицияЧека.Свойство("Текст") Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПозицийЧека = МассивВТаблицуЗначений(ПозицииЧека);
	
	ОтборДляСвертки = Новый Структура();
	ОтборДляСвертки.Вставить("СуммаСкидок", 0);
	
	МассивСтрокДляСвертки = ТаблицаПозицийЧека.НайтиСтроки(ОтборДляСвертки);
	
	Если МассивСтрокДляСвертки.Количество() > 1 Тогда
		
		КолонкиТаблицы = ТаблицаПозицийЧека.Колонки;
		МассивИменКолонокСтруктур = Новый Массив;
		
		Для Каждого СтрокаТовара Из ТаблицаПозицийЧека Цикл
			Для Каждого КолонкаТаблицы Из КолонкиТаблицы Цикл
				Если ТипЗнч(СтрокаТовара[КолонкаТаблицы.Имя]) = Тип("Структура") Тогда
					МассивИменКолонокСтруктур.Добавить(КолонкаТаблицы.Имя);
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЦикла;
		
		Для Каждого СтрокаДляСвертки Из МассивСтрокДляСвертки Цикл
			СтрокаДляСвертки.НомерСтрокиТовара = 0;
			Для Каждого КолонкаСтруктуры Из МассивИменКолонокСтруктур Цикл
				ЗначениеСтруктуры = СтрокаДляСвертки[КолонкаСтруктуры];
				СтруктураВСТрокеXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ЗначениеСтруктуры);
				СтрокаДляСвертки[КолонкаСтруктуры] = СтруктураВСТрокеXML;
			КонецЦикла;
		КонецЦикла;
		
		ИменаКолонокСуммируемых = "";
		ИменаКолонокСвертки = "";
		
		Для Каждого КолонкаТаблицы Из ТаблицаПозицийЧека.Колонки Цикл	
			Если Лев(КолонкаТаблицы.Имя, 5) = "Сумма" ИЛИ Лев(КолонкаТаблицы.Имя, 10) = "Количество" Тогда
				ИменаКолонокСуммируемых = ИменаКолонокСуммируемых + ", " + КолонкаТаблицы.Имя;
			Иначе
				ИменаКолонокСвертки = ИменаКолонокСвертки + ", " + КолонкаТаблицы.Имя;
			КонецЕсли;
		КонецЦикла;
		
		ИменаКолонокСуммируемых = Сред(ИменаКолонокСуммируемых,3);
		ИменаКолонокСвертки = Сред(ИменаКолонокСвертки,3);
		
		ТаблицаПозицийЧека.Свернуть(ИменаКолонокСвертки, ИменаКолонокСуммируемых);
		
		НомерСтрокиТовара = 0;
		Для Каждого СтрокаТовара Из ТаблицаПозицийЧека Цикл
			Если СтрокаТовара.НомерСтрокиТовара = 0 Тогда
				Для Каждого КолонкаСтруктуры Из МассивИменКолонокСтруктур Цикл
					СтруктураВСТрокеXML = СтрокаТовара[КолонкаСтруктуры];
					ЗначениеСтруктуры = ОбщегоНазначения.ЗначениеИзСтрокиXML(СтруктураВСТрокеXML);
					СтрокаТовара[КолонкаСтруктуры] = ЗначениеСтруктуры;
				КонецЦикла;
			КонецЕсли;
			НомерСтрокиТовара = НомерСтрокиТовара + 1;
			СтрокаТовара.НомерСтрокиТовара = НомерСтрокиТовара;
		КонецЦикла;
		
		ПозицииЧека = ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаПозицийЧека);
		ДанныеДляПробитияЧека.ПозицииЧека = ПозицииЧека;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает таблицу значений на основании массива структур.
// 
// Параметры:
//  МассивСтруктур - Массив - массив структур, которые будут преобразованы в таблицу значений.
//                            Свойства структуры первого элемента массива определяют состав колонок результирующей таблицы.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица значений, созданная из массива структур.
// 
Функция МассивВТаблицуЗначений(МассивСтруктур)
	
	Таблица = Новый ТаблицаЗначений;
	// Создадим колонки по первой структуре массива
	Если ТипЗнч(МассивСтруктур) = Тип("Массив")
		И МассивСтруктур.Количество() <> 0 Тогда
		ПерваяСтруктура = МассивСтруктур[0];
		Для Каждого Свойство Из ПерваяСтруктура Цикл 
			Таблица.Колонки.Добавить(Свойство.Ключ);
		КонецЦикла;
		
		Для Каждого Структура Из МассивСтруктур Цикл 
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Структура);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции

Процедура НастроитьИспользованиеОтправкиSMS(Форма)
	
	Возврат;
	
КонецПроцедуры

Функция ПолучитьПараметрыРасчетаСкидок(ФормаРМК)
	
	Объект = ФормаРМК.Объект;
	
	ОписаниеТиповЧисло = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2));
	Товары = Объект.Товары.Выгрузить();
	Товары.Колонки.Добавить("КлючСвязи", ОписаниеТиповЧисло);
	Товары.Колонки.Добавить("КлючСвязиУслугаАгента", ОписаниеТиповЧисло);
	Товары.Колонки.Добавить("ПродажаПодарка", Новый ОписаниеТипов("Булево"));
	Товары.Колонки.Добавить("ПроцентРучнойСкидки", ОписаниеТиповЧисло);
	Товары.Колонки.Добавить("СуммаРучнойСкидки", ОписаниеТиповЧисло);
	Товары.Колонки.Добавить("СуммаВсего", ОписаниеТиповЧисло);
	Товары.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	
	Индекс = 1;
	Для Каждого СтрокаТовар Из Товары Цикл
		СтрокаТовар.КлючСвязи = Индекс;
		СтрокаТовар.КлючСвязиУслугаАгента = 0;
		СтрокаТовар.ПроцентРучнойСкидки = СтрокаТовар.ПроцентСкидкиНаценки;
		СтрокаТовар.СуммаРучнойСкидки = СтрокаТовар.СуммаСкидкиНаценки;
		СтрокаТовар.СуммаВсего = СтрокаТовар.СуммаБезСкидки - СтрокаТовар.СуммаСкидкиНаценки - СтрокаТовар.СуммаАвтоматическойСкидки;
		СтрокаТовар.ДоговорКонтрагента = СтрокаТовар.Номенклатура.ДоговорКонтрагента;
		Индекс = Индекс + 1;
	КонецЦикла;

	ТекущаяДатаОбъекта = ТекущаяДатаСеанса();
	
	Если ФормаРМК.ЧекККМПродажа = Неопределено Тогда
		СкидкиНаценки = Документы.ЧекККМ.ПустаяСсылка().СкидкиНаценки;
	Иначе
		СкидкиНаценки = ФормаРМК.ЧекККМПродажа.СкидкиНаценки;
	КонецЕсли;
	
	ВходныеПараметры = Новый Структура; 
	ВходныеПараметры.Вставить("ПрименятьКОбъекту", Истина);
	ВходныеПараметры.Вставить("ТолькоПредварительныйРасчет"		, Ложь);
	
	ПараметрыСкидок = Новый Структура;
	ПараметрыСкидок.Вставить("Дата", ТекущаяДатаОбъекта);
	ПараметрыСкидок.Вставить("Ссылка", Документы.ЧекККМ.ПустаяСсылка());
	
	РеквизитыМагазина = "ИспользоватьПрименениеЦен, ФорматМагазина, СегментИсключаемойНоменклатуры, СкладПродажи, ВидМинимальныхЦенПродажи, ПравилоЦенообразования";
	МагазинСРеквизитами = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ТорговыйОбъект, РеквизитыМагазина);
	ДисконтныеКарты = МаркетинговыеАкцииСервер.ИсторияДисконтнойКарты(ТекущаяДатаОбъекта, Объект.ДисконтнаяКарта, Истина);
	
	ПараметрыРасчета = Новый Структура;
	
	ПараметрыРасчета.Вставить("ИспользоватьПрименениеЦен"		, МагазинСРеквизитами.ИспользоватьПрименениеЦен);
	ПараметрыРасчета.Вставить("ФорматМагазина"					, МагазинСРеквизитами.ФорматМагазина);
	ПараметрыРасчета.Вставить("СегментИсключаемойНоменклатуры"	, МагазинСРеквизитами.СегментИсключаемойНоменклатуры);
	ПараметрыРасчета.Вставить("СкладПродажи"					, МагазинСРеквизитами.СкладПродажи);
	ПараметрыРасчета.Вставить("ВидМинимальныхЦенПродажи"		, МагазинСРеквизитами.ВидМинимальныхЦенПродажи);
	ПараметрыРасчета.Вставить("ПравилоЦенообразования"  		, МагазинСРеквизитами.ПравилоЦенообразования);
	ПараметрыРасчета.Вставить("ДеньНедели"						, Перечисления.ДниНедели.Получить(ДеньНедели(ТекущаяДатаОбъекта) - 1));
	ПараметрыРасчета.Вставить("ВремяОбъекта"					, '00010101' + (ТекущаяДатаОбъекта - НачалоДня(ТекущаяДатаОбъекта)));
	ПараметрыРасчета.Вставить("ДисконтныеКарты"					, ДисконтныеКарты);
	ПараметрыРасчета.Вставить("ДисконтнаяКартаПредъявлена"		, ЗначениеЗаполнено(Объект.ДисконтнаяКарта));
	ПараметрыРасчета.Вставить("РабочееМесто"					, ФормаРМК.РабочееМесто);
	ПараметрыРасчета.Вставить("ПолучателиСкидок"				, СервисЛояльностиПереопределяемый.СформироватьМассивПолучателейСкидок(ДисконтныеКарты));
	ПараметрыРасчета.Вставить("СкидкиНаценки"					, Ложь);
	ПараметрыРасчета.Вставить("Оплата"							, Объект.Оплата);
	ПараметрыРасчета.Вставить("Регистратор"						, Документы.ЧекККМ.ПустаяСсылка());
	ПараметрыРасчета.Вставить("Ссылка"							, Документы.ЧекККМ.ПустаяСсылка());
	ПараметрыРасчета.Вставить("Магазин"							, Объект.ТорговыйОбъект);
	ПараметрыРасчета.Вставить("СкидкиНаценки"					, Документы.ЧекККМ.ПустаяСсылка().СкидкиНаценки);
	ПараметрыРасчета.Вставить("Товары"							, Товары);
	ПараметрыРасчета.Вставить("ЦенаВключаетНДС"				, Объект.ЦенаВключаетНДС);
	//ПараметрыРасчета.Вставить("ВалютаДокумента"					, Константы.ВалютаУчета.Получить());
	//ПараметрыРасчета.Вставить("ВалютаУправленческогоУчета"		, Константы.ВалютаУчета.Получить());
	//ПараметрыРасчета.Вставить("Пользователь"					, Неопределено);
	ПараметрыРасчета.Вставить("ТекущаяДата"						, ТекущаяДатаОбъекта);
	ПараметрыРасчета.Вставить("СписокОдноразовыхКодов"			, Новый Массив);
	//ПараметрыРасчета.Вставить("Контрагент"						, Объект.Контрагент);
	ПараметрыРасчета.Вставить("ДеньРождения"					, МаркетинговыеАкцииСервер.БлижайшийДеньРождения(ТекущаяДатаОбъекта, Объект.ДисконтнаяКарта.ВладелецКарты));
	ПараметрыРасчета.Вставить("ВходныеПараметры"				, ВходныеПараметры);
	ПараметрыРасчета.Вставить("ВидМинимальныхЦенПродажи"		, Неопределено);
	ПараметрыРасчета.Вставить("УправляемыеСкидки"				, Неопределено);
	ПараметрыРасчета.Вставить("ВосстанавливатьУправляемыеСкидки", Ложь);
	ПараметрыРасчета.Вставить("ТолькоСообщенияПослеОформления"	, Ложь);
	ПараметрыРасчета.Вставить("ТолькоПредварительныйРасчет"		, Ложь);
	ВходныеПараметры.Вставить("ПрименятьКОбъекту"				, Истина);
	ПараметрыРасчета.Вставить("РасчетПодарков"					, Ложь);
	ПараметрыРасчета.Вставить("РасчетСообщений"					, Ложь);
	ПараметрыРасчета.Вставить("УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов", Истина);
	ПараметрыРасчета.Вставить("ЕстьПодаркиВТЧ"					, Ложь);
	
	ПараметрыРасчета.Вставить("ИспользоватьПрименениеЦен"		, Ложь);
	ПараметрыРасчета.Вставить("КонтролироватьОстаткиТоваров"	, Ложь);
	ПараметрыРасчета.Вставить("СуммаДокумента"					, 0); 
	ПараметрыРасчета.Вставить("СкидкиРассчитаны"				, Ложь);
	
	Возврат ПараметрыРасчета;
	
КонецФункции

Процедура НастроитьГруппуШаблоныШтрихкодов(Форма)
	
	Форма.Элементы.ГруппаШаблоныШтрихкодов.Видимость = Ложь;
	
КонецПроцедуры

Процедура ЗаполнитьСтавкиНДСДляЧекаКоррекции(Форма)
	
	СписокВыбора = Форма.Элементы.ТоварыСтавкаНДСПереключатель.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(Перечисления.СтавкиНДС.НДС20, "20%");
	СписокВыбора.Добавить(Перечисления.СтавкиНДС.НДС10, "10%");
	СписокВыбора.Добавить(Перечисления.СтавкиНДС.НДС0, "0%");
	
КонецПроцедуры

#КонецОбласти
