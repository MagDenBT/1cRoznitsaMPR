
///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Процедура получает и заполняет рабочее место в параметр сеанса и на форме.
//
// Параметры
//  Форма - ФормаКлиентскогоПриложения.
//
Процедура ЗаполнитьРабочееМесто(Форма) Экспорт
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		Форма.РабочееМесто = МенеджерОборудованияКлиентПовтИсп.РабочееМестоКлиента();
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет таблицу оплат на форме рабочего места кассира.
//
// Параметры
//  Форма - ФормаКлиентскогоПриложения.
//
Процедура ЗаполнитьТаблицуОплат(Форма) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Возврат;
	КонецЕсли;
	
	Объект.Оплата.Очистить();
	
	Если Не Форма.СуммаОплаченоЗачетАванса = 0 Тогда
		
		МассивОплатЗачетАванса = Объект.Оплата.НайтиСтроки(
			Новый Структура("ВидОплаты",ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Справочник.ВидыОплатЧекаККМ.ЗачетАванса")));
			
		Если МассивОплатЗачетАванса.Количество() = 0 Тогда
			
			НоваяОплата = Объект.Оплата.Добавить();
			НоваяОплата.ВидОплаты = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Справочник.ВидыОплатЧекаККМ.ЗачетАванса");
			НоваяОплата.Сумма = Форма.СуммаОплаченоЗачетАванса;
			
		Иначе
			МассивОплатЗачетАванса[0].Сумма = Форма.СуммаОплаченоЗачетАванса;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Форма.СуммаОплаченоВРассрочку = 0 Тогда
		
		МассивОплатРассрочка = Объект.Оплата.НайтиСтроки(
			Новый Структура("ВидОплаты",ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Справочник.ВидыОплатЧекаККМ.ОплатаВрассрочку")));
			
		Если МассивОплатРассрочка.Количество() = 0 Тогда
			
			НоваяОплата = Объект.Оплата.Добавить();
			НоваяОплата.ВидОплаты = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Справочник.ВидыОплатЧекаККМ.ОплатаВрассрочку");
			НоваяОплата.Сумма = Форма.СуммаОплаченоВРассрочку;
			
		Иначе
			МассивОплатРассрочка[0].Сумма = Форма.СуммаОплаченоВРассрочку;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Форма.СуммаОплаченоБезнал = 0 Тогда
		
		МассивОплатБезнал = Объект.Оплата.НайтиСтроки(
			Новый Структура("ВидОплаты",ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Справочник.ВидыОплатЧекаККМ.БанковскийПлатеж")));
			
		Если МассивОплатБезнал.Количество() = 0 Тогда
			
			НоваяОплата = Объект.Оплата.Добавить();
			НоваяОплата.ВидОплаты = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Справочник.ВидыОплатЧекаККМ.БанковскийПлатеж");
			НоваяОплата.Сумма = Форма.СуммаОплаченоБезнал;
			
		Иначе
			МассивОплатБезнал[0].Сумма = Форма.СуммаОплаченоБезнал;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Форма.СуммаОплаченоНал = 0 Тогда
		
		МассивОплатНаличные = Объект.Оплата.НайтиСтроки(
			Новый Структура("ВидОплаты",ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Справочник.ВидыОплатЧекаККМ.Наличные")));
			
		Если МассивОплатНаличные.Количество() = 0 Тогда
			
			НоваяОплата = Объект.Оплата.Добавить();
			НоваяОплата.ВидОплаты = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Справочник.ВидыОплатЧекаККМ.Наличные");
			НоваяОплата.Сумма = Форма.СуммаОплаченоНал;
			
		Иначе
			МассивОплатНаличные[0].Сумма = Форма.СуммаОплаченоНал;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Форма.СуммаОплаченоСертификатами = 0 Тогда 
		
		МассивОплатПС = Объект.Оплата.НайтиСтроки(
							Новый Структура("ВидОплаты",
							ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Справочник.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом")));
		
		Если МассивОплатПС.Количество() <> 0 Тогда
			Для Каждого СтрокаОплаты Из МассивОплатПС Цикл
				Объект.Оплата.Удалить(СтрокаОплаты);		
			КонецЦикла;
		КонецЕсли;
		
		Для каждого ОплатаСертификатом Из Форма.ТаблицаПодарочныхСертификатов Цикл
			НоваяОплата = Объект.Оплата.Добавить();
			НоваяОплата.ВидОплаты = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Справочник.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом");
			НоваяОплата.Сумма = ОплатаСертификатом.СуммаСертификата;
			НоваяОплата.НомерСертификата = ОплатаСертификатом.НомерСертификата;
			НоваяОплата.ПодарочныйСертификат = ОплатаСертификатом.ПодарочныйСертификат;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не Форма.СуммаОплаченоБН = 0 Тогда
		
		ВидОплаты = Неопределено;
		
		Если Форма.ВыбранныйВидОплаты = "ОплатаКартой" Тогда
			ВидОплаты = Форма.ТаблицаПлатежныхКарт[0].ВидОплаты;
		Иначе
			Если Форма.ЭтоЗаменаТоваров ИЛИ ВидОперацииПродажа(Объект.ВидОперации) Или Не ЗначениеЗаполнено(Форма.ЧекККМПродажа) Тогда
				ИмяВидаОплаты = Форма.ВыбранныйВидОплаты;
				СтруктураПоиска = Новый Структура("ИмяКоманды", ИмяВидаОплаты);
				МассивВидовОплат = Форма.ТаблицаПлатежныхКарт.НайтиСтроки(СтруктураПоиска);
				Если МассивВидовОплат.Количество() > 0 Тогда
					ВидОплаты = МассивВидовОплат[0].ВидОплаты;
				КонецЕсли;
			Иначе
				ВидОплаты = ОбщегоНазначенияРМКРТВызовСервера.ВидОплатыПриПродаже(Форма.ЧекККМПродажа);
			КонецЕсли;
		КонецЕсли;
		
		Если ВидОплаты = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		МассивОплатПоКарте = Объект.Оплата.НайтиСтроки(Новый Структура("ВидОплаты", ВидОплаты));
		Если МассивОплатПоКарте.Количество() > 0 Тогда
			СтрокаОплатыПоКарте = МассивОплатПоКарте[0];
			СтрокаОплатыПоКарте.Сумма = Форма.СуммаОплаченоБН;
		Иначе
			СтрокаОплатыПоКарте = Объект.Оплата.Добавить();
			СтрокаОплатыПоКарте.ВидОплаты = ВидОплаты;
			СтрокаОплатыПоКарте.Сумма = Форма.СуммаОплаченоБН;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Форма.ЧекККМПродажа) Тогда
			РеквизитыОперации = ОбщегоНазначенияРМКВызовСервера.РеквизитыЭквайринговойОперацииПродажи(Форма.ЧекККМПродажа);
			ЗаполнитьЗначенияСвойств(СтрокаОплатыПоКарте, РеквизитыОперации);
		КонецЕсли;
			
	КонецЕсли;
	
	Если Не Форма.СуммаОплаченоQRКодом = 0 Тогда 
		МассивОплатПС = Объект.Оплата.НайтиСтроки(
			Новый Структура("ВидОплаты", Форма.ПлатежнаяСистема_ВидОплаты));
			
		Если МассивОплатПС.Количество() = 0 Тогда
			
			НоваяОплата = Объект.Оплата.Добавить();
			
		Иначе
			НоваяОплата = МассивОплатПС[0];
		КонецЕсли;
		
		НоваяОплата.ИдентификаторПлатежнойСистемы   = Форма.ПлатежнаяСистема_ИдентификаторПС;
		НоваяОплата.ВидОплаты 						= Форма.ПлатежнаяСистема_ВидОплаты;
		НоваяОплата.Сумма 							= Форма.СуммаОплаченоQRКодом;
		НоваяОплата.СсылочныйНомер 					= Форма.ПлатежнаяСистема_НоваяЗаявка.СсылочныйНомер;
		
	КонецЕсли;
	
	Если Не Форма.СуммаОплаченоСертификатамиНСПК = 0 Тогда
		
		ВидОплатыНСПК = Форма.ВидОплатыНСПК;
		МассивОплатНСПК = Объект.Оплата.НайтиСтроки(
			Новый Структура("ВидОплаты", ВидОплатыНСПК));
		
		Если МассивОплатНСПК.Количество() = 0 Тогда
			НоваяОплата = Объект.Оплата.Добавить();
		Иначе
			НоваяОплата = МассивОплатНСПК[0];
		КонецЕсли;
		НоваяОплата.ВидОплаты = ВидОплатыНСПК;
		НоваяОплата.Сумма = Форма.СуммаОплаченоСертификатамиНСПК;
		
	КонецЕсли;
	
	Если Не Форма.СуммаТоваровКЗамене = 0 Тогда
		
		ВидОплатыВстречноеПредоставление = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Справочник.ВидыОплатЧекаККМ.ВстречноеПредоставление");
		МассивОплатВстречноеПредоставление = Объект.Оплата.НайтиСтроки(
			Новый Структура("ВидОплаты", ВидОплатыВстречноеПредоставление));
			
		Если МассивОплатВстречноеПредоставление.Количество() = 0 Тогда
			
			НоваяОплата = Объект.Оплата.Добавить();
			НоваяОплата.ВидОплаты = ВидОплатыВстречноеПредоставление;
			НоваяОплата.Сумма = Форма.СуммаТоваровКЗамене;
			
		Иначе
			МассивОплатВстречноеПредоставление[0].Сумма = Форма.СуммаТоваровКЗамене;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура сохраняет выбранный вид платежной карты
//
// Параметры
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//  ИмяКоманды - Строка - наименование переданной команды вида оплаты.
//
Процедура ЗаполнитьВыбранныйВидОплаты(Форма, ИмяКоманды) Экспорт
	
	ЗначениеКомандыПоУмолчанию = "оплатакартой";
	ЗаполненаТаблицаПлатежныхКарт = Форма.ТаблицаПлатежныхКарт.Количество();
	
	Если НРег(ИмяКоманды) = ЗначениеКомандыПоУмолчанию
		И ЗаполненаТаблицаПлатежныхКарт
		И ЗначениеЗаполнено(Форма.ТаблицаПлатежныхКарт[0].ИмяКоманды) Тогда
			Форма.ВыбранныйВидОплаты = Форма.ТаблицаПлатежныхКарт[0].ИмяКоманды;
	Иначе
		Форма.ВыбранныйВидОплаты = ИмяКоманды;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает вид операции чека ККМ.
//
// Параметры:
//  ЭтоВозврат - Булево - признак того, что нужно вернуть вид операции возврат.
//  ЭтоСкупка - Булево - признак того, что нужно вернуть вид операции скупка.
//
// ВозвращаемоеЗначение:
//  ПеречислениеСсылка - вид операции чека ККМ (Продажа, Возврат, Скупка, ВозвратСкупки).
//
Функция ВидОперацииЧекаККМ(ЭтоВозврат = Ложь, ЭтоСкупка = Ложь) Экспорт
	
	ВидОперации = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ВидыОперацийЧекККМ.Продажа");
	Если ЭтоВозврат Тогда
		ВидОперации = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ВидыОперацийЧекККМ.Возврат");
	КонецЕсли;
	
	Возврат ВидОперации;
	
КонецФункции

// Возвращает пустую ссылку на документ чекККМ.
//
// ВозвращаемоеЗначение:
//  ДокументСсылка - пустая ссылка на документ чекККМ.
//
Функция ПустаяСсылкаНаЧекККМ() Экспорт
	
	Возврат ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Документ.ЧекККМ.ПустаяСсылка");
	
КонецФункции

// Возвращает пустую ссылку на справочник серии номенклатуры.
//
// ВозвращаемоеЗначение:
//  СправочникСсылка - пустая ссылка на справочник серии номенклатуры.
//
Функция ПустаяСсылкаНаСерию() Экспорт
	
	Возврат ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Справочник.СерииНоменклатуры.ПустаяСсылка");
	
КонецФункции

// Процедура производит закрытие смены.
//
// Параметры
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//  ЗакрытиеСменыПереопределено - Булево - признак того, что используется прикладной механизм закрытия смены. Значение по умолчанию Ложь.
//
Процедура ЗакрытьСмену(Форма, ЗакрытиеСменыПереопределено) Экспорт
	
	ЗакрытиеСменыПереопределено = Истина;
	
	КассаККМ = Форма.Объект.КассаККМ;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КассаККМ", КассаККМ);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуПроверкиНепробитыхЧеков",
		ОбщегоНазначенияРМКРТКлиент,
		ДополнительныеПараметры);
		
	ПройденаПроверкаНепробитыхЧеков = РозничныеПродажиКлиент.ПройденаПроверкаНепробитыхЧеков(КассаККМ, ОбработчикОповещения);
	
	Если ПройденаПроверкаНепробитыхЧеков Тогда
		ПродолжитьОткрытиеОбработкиЗакрытияКассовойСмены(КассаККМ);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет является ли вид оплаты наличной формой оплаты.
//
//Параметры:
//  ВидОплаты - СправочникСсылка.ВидыОплат - вид оплаты.
//
// ВозвращаемоеЗначение:
//  Булево - Истина, если переданный вид оплаты является наличной формой оплаты.
//
Функция ЭтоОплатаНаличными(ВидОплаты) Экспорт
	
	Возврат ВидОплаты = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Справочник.ВидыОплатЧекаККМ.Наличные");
	
КонецФункции

// Проверяет является ли вид оплаты безналичной формой оплаты.
//
//Параметры:
//  ВидОплаты - СправочникСсылка.ВидыОплат - вид оплаты.
//
// ВозвращаемоеЗначение:
//  Булево - Истина, если переданный вид оплаты является безналичной формой оплаты.
//
Функция ЭтоОплатаПлатежнойКартой(ВидОплаты) Экспорт
	
	Возврат ОбщегоНазначенияРМКРТВызовСервера.ЭтоОплатаПлатежнойКартой(ВидОплаты);
	
КонецФункции

// Проверяет является ли вид оплаты рассрочкой.
//
//Параметры:
//  ВидОплаты - СправочникСсылка.ВидыОплат - вид оплаты.
//
// ВозвращаемоеЗначение:
//  Булево - Истина, если переданный вид оплаты является рассрочкой.
//
Функция ЭтоОплатаВРассрочку(ВидОплаты) Экспорт
	
	Возврат ВидОплаты = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Справочник.ВидыОплатЧекаККМ.ОплатаВрассрочку");
	
КонецФункции

// Возвращает данные текущих эквайринговых терминалов.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
// ВозвращаемоеЗначение:
//  Результат - массив:
//		* ЭлементКоллекции - найденная строка данных ЭТ.
//
Функция ТекущиеЭквайринговыеТерминалы(Форма) Экспорт

	ИмяВидаОплаты = Форма.ВыбранныйВидОплаты;
	ВидОплаты = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Справочник.ВидыОплатЧекаККМ.ПустаяСсылка");
	
	ПараметрыПоискаВидаОплаты = Новый Структура;
	ПараметрыПоискаВидаОплаты.Вставить("ИмяКоманды", ИмяВидаОплаты);
	
	МассивВидовОплат = Форма.ТаблицаПлатежныхКарт.НайтиСтроки(ПараметрыПоискаВидаОплаты);
	
	Если МассивВидовОплат.Количество() > 0 Тогда
		ВидОплаты = МассивВидовОплат[0].ВидОплаты;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("ВидОплаты, Организация",
		ВидОплаты, Форма.ВыбраннаяОрганизация);
	
	ДанныеТерминалов = Форма.ТаблицаТерминалы.НайтиСтроки(СтруктураПоиска);
	Возврат ДанныеТерминалов;

КонецФункции

// Возвращает данные текущего экваайрингового терминала.
//
//Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
// ВозвращаемоеЗначение:
//  ДанныеФормыЭлементКоллекции - найденная строка данных ЭТ.
//
Функция ДанныеТекущегоЭТ(Форма) Экспорт
	
	ДанныеЭТ = Неопределено;
	
	Если ВидОперацииПродажа(Форма.Объект.ВидОперации) Тогда
		
		ВидОплаты = Неопределено;
		Если Форма.ТаблицаПлатежныхКарт.Количество() = 1 Тогда
			ВидОплаты = Форма.ТаблицаПлатежныхКарт[0].ВидОплаты;
		ИначеЕсли Форма.ТаблицаПлатежныхКарт.Количество() > 1 Тогда
			
			ПараметрыПоискаВидаОплаты = Новый Структура;
			ПараметрыПоискаВидаОплаты.Вставить("ИмяКоманды", Форма.ВыбранныйВидОплаты);
			МассивВидовОплат = Форма.ТаблицаПлатежныхКарт.НайтиСтроки(ПараметрыПоискаВидаОплаты);
			
			Если МассивВидовОплат.Количество() > 0 Тогда
				ВидОплаты = МассивВидовОплат[0].ВидОплаты;
			Иначе
				Возврат ДанныеЭТ;
			КонецЕсли;
			
		Иначе
			Возврат ДанныеЭТ;
		КонецЕсли;
		
		Если ВидОплаты = Неопределено Тогда
			Возврат ДанныеЭТ;
		КонецЕсли;
		
		ПараметрыПоискаЭТ = Новый Структура;
		ПараметрыПоискаЭТ.Вставить("ВидОплаты", ВидОплаты);
		МассивЭТ = Форма.ТаблицаТерминалы.НайтиСтроки(ПараметрыПоискаЭТ);
		Если МассивЭТ.Количество() > 0 Тогда
			ДанныеЭТ = МассивЭТ[0];
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(Форма.ЧекККМПродажа) Тогда
			ВидОплаты = ОбщегоНазначенияРМКРТВызовСервера.ВидОплатыПриПродаже(Форма.ЧекККМПродажа);
			Если Не ВидОплаты = Неопределено Тогда
				МассивЭТ = Форма.ТаблицаТерминалы.НайтиСтроки(Новый Структура("ВидОплаты", ВидОплаты));
				Если МассивЭТ.Количество() > 0 Тогда
					ДанныеЭТ = МассивЭТ[0];
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			ВидОплаты = Неопределено;
			Если Форма.ТаблицаПлатежныхКарт.Количество() = 1 Тогда
				ВидОплаты = Форма.ТаблицаПлатежныхКарт[0].ВидОплаты;
			ИначеЕсли Форма.ТаблицаПлатежныхКарт.Количество() > 1 Тогда
				ПараметрыПоискаВидаОплаты = Новый Структура;
				ПараметрыПоискаВидаОплаты.Вставить("ИмяКоманды", Форма.ВыбранныйВидОплаты);
				МассивВидовОплат = Форма.ТаблицаПлатежныхКарт.НайтиСтроки(ПараметрыПоискаВидаОплаты);
				Если МассивВидовОплат.Количество() > 0 Тогда
					ВидОплаты = МассивВидовОплат[0].ВидОплаты;
				Иначе
					Возврат ДанныеЭТ;
				КонецЕсли;
			Иначе
				Возврат ДанныеЭТ;
			КонецЕсли;
			
			Если ВидОплаты = Неопределено Тогда
				Возврат ДанныеЭТ;
			КонецЕсли;
			
			ПараметрыПоискаЭТ = Новый Структура;
			ПараметрыПоискаЭТ.Вставить("ВидОплаты", ВидОплаты);
			МассивЭТ = Форма.ТаблицаТерминалы.НайтиСтроки(ПараметрыПоискаЭТ);
			Если МассивЭТ.Количество() > 0 Тогда
				ДанныеЭТ = МассивЭТ[0];
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеЭТ;
	
КонецФункции

// Возвращает текст предупреждения о неназначенном сотруднике
//
// Возвращаемое значение:
//  Результат - Строка - текст оповещения
//
Функция ТекстОповещенияОНеназначенномКассире() Экспорт

	Возврат НСтр("ru = 'Не указано физическое лицо для текущего пользователя.
			|Пожалуйста, обратитесь к администратору.'");

КонецФункции

// Процедура производит выемку денежных средств из кассы ККМ.
//
// Параметры
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
Процедура ВыполнитьОперациюВыемка(Форма) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметрыВыемки = Новый Структура;
	ДополнительныеПараметрыВыемки.Вставить("ДоговорКонтрагента",
		ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Справочник.ДоговорыКонтрагентов.ПустаяСсылка"));
	
	ПараметрыВыполнения = ДенежныеСредстваКлиент.ПараметрыВыполненияОперацииВыемкаДенег();
	ПараметрыВыполнения.ИзымаемаяСумма = Форма.СуммаВыемка;
	ПараметрыВыполнения.КассаККМ = Объект.КассаККМ;
	ПараметрыВыполнения.УникальныйИдентификатор = Форма.УникальныйИдентификатор;
	ПараметрыВыполнения.ДополнительныеПараметры = ДополнительныеПараметрыВыемки; 
	ПараметрыВыполнения.БезВыводаСообщений = Истина;
	
	ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ВыводимаяВРМКИнформация();
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьОперациюВыемкаЗавершение", Форма);
	
	Если ОбщегоНазначенияРМКРТВызовСервера.ВозможностьВыемкиДС(ПараметрыВыполнения, ПараметрыИнформации) Тогда
		ДенежныеСредстваКлиент.НачатьВыемкуДенег(ОписаниеОповещения, ПараметрыВыполнения);
	Иначе
		
		Форма.Доступность = Истина;
		
		РезультатВыполнения = Новый Структура;
		РезультатВыполнения.Вставить("ОписаниеОшибки", ПараметрыИнформации.ТекстИнформации);
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура производит дополнительные действия при операции внесение.
//
// Параметры
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
Процедура ВыполнитьОперациюВнесение(Форма) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияРМКРТВызовСервера.ВозможностьВнесенияДенег(Объект.КассаККМ, Объект.Организация) Тогда
		
		РезультатВыполнения = Новый Структура;
		РезультатВыполнения.Вставить("ОписаниеОшибки", НСтр("ru = 'Нет документов по внесению денежных средств'"));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьОперациюВнесениеЗавершение", Форма, РезультатВыполнения);
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатВыполнения);
		
		Возврат;
		
	КонецЕсли;
	
	МассивКассККМ = Новый Массив;
	МассивКассККМ.Добавить(Объект.КассаККМ);
	
	МассивОрганизаций = Новый Массив;
	МассивОрганизаций.Добавить(Объект.Организация);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КассыККМ", МассивКассККМ);
	ПараметрыФормы.Вставить("Организации", МассивОрганизаций);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораВнесенияДенег",
		ОбщегоНазначенияРМКРТКлиент,
		ДополнительныеПараметры);
		
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВыбораВнесенияДенег",
		ПараметрыФормы, Форма.УникальныйИдентификатор,,,, ОбработчикОповещения, Режим);
	
КонецПроцедуры

// Возвращает признак будет ли использоваться стандарнтый интерфейс внесения ДС.
//
// ВозвращаемоеЗначение:
//  Булево - Истина, если будет использоваться стандартны интерфейс внесения ДС.
//
Функция ИспользоватьСтандартныйИнтерфейсВнесения() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Процедура производит выбор документа для продажи по заказу.
//
// Параметры
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
Процедура ВыбратьДокументЗаказПокупателя(Форма) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Возврат;
	КонецЕсли;
	
	МассивСтруктурОтбора = Новый Массив;
	
	СтруктураОтбора = ОбщегоНазначенияРТКлиентСервер.СтруктураОтбора();
	СтруктураОтбора.Поле = "Ссылка.Статус";
	СтруктураОтбора.Значение =  ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.СтатусыЗаказовПокупателей.Согласован");
	СтруктураОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	СтруктураОтбора.Использование = Истина;
	МассивСтруктурОтбора.Добавить(СтруктураОтбора);

	СтруктураОтбора = ОбщегоНазначенияРТКлиентСервер.СтруктураОтбора();
	СтруктураОтбора.Поле = "Магазин";
	СтруктураОтбора.Значение = Объект.ТорговыйОбъект;
	СтруктураОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	СтруктураОтбора.Использование = Истина;
	МассивСтруктурОтбора.Добавить(СтруктураОтбора);

	СтруктураОтбора = ОбщегоНазначенияРТКлиентСервер.СтруктураОтбора();
	СтруктураОтбора.Поле = "Ссылка.Организация";
	СтруктураОтбора.Значение = Объект.Организация;
	СтруктураОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	СтруктураОтбора.Использование = Истина;
	МассивСтруктурОтбора.Добавить(СтруктураОтбора);

	СтруктураОтбора = ОбщегоНазначенияРТКлиентСервер.СтруктураОтбора();
	СтруктураОтбора.Поле = "Ссылка.Проведен";
	СтруктураОтбора.Значение = Истина;
	СтруктураОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	СтруктураОтбора.Использование = Истина;
	МассивСтруктурОтбора.Добавить(СтруктураОтбора);

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МассивСтруктурОтбора", МассивСтруктурОтбора);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораЗаказаПокупателя", Форма);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВыбораЗаказаПокупателя",
		ПараметрыФормы,
		Форма.УникальныйИдентификатор,,,,
		ОбработчикОповещения,
		Режим);
	
	
КонецПроцедуры

// Процедура производит выбор документа безналичной оплаты.
//
// Параметры
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
Процедура ВыбратьДокументБезналичнойОплаты(Форма) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Возврат;
	КонецЕсли;
	
	МассивОрганизаций = Новый Массив;
	МассивОрганизаций.Добавить(Объект.Организация);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыФормы.Вставить("Магазин", Объект.ТорговыйОбъект);
	ПараметрыФормы.Вставить("МассивОрганизаций", МассивОрганизаций);
	ПараметрыФормы.Вставить("ЗаказПокупателя", Объект.ЗаказПокупателя);
	ПараметрыФормы.Вставить("ЭтоБезналичнаяОплата", Истина);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВыборДокументаБезналичнойОплаты", Форма);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВыбораДокументаРасчета",
		ПараметрыФормы,
		Форма.УникальныйИдентификатор,,,,
		ОбработчикОповещения,
		Режим);
	
КонецПроцедуры

// Процедура выполняет допоплнительные действия после того, как прошла оплата по карте.
//
// Параметры
//  Форма - ФормаКлиентскогоПриложения.
//
Процедура ДозаполнитьДанныеПослеОплатыПоКарте(Форма) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Процедура производит выбор документа расчета.
//
// Параметры
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
Процедура ВыбратьДокументРасчета(Форма) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Возврат;
	КонецЕсли;
	
	МассивОрганизаций = Новый Массив;
	МассивОрганизаций.Добавить(Объект.Организация);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыФормы.Вставить("Магазин", Объект.ТорговыйОбъект);
	ПараметрыФормы.Вставить("МассивОрганизаций", МассивОрганизаций);
	ПараметрыФормы.Вставить("ЗаказПокупателя", Объект.ЗаказПокупателя);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВыборДокументаРасчета", Форма);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВыбораДокументаРасчета",
		ПараметрыФормы,
		Форма.УникальныйИдентификатор,,,,
		ОбработчикОповещения,
		Режим);
	
КонецПроцедуры

// Процедура формирует и устанавливает заголовок программы.
//
// Параметры
//  ТекстЗаголовка - Строка - текст заголовка программы.
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
Процедура СформироватьЗаголовокПрограммы(ТекстЗаголовка, Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Если Объект.ВидОперации = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
		Если Объект.ОперацияСДенежнымиСредствами Тогда
			ТекстЗаголовка = НСтр("ru = 'Возврат денежных средств без передачи товаров'");
		Иначе
			ТекстЗаголовка = НСтр("ru = 'Возврат'") 
		КонецЕсли;
	Иначе
		Если Объект.ОперацияСДенежнымиСредствами Тогда
			ТекстЗаголовка = НСтр("ru = 'Прием денежных средств без передачи товаров'");
		Иначе
			ТекстЗаголовка = НСтр("ru = 'Продажа'");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ЗаказПокупателя) Тогда
		
		ПредставлениеЗаказа = Строка(Объект.ЗаказПокупателя);
		ПредставлениеЗаказа = СтрЗаменить(ПредставлениеЗаказа, "Заказ", "заказу");
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru = ' по '") + ПредставлениеЗаказа;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.ДокументРасчета) И Форма.ЭтоЗачетАванса Тогда
		
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru = ' Зачет аванса '") +
			Формат(Форма.СуммаОстаткаДокументаРасчета, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧРГ=' '; ЧГ=3,0");
		
	ИначеЕсли ЗначениеЗаполнено(Объект.ДокументРасчета) И Форма.ЭтоОплатаРассрочки Тогда
		
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru = ' Остаток рассрочки '") +
			Формат(Форма.СуммаОстаткаДокументаРасчета, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧРГ=' '; ЧГ=3,0");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Кассир) Тогда
		ТекстЗаголовка = ТекстЗаголовка + " - "+ Строка(Объект.Кассир);
	КонецЕсли;
	
	Если Форма.ЗапущеноПодАдминистратором Тогда
		Форма.Заголовок = ТекстЗаголовка;
	Иначе
		КлиентскоеПриложение.УстановитьЗаголовок(ТекстЗаголовка);
	КонецЕсли;
	
КонецПроцедуры

// Процедура открывает форму подбора товаров в рабочем месте кассира.
//
// Параметры
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
Процедура ОткрытьФормуПодбораТоваров(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Магазин", Объект.ТорговыйОбъект);
	ПараметрыОткрытия.Вставить("ЗакрыватьПодборПриВыбореТовара", Форма.ЗакрыватьПодборПриВыбореТовара);
	
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаПодборТовара", ПараметрыОткрытия, Форма);
	
КонецПроцедуры

// Процедура анализирует данные выбранные пользователем и дозаполняет при необходимости.
// В массив данных необходимо добавить выбранные значения из формы подбора. Т.к возможна
// ситуация, когда в форме подбора реализован множественный выбор строк.
//
// Параметры
//  ДанныеВыбора - Структура - выбранные данные в форме ручного подбора.
//                 Обязательно должна содержать ключи Номенклатура, Цена.
//                 Опционально - Характеристика, Упаковка.
//  МассивДанных - Массив - массив, в который нужно добавить выбранные данные.
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
Процедура ДозаполнитьДанныеРучногоВыбора(ДанныеВыбора, МассивДанных, Форма) Экспорт
	
	СтруктураРучногоВыбора = Новый Структура;
	СтруктураРучногоВыбора.Вставить("Номенклатура");
	СтруктураРучногоВыбора.Вставить("Цена");
	
	Если ТипЗнч(ДанныеВыбора) = Тип("Структура") Тогда
		Если ДанныеВыбора.Свойство("ИмяДействия") Тогда
			Если ДанныеВыбора.ИмяДействия = НСтр("ru = 'Подбор номенклатуры'") Тогда
				
				Если ДанныеВыбора.Свойство("Характеристика") Тогда
					СтруктураРучногоВыбора.Вставить("Характеристика");
				КонецЕсли;
				Если ДанныеВыбора.Свойство("Упаковка") Тогда
					СтруктураРучногоВыбора.Вставить("Упаковка");
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(СтруктураРучногоВыбора, ДанныеВыбора);
				
				Магазин = Форма.Объект.ТорговыйОбъект;
				Цена = ОбщегоНазначенияРМКРТВызовСервера.ЦенаПродажи(Магазин, СтруктураРучногоВыбора);
				
				СтруктураРучногоВыбора.Вставить("Цена", Цена);
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	МассивДанных.Добавить(СтруктураРучногоВыбора);
	
КонецПроцедуры

// Возвращает признак использования в конфигурации внешнего события при получении данных с торгового оборудования.
//
// ВозвращаемоеЗначение:
//  Булево - Истина, если будет использоваться внешнее событие.
//
Функция ИспользоватьВнешнееСобытие() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает значение нужно ли локально создавать карту лояльности.
//
// ВозвращаемоеЗначение:
//  Булево - Истина, если используется локальное создание карт лояльности.
//
Функция СоздаватьЛокальноКартуЛояльности() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает признак нужно ли запрашивает данные сертификата через сервис лояльности.
//
// ВозвращаемоеЗначение:
//  Булево - Истина, если требуется запрос через сервис лояльности.
//
Функция НуженЗапросСертификата() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Возвращает признак нужно ли запрашивает данные бонусов через сервис лояльности.
//
// ВозвращаемоеЗначение:
//  Булево - Истина, если требуется запрос через сервис лояльности.
//
Функция НуженЗапросБонусов() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Возвращает признак является ли переданное значение документом безналичной оплаты.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - ссылка на документ.
//
// ВозвращаемоеЗначение:
//  Булево - Истина, если документ является.
//
Функция ЭтоДокументБезналичнойОплаты(ДокументСсылка) Экспорт
	
	Возврат ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РегистрацияБезналичнойОплаты");
	
КонецФункции

// Процедура заполняет массив особенностями учета номенклатуры, для которых необходима проверка возраста.
//
// Параметры:
//  МассивДанных - Массив - массив, который нужно заполнить.
//
Процедура ЗаполнитьМассивДляПроверкиВозраста(МассивДанных) Экспорт
	
	МассивДанных.Добавить(
		ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция"));
	МассивДанных.Добавить(
		ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция"));
	МассивДанных.Добавить(
		ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ОсобенностиУчетаНоменклатуры.АльтернативныйТабак"));
	
КонецПроцедуры

// Возвращает пустую ссылку на особенность учета номенклатуры.
//
// ВозвращаемоеЗначение:
//  ОпределяемыйТип.ОсобенностиУчетаНоменклатурыРМК - пустая ссылка на особенность учета номенклатуры.
//
Функция ПустаяСсылкаНаОсобенностьУчетаНоменклатуры() Экспорт
	
	Возврат ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ОсобенностиУчетаНоменклатуры.ПустаяСсылка");
	
КонецФункции

// Возвращает пустую ссылку на вид номенклатуры.
//
// ВозвращаемоеЗначение:
//  ОпределяемыйТип.ВидНоменклатурыРМК - пустая ссылка на вид номенклатуры.
//
Функция ПустаяСсылкаНаВидНоменклатуры() Экспорт
	
	Возврат ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Справочник.ВидыНоменклатуры.ПустаяСсылка");
	
КонецФункции

// Возвращает ссылку на особенность учета номенклатуры алкоголь.
//
// ВозвращаемоеЗначение:
//  ОпределяемыйТип.ОсобенностиУчетаНоменклатурыРМК - ссылка на особенность учета номенклатуры алкоголь.
//
Функция ОсобенностьУчетаАлкоголь() Экспорт
	
	Возврат ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция");
	
КонецФункции

// Возвращает ссылку на особенность учета номенклатуры табак.
//
// ВозвращаемоеЗначение:
//  ОпределяемыйТип.ОсобенностиУчетаНоменклатурыРМК - ссылка на особенность учета номенклатуры табак.
//
Функция ОсобенностьУчетаТабак() Экспорт
	
	Возврат ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция");
	
КонецФункции

// Возвращает ссылку на особенность учета номенклатуры алкоголь.
//
// ВозвращаемоеЗначение:
//  ОпределяемыйТип.ОсобенностиУчетаНоменклатурыРМК - ссылка на особенность учета номенклатуры ГИСМ.
//
Функция ОсобенностьУчетаГИСМ() Экспорт
	
	Возврат ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ОсобенностиУчетаНоменклатуры.ПродукцияМаркируемаяДляГИСМ");
	
КонецФункции

// Возвращает ссылку на тип номенклатуры подарочный сертификат.
//
// ВозвращаемоеЗначение:
//  ПеречислениеСсылка.ТипыНоменклатуры - ссылка на тип номенклатуры подарочный сертификат.
//
Функция ТипНоменклатурыПодарочныйСертификат() Экспорт
	
	Возврат ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат");
	
КонецФункции

// Процедура производит обработку выбранного значения при подборе
// номенклатуры в таблицу быстрых товаров.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма настроек рабочего места кассира.
//  ВыбранноеЗначение - Структура - данные для обработки.
//  СтандартнаяОбработка - Булево - признак использования стандартной обработки.
//
Процедура ОбработатьВыбранноеЗначениеБыстрыхТоваров(Форма, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Заполняет параметры выбора для отбора характеристик по владельцу.
//
// Параметры:
//  ПараметрыВыбора - Структура - параметры для отбора характеристик.
//  Номенклатура - ОпределяемыйТип.НоменклатураРМК - владелец характеристик.
//  СтандартнаяОбработка - Булево - признак использования стандартной обработки.
//
Процедура ЗаполнитьПараметрыВыбораХарактеристик(ПараметрыВыбора, Номенклатура, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ПараметрыВыбора.Вставить("Номенклатура", Номенклатура);
	
КонецПроцедуры

// Процедура производит действия после открытия чека в очереди.
//
// Параметры:
//  ПараметрыВыполнения - Структура - параметры пробития чека на ККТ.
//  ДополнительныеПараметры - Структура - дополнительные параметры процедуры.
//
Процедура ПослеОткрытияЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ШапкаЧека = ПараметрыВыполнения.ВходныеПараметры;
	
	НомерСмены = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыВыполнения.НомерСмены);
	
	Если НомерСмены <> 0 Тогда
		ШапкаЧека.НомерСменыККТ = НомерСмены;
	КонецЕсли;
	
	НомерЧека = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыВыполнения.НомерЧека);
	
	Если НомерЧека <> 0 Тогда
		ШапкаЧека.НомерЧекаККТ = НомерЧека;
	КонецЕсли;
	
	Если ОбщегоНазначенияРМККлиентСервер.ЕстьСвойство(ПараметрыВыполнения, "ЗаводскойНомерФН")
		И ЗначениеЗаполнено(ПараметрыВыполнения.ЗаводскойНомерФН) Тогда
		ШапкаЧека.ЗаводскойНомерФН = ПараметрыВыполнения.ЗаводскойНомерФН;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ЕстьАлкогольнаяПродукцияЕГАИС") 
		И ДополнительныеПараметры.ЕстьАлкогольнаяПродукцияЕГАИС Тогда
		ПараметрыОперации = Новый Структура();
		ПараметрыОперации.Вставить("НомерСмены", ШапкаЧека.НомерСменыККТ);
		ПараметрыОперации.Вставить("НомерЧека", ШапкаЧека.НомерЧекаККТ);
		ПараметрыОперации.Вставить("СерийныйНомер", ШапкаЧека.ЗаводскойНомерФН);
		
		ИнтеграцияЕГАИСКлиент.ПередатьНемедленно(
		ШапкаЧека.ДокументОснование,
		ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(
		"Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные"),
		ПараметрыОперации,
		Новый ОписаниеОповещения("ПослеПередачиЧекаЕГАИС", МенеджерОборудованияРМККлиент, ПараметрыВыполнения));
		
		ПараметрыВыполнения.Вставить("ДанныеОтправленыВЕГАИС", Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура производит действия после ошибки печати чека в очереди.
//
// Параметры:
//  ПараметрыВыполнения - Структура - параметры пробития чека на ККТ.
//  ДополнительныеПараметры - Структура - дополнительные параметры процедуры.
//
Процедура ПослеОшибкиПечатиЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Свойство("ЕстьАлкогольнаяПродукцияЕГАИС") 
		И ДополнительныеПараметры.ЕстьАлкогольнаяПродукцияЕГАИС Тогда
		
		НомерСмены = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыВыполнения.НомерСмены);
		Если НомерСмены = 0 Тогда
			НомерСмены = 1;
		КонецЕсли;
		
		НомерЧека = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыВыполнения.НомерЧека);
		
		Если НомерЧека = 0 Тогда
			НомерЧека = 1;
		КонецЕсли;
		
		ПараметрыОперации = Новый Структура();
		ПараметрыОперации.Вставить("НомерСмены", НомерСмены);
		ПараметрыОперации.Вставить("НомерЧека", НомерЧека + 1000000);
		ПараметрыОперации.Вставить("СерийныйНомер", НСтр("ru = ''"));
		
		Если ОбщегоНазначенияРМККлиентСервер.ЕстьСвойство(ПараметрыВыполнения, "ЗаводскойНомерФН")
			И ЗначениеЗаполнено(ПараметрыВыполнения.ЗаводскойНомерФН) Тогда
			ПараметрыОперации.СерийныйНомер = ПараметрыВыполнения.ЗаводскойНомерФН;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыОперации.СерийныйНомер) Тогда
			ПараметрыОперации.СерийныйНомер = НСтр("ru = '1'");
		КонецЕсли;
		
		ДанныеДляВыполненияОбменаНаКлиенте = ИнтеграцияЕГАИСВызовСервера.ПодготовитьКПередаче(
			ПараметрыВыполнения.ВходныеПараметры.ДокументОснование,
			ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию"),
			ПараметрыОперации,
			Истина);
		
		ИнтеграцияЕГАИССлужебныйКлиент.ОбработатьОчередьПередачиДанных(
		Новый ОписаниеОповещения("ПриОтменеОперации", ИнтеграцияЕГАИСРТКлиент, ПараметрыВыполнения.ВходныеПараметры.ДокументОснование),
		ДанныеДляВыполненияОбменаНаКлиенте);
		
	КонецЕсли;
	
КонецПроцедуры

// Переопределяет доступное ККТ для фискализации чека
// Параметры:
//  РеквизитыЧека - Структура - реквизиты фискального чека
//  СписокУстройств - Массив - список доступных ККТ для фискализации
//  ИдентификаторУстройстваККТ - СправочникСсылка.ПодключаемоеОборудование - выбранное ККТ для фискализации
//  СтандартнаяОбработка - Булево - выполнение стандартной обработки
//
Процедура ДоступноеККТДляФискализации(РеквизитыЧека, СписокУстройств, ИдентификаторУстройстваККТ, СтандартнаяОбработка = Истина) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Перечень особенностей учета, поддерживающих возврат товаров без марок
//
// Возвращаемое значение:
//   Результат - Массив из ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры
//
Функция ОсобенностиУчетаДопускающиеВозвратБезМарки() Экспорт

	Результат = Новый Массив();
	Результат.Добавить(
		ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция"));
		
	Возврат Результат;

КонецФункции

// Возвращает признак того, является ли операция продажей.
//
// Параметры:
//  ВидОперации - ПеречислениеСсылка - текущий вид операции.
//
// ВозвращаемоеЗначение:
//  Булево - Истина, если текущий вид операции продажа.
//
Функция ВидОперацииПродажа(ВидОперации) Экспорт
	
	Возврат ВидОперации = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ВидыОперацийЧекККМ.Продажа");
	
КонецФункции

// Возвращает признак необходимости заполнения контрагента при операциях предоплаты и зачете авансов.
//
// ВозвращаемоеЗначение:
//  Булево - Истина, если необходимо запретить операции без контрагента.
//
Функция ЗапрещенаПредоплатаБезКонтрагента() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Возвращает признак того, является ли операция возвратом продажи.
//
// Параметры:
//  ВидОперации - ПеречислениеСсылка - текущий вид операции.
//
// ВозвращаемоеЗначение:
//  Булево - Истина, если текущий вид операции возврат продажи.
//
Функция ВидОперацииВозвратПродажи(ВидОперации) Экспорт
	
	Возврат ВидОперации = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ВидыОперацийЧекККМ.Возврат");
	
КонецФункции

// Возвращает признак того, является ли операция скупкой.
//
// Параметры:
//  ВидОперации - ПеречислениеСсылка - текущий вид операции.
//
// ВозвращаемоеЗначение:
//  Булево - Истина, если текущий вид операции скупка.
//
Функция ВидОперацииСкупка(ВидОперации) Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Возвращает признак того, является ли операция возвратом скупки.
//
// Параметры:
//  ВидОперации - ПеречислениеСсылка - текущий вид операции.
//
// ВозвращаемоеЗначение:
//  Булево - Истина, если текущий вид операции возврат скупки.
//
Функция ВидОперацииВозвратСкупки(ВидОперации) Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Открывает форму помощника настройки обмена 1С:РМК с другими системами.
//
Процедура ОткрытьПомощникНастройкиОбмена() Экспорт
	
	Возврат;
	
КонецПроцедуры

// Процедура выполняет дополнительные действия при открытии каталога товаров.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
Процедура ПриОткрытииКаталогаТоваров(Форма) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Проверяет является ли вид оплаты оплатой через зачет аванса.
//
// Параметры:
//  ВидОплаты - СправочникСсылка.ВидыОплат - вид оплаты.
//
// Возвращаемое значение:
//  Булево - Истина, если переданный вид оплаты является оплатой через зачет аванса.
//
Функция ЭтоОплатаЗачетомАванса(ВидОплаты) Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Проверяет является ли вид оплаты оплатой безналом.
//
// Параметры:
//  ВидОплаты - СправочникСсылка.ВидыОплат - вид оплаты.
//
// Возвращаемое значение:
//  Булево - Истина, если переданный вид оплаты является оплатой безналом.
//
Функция ЭтоОплатаБезналом(ВидОплаты) Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Проверяет является ли вид оплаты встречным предоставлением.
//
// Параметры:
//  ВидОплаты - СправочникСсылка.ВидыОплат - вид оплаты.
//
// Возвращаемое значение:
//  Булево - Истина, если переданный вид оплаты является наличной формой оплаты.
//
Функция ЭтоОплатаВстречнымПредоставлением(ВидОплаты) Экспорт
	Возврат ВидОплаты = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Справочник.ВидыОплатЧекаККМ.ВстречноеПредоставление");
КонецФункции

// Возвращает вид оплаты "Платежная карта" с привязкой к платежной системе "Сертификат НСПК".
//
Функция ВидОплатыПлатежнаяКартаНСПК() Экспорт
	
	Возврат ЭлектронныеСертификатыНСПКРТ.ВидОплатыПлатежнаяКартаНСПК();
	
КонецФункции

// Возвращает пустую ссылку на справочник партий номенклатуры.
//
// ВозвращаемоеЗначение:
//  СправочникСсылка - пустая ссылка на справочник партий номенклатуры.
//
Функция ПустаяСсылкаНаПартию() Экспорт
	
	Возврат "";
	
КонецФункции

// Метод реализует собственную логику в конфигурации потребителе по созданию документов списания алкогольной продукции.
//
Процедура СписатьАлкогольнуюПродукцию(Форма) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Определяет необходимость дополнительного подтверждения пользователем ввода алкогольной марки.
// 
// Возвращаемое значение:
//  Булево - если Истина, то марка безусловно добавляется в чек. Если Ложь, то после ввода марки алкогольной продукции
//           пользователю будет задан вопрос на подтверждение ее добавления.
//
Функция ДобавлятьМаркуАлкоголяБезПодтверждения() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Открывает форму опроса владельца карты.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
Процедура ПровестиОпросВладельцаКарты(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	ДатаСобытия = ОбщегоНазначенияКлиент.ДатаСеанса();
	Карта = Объект.ДисконтнаяКарта;
	НуженОпрос = ИнформационныеКартыВызовСервера.НеобходимостьОпросаВладельца(Карта, ДатаСобытия);
	
	Если НуженОпрос Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Карта", Карта);
		
		ОповещениеОЗакрытииФормыОпроса =
			Новый ОписаниеОповещения("ЗавершитьОпросПоДисконтнойКарте", Форма);
		
		ОткрытьФорму("Справочник.ИнформационныеКарты.Форма.ФормаОпросаПоДисконтнойКарте", ПараметрыФормы, , , , ,ОповещениеОЗакрытииФормыОпроса);
		
	КонецЕсли;
	
КонецПроцедуры

// Метод для обработки событий элементов формы добавленных программным способом.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - ОбщаяФорма.НастройкиРабочегоМестаКассира.
//  Элемент - ПолеФормы - Имя элемента.
//
Процедура ПроизвольнаяНастройкаПриИзменении(Форма, Элемент) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Стандартный обработчик события формы см. вызов из Обработки.РабочееМестоКассира.Формы.ФормаРМК
// с возможностью вернуть во входящий параметр ОбработатьОповещениеНаСервере значение Истина, если
// далее требуется обработать событие на сервере.
// Дополнительно см. метод ОбщегоНазначенияРМКПереопределяемый.ОбработкаОповещения.
//
Процедура ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник, ОбработатьОповещениеНаСервере) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Проверяет данные дисконтной карты на ошибки.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
// Возвращаемое значение:
//  Булево - Истина, если есть ошибки заполнения данных дисконтной карты.
//
Функция ЕстьОшибкиЗаполненияДанныхДисконтнойКарты(Форма) Экспорт
	
	ОшибкаЗаполнения	= Ложь;
	ТекстПояснения		= "";
	ИменаНезаполненныхПолей = НСтр("ru = ''");
	
	Если НЕ ЗначениеЗаполнено(Форма.НоваяКартаНомер) Тогда
		ИменаНезаполненныхПолей = НСтр(СтрШаблон("ru = '%1""Код карты"" %2'", ИменаНезаполненныхПолей, Символы.ПС));
	Иначе
		
		Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЛатиницаВСтроке(Форма.НоваяКартаНомер, Ложь, "1234567890") Тогда
			ТекстПояснения = ТекстПояснения
				+ НСтр("ru = 'Доступные символы поля ""Код карты"" - цифры и латинские буквы'") + Символы.ПС;
		КонецЕсли;
			
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Форма.НоваяКартаТелефон) Тогда
		ИменаНезаполненныхПолей = НСтр(СтрШаблон("ru = '%1""Телефон"" %2'", ИменаНезаполненныхПолей, Символы.ПС));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Форма.НоваяКартаФИО) Тогда
		ИменаНезаполненныхПолей = НСтр(СтрШаблон("ru = '%1""Имя и фамилия"" %2'", ИменаНезаполненныхПолей, Символы.ПС));
	КонецЕсли;
	
	Если НЕ (ПустаяСтрока(ТекстПояснения) И ПустаяСтрока(ИменаНезаполненныхПолей)) Тогда
		
		Если НЕ ПустаяСтрока(ИменаНезаполненныхПолей) Тогда
			
			ТекстПояснения = НСтр(СтрШаблон("ru = 'Пожалуйста, заполните следующие поля: %1%2'", Символы.ПС,
				ИменаНезаполненныхПолей));
			
		КонецЕсли;
		
		ПоказатьПредупреждение(,ТекстПояснения,, НСтр("ru = 'Не удалось создать новую карту'"));
		ОшибкаЗаполнения = Истина;
		
	КонецЕсли;
	
	Если НЕ ОшибкаЗаполнения Тогда
		
		НомерТелефонаНовогоКлиента = ОбщегоНазначенияРМККлиентСервер.ПодготовитьНомерТелефона(Форма.НоваяКартаТелефон);
		
		НомерТелефонаВведенКорректно = ЗначениеЗаполнено(НомерТелефонаНовогоКлиента);
		АдресЭлектроннойПочтыВведенКорректно =
			ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(Форма.НоваяКартаПочта);
		
		Если НЕ АдресЭлектроннойПочтыВведенКорректно Тогда
			Форма.НоваяКартаПочта = НСтр("ru = ''");
		КонецЕсли;
		
		Форма.НоваяКартаТелефон = ?(НомерТелефонаВведенКорректно,
			СтрШаблон(НСтр("ru = '+%1'"), НомерТелефонаНовогоКлиента), НСтр("ru = ''"));
				
		Если НЕ (НомерТелефонаВведенКорректно И АдресЭлектроннойПочтыВведенКорректно) Тогда
			
			ЗаголовокПредупреждения = НСтр("ru = 'Создание новой карты лояльности'");
			ТекстПредупреждения =
				НСтр("ru = 'Неверно указан номер телефона и/или email в данным клиента. Пожалуйста, введите корректные данные.'");
			ПоказатьПредупреждение(,ТекстПредупреждения,,ЗаголовокПредупреждения);
			ОшибкаЗаполнения = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОшибкаЗаполнения;
	
КонецФункции

// Проверяет корректность заполнения оплат перед пробитием чека
//
// Параметры:
//  ОплатаЗаполненаВерно - Булево - признак верно заполненной оплаты
//  СтруктураОшибки - Структура - текст заголовка и ошибки.
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
Процедура ПроверитьЗаполнениеОплатПередПробитиемЧека(ОплатаЗаполненаВерно, СтруктураОшибки, Форма) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Настраивает элементы формы настроек РМК по разделу SMS подтверждение
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма настроек РМК.
//  СтандартнаяОбработка - Булево - признак использования стандартной обработки.
//
Процедура НастроитьЭлементыSMSПодтвержденияНаФормеНастроек(Форма, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ИспользоватьШаблоныСообщений = Форма.ИспользоватьШаблоныСообщений;
	Элементы = Форма.Элементы;
	НастройкаРМК = Форма.НастройкаРМК;
	
	Если НЕ ИспользоватьШаблоныСообщений Тогда
		НастройкаРМК.ОтправлятьSMSКодПриЗаведенииКарты = Ложь;
		Форма.ОтправлятьSMSПриОплатеБонусами = Ложь;
		Форма.ОтправлятьSMSПриПоискеКартыПоНомеруТелефона = Ложь;
	КонецЕсли;
	
	Форма.Элементы.ГруппаSMSПодтверждениеНиз.Доступность = ИспользоватьШаблоныСообщений;
	
	Элементы.НастройкаРМКШаблонSMSПриЗаведенииКарты.Доступность = НастройкаРМК.ОтправлятьSMSКодПриЗаведенииКарты;
		
	Элементы.НастройкаРМКШаблонSMSПриПродаже.Доступность =
		(Форма.ОтправлятьSMSПриПоискеКартыПоНомеруТелефона ИЛИ Форма.ОтправлятьSMSПриОплатеБонусами);
	
КонецПроцедуры

// Открывает форму настроек распределения продаж по кассам ККМ
//
Процедура ОткрытьНастройкиРаспределенияПродаж() Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОповещениеОткрытьФормуПроверкиНепробитыхЧеков(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если РезультатОткрытияФормы = НСтр("ru = 'Закрытие смены'") Тогда
		ПродолжитьОткрытиеОбработкиЗакрытияКассовойСмены(ДополнительныеПараметры);
	Иначе
		ТекстЗаголовка = НСтр("ru = 'Закрытие смены.'");
		ТекстОшибки = НСтр("ru = 'Закрытие кассовой смены прервано пользователем.'");
		ПоказатьПредупреждение(, ТекстОшибки,,ТекстЗаголовка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПродолжитьОткрытиеОбработкиЗакрытияКассовойСмены(ПараметрыЗакрытияСмены)
	
	ПараметрыВыемки = РозничныеПродажиКлиентСервер.ПараметрыВыемкиИзКассы();
	Если ТипЗнч(ПараметрыЗакрытияСмены) = Тип("Структура") И ПараметрыЗакрытияСмены.Свойство("КассаККМ") Тогда 
		ПараметрыВыемки.КассаККМ = ПараметрыЗакрытияСмены.КассаККМ;
	ИначеЕсли ТипЗнч(ПараметрыЗакрытияСмены) = Тип("СправочникСсылка.КассыККМ") Тогда 
		ПараметрыВыемки.КассаККМ = ПараметрыЗакрытияСмены;
	КонецЕсли;
	
	ОбщегоНазначенияРМКРТВызовСервера.ИнициализироватьПараметрыВыемкиИзКассы(ПараметрыВыемки);
	
	Если Не ПараметрыВыемки.ЗапрашиватьСуммуВыемки
		Или ПараметрыВыемки.СуммаОстаток - ПараметрыВыемки.СуммаОстатокАгентские = 0 Тогда
		
		СуммаВыемки = ?(ПараметрыВыемки.ПроизводитьВыемку, ПараметрыВыемки.СуммаОстаток, 0);
		ЗавершитьОткрытиеОбработкиЗакрытияКассовойСмены(ПараметрыВыемки, СуммаВыемки);
	Иначе
	// Откроем форму выемки.
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Сумма выемки'"));
		ПараметрыФормы.Вставить("Отрицательное", Ложь);
		ПараметрыФормы.Вставить("ПараметрыВыемки", ПараметрыВыемки);
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВводаСуммыФактическойВыемки", ЭтотОбъект);
		
		ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВводаЧисла",
			ПараметрыФормы,
			ОбщегоНазначенияРМКРТКлиент,
			,
			,
			,
			ОбработчикОповещения,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗавершитьОткрытиеОбработкиЗакрытияКассовойСмены(ПараметрыВыемки, СуммаФактическойВыемки)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДокументыОткрыватьМодально", Истина);
	ПараметрыФормы.Вставить("ВыводитьСообщенияВРежимеРМК", Истина);
	ПараметрыФормы.Вставить("ПараметрыВыемки", ПараметрыВыемки);
	ПараметрыФормы.Вставить("СуммаФактическойВыемки" , СуммаФактическойВыемки);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КассаККМ", ПараметрыВыемки.КассаККМ);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуЗакрытияКассовойСмены",
		ОбщегоНазначенияРМКРТКлиент,
		ДополнительныеПараметры);
		
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Обработка.ЗакрытиеКассовойСмены.Форма.Форма",
		ПараметрыФормы,
		ОбщегоНазначенияРМКРТКлиент,,,,
		ОбработчикОповещения,
		Режим);
	
КонецПроцедуры

Процедура ОповещениеОткрытьФормуЗакрытияКассовойСмены(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Оповестить("ИзменениеСостоянияКассовойСмены", ДополнительныеПараметры.КассаККМ);
	
КонецПроцедуры

Процедура ОповещениеОткрытьФормуВыбораВнесенияДенег(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено И ТипЗнч(РезультатОткрытияФормы) = Тип("Структура") Тогда
		
		Форма = ДополнительныеПараметры.Форма;
		
		ПараметрыВыполнения = ДенежныеСредстваКлиент.ПараметрыВыполненияОперацииВнесениеДенег();
		ПараметрыВыполнения.СуммаВнесения = РезультатОткрытияФормы.Сумма;
		ПараметрыВыполнения.РКО = РезультатОткрытияФормы.РасходныйКассовыйОрдер;
		ПараметрыВыполнения.КассаККМ = РезультатОткрытияФормы.Касса;
		ПараметрыВыполнения.УникальныйИдентификатор = Форма.УникальныйИдентификатор;
		
		Оповещение = Новый ОписаниеОповещения("ВыполнитьОперациюВнесениеЗавершение", Форма, ПараметрыВыполнения);
		ДенежныеСредстваКлиент.НачатьВнесениеДенег(Оповещение, ПараметрыВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОповещениеОткрытьФормуВводаСуммыФактическойВыемки(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗавершитьОткрытиеОбработкиЗакрытияКассовойСмены(РезультатЗакрытия.ПараметрыВыемки, РезультатЗакрытия.ВведенноеЧисло);
	
КонецПроцедуры

#КонецОбласти

