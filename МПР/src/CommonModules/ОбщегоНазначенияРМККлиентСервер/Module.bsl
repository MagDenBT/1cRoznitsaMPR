
///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОбщиеМетоды

// Рассчитывает сумму НДС исходя из суммы и флагов налогообложения.
//
// Параметры:
//  Объект        - ДанныеФормыКоллекция;
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//
Процедура РассчитатьСуммуНДС(Объект, ТекущаяСтрока) Экспорт
	ОбщегоНазначенияРМККлиентСерверПереопределяемый.РассчитатьСуммуНДС(Объект, ТекущаяСтрока);
КонецПроцедуры

// Рассчитывает сумму документа с учетом НДС.
//
// Параметры:
//  Объект - ДанныеФормыКоллекция.
//
Процедура СуммаДокумента(Объект) Экспорт
	
	Объект.СуммаДокумента = Объект.Товары.Итог("Сумма");
	
	Если Не Объект.ЦенаВключаетНДС Тогда
		Объект.СуммаДокумента = Объект.СуммаДокумента + Объект.Товары.Итог("СуммаНДС");
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает сумму в строке табличной части.
//
// Параметры:
//  Объект - ДанныеФормыКоллекция.
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//
Процедура ПересчитатьСуммуВСтроке(Объект, ТекущаяСтрока, СкидкиРассчитаны = Ложь) Экспорт
	
	ТекущаяСтрока.СуммаБезСкидки = ТекущаяСтрока.Цена * ТекущаяСтрока.КоличествоУпаковок;
	
	СуммаТекущейСкидки = 0;
	
	Если (ЗначениеЗаполнено(ТекущаяСтрока.СуммаСкидкиНаценки)
			Или ЗначениеЗаполнено(ТекущаяСтрока.СуммаАвтоматическойСкидки))
			И Не ЗначениеЗаполнено(ТекущаяСтрока.ПроцентСкидкиНаценки) Тогда
			
			СуммаТекущейСкидки = СуммаТекущейСкидки + ТекущаяСтрока.СуммаСкидкиНаценки + ТекущаяСтрока.СуммаАвтоматическойСкидки;
			Объект.ТекущийТоварСуммаСкидки = СуммаТекущейСкидки;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.ПроцентСкидкиНаценки) Тогда
			
			ТекущаяСтрока.СуммаСкидкиНаценки = ((ТекущаяСтрока.СуммаБезСкидки - ТекущаяСтрока.СуммаАвтоматическойСкидки) * ТекущаяСтрока.ПроцентСкидкиНаценки) / 100;
			СуммаТекущейСкидки = СуммаТекущейСкидки + ТекущаяСтрока.СуммаСкидкиНаценки + ТекущаяСтрока.СуммаАвтоматическойСкидки;
			Объект.ТекущийТоварСуммаСкидки = СуммаТекущейСкидки;
			
		КонецЕсли;
		
	ТекущаяСтрока.СуммаСкидокОбщая = СуммаТекущейСкидки + ТекущаяСтрока.СуммаСкидкиОплатыБонусом;
	
	ТекущаяСтрока.ОтображаетсяСкидкаПроцентом = ЗначениеЗаполнено(ТекущаяСтрока.ПроцентСкидкиНаценки);
	ТекущаяСтрока.ОтображаетсяСкидкаСуммой =
		НЕ ТекущаяСтрока.ОтображаетсяСкидкаПроцентом И ЗначениеЗаполнено(ТекущаяСтрока.СуммаСкидкиНаценки);
	ТекущаяСтрока.Сумма = ТекущаяСтрока.Количество * ТекущаяСтрока.Цена - СуммаТекущейСкидки
		- ТекущаяСтрока.СуммаСкидкиОплатыБонусом;
		
КонецПроцедуры

// Возвращает текущее время, выраженное в секундах, прошедшее с начала суток
// Параметры:
//  Дата - ДатаВремя - дата, относительно которой вычисляется время
//
// Возвращаемое значение:
//  Результат - Число - количество секунд, прошедших с начала дня на момент Дата.
Функция ВремяИзДатыВСекундах(Дата) Экспорт
	Возврат Дата - НачалоДня(Дата);
КонецФункции

// Устанавливает значение свойства элемента формы, если находит элемент на форме
//
// Параметры:
//  ЭлементыФормы - ВсеЭлементыФормы - элементы формы, среди которых содержится искомый элемент.
//  ИмяЭлемента   - Строка - имя искомого элемента.
//  ИмяСвойства   - Строка - имя свойства, для которого будет устанавливаться значение.
//  Значение      - Произвольный - значение, которое будет установлено
//  УстанавливатьДляПодчиненных - Булево - установить аналогичное свойство для подчиненных элементов искомого элемента.
//
Процедура УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ИмяЭлемента, ИмяСвойства,
	Значение, УстанавливатьДляПодчиненных = Ложь) Экспорт
	
	Элемент = ЭлементыФормы.Найти(ИмяЭлемента);
	Если Элемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НРег(ИмяСвойства) = НРег("ТолькоПросмотр")
	И ТипЗнч(Элемент) = Тип("КнопкаФормы") Тогда
	
		ИмяСвойстваЭлемента	= "Доступность";
		ЗначениеСвойства	= НЕ Значение;
		
	Иначе
		
		ИмяСвойстваЭлемента	= ИмяСвойства;
		ЗначениеСвойства	= Значение;
		
	КонецЕсли;
	
	Если НРег(ИмяСвойства) = НРег("РасширеннаяПодсказка") Тогда
		Элемент.РасширеннаяПодсказка.Заголовок = Значение;
	Иначе
		
		Если Элемент[ИмяСвойстваЭлемента] <> ЗначениеСвойства Тогда
			Элемент[ИмяСвойстваЭлемента] = ЗначениеСвойства;
		КонецЕсли;
		
	КонецЕсли;
	
	ТипыЭлементовФормыСПодчиненнымиЭлементами =
		Новый ОписаниеТипов("ФормаКлиентскогоПриложения, ГруппаФормы, ТаблицаФормы");
	
	Если УстанавливатьДляПодчиненных И ТипыЭлементовФормыСПодчиненнымиЭлементами.СодержитТип(ТипЗнч(Элемент)) Тогда
		
		ПодчиненныеЭлементы = Элемент.ПодчиненныеЭлементы;
		
		Для Каждого ПодчиненныйЭлемент Из ПодчиненныеЭлементы Цикл
			УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ПодчиненныйЭлемент.Имя, ИмяСвойства, Значение, Истина);
		КонецЦикла;
		
 	КонецЕсли;
 	
КонецПроцедуры

// Возвращает цифры номера телефона
//
// Параметры:
//   НомерТелефона - Строка - номер телефона для обработки
//
// Возвращаемое значение:
//   Результат - номер телефона, состоящий только из цифр, или  пустая строка
//
Функция ПодготовитьНомерТелефона(НомерТелефона) Экспорт
	
	Результат = "";
	
	Если НЕ ПустаяСтрока(НомерТелефона) Тогда 
		
		НомерНеСодержитПробелов = Истина;
		НужнаПостобработкаНомера = НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(НомерТелефона,,
			НомерНеСодержитПробелов);
		
		Если НужнаПостобработкаНомера Тогда 
			
			ДлинаСтроки = СтрДлина(НомерТелефона);
			
			СтрокаСимволовЦифр = "1234567890";
			
			Результат = "";
			
			Для Индекс = 1 По ДлинаСтроки Цикл
				
				Символ = Сред(НомерТелефона, Индекс, 1);
				
				Если Найти(СтрокаСимволовЦифр, Символ) > 0 Тогда
					Результат = СтрШаблон("%1%2", Результат, Символ);
				Иначе
					Продолжить;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе 
			Результат = НомерТелефона;
		КонецЕсли;
		
		Если СтрДлина(Результат) <> 11 Тогда
			Результат = "";
		КонецЕсли;

		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
// По переданной странице устанавливает ее в качестве текущей, блокирует доступность неактивных страниц
//
// Параметры:
//  Страница - ГруппаФормы - Страница которую необходимо установить в качестве текущей.
//
Процедура УстановитьТекущуюСтраницу(Страница) Экспорт
	
	Страница.Родитель.ТекущаяСтраница = Страница;
	
	СтраницыГруппы = Страница.Родитель.ПодчиненныеЭлементы;
	
	Для Каждого СтраницаГруппы Из СтраницыГруппы Цикл
		СтраницаГруппы.Доступность = (СтраницаГруппы = Страница);
	КонецЦикла;
	
КонецПроцедуры

// Проверяет наличие реквизита или свойства у произвольного объекта без обращения к метаданным.
//
// Параметры:
//  Объект       - Произвольный - объект, у которого нужно проверить наличие реквизита или свойства;
//  ИмяРеквизита - Строка       - имя реквизита или свойства.
//
// Возвращаемое значение:
//  Булево - Истина, если есть.
//
Функция ЕстьСвойство(Объект, ИмяРеквизита) Экспорт
	
	ЕстьСвойство = Ложь;
	
	Если Не ((Объект = Неопределено) ИЛИ (ТипЗнч(Объект) = Тип("Булево")))
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяРеквизита) Тогда
			ЕстьСвойство = Истина;
	КонецЕсли;
	
	Возврат ЕстьСвойство;
	
КонецФункции

// Возвращает строковое представление суммы в рублях
//
// Параметры:
//  Сумма - Число
//
// Возвращаемое значение:
//  Результат - Строка
//
Функция ФорматСумм(Сумма) Экспорт
	
	Сумма = ?(Сумма < 0, - Сумма, Сумма);
	ПредставлениеВалюты = ОбщегоНазначенияРМККлиентСерверПовтИсп.ВалютаРубли();
	
	Возврат СтрШаблон("%1 %2", Формат(Сумма, НСтр("ru = 'ЧЦ=15; ЧДЦ=2; ЧН=0.00'")), ПредставлениеВалюты);
	
КонецФункции

// Возвращает вид отображения переключателя элемента интерфейса, отображающего тип Булево
//
// Возвращаемое значение:
//  Результат - ВидФлажка
//
Функция ВидОтображенияБинарногоПоля() Экспорт

	ВидОтображенияПоУмолчанию = ВидФлажка.Флажок;
	ПереопределенноеЗначение = ОбщегоНазначенияРМККлиентСерверПереопределяемый.ВидОтображенияБинарногоПоля();
	Возврат ?(ЗначениеЗаполнено(ПереопределенноеЗначение), ПереопределенноеЗначение, ВидОтображенияПоУмолчанию);

КонецФункции

// Возвращает положение заголовка переключателя элемента интерфейса, отображающего тип Булево
//
// Возвращаемое значение:
//  Результат - ПоложениеЗаголовкаЭлементаФормы
//
Функция ПоложениеЗаголовкаЭлемента() Экспорт

	ПоложениеЗаголовкаПоУмолчанию = ПоложениеЗаголовкаЭлементаФормы.Право;
	ПереопределенноеЗначение = ОбщегоНазначенияРМККлиентСерверПереопределяемый.ПоложениеЗаголовкаЭлемента();
	Возврат ?(ЗначениеЗаполнено(ПереопределенноеЗначение), ПереопределенноеЗначение, ПоложениеЗаголовкаПоУмолчанию);

КонецФункции

#КонецОбласти

#Область КомпоновкаДанных

// Удаляет все элементы настройки компоновки данных из объекта.
//
// Параметры:
//  Настройки - НастройкиКомпоновкиДанных,
//		КомпоновщикНастроекКомпоновкиДанных,
//		ПользовательскиеНастройкиКомпоновкиДанных - настройки для удаления и очистки.
//
Процедура ОчиститьНастройкиКомпоновкиДанных(Настройки) Экспорт
	
	Если Настройки = Неопределено Или ТипЗнч(Настройки) <> Тип("НастройкиКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Параметр Из Настройки.ПараметрыДанных.Элементы Цикл
		
		Параметр.Значение = Неопределено;
		Параметр.Использование = Ложь;
		
	КонецЦикла;
	
	Для каждого Параметр Из Настройки.ПараметрыВывода.Элементы Цикл
		Параметр.Использование = Ложь;
	КонецЦикла;
	
	Настройки.ПользовательскиеПоля.Элементы.Очистить();
	Настройки.Отбор.Элементы.Очистить();
	Настройки.Порядок.Элементы.Очистить();
	Настройки.Выбор.Элементы.Очистить();
	Настройки.Структура.Очистить();
	
КонецПроцедуры

// Копирует настройки компоновки данных.
//
// Параметры:
//  НастройкиПриемник - НастройкиКомпоновкиДанных - настройки приемник.
//  НастройкиИсточник - НастройкиКомпоновкиДанных - настройки источник.
// 
Процедура СкопироватьНастройкиКомпоновкиДанных(НастройкиПриемник, НастройкиИсточник) Экспорт
	
	Если НастройкиИсточник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(НастройкиПриемник) = Тип("НастройкиКомпоновкиДанных") Тогда
		
		Для каждого Параметр Из НастройкиИсточник.ПараметрыДанных.Элементы Цикл
			
			ЗначениеПараметра = НастройкиПриемник.ПараметрыДанных.НайтиЗначениеПараметра(Параметр.Параметр);
			Если ЗначениеПараметра <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ЗначениеПараметра, Параметр);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипЗнч(НастройкиИсточник) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		
		ЗаполнитьЗначенияСвойств(НастройкиПриемник, НастройкиИсточник);
		СкопироватьНастройкиКомпоновкиДанных(НастройкиПриемник.Настройки, НастройкиИсточник.Настройки);
		Возврат;
		
	КонецЕсли;
	
	// Копирование настроек
	Если ТипЗнч(НастройкиИсточник) = Тип("НастройкиКомпоновкиДанных") Тогда
		
		ЗаполнитьЭлементы(НастройкиПриемник.ПараметрыДанных, НастройкиИсточник.ПараметрыДанных);
		СкопироватьЭлементы(НастройкиПриемник.ПользовательскиеПоля, НастройкиИсточник.ПользовательскиеПоля);
		СкопироватьЭлементы(НастройкиПриемник.Отбор, НастройкиИсточник.Отбор);
		СкопироватьЭлементы(НастройкиПриемник.Порядок, НастройкиИсточник.Порядок);
		
	КонецЕсли;
	
	Если ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаКомпоновкиДанных")
		ИЛИ ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
		ИЛИ ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		
		СкопироватьЭлементы(НастройкиПриемник.ПоляГруппировки, НастройкиИсточник.ПоляГруппировки);
		СкопироватьЭлементы(НастройкиПриемник.Отбор, НастройкиИсточник.Отбор);
		СкопироватьЭлементы(НастройкиПриемник.Порядок, НастройкиИсточник.Порядок);
		ЗаполнитьЗначенияСвойств(НастройкиПриемник, НастройкиИсточник);
		
	КонецЕсли;
	
	СкопироватьЭлементы(НастройкиПриемник.Выбор, НастройкиИсточник.Выбор);
	СкопироватьЭлементы(НастройкиПриемник.УсловноеОформление, НастройкиИсточник.УсловноеОформление);
	ЗаполнитьЭлементы(НастройкиПриемник.ПараметрыВывода, НастройкиИсточник.ПараметрыВывода);
	
	// Копирование структуры
	Если ТипЗнч(НастройкиИсточник) = Тип("НастройкиКомпоновкиДанных")
		ИЛИ ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаКомпоновкиДанных") Тогда
		
		Для каждого ЭлементСтруктурыИсточник Из НастройкиИсточник.Структура Цикл
			
			ЭлементСтруктурыПриемник = НастройкиПриемник.Структура.Добавить(ТипЗнч(ЭлементСтруктурыИсточник));
			СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
		ИЛИ ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		
		Для каждого ЭлементСтруктурыИсточник Из НастройкиИсточник.Структура Цикл
			
			ЭлементСтруктурыПриемник = НастройкиПриемник.Структура.Добавить();
			СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипЗнч(НастройкиИсточник) = Тип("ТаблицаКомпоновкиДанных") Тогда
		
		Для Каждого ЭлементСтруктурыИсточник Из НастройкиИсточник.Строки Цикл
			
			ЭлементСтруктурыПриемник = НастройкиПриемник.Строки.Добавить();
			СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
			
		КонецЦикла;
		
		Для Каждого ЭлементСтруктурыИсточник Из НастройкиИсточник.Колонки Цикл
			
			ЭлементСтруктурыПриемник = НастройкиПриемник.Колонки.Добавить();
			СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипЗнч(НастройкиИсточник) = Тип("ДиаграммаКомпоновкиДанных") Тогда
		
		Для Каждого ЭлементСтруктурыИсточник Из НастройкиИсточник.Серии Цикл
			
			ЭлементСтруктурыПриемник = НастройкиПриемник.Серии.Добавить();
			СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
			
		КонецЦикла;
		
		Для Каждого ЭлементСтруктурыИсточник Из НастройкиИсточник.Точки Цикл
			
			ЭлементСтруктурыПриемник = НастройкиПриемник.Точки.Добавить();
			СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Копирует элементы из одной коллекции в другую.
//
// Параметры:
//  ПриемникЗначения - ВариантыПользовательскогоПоляВыборКомпоновкиДанных,
//					   УсловноеОформлениеКомпоновкиДанных,
//					   ОформляемыеПоляКомпоновкиДанных,
//					   ЗначенияПараметровДанныхКомпоновкиДанных - настройки компоновщика настроек.
//  ИсточникЗначения - ВариантыПользовательскогоПоляВыборКомпоновкиДанных,
//					   УсловноеОформлениеКомпоновкиДанных,
//					   ОформляемыеПоляКомпоновкиДанных,
//					   ЗначенияПараметровДанныхКомпоновкиДанных - параметр для получения.
//  ПроверятьДоступность - Булево - признак проверки доступности элементов.
//  ОчищатьПриемник - Булево - признак очищения приемника значений.
//
Процедура СкопироватьЭлементы(ПриемникЗначения, ИсточникЗначения, ПроверятьДоступность = Ложь,
	ОчищатьПриемник = Истина) Экспорт
	
	СоздаватьПоТипу = НЕ (ТипЗнч(ИсточникЗначения) = Тип("УсловноеОформлениеКомпоновкиДанных")
		ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ВариантыПользовательскогоПоляВыборКомпоновкиДанных")
		ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ОформляемыеПоляКомпоновкиДанных")
		ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ЗначенияПараметровДанныхКомпоновкиДанных"));
	
	ПриемникЭлементов = ПриемникЗначения.Элементы;
	ИсточникЭлементов = ИсточникЗначения.Элементы;
	
	Если ОчищатьПриемник Тогда
		ПриемникЭлементов.Очистить();
	КонецЕсли;
	
	Для Каждого ЭлементИсточник Из ИсточникЭлементов Цикл
		
		Если ТипЗнч(ЭлементИсточник) = Тип("ЭлементПорядкаКомпоновкиДанных") Тогда
			
			// Элементы порядка добавляем в начало.
			Индекс = ИсточникЭлементов.Индекс(ЭлементИсточник);
			ЭлементПриемник = ПриемникЭлементов.Вставить(Индекс, ТипЗнч(ЭлементИсточник));
			
		Иначе
			
			ЭлементПриемник = ?(СоздаватьПоТипу,
				ПриемникЭлементов.Добавить(ТипЗнч(ЭлементИсточник)),
				ЭлементПриемник = ПриемникЭлементов.Добавить());
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
		
		// В некоторых коллекциях необходимо заполнить другие коллекции.
		Если ТипЗнч(ИсточникЭлементов) = Тип("КоллекцияЭлементовУсловногоОформленияКомпоновкиДанных") Тогда
			
			СкопироватьЭлементы(ЭлементПриемник.Поля, ЭлементИсточник.Поля);
			СкопироватьЭлементы(ЭлементПриемник.Отбор, ЭлементИсточник.Отбор);
			ЗаполнитьЭлементы(ЭлементПриемник.Оформление, ЭлементИсточник.Оформление);
			
		ИначеЕсли ТипЗнч(ИсточникЭлементов)	= Тип("КоллекцияВариантовПользовательскогоПоляВыборКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Отбор, ЭлементИсточник.Отбор);
		КонецЕсли;
		
		// В некоторых элементах коллекции необходимо заполнить другие коллекции.
		Если ТипЗнч(ЭлементИсточник) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник, ЭлементИсточник);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник, ЭлементИсточник);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ПользовательскоеПолеВыборКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Варианты, ЭлементИсточник.Варианты);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных") Тогда
			
			ЭлементПриемник.УстановитьВыражениеДетальныхЗаписей (ЭлементИсточник.ПолучитьВыражениеДетальныхЗаписей());
			ЭлементПриемник.УстановитьВыражениеИтоговыхЗаписей(ЭлементИсточник.ПолучитьВыражениеИтоговыхЗаписей());
			ЭлементПриемник.УстановитьПредставлениеВыраженияДетальныхЗаписей(
				ЭлементИсточник.ПолучитьПредставлениеВыраженияДетальныхЗаписей());
			ЭлементПриемник.УстановитьПредставлениеВыраженияИтоговыхЗаписей(
				ЭлементИсточник.ПолучитьПредставлениеВыраженияИтоговыхЗаписей());
				
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Рекурсивная процедура заполнения элементов.
//
// Параметры:
//  ПриемникЗначения - КоллекцияЗначенийПараметровКомпоновкиДанных
//  ИсточникЗначения - КоллекцияЗначенийПараметровКомпоновкиДанных
//  ПервыйУровень - КоллекцияЗначенийПараметровКомпоновкиДанных
//
Процедура ЗаполнитьЭлементы(ПриемникЗначения, ИсточникЗначения, ПервыйУровень = Неопределено) Экспорт
	
	КоллекцияЗначений = ?(ТипЗнч(ПриемникЗначения) = Тип("КоллекцияЗначенийПараметровКомпоновкиДанных"),
		ИсточникЗначения,
		ИсточникЗначения.Элементы);
	
	Для Каждого ЭлементИсточник Из КоллекцияЗначений Цикл
		
		ЭлементПриемник = ?(ПервыйУровень = Неопределено,
			ПриемникЗначения.НайтиЗначениеПараметра(ЭлементИсточник.Параметр),
				ПервыйУровень.НайтиЗначениеПараметра(ЭлементИсточник.Параметр));
		
		Если ЭлементПриемник = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
		Если ТипЗнч(ЭлементИсточник) = Тип("ЗначениеПараметраКомпоновкиДанных") Тогда
			
			Если ЭлементИсточник.ЗначенияВложенныхПараметров.Количество() <> 0 Тогда
				ЗаполнитьЭлементы(ЭлементПриемник.ЗначенияВложенныхПараметров,
					ЭлементИсточник.ЗначенияВложенныхПараметров, ПриемникЗначения);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Интеграция_с_API_Программный_интерфейс

#Область Интеграция_с_API_десериализация_ответов

// Возвращает результат обработки данных из ответа по умолчанию 
//
// Возвращаемое значение:
//  Результат - Структура:
//		*ВыполнениеУспешно - Булево
//		*Комментарий - Строка - дополнительная информация о состоянии выполнения
//
Функция РезультатОбработкиДанныхПоУмолчанию() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("ВыполнениеУспешно", Ложь);
	Результат.Вставить("Комментарий", НСтр("ru = ''"));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Интеграция_с_API_методы_вызова

// Выполняет обращение к ресурсу сервиса лояльности 
//
// Параметры:
//  ПараметрыВыполненияЗапроса - Структура:
//		*ТипЗапроса - Строка, по умолчанию - "POST"
//		*АдресСервера - Строка
//		*Логин - Строка
//		*Пароль - Строка
//		*Ресурс - Строка
//		*ПараметрыМетода - Структура
//
// Возвращаемое значение:
//  РезультатВыполнения - Структура:
//		* ДанныеОтвета - Строка,
//		*ЕстьОшибки - Булево,
//		*ТекстОшибки - Строка
//
Функция ВыполнитьЗапросКСервисуЛояльности(ПараметрыВыполненияЗапроса) Экспорт

	РезультатВыполнения = РезультатВыполненияЗапросаПоУмолчанию();
	
	Если ПараметрыВыполненияЗапросаКорректны(ПараметрыВыполненияЗапроса) Тогда 
		
		ПараметрыПодключения = ПолучитьПараметрыПодключенияИзСтроки(ПараметрыВыполненияЗапроса.АдресСервера);
		
		ТипЗапроса		= ПараметрыВыполненияЗапроса.ТипЗапроса;
		АдресСервера	= ПараметрыПодключения.АдресСервера;
		Логин			= ПараметрыВыполненияЗапроса.Логин;
		Пароль 			= ПараметрыВыполненияЗапроса.Пароль;
		Ресурс			= ПараметрыВыполненияЗапроса.Ресурс;
		Порт			= ПараметрыПодключения.ПортПодключения;
		SSL				= ?(ПараметрыПодключения.ЭтоЗащищенноеСоединение, Новый ЗащищенноеСоединениеOpenSSL(), Неопределено);
		
		ПараметрыМетода = ПараметрыВыполненияЗапроса.ПараметрыМетода;
		
		ДобавитьПараметрыВРесурс(Ресурс, ПараметрыМетода);
		
		#Если НЕ ВебКлиент Тогда
			
			ТаймаутСоединенияВСекундах = 60;
			HTTPСоединение = Новый HTTPСоединение(АдресСервера,, Логин, Пароль,, ТаймаутСоединенияВСекундах, SSL);
			НTTPЗапрос = Новый HTTPЗапрос(Ресурс);
			
			Если ПараметрыВыполненияЗапроса.Свойство("ТелоЗапроса") И Не ПустаяСтрока(ПараметрыВыполненияЗапроса.ТелоЗапроса) Тогда 
				
				НTTPЗапрос.УстановитьТелоИзСтроки(ПараметрыВыполненияЗапроса.ТелоЗапроса);
				
			КонецЕсли;
			
			Попытка
				
				Ответ = HTTPСоединение.ВызватьHTTPМетод(ТипЗапроса, НTTPЗапрос);
				
				КодСостояния = Ответ.КодСостояния;
				
				РезультатВыполнения.ЕстьОшибки = (КодСостояния > 200);
				
				Если КодСостояния >= 500 Тогда
					
					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'При выполнении запроса к сервису лояльности возникла ошибка на стороне сервера. Код ошибки: %1'"),
						КодСостояния);
						
				ИначеЕсли КодСостояния >= 400 Тогда
					
					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Некорректно указаны параметры выполнения запроса к сервису лояльности. Код ошибки: %1'"),
						КодСостояния);
					
				КонецЕсли;
				
				РезультатВыполнения.ТекстОшибки = ТекстОшибки;
				
			Исключение
				
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				
				РезультатВыполнения.ЕстьОшибки = Истина;
				РезультатВыполнения.ТекстОшибки =
				СтрШаблон(
					НСтр("ru = 'Не удалось установить соединение с сервисом лояльности.
						|Тип запроса: %1
						|Адрес сервера: %2
						|Логин: %3
						|Пароль: %4
						|Ресурс: %5
						|Описание ошибки: %6'"),
					Строка(ТипЗапроса),
					Строка(АдресСервера),
					Строка(Логин),
					Строка(Пароль),
					Строка(Ресурс),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			КонецПопытки;
				
			
		Если РезультатВыполнения.ЕстьОшибки Тогда
			Возврат РезультатВыполнения;
		КонецЕсли;
	
		ДанныеОтвета = Ответ.ПолучитьТелоКакСтроку();
		РезультатВыполнения.ДанныеОтвета = ДанныеОтвета;
	
	#Иначе
		
		РезультатВыполнения = ОбщегоНазначенияРМКВызовСервера.
			ВыполнитьЗапросКСервисуЛояльности(ПараметрыВыполненияЗапроса);
		
	#КонецЕсли
		
	Иначе
		РезультатВыполнения.ЕстьОшибки = Истина;
		РезультатВыполнения.ТекстОшибки =
			НСтр("ru = 'Проверьте указанные параметры соединения с сервисом лояльности в настройках РМК.'");
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Возвращает структуру для передачи исходных данных при обращении к API
//
// Возвращаемое значение:
//  РезультатВыполнения - Структура:
//		*ТипЗапроса - Строка, по умолчанию - "POST"
//		*АдресСервера - Строка;
//		*Логин - Строка;
//		*Пароль - Строка;
//		*Ресурс - Строка;
//		*ПараметрыМетода - Структура
//
Функция ПараметрыЗапросаКСервису() Экспорт

	РезультатВыполнения = Новый Структура();
	РезультатВыполнения.Вставить("ТипЗапроса", "POST");
	РезультатВыполнения.Вставить("ТелоЗапроса", "");
	РезультатВыполнения.Вставить("АдресСервера", "");
	РезультатВыполнения.Вставить("Логин", "");
	РезультатВыполнения.Вставить("Пароль", "");
	РезультатВыполнения.Вставить("Ресурс", "");
	РезультатВыполнения.Вставить("ПараметрыМетода", Новый Структура());
	
	Возврат РезультатВыполнения;

КонецФункции

// Возвращает структуру обязательных параметров для запроса к бонусной подсистеме сервиса лояльности
//
// Возвращаемое значение:
//  РезультатВыполнения - Структура:
//		*ClientCardID - Строка
//		*Email - Строка
//		*Phone - Строка
//
Функция ПараметрыМетодовБонуснойПодсистемы() Экспорт

	РезультатВыполнения = Новый Структура();
	РезультатВыполнения.Вставить("ClientCardID");
	РезультатВыполнения.Вставить("Email");
	РезультатВыполнения.Вставить("Phone");
	РезультатВыполнения.Вставить("GiftCardNumber");
	
	Возврат РезультатВыполнения;

КонецФункции

// Получает данные из сервиса лояльности 
//
// Параметры:
//  НастройкаРабочегоМестаКассира - СправочникСсылка.НастройкиРМК - содержит исходные данные для подключения 
//									к сервису лояльности, признак запрета редактирования условий продаж
//  ТорговыйОбъект - СправочникСсылка.ТорговыйОбъект, Неопределено - торговый объект для отбора перечня ограничений
//
// Возвращаемое значение:
//  Результат - Структура:
//		*ДанныеОтвета - Строка
//		*ЕстьОшибки - Булево
//		*ТекстОшибки - Строка
//
Функция ПолучитьДанныеЗапретовРедактирования(НастройкаРабочегоМестаКассира = Неопределено,
	ТорговыйОбъект = Неопределено) Экспорт
	
	Результат = РезультатВыполненияЗапросаПоУмолчанию();
	
	// Получить из настроек РМК адрес сервиса, логин и пароль из защищенного хранилища
	ОсновныеПараметры =
		ОбщегоНазначенияРМКВызовСервера.ЗначенияПараметровСервисаЛояльности(НастройкаРабочегоМестаКассира);
		
	Если ПараметрыВыполненияЗапросаКорректны(ОсновныеПараметры) Тогда
		
		ПараметрыВыполненияЗапроса = ПараметрыЗапросаКСервису();
		ЗаполнитьЗначенияСвойств(ПараметрыВыполненияЗапроса, ОсновныеПараметры);
		ПараметрыВыполненияЗапроса.ТипЗапроса = "GET";
		ПараметрыВыполненияЗапроса.Ресурс = "salesrestrictionsinfo";
		
		Если ЗначениеЗаполнено(ТорговыйОбъект) Тогда
			ПараметрыВыполненияЗапроса.ПараметрыМетода.Вставить("Store", Строка(ТорговыйОбъект.УникальныйИдентификатор()));
		КонецЕсли;
		
		Результат = ВыполнитьЗапросКСервисуЛояльности(ПараметрыВыполненияЗапроса);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Обновляет данные запретов продаж
//
// Параметры:
//  НастройкаРабочегоМестаКассира - СправочникСсылка.НастройкиРМК
//  ТорговыйОбъект - СправочникСсылка.ТорговыйОбъект, Неопределено - торговый объект для отбора перечня ограничений
//
// Возвращаемое значение:
//  Результат - Структура:
//		*ПризнакУспешноОбновлен - Булево
//		*КомментарийКОбновлениюПризнака - Строка
//		*ЗапретыПродажУспешноЗагружены - Булево
//		*КомментарийОбновленияЗапретов - Строка
//
Функция ОбновитьДанныеЗапретовРедактирования(НастройкаРабочегоМестаКассира = Неопределено,
	ТорговыйОбъект = Неопределено) Экспорт

	Результат = Новый Структура();
	Результат.Вставить("ПризнакУспешноОбновлен", Ложь);
	Результат.Вставить("КомментарийКОбновлениюПризнака", НСтр("ru = ''"));
	Результат.Вставить("ЗапретыПродажУспешноЗагружены", Ложь);
	Результат.Вставить("КомментарийОбновленияЗапретов", НСтр("ru = ''"));
	
	ДанныеОтветаСервиса = ПолучитьДанныеЗапретовРедактирования(НастройкаРабочегоМестаКассира, ТорговыйОбъект);
	
	Если Не ДанныеОтветаСервиса.ЕстьОшибки Тогда
		
		СтрокаJSON = ДанныеОтветаСервиса.ДанныеОтвета;
		
		ДанныеОтвета = Неопределено;
		
		#Если ВебКлиент Тогда
			ДанныеОтвета = ОбщегоНазначенияРМКВызовСервера.ОбработатьJSONСервер(СтрокаJSON);
		#Иначе
			
			ЧтениеОтвета = Новый ЧтениеJSON;
			ЧтениеОтвета.УстановитьСтроку(СтрокаJSON);
			Попытка
				ДанныеОтвета = ПрочитатьJSON(ЧтениеОтвета);
			Исключение
				
				ЛокализованноеСообщение = 
					НСтр("ru = 'Ошибка разбора JSON, возможно, получено служебное сообщение о недоступности сервера лояльности.'",
						ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			
 				СобытияЖурнала = Новый СписокЗначений;
				ВозникшаяОшибка = Новый Структура();
				ВозникшаяОшибка.Вставить("ИмяСобытия", НСтр("ru = 'Попытка чтения ответа от сервера лояльности в формате JSON.'"));
				ВозникшаяОшибка.Вставить("ПредставлениеУровня", НСтр("ru = 'Ошибка'"));
				ВозникшаяОшибка.Вставить("Комментарий",ЛокализованноеСообщение);
				ВозникшаяОшибка.Вставить("ДатаСобытия", МенеджерОборудованияКлиентСервер.ДатаСеанса());
				СобытияЖурнала.Добавить(ВозникшаяОшибка);
				
				ЖурналРегистрацииВызовСервера.ЗаписатьСобытияВЖурналРегистрации(СобытияЖурнала);
				
			КонецПопытки;
			
		#КонецЕсли
		
		
		РезультатОбработки = ОбработатьДанныеЗапретовИзОтвета(ДанныеОтвета, НастройкаРабочегоМестаКассира);
		ЗаполнитьЗначенияСвойств(Результат, РезультатОбработки);

	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры подключения к http-сервису
//
// Параметры:
//  СтрокаПодключения - Строка - Строка подключения к http-сервису
//
// Возвращаемое значение:
//  ПараметрыПодключения - Структура:
//		*https - Булево
//		*ПортПодключения - Число
//		*АдресСервера - Строка
//		*ИмяСервиса - Строка
//		*ОшибкаСтроки - Булево
//		*Используется1СЛинк - Истина
//
Функция ПолучитьПараметрыПодключенияИзСтроки(СтрокаПодключения) Экспорт
	
	СтруктураПараметровПодключения = СтруктураПараметровПодключения();
	ПротоколПодключения = СтрНайти(СтрокаПодключения, "://");
	
	Если ВРЕГ(Лев(СтрокаПодключения, ПротоколПодключения - 1)) = "HTTPS" Тогда
		СтруктураПараметровПодключения.ЭтоЗащищенноеСоединение = Истина;
	Иначе
		СтруктураПараметровПодключения.ЭтоЗащищенноеСоединение = Ложь;
	КонецЕсли;
	
	// Удаляем протокол подключения, если он указан в строке подключения
	Если ПротоколПодключения <> 0 Тогда
		АдресСервера = Прав(СтрокаПодключения, СтрДлина(СтрокаПодключения) - (ПротоколПодключения + 2));
	Иначе
		АдресСервера = СтрокаПодключения;
	КонецЕсли;
	
	СтруктураПараметровПодключения.АдресСервера = АдресСервера;
	
	// Удаляем путь
	ПозицияРазделителя = СтрНайти(АдресСервера, "/");
	АдресСервера = ?(ПозицияРазделителя = 0, АдресСервера, Лев(АдресСервера, ПозицияРазделителя - 1));
	
	Если НЕ СтрНайти(ВРЕГ(АдресСервера), "LINK.1C.RU") = 0 Тогда
		АдресСервера = СтрЗаменить(АдресСервера, ".link.1c.ru", "");
		СтруктураПараметровПодключения.ЭтоЗащищенноеСоединение = Истина;
		СтруктураПараметровПодключения.Используется1СЛинк = Истина;
	Иначе
		СтруктураПараметровПодключения.Используется1СЛинк = Ложь;
	КонецЕсли;
	
	// Пытаемся найти порт подключения
	ПозицияРазделителяПорта = Найти(АдресСервера, ":");
	АдресСервераСПортом = АдресСервера;
	
	Если НЕ ПозицияРазделителяПорта = 0 Тогда
		ПортПодключения = Сред(АдресСервераСПортом, ПозицияРазделителяПорта + 1);
		Попытка
			СтруктураПараметровПодключения.ПортПодключения = Число(ПортПодключения);
		Исключение
			СтруктураПараметровПодключения.ОшибкаСтроки = Истина;
			Возврат СтруктураПараметровПодключения;
		КонецПопытки;
	Иначе
		СтруктураПараметровПодключения.ПортПодключения = ?(СтруктураПараметровПодключения.ЭтоЗащищенноеСоединение, 443, 80);
	КонецЕсли;
	
	// Найдем имя каталога.
	// Обязательно должен быть "/hs/".
	// Все, что после адреса сервера и до /hs/ - это имя каталога.
	ПозицияHS = Найти(ВРЕГ(СтрокаПодключения), "/HS/");
	Если ПозицияHS = 0 Тогда
		СтруктураПараметровПодключения.ОшибкаСтроки = Истина;
		Возврат СтруктураПараметровПодключения;
	КонецЕсли;
	
	Возврат СтруктураПараметровПодключения;
	
КонецФункции

#КонецОбласти

// Формирует структуру данных для хранения ответа от сервиса 
//
// Возвращаемое значение:
//  РезультатВыполнения - Структура:
//		*ДанныеОтвета - Строка
//		*ЕстьОшибки - Булево
//		*ТекстОшибки - Строка
//
Функция РезультатВыполненияЗапросаПоУмолчанию() Экспорт
	
	РезультатВыполнения = Новый Структура();
	РезультатВыполнения.Вставить("ДанныеОтвета", НСтр("ru = ''"));
	РезультатВыполнения.Вставить("ЕстьОшибки", Истина);
	РезультатВыполнения.Вставить("ТекстОшибки", НСтр("ru = ''"));

	Возврат РезультатВыполнения;

КонецФункции

// Формирует данные о запрете для последующей передачи в интерфейс
//
// Параметры:
//  КэшЗапретовПродаж - ТаблицаЗначений - данные запретов, определенных как действующие;
//  ВидНоменклатуры - СправочникСсылка.ВидыНоменклатуры - категория, к которой относится запрет.
//
// Возвращаемое значение:
//  Результат - Структура:
//		*ВремяНачалаЗапрета
//		*ВремяОкончанияЗапрета
//		*ВидНоменклатуры"
//		либо пустая структура при отсутствии
//
Функция УсловияЗапретаПродажиТовара(ПереченьЗапретов, ВидНоменклатуры) Экспорт
	
	Результат = Новый Структура();
	МоментПроверки = ТекущаяДата();
	
	ВремяПроверки = ОбщегоНазначенияРМККлиентСервер.ВремяИзДатыВСекундах(МоментПроверки);
	ТекущийДеньНедели = ОбщегоНазначенияРМККлиентСерверПовтИсп.ДеньНеделиПеречислением(МоментПроверки);
	
	Для каждого Запрет Из ПереченьЗапретов Цикл
		
		ВремяНачалаЗапрета = ОбщегоНазначенияРМККлиентСервер.ВремяИзДатыВСекундах(Запрет.ВремяНачала);
		ВремяОкончанияЗапрета = ОбщегоНазначенияРМККлиентСервер.ВремяИзДатыВСекундах(Запрет.ВремяОкончания);
		ДеньНеделиЗапрета = Запрет.ДеньНедели;
		
		ЭтоДеньЗапрета = (НЕ ЗначениеЗаполнено(ДеньНеделиЗапрета))
			ИЛИ (ЗначениеЗаполнено(ДеньНеделиЗапрета) И ДеньНеделиЗапрета = ТекущийДеньНедели);
		
		Если ЭтоДеньЗапрета И ВремяПроверки >= ВремяНачалаЗапрета И ВремяПроверки <= ВремяОкончанияЗапрета Тогда
			
			Результат.Вставить("ВремяНачалаЗапрета", ВремяНачалаЗапрета);
			Результат.Вставить("ВремяОкончанияЗапрета", ВремяОкончанияЗапрета);
			Результат.Вставить("ВидНоменклатуры", ВидНоменклатуры);
			
			Возврат Результат;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область КодыДоступаКассиров

// Возвращает имя метаданных, хранящих коды доступа кассиров
//
// Возвращаемое значение:
//  Результат - Строка
//
Функция ИмяМетаданныхХранящихКодыДоступаКассиров() Экспорт

	ИмяПоУмолчанию = "РегистрыСведений.Штрихкоды";
	ПереопределенноеИмяМетаданных =
		ОбщегоНазначенияРМККлиентСерверПереопределяемый.ИмяМетаданныхХранящихКодыДоступаКассиров();
	Возврат ?(ЗначениеЗаполнено(ПереопределенноеИмяМетаданных), ПереопределенноеИмяМетаданных, ИмяПоУмолчанию);
	
КонецФункции

// Возвращает имя реквизита, хранящего код доступа кассира в конфигурации
//
// Возвращаемое значение:
//  Результат - Строка
//
Функция ИмяРеквизитаХранящегоКодДоступаКассира() Экспорт
	
	ИмяПоУмолчанию = "Штрихкод";
	ПереопределенноеИмяМетаданных =
		ОбщегоНазначенияРМККлиентСерверПереопределяемый.ИмяРеквизитаХранящегоКодДоступаКассира();
	Возврат ?(ЗначениеЗаполнено(ПереопределенноеИмяМетаданных), ПереопределенноеИмяМетаданных, ИмяПоУмолчанию);
	
КонецФункции

// Возвращает имя реквизита, хранящего владельца кода доступа кассира в конфигурации
//
// Возвращаемое значение:
//  Результат - Строка
//
Функция ИмяРеквизитаХранящегоВладельцаКодаДоступа() Экспорт
	
	ИмяПоУмолчанию = "Владелец";
	ПереопределенноеИмяМетаданных =
		ОбщегоНазначенияРМККлиентСерверПереопределяемый.ИмяРеквизитаХранящегоВладельцаКодаДоступа();
	Возврат ?(ЗначениеЗаполнено(ПереопределенноеИмяМетаданных), ПереопределенноеИмяМетаданных, ИмяПоУмолчанию);
	
КонецФункции

#КонецОбласти

#Область ПомощникНастройкиКассовогоМеста

// Возвращает имя основной таблицы для динамического списка видов оплат помощника настройки
//
// Возвращаемое значение:
//  ИмяТаблицы - Строка
//
Функция ЗаполнитьИмяОсновнойТаблицыВидовОплат() Экспорт
	
	ИмяТаблицы = "";
	ОбщегоНазначенияРМККлиентСерверПереопределяемый.ЗаполнитьИмяОсновнойТаблицыВидовОплат(ИмяТаблицы);
	Возврат ИмяТаблицы;
	
КонецФункции

#Область ПоясняющиеНадписи

// Возвращает текст подсказки к настройке управления запретами продаж
//
// Возвращаемое значение:
//  ТекстПодсказки - Строка - текст подсказки
//
Функция ТекстПодсказкиНастройкиЗапретовПродаж() Экспорт
	
	ТекстПодсказки = НСтр("ru = 'Ограничение продажи товаров определенного вида по настроенному расписанию.'");
	ОбщегоНазначенияРМККлиентСерверПереопределяемый.ЗаполнитьТекстПодсказкиНастройкиЗапретовПродаж(ТекстПодсказки);
	
	Возврат ТекстПодсказки;
	
КонецФункции
	
#КонецОбласти


#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Интеграция_с_API_служебные

#Область Интеграция_с_API_методы_вызова

Функция ОбработатьДанныеЗапретовИзОтвета(ИсходныеДанные, НастройкиРабочегоМестаКассира = Неопределено)
	Возврат ОбщегоНазначенияРМКВызовСервера.ОбработатьДанныеЗапретовИзОтвета(ИсходныеДанные,
		НастройкиРабочегоМестаКассира);
КонецФункции

#КонецОбласти

// Проверяет наличие и заполненность параметров запроса. Допускается передавать пустой Пароль и ПараметрыМетода
//
// Параметры:
//  ПараметрыВыполненияЗапроса - Структура - исходные данные для передачи в запрос к сервису
//
// Возвращаемое значение:
//  ДанныеЗапросаКорректны - Булево - результат проверки 
//
Функция ПараметрыВыполненияЗапросаКорректны(ПараметрыВыполненияЗапроса)
	
	ДанныеЗапросаКорректны = Истина;
	
	Если ЗначениеЗаполнено(ПараметрыВыполненияЗапроса)
		И ТипЗнч(ПараметрыВыполненияЗапроса) = Тип("Структура") Тогда
		
		Для каждого Параметр Из ПараметрыВыполненияЗапроса Цикл
			
			Ключ = Параметр.Ключ;
			
			КлючИЗначениеЗаполнены = ПараметрыВыполненияЗапроса.Свойство(Ключ)
				И ЗначениеЗаполнено(Параметр.Значение);
				
				// Ключ и значение должны быть заполнены, 
				// но пароль, параметрыметода, тело запроса или порт подключения могут быть пустыми
				
				Если НЕ КлючИЗначениеЗаполнены Тогда
					
					Если (Ключ = "Пароль" Или Ключ = "ПараметрыМетода" Или Ключ = "ТелоЗапроса" Или Ключ = "ПортПодключения") Тогда
						Продолжить;
					Иначе
						
						ДанныеЗапросаКорректны = Ложь;
						Прервать;
						
					КонецЕсли;
						
				КонецЕсли;
				
		КонецЦикла;
	
	КонецЕсли;
	
	Возврат ДанныеЗапросаКорректны;
	
КонецФункции

// Добавляет параметры метода в ресурс метода 
//
// Параметры:
//  Ресурс - Строка - ресурс метода, имя конечной точки для обращения
//  ПараметрыВыполненияМетода - Структура - исходные данные параметров метода
//
Процедура ДобавитьПараметрыВРесурс(Ресурс, ПараметрыВыполненияМетода)
	
	Если ЗначениеЗаполнено(Ресурс)	И ЗначениеЗаполнено(ПараметрыВыполненияМетода)
		И ТипЗнч(ПараметрыВыполненияМетода) = Тип("Структура") Тогда
	
		ПараметрыМетодаСтрокой = "?";
		
		Для каждого Параметр Из ПараметрыВыполненияМетода Цикл
		
			ОбъединяющийСимвол = ?(СтрЗаканчиваетсяНа(ПараметрыМетодаСтрокой, "?"),
				"", "&");
			ПараметрыМетодаСтрокой = СтрШаблон("%1%2%3=%4",
				ПараметрыМетодаСтрокой, ОбъединяющийСимвол, Параметр.Ключ, Параметр.Значение);
		
		КонецЦикла;
		
		Ресурс = СтрШаблон("/%1/%2", Ресурс, ПараметрыМетодаСтрокой);

	КонецЕсли;
	
КонецПроцедуры

Функция СтруктураПараметровПодключения()
	
	СтруктураПараметровПодключения = Новый Структура;
	СтруктураПараметровПодключения.Вставить("ЭтоЗащищенноеСоединение", Ложь);
	СтруктураПараметровПодключения.Вставить("ПортПодключения", 80);
	СтруктураПараметровПодключения.Вставить("АдресСервера", "");
	СтруктураПараметровПодключения.Вставить("ИмяСервиса", "");
	СтруктураПараметровПодключения.Вставить("ОшибкаСтроки", Ложь);
	СтруктураПараметровПодключения.Вставить("Используется1СЛинк", Ложь);
	
	Возврат СтруктураПараметровПодключения;
	
КонецФункции

#КонецОбласти

#КонецОбласти




