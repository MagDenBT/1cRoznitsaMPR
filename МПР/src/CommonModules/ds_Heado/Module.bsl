
Процедура ВыполнитьОтправку(ДокументСсылка) Экспорт
	
	Если НЕ ПараметрыСеанса.ds_РазрешитьРаботуHeado Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	ДокументОбъект.ds_ОтправленВHeado = Отправить(ДокументСсылка);
	Если ДокументОбъект.ds_ОтправленВHeado Тогда 
		ДокументОбъект.Записать();
	КонецЕсли;	
	
КонецПроцедуры	

Функция Отправить(ДокументСсылка) Экспорт 
	
	Результат = Ложь;
	
	Если НЕ ПараметрыСеанса.ds_РазрешитьРаботуHeado Тогда
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		ГМ = Новый COMОбъект("Giftoman.ChequeApi");
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка отправки данных в Гифтоман'"), 
		УровеньЖурналаРегистрации.Ошибка,,, НСтр("ru = 'Не найдена DLL'"));
		Возврат Результат;
	КонецПопытки;
	
	Данные = ДанныеДляОтправки(ДокументСсылка);
	
	Если Данные = Неопределено Тогда 
		ГМ = Неопределено;
		Возврат Результат;
	КонецЕсли;
	
	Попытка	
		Если Данные.ВидОперации = "Продажа" Тогда
			ГМ.PurchaseOpen(Данные.СуммаДокумента, Данные.Продавец);
			
			Для Каждого Стр Из Данные.Оплата Цикл 
				Если Стр.ТипОплаты = "Наличные" Тогда
					ГМ.PurchaseAddAttr("paytype/cash", Формат(Стр.Сумма,"ЧРД=.; ЧГ=0"));
				Иначе
					ГМ.PurchaseAddAttr("paytype/card", Формат(Стр.Сумма,"ЧРД=.; ЧГ=0"));
				КонецЕсли;
			КонецЦикла;	
			
			Для Каждого Стр Из Данные.Товары Цикл ГМ.PurchaseAddItem(Стр.Номенклатура, Стр.Количество, Стр.Сумма, Стр.Группа, Стр.Продавец, Стр.КодНоменклатуры) КонецЦикла; 
			
			ГМ.PurchaseAddAttr("discount", Формат(Данные.СкидкаДокумента, "ЧРД=.; ЧГ=0"));
			ГМ.SetDateTime(Формат(УниверсальноеВремя(Данные.Дата), "ДФ=ггггММддЧЧммсс"));
			
			ГМ.PurchaseClose(Данные.УникальныйИдентификатор);
		Иначе	
			ГМ.RefundOpen(Данные.СуммаДокумента, Данные.Номер);
			Для Каждого Стр Из Данные.Товары Цикл ГМ.RefundAddItem(Стр.Номенклатура, Стр.Количество, Стр.Сумма, Стр.Группа, Стр.Продавец, Стр.КодНоменклатуры) КонецЦикла; 
			ГМ.RefundClose();
		КонецЕсли;
		
		Результат = Истина;
	Исключение
		ГМ = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка отправки данных в Гифтоман'"), УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	
	ГМ = Неопределено;
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеДляОтправки(ДокументСсылка)
	
	Результат = Неопределено;
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЧекККМ") Тогда 
		Результат = ДанныеЧекККМ(ДокументСсылка);
	КонецЕсли;
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		Результат = ДанныеВозвратТоваровОтПокупателя(ДокументСсылка);
	КонецЕсли;
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеализацияТоваров") Тогда
		Результат = ДанныеРеализацияТоваров(ДокументСсылка);			
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	

Функция ДанныеЧекККМ(ДокументСсылка)
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЧекККМ.СуммаДокумента КАК СуммаДокумента,
	|	ЧекККМ.Дата КАК Дата,
	|	ЧекККМ.Номер КАК Номер,
	|	ЕСТЬNULL(ЧекККМ.Продавец.Наименование, """") КАК Продавец,
	|	ЧекККМ.ВидОперации КАК ВидОперации,
	|	ЕСТЬNULL(ЧекККМ.Ответственный.Наименование, """") КАК Пользователь,
	|	ЧекККМ.Товары.(
	|		Номенклатура.Наименование КАК Номенклатура,
	|		Продавец.Наименование КАК Продавец,
	|		Характеристика.Наименование КАК Характеристика,
	|		Количество КАК Количество,
	|		Сумма КАК Сумма,
	|		ЕСТЬNULL(ds_КатегорияНоменклатуры.Наименование, """") КАК Категория,
	|		ЕСТЬNULL(Номенклатура.Родитель.Наименование, """") КАК ГруппаТовара2,
	|		ЕСТЬNULL(Номенклатура.Родитель.Родитель.Наименование, """") КАК ГруппаТовара1,
	|		ЕСТЬNULL(Номенклатура.Родитель.Родитель.Родитель.Наименование, """") КАК ГруппаТовара,
	|		Номенклатура.Код КАК НоменклатураКод,
	|		СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|		СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки
	|	) КАК Товары,
	|	ЧекККМ.Оплата.(
	|		ВидОплаты.ТипОплаты КАК ТипОплаты,
	|		Сумма КАК Сумма
	|	) КАК Оплата
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.Ссылка = &Ссылка
	|	И ЧекККМ.Проведен
	|	И НЕ ЧекККМ.ds_ОтправленВHeado";
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Результат = Новый Структура;
		Результат.Вставить("ВидОперации", XMLСтрока(Выборка.ВидОперации));
		Результат.Вставить("СуммаДокумента", Выборка.СуммаДокумента);
		Результат.Вставить("Дата", Выборка.Дата);
		Результат.Вставить("Номер", Выборка.Номер);
		Результат.Вставить("УникальныйИдентификатор", XMLСтрока(ДокументСсылка));
		
		Продавец = ?(Не ПустаяСтрока(Выборка.Продавец), СокрЛП(Выборка.Продавец), ?(Не ПустаяСтрока(Выборка.Пользователь), СокрЛП(Выборка.Пользователь), ""));
		Результат.Вставить("Продавец", Продавец);
		
		Оплата = Новый Массив;
		ВыборкаОплата = Выборка.Оплата.Выгрузить();
		Для Каждого Стр Из ВыборкаОплата Цикл 
			СтрокаОплаты = Новый Структура;
			СтрокаОплаты.Вставить("ТипОплаты", XMLСтрока(Стр.ТипОплаты));
			СтрокаОплаты.Вставить("Сумма", Стр.Сумма);
			Оплата.Добавить(СтрокаОплаты);
		КонецЦикла;	
		Результат.Вставить("Оплата", Оплата);
		
		СкидкаДокумента = 0;
		
		Товары = Новый Массив;
		ВыборкаТовары = Выборка.Товары.Выгрузить();
		Для Каждого Стр Из ВыборкаТовары Цикл
			Товар = Новый Структура;
			Товар.Вставить("Номенклатура", СокрЛП(Стр.Номенклатура) + ?(ЗначениеЗаполнено(Стр.Характеристика), " (" + СокрЛП(Стр.Характеристика) + ")", ""));
			Товар.Вставить("КодНоменклатуры", СокрЛП(Стр.НоменклатураКод));
			Товар.Вставить("Группа", ПолучитьГруппу(Стр));
			Товар.Вставить("Количество", Стр.Количество);
			Товар.Вставить("Сумма", Стр.Сумма);
			Товар.Вставить("Продавец", ?(Не ПустаяСтрока(Стр.Продавец), СокрЛП(Стр.Продавец), Продавец));
			Товары.Добавить(Товар);
			
			СкидкаДокумента = СкидкаДокумента + Стр.СуммаРучнойСкидки + Стр.СуммаАвтоматическойСкидки;
		КонецЦикла;
		Результат.Вставить("Товары", Товары);
		
		Результат.Вставить("СкидкаДокумента", СкидкаДокумента);
	КонецЕсли;	
			
	Возврат Результат;	
		
КонецФункции	
  
Функция ДанныеВозвратТоваровОтПокупателя(ДокументСсылка)	
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателя.СуммаДокумента КАК СуммаДокумента,
	|	ВозвратТоваровОтПокупателя.Номер КАК НомерДокумента,
	|	ЕСТЬNULL(ВозвратТоваровОтПокупателя.Продавец.Наименование, """") КАК Продавец,
	|	ЕСТЬNULL(ВозвратТоваровОтПокупателя.Ответственный.Наименование, """") КАК Пользователь,
	|	ВозвратТоваровОтПокупателя.Товары.(
	|		Номенклатура.Наименование КАК Номенклатура,
	|		Продавец.Наименование КАК Продавец,
	|		Характеристика.Наименование КАК Характеристика,
	|		Количество КАК Количество,
	|		Сумма КАК Сумма,
	|		"""" КАК Категория,
	|		ЕСТЬNULL(Номенклатура.Родитель.Наименование, """") КАК ГруппаТовара2,
	|		ЕСТЬNULL(Номенклатура.Родитель.Родитель.Наименование, """") КАК ГруппаТовара1,
	|		ЕСТЬNULL(Номенклатура.Родитель.Родитель.Родитель.Наименование, """") КАК ГруппаТовара
	|	) КАК Товары
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|ГДЕ
	|	ВозвратТоваровОтПокупателя.Ссылка = &Ссылка
	|	И ВозвратТоваровОтПокупателя.Проведен
	|	И НЕ ВозвратТоваровОтПокупателя.ds_ОтправленВHeado";
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Результат = Новый Структура;
		Результат.Вставить("ВидОперации", "Возврат");
		Результат.Вставить("СуммаДокумента", Выборка.СуммаДокумента);
		Результат.Вставить("НомерДокумента", Выборка.НомерДокумента);
		
		Продавец = ?(Не ПустаяСтрока(Выборка.Продавец), СокрЛП(Выборка.Продавец), ?(Не ПустаяСтрока(Выборка.Пользователь), СокрЛП(Выборка.Пользователь), ""));
		Результат.Вставить("Продавец", Продавец);
		
		Товары = Новый Массив;
		ВыборкаТовары = Выборка.Товары.Выгрузить();
		Для Каждого Стр Из ВыборкаТовары Цикл
			Товар = Новый Структура;
			Товар.Вставить("Номенклатура", СокрЛП(Стр.Номенклатура) + ?(ЗначениеЗаполнено(Стр.Характеристика), " (" + СокрЛП(Стр.Характеристика) + ")", ""));
			Товар.Вставить("Группа", ПолучитьГруппу(Стр));
			Товар.Вставить("Количество", Стр.Количество);
			Товар.Вставить("Сумма", Стр.Сумма);
			Товар.Вставить("Продавец", ?(Не ПустаяСтрока(Стр.Продавец), СокрЛП(Стр.Продавец), Продавец));
			Товары.Добавить(Товар);
		КонецЦикла;
		Результат.Вставить("Товары", Товары);
	КонецЕсли;	
			
	Возврат Результат;	

КонецФункции	
	
Функция ДанныеРеализацияТоваров(ДокументСсылка)
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваров.СуммаДокумента КАК СуммаДокумента,
	|	РеализацияТоваров.Номер КАК НомерДокумента,
	|	ЕСТЬNULL(РеализацияТоваров.Продавец.Наименование, """") КАК Продавец,
	|	ЕСТЬNULL(РеализацияТоваров.Ответственный.Наименование, """") КАК Пользователь,
	|	РеализацияТоваров.Товары.(
	|		Номенклатура.Наименование КАК Номенклатура,
	|		Продавец.Наименование КАК Продавец,
	|		Характеристика.Наименование КАК Характеристика,
	|		Количество КАК Количество,
	|		Сумма КАК Сумма,
	|		"""" КАК Категория,
	|		ЕСТЬNULL(Номенклатура.Родитель.Наименование, """") КАК ГруппаТовара2,
	|		ЕСТЬNULL(Номенклатура.Родитель.Родитель.Наименование, """") КАК ГруппаТовара1,
	|		ЕСТЬNULL(Номенклатура.Родитель.Родитель.Родитель.Наименование, """") КАК ГруппаТовара
	|	) КАК Товары
	|ИЗ
	|	Документ.РеализацияТоваров КАК РеализацияТоваров
	|ГДЕ
	|	РеализацияТоваров.Ссылка = &Ссылка
	|	И РеализацияТоваров.Проведен
	|	И НЕ РеализацияТоваров.ds_ОтправленВHeado";
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Результат = Новый Структура;
		Результат.Вставить("ВидОперации", "Продажа");
		Результат.Вставить("СуммаДокумента", Выборка.СуммаДокумента);
		Результат.Вставить("Номер", Выборка.НомерДокумента);
		
		Продавец = ?(Не ПустаяСтрока(Выборка.Продавец), СокрЛП(Выборка.Продавец), ?(Не ПустаяСтрока(Выборка.Пользователь), СокрЛП(Выборка.Пользователь), ""));
		Результат.Вставить("Продавец", Продавец);
		
		Товары = Новый Массив;
		ВыборкаТовары = Выборка.Товары.Выгрузить();
		Для Каждого Стр Из ВыборкаТовары Цикл
			Товар = Новый Структура;
			Товар.Вставить("Номенклатура", СокрЛП(Стр.Номенклатура) + ?(ЗначениеЗаполнено(Стр.Характеристика), " (" + СокрЛП(Стр.Характеристика) + ")", ""));
			Товар.Вставить("Группа", ПолучитьГруппу(Стр));
			Товар.Вставить("Количество", Стр.Количество);
			Товар.Вставить("Сумма", Стр.Сумма);
			Товар.Вставить("Продавец", ?(Не ПустаяСтрока(Стр.Продавец), СокрЛП(Стр.Продавец), Продавец));
			Товары.Добавить(Товар);
		КонецЦикла;
		Результат.Вставить("Товары", Товары);
	КонецЕсли;	
			
	Возврат Результат;
	
КонецФункции

Функция ПолучитьГруппу(СтрокаТовары)
	
	ВыводимыеДанные = Новый Массив;
	
	Запись = Новый Структура;
	Запись.Вставить("Параметр", ?(ЗначениеЗаполнено(СтрокаТовары.ГруппаТовара), СокрЛП(СтрокаТовары.ГруппаТовара), ""));
	ВыводимыеДанные.Добавить(Запись);
	
	Запись = Новый Структура;
	Запись.Вставить("Параметр", ?(ЗначениеЗаполнено(СтрокаТовары.ГруппаТовара1), СокрЛП(СтрокаТовары.ГруппаТовара1), ""));
	ВыводимыеДанные.Добавить(Запись);
	
	Запись = Новый Структура;
	Запись.Вставить("Параметр", ?(ЗначениеЗаполнено(СтрокаТовары.ГруппаТовара2), СокрЛП(СтрокаТовары.ГруппаТовара2), ""));
	ВыводимыеДанные.Добавить(Запись);

	Запись = Новый Структура;
	Запись.Вставить("Параметр", ?(ЗначениеЗаполнено(СтрокаТовары.Категория), СокрЛП(СтрокаТовары.Категория), ""));
	ВыводимыеДанные.Добавить(Запись);
	
	Группа = "";
	Для Каждого Стр из ВыводимыеДанные Цикл 
		Если ЗначениеЗаполнено(Стр.Параметр) Тогда
			Если ЗначениеЗаполнено(Группа) Тогда
				Группа =  Группа + "&&" + Стр.Параметр;
			Иначе
				Группа = Стр.Параметр;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Группа;
	
КонецФункции
