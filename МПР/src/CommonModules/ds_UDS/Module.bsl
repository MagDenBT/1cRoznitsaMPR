//API UDS V2

Функция ПолучитьИнформациюССервера2(КодUDS) Экспорт
	ПараметрыКомпании = "partner/v2/settings"; //https://api.uds.app/partner/v2/settings
	Если СтрДлина(КодUDS) = 6 Тогда
		ПараметрыПользователяUDS = "/partner/v2/customers/find?code=" + КодUDS;
		// теперь есть два варианта https://api.uds.app/partner/v2/customers/find?code=456123&phone=+71234567898&uid=23684cea-ca50-4c5c-b399-eb473e85b5ad
		// и 'https://api.uds.app/partner/v2/customers/'.$customerId
	ИначеЕсли СтрДлина(КодUDS) = 10 Тогда
		ПараметрыПользователяUDS = "/partner/v2/customers/find?phone=%2B7" + КодUDS;
	Иначе
		ПараметрыПользователяUDS = "/partner/v2/customers/find?uid=" + КодUDS;
	КонецЕсли;
	
	СтруктураОтветаОКомпании = ОтправитьЗапросНаСерверUDS2(ПараметрыКомпании,"Получить");
	СтруктураОтвета = ОтправитьЗапросНаСерверUDS2(ПараметрыПользователяUDS,"Получить",,КодUDS);
	
	Если НЕ СтруктураОтветаОКомпании = Ложь И НЕ СтруктураОтвета = Ложь Тогда 
		Для Каждого СтрокаСтруктуры из СтруктураОтветаОКомпании Цикл
			СтруктураОтвета.Вставить(СтрокаСтруктуры.Ключ, СтрокаСтруктуры.Значение);
		КонецЦикла;	
	КонецЕсли;
	//СтруктураОтвета.Вставить("КодUDS",КодUDS);
	
	Если СтрДлина(КодUDS) = 10 Тогда
		Если НЕ СтруктураОтвета = Ложь Тогда
			СтруктураОтвета.user.participant.points = 0;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
КонецФункции

Функция ОтправитьЗапросНаСерверUDS2(ПараметрыЗапроса,РежимСоединения,СтрокаJSON="",КодUDS="")
	
	НастройкиUDS = НастройкиUDS();
	
	ApiKey = НастройкиUDS.ApiKey;
	IDКомпании = НастройкиUDS.IDКомпании;
	
	Если ApiKey = "" ИЛИ IDКомпании = "" Тогда
		СтруктураОтвета = Новый Структура;
		СтруктураОтвета.Вставить("errorCode", "forbidden");
		Возврат СтруктураОтвета;
	КонецЕсли;
	Сервер = "api.uds.app";
	XOriginRequestId = Строка(Новый УникальныйИдентификатор());
	XTimestamp = Строка(Формат(ТекущаяДата(), "ДФ=yyyy-MM-ddT05hh:mm:ssZ"));
	
	ВременныйФайл = ПолучитьИмяВременногоФайла();
	Запись = Новый ЗаписьТекста(ВременныйФайл, КодировкаТекста.OEM);
    Запись.Записать(Строка(IDКомпании)+":"+Строка(ApiKey));
    Запись.Закрыть();
	ДвДанные = Новый ДвоичныеДанные(ВременныйФайл);
	
	СтрокаАвторизации = "";
	МассивПодстрок = РазложитьСтрокуВМассивПодстрок(Base64Строка(ДвДанные),Символы.ПС);
	Для Ит = 1 по МассивПодстрок.Количество() Цикл
		СтрокаАвторизации = СтрокаАвторизации + ?(Ит = МассивПодстрок.Количество(), МассивПодстрок[Ит - 1], Лев(МассивПодстрок[Ит - 1], СтрДлина(МассивПодстрок[Ит - 1])-1));
	КонецЦикла;
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL();
	HTTPСоединение = Новый HTTPСоединение(Сервер,,,,,10,ssl);
	
	ТекстЗапроса = Новый HTTPЗапрос;
	ТекстЗапроса.Заголовки.Вставить("Accept", "application/json");
	ТекстЗапроса.Заголовки.Вставить("Content-Type", "application/json");
	ТекстЗапроса.Заголовки.Вставить("X-Origin-Request-Id", Строка(XOriginRequestId));
	ТекстЗапроса.Заголовки.Вставить("X-Timestamp", Строка(XTimestamp));
	ТекстЗапроса.Заголовки.Вставить("Authorization", "Basic " + СтрокаАвторизации);
	ТекстЗапроса.АдресРесурса = ПараметрыЗапроса;
	ТекстЗапроса.УстановитьТелоИзСтроки(СтрокаJSON, "windows-1251", ИспользованиеByteOrderMark.НеИспользовать);
	
	Если РежимСоединения = "Получить" Тогда
		Ответ = HTTPСоединение.Получить(ТекстЗапроса);
	ИначеЕсли РежимСоединения = "Отправить" Тогда
		Ответ = HTTPСоединение.ОтправитьДляОбработки(ТекстЗапроса);
	ИначеЕсли РежимСоединения = "Возврат" Тогда
		Ответ = HTTPСоединение.ОтправитьДляОбработки(ТекстЗапроса);	
	КонецЕсли;
	РезультатОтвета = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	
	ЧтениеИнформацииОтСервера = Новый ЧтениеJSON;
	ЧтениеИнформацииОтСервера.УстановитьСтроку(РезультатОтвета);
	СтруктураОтвета = ПрочитатьJSON(ЧтениеИнформацииОтСервера);
	
	СтруктураОтвета = ПроверкаНаОшибки2(СтруктураОтвета,РежимСоединения,КодUDS);
	Если СтруктураОтвета = Ложь Тогда
		Отказ = Истина;
		Возврат Ложь;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
КонецФункции

Функция РазложитьСтрокуВМассивПодстрок(Знач Значение, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, 
	СокращатьНепечатаемыеСимволы = Ложь) Экспорт
	
	Если Разделитель = "," 
		И ПропускатьПустыеСтроки = Неопределено 
		И СокращатьНепечатаемыеСимволы Тогда 
		
		Результат = СтрРазделить(Значение, ",", Ложь);
		Для Индекс = 0 По Результат.ВГраница() Цикл
			Результат[Индекс] = СокрЛП(Результат[Индекс])
		КонецЦикла;
		Возврат Результат;
		
	КонецЕсли;
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Значение) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = СтрНайти(Значение, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Значение, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Значение = Сред(Значение, Позиция + СтрДлина(Разделитель));
		Позиция = СтрНайти(Значение, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Значение) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Значение));
		Иначе
			Результат.Добавить(Значение);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

Функция ПроверкаНаОшибки2(СтруктураОтвета, Режим, КодUDS="")
	Для Каждого ПроверяемаяСтрока из СтруктураОтвета Цикл
		Если ПроверяемаяСтрока.Ключ = "errorCode" Тогда
			Если ПроверяемаяСтрока.Значение = "forbidden" Тогда
				Сообщить("Ключ АПИ не совпадает со значением на сервере. Используйте обработку Ввести Апи Ключ");
			ИначеЕсли ПроверяемаяСтрока.Значение = "notFound" Тогда
				Если Режим = "Получить" Тогда
					Если СтрДлина(КодUDS) = 10 Тогда
						Сообщить("Клиент с указанным номером телефона обслуживается впервые. Баллы будут начисленны по номеру телефона.");
					Иначе
						Сообщить("По данному коду имя клиента не найдено! Проверьте код скидки и сделайте поиск дисконтной карты ещё раз! Транзакция прервана!");
					КонецЕсли;
				ИначеЕсли Режим = "Отправить" Тогда
					Сообщить("Код на проведение оплаты не актуален, введите код скидки или номер телефона повторно.");
				ИначеЕсли Режим = "Возврат" Тогда
					Сообщить("Номер операции для возврата не найден");
				КонецЕсли;
			ИначеЕсли ПроверяемаяСтрока.Значение = "discountLimitExceed" Тогда
				Сообщить("Превышен процент счета, доступный к погашению баллами");
			ИначеЕсли ПроверяемаяСтрока.Значение = "badRequest" Тогда
				Если СтруктураОтвета.errors[0].errorCode = "invalid.phoneNumber" Тогда
					Сообщить("Ошибка в номере телефона! Транзакция прервана!");
				ИначеЕсли СтруктураОтвета.errors[0].errorCode = "uuid.invalid" Тогда
					Сообщить("Ошибка в идентификаторе клиента! Транзакция прервана!");
				Иначе
					Сообщить("Возвращаемая ошибка: "+СтруктураОтвета.errors[0].type+"; "+СтруктураОтвета.errors[0].message+"; "+СтруктураОтвета.errors[0].field);
				КонецЕсли;
			ИначеЕсли ПроверяемаяСтрока.Значение = "insufficientFunds" Тогда
				Сообщить("Попытка списания баллов больше чем есть у клиента на балансе");
			ИначеЕсли ПроверяемаяСтрока.Значение = "companyIsInactive" Тогда
				Сообщить("Компания не активна. Продлите пожалуйста подписку UDS");
			ИначеЕсли ПроверяемаяСтрока.Значение = "invalidChecksum" Тогда
				Сообщить("Не верная контрольная сумма. Сумма оплаты + сумма баллов должна равняться сумме докумета реализации");
			ИначеЕсли ПроверяемаяСтрока.Значение = "cashierNotFound" Тогда
				Сообщить("Внешний идентификатор кассира не совпадает с именем пользователя! Транзакция на сервере отменена! Баллы не начислены и не списаны! Исправьте ошибку и проведите процедуру оплаты заново, либо проведите оплату по мобильному приложению UDS Cashier");
			ИначеЕсли ПроверяемаяСтрока.Значение = "withdrawNotPermitted" Тогда
				Сообщить("По номеру телефона невозможно списывать баллы, только накапливать");
			КонецЕсли;
			Отказ = Истина;
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Если Режим = "Отправить" Тогда
		Сообщить("Оплата на сервере UDS Game выполнена успешно!");
	ИначеЕсли Режим = "Возврат" Тогда
		Сообщить("Возврат на сервере UDS Game выполнен успешно!");
	КонецЕсли;
	Возврат СтруктураОтвета;
КонецФункции

Функция ПровестиОплатуНаСервереUDS2(СтруктураОтправкиДанных) Экспорт
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ПроверятьСтруктуру = Истина;
	
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, "");	
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтправкиДанных);
	СтрокаJSON = ЗаписьJSON.Закрыть();
	ПараметрыЗапроса = "partner/v2/operations";
	
	СтруктураОтвета = ОтправитьЗапросНаСерверUDS2(ПараметрыЗапроса,"Отправить",СтрокаJSON);
	//ПроверкаНаОшибки2(СтруктураОтвета, "Отправить");
	Если НЕ СтруктураОтвета = Ложь Тогда
		Если НЕ СтруктураОтвета.Свойство("errorCode") Тогда
			IDОперации = Формат(СтруктураОтвета.id,"ЧН=0; ЧГ=");
		Иначе
			IDОперации = "";
		КонецЕсли;
	КонецЕсли;
	Возврат IDОперации;
КонецФункции

Процедура ВыполнитьВозвратБалловUDS2(ЧекККМСсылка,СуммаВозврата) Экспорт
	
	Если ЗначениеЗаполнено(ЧекККМСсылка) Тогда 
		IDОперации = ЧекККМСсылка.Комментарий;
	
		СтруктураОтправкиДанных = Новый Структура;
		СтруктураОтправкиДанных.Вставить("partialAmount",СуммаВозврата);
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.ПроверятьСтруктуру = Истина;
		
		ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, "");	
		ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
		ЗаписатьJSON(ЗаписьJSON, СтруктураОтправкиДанных);
		СтрокаJSON = ЗаписьJSON.Закрыть();
		ПараметрыВозврата = "/partner/v2/operations/"+IDОперации+"/refund";
		СтруктураОтветаОВозврате = ОтправитьЗапросНаСерверUDS2(ПараметрыВозврата,"Возврат",СтрокаJSON);
		ОстаткиБонусныхБаллов = ПроверкаБонусныхБалловДК(ЧекККМСсылка.ДисконтнаяКарта);
		СписатьБаллыСДК(ЧекККМСсылка.ДисконтнаяКарта,СуммаВозврата-ЧекККМСсылка.СуммаДокумента);  
	КонецЕсли;	
		
КонецПроцедуры

Процедура НачислитьБаллыНаДК(ДисконтнаяКарта,НачисляемыеБаллы) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	НачислимБонусы = Документы.НачислениеИСписаниеБонусныхБаллов.СоздатьДокумент();
	НачислимБонусы.Дата = ТекущаяДата();
	НачислимБонусы.БонуснаяПрограммаЛояльности = Справочники.БонусныеПрограммыЛояльности.UDS;
	ДобавимСтроку = НачислимБонусы.Начисление.Добавить();
	ДобавимСтроку.ДисконтнаяКарта = ДисконтнаяКарта;
	ДобавимСтроку.Баллы = НачисляемыеБаллы;
	НачислимБонусы.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Оперативный);
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

Процедура СписатьБаллыСДК(ДисконтнаяКарта,СписываемыеБаллы) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	СпишемБонусы = Документы.НачислениеИСписаниеБонусныхБаллов.СоздатьДокумент();
	СпишемБонусы.Дата = ТекущаяДата();
	СпишемБонусы.БонуснаяПрограммаЛояльности = Справочники.БонусныеПрограммыЛояльности.UDS;
	ДобавимСтроку = СпишемБонусы.Списание.Добавить();
	ДобавимСтроку.ДисконтнаяКарта = ДисконтнаяКарта;
	ДобавимСтроку.Баллы = СписываемыеБаллы;
	СпишемБонусы.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Оперативный);
	УстановитьПривилегированныйРежим(Ложь);
		
КонецПроцедуры

Функция ПроверкаБонусныхБалловДК(ДисконтнаяКарта) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	ОстаткиБонусныхБаллов = БонусныеБаллыСервер.ОстаткиИДвиженияБонусныхБаллов(ДисконтнаяКарта,КонецДня(ТекущаяДата()));
	УстановитьПривилегированныйРежим(Ложь);
	Возврат ОстаткиБонусныхБаллов[0].Сумма;
КонецФункции

Процедура ДобавитьIDUDSВДок(IDОперацииUDS,ЧекККМСсылка) Экспорт
	ДобавимIDВДок = ЧекККМСсылка.ПолучитьОбъект();
	ДобавимIDВДок.Комментарий = IDОперацииUDS;
	ДобавимIDВДок.Записать();
КонецПроцедуры

Функция ПроверитьРежимОбъединенияСкидок() Экспорт
	Режим = НастройкиUDS().РежимОбъединенияСкидок;
	
	Если Режим = Перечисления.ds_РежимыОбъединенияСкидок.НеНачислятьНаСуммуДругихСкидок Тогда
		Возврат "НеНачислятьНаСуммуДругихСкидок";
	ИначеЕсли Режим = Перечисления.ds_РежимыОбъединенияСкидок.НеНачислятьНаТоварыСоСкидкой Тогда
		Возврат "НеНачислятьНаТоварыСоСкидкой";
	Иначе
		Возврат "НачислятьНаВсе";
	КонецЕсли;
КонецФункции

Процедура ПровестиДополнительноеНачисление(ДК,Сумма) Экспорт
	
	НастройкиUDS = НастройкиUDS();
	
	Если НастройкиUDS.ДополнительныеНачисленияЗаНаличнуюОплату Тогда
		ПараметрыЗапроса = "partner/v2/operations/reward";
		МассивДК = Новый Массив;
		МассивДК.Добавить(ДК.КодКарты);
		ПроцентДоначисления = НастройкиUDS.ПроцентДополнительныхНачислений;
		Если Не ЗначениеЗаполнено(ПроцентДоначисления) Тогда
			ПроцентДоначисления = 0;
		КонецЕсли;
		СтруктураОтправкиДанных = Новый Структура;
		СтруктураОтправкиДанных.Вставить("points",Окр(Сумма*ПроцентДоначисления/100,0));
		СтруктураОтправкиДанных.Вставить("comment","Дополнительное начисление баллов за оплату наличными");
		СтруктураОтправкиДанных.Вставить("participants",МассивДК);
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.ПроверятьСтруктуру = Истина;
		
		ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, "");	
		ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
		ЗаписатьJSON(ЗаписьJSON, СтруктураОтправкиДанных);
		СтрокаJSON = ЗаписьJSON.Закрыть();
		
		РезультатДоначисления = ОтправитьЗапросНаСерверUDS2(ПараметрыЗапроса,"Отправить",СтрокаJSON);
	КонецЕсли;
КонецПроцедуры

Функция ВернутьВидОплатыНаличные() Экспорт
	Возврат Справочники.ВидыОплатЧекаККМ.Наличные;
КонецФункции

Функция Транслитерация(Слово) Экспорт 

	 НовоеСлово= "";
	 спТранслит = Новый СписокЗначений;
	 
	 спТранслит.Добавить("й","j");
	 спТранслит.Добавить("ц","c");
	 спТранслит.Добавить("у","u");
	 спТранслит.Добавить("к","k");
	 спТранслит.Добавить("е","e");
	 спТранслит.Добавить("н","n");
	 спТранслит.Добавить("г","g");
	 спТранслит.Добавить("ш","sh");
	 спТранслит.Добавить("щ","sch");
	 спТранслит.Добавить("з","z");
	 спТранслит.Добавить("х","h");
	 спТранслит.Добавить("ъ","_");
	 спТранслит.Добавить("ф","f");
	 спТранслит.Добавить("ы","y");
	 спТранслит.Добавить("в","v");
	 спТранслит.Добавить("а","a"); 
	 спТранслит.Добавить("п","p"); 
	 спТранслит.Добавить("р","r"); 
	 спТранслит.Добавить("о","o"); 
	 спТранслит.Добавить("л","l"); 
	 спТранслит.Добавить("д","d"); 
	 спТранслит.Добавить("ж","zh"); 
	 спТранслит.Добавить("э","je"); 
	 спТранслит.Добавить("я","ja"); 
	 спТранслит.Добавить("ч","ch"); 
	 спТранслит.Добавить("с","s"); 
	 спТранслит.Добавить("м","m"); 
	 спТранслит.Добавить("и","i"); 
	 спТранслит.Добавить("т","t"); 
	 спТранслит.Добавить("ь","_"); 
	 спТранслит.Добавить("б","b"); 
	 спТранслит.Добавить("ю","ju");
	 спТранслит.Добавить("ё","jo");
	 //////Укр
	 ////спТранслит.Добавить("je","є");
	 ////спТранслит.Добавить("i'","ї");
	 ////спТранслит.Добавить("i","і");
	 //Лат
	 спТранслит.Добавить("i","i"); 
	 спТранслит.Добавить("q","q");
	 спТранслит.Добавить("w","w");
	 спТранслит.Добавить("e","e");
	 спТранслит.Добавить("r","r");
	 спТранслит.Добавить("t","t");
	 спТранслит.Добавить("y","y");
	 спТранслит.Добавить("u","u");
	 спТранслит.Добавить("i","i");
	 спТранслит.Добавить("o","o");
	 спТранслит.Добавить("p","p");
	 спТранслит.Добавить("","");
	 спТранслит.Добавить("a","a");
	 спТранслит.Добавить("s","s");
	 спТранслит.Добавить("d","d");
	 спТранслит.Добавить("f","f");
	 спТранслит.Добавить("g","g");
	 спТранслит.Добавить("h","h");
	 спТранслит.Добавить("j","j");
	 спТранслит.Добавить("k","k");
	 спТранслит.Добавить("l","l");
	 спТранслит.Добавить("z","z");
	 спТранслит.Добавить("x","x");
	 спТранслит.Добавить("c","c");
	 спТранслит.Добавить("v","v");
	 спТранслит.Добавить("b","b");
	 спТранслит.Добавить("n","n");
	 спТранслит.Добавить("m","m");
	  
	 спТранслит.Добавить(" ","_");
	 спТранслит.Добавить("""","""");
	 спТранслит.Добавить("-","_");
	 спТранслит.Добавить(".","_");
	 спТранслит.Добавить(",","_");
	 спТранслит.Добавить("/","_");
	 спТранслит.Добавить("\","_");
	 спТранслит.Добавить("*","_");
	 спТранслит.Добавить("#","_");  
	 спТранслит.Добавить("#","_"); 
	 спТранслит.Добавить("|","_"); 
	 
	 спТранслит.Добавить("!","_"); 
	 спТранслит.Добавить("?","_"); 
	 
	 спТранслит.Добавить("$","_"); 
	 спТранслит.Добавить("%","_"); 
	 спТранслит.Добавить("@","_"); 
	 спТранслит.Добавить("&","_"); 
	 спТранслит.Добавить("=","_"); 
	 спТранслит.Добавить("+","_"); 
	 
	 спТранслит.Добавить("~","_"); 
	 спТранслит.Добавить("'","_"); 
	 спТранслит.Добавить("`","_"); 
	 спТранслит.Добавить(":","_"); 
	 спТранслит.Добавить(";","_"); 
	 
	 спТранслит.Добавить("(","_");
	 спТранслит.Добавить(")","_");  
	 спТранслит.Добавить("[","_"); 
	 спТранслит.Добавить("]","_");  
	 спТранслит.Добавить("}","_"); 
	 спТранслит.Добавить("{","_");
	 спТранслит.Добавить("0","0");
	 спТранслит.Добавить("1","1");
	 спТранслит.Добавить("2","2");
	 спТранслит.Добавить("3","3");
	 спТранслит.Добавить("4","4");
	 спТранслит.Добавить("5","5");
	 спТранслит.Добавить("6","6");
	 спТранслит.Добавить("7","7");
	 спТранслит.Добавить("8","8");  
	 спТранслит.Добавить("9","9");
	 Для а=1 по СтрДлина(Слово) Цикл
	  НовоеСлово = НовоеСлово + спТранслит.НайтиПоЗначению(НРЕГ(Сред(Слово,а,1)));
	 КонецЦикла; 
	 
	 Возврат НРЕГ(НовоеСлово);
	
 КонецФункции
 
Функция НастройкиUDS()
 	
 	Запрос = Новый Запрос;
 	Запрос.Текст = 
 	"ВЫБРАТЬ ПЕРВЫЕ 1
 	|	ds_НастройкиUDS.ApiKey,
 	|	ds_НастройкиUDS.IDКомпании,
 	|	ds_НастройкиUDS.ПроцентДополнительныхНачислений,
 	|	ds_НастройкиUDS.РежимОбъединенияСкидок,
 	|	ds_НастройкиUDS.ДополнительныеНачисленияЗаНаличнуюОплату
 	|ИЗ
 	|	Справочник.ds_НастройкиUDS КАК ds_НастройкиUDS";
 	
 	Выборка = Запрос.Выполнить().Выбрать();
 	Выборка.Следующий();
 	
 	Возврат Выборка;
 	
 КонецФункции
 
Функция ЭтоКартаUDS(ДисконтнаяКарта) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИнформационныеКарты.Ссылка
	|ИЗ
	|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	|ГДЕ
	|	ИнформационныеКарты.Ссылка = &Ссылка
	|	И ИнформационныеКарты.ВидДисконтнойКарты = ЗНАЧЕНИЕ(Справочник.ВидыДисконтныхКарт.UDS)";
	Запрос.УстановитьПараметр("Ссылка", ДисконтнаяКарта);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции