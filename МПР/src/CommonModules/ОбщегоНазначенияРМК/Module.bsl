
///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Настраивает подключаемое оборудование в форме,
// устанавливает флаг ИспользоватьПодключаемоеОборудование в форме.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой необходимо настроить подключаемое оборудование;
//  ПрефиксыЭлементовФормы - Строка - префиксы элементов формы.
//
Процедура НастроитьПодключаемоеОборудование(Форма, ПрефиксыЭлементовФормы = "Товары") Экспорт
	
	ТипыПодключенногоОборудования = ПодключаемоеОборудованиеРМКПовтИсп.ТипыПодключенногоОборудования();
	
	Форма.ИспользоватьПодключаемоеОборудование = ИспользоватьПодключаемоеОборудование(ТипыПодключенногоОборудования);
	
	ЕстьВесы = ТипыПодключенногоОборудования <> Неопределено
		И ТипыПодключенногоОборудования.Найти(Перечисления.ТипыПодключаемогоОборудования.ЭлектронныеВесы) <> Неопределено;
		
	ОбщегоНазначенияРМККлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ПолучитьВес",
			"Видимость",
			ЕстьВесы);
			
	ОбщегоНазначенияРМККлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ОткрытьПараметрыТарирования",
			"Видимость",
			ЕстьВесы);
			
КонецПроцедуры

// Проверяет, что включена ф.о "Использовать подключаемое оборудование",
// настроено ли оборудование и авторизовался пользователь,
// а не внешний пользователь.
Функция ИспользоватьПодключаемоеОборудование(ТипыПодключенногоОборудования = Неопределено) Экспорт
	
	ИспользоватьПодключаемоеОборудование = ПолучитьФункциональнуюОпцию("ИспользоватьПодключаемоеОборудование");
	ПользовательАвторизовался 	= 
		ТипЗнч(Пользователи.АвторизованныйПользователь()) = Тип("СправочникСсылка.Пользователи");
	
	Если ТипыПодключенногоОборудования = Неопределено Тогда
		ТипыПодключенногоОборудования = ПодключаемоеОборудованиеРМКПовтИсп.ТипыПодключенногоОборудования();
	КонецЕсли;
	
	Возврат
		ИспользоватьПодключаемоеОборудование
		И ПользовательАвторизовался
		И ТипыПодключенногоОборудования <> Неопределено
		И ТипыПодключенногоОборудования.Количество() > 0;
												 
КонецФункции

// Добавляет в таблицу значений строки из другой таблицы значений и 
// в них значения колонок с совпадающими наименованиями.
//
// Параметры:
//  ТаблицаИсточник - ТаблицаЗначений -  таблица значений, откуда берутся значения.
//  ТаблицаПриемник - ТаблицаЗначений - таблица значений, куда добавляются строки.
//  ОчищатьПриемник - Булево - признак очистки таблицы приемника.
//  ИсключаяСвойства - Строка - перечень имен свойств к исключению.
//
Процедура ЗагрузитьВТаблицуЗначений(ТаблицаИсточник, ТаблицаПриемник, ОчищатьПриемник = Ложь,
	ИсключаяСвойства = "") Экспорт

	Если ОчищатьПриемник Тогда
		ТаблицаПриемник.Очистить();
	КонецЕсли;
	
	// Заполним значения в совпадающих колонках.
	Для Каждого СтрокаТаблицыИсточника Из ТаблицаИсточник Цикл

		СтрокаТаблицыПриемника = ТаблицаПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника,, ИсключаяСвойства);

	КонецЦикла;

КонецПроцедуры

// Адрес торгового объекта.
//
// Параметры:
//  ТорговыйОбъект - СправочникСсылка.ТорговыеОбъекты - магазин для получения адреса.
//
Процедура АдресТорговогоОбъекта(АдресМагазина, ТорговыйОбъект) Экспорт
	ОбщегоНазначенияРМКПереопределяемый.АдресТорговогоОбъекта(АдресМагазина, ТорговыйОбъект);
КонецПроцедуры

// Получаем контрагента по ИНН и КПП
// Параметры:
//  ИНН - Строка
//  КПП - Строка
//
// Возвращаемое значение:
//  Справочники.Контрагенты.Ссылка
//
Функция КонтрагентПоИННКПП(ИНН, КПП) Экспорт;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН
	|	И Контрагенты.КПП = &КПП";
	
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("КПП", КПП);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Выполняет установку параметров сеанса. Вызывается из модуля сеанса.
//
// Параметры:
//  ИмяПараметра - Строка - строка с именем параметра сеанса.
//  УстановленныеПараметры - Массив - массив всех установленных параметров сеанса.
//
Процедура УстановитьПараметрыСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если ИмяПараметра = "ТекущийТорговыйОбъект" Тогда
		ПараметрыСеанса[ИмяПараметра] = ОпределитьТекущийТорговыйОбъект();
		УстановленныеПараметры.Добавить(ИмяПараметра);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает выбранную настройку РМК для текущего рабочего места.
// Если находит настройки РМК, связанные с текущим рабочим местом, удаляет эти связи
//
// Параметры:
//  НастройкаРМК - СправочникСсылка.НастройкиРМК - настройки рмк
//
Процедура УстановитьНастройкуРМКДляТекущегоРабочегоМеста(НастройкаРМК) Экспорт

		ТекущееРабочееМесто = ПараметрыСеанса.РабочееМестоКлиента;
		
		Если НЕ ЗначениеЗаполнено(ТекущееРабочееМесто) Тогда
			ТекущееРабочееМесто = МенеджерОборудованияВызовСервера.РабочееМестоКлиента();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НастройкаРМК) Тогда
			
			// найти настройки, ранее заданные для текущего рабочего места
			Запрос = Новый Запрос("ВЫБРАТЬ
			|	НастройкиРабочегоМестаКассира.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.НастройкиРабочегоМестаКассира КАК НастройкиРабочегоМестаКассира
			|ГДЕ
			|	НЕ НастройкиРабочегоМестаКассира.ПометкаУдаления
			|	И НастройкиРабочегоМестаКассира.РабочееМесто = &ТекущееРабочееМесто
			|	И НЕ НастройкиРабочегоМестаКассира.Ссылка = &ВыбраннаяНастройка");
			Запрос.УстановитьПараметр("ТекущееРабочееМесто", ТекущееРабочееМесто);
			Запрос.УстановитьПараметр("ВыбраннаяНастройка", НастройкаРМК);
			ВыборкаНастроекРМК = Запрос.Выполнить().Выбрать();
			
			
			ОтсутствиеРабочегоМеста = Справочники.РабочиеМеста.ПустаяСсылка();
			
			// снять соответствие
			Пока ВыборкаНастроекРМК.Следующий() Цикл
				
				НастройкаДляИзменения = ВыборкаНастроекРМК.Ссылка.ПолучитьОбъект();
				НастройкаДляИзменения.РабочееМесто = ОтсутствиеРабочегоМеста;
				НастройкаДляИзменения.Записать();
				
			КонецЦикла;
			
			// назначить выбранную настройку текущему рабочему месту
			ВыбраннаяНастройкаДляИзменения = НастройкаРМК.ПолучитьОбъект();
			ВыбраннаяНастройкаДляИзменения.РабочееМесто = ТекущееРабочееМесто;
			ВыбраннаяНастройкаДляИзменения.Записать();
			
		КонецЕсли;

КонецПроцедуры

// Возвращает текущий торговый объект, который далее используется в РМК.
//
// ВозвращаемоеЗначение:
//  СправочникСсылка.ТорговыеОбъекты - текущий торговый объект РМК.
//
Функция ОпределитьТекущийТорговыйОбъект() Экспорт
	Возврат ОбщегоНазначенияРМКПереопределяемый.ОпределитьТекущийТорговыйОбъект();
КонецФункции

// Определяет необходимость запуска нового РМК
//
// Параметры:
//  ЗапуститьНовыйРМК - Булево
//
Процедура ОпределитьРежимЗапуска(ЗапуститьНовыйРМК) Экспорт
	
	ОбщегоНазначенияРМКПереопределяемый.ОпределитьРежимЗапуска(ЗапуститьНовыйРМК);
	Если ЗапуститьНовыйРМК Тогда
		НастроитьРабочийСтолДляНовогоРМК();
	КонецЕсли;
	
КонецПроцедуры

// Настраивает состав форм начальной страницы приложения
//
Процедура НастроитьРабочийСтолДляНовогоРМК() Экспорт
	
	НастройкиНачальнойСтраницы = Новый НастройкиНачальнойСтраницы;
	СоставФорм = Новый СоставФормНачальнойСтраницы;
	СоставФорм.ЛеваяКолонка.Добавить("Обработка.РабочееМестоКассира.Форма.ФормаРМК");
	НастройкиНачальнойСтраницы.УстановитьСоставФорм(СоставФорм);
	ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиНачальнойСтраницы",, НастройкиНачальнойСтраницы);
	
КонецПроцедуры

// Определяет факт наличия синхронизации РМК с мастер - системой
//
Функция НастройкаСинхронизацииДанныхСуществует() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ОбменСУРМК.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.ОбменСУРМК КАК ОбменСУРМК
	|ГДЕ
	|	НЕ ОбменСУРМК.ЭтотУзел
	|";

	Запрос = Новый Запрос(ТекстЗапроса);
	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Вспомогательный метод для обработки JSON на web - клиенте
//
// Параметры:
//  СтрокаJSON - Строка - исходные данные в формате JSON
// 
// ВозвращаемоеЗначение:
//  Результат - Структура, Неопределено - результат разбора ответа
//
Функция ОбработатьJSONСервер(СтрокаJSON) Экспорт
	
	Результат = Неопределено;
	
	Если ЗначениеЗаполнено(СтрокаJSON) Тогда
		
		ЧтениеОтвета = Новый ЧтениеJSON;
		ЧтениеОтвета.УстановитьСтроку(СтрокаJSON);
		
		Попытка
			Результат = ПрочитатьJSON(ЧтениеОтвета);
		Исключение
			
			ЛокализованноеСообщение =
				НСтр("ru = 'Ошибка разбора JSON, возможно, получено служебное сообщение о недоступности сервера лояльности.'",
					ОбщегоНазначения.КодОсновногоЯзыка());
					
			ИмяСобытия = НСтр("ru = 'Попытка разбора ответа от сервера лояльности'",
				ОбщегоНазначения.КодОсновногоЯзыка());
					
			ЗаписьЖурналаРегистрации(ИмяСобытия,
				УровеньЖурналаРегистрации.Ошибка, ,, ЛокализованноеСообщение);
					
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

// Заполняет ИмяКассира по данным физического лица для текущего пользователя 
//
// Параметры:
//  ИмяКассира - Строка.
//
Процедура ЗаполнитьФИОФизЛица(ИмяКассира) Экспорт
	
	Пользователь = Пользователи.ТекущийПользователь();
	
	ФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ФизическоеЛицо");
	
	ИмяКассира = "";
	Если Не ЗначениеЗаполнено(ФизЛицо) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКассира = ИмяКассира + ?(ИмяКассира = "", "", " ") + ФизЛицо.Фамилия;
	ИмяКассира = ИмяКассира + ?(ИмяКассира = "" ИЛИ ФизЛицо.Имя = "", "", " ") + ФизЛицо.Имя;
	ИмяКассира = ИмяКассира + ?(ИмяКассира = "" ИЛИ ФизЛицо.Отчество = "", "", " ") + ФизЛицо.Отчество;
	
КонецПроцедуры

// Заполняет ИННКассира по данным текущего пользователя.
//
// Параметры:
//  ИННКассира - Строка.
//
Процедура ЗаполнитьИННФизЛица(ИННКассира) Экспорт
	
	Пользователь = Пользователи.ТекущийПользователь();
	
	ФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ФизическоеЛицо");
	
	ИННКассира = НСтр("ru = ''");
	Если Не ЗначениеЗаполнено(ФизЛицо) Тогда
		Возврат;
	КонецЕсли;
	
	ИННКассира = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФизЛицо, "ИНН");
	
КонецПроцедуры

// Возвращает настройкиРМК по рабочему месту
// Параметры:
//  РабочееМесто - СправочникСсылка.РабочиеМеста - рабочее место для получения настроек
//
// ВозвращаемоеЗначение:
//  Массив - массив настроекРМК
//
Функция НастройкиРМКДляТекущегоРабочегоМеста(РабочееМесто) Экспорт
	
	НастройкиРМК = Новый Массив;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	НастройкиРабочегоМестаКассира.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НастройкиРабочегоМестаКассира КАК НастройкиРабочегоМестаКассира
	|ГДЕ
	|	НЕ НастройкиРабочегоМестаКассира.ПометкаУдаления
	|	И НастройкиРабочегоМестаКассира.РабочееМесто = &ТекущееРабочееМесто");
	Запрос.УстановитьПараметр("ТекущееРабочееМесто", РабочееМесто);
	
	ДоступныеНастройки = Запрос.Выполнить().Выбрать();
	
	Пока ДоступныеНастройки.Следующий() Цикл
		НастройкиРМК.Добавить(ДоступныеНастройки.Ссылка);
	КонецЦикла;
	
	Возврат НастройкиРМК;
	
КонецФункции

#Область КомпоновкаДанных

// Находит среди элементов полей СКД поле по имени.
//
// Параметры:
//  Элементы - ПолеКомпоновкиДанных - поля СКД.
//  Имя - Строка - имя поля СКД.
//  Кэш - Соответствие - соответствие полей и наименований СКД.
//
// Возвращаемое значение:
//  ПолеКомпоновкиДанных - поле СКД по полному имени.
//
Функция НайтиПолеСКДПоИмени(Элементы, Имя, Кэш = Неопределено) Экспорт
	
	Если Кэш <> Неопределено Тогда
		Элемент = Кэш.Получить(Имя);
		
		Если Элемент <> Неопределено Тогда
			Возврат Элемент;
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого Элемент Из Элементы Цикл
		
		Если ВРЕГ(Строка(Элемент.Поле)) = ВРЕГ(Имя) Тогда
			
			Если Кэш <> Неопределено Тогда
				Кэш.Вставить(Имя, Элемент);
			КонецЕсли;
			
			Возврат Элемент;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции
// Находит среди элементов полей СКД поле по полному имени.
//
// Параметры:
//  Элементы - ПолеКомпоновкиДанных - поля СКД.
//  ПолноеИмя - Строка - полное имя поля СКД.
//  Кэш - Соответствие - соответствие полей и наименований СКД.
//
// Возвращаемое значение:
//	ПолеКомпоновкиДанных - поле СКД по полному имени.
//
Функция НайтиПолеСКДПоПолномуИмени(Элементы, ПолноеИмя, Кэш = Неопределено) Экспорт
	
	Если Кэш <> Неопределено Тогда
		
		Поле = Кэш.Получить(ПолноеИмя);
		Если Поле <> Неопределено Тогда
			Возврат Поле;
		КонецЕсли;
		
	КонецЕсли;
	
	МассивЧастейИмен = МассивСоставляющихИмени(ПолноеИмя);
	КоличествоЧастей = МассивЧастейИмен.Количество();
	
	ТекущееИмя = МассивЧастейИмен[0];
	Поле = НайтиПолеСКДПоИмени(Элементы, ТекущееИмя, Кэш);
	
	Если Поле = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Сч = 2 По КоличествоЧастей Цикл
		
		ТекущееИмя = СтрШаблон("%1.%2", ТекущееИмя, МассивЧастейИмен[Сч-1]);
		Поле = НайтиПолеСКДПоИмени(Поле.Элементы, ТекущееИмя, Кэш);
		
		Если Поле = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Кэш <> Неопределено Тогда
		Кэш.Вставить(ПолноеИмя, Поле);
	КонецЕсли;
	
	Возврат Поле;
	
КонецФункции

// Записывает значение в создаваемую запись XML.
//
// Параметры:
//  Значение - Произвольный - значение для записи в XML.
//
// Возвращаемое значение:
//  ЗаписьXML - запись XML по значению
//
Функция ПолучитьXML(Значение) Экспорт
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(Запись, Значение);
	Возврат Запись.Закрыть();
	
КонецФункции

// Выполняет обращение к ресурсу сервиса лояльности 
//
// Параметры:
//  ПараметрыВыполненияЗапроса - Структура:
//		*ТипЗапроса - Строка, по умолчанию - "POST"
//		*АдресСервера - Строка
//		*Логин - Строка
//		*Пароль - Строка
//		*Ресурс - Строка
//		*ПараметрыМетода - Структура
//
// Возвращаемое значение:
//  РезультатВыполнения - Структура:
//		* ДанныеОтвета - Строка,
//		*ЕстьОшибки - Булево,
//		*ТекстОшибки - Строка
//
Функция ВыполнитьЗапросКСервисуЛояльности(ПараметрыВыполненияЗапроса) Экспорт
	Возврат ОбщегоНазначенияРМККлиентСервер.ВыполнитьЗапросКСервисуЛояльности(ПараметрыВыполненияЗапроса);
КонецФункции

#КонецОбласти

#Область ФормированиеПечатныхФорм

// Возвращает заголовок документа для печатных форм.
//
// Параметры:
//  Шапка - Структура - реквизиты документа;
//  НазваниеДокумента - Строка - представление документа для печати;
//  ФорматДаты - строка - формат даты.
//
// Возвращаемое значение:
//  ЗаголовокДокумента - Строка.
//
Функция СформироватьЗаголовокДокумента(Шапка, НазваниеДокумента = "", ФорматДаты = "") Экспорт
	
	Если ПустаяСтрока(НазваниеДокумента)
		И Шапка.Свойство("Представление")
		И ЗначениеЗаполнено(Шапка.Представление) Тогда
		
		ПоложениеНомера = Найти(Шапка.Представление, Шапка.Номер);
		
		Если ПоложениеНомера > 0 Тогда
			НазваниеДокумента = СокрЛП(Лев(Шапка.Представление, ПоложениеНомера-1));
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустаяСтрока(ФорматДаты) Тогда
		ФорматДаты = НСтр("ru = 'ДЛФ=D'");
	КонецЕсли;
	
	ЗаголовокДокумента = СтрШаблон(НСтр("ru = '%1 № %2 от %3 г.'"),
		НазваниеДокумента,
		ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Ложь, Истина),
		Формат(Шапка.Дата, ФорматДаты));
	
	Возврат ЗаголовокДокумента;
	
КонецФункции

//  Функция формирует сведения об указанном ЮрФизЛице. К сведениям относятся -
// наименование, адрес, номер телефона, банковские реквизиты.
//
// Параметры: 
//  ЮрФизЛицо   - организация или физическое лицо, о котором собираются сведения.
//  ДатаПериода - дата, на которую выбираются сведения о ЮрФизЛице.
//  ДляФизЛицаТолькоИнициалы - Для физ. лица выводить только инициалы имени и отчества.
//  БанковскийСчет - Банковский счет, если счет не основной.
//
// Возвращаемое значение:
//  Сведения - собранные сведения.
//
Функция СведенияОЮрФизЛице(ЮрФизЛицо, ДатаПериода, ДляФизЛицаТолькоИнициалы = Истина,
	Знач БанковскийСчет = Неопределено) Экспорт

	Сведения	= Новый Структура();
	Сведения.Вставить("Представление");
	Сведения.Вставить("ПолноеНаименование");
	Сведения.Вставить("КодПоОКПО");
	Сведения.Вставить("ИНН");
	Сведения.Вставить("КПП");
	Сведения.Вставить("Телефоны");
	Сведения.Вставить("ЮридическийАдрес");
	Сведения.Вставить("ФактическийАдрес");
	Запрос		= Новый Запрос;
	Данные		= Неопределено;

	Если НЕ ЗначениеЗаполнено(ЮрФизЛицо) Тогда
		Возврат Сведения;
		
	ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("Строка") Тогда
		
		Сведения.Вставить("Представление", ЮрФизЛицо);
		Сведения.Вставить("полноеНаименование", ЮрФизЛицо);
		Возврат Сведения;
		
	КонецЕсли;

	Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда
		ИмяСправочника = "Организации";
	ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
		ИмяСправочника = "Контрагенты";
	Иначе
		Возврат Сведения;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ФормаОрганизации", ЮрФизЛицо);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Представление       КАК Наименование,";
	
	
	Если ИмяСправочника = "Организации" Тогда
		
		Запрос.Текст = Запрос.Текст + "
		| Организации.НаименованиеСокращенное КАК ПолноеНаименование,";
	Иначе
		
		Запрос.Текст = Запрос.Текст + "
		| Организации.НаименованиеПолное КАК ПолноеНаименование,";
	КонецЕсли;	
	
	ТипЮрФизЛицо = ЮрФизЛицо.ЮридическоеФизическоеЛицо;
	Если ТипЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
		И ИмяСправочника = "Контрагенты" Тогда
		ТекстЗапросаИННКПП = "
		|	Организации.ФизЛицо.ИНН         КАК ИНН,";
	Иначе
		ТекстЗапросаИННКПП = "
		|	Организации.ИНН                 КАК ИНН,
		|	Организации.КПП                 КАК КПП,";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + ТекстЗапросаИННКПП;
	
	Запрос.Текст = Запрос.Текст + "
	|	Организации.КодПоОКПО           КАК КодПоОКПО";
	
	Если ИмяСправочника = "Организации" Тогда
		Запрос.Текст = Запрос.Текст + ",
		|	Организации.СвидетельствоСерияНомер,
		|	Организации.СвидетельствоДатаВыдачи,
		|	Организации.НаименованиеПолное КАК НаименованиеПолноеПоУчредительнымДокументам,
		|	Организации.КодПоОКАТО         КАК КодПоОКАТО";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	Справочник."+ИмяСправочника+" КАК Организации
	|
	|ГДЕ
	|	Организации.Ссылка = &ФормаОрганизации";

	Данные = Запрос.Выполнить().Выбрать();
	Данные.Следующий();

	Сведения.Вставить("КодПоОКПО", Данные.КодПоОКПО);
	Сведения.Вставить("ЮрФизЛицо", ТипЮрФизЛицо);
	Если ТипЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		Сведения.Вставить("КПП",       Данные.КПП);
		Сведения.Вставить("Свидетельство", "");
	Иначе
		
		Сведения.Вставить("КПП",       "");
		Если ИмяСправочника = "Организации" Тогда
			
			ТекстСвидетельство = НСтр("ru = 'свидетельство %1 от %2'");
			ТекстСвидетельство =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Данные.СвидетельствоСерияНомер,
					Формат(Данные.СвидетельствоДатаВыдачи, НСтр("ru='ДФ=dd.MM.yyyy'")));
			Сведения.Вставить("Свидетельство", ТекстСвидетельство);
			
		КонецЕсли;
		
	КонецЕсли;

	Если ИмяСправочника = "Организации" Тогда
		
		Сведения.Вставить("НаименованиеПолноеПоУчредительнымДокументам",
			Данные.НаименованиеПолноеПоУчредительнымДокументам);
		Сведения.Вставить("КодПоОКАТО", Данные.КодПоОКАТО);
		
	КонецЕсли;
	
	Сведения.Вставить("ПолноеНаименование", Данные.ПолноеНаименование);

	Если Данные <> Неопределено Тогда
		Сведения.Вставить("Представление", Данные.Наименование);
		Сведения.Вставить("ИНН", Данные.ИНН);

		Если НЕ ЗначениеЗаполнено(Сведения.ПолноеНаименование) Тогда
			Сведения.ПолноеНаименование = Сведения.Представление;
		КонецЕсли;
	КонецЕсли;

	Возврат Сведения;

КонецФункции

// Функция возвращает представление номенклатуры для печати.
//
// Параметры:
// 		НаименованиеНоменклатуры - Строка
// 		Характеристика - Строка
// 		Упаковка - Строка
// 		Серия - Строка
// 		Содержание - Строка
//
// Возвращаемое значение:
// 		Строка - Представление номенклатуры для печати.
//
Функция ПолучитьПредставлениеНоменклатурыДляПечати(
	НаименованиеНоменклатуры,
	Характеристика = Неопределено,
	Упаковка = Неопределено,
	Серия = Неопределено,
	Содержание = Неопределено) Экспорт
	
	ПредставлениеНоменклатуры = СокрЛП(НаименованиеНоменклатуры);
	
	Если ЗначениеЗаполнено(Содержание) Тогда
		
		ПредставлениеНоменклатуры = Содержание;
		
	ИначеЕсли (ЗначениеЗаполнено(Характеристика) И НЕ Характеристика = "<>")
		ИЛИ ЗначениеЗаполнено(Упаковка)
		ИЛИ ЗначениеЗаполнено(Серия) Тогда
		
		ТекстВСкобках = НСтр("ru = ''");
		
		Если ЗначениеЗаполнено(Характеристика) Тогда
			ТекстВСкобках = СтрШаблон(НСтр("ru = '%1, %2'"), ТекстВСкобках, Характеристика);
		КонецЕсли;
		Если ЗначениеЗаполнено(Упаковка) Тогда
			ТекстВСкобках = СтрШаблон(НСтр("ru = '%1, %2'"), ТекстВСкобках, Упаковка);
		КонецЕсли;
		Если ЗначениеЗаполнено(Серия) Тогда
			ТекстВСкобках = СтрШаблон(НСтр("ru = '%1, %2'"), ТекстВСкобках, Серия);
		КонецЕсли;
		ПредставлениеНоменклатуры = СтрШаблон(НСтр("ru = '%1 (%2)'"), ПредставлениеНоменклатуры, Сред(ТекстВСкобках, 3));
		
	КонецЕсли;
	
	Возврат ПредставлениеНоменклатуры;
	
КонецФункции

//  Формирует представление ФИО по исходным данным, либо по набору полей, когда
//  исходные данные не являются физическим лицом или строковым литералом.
//
// Параметры:
//  Объект - Строка, СправочникСсылка.ФизическиеЛица, ПроизвольныйТип - исходные данные.
//  Фамилия - Строка. 
//  Имя - Строка.
//  Отчество - Строка.
//
// Возвращаемое значение:
//  Результат - Строка
//
Функция ФамилияИнициалыФизЛица(Объект = "", Фамилия = " ", Имя = " ", Отчество = " ") Экспорт

	ТипОбъекта = ТипЗнч(Объект);
	
	Если ТипОбъекта = Тип("Строка") Тогда
		ФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(Объект), НСтр("ru = ' '"));
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ФизическиеЛица")
		ИЛИ ТипОбъекта = Тип("СправочникОбъект.ФизическиеЛица") Тогда
		ФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(Объект.Наименование), НСтр("ru = ' '") );
	Иначе
		
	// Используем возможно переданные отдельные строки.
		СокращениеОтчества = ?(Не ПустаяСтрока(Отчество), СтрШаблон( НСтр("ru = '%1.'"), Лев(Отчество, 1)), НСтр("ru = ''"));
		СокращениеИмениИОтчества = ?(Не ПустаяСтрока(Имя),
			СтрШаблон(" %1. %2", Лев(Имя, 1), СокращениеОтчества), НСтр("ru = ''"));
			
		Возврат ?(Не ПустаяСтрока(Фамилия),
			СтрШаблон( НСтр("ru = '%1 %2'"), Фамилия, СокращениеИмениИОтчества), НСтр("ru = ''"));
		
	КонецЕсли;
	
	КоличествоПодстрок	= ФИО.Количество();
	Фамилия				= ?(КоличествоПодстрок > 0, ФИО[0], "");
	Имя					= ?(КоличествоПодстрок > 1, ФИО[1], "");
	Отчество			= ?(КоличествоПодстрок > 2, ФИО[2], "");
	
	СокращениеОтчества = ?(Не ПустаяСтрока(Отчество), СтрШаблон( НСтр("ru = '%1.'"), Лев(Отчество, 1)), НСтр("ru = ''"));
	СокращениеИмениИОтчества = ?(Не ПустаяСтрока(Имя),
		СтрШаблон(" %1. %2", Лев(Имя, 1), СокращениеОтчества), НСтр("ru = ''"));
		
	Возврат ?(Не ПустаяСтрока(Фамилия),
		СтрШаблон( НСтр("ru = '%1 %2'"), Фамилия, СокращениеИмениИОтчества), НСтр("ru = ''"));

КонецФункции

#КонецОбласти

// Обрабатывает данные ответа из API
//
// Параметры:
//  ИсходныеДанные - Структура - данные ответа
//	НастройкиРабочегоМестаКассира - СправочникСсылка.НастройкиРМК - 
//		сущность для актуализации признака запрета интерактивного редактирования
//
// Возвращаемое значение:
//  Результат - Структура - результат обработки данных ответа
//
Функция ОбработатьДанныеЗапретов(ИсходныеДанные, НастройкиРабочегоМестаКассира) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("ПризнакУспешноОбновлен", Ложь);
	Результат.Вставить("КомментарийКОбновлениюПризнака", НСтр("ru = ''") );
	Результат.Вставить("ЗапретыПродажУспешноЗагружены", Ложь);
	Результат.Вставить("КомментарийОбновленияЗапретов", НСтр("ru = ''"));
	
	// признак запрета интерактивного редактирования ограничений продаж
	Если ЗначениеЗаполнено(ИсходныеДанные) И ЗначениеЗаполнено(НастройкиРабочегоМестаКассира)
		И ТипЗнч(ИсходныеДанные) = Тип("Структура") И ИсходныеДанные.Свойство("AllowControl") Тогда
		
		РедактированиеРазрешеноПоДаннымМастерСистемы = ИсходныеДанные.AllowControl;
		РезультатОбновления = ОбновитьПризнакРазрешенияИнтерактивногоРедактирования(НастройкиРабочегоМестаКассира,
			РедактированиеРазрешеноПоДаннымМастерСистемы);
		Результат.ПризнакУспешноОбновлен = РезультатОбновления.ВыполнениеУспешно;
		Результат.КомментарийКОбновлениюПризнака = РезультатОбновления.Комментарий;
		
	Иначе
		
		Результат.КомментарийКОбновлениюПризнака =
		НСтр("ru = 'Невозможно обновить признак разрешения редактирования запретов по переданным исходным данным.'");
		
	КонецЕсли;
	
	// перечень ограничений продаж
	Если ЗначениеЗаполнено(ИсходныеДанные) И ТипЗнч(ИсходныеДанные) = Тип("Структура")
		И ИсходныеДанные.Свойство("RestrictionsList") Тогда
		
		МассивОграничений = ИсходныеДанные.RestrictionsList;
		
		Для каждого ОграничениеПродажи Из МассивОграничений Цикл
			
			Если НЕ ДанныеОграниченияПродажиУспешноЗагружены(ОграничениеПродажи)Тогда
				
				Результат.КомментарийОбновленияЗапретов =
					НСтр("ru = 'Ошибка загрузки запретов продаж из сервиса лояльности'");
				Прервать;
				
			КонецЕсли;
				
		КонецЦикла;
		
		Результат.ЗапретыПродажУспешноЗагружены = Истина;
		
	Иначе
		
		Результат.КомментарийОбновленияЗапретов =
		НСтр("ru = 'Невозможно загрузить перечень ограничений продаж по переданным исходным данным.
			|Отсутствует узел ""RestrictionsList"".'");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает пароль сервиса лояльности из безопасного хранилища.
//
// Параметры:
//  ТекущаяНастройкаРМК - СправочникСсылка.НастройкиРабочегоМестаКассира - текущая настройка РМК.
//
// Возвращаемое значение:
//  Пароль - Строка - пароль сервиса лояльности.
//
Функция ПарольСервисаЛояльности(ТекущаяНастройкаРМК) Экспорт
	
	Пароль = "";
	
	Если ЗначениеЗаполнено(ТекущаяНастройкаРМК) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		СохраненныйПароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ТекущаяНастройкаРМК,
			"ПарольСервисаЛояльности");
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Не СохраненныйПароль = Неопределено Тогда
			Пароль = СохраненныйПароль;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Пароль;
	
КонецФункции

// Заполняет обязательные права.
//
// Параметры:
//  ОписаниеПрофиля - Структура - см.УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа.
//
Процедура ЗаполнитьОбязательныеРолиРМК(ОписаниеПрофиля) Экспорт
	
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеНовогоРМК");
	ОписаниеПрофиля.Роли.Добавить("ПравоОтложитьЧекРМК");
	ОписаниеПрофиля.Роли.Добавить("ПравоПродолжитьЧекРМК");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеНастроекРМК");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеУсловийОграниченияПродажРМК");
	
КонецПроцедуры

#Область ЗапретыПродаж

// Возвращает таблицу значений с запретами продаж с отбором по организации на дату 
//
// Параметры:
//  Организация - СправочникСсылка.Организации
//  ДатаПроверки - ДатаВремя
//
// Возвращаемое значение:
//  Результат - Выборка
//
Функция АктуальныеЗапретыПродаж(Организация, ДатаПроверки) Экспорт
	
	Результат = Неопределено;
	
	Если ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(ДатаПроверки) Тогда
	
		ТекстЗапросаЗапретов = ОбщегоНазначенияРМКПереопределяемый.ТекстЗапросаДействующихЗапретовПродаж();
		Запрос = Новый Запрос(ТекстЗапросаЗапретов);
		Запрос.УстановитьПараметр("ТекущаяДата", ДатаПроверки);
		Запрос.УстановитьПараметр("Организация", Организация);
		Результат = Запрос.Выполнить().Выбрать();
	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак использования запретов продаж по данным сервера лояльности
//
// Возвращаемое значение:
//  Результат - Булево
//
Функция ИспользоватьОграниченияПродажРМК() Экспорт
	
	Результат = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПризнакИспользованияОграниченийПродажРМК(Результат);
	Возврат Результат;
	
КонецФункции

// Возвращает признак использования запретов продаж, поставляемых конфигурацией
//
// Возвращаемое значение:
//  Результат - Булево
//
Функция ИспользоватьПоставляемыеОграниченияПродаж() Экспорт
	
	Результат = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПризнакИспользованияПоставляемыхОграниченийПродаж(Результат);
	Возврат Результат;
	
КонецФункции

// Проверяет наличие актуальных запретов продажи по данным кэша запретов.
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - номенклатура, по виду и особенности учета которой
//		проверяется наличие запрета продаж на текущий момент.
//  КэшЗапретовПродаж - ДанныеФормыКоллекция - перечень действующих запретов продаж на текущий момент.
//
// Возвращаемое значение:
//  Результат - Структура.
//
Функция НаличиеЗапретовПродажи(Номенклатура, КэшЗапретовПродаж) Экспорт
	
	Результат = Новый Структура();
	
	ИмяРеквизитаВидаНоменклатуры = ИмяРеквизитаВидаНоменклатуры();
	ИмяРеквизитаОсобенностиУчета = ИмяРеквизитаОсобенностиУчета();
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		
		ПустаяОсобенностьУчета = ОсобенностьУчетаПоУмолчанию();
		ПустойВидНоменклатуры = ВидНоменклатурыПоУмолчанию();
		
		Реквизиты = Новый Структура();
		
		СтрокаИменРеквизитов = СтрШаблон("%1,%2", ИмяРеквизитаВидаНоменклатуры, ИмяРеквизитаОсобенностиУчета);
		
		Попытка
			Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, СтрокаИменРеквизитов);
		Исключение
			
			ЗаписьЖурналаРегистрации( НСтр("ru = 'Не указаны имена реквизитов вида номенклатуры и особенности учета'",
				ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
		Если ЗначениеЗаполнено(Реквизиты) Тогда
		
			ВидНоменклатуры = Реквизиты[ИмяРеквизитаВидаНоменклатуры];
			ОсобенностьУчетаНоменклатуры = Реквизиты[ИмяРеквизитаОсобенностиУчета];
				
			ДанныеОтбора = Новый Структура();
			ДанныеОтбора.Вставить("ОсобенностьУчета", ОсобенностьУчетаНоменклатуры);
			ДанныеОтбора.Вставить("ВидНоменклатуры", ВидНоменклатуры);
				
			НайденныеЗапреты = КэшЗапретовПродаж.НайтиСтроки(ДанныеОтбора);
			// детализированные запреты: особенность учета и вид номенклатуры
			Если НайденныеЗапреты.Количество() > 0 Тогда
				
				ДействующиеЗапреты = УсловияЗапретаПродажиТовара(НайденныеЗапреты, ВидНоменклатуры);
				Если ДействующиеЗапреты.Количество() Тогда
					Возврат ДействующиеЗапреты;
				КонецЕсли;
				
			// обобщенные запреты: для всех особенностей учета и указанного вида номенклатуры
				Иначе
					
					ДанныеОтбора.Вставить("ОсобенностьУчета", ПустаяОсобенностьУчета);
					ДанныеОтбора.Вставить("ВидНоменклатуры", ВидНоменклатуры);
					
					НайденныеЗапреты = КэшЗапретовПродаж.НайтиСтроки(ДанныеОтбора);
					
					Если НайденныеЗапреты.Количество() > 0 Тогда
						
						ДействующиеЗапреты = УсловияЗапретаПродажиТовара(НайденныеЗапреты, ВидНоменклатуры);
						
						Если ДействующиеЗапреты.Количество() Тогда
							Возврат ДействующиеЗапреты;
						КонецЕсли;
						
					// обобщенные запреты: для всех видов номенклатуры и указанной особенности учета
					Иначе
						
						ДанныеОтбора.Вставить("ОсобенностьУчета", ОсобенностьУчетаНоменклатуры);
						ДанныеОтбора.Вставить("ВидНоменклатуры", ПустойВидНоменклатуры);
						
						НайденныеЗапреты = КэшЗапретовПродаж.НайтиСтроки(ДанныеОтбора);
						
						Если НайденныеЗапреты.Количество() > 0 Тогда
							
							ДействующиеЗапреты = УсловияЗапретаПродажиТовара(НайденныеЗапреты, ВидНоменклатуры);
							
							Если ДействующиеЗапреты.Количество() Тогда
								Возврат ДействующиеЗапреты;
							КонецЕсли;
							
						// общие запреты: для всех видов номенклатуры и всех особенностей учета
						Иначе
							
							ДанныеОтбора.Вставить("ОсобенностьУчета", ПустаяОсобенностьУчета);
							ДанныеОтбора.Вставить("ВидНоменклатуры", ПустойВидНоменклатуры);
							
							НайденныеЗапреты = КэшЗапретовПродаж.НайтиСтроки(ДанныеОтбора);
							
							Если НайденныеЗапреты.Количество() > 0 Тогда
								
								ДействующиеЗапреты = УсловияЗапретаПродажиТовара(НайденныеЗапреты, ВидНоменклатуры);
								
								Если ДействующиеЗапреты.Количество() Тогда
									Возврат ДействующиеЗапреты;
								КонецЕсли;	
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет наличие разрешения редактирования запретов продаж по данным настроек РМК
//
// Возвращаемое значение:
//  Результат - Булево
//
Функция РазрешеноРедактироватьЗапретыПродаж() Экспорт

	Результат = Истина;
	
	ТекущиеНастройкиРабочегоМеста = ПараметрыСеанса.РабочееМестоКлиента;
	
	Если ЗначениеЗаполнено(ТекущиеНастройкиРабочегоМеста) Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	НастройкиРабочегоМестаКассира.ЗапрещеноРедактированиеУсловийОграниченийПродаж КАК ЗапрещеноРедактированиеУсловийОграниченийПродаж
		|ИЗ
		|	Справочник.НастройкиРабочегоМестаКассира КАК НастройкиРабочегоМестаКассира
		|ГДЕ
		|	НастройкиРабочегоМестаКассира.РабочееМесто = &РабочееМесто");
		Запрос.УстановитьПараметр("РабочееМесто", ТекущиеНастройкиРабочегоМеста);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Результат = НЕ Выборка.ЗапрещеноРедактированиеУсловийОграниченийПродаж;
		КонецЕсли;
		
	КонецЕсли;
	
	ИспользоватьПоставляемыеОграничения = ИспользоватьПоставляемыеОграниченияПродаж();
	Результат = Результат И НЕ ИспользоватьПоставляемыеОграничения;
	
	Возврат Результат;

КонецФункции

// Возвращает значения адреса и имени пользователя сервиса лояльности
//
// Параметры:
//  НастройкаРабочегоМестаКассира - СправочникСсылка.НастройкиРМК - исходные данные для получения значений
//
// Возвращаемое значение:
//  Результат - Структура:
//		*АдресСервера - Строка
//		*Логин - Строка
//		*Пароль - Строка
//
Функция ЗначенияПараметровСервисаЛояльности(НастройкаРабочегоМестаКассира = Неопределено) Экспорт

	Результат = Новый Структура();
	Результат.Вставить("АдресСервера");
	Результат.Вставить("Логин");
	Результат.Вставить("Пароль");

	Если ПолучитьФункциональнуюОпцию("ИспользоватьСервисЛояльности") Тогда
		
		Запрос = Новый Запрос;
		
		Если НЕ ЗначениеЗаполнено(НастройкаРабочегоМестаКассира) Тогда
			
			Запрос.Текст = "ВЫБРАТЬ
			|	НастройкиРабочегоМестаКассира.Ссылка КАК НастройкаРабочегоМестаКассира
			|ИЗ
			|	Справочник.НастройкиРабочегоМестаКассира КАК НастройкиРабочегоМестаКассира
			|ГДЕ
			|	НастройкиРабочегоМестаКассира.РабочееМесто = &ТекущееРабочееМесто
			|	И НЕ НастройкиРабочегоМестаКассира.ПометкаУдаления";
			Запрос.УстановитьПараметр("ТекущееРабочееМесто", ПараметрыСеанса.РабочееМестоКлиента);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				НастройкаРабочегоМестаКассира = Выборка.НастройкаРабочегоМестаКассира;
			КонецЕсли;
			
		КонецЕсли;
			
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НастройкаРабочегоМестаКассира,
			"АдресСервисаЛояльности,ПользовательСервисаЛояльности");
		Результат.АдресСервера = Реквизиты.АдресСервисаЛояльности;
		Результат.Логин = Реквизиты.ПользовательСервисаЛояльности;
		
		Результат.Пароль = ПарольСервисаЛояльности(НастройкаРабочегоМестаКассира);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает значение особенности учета по умолчанию
//
// Возвращаемое значение:
//  Результат - ОсобенностиУчетаНоменклатурыРМК - пояснение
//
Функция ОсобенностьУчетаПоУмолчанию() Экспорт
	
	ИмяМетаданныхПоУмолчанию = "Перечисление.ОсобенностиУчетаНоменклатуры";
	
	ПереопределяемоеИмяМетаданных = ОбщегоНазначенияРМККлиентСерверПереопределяемый.ИмяМетаданныхОсобенностиУчета();
	ИмяМетаданныхПоУмолчанию = ?(ПустаяСтрока(ПереопределяемоеИмяМетаданных),
		ИмяМетаданныхПоУмолчанию, ПереопределяемоеИмяМетаданных);
		
	ПолноеИмяМетаданных = СтрШаблон("%1.ПустаяСсылка", ИмяМетаданныхПоУмолчанию);
	Возврат ОбщегоНазначения.ПредопределенныйЭлемент(ПолноеИмяМетаданных);

КонецФункции

// Возвращает значение особенности учета по умолчанию
//
// Возвращаемое значение:
//  Результат - ОсобенностиУчетаНоменклатурыРМК - пояснение
//
Функция ВидНоменклатурыПоУмолчанию() Экспорт
	
	ИмяМетаданныхПоУмолчанию = "Справочник.ВидыНоменклатуры";
	ПереопределяемоеИмяМетаданных = ОбщегоНазначенияРМККлиентСерверПереопределяемый.ИмяМетаданныхВидовНоменклатуры();
	ИмяМетаданныхПоУмолчанию = ?(ПустаяСтрока(ПереопределяемоеИмяМетаданных),
		ИмяМетаданныхПоУмолчанию, ПереопределяемоеИмяМетаданных);
		
	ПолноеИмяМетаданных = СтрШаблон("%1.ПустаяСсылка", ИмяМетаданныхПоУмолчанию);
	Возврат ОбщегоНазначения.ПредопределенныйЭлемент(ПолноеИмяМетаданных);

КонецФункции

// Обновляет регистр сведений запретов продаж по поставляемым (встроенным) конфигурацией ограничениям 
//
// Параметры:
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектРМК- торговый объект для отбора перечня ограничений.
//  Результат - Структура:
//  	* КомментарийОбновленияЗапретов - Строка - при наличии ошибок обновления данных содержит пояснение.
//
Процедура ОбновитьОграниченияПродажИзПоставляемыхДанных(ТорговыйОбъект, Результат) Экспорт
	ОбщегоНазначенияРМКПереопределяемый.ОбновитьОграниченияПродажИзПоставляемыхДанных(ТорговыйОбъект, Результат);
КонецПроцедуры

#КонецОбласти

#Область ПомощникНастройкиКассовогоМеста

// Возвращает текст для отчета о подключенном оборудовании
//
// Возвращаемое значение:
//  Результат - Строка
//
Функция ТекстЗапросаДляОтчетаОПодключенномОборудовании() Экспорт
	
	Возврат "ВЫБРАТЬ
	|	КассыККМ.Ссылка КАК КассаККМ,
	|	КассыККМ.Наименование КАК НаименованиеКасса,
	|	КассыККМ.Владелец КАК Организация,
	|	КассыККМ.ИспользоватьБезПодключенияОборудования КАК НаличныеПОСкрыть,
	|	КассыККМ.ПодключаемоеОборудование КАК НаличныеПОСсылка
	|ПОМЕСТИТЬ ТаблицаНаличные
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	КассыККМ.РабочееМесто = &РабочееМесто
	|	И НЕ КассыККМ.ТипКассы = ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ККМOffline)
	|	И КассыККМ.Владелец = &Организация
	|	И НЕ КассыККМ.ПодключаемоеОборудование = ЗНАЧЕНИЕ(Справочник.ПодключаемоеОборудование.ПустаяСсылка)
	|	И НЕ КассыККМ.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭквайринговыеТерминалы.Организация КАК Организация,
	|	МИНИМУМ(ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования) КАК ИспользоватьБезПодключенияОборудования
	|ПОМЕСТИТЬ ТаблицаЭТ
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|ГДЕ
	|	ЭквайринговыеТерминалы.ТорговыйОбъект = &ТорговыйОбъект
	|	И &ИспользоватьОплатуПлатежнымиКартами
	|	И ЭквайринговыеТерминалы.Организация = &Организация
	|	И НЕ ЭквайринговыеТерминалы.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭквайринговыеТерминалы.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНаличные.КассаККМ КАК КассаККМ,
	|	ТаблицаНаличные.НаименованиеКасса КАК НаименованиеКасса,
	|	ТаблицаНаличные.Организация КАК Организация,
	|	ТаблицаНаличные.НаличныеПОСкрыть КАК НаличныеПОСкрыть,
	|	ТаблицаНаличные.НаличныеПОСсылка КАК НаличныеПОСсылка,
	|	ВЫБОР
	|		КОГДА ТаблицаЭТ.Организация ЕСТЬ NULL
	|			ТОГДА """"
	|		ИНАЧЕ ""V""
	|	КОНЕЦ КАК ОплатаКартой,
	|	ЕСТЬNULL(ТаблицаЭТ.ИспользоватьБезПодключенияОборудования, ИСТИНА) КАК ОплатаКартойПОСкрыть
	|ИЗ
	|	ТаблицаНаличные КАК ТаблицаНаличные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЭТ КАК ТаблицаЭТ
	|		ПО ТаблицаНаличные.Организация = ТаблицаЭТ.Организация";
	
КонецФункции

// Возвращает текст для динамического списка КассыККМ помощника настройки кассового места
//
// Возвращаемое значение:
//  Результат - Строка
//
Функция ТекстЗапросаПеречняКассККМПомощникаНастройкиКассовогоМеста() Экспорт

	Возврат "ВЫБРАТЬ
	|	СправочникКассыККМ.Ссылка КАК Ссылка,
	|	СправочникКассыККМ.Владелец КАК Организация,
	|	СправочникКассыККМ.ТорговыйОбъект КАК ТорговыйОбъект,
	|	НЕ СправочникКассыККМ.ПодключаемоеОборудование = ЗНАЧЕНИЕ(Справочник.ПодключаемоеОборудование.ПустаяСсылка) КАК КассаПодключена
	|ИЗ
	|	Справочник.КассыККМ КАК СправочникКассыККМ
	|ГДЕ
	|	НЕ СправочникКассыККМ.ПометкаУдаления";
	
КонецФункции

// Возвращает текст для динамического списка КассыККМ помощника настройки кассового места
//
// Возвращаемое значение:
//  Результат - Строка
//
Функция ТекстЗапросаКассККМСОтборомПоВладельцуИСтруктурнойЕдинице() Экспорт

	Возврат "ВЫБРАТЬ
	|	КассыККМ.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	КассыККМ.Владелец = &Владелец
	|	И КассыККМ.ТорговыйОбъект = &ТорговыйОбъект
	|	И НЕ КассыККМ.ПометкаУдаления";
	
КонецФункции

// Возвращает текст запроса для видов оплат.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаВидовОплатПомощникаНастройкиКассовогоМеста() Экспорт
	
	Возврат "ВЫБРАТЬ
	|	СправочникВидыОплат.Ссылка КАК Ссылка,
	|	СправочникВидыОплат.ПометкаУдаления КАК ПометкаУдаления,
	|	СправочникВидыОплат.Код КАК Код,
	|	СправочникВидыОплат.Наименование КАК Наименование,
	|	СправочникВидыОплат.ТипОплаты КАК ТипОплаты,
	|	СправочникВидыОплат.БанкКредитор КАК БанкКредитор,
	|	СправочникВидыОплат.ПроцентБанковскойКомиссии КАК ПроцентБанковскойКомиссии,
	|	СправочникВидыОплат.Предопределенный КАК Предопределенный,
	|	СправочникВидыОплат.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
	|ИЗ
	|	Справочник.ВидыОплат КАК СправочникВидыОплат
	|ГДЕ
	|	НЕ СправочникВидыОплат.ПометкаУдаления
	|	И НЕ СправочникВидыОплат.Ссылка В (ЗНАЧЕНИЕ(Справочник.ВидыОплат.ОплатаПодарочнымСертификатом), ЗНАЧЕНИЕ(Справочник.ВидыОплат.ВстречноеПредоставление))";
	
КонецФункции

// Возвращает текст запроса для данных пользователей.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаДополнительныхДанныхПользователей() Экспорт

	Возврат "ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь,
	|	""Подразделение"" КАК Настройка,
	|	Пользователи.Подразделение КАК Значение
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Подразделение = ЗНАЧЕНИЕ(Справочник.ТорговыеОбъекты.ПустаяСсылка)";
	
КонецФункции

// Возвращает текст запроса наличия физлица у пользователя.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаПроверкиНаличияФизлицаУПользователя() Экспорт
	
	Возврат "ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Ссылка,
	|	Пользователи.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	НЕ Пользователи.Служебный
	|	И НЕ Пользователи.Недействителен
	|	И Пользователи.Ссылка = &ТекущийПользователь";
	
КонецФункции


// Возвращает текст запроса для кодов доступа пользователей в интерфейс нового рабочего места кассира.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаКодовДоступаПользователей() Экспорт
	
	Возврат "ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(Штрихкоды.Штрихкод, """") КАК КодДоступа
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ПО (Штрихкоды.Владелец ССЫЛКА Справочник.Пользователи)
	|			И Пользователи.Ссылка = Штрихкоды.Владелец
	|ГДЕ
	|	НЕ Пользователи.ПометкаУдаления
	|	И ЕСТЬNULL(Штрихкоды.Штрихкод, """") = """"";
	
КонецФункции

// Возвращает текст запроса для данных доступных эквайринговых терминалов.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаПеречняЭквайринговыхТерминалов() Экспорт

	Возврат "ВЫБРАТЬ
	|	СправочникЭквайринговыеТерминалы.Ссылка КАК Ссылка,
	|	СправочникЭквайринговыеТерминалы.ПометкаУдаления КАК ПометкаУдаления,
	|	СправочникЭквайринговыеТерминалы.Код КАК Код,
	|	СправочникЭквайринговыеТерминалы.Наименование КАК Наименование,
	|	СправочникЭквайринговыеТерминалы.Организация КАК Организация,
	|	СправочникЭквайринговыеТерминалы.Касса КАК Касса,
	|	СправочникЭквайринговыеТерминалы.ТорговыйОбъект КАК ТорговыйОбъект,
	|	СправочникЭквайринговыеТерминалы.ПодключаемоеОборудование КАК ПодключаемоеОборудование,
	|	НЕ СправочникЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования КАК ОборудованиеИспользуется,
	|	СправочникЭквайринговыеТерминалы.Предопределенный КАК Предопределенный,
	|	СправочникЭквайринговыеТерминалы.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
	|	1 КАК ПолеУпорядочивания,
	|	СправочникЭквайринговыеТерминалы.Недействителен КАК Недействителен,
	|	""КассаККМ"" КАК ТипКассы
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы КАК СправочникЭквайринговыеТерминалы
	|ГДЕ
	|	НЕ СправочникЭквайринговыеТерминалы.ПометкаУдаления";
	
КонецФункции

// Возвращает текст запроса для данных доступных эквайринговых терминалов.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаПодключенныхЭквайринговыхТерминалов() Экспорт

	Возврат "ВЫБРАТЬ
	|	СправочникЭквайринговыеТерминалы.Ссылка КАК Ссылка,
	|	СправочникЭквайринговыеТерминалы.ПометкаУдаления КАК ПометкаУдаления,
	|	СправочникЭквайринговыеТерминалы.Код КАК Код,
	|	СправочникЭквайринговыеТерминалы.Наименование КАК Наименование,
	|	СправочникЭквайринговыеТерминалы.Организация КАК Организация,
	|	СправочникЭквайринговыеТерминалы.Касса КАК Касса,
	|	СправочникЭквайринговыеТерминалы.ТорговыйОбъект КАК ТорговыйОбъект,
	|	СправочникЭквайринговыеТерминалы.ПодключаемоеОборудование КАК ПодключаемоеОборудование,
	|	НЕ СправочникЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования КАК ОборудованиеИспользуется,
	|	СправочникЭквайринговыеТерминалы.Предопределенный КАК Предопределенный,
	|	СправочникЭквайринговыеТерминалы.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
	|	1 КАК ПолеУпорядочивания,
	|	СправочникЭквайринговыеТерминалы.Недействителен КАК Недействителен,
	|	""КассаККМ"" КАК ТипКассы
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы КАК СправочникЭквайринговыеТерминалы
	|ГДЕ
	|	НЕ СправочникЭквайринговыеТерминалы.ПометкаУдаления";
	
КонецФункции

// Возвращает текст запроса для подключенных касс ккм.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаПеречняПодключенныхКассККМ() Экспорт

	Возврат "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КассыККМ.ПодключаемоеОборудование КАК ПодключаемоеОборудование,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ФискальныйРегистратор) КАК ТипОборудования,
	|	КассыККМ.Владелец КАК Организация,
	|	КассыККМ.ПодключаемоеОборудование.СерийныйНомер КАК СерийныйНомер
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	КассыККМ.ТипКассы = ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ФискальныйРегистратор)
	|	И НЕ КассыККМ.ИспользоватьБезПодключенияОборудования
	|	И НЕ КассыККМ.ПометкаУдаления
	|	И НЕ КассыККМ.ПодключаемоеОборудование = ЗНАЧЕНИЕ(Справочник.ПодключаемоеОборудование.ПустаяСсылка)
	|	И КассыККМ.РабочееМесто = &РабочееМесто
	|	И КассыККМ.ПодключаемоеОборудование.РабочееМесто = &РабочееМесто
	|	И КассыККМ.ПодключаемоеОборудование.УстройствоИспользуется
	|	И КассыККМ.Владелец В(&Организации)
	|	И КассыККМ.ТорговыйОбъект = &ТорговыйОбъект";
	
КонецФункции

// Возвращает текст запроса эквайринговых терминалов.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаПеречняПодключенныхЭквайринговыхТерминалов() Экспорт

	Возврат "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭквайринговыеТерминалы.ПодключаемоеОборудование,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал) КАК ТипОборудования,
	|	ЭквайринговыеТерминалы.Организация,
	|	ЭквайринговыеТерминалы.ПодключаемоеОборудование.СерийныйНомер КАК СерийныйНомер
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|ГДЕ
	|	НЕ ЭквайринговыеТерминалы.ПометкаУдаления
	|	И ЭквайринговыеТерминалы.Касса ССЫЛКА Справочник.КассыККМ
	|	И ЭквайринговыеТерминалы.ТорговыйОбъект = &ТорговыйОбъект
	|	И НЕ ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования
	|	И НЕ ЭквайринговыеТерминалы.ПодключаемоеОборудование = ЗНАЧЕНИЕ(Справочник.ПодключаемоеОборудование.ПустаяСсылка)";
	
КонецФункции

// Возвращает текст запроса для подключенных эквайринговых терминалов с незаполненными тарифами на обслуживание.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаЭквайринговыхТерминаловСПустымиТарифамиНаОбслуживание() Экспорт

	Возврат "ВЫБРАТЬ
		|	ЭквайринговыеТерминалы.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ втТерминалы
		|ИЗ
		|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
		|ГДЕ
		|	НЕ ЭквайринговыеТерминалы.ПометкаУдаления
		|	И ЭквайринговыеТерминалы.Организация = &Организация
		|	И ЭквайринговыеТерминалы.ТорговыйОбъект = &ТорговыйОбъект
		|	И ЭквайринговыеТерминалы.Касса = &Касса
		|
		|СГРУППИРОВАТЬ ПО
		|	ЭквайринговыеТерминалы.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание.НомерСтроки) КАК КоличествоЗаписейТарифов,
		|	ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ втТарифыОбслуживанияТерминалов
		|ИЗ
		|	втТерминалы КАК втТерминалы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭквайринговыеТерминалы.ТарифыЗаРасчетноеОбслуживание КАК ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание
		|		ПО втТерминалы.Ссылка = ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТерминалы.Ссылка КАК Ссылка,
		|	втТарифыОбслуживанияТерминалов.КоличествоЗаписейТарифов КАК КоличествоЗаписейТарифов
		|ИЗ
		|	втТерминалы КАК втТерминалы
		|		ЛЕВОЕ СОЕДИНЕНИЕ втТарифыОбслуживанияТерминалов КАК втТарифыОбслуживанияТерминалов
		|		ПО втТерминалы.Ссылка = втТарифыОбслуживанияТерминалов.Ссылка
		|ГДЕ
		|	ЕСТЬNULL(втТарифыОбслуживанияТерминалов.КоличествоЗаписейТарифов, 0) = 0";
	
КонецФункции

// Возвращает текст запроса для отображения результатов настройки ККМ.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаДляОтображенияРезультатовНастройкиККМ() Экспорт

	Возврат "ВЫБРАТЬ
	|	Организации.Организация КАК Организация
	|ПОМЕСТИТЬ ТаблицаОрганизации
	|ИЗ
	|	&Организации КАК Организации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КассыККМ.Ссылка КАК КассаККМ,
	|	КассыККМ.Наименование КАК Наименование,
	|	КассыККМ.РегистрационныйНомер КАК РегистрационныйНомер,
	|	КассыККМ.ПодключаемоеОборудование КАК ПодключаемоеОборудование,
	|	КассыККМ.ТипКассы КАК ТипКассы,
	|	КассыККМ.Владелец КАК Организация
	|ПОМЕСТИТЬ ТаблицаКассККМ
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	КассыККМ.ТорговыйОбъект = &ТорговыйОбъект
	|	И КассыККМ.РабочееМесто = &РабочееМесто
	|	И КассыККМ.Владелец В
	|			(ВЫБРАТЬ
	|				ТаблицаОрганизации.Организация КАК Организация
	|			ИЗ
	|				ТаблицаОрганизации КАК ТаблицаОрганизации)
	|	И КассыККМ.ТипКассы В(&ТипыКассы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОрганизации.Организация КАК Организация,
	|	ЕСТЬNULL(ТаблицаКассККМ.КассаККМ, ЗНАЧЕНИЕ(Справочник.КассыККМ.ПустаяСсылка)) КАК КассаККМ,
	|	ЕСТЬNULL(ТаблицаКассККМ.Наименование, """") КАК Наименование,
	|	ЕСТЬNULL(ТаблицаКассККМ.РегистрационныйНомер, """") КАК РегистрационныйНомер,
	|	ЕСТЬNULL(ТаблицаКассККМ.ПодключаемоеОборудование, ЗНАЧЕНИЕ(Справочник.ПодключаемоеОборудование.ПустаяСсылка)) КАК ПодключаемоеОборудование,
	|	ЕСТЬNULL(ТаблицаКассККМ.ТипКассы, ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ПустаяСсылка)) КАК ТипКассы
	|ИЗ
	|	ТаблицаОрганизации КАК ТаблицаОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКассККМ КАК ТаблицаКассККМ
	|		ПО ТаблицаОрганизации.Организация = ТаблицаКассККМ.Организация";
	
КонецФункции
// Возвращает текст запроса для данных доступных эквайринговых терминалов.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаОрганизацийИПодразделений() Экспорт

	Возврат "ВЫБРАТЬ
		|	Организации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	НЕ Организации.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТорговыеОбъекты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ТорговыеОбъекты КАК ТорговыеОбъекты
		|ГДЕ
		|	НЕ ТорговыеОбъекты.ПометкаУдаления";
	
КонецФункции

// Возвращает текст запроса признаков использования оплат картами и платежными системами
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаИспользованияВидовОплатПомощникаНастройкиКассовогоМеста() Экспорт
	
	Возврат "ВЫБРАТЬ
		|	ИспользоватьОплатуПлатежнымиКартами.Значение КАК ИспользоватьОплатуПлатежнымиКартами,
		|	ИспользоватьОплатуПлатежнымиСистемами.Значение КАК ИспользоватьОплатуПлатежнымиСистемами
		|ИЗ
		|	Константа.ИспользоватьОплатуПлатежнымиКартами КАК ИспользоватьОплатуПлатежнымиКартами,
		|	Константа.ИспользоватьОплатуПлатежнымиСистемами КАК ИспользоватьОплатуПлатежнымиСистемами";
	
КонецФункции

// Возвращает имя основной таблицы для программно переопределяемого динамического списка
//
// Параметры:
//  ИмяСущности - Строка - имя динамического списка
//
// Возвращаемое значение:
//  Результат - Строка
//
Функция ИмяОсновнойТаблицыДляСущности(ИмяСущности) Экспорт
	
	Результат = "";

	Если ЗначениеЗаполнено(ИмяСущности) Тогда
	
		Если ИмяСущности = "ДополнительныеДанныеПользователей" Тогда
			Результат = "Справочник.Пользователи";
		ИначеЕсли ИмяСущности = "КодыДоступаПользователей" Тогда
			Результат = "РегистрСведений.Штрихкоды";
		ИначеЕсли ИмяСущности = "" Тогда
		Иначе
			Результат = "";
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак возможности открытия формы помощника настройки кассового места при запуске 
// формы рабочего места кассира
//
// Возвращаемое значение:
//  Результат - Булево.
//
Функция ОткрыватьФормуПомощникаНастройкиКассовогоМеста() Экспорт
	Возврат Истина;
КонецФункции

#КонецОбласти


#Область КодыДоступаКассиров

// Определяет возможность обращения к свойству сущности
//
// Параметры:
//  ИмяМетаданных - Строка - имя метаданных
//  ИмяРеквизита - Строка - имя реквизита
//
// Возвращаемое значение:
//  Результат - Булево
//
Функция КритерийВозможностиОбращенияКСвойствуСущностиВыполнен(ИмяМетаданных, ИмяРеквизита) Экспорт
	
	Результат = Ложь;
	ИмяПодклассаСущности = Сред(ИмяМетаданных, СтрНайти(ИмяМетаданных,".") + 1);
	
	Если СтрНачинаетсяС(ИмяМетаданных, "Справочник") Тогда
		
		НайденныеМетаданные = Метаданные.Справочники.Найти(ИмяПодклассаСущности);
		
		Если ТипЗнч(НайденныеМетаданные) = Тип("ОбъектМетаданных") Тогда
			
			НайденныйРеквизит = НайденныеМетаданные.Реквизиты.Найти(ИмяРеквизита);
			
			Если ТипЗнч(НайденныеМетаданные) = Тип("ОбъектМетаданных") Тогда
				Результат = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли СтрНачинаетсяС(ИмяМетаданных, "Регистр") Тогда
		
		НайденныеМетаданные = Метаданные.РегистрыСведений.Найти(ИмяПодклассаСущности);
		
		Если ТипЗнч(НайденныеМетаданные) = Тип("ОбъектМетаданных") Тогда
			
			НайденныйРеквизит = НайденныеМетаданные.Измерения.Найти(ИмяРеквизита);
			
			Если ТипЗнч(НайденныеМетаданные) = Тип("ОбъектМетаданных") Тогда
				Результат = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КомпоновкаДанных

// Возвращает составляющие имени поля СКД
//
// Параметры:
//	ПолноеИмя - полное имя поля СКД.
//
// Возвращаемое значение:
//	МассивЧастей - массив, содержащий части полного имени.
//
Функция МассивСоставляющихИмени(ПолноеИмя)

	МассивЧастей	= Новый Массив;
	ИмяДляОбработки	= ПолноеИмя;
	
	Пока НЕ ПустаяСтрока(ИмяДляОбработки) Цикл
		
		Если Лев(ИмяДляОбработки, 1) = "[" Тогда
			
			Позиция = Найти(ИмяДляОбработки, "]");
			
			Если Позиция = 0 Тогда
				
				МассивЧастей.Добавить(Сред(ИмяДляОбработки, 2));
				ИмяДляОбработки = "";
				
			Иначе
				
				МассивЧастей.Добавить(Сред(ИмяДляОбработки, 1, Позиция));
				ИмяДляОбработки = Сред(ИмяДляОбработки, Позиция + 2);
				
			КонецЕсли;
			
		Иначе
			
			Позиция = Найти(ИмяДляОбработки, ".");
			
			Если Позиция = 0 Тогда
				
				МассивЧастей.Добавить(ИмяДляОбработки);
				ИмяДляОбработки = "";
				
			Иначе
				
				МассивЧастей.Добавить(Лев(ИмяДляОбработки, Позиция - 1));
				ИмяДляОбработки = Сред(ИмяДляОбработки, Позиция + 1);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивЧастей;

КонецФункции

#КонецОбласти

#Область ЗапретыПродаж

Функция УсловияЗапретаПродажиТовара(ПереченьЗапретов, ВидНоменклатуры)
	Возврат ОбщегоНазначенияРМККлиентСервер.УсловияЗапретаПродажиТовара(ПереченьЗапретов, ВидНоменклатуры);
КонецФункции
// Обновляет до актуального значения признак разрешения интерактивного редактирования
//
// Параметры:
//  НастройкаРабочегоМеста - СправочникСсылка.НастройкиРМК - настройка, в которой хранится текущее значение запрета
//  РедактированиеРазрешено - Булево - значение запрета из мастер - системы
//
// Возвращаемое значение:
//  Результат - Структура - 
// 	(содержит:
//		ВыполнениеУспешно - Булево;
//		Комментарий - Строка - дополнительная информация о состоянии выполнения)
//
Функция ОбновитьПризнакРазрешенияИнтерактивногоРедактирования(НастройкаРабочегоМеста, РедактированиеРазрешено)
	
	Результат = ОбщегоНазначенияРМККлиентСервер.РезультатОбработкиДанныхПоУмолчанию();
	
	Если ЗначениеЗаполнено(НастройкаРабочегоМеста) И ТипЗнч(РедактированиеРазрешено) = Тип("Булево") Тогда
		
		ТекущееЗначениеЗапрета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаРабочегоМеста,
			"ЗапрещеноРедактированиеУсловийОграниченийПродаж");
		
		РедактированиеЗапрещено = НЕ РедактированиеРазрешено;
		
		Если ТекущееЗначениеЗапрета <> РедактированиеЗапрещено Тогда
			
			ОбъектДляИзменения = НастройкаРабочегоМеста.ПолучитьОбъект();
			ОбъектДляИзменения.ЗапрещеноРедактированиеУсловийОграниченийПродаж = РедактированиеЗапрещено;
			
			Попытка
				
				ОбъектДляИзменения.Записать();
				Результат.ВыполнениеУспешно = Истина;
				Результат.Комментарий = НСтр("ru = 'Признак запрета редактирования успешно обновлен'");
				
			Исключение
				
				ОбщаяИнформацияОбОшибке =
					НСтр("ru = 'Ошибка при обновлении признака разрешения редактирования запретов.'",
						ОбщегоНазначения.КодОсновногоЯзыка()); 
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписьЖурналаРегистрации(ОбщаяИнформацияОбОшибке,
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки);
				Результат.ТекстОшибки = СтрШаблон("%1%2", ОбщаяИнформацияОбОшибке, ПодробноеПредставлениеОшибки);
				
			КонецПопытки;
			
		Иначе
			
			Результат.ВыполнениеУспешно = Истина;
			Результат.Комментарий = НСтр("ru = 'Обновление признака разрешения редактирования запретов не требуется.'");
			
		КонецЕсли;
		
	Иначе
		
		Результат.Комментарий =
			НСтр("ru = 'Невозможно обновить признак разрешения редактирования запретов по переданным исходным данным.'");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область Интеграция_с_API_сервиса_лояльности

Функция ДанныеОграниченияПродажиУспешноЗагружены(ОграничениеПродажи)
	
	Результат = Ложь;
	
	Если ЗначениеЗаполнено(ОграничениеПродажи) Тогда
		
		РезультатЗагрузкиОграничений = ЗагрузитьДанныеОграниченияПродажи(ОграничениеПродажи);
		Результат = РезультатЗагрузкиОграничений.ВыполнениеУспешно;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗагрузитьДанныеОграниченияПродажи(ОграничениеПродажи)

	Результат = ОбщегоНазначенияРМККлиентСервер.РезультатОбработкиДанныхПоУмолчанию();
	
	ДесериализованныеДанные = ДесериализоватьДанные(ОграничениеПродажи);
	Если ДесериализованныеДанныеКорректны(ДесериализованныеДанные) Тогда
		
		ЗагрузкаУспешна = АктуализироватьДанныеЗапрета(ДесериализованныеДанные);
		Результат.ВыполнениеУспешно = ЗагрузкаУспешна;
		
	Иначе
		Результат.Комментарий = НСтр("ru = 'Ошибка десериализации данных, подробнее см. журнал регистрации'");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция АктуализироватьДанныеЗапрета(ИсходныеДанные)
	Возврат ОбщегоНазначенияРМКПереопределяемый.АктуализироватьДанныеЗапрета(ИсходныеДанные);
КонецФункции

#КонецОбласти

#Область Десериализация_данных

Функция ДесериализоватьДанные(ИсходныеДанные)
	
	ДесериализованныеДанные = Новый Структура();
	
	Если ЗначениеЗаполнено(ИсходныеДанные)
		И ТипЗнч(ИсходныеДанные) = Тип("Структура") Тогда
		
	СоответствиеКонтекстовИмен = ОбщегоНазначенияРМКПовтИсп.СоответствиеИменСущностейЗапретовПродаж();
		
		Для каждого ЭлементОтвета Из ИсходныеДанные Цикл
			
			ДесериализованноеЗначение = Неопределено;
			ЗначениеДанных = ЭлементОтвета.Значение;
			
			Если ТипЗнч(ЗначениеДанных) = Тип("Структура") Тогда
				ДесериализованноеЗначение = ДесериализоватьСсылочнуюСущность(ЭлементОтвета);
			ИначеЕсли ТипЗнч(ЗначениеДанных) = Тип("Массив") Тогда
				ДесериализованноеЗначение = ДесериализоватьКоллекцию(ЭлементОтвета);
			Иначе
				ДесериализованноеЗначение = ДесериализоватьСущностьПримитивногоТипа(ЭлементОтвета);
			КонецЕсли;
			
			ИсходноеИмяСущности = ЭлементОтвета.Ключ;
			
			ИмяСущности = ?(СоответствиеКонтекстовИмен.Свойство(ИсходноеИмяСущности),
				СоответствиеКонтекстовИмен[ИсходноеИмяСущности],
				ИсходноеИмяСущности);
			
			ДесериализованныеДанные.Вставить(ИмяСущности, ДесериализованноеЗначение);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДесериализованныеДанные;
	
КонецФункции

// Проверяет заполненность в ответе от сервиса обязательных к заполнению полей
// по результатам десериализации в соответствии со схемой проверки
//
// Параметры:
//  Данные - Структура - десериализованный ответ от сервиса лояльности
//
// Возвращаемое значение:
//  Результат - Булево
//
Функция ДесериализованныеДанныеКорректны(Данные)

	ДанныеКорректны = Ложь;
	
	Если ТипЗнч(Данные) = Тип("Структура") И ЗначениеЗаполнено(Данные) Тогда
	
		СхемаПроверки = ОбщегоНазначенияРМКПовтИсп.
			СхемаПроверкиКорректнойДесериализацииОтветаОтСервисаЛояльности();
		
		Для каждого Элемент Из Данные Цикл
			
			ЗначениеПроверяемогоСвойства = Элемент.Значение;
			
			Если ТипЗнч(ЗначениеПроверяемогоСвойства) = Тип("Массив") Тогда
				
				Для каждого ЭлементМассива Из ЗначениеПроверяемогоСвойства Цикл
					
					ДанныеКорректны = ДесериализованныеДанныеКорректны(ЭлементМассива);
					Если НЕ ДанныеКорректны Тогда
						Возврат ДанныеКорректны;
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				ИмяПроверяемогоСвойства = Элемент.Ключ;
				
				// возможность работы с пустыми полями
				ДопускаетсяПустоеЗначение = СхемаПроверки.Свойство(ИмяПроверяемогоСвойства)
					И СхемаПроверки[ИмяПроверяемогоСвойства];
				
				// фактическая заполненность поля
				ЗагруженноеЗначениеЗаполнено = ЗначениеЗаполнено(ЗначениеПроверяемогоСвойства);
				
				// недопустимо пустое поле, когда ожидается обязательное заполнение поля
				Если НЕ (ДопускаетсяПустоеЗначение ИЛИ ЗагруженноеЗначениеЗаполнено) Тогда
					Возврат ДанныеКорректны;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ДанныеКорректны = Истина;
		
	КонецЕсли;
	
	Возврат ДанныеКорректны;
	
КонецФункции

// Десериализует ссылочную по данным сервиса лояльности, сопоставляя с существующими сущностями
//
// Параметры:
//  ИсходныеДанные - Структура - исходные данные для десериализации;
//
// Возвращаемое значение:
//  РезультатДесериализации - ЛюбаяСсылка
//
Функция ДесериализоватьСсылочнуюСущность(ИсходныеДанные)
	
	Результат = Неопределено;
	
		ПравилаДесериализации = ОбщегоНазначенияРМКПовтИсп.НаборПравилДесериализацииЗапретовПродаж();
		ИмяСущности = ИсходныеДанные.Ключ;
		
		Если ПравилаДесериализации.Свойство(ИмяСущности) Тогда
			
			ЗначениеСущности = ИсходныеДанные.Значение;
			
			ПравилоДесериализации = ПравилаДесериализации[ИмяСущности];
			
			ТипДанных = НРег(ПравилоДесериализации.ТипДанных);
			ПозицияТочкиВИмениТипа = СтрНайти(ТипДанных, ".");
			
			Если ПозицияТочкиВИмениТипа > 0 Тогда
				
				НаименованиеТипа = Сред(ТипДанных, ПозицияТочкиВИмениТипа + 1);
				
				Если ПравилоДесериализации.Свойство("Идентификатор") Тогда
					
					ИмяИдентификатораКонтекстаAPI = ПравилоДесериализации.Идентификатор;
					
					Если ЗначениеСущности.Свойство(ИмяИдентификатораКонтекстаAPI) Тогда
						
						ИдентификаторСущности = ЗначениеСущности[ИмяИдентификатораКонтекстаAPI];
						
						Если СтрНайти(ТипДанных, "перечислениессылка") > 0 Тогда
							
							Если ЗначениеЗаполнено(ИдентификаторСущности) Тогда
							
								Попытка
									Результат = Перечисления[НаименованиеТипа][ИдентификаторСущности];
								Исключение
									
									ЗаписьЖурналаРегистрации(
										НСтр("ru = 'Не удалось найти значение перечисления при загрузке запрета продаж из сервиса лояльности.'",
											ОбщегоНазначения.КодОсновногоЯзыка()),
											УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
									
								КонецПопытки;
								
							Иначе
								
								Попытка
									Результат = Перечисления[НаименованиеТипа].ПустаяСсылка();
								Исключение
									
									ЗаписьЖурналаРегистрации(
										НСтр("ru = 'Не удалось найти значение перечисления при загрузке запрета продаж из сервиса лояльности.'",
											ОбщегоНазначения.КодОсновногоЯзыка()),
											УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
									
								КонецПопытки;
							
							КонецЕсли;
							
						ИначеЕсли СтрНайти(ТипДанных, "справочникссылка") > 0 Тогда
							
							Если ЗначениеЗаполнено(ИдентификаторСущности) Тогда

								ИдентификаторЭлементаСправочника = Новый УникальныйИдентификатор(ИдентификаторСущности);
								СсылкаНаЭлементСправочника = Справочники[НаименованиеТипа].ПолучитьСсылку(ИдентификаторЭлементаСправочника);
								
								ТекстЗапроса = СтрШаблон("ВЫБРАТЬ
								|	Справочник.Ссылка КАК Ссылка
								|ИЗ
								|	Справочник.%1 КАК Справочник
								|ГДЕ
								|	НЕ Справочник.ПометкаУдаления
								|	И Справочник.Ссылка = &Ссылка", НаименованиеТипа);
								
								Запрос = Новый Запрос(ТекстЗапроса);
								Запрос.УстановитьПараметр("Ссылка", СсылкаНаЭлементСправочника);
								
								Выборка = Запрос.Выполнить().Выбрать();
								
								Результат = ?(Выборка.Следующий(), Выборка.Ссылка, Справочники[НаименованиеТипа].ПустаяСсылка());
								
							Иначе
								Результат = Справочники[НаименованиеТипа].ПустаяСсылка();
							КонецЕсли;

						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Результат) И ПравилоДесериализации.Свойство("ПоляПоиска") Тогда
					
					СоответствиеИменПолейПоиска = ПравилоДесериализации.ПоляПоиска;
					
					Если ЗначениеЗаполнено(СоответствиеИменПолейПоиска) Тогда
						
						ЗначенияПолейПоиска = Новый Структура();
						
						Для каждого ПолеПоиска Из СоответствиеИменПолейПоиска Цикл
							
							ИмяПоляПоискаВКонтекстеСервисаЛояльности = ПолеПоиска.Ключ;
							ИмяПоляПоискаВКонтекстеРМК = ПолеПоиска.Значение;
							ЗначениеПоля = ЗначениеСущности[ИмяПоляПоискаВКонтекстеСервисаЛояльности];
							ЗначенияПолейПоиска.Вставить(ИмяПоляПоискаВКонтекстеРМК, ЗначениеПоля);
						
						КонецЦикла;
						
						Если ЗначениеЗаполнено(ЗначенияПолейПоиска) Тогда
							
							ТекстЗапроса = СтрШаблон("ВЫБРАТЬ
							|	Справочник.Ссылка КАК Ссылка
							|ИЗ
							|	Справочник.%1 КАК Справочник
							|ГДЕ
							|	НЕ Справочник.ПометкаУдаления", НаименованиеТипа);
							
							Запрос = Новый Запрос;
							
							Для каждого Элемент Из ЗначенияПолейПоиска Цикл
							
								ТекстЗапроса = СтрШаблон("%1 И Справочник.%2 = &%2", ТекстЗапроса, Элемент.Ключ);
								Запрос.УстановитьПараметр(Элемент.Ключ, Элемент.Значение);
							
							КонецЦикла;
							
							Запрос.Текст = ТекстЗапроса;
							
							Выборка = Запрос.Выполнить().Выбрать();
							
							Результат = ?(Выборка.Следующий(), Выборка.Ссылка, Справочники[НаименованиеТипа].ПустаяСсылка());
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Десериализует сущность примитивного типа по данным сервиса лояльности
//
// Параметры:
//  ИсходныеДанные - Структура - исходные данные для десериализации
//
// Возвращаемое значение:
//  РезультатДесериализации - примитивный тип
//
Функция ДесериализоватьСущностьПримитивногоТипа(ИсходныеДанные)
	
	Результат = Неопределено;
	
		ПравилаДесериализации = ОбщегоНазначенияРМКПовтИсп.НаборПравилДесериализацииЗапретовПродаж();
		ИмяСущности = ИсходныеДанные.Ключ;
		
		Если ПравилаДесериализации.Свойство(ИмяСущности) Тогда
			
			ЗначениеСущности = ИсходныеДанные.Значение;
			
			ПравилоДесериализации = ПравилаДесериализации[ИмяСущности];
			
			ТипДанных = НРег(ПравилоДесериализации.ТипДанных);
			
			Если ТипДанных = "булево" Тогда
				
				ЗначениеПоУмолчанию = Ложь;
				
				Если ТипЗнч(ЗначениеСущности) = Тип("Число")
					ИЛИ ТипЗнч(ЗначениеСущности) = Тип("Строка") Тогда
					
					Попытка
						Результат = Булево(ЗначениеСущности);
					Исключение
						
						Результат = ЗначениеПоУмолчанию;
						ЗафиксироватьОшибкуПриведенияТипов(ИмяСущности, ПравилоДесериализации.ТипДанных);
						
					КонецПопытки;
					
				ИначеЕсли ТипЗнч(ЗначениеСущности) = Тип("Булево") Тогда
					Результат = ЗначениеСущности;
				Иначе
					Результат = ЗначениеПоУмолчанию;
				КонецЕсли;
				
			ИначеЕсли ТипДанных = "дата" ИЛИ ТипДанных = "время" ИЛИ ТипДанных = "датавремя" Тогда
				
				ЗначениеПоУмолчанию = Дата(1, 1, 1, 0, 0, 0);
				
				Если ТипЗнч(ЗначениеСущности) = Тип("Строка") Тогда
					
					ЧастьДаты = ЧастиДаты[ТипДанных];
					Результат = СтроковыеФункцииКлиентСервер.СтрокаВДату(ЗначениеСущности, ЧастьДаты);
					
				Иначе
					Результат = ЗначениеПоУмолчанию;
				КонецЕсли;
				
			ИначеЕсли ТипДанных = "число" Тогда
				
				ЗначениеПоУмолчанию = 0;
				
				Если ТипЗнч(ЗначениеСущности) = Тип("Строка") Тогда
				
					Результат = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЗначениеСущности);
					Если Результат = Неопределено Тогда 
						Результат = ЗначениеПоУмолчанию;
					КонецЕсли;
					
				ИначеЕсли ТипЗнч(ЗначениеСущности) = Тип("Число") Тогда
					Результат = ЗначениеСущности;
				Иначе
					Результат = ЗначениеПоУмолчанию;
				КонецЕсли;
			Иначе
				Результат = ЗначениеСущности;
			КонецЕсли;
			
		КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Десериализует сущность типа коллекция, поддержка десериализации вложенных коллекций не предусмотрена.
//
// Параметры:
//  ИсходныеДанные - Массив - исходные данные для десериализации
//
// Возвращаемое значение:
//  РезультатДесериализации - Массив
//
Функция ДесериализоватьКоллекцию(ИсходныеДанные)

	Результат = Новый Массив;
	
	ЗначениеИсходныхДанных = ИсходныеДанные.Значение;
	
	Если ТипЗнч(ЗначениеИсходныхДанных) = Тип("Массив") Тогда
		
		Для каждого Элемент Из ЗначениеИсходныхДанных Цикл
			
			Если ТипЗнч(Элемент) = Тип("Структура") Тогда
				ДесериализованноеЗначение = ДесериализоватьДанные(Элемент);
			ИначеЕсли НЕ ТипЗнч(Элемент) = Тип("Массив") Тогда
				ДесериализованноеЗначение = ДесериализоватьСущностьПримитивногоТипа(Элемент);
			КонецЕсли;
			
			Результат.Добавить(ДесериализованноеЗначение);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗафиксироватьОшибкуПриведенияТипов(ИмяСущности, ТипПриведения)

	ОбщаяИнформацияОбОшибке = СтрШаблон(
		НСтр("ru = 'Не удалось преобразовать поле ответа %1 к типу %2'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
			ИмяСущности, ТипПриведения);
	ЗаписьЖурналаРегистрации(ОбщаяИнформацияОбОшибке, УровеньЖурналаРегистрации.Ошибка,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

КонецПроцедуры

#КонецОбласти

 #Область ЗапретыПродаж_Переопределение

Функция ИмяРеквизитаВидаНоменклатуры()
	
	ЗначениеПоУмолчанию = "ВидНоменклатуры";
	ПереопределяемоеЗначение =
		ОбщегоНазначенияРМККлиентСерверПереопределяемый.ИмяРеквизитаВидаНоменклатуры();
	Возврат ?(ЗначениеЗаполнено(ПереопределяемоеЗначение), ПереопределяемоеЗначение, ЗначениеПоУмолчанию);
		
КонецФункции

Функция ИмяРеквизитаОсобенностиУчета()

	ЗначениеПоУмолчанию = "ОсобенностьУчета";
	ПереопределяемоеЗначение =
		ОбщегоНазначенияРМККлиентСерверПереопределяемый.ИмяРеквизитаОсобенностиУчета();
	Возврат ?(ЗначениеЗаполнено(ПереопределяемоеЗначение), ПереопределяемоеЗначение, ЗначениеПоУмолчанию);

КонецФункции

#КонецОбласти

#КонецОбласти

#Область АвтоматическиеСкидки

// Рассчитывает автоматические скидки для РМК
//
// Параметры:
//  Объект - ДанныеФормыКоллекция - данные объекта рабочего места кассира.
//  НастройкиРМК - Структура - структура настроек рабочего места кассира
//
Процедура РассчитатьАвтоматическиеСкидки(ФормаРМК) Экспорт
	
	ПараметрыРасчетаСкидок = СериализоватьПараметрыРасчетаСкидок(ФормаРМК.Объект);
	Результат = ОбщегоНазначенияРМККлиентСервер.РезультатВыполненияЗапросаПоУмолчанию();
	
	// Получаем из текущех настроек РМК адрес сервиса, логин и пароль из защищенного хранилища
	ОсновныеПараметры = ОбщегоНазначенияРМКВызовСервера.ЗначенияПараметровСервисаЛояльности(ФормаРМК.ТекущаяНастройкаРМК);
	
	ПараметрыВыполненияЗапроса = ОбщегоНазначенияРМККлиентСервер.ПараметрыЗапросаКСервису();
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияЗапроса, ОсновныеПараметры);
	ПараметрыВыполненияЗапроса.ТипЗапроса = "GET";
	ПараметрыВыполненияЗапроса.Ресурс = "calculatediscounts";
	ПараметрыВыполненияЗапроса.ТелоЗапроса = ПараметрыРасчетаСкидок;
	
	СтруктураРезультат = ВыполнитьЗапросКСервисуЛояльности(ПараметрыВыполненияЗапроса);
	
	Если СтруктураРезультат.ЕстьОшибки Тогда
		Возврат;			
	КонецЕсли;
	
	ДанныеОтвета = ОбработатьJSONСервер(СтруктураРезультат.ДанныеОтвета);
	ТаблицаТоваровИзЗапроса = ПолучитьТаблицуТоваровИзЗапроса(ДанныеОтвета);
	ПрименитьРезультатРасчета(ФормаРМК, ТаблицаТоваровИзЗапроса);
	
КонецПроцедуры	

Функция СериализоватьПараметрыРасчетаСкидок(Объект) Экспорт
	
	ДисконтнаяКарта 	 = Объект.ДисконтнаяКарта;
	МассивДисконтныхКарт = ПолучитьМассивДисконтныхКарт(ДисконтнаяКарта);
	ТорговыйОбъект 		 = Объект.ТорговыйОбъект;
	КассаККМ 			 = Объект.КассаККМ;
	РабочееМесто 		 = КассаККМ.РабочееМесто;
	Товары               = Объект.Товары.Выгрузить();
	ДатаОбъекта			 = ТекущаяУниверсальнаяДата();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("RecoverManagedDiscounts", Ложь);
	СтруктураПараметров.Вставить("ObjectTime", ДатаОбъекта);
	СтруктураПараметров.Вставить("CurrentDate", ДатаОбъекта);
	СтруктураПараметров.Вставить("LoyaltyCardPresented", ЗначениеЗаполнено(Объект.ДисконтнаяКарта));
	СтруктураПараметров.Вставить("HasGifts", Ложь);
	СтруктураПараметров.Вставить("UseApplicationPrices", Ложь);
	СтруктураПараметров.Вставить("ControlBalanceOfGoods", Ложь);
	СтруктураПараметров.Вставить("LoyaltyCardsList", МассивДисконтныхКарт);
	СтруктураПараметров.Вставить("RetailStore", ПолучитьСтруктуруСсылки(ТорговыйОбъект));
	СтруктураПараметров.Вставить("ApplyObject", Ложь);
	СтруктураПараметров.Вставить("WorkPlace", ПолучитьСтруктуруСсылки(РабочееМесто));
	СтруктураПараметров.Вставить("Goods", ПолучитьТаблицуТоваров(Товары));
	
	СтруктураОтветаJSON = Новый ЗаписьJSON;
	СтруктураОтветаJSON.УстановитьСтроку();
	ЗаписатьJSON(СтруктураОтветаJSON, СтруктураПараметров);
	
	СериализованнаяСтруктураПараметров = СтруктураОтветаJSON.Закрыть();
	
	Возврат СериализованнаяСтруктураПараметров;
	
КонецФункции

Функция ПолучитьСтруктуруСсылки(Ссылка)
	
	СтруктураСсылки = Новый Структура;
	СтруктураСсылки.Вставить("Ref", XMLСтрока(Ссылка));
	СтруктураСсылки.Вставить("Name", Ссылка.Наименование);
	
	Возврат СтруктураСсылки;
	
КонецФункции

Функция ПолучитьМассивДисконтныхКарт(ДисконтнаяКарта)
	
	МассивДисконтныхКарт = Новый Массив;
	ИмяРеквизита = ОбщегоНазначенияРМКПереопределяемый.ИмяРеквизитаКодКартыЛольности();
	МассивДисконтныхКарт.Добавить(ДисконтнаяКарта[ИмяРеквизита]);
	Возврат МассивДисконтныхКарт;
	
КонецФункции

Функция ПолучитьТаблицуТоваров(Товары)
	
	МассивТоваров = Новый Массив;
	
	Для Каждого СтрокаТовар Из Товары Цикл 
		
		СтруктураСтроки = Новый Структура;
		
		СтруктураСтроки.Вставить("LineNumber", СтрокаТовар.ИдентификаторСтроки);
		СтруктураСтроки.Вставить("Count", СтрокаТовар.Количество);
		СтруктураСтроки.Вставить("PackagesCount", СтрокаТовар.КоличествоУпаковок);
		СтруктураСтроки.Вставить("Item", ПолучитьСтруктуруСсылки(СтрокаТовар.Номенклатура));
		СтруктураСтроки.Вставить("Price", СтрокаТовар.Цена);
		СтруктураСтроки.Вставить("GiftSale", Ложь);
		СтруктураСтроки.Вставить("PercentOfAutomaticDiscount", СтрокаТовар.ПроцентАвтоматическойСкидки);
		СтруктураСтроки.Вставить("PercentOfManualDiscount", СтрокаТовар.ПроцентСкидкиНаценки);
		СтруктураСтроки.Вставить("VATRate", Строка(СтрокаТовар.СтавкаНДС));
		СтруктураСтроки.Вставить("Amount", СтрокаТовар.Цена * СтрокаТовар.КоличествоУпаковок - СтрокаТовар.СуммаСкидкиНаценки);
		СтруктураСтроки.Вставить("AmountOfAutomaticDiscount", СтрокаТовар.СуммаАвтоматическойСкидки);
		СтруктураСтроки.Вставить("TotalAmount", СтрокаТовар.СуммаБезСкидки);
		СтруктураСтроки.Вставить("VATAmount", СтрокаТовар.СуммаНДС);
		СтруктураСтроки.Вставить("AmountOfManualDiscount", СтрокаТовар.СуммаСкидкиНаценки);
		СтруктураСтроки.Вставить("Package", ПолучитьСтруктуруСсылки(СтрокаТовар.Упаковка));
		СтруктураСтроки.Вставить("Variant", ПолучитьСтруктуруСсылки(СтрокаТовар.Характеристика));
		
		МассивТоваров.Добавить(СтруктураСтроки);
		
	КонецЦикла;
	
	Возврат МассивТоваров;
	
КонецФункции

Процедура ПрименитьРезультатРасчета(ФормаРМК, ТаблицаРезультатРасчета)
	
	ТаблицаТовары = ФормаРМК.Объект.Товары;
	ТекущаяТаблицаТоваров = ТаблицаТовары.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТекущаяТаблицаТоваров.Номенклатура КАК Номенклатура,
		|	ТекущаяТаблицаТоваров.Упаковка КАК Упаковка,
		|	ТекущаяТаблицаТоваров.Характеристика КАК Характеристика,
		|	ТекущаяТаблицаТоваров.Количество КАК Количество,
		|	ТекущаяТаблицаТоваров.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ТекущаяТаблицаТоваров.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ТекущаяТаблицаТоваров.Цена КАК Цена,
		|	ТекущаяТаблицаТоваров.Сумма КАК Сумма,
		|	ТекущаяТаблицаТоваров.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
		|	ТекущаяТаблицаТоваров.СуммаБезСкидки КАК СуммаБезСкидки,
		|	ТекущаяТаблицаТоваров.СуммаНДС КАК СуммаНДС,
		|	ТекущаяТаблицаТоваров.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
		|	ТекущаяТаблицаТоваров.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
		|	ТекущаяТаблицаТоваров.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки
		|ПОМЕСТИТЬ ВТ_ТекущаяТаблица
		|ИЗ
		|	&ТекущаяТаблицаТоваров КАК ТекущаяТаблицаТоваров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаРасчетаСкидок.Номенклатура КАК Номенклатура,
		|	ТаблицаРасчетаСкидок.Упаковка КАК Упаковка,
		|	ТаблицаРасчетаСкидок.Характеристика КАК Характеристика,
		|	ТаблицаРасчетаСкидок.Количество КАК Количество,
		|	ТаблицаРасчетаСкидок.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ТаблицаРасчетаСкидок.Цена КАК Цена,
		|	ТаблицаРасчетаСкидок.Сумма КАК Сумма,
		|	ТаблицаРасчетаСкидок.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
		|	ТаблицаРасчетаСкидок.СуммаРучнойСкидки КАК СуммаСкидкиНаценки,
		|	ТаблицаРасчетаСкидок.СуммаНДС КАК СуммаНДС,
		|	ТаблицаРасчетаСкидок.ПроцентРучнойСкидки КАК ПроцентСкидкиНаценки,
		|	ТаблицаРасчетаСкидок.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки
		|ПОМЕСТИТЬ ВТ_ТаблицаРасчетаСкидок
		|ИЗ
		|	&ТаблицаРасчетаСкидок КАК ТаблицаРасчетаСкидок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТекущаяТаблица.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ВТ_ТаблицаРасчетаСкидок.Номенклатура КАК Номенклатура,
		|	ВТ_ТаблицаРасчетаСкидок.Упаковка КАК Упаковка,
		|	ВТ_ТаблицаРасчетаСкидок.Характеристика КАК Характеристика,
		|	ВТ_ТаблицаРасчетаСкидок.Количество КАК Количество,
		|	ВТ_ТаблицаРасчетаСкидок.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ВТ_ТаблицаРасчетаСкидок.Цена КАК Цена,
		|	ВТ_ТаблицаРасчетаСкидок.Сумма КАК Сумма,
		|	ВТ_ТекущаяТаблица.СуммаБезСкидки КАК СуммаБезСкидки,
		|	ВТ_ТекущаяТаблица.СуммаБезСкидки - ВТ_ТаблицаРасчетаСкидок.Сумма - ВТ_ТаблицаРасчетаСкидок.СуммаСкидкиНаценки КАК СуммаАвтоматическойСкидки,
		|	ВТ_ТаблицаРасчетаСкидок.СуммаНДС КАК СуммаНДС,
		|	ВТ_ТекущаяТаблица.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
		|	ВТ_ТаблицаРасчетаСкидок.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
		|	ВТ_ТаблицаРасчетаСкидок.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
		|	ВТ_ТекущаяТаблица.СуммаБезСкидки - ВТ_ТаблицаРасчетаСкидок.Сумма КАК СуммаСкидокОбщая
		|ИЗ
		|	ВТ_ТекущаяТаблица КАК ВТ_ТекущаяТаблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаРасчетаСкидок КАК ВТ_ТаблицаРасчетаСкидок
		|		ПО ВТ_ТекущаяТаблица.Номенклатура = ВТ_ТаблицаРасчетаСкидок.Номенклатура
		|			И ВТ_ТекущаяТаблица.Характеристика = ВТ_ТаблицаРасчетаСкидок.Характеристика
		|			И ВТ_ТекущаяТаблица.Упаковка = ВТ_ТаблицаРасчетаСкидок.Упаковка
		|			И ВТ_ТекущаяТаблица.ПроцентАвтоматическойСкидки <> ВТ_ТаблицаРасчетаСкидок.ПроцентАвтоматическойСкидки";
	
	Запрос.УстановитьПараметр("ТекущаяТаблицаТоваров", ТекущаяТаблицаТоваров);
	Запрос.УстановитьПараметр("ТаблицаРасчетаСкидок", ТаблицаРезультатРасчета);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда 
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			МассивСтрок = ТаблицаТовары.НайтиСтроки(Новый Структура("ИдентификаторСтроки", Выборка.ИдентификаторСтроки));
			Для каждого НайденнаяСтрока Из МассивСтрок Цикл
				ЗаполнитьЗначенияСвойств(НайденнаяСтрока, Выборка, "Цена, 
																	| Сумма, 
																	| СуммаНДС, 
																	| СуммаСкидкиНаценки, 
																	| СуммаАвтоматическойСкидки, 
																	| ПроцентСкидкиНаценки,
																	| ПроцентАвтоматическойСкидки,
																	| СуммаСкидокОбщая");			
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТаблицуТоваровИзЗапроса(ДанныеОтвета)
	
	ОписаниеТиповЧисло = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2));
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТоваров.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.Упаковки"));
	ТаблицаТоваров.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ТаблицаТоваров.Колонки.Добавить("КлючСвязи", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("Количество", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("КоличествоУпаковок", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("ПроцентАвтоматическойСкидки", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("ПроцентРучнойСкидки", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("Сумма", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("СуммаАвтоматическойСкидки", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("СуммаВсего", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("СуммаРучнойСкидки", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("Цена", ОписаниеТиповЧисло);
	
	Если ТипЗнч(ДанныеОтвета) = Тип("Структура") И ДанныеОтвета.Свойство("Goods") Тогда
		Для каждого СтрокаТаблицы Из ДанныеОтвета.Goods Цикл
			
			НоваяСтрока = ТаблицаТоваров.Добавить();
			НоваяСтрока.Номенклатура = ПолучитьДесериализованноеСсылочноеЗначение(СтрокаТаблицы, "Item", "Справочники.Номенклатура");
			НоваяСтрока.Упаковка = ПолучитьДесериализованноеСсылочноеЗначение(СтрокаТаблицы, "Package", "Справочники.Упаковки");
			НоваяСтрока.Характеристика = ПолучитьДесериализованноеСсылочноеЗначение(СтрокаТаблицы, "Variant", "Справочники.ХарактеристикиНоменклатуры");
			НоваяСтрока.Цена = СтрокаТаблицы.Price;
			НоваяСтрока.Сумма = СтрокаТаблицы.Amount;
			НоваяСтрока.Количество = СтрокаТаблицы.Count;
			НоваяСтрока.КоличествоУпаковок = СтрокаТаблицы.PackagesCount;
			НоваяСтрока.СуммаАвтоматическойСкидки = СтрокаТаблицы.AmountOfAutomaticDiscount;
			НоваяСтрока.СуммаРучнойСкидки = СтрокаТаблицы.AmountOfManualDiscount;
			НоваяСтрока.ПроцентАвтоматическойСкидки = СтрокаТаблицы.PercentOfAutomaticDiscount;
			НоваяСтрока.ПроцентРучнойСкидки = СтрокаТаблицы.PercentOfManualDiscount;
			НоваяСтрока.СуммаВсего = СтрокаТаблицы.TotalAmount;
			НоваяСтрока.СуммаНДС = СтрокаТаблицы.VATAmount;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаТоваров;
	
КонецФункции

Функция ПолучитьДесериализованноеСсылочноеЗначение(ВходящиеДанные, ИмяПараметра, ТипЗначения)
	
	УстановитьБезопасныйРежим(Истина);
	
	Попытка
		СтроковоеЗначениеПараметра = ВходящиеДанные[ИмяПараметра].Ref;
		ГУИД = Новый УникальныйИдентификатор(СтроковоеЗначениеПараметра);
		ЗначениеПараметра = Неопределено;
		Выполнить("ЗначениеПараметра = " + ТипЗначения + ".ПолучитьСсылку(ГУИД)");
	Исключение
		Выполнить("ЗначениеПараметра = " + ТипЗначения + ".ПустаяСсылка()");
	КонецПопытки;
	
	УстановитьБезопасныйРежим(Ложь);
	
	Возврат ЗначениеПараметра;
	
КонецФункции

#КонецОбласти

#КонецОбласти

