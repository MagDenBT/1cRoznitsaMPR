////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы библиотеки СтандартныеПодсистемы (БСП).
//
////////////////////////////////////////////////////////////////////////////////


#Область ПрограммныйИнтерфейс

#Область СведенияОБиблиотекеИлиКонфигурации

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.6".
//
//   ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                  Обработчики обновления таких библиотек должны быть вызваны ранее
//                                  обработчиков обновления данной библиотеки.
//                                  При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                  порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                  в процедуре ПриДобавленииПодсистем общего модуля
//                                  ПодсистемыКонфигурацииПереопределяемый.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Если Не СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		Описание.Имя    = "Розница";
		Описание.ИдентификаторИнтернетПоддержки = "Retail";
	Иначе
		Описание.Имя    = "РозницаБазовая";
		Описание.ИдентификаторИнтернетПоддержки = "RetailBase";
	КонецЕсли;
	Описание.Версия = "2.3.11.37";
	
	Описание.ПараллельноеОтложенноеОбновлениеСВерсии = "2.2.12.0";
	Описание.РежимВыполненияОтложенныхОбработчиков = "Параллельно";
	
КонецПроцедуры

#КонецОбласти

#Область ПереопределяемыеПроцедурыБСП

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - описание полей 
//                                  см. в процедуре ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.0.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_0_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//  Обработчик.Опциональный        = Истина;
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	#Область Версия_2_2_2
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.2.13";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ПервыйЗапуск";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Версия = "2.2.2.13";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ПустойОбработчик";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Версия = "2.2.2.13";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ОбновитьСтатьиДДС";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Версия = "2.2.2.13";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.УстановитьКонстантуДатаНачалаПримененияПостановления1137";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Версия = "2.2.2.13";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ОбновитьВидыОплатЧекаККМ";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Версия = "2.2.2.13";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ОбновитьНастройкиРаспределенияВыручкиПоСекциямФР";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.2.13";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "Справочники.Магазины.ОбновитьПредопределенныеВидыКонтактнойИнформацииОрганизаций";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.2.13";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "Справочники.ФизическиеЛица.ОбновитьПредопределенныеВидыКонтактнойИнформацииОрганизаций";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.2.13";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "Справочники.Контрагенты.ОбновитьПредопределенныеВидыКонтактнойИнформацииОрганизаций";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.2.13";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ВключитьДополнительныеОпцииАссортимента";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.2.13";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.УстановитьКонстантуНижняяГраницаДиапазонаSKUВесовогоТовара";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.2.13";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ПерезаполнитьДокументыСОтрицательнымПроцентомОплаты";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.2.13";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ЗаполнитьЭкваринговыеТерминалы";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.2.13";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ПерезаполнитьРегистрПродажиПоПлатежнымКартам";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.2.13";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.УстановитьКонстантуИспользоватьОрдернуюСхему";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.2.13";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.УстановкаРеквизитовСправочникаПользователи";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.2.13";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.УстановитьДатуНачалаПримененияПриказа164";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.2.13";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ОбновитьСтатусыОбработкиЕГАИСПоАктам";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.2.13";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.СоздатьНаборыСоответствийВидовОплаты";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.2.13";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("423736c1-7be4-439d-bb61-3a420cbc09c0");
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ЗаполнитьТабличныеЧастиДляСписков";
	Обработчик.Комментарий = НСтр("ru = 'Обновление контактной информации для списков.'");
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.Приоритет = 99;
	Обработчик.РежимВыполнения = "Отложенно";
	
	#КонецОбласти
	
	#Область Версия_2_2_3
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.3.4";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ЗаполнениеНСИ";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.3.4";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ЗаполнениеАналитикХозяйственныхОпераций";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.3.5";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ЗаполнениеОперацийДокументаПоступления";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.3.7";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ПерезаполнитьНастройкаИспользованияСерий";
	
	#КонецОбласти
	
	#Область Версия_2_2_4
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.4.6";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ЗаполнениеАналитикХозяйственныхОпераций";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.4.0";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ЗаполнитьСправкиБ";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение справок Б.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.4.0";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ЗаполнитьАктыПостановкиНаБаланс";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение актов постановки на баланс.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.4.0";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ЗаполнитьИдентификаторыЕГАИС";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение идентификаторов ЕГАИС.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.4.0";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.СоздатьИсходящиеТТН";
	Обработчик.Комментарий = НСтр("ru = 'Создание исходящих ТТН.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.4.0";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ЗаполнитьСтатусОбработкиВскрытияТары";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение вскрытий тары.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.4.0";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.СоздатьАктыСписанияЕГАИС";
	Обработчик.Комментарий = НСтр("ru = 'Создание актов списания ЕГАИС.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.4.0";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ЗаполнитьТТНВходящиеЕГАИС";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение входящих ТТН.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.4.0";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ИзменитьДокументОснованиеВПротоколеОбмена";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение протокола обмена ЕГАИС.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.4.13";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ИзменитьСтатусыПодтвержденныхТТН";
	Обработчик.Комментарий = НСтр("ru = 'Изменение статусов подтвержденных ТТН.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.4.18";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.УстановитьПроверкуНеобходимостиСозданияДокументовЕГАИС";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.4.18";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "Справочники.Организации.ОбновитьПредопределенныеВидыКонтактнойИнформацииОрганизаций";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.4.18";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "Справочники.Организации.ЗаполнитьКонстантуИспользоватьНесколькоОрганизаций";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.4.31";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("2ca521f8-7541-43e6-ace7-e87ed4f7d5ea");
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ОбновитьПроведениеДокументовЕГАИС";
	Обработчик.Комментарий = НСтр("ru = 'Корректировка движений по разливной алкогольной продукции.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.4.34";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.УстановитьДатуНачалаРегистрацииРозничныхПродажВЕГАИСВСельскойМестности";
	
	#КонецОбласти
	
	#Область Версия_2_2_5
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.5.5";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.УстановитьПравоВыбораКартыБезПодтверждения";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.5.5";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ИзменитьВладельцаКартВЗаказахПокупателя";
	Обработчик.Комментарий = НСтр("ru = 'Изменение владельца карт в заказах покупателя'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.5.5";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ПеренестиСотрудникаЕжедневногоОтчетаВТЧ";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.5.5";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ЗаполнитьРегистрФактическоеРабочееВремяСотрудников";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.5.11";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ОбновитьДанныеВидовОсобыхНалоговОрганизаций";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.5.11";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ОбновитьДанныеСистемНалогообложенияОрганизаций";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.5.11";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ЗаполнитьПризнакиПредметовРасчета";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.5.13";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ЗаполнитьПризнакиПредметахРасчетаВВидахНоменклатуры";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.5.14";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ОбновитьГруппуКонтактнойИнформацииИнформационныеКарты";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.5.14";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "Справочники.ИнформационныеКарты.ОбновитьПредопределенныеВидыКонтактнойИнформацииОрганизаций";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.5.16";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.УстановитьТипыОборудованияУКассККМ";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.5.17";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ОбновитьДанныеОткрытыхКассовыхСмен";
	Обработчик.Комментарий = НСтр("ru = 'Перенос данных открытых смен в новый документ Кассовая смена'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.5.17";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("49d52544-9adf-40fa-8b09-396417047b87");
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ОбновитьДанныеЗакрытыхКассовыхСмен";
	Обработчик.Комментарий = НСтр("ru = 'Перенос данных закрытых смен в новый документ Кассовая смена'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.5.23";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "Справочники.СтатьиДвиженияДенежныхСредств.ЗаполнитьХозяйственнуюОперациюПредопределеннымСтатьямДДС";
	
	#КонецОбласти
	
	#Область Версия_2_2_6
	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.6.0";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ЗаполнитьПризнакРасположенияОрганизацииВСельскойМестности";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение признака расположения организации в сельской местности.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.6.0";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ЗаполнитьФорматОбменаОрганизацийЕГАИС";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение формата обмена в классификаторе организаций ЕГАИС.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.6.0";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ЗаполнитьТорговыйОбъектВТТНВходящейЕГАИС";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("3dbfa71e-bad1-46d2-8e6c-a07fb81a0ac4");
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ЧитаемыеОбъекты = "Документ.ТТНВходящаяЕГАИС";
	Обработчик.ИзменяемыеОбъекты = "Документ.ТТНВходящаяЕГАИС";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение торгового объекта во входящих ТТН.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.6.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.УстановитьПравоДоступностьКолонкиКПоступлению";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.6.8";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ЗаполнитьПризнакАгента";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.6.9";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ЗаполнитьТипыПризнакаПредметаРасчета";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.6.10";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b449e9ce-542d-4337-a2d0-8974f673e65e");
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ДополнитьВидыЦенВПравилах";
	Обработчик.Комментарий = НСтр("ru = 'Обработываются виды цен в правилах ценообразования.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.6.11";
	Обработчик.Процедура = "Справочники.ВидыОплатЧекаККМ.ЗаполнитьПредопределенные";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.6.11";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.ИзменитьВерсиюФорматаОбмена";
	Обработчик.Комментарий = НСтр("ru = 'Выполняется изменение версии формата обмена.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.6.14";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ЗаполнитьДвиженияДокументаПеремаркировкаТоваров";
	
	#КонецОбласти
	
	#Область Версия_2_2_7
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.7.3";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ПерезаписатьЗаказыНаПеремещение";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.7.6";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ОбработатьОборудованиеПроверкаЦенников";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b611258e-41ba-11dd-ac9d-0015e9b8c48d");
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ЧитаемыеОбъекты = "Справочник.ПодключаемоеОборудование";
	Обработчик.ИзменяемыеОбъекты = "Справочник.ПодключаемоеОборудование";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение типа офлайн оборудования для 1С:Проверка ценников'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.7.7";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ЗаполнитьТабличнуюЧастьДокументаРасходныйКассовыйОрдер";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("2edf7fc4-dc24-4752-b54f-8e81d266efa1");
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ЧитаемыеОбъекты = "Документ.РасходныйКассовыйОрдер";
	Обработчик.ИзменяемыеОбъекты = "Документ.РасходныйКассовыйОрдер";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение расшифровки платежа в расходных кассовых ордерах.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.7.9";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.УдалитьВскрытиеТарыЕГАИС.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("185dbc62-9135-46b2-a414-f3fc2070bf36");
	Обработчик.ОчередьОтложеннойОбработки = 2;
	Обработчик.ЧитаемыеОбъекты = "Документ.УдалитьВскрытиеТарыЕГАИС,Документ.ЧекЕГАИС";
	Обработчик.ИзменяемыеОбъекты = "Документ.УдалитьВскрытиеТарыЕГАИС";
	Обработчик.Комментарий = НСтр("ru = 'Создает чеки ЕГАИС на основании документов вскрытия тары.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.7.9";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ПерезаписатьЗаказыПоставщику";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("c63d2685-c187-4c7d-a7f2-772addb3d3b8");
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ЧитаемыеОбъекты = "Документ.ЗаказПоставщику";
	Обработчик.ИзменяемыеОбъекты = "Документ.ЗаказПоставщику";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение склада в заказах поставщику.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.7.9"; 
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ЗаполнитьРазрешениеНаВводДробногоКоличества";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.7.9";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ЗаполнитьСлужебныеПоляТелефоновФизическихЛиц";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("723c0a2a-24b3-4db1-9a18-c815c91e95d5");
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ЧитаемыеОбъекты = "Справочник.ФизическиеЛица";
	Обработчик.ИзменяемыеОбъекты = "Справочник.ФизическиеЛица";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение служебных полей телефонов физических лиц.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.7.9";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ИсправитьТипКассыККМОфлайнКассыККМ";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("bf3a6a43-3a1c-4652-9f71-6f6b2d60e8e3");
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ЧитаемыеОбъекты = "Справочник.КассыККМ";
	Обработчик.ИзменяемыеОбъекты = "Справочник.КассыККМ";
	Обработчик.Комментарий = НСтр("ru = 'Исправление удаленного типа ""Сервис оборудования"" на ""ККМ Офлайн"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.7.9";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ИсправитьТипОборудованияПравилаОбменаСПодключаемымОборудованием";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e0220cb4-9b0e-4d42-81ac-8e1390f4677d");
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ЧитаемыеОбъекты = "Справочник.ПравилаОбменаСПодключаемымОборудованием";
	Обработчик.ИзменяемыеОбъекты = "Справочник.ПравилаОбменаСПодключаемымОборудованием";
	Обработчик.Комментарий = НСтр("ru = 'Исправление удаленного типа ""Сервис оборудования"" на ""ККМ Офлайн"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.7.10"; 
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ЗаполнитьКонстантуИспользоватьРасчетыСКлиентами";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.7.16";
	Обработчик.Процедура = "ИнтеграцияЕГАИСРТ.РассчитатьСтатусыОформленияДокументов";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("18efb620-bbee-4705-b06d-882d48bff0d1");
	Обработчик.ОчередьОтложеннойОбработки = 4;
	Обработчик.Комментарий = НСтр("ru = 'Заполняет регистр сведений ""СтатусыОформленияДокументовЕГАИС"" по данным прикладных документов и документов ЕГАИС'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.7.16";
	Обработчик.Процедура = "ИнтеграцияЕГАИСРТ.ЗаполнитьНоменклатуруТТНИсходящейЕГАИС";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("2e9fbd11-2f46-4cea-8325-7561ef9c596e");
	Обработчик.Комментарий = НСтр("ru = 'Заполняет номенклатуру, количество упаковок и флаг наличия расхождений в исходящих ТТН ЕГАИС'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.7.25";
	Обработчик.Процедура = "ИнтеграцияЕГАИСРТ.ЗаполнитьПорядокВСопоставленииНоменклатурыЕГАИС";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("aca4c4ea-24ba-4923-9559-17d61a4c4456");
	Обработчик.Комментарий = НСтр("ru = 'Обновляет записи регистра сведений ""Сопоставление номенклатуры ЕГАИС""'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.7.25";
	Обработчик.Процедура = "ИнтеграцияЕГАИСРТ.ЗаполнитьОснованиеТТНВходящейЕГАИС";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("6b872f6a-9546-4268-a955-ed26b9f8b1d4");
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит ""ДокументОснование"" документа ""ТТНВходящаяЕГАИС""'");
	
	#КонецОбласти
	
	#Область Версия_2_2_8
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.8.6";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ОбновлениеОтложенныхЧековККМ";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Версия = "2.2.8.6";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ОбновитьВидыОплатЧекаККМ";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.8.6";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ЗаполнитьПризнакиПредметовРасчета";
	
	
	#Область ИнтеграцияЕГАИСУТ_ОбработатьДанныеДляПереходаНаНовуюВерсиюТТНИсходящаяЕГАИС
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.8.9";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ИнтеграцияЕГАИСРТ.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсиюТТНИсходящаяЕГАИС";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("6df04d0b-786b-4620-8c32-0b3dca6725df");
	Обработчик.Комментарий = НСтр("ru = 'Заполняет номенклатуру, количество упаковок и флаг наличия расхождений в исходящих ТТН ЕГАИС'");
	Обработчик.ОчередьОтложеннойОбработки = 1;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.8.9";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ИнтеграцияЕГАИСРТ.ОбработатьДанныеДляПереходаНаНовуюВерсиюТТНИсходящаяЕГАИС";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("5b6f9be7-48d7-4612-a1ba-220884eafa6c");
	Обработчик.Комментарий = НСтр("ru = 'Заполняет номенклатуру, количество упаковок и флаг наличия расхождений в исходящих ТТН ЕГАИС'");
	Обработчик.ОчередьОтложеннойОбработки = 2;
	
	#КонецОбласти
	
	#Область ИнтеграцияЕГАИСУТ_ОбработатьДанныеДляПереходаНаНовуюВерсиюСоответствиеНоменклатуры
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.8.9";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ИнтеграцияЕГАИСРТ.ОбработатьДанныеДляПереходаНаНовуюВерсиюСоответствиеНоменклатуры";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("856043bd-499e-4e32-8f03-78c9a198cd13");
	Обработчик.Комментарий = НСтр("ru = 'Заполняет регистр сведений ""СоответствиеНоменклатурыЕГАИС""'");
	Обработчик.ОчередьОтложеннойОбработки = 3;
	
	#КонецОбласти
	
	#Область ОценкаПроизводительности
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.8.19";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.СоздатьКлючевыеОперации";
	
	#КонецОбласти
	
	#КонецОбласти
	
	#Область Версия_2_2_9
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.10.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ЗаполнениеАналитикХозяйственныхОпераций";
	
	#КонецОбласти
	
	#Область Версия_2_2_10
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.10.10";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ЗаполнениеАналитикХозяйственныхОпераций";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.10.10";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ЗаполнитьИменаДополнительныхРеквизитовИСведений";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.10.20";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ЗаполнитьРеквизитЧекККМПродажа";
	
	#КонецОбласти
	
	#Область Версия_2_2_11
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.11.21";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ЗаполнитьСистемыНалогообложенияУСН";	
	
	#КонецОбласти
	
	#Область Версия_2_2_12
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.12.01";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ЗаполнитьТелефонПользователя";	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.12.05";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.УстановитьКонстантуВестиУчетТабачнойПродукцииМОТП";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.12.11";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ЗаполнитьРаспределениеНоменклатуры";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.12.11";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ЗаполнитьПрименениеСистемНалогообложения";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.12.11";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ЧекККМ.ПерезаполнитьСистемуНалогообложения";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("568be808-a847-43e0-a0a3-a486d9d2609b");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ЧекККМ.ЗарегистрироватьДанныеКЗаполнениюСНО";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документы.ЧекККМ";
	Обработчик.ИзменяемыеОбъекты = "Документы.ЧекККМ";
	Обработчик.БлокируемыеОбъекты = "Документы.ЧекККМ";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение Системы налогообложения в документах ""Чек"".'");
	
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия = "2.2.12.11";
	//Обработчик.РежимВыполнения = "Отложенно";
	//Обработчик.Процедура = "Документы.ВозвратТоваровОтПокупателя.ПерезаполнитьСистемуНалогообложения";
	//Обработчик.Идентификатор = Новый УникальныйИдентификатор("de42a50d-a7ec-4ac3-ac49-f3e260995f72");
	//Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ВозвратТоваровОтПокупателя.ЗарегистрироватьДанныеКЗаполнениюСНО";
	//Обработчик.ОчередьОтложеннойОбработки = 2;
	//Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	//Обработчик.ЧитаемыеОбъекты = "Документы.ВозвратТоваровОтПокупателя";
	//Обработчик.ИзменяемыеОбъекты = "Документы.ВозвратТоваровОтПокупателя";
	//Обработчик.БлокируемыеОбъекты = "Документы.ВозвратТоваровОтПокупателя";
	//Обработчик.Комментарий = НСтр("ru = 'Заполнение Системы налогообложения в документах ""Возврат товаров от покупателя"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.12.11";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ОплатаОтПокупателяПлатежнойКартой.ПерезаполнитьСистемуНалогообложения";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("252b01f0-80e1-4230-837c-ec11f400a20e");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ОплатаОтПокупателяПлатежнойКартой.ЗарегистрироватьДанныеКЗаполнениюСНО";
	Обработчик.ОчередьОтложеннойОбработки = 3;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документы.ОплатаОтПокупателяПлатежнойКартой";
	Обработчик.ИзменяемыеОбъекты = "Документы.ОплатаОтПокупателяПлатежнойКартой";
	Обработчик.БлокируемыеОбъекты = "Документы.ОплатаОтПокупателяПлатежнойКартой";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение Системы налогообложения в документах Операция по платежной карте.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.12.11";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ПриходныйКассовыйОрдер.ПерезаполнитьСистемуНалогообложения";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("4dfa8e2c-15aa-4851-afe0-70be9c322a1e");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ПриходныйКассовыйОрдер.ЗарегистрироватьДанныеКЗаполнениюСНО";
	Обработчик.ОчередьОтложеннойОбработки = 4;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документы.ПриходныйКассовыйОрдер";
	Обработчик.ИзменяемыеОбъекты = "Документы.ПриходныйКассовыйОрдер";
	Обработчик.БлокируемыеОбъекты = "Документы.ПриходныйКассовыйОрдер";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение Системы налогообложения в документах ""Приходный кассовый ордер"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.12.11";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.РасходныйКассовыйОрдер.ПерезаполнитьСистемуНалогообложения";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("fbbe13d5-2813-44bb-bf64-4bb6ae4762a5");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.РасходныйКассовыйОрдер.ЗарегистрироватьДанныеКЗаполнениюСНО";
	Обработчик.ОчередьОтложеннойОбработки = 5;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документы.РасходныйКассовыйОрдер";
	Обработчик.ИзменяемыеОбъекты = "Документы.РасходныйКассовыйОрдер";
	Обработчик.БлокируемыеОбъекты = "Документы.РасходныйКассовыйОрдер";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение Системы налогообложения в документах ""Расходный кассовый ордер"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.12.11";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.РеализацияТоваров.ПерезаполнитьСистемуНалогообложения";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("d2606732-001d-4d72-a150-2a5f76dd7420");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.РеализацияТоваров.ЗарегистрироватьДанныеКЗаполнениюСНО";
	Обработчик.ОчередьОтложеннойОбработки = 6;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документы.РеализацияТоваров";
	Обработчик.ИзменяемыеОбъекты = "Документы.РеализацияТоваров";
	Обработчик.БлокируемыеОбъекты = "Документы.РеализацияТоваров";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение Системы налогообложения в документах ""Реализация товаров"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.12.11";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.РегистрацияБезналичнойОплаты.ПерезаполнитьСистемуНалогообложения";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a7018b89-6a79-447a-8acd-5f71064cc749");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.РегистрацияБезналичнойОплаты.ЗарегистрироватьДанныеКЗаполнениюСНО";
	Обработчик.ОчередьОтложеннойОбработки = 7;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документы.РегистрацияБезналичнойОплаты";
	Обработчик.ИзменяемыеОбъекты = "Документы.РегистрацияБезналичнойОплаты";
	Обработчик.БлокируемыеОбъекты = "Документы.РегистрацияБезналичнойОплаты";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение Системы налогообложения в документах ""Регистрация безналичной оплаты"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.12.11";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.Контрагенты.ЗаполнитьСистемуНалогообложенияКонтрагентов";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a3d53e74-bc8c-4d9c-8860-99edb840ea20");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.Контрагенты.ЗарегистрироватьКонтрагентовДляЗаполнениюСНО";
	Обработчик.ОчередьОтложеннойОбработки = 4;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочники.Контрагенты";
	Обработчик.ИзменяемыеОбъекты = "Справочники.Контрагенты";
	Обработчик.БлокируемыеОбъекты = "Справочники.Контрагенты";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение Системы налогообложения контрагентов.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.12.20";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ЗаменитьСтавкуНДСВНастройкахПользователей";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("6c50ca6c-b239-463c-aa87-01557d0d7012");
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыРТ.БезЗарегистрированияДанныхКОбработкеДляПерехода";
	Обработчик.ПроцедураПроверки    = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.НастройкиПользователей";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.НастройкиПользователей";
	Обработчик.БлокируемыеОбъекты = "РегистрСведений.НастройкиПользователей";
	Обработчик.Комментарий = НСтр("ru = 'Замена ставки ""НДС18%"" на ставку ""НДС20%"" в регистре сведений ""Настройки пользователей"".'");
	
	#КонецОбласти
	
	
	#Область Версия_2_2_13
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.13.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ОбновитьчЧекиНеЗакрытыхСмен";
	
	#КонецОбласти
	
	#Область Версия_2_3_1
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.0.15";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.СозданиеРозничногоПокупателя";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.1.14";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.Контрагенты.УстановитьПризнакПокупательПоставщик";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("2431f6d2-93ab-428d-a4ba-ab0f0bb9985e");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.Контрагенты.ЗарегистрироватьКонтрагентовПокупательПоставщик";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочники.Контрагенты";
	Обработчик.ИзменяемыеОбъекты = "Справочники.Контрагенты";
	Обработчик.БлокируемыеОбъекты = "Справочники.Контрагенты";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение признака Покупатель и Поставщик.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.1.15";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ЗаполнитьУчетНДСВДоговорах";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.1.20";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ЗаполнитьВидыВнешнихОбработок";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.1.21";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.НастройкиЗагрузкиДанныхСчетчиковПодсчетаПосетителей.ПеренестиПарольВБезопасноеХранилище";
	Обработчик.ЧитаемыеОбъекты = "";
	Обработчик.ИзменяемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Настройки загрузки данных счетчиков: Перенос пароля в безопасное хранилище.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.1.29";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ОбновитьДвиженияВознагражденийПоПКО";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("2558b4cb-8382-41eb-9ab7-adfcdb6ed9e9");
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыРТ.БезЗарегистрированияДанныхКОбработкеДляПерехода";
	Обработчик.ПроцедураПроверки    = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ПриходныйОрдерНаТовары, РегистрНакопления.РасчетыСКлиентами";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.РасчетыСКлиентами";
	Обработчик.БлокируемыеОбъекты = "РегистрНакопления.РасчетыСКлиентами";
	Обработчик.Комментарий = НСтр("ru = 'Обновление движений расчетов с кдиентами оплате вознаграждения'");
	
	#КонецОбласти
	
	#Область Версия_2_3_2
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.2.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ОбновитьИНННеРезидента";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.2.13";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ЗаменитьУдаленныеРолиВНепереопределяемыхПрофилях";
	Обработчик.ЧитаемыеОбъекты = "";
	Обработчик.ИзменяемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Профили групп доступа: Замена удаленных ролей РТ у непереопределяемых профилях.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.2.14";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.УстановкаКонстантПеремещения";
	Обработчик.ЧитаемыеОбъекты = "Документ.ПередачаТоваровМеждуОрганизациями, Документ.ОрдерНаПеремещениеТоваров";
	Обработчик.ИзменяемыеОбъекты = "Константа.ИспользоватьПередачиТоваровМеждуОрганизациями, Константа.ИспользоватьОрдерНаПеремещениеТоваров";
	Обработчик.Комментарий = НСтр("ru = 'Обновление констант, управляющих перемещениями.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.2.18";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ВключитьУчетОбувнойПродукции";

	#КонецОбласти
	
	#Область Версия_2_3_3
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.3.8";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.РасходныйОрдерНаТовары.ДополнитьДвиженияПоРезервам";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("da88862d-99b4-4e23-b86b-0c1cb8629e34");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.РасходныйОрдерНаТовары.ЗарегистрироватьДляИзмененийДвиженийПоРезервам";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.РасходныйОрдерНаТовары";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.ТоварыНаСкладах";
	Обработчик.БлокируемыеОбъекты = "РегистрНакопления.ТоварыНаСкладах";
	Обработчик.Комментарий = НСтр("ru = 'Заполнить резервы по расходным ордерам.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	Приоритет = Обработчик.ПриоритетыВыполнения.Добавить();
	Приоритет.Порядок = "После";
	Приоритет.Идентификатор = Новый УникальныйИдентификатор("25758374-3c22-480e-9c64-05eb69f4d8ff");
	Приоритет.Процедура = "ОбновлениеИнформационнойБазыРТ.ИзменитьТоварыНаСкладахВРамкахРезерва";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.3.15";
	Обработчик.Процедура = "УправлениеСвойствамиСлужебный.УстановитьЗначениеПризнакаИспользуется";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.3.21";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ПоправитьТелефонПользователя";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.НачальноеЗаполнение = Истина;
	
	#КонецОбласти
	
	#Область Версия_2_3_4
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.4.7";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ПоправитьТелефонПользователя";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.4.20";
	Обработчик.Процедура = "Справочники.ВидыОплатЧекаККМ.ЗаполнитьПредопределенные";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.4.21";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ОбновитьРозничногоПокупателя";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.4.22";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.УдалитьПравоРазрешитьНеполнуюВыемку";
	Обработчик.Комментарий = НСтр("ru = 'Удаляет доп. право ""Разрешить неполную выемку при закрытии смены""'");
	
	#КонецОбласти
	
	#Область Версия_2_3_5
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.5.4";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ПеренестиДанныеТЧШтрихкодыАпаковокВАкцизныеМаркиПеремещениеТоваров";
	Обработчик.ЧитаемыеОбъекты = "Документ.ПеремещениеТоваров";
	Обработчик.ИзменяемыеОбъекты = "Документ.ПеремещениеТоваров";
	Обработчик.Комментарий = НСтр("ru = 'Перемещение товаров: Перенос марок из табличной части ШтрихкодыУпаковок в АкцизныеМарки.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.5.9";
	Обработчик.Процедура = "Справочники.МобильныеПриложения.ОбновитьПоставляемыеПриложения";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет каталог поставляемых мобильных приложений'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.5.12";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ВключитьРаботуСНовостями";
	Обработчик.Комментарий = НСтр("ru = 'Включает подсистему Новости'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.5.13";
	Обработчик.Процедура = "Справочники.ВидыНоменклатуры.ЗаполнитьИспользованиеСерий";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.5.13";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.СерииНоменклатуры.УстановитьВладельцаСерий";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a41b53a3-c24f-4fa8-b9ef-aca6f1f353cb");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.СерииНоменклатуры.ЗарегистрироватьСерииНоменклатуры_ВладелецСерии";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочники.СерииНоменклатуры, Справочники.ВидыНоменклатуры";
	Обработчик.ИзменяемыеОбъекты = "Справочники.СерииНоменклатуры";
	Обработчик.БлокируемыеОбъекты = "Справочники.СерииНоменклатуры";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение владельцев серий.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.5.16";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ВключитьДополнительныеОпцииАлкольнойПродукции";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.5.25";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ПерезаполнитьСловарьСопоставленияНоменклатуры";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("5de78941-0c35-4163-a9fc-6e6d2ac67b04");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыРТ.БезЗарегистрированияДанныхКОбработкеДляПерехода";
	Обработчик.ОчередьОтложеннойОбработки = 2;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочники.Номенклатура, Справочники.ХарактеристикиНоменклатуры";
	Обработчик.ИзменяемыеОбъекты = "РегистрыСведений.СловарьСопоставленияНоменклатурыБЭД";
	Обработчик.БлокируемыеОбъекты = "РегистрыСведений.СловарьСопоставленияНоменклатурыБЭД";
	Обработчик.Комментарий = НСтр("ru = 'Обмен с контрагентами. Перезаполнение словаря сопоставления номенклатуры.'");
	
	#КонецОбласти
	
	#Область Версия_2_3_6
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.6.4";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.УдалитьПравоИзменятьУчетДенежныхСредствВКассовыхДокументах";
	Обработчик.Комментарий = НСтр("ru = 'Удаляет доп. право ""Доступность изменения учета денежных средств в кассовых документах""'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.6.10";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ПровестиВозвратУслуги";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("7d469b0e-f469-43a4-80a2-f5692722e7bd");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.Продажи.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочники.Номенклатура, Документы.ВозвратТоваровОтПокупателя";
	Обработчик.ИзменяемыеОбъекты = "РегистрыНакопления.Продажи";
	Обработчик.БлокируемыеОбъекты = "РегистрыНакопления.Продажи";
	Обработчик.Комментарий = НСтр("ru = 'Регистр Продажи. Возврат услуг.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.6.13";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ЗаполнитьРеквизитОрганизацииВСкладах";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит ""Организация"" в Справочнике ""Склады""'");
	
	#КонецОбласти
	
	#Область Версия_2_3_7
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.7.4";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ПеренестиБанковскиеСчетаОрганизаций";
	Обработчик.Комментарий = НСтр("ru = 'Переносит Банковские счета организаций в общий справочник банковских счетов'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.7.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.ДоговорыКонтрагентов.ПерезаполнитьБанковскийСчетОрганизации";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f5220ed2-5560-4ab1-bff3-987e3efcd1db");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.ДоговорыКонтрагентов.ЗарегистрироватьДанныеКЗаполнениюБСО";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочники.ДоговорыКонтрагентов";
	Обработчик.ИзменяемыеОбъекты = "Справочники.ДоговорыКонтрагентов";
	Обработчик.БлокируемыеОбъекты = "Справочники.ДоговорыКонтрагентов";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение Банковского счета организации в справочнике ""Договоры контрагентов"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.7.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.РегистрацияБезналичнойОплаты.ПерезаполнитьБанковскийСчетОрганизации";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("00b59ec7-edd2-401d-9fef-971628aac4b2");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.РегистрацияБезналичнойОплаты.ЗарегистрироватьДанныеКЗаполнениюБСО";
	Обработчик.ОчередьОтложеннойОбработки = 2;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документы.РегистрацияБезналичнойОплаты";
	Обработчик.ИзменяемыеОбъекты = "Документы.РегистрацияБезналичнойОплаты";
	Обработчик.БлокируемыеОбъекты = "Документы.РегистрацияБезналичнойОплаты";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение Банковского счета организации в документе ""Регистрация безналичной оплаты"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.7.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ПерезаполнитьРегистрНакопленияДенежныеСредстваБезналичные";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("8e74649a-6b66-4c09-b511-2e4e3c40d48c");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ДенежныеСредстваБезналичные.ЗарегистрироватьДанныеКЗаполнениюБСО";
	Обработчик.ОчередьОтложеннойОбработки = 3;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрыНакопления.ДенежныеСредстваБезналичные";
	Обработчик.ИзменяемыеОбъекты = "РегистрыНакопления.ДенежныеСредстваБезналичные";
	Обработчик.БлокируемыеОбъекты = "РегистрыНакопления.ДенежныеСредстваБезналичные";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение Банковского счета организации в регистре ""Денежные средства безналичные"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.7.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ВводОстатковДенежныхСредств.ПерезаполнитьБанковскийСчетОрганизации";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f82ce4e5-87d5-472f-8c6b-a67a72845c27");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ВводОстатковДенежныхСредств.ЗарегистрироватьДанныеКЗаполнениюБСО";
	Обработчик.ОчередьОтложеннойОбработки = 4;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документы.ВводОстатковДенежныхСредств";
	Обработчик.ИзменяемыеОбъекты = "Документы.ВводОстатковДенежныхСредств";
	Обработчик.БлокируемыеОбъекты = "Документы.ВводОстатковДенежныхСредств";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение Банковского счета организации в документе ""Ввод остатков денежных средств"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.7.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ВозвратТоваровПоставщику.ПерезаполнитьБанковскийСчетОрганизации";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b915c1c2-5c41-46a5-a54e-5b821e63a785");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ВозвратТоваровПоставщику.ЗарегистрироватьДанныеКЗаполнениюБСО";
	Обработчик.ОчередьОтложеннойОбработки = 5;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документы.ВозвратТоваровПоставщику";
	Обработчик.ИзменяемыеОбъекты = "Документы.ВозвратТоваровПоставщику";
	Обработчик.БлокируемыеОбъекты = "Документы.ВозвратТоваровПоставщику";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение Банковского счета организации в документе ""Возврат товаров поставщику"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.7.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ЗаказПокупателя.ПерезаполнитьБанковскийСчетОрганизации";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("54602a87-ec59-458f-8e99-fde5f25eb11e");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ЗаказПокупателя.ЗарегистрироватьДанныеКЗаполнениюБСО";
	Обработчик.ОчередьОтложеннойОбработки = 6;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документы.ЗаказПокупателя";
	Обработчик.ИзменяемыеОбъекты = "Документы.ЗаказПокупателя";
	Обработчик.БлокируемыеОбъекты = "Документы.ЗаказПокупателя";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение Банковского счета организации в документе ""Заказ покупателя"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.7.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПерезаполнитьБанковскийСчетОрганизации";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("79706579-70d6-42f0-bd00-daa39a278af1");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ЗаявкаНаРасходованиеДенежныхСредств.ЗарегистрироватьДанныеКЗаполнениюБСО";
	Обработчик.ОчередьОтложеннойОбработки = 7;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документы.ЗаявкаНаРасходованиеДенежныхСредств";
	Обработчик.ИзменяемыеОбъекты = "Документы.ЗаявкаНаРасходованиеДенежныхСредств";
	Обработчик.БлокируемыеОбъекты = "Документы.ЗаявкаНаРасходованиеДенежныхСредств";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение Банковского счета организации в документе ""Заявка на расходование денежных средств"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.7.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ОтчетКомитентуОПродажах.ПерезаполнитьБанковскийСчетОрганизации";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("26d6b582-ae2c-4ce1-993e-42d579545ec0");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ОтчетКомитентуОПродажах.ЗарегистрироватьДанныеКЗаполнениюБСО";
	Обработчик.ОчередьОтложеннойОбработки = 8;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документы.ОтчетКомитентуОПродажах";
	Обработчик.ИзменяемыеОбъекты = "Документы.ОтчетКомитентуОПродажах";
	Обработчик.БлокируемыеОбъекты = "Документы.ОтчетКомитентуОПродажах";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение Банковского счета организации в документе ""Отчет комитенту о продажах"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.7.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ПоступлениеТоваров.ПерезаполнитьБанковскийСчетОрганизации";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("eaf0d11a-1ff4-4cea-9cce-e4979f5dd72f");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ПоступлениеТоваров.ЗарегистрироватьДанныеКЗаполнениюБСО";
	Обработчик.ОчередьОтложеннойОбработки = 9;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документы.ПоступлениеТоваров";
	Обработчик.ИзменяемыеОбъекты = "Документы.ПоступлениеТоваров";
	Обработчик.БлокируемыеОбъекты = "Документы.ПоступлениеТоваров";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение Банковского счета организации в документе ""Поступление товаров"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.7.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ПриходныйКассовыйОрдер.ПерезаполнитьБанковскийСчетОрганизации";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("6201cc27-bb48-4c11-972a-01f724743488");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ПриходныйКассовыйОрдер.ЗарегистрироватьДанныеКЗаполнениюБСО";
	Обработчик.ОчередьОтложеннойОбработки = 10;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документы.ПриходныйКассовыйОрдер";
	Обработчик.ИзменяемыеОбъекты = "Документы.ПриходныйКассовыйОрдер";
	Обработчик.БлокируемыеОбъекты = "Документы.ПриходныйКассовыйОрдер";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение Банковского счета организации в документе ""Приходный кассовый ордер"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.7.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.РасходныйКассовыйОрдер.ПерезаполнитьБанковскийСчетОрганизации";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f9787e52-65b2-43e5-972f-7815ba70b58a");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.РасходныйКассовыйОрдер.ЗарегистрироватьДанныеКЗаполнениюБСО";
	Обработчик.ОчередьОтложеннойОбработки = 11;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документы.РасходныйКассовыйОрдер";
	Обработчик.ИзменяемыеОбъекты = "Документы.РасходныйКассовыйОрдер";
	Обработчик.БлокируемыеОбъекты = "Документы.РасходныйКассовыйОрдер";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение Банковского счета организации в документе ""Расходный кассовый ордер"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.7.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.РеализацияТоваров.ПерезаполнитьБанковскийСчетОрганизации";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a1c03b17-60a4-4fa3-a731-daf69277605a");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.РеализацияТоваров.ЗарегистрироватьДанныеКЗаполнениюБСО";
	Обработчик.ОчередьОтложеннойОбработки = 12;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документы.РеализацияТоваров";
	Обработчик.ИзменяемыеОбъекты = "Документы.РеализацияТоваров";
	Обработчик.БлокируемыеОбъекты = "Документы.РеализацияТоваров";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение Банковского счета организации в документе ""Реализация товаров"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.7.7";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ЗаполнитьКонстантуНаличияОрганизацийСЕНВД";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет константу ""ЕНВДВОрганизациях"" по наличию организаций зарегистрированных с этой системой налогообложения'");
	
	#КонецОбласти
	
	#Область Версия_2_3_9
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.9.8";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ОбновитьПравилаОбменаСОборудованием";
	Обработчик.Комментарий = НСтр("ru = 'ОбновляетПравилаОбменаСОборудованием.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.9.8";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ПерезаполнитьДокументыФизическихЛиц";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("3429090e-cb5e-4e9f-8797-57e32b651ad3");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыРТ.БезЗарегистрированияДанныхКОбработкеДляПерехода";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочники.ВидыДокументовФизическихЛиц, РегистрыСведений.ДокументыФизическихЛиц";
	Обработчик.ИзменяемыеОбъекты = "РегистрыСведений.ДокументыФизическихЛиц";
	Обработчик.БлокируемыеОбъекты = "РегистрыСведений.ДокументыФизическихЛиц";
	Обработчик.Комментарий = НСтр("ru = 'Перезаполнение документов физических лиц.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.9.19";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ОбновитьКонстантуПодключаемогоОборудования";
	Обработчик.Комментарий = НСтр("ru = 'ОбновляетПравилаОбменаСОборудованием.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.9.36";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ОбновитьКонстантуИспользоватьКодыВидовНоменклатурнойКлассификации";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет константу ""ИспользоватьКодыВидовНоменклатурнойКлассификации"".'");
	
	#КонецОбласти
	
	#Область Версия_2_3_10
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.14";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ОбновитьКнопкиВерхнейПанелиРМК";
	Обработчик.Комментарий = НСтр("ru = 'Перезаполнение кнопок верхней панели РМК.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.49";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ЗаполнитьПризнакиПредметовРасчета";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.49";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ОбновитьПризнакиПредметовРасчета";
	Обработчик.Комментарий = НСтр("ru = 'Перезаполняет признаки предметов расчета в видах номенклатуры согласно ФФД 1.2.'");
	
	#КонецОбласти
	
	#Область Версия_2_3_11
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.11.8";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ЗаполнитьИдентификаторПлатежныхСистем";
	Обработчик.Комментарий = НСтр("ru = 'Перезаполнение настроек оплаты СБП.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.11.13";
	Обработчик.Процедура = "Справочники.ВидыОплатЧекаККМ.ЗаполнитьПредопределенные";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.11.25";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ОбновитьКонстантыПечатиСлипЧека";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение констант печати слип чека.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.11.30";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ЗаполнитьПризнакиПредметовРасчета";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.11.30";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ПерезаполнитьПризнакиПредметовРасчета";
	Обработчик.Комментарий = НСтр("ru = 'Перезаполняет признаки предметов расчета в видах номенклатуры согласно ФФД 1.2.'");
	
	#КонецОбласти
	
КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - (возвращаемое значение) если установить Истина,
//                                то будет выведена форма с описанием обновлений. По умолчанию, Истина.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
// Пример обхода выполненных обработчиков обновления:
//
//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//		
//		Если Версия.Версия = "*" Тогда
//			// Обработчик, который может выполнятся при каждой смене версии.
//		Иначе
//			// Обработчик, который выполняется для определенной версии.
//		КонецЕсли;
//		
//		Для Каждого Обработчик Из Версия.Строки Цикл
//			...
//		КонецЦикла;
//		
//	КонецЦикла;
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
	Если ОбменДаннымиСервер.ЭтоПодчиненныйУзелРИБ() 
		И ОтсутствуютПрофилиКлючевыхОпераций() Тогда
		
		СоздатьКлючевыеОперации();
		
	КонецЕсли;
	
КонецПроцедуры // ПриОпределенииРежимаОбновленияДанных()

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//                                           или "*", если нужно выполнять при переходе с любой конфигурации.
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт

КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует
//        указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, 
	Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
	Если ПредыдущееИмяКонфигурации = "ПредыдущееИмяКонфигурацииБазовая" Тогда
		Параметры.ВерсияКонфигурации = ПредыдущаяВерсияКонфигурации;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновленияИнформационнойБазы

// Процедура выполняет обработчики при первом запуске.
//
Процедура ПервыйЗапуск_ГлавныйУзел() Экспорт
	
	Справочники.БазовыеЕдиницыИзмерения.ЗаполнитьЕдиницыИзмеренияПоУмолчанию();
	Справочники.СтатьиДвиженияДенежныхСредств.ЗаполнитьХозяйственнуюОперациюПредопределеннымСтатьямДДС();
	Справочники.ВидыОплатЧекаККМ.ЗаполнитьПредопределенные();
	Справочники.АналитикаХозяйственныхОпераций.ЗаполнитьПредопределенные();
	ЗаполнитьКонстантыПоУмолчанию();
	
КонецПроцедуры // ПервыйЗапуск_ГлавныйУзел()

// Процедура выполняет обработчики при первом запуске.
//
Процедура ПервыйЗапуск() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() = Неопределено Тогда
	
		ПервыйЗапуск_ГлавныйУзел();
	
	КонецЕсли;
	
	ЗаполнитьСвойстваВидовКонтактнойИнформации();
	ПланыОбмена.ПоРабочемуМесту.ОбновитьСценарииОбмена();

КонецПроцедуры // ПервыйЗапуск()

#КонецОбласти

#КонецОбласти

#Область ОбщиеОбработчики
	
Процедура ПустойОбработчик() Экспорт

	

КонецПроцедуры

Процедура ОбновитьСтатьиДДС() Экспорт
	
	ПрефиксБазы = Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Получить();
	
	СтатьяВыплатаЗарплаты = Справочники.СтатьиДвиженияДенежныхСредств.ВыплатаЗарплатыСотрудникам.ПолучитьОбъект();
	СтатьяВыплатаЗарплаты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыПоВедомостям;
	СтатьяВыплатаЗарплаты.УстановитьНовыйКод(ПрефиксБазы);
	
	СтатьяВыплатаЗарплатыСотруднику = Справочники.СтатьиДвиженияДенежныхСредств.ВыплатаЗарплатыСотруднику.ПолучитьОбъект();
	СтатьяВыплатаЗарплатыСотруднику.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыРаботнику;
	СтатьяВыплатаЗарплатыСотруднику.УстановитьНовыйКод(ПрефиксБазы);
	
	Попытка
		СтатьяВыплатаЗарплаты.Записать();
		СтатьяВыплатаЗарплатыСотруднику.Записать();
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура УстановитьКонстантуДатаНачалаПримененияПостановления1137() Экспорт
	
	Значение = Константы.ДатаНачалаПримененияПостановления1137.Получить();
	
	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		Константы.ДатаНачалаПримененияПостановления1137.Установить(Дата("20120101"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьВидыОплатЧекаККМ() Экспорт
	
	Справочники.ВидыОплатЧекаККМ.ЗаполнитьПредопределенные();
	
КонецПроцедуры

Процедура ОбновитьНастройкиРаспределенияВыручкиПоСекциямФР() Экспорт
	
	Если НЕ (ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.НастройкиРаспределенияВыручкиПоСекциямФР.РаспределениеПоУмолчанию") = Неопределено)  Тогда
		
		СправочникОбъект = Справочники.НастройкиРаспределенияВыручкиПоСекциямФР.РаспределениеПоУмолчанию.ПолучитьОбъект();
		НужноЗаписать = Ложь;
		Если НЕ ЗначениеЗаполнено(СправочникОбъект.НомерСекцииДляПриходныхКассовыхОрдеров) Тогда
			СправочникОбъект.НомерСекцииДляПриходныхКассовыхОрдеров = 2;
			НужноЗаписать = Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СправочникОбъект.НомерСекцииДляРасходныхКассовыхОрдеров) Тогда
			СправочникОбъект.НомерСекцииДляРасходныхКассовыхОрдеров = 2;
			НужноЗаписать = Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СправочникОбъект.НомерСекцииПоУмолчаниюДляФискальныхЧеков) Тогда
			СправочникОбъект.НомерСекцииПоУмолчаниюДляФискальныхЧеков = 1;
			НужноЗаписать = Истина;
		КонецЕсли;
		
		Если НужноЗаписать Тогда
			СправочникОбъект.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнениеАналитикХозяйственныхОпераций() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() = Неопределено Тогда
		Справочники.АналитикаХозяйственныхОпераций.ЗаполнитьПредопределенные();
		Если Не ЗначениеЗаполнено(Константы.ПриоритетыРеализацииТоваров.Получить()) Тогда
			Константы.ПриоритетыРеализацииТоваров.Установить(Перечисления.ПриоритетыРеализацииТоваров.Собственный);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура обновления ИБ для справочника видов контактной информации.
//
// Инструкция:
// Для каждого объекта, владельца КИ, для каждого соответствующего ему вида КИ добавить 
// строчку вида: ОбновитьВидКИ(.....). При этом,
// важен порядок в котором будут осуществляться эти вызовы, чем раньше вызов для вида КИ,
// тем выше этот вид КИ будет располагаться на форме объекта.
//
// Параметры функции УправлениеКонтактнойИнформацией.ОбновитьВидКИ:
// 1. Вид КИ - Ссылка на предопределенный вид КИ.
// 2. Тип КИ - Ссылка на перечисление
// 3. МожноИзменятьСпособРедактирования  - Определяет, можно ли в режиме Предприятие изменить способ редактирования,
//                                         например, для адресов, которые попадают в регл. отчетность, нужно
//                                         запретить возможность изменения.
// 4. РедактированиеТолькоВДиалоге       - Если установить Истина, то будет значение вида КИ можно будет
//                                         редактировать только в форме ввода (имеет смысл только для
//                                         адресов, телефонов и факсов).
// 5. АдресТолькоРоссийский              - Если установить Истина, то для адресов можно будет ввести 
//                                         только российский адрес (имеет смысл только для адресов).
// 6. Порядок                            - Определяет порядок элемента, для сортировки относительно других
//
//
Процедура ЗаполнитьСвойстваВидовКонтактнойИнформации() Экспорт
	
	// СтандартныеПодсистемы 
	// СтандартныеПодсистемы.Пользователи
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.EmailПользователя,
		Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, 	Истина, Ложь, Ложь, 1);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонПользователя,
		Перечисления.ТипыКонтактнойИнформации.Телефон,               	Истина, Ложь, Ложь, 2);
	// Конец СтандартныеПодсистемы.Пользователи
	
	// СтандартныеПодсистемы.Организации
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации,
		Перечисления.ТипыКонтактнойИнформации.Адрес,                 	Истина, Ложь, Истина, 3);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации,
		Перечисления.ТипыКонтактнойИнформации.Адрес,                 	Истина, Ложь,   Ложь, 4);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации,
		Перечисления.ТипыКонтактнойИнформации.Телефон,               	Истина, Ложь,   Ложь, 5);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ФаксОрганизации,
		Перечисления.ТипыКонтактнойИнформации.Факс,                  	Истина, Ложь,   Ложь, 6);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.EmailОрганизации,
		Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, 	Истина, Ложь,   Ложь, 7);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации,
		Перечисления.ТипыКонтактнойИнформации.Адрес,                 	Истина, Ложь,   Ложь, 8);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации,
		Перечисления.ТипыКонтактнойИнформации.Другое,                	Истина, Ложь,   Ложь, 9);
	// Конец СтандартныеПодсистемы.Организации
	// Конец СтандартныеПодсистемы 

КонецПроцедуры
#КонецОбласти

#Область Релиз_2_2_2

// Включает функциональные опции управления ассортиментом
Процедура ВключитьДополнительныеОпцииАссортимента() Экспорт
	
	Если Константы.ИспользоватьАссортимент.Получить() Тогда
		
		Константы.ИспользоватьТоварныеКатегорииИКвотыАссортимента.Установить(Истина);
		Константы.УстанавливатьВидыЦенВАссортименте.Установить(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает нижнюю границу диапазона SKU для весовых товаров равной 1, если она равна 0.
Процедура УстановитьКонстантуНижняяГраницаДиапазонаSKUВесовогоТовара() Экспорт
	
	Если Константы.НижняяГраницаДиапазонаSKUВесовогоТовара.Получить() = 0 Тогда
		Константы.НижняяГраницаДиапазонаSKUВесовогоТовара.Установить(1);
	КонецЕсли;
	
КонецПроцедуры

// Переносит информацию из Договоров эквайринга в эквайринговые терминалы
//
Процедура ЗаполнитьЭкваринговыеТерминалы() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание.Ссылка
	|ПОМЕСТИТЬ ТаблицаРанееОбработанныхЭТ
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы.ТарифыЗаРасчетноеОбслуживание КАК ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭквайринговыеТерминалы.Ссылка
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|ГДЕ
	|	ЭквайринговыеТерминалы.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭквайринговыеТерминалы.Ссылка,
	|	ЭквайринговыеТерминалы.ДоговорЭквайринга
	|ПОМЕСТИТЬ ТаблицаНеобработанныхЭТ
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|ГДЕ
	|	НЕ ЭквайринговыеТерминалы.ДоговорЭквайринга = ЗНАЧЕНИЕ(Справочник.УдалитьДоговорыЭквайринга.ПустаяСсылка)
	|	И НЕ ЭквайринговыеТерминалы.Ссылка В
	|				(ВЫБРАТЬ
	|					ТаблицаРанееОбработанныхЭТ.Ссылка КАК Ссылка
	|				ИЗ
	|					ТаблицаРанееОбработанныхЭТ КАК ТаблицаРанееОбработанныхЭТ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьДоговорыЭквайрингаТарифыЗаРасчетноеОбслуживание.Ссылка КАК ДоговорЭквайринга,
	|	УдалитьДоговорыЭквайрингаТарифыЗаРасчетноеОбслуживание.НомерСтроки,
	|	УдалитьДоговорыЭквайрингаТарифыЗаРасчетноеОбслуживание.ВидОплаты,
	|	УдалитьДоговорыЭквайрингаТарифыЗаРасчетноеОбслуживание.ПроцентТорговойУступки КАК ПроцентКомиссииПриПродаже,
	|	-УдалитьДоговорыЭквайрингаТарифыЗаРасчетноеОбслуживание.ПроцентТорговойУступки КАК ПроцентКомиссииПриОтмене,
	|	ВЫБОР
	|		КОГДА УдалитьДоговорыЭквайрингаТарифыЗаРасчетноеОбслуживание.Ссылка.ЭквайрерВозвращаетКомиссиюПриВозврате
	|			ТОГДА -УдалитьДоговорыЭквайрингаТарифыЗаРасчетноеОбслуживание.ПроцентТорговойУступки
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПроцентКомиссииПриВозврате
	|ПОМЕСТИТЬ ТаблицаДанныхДоговоров
	|ИЗ
	|	Справочник.УдалитьДоговорыЭквайринга.ТарифыЗаРасчетноеОбслуживание КАК УдалитьДоговорыЭквайрингаТарифыЗаРасчетноеОбслуживание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанныхДоговоров.ВидОплаты,
	|	ТаблицаДанныхДоговоров.ПроцентКомиссииПриПродаже,
	|	ТаблицаДанныхДоговоров.ПроцентКомиссииПриВозврате,
	|	ТаблицаНеобработанныхЭТ.Ссылка,
	|	ВЫБОР
	|		КОГДА ТаблицаДанныхДоговоров.ВидОплаты ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПометитьНаУдаление,
	|	ТаблицаНеобработанныхЭТ.ДоговорЭквайринга,
	|	ТаблицаДанныхДоговоров.ПроцентКомиссииПриОтмене
	|ПОМЕСТИТЬ ТаблицаДанныхДоговоровПодготовленная
	|ИЗ
	|	ТаблицаНеобработанныхЭТ КАК ТаблицаНеобработанныхЭТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДанныхДоговоров КАК ТаблицаДанныхДоговоров
	|		ПО ТаблицаНеобработанныхЭТ.ДоговорЭквайринга = ТаблицаДанныхДоговоров.ДоговорЭквайринга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанныхДоговоровПодготовленная.ВидОплаты,
	|	ТаблицаДанныхДоговоровПодготовленная.ПроцентКомиссииПриПродаже,
	|	ТаблицаДанныхДоговоровПодготовленная.ПроцентКомиссииПриВозврате,
	|	ТаблицаДанныхДоговоровПодготовленная.Ссылка КАК Ссылка,
	|	ТаблицаДанныхДоговоровПодготовленная.ДоговорЭквайринга,
	|	ТаблицаДанныхДоговоровПодготовленная.ПроцентКомиссииПриОтмене
	|ИЗ
	|	ТаблицаДанныхДоговоровПодготовленная КАК ТаблицаДанныхДоговоровПодготовленная
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДанныхДоговоровПодготовленная.Ссылка КАК Ссылка,
	|	ТаблицаДанныхДоговоровПодготовленная.ПометитьНаУдаление,
	|	ТаблицаДанныхДоговоровПодготовленная.ДоговорЭквайринга,
	|	ТаблицаДанныхДоговоровПодготовленная.ДоговорЭквайринга.Эквайрер КАК Эквайрер
	|ИЗ
	|	ТаблицаДанныхДоговоровПодготовленная КАК ТаблицаДанныхДоговоровПодготовленная
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Результат = Запрос.ВыполнитьПакет();
	ТарифыЗаРасчетноеОбслуживание = Результат[4].Выгрузить();
	ТаблицаНеобработанныхЭТ = Результат[5].Выгрузить();
	
	Для каждого СтрокаТаблицыЭТ Из ТаблицаНеобработанныхЭТ Цикл
		
		Если СтрокаТаблицыЭТ.ПометитьНаУдаление Тогда
			
			ОбъектЭТ = СтрокаТаблицыЭТ.Ссылка.ПолучитьОбъект();
			ОбъектЭТ.ПометкаУдаления = Истина;
			ОбъектЭТ.Эквайрер = СтрокаТаблицыЭТ.Эквайрер;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбъектЭТ);
			
		Иначе
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Ссылка", СтрокаТаблицыЭТ.Ссылка);
			
			СтрокиТабличнойЧасти = ТарифыЗаРасчетноеОбслуживание.НайтиСтроки(СтруктураПоиска);
			
			ОбъектЭТ = СтрокаТаблицыЭТ.Ссылка.ПолучитьОбъект();
			
			ОбъектЭТ.Эквайрер = СтрокаТаблицыЭТ.Эквайрер;
			
			Для каждого СтрокаТабличнойЧасти Из СтрокиТабличнойЧасти Цикл
				
				СтрокаОбъектЭТ = ОбъектЭТ.ТарифыЗаРасчетноеОбслуживание.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаОбъектЭТ, СтрокаТабличнойЧасти);
				
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбъектЭТ);
			
		КонецЕсли;
		
		
	КонецЦикла;
	
КонецПроцедуры

// Перезаполнение регистра "ПродажиПоПлатежнымКартам"
// 
Процедура ПерезаполнитьРегистрПродажиПоПлатежнымКартам() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПродажиПоПлатежнымКартам.Период,
	|	ПродажиПоПлатежнымКартам.Регистратор,
	|	ПродажиПоПлатежнымКартам.НомерСтроки,
	|	ПродажиПоПлатежнымКартам.Активность,
	|	ПродажиПоПлатежнымКартам.Организация,
	|	ПродажиПоПлатежнымКартам.Магазин,
	|	ПродажиПоПлатежнымКартам.ВидОплаты,
	|	ПродажиПоПлатежнымКартам.ЭквайринговыйТерминал,
	|	ПродажиПоПлатежнымКартам.УдалитьДоговорЭквайринга,
	|	ПродажиПоПлатежнымКартам.СуммаОперацийПродажи,
	|	ПродажиПоПлатежнымКартам.СуммаОперацийВозврата,
	|	ПродажиПоПлатежнымКартам.НачисленнаяСуммаКомиссии,
	|	ПродажиПоПлатежнымКартам.ОтмененнаяСуммаКомиссии,
	|	ПродажиПоПлатежнымКартам.ВозвращаемаяСуммаКомиссии,
	|	ВЫБОР
	|		КОГДА ПродажиПоПлатежнымКартам.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|			ТОГДА 1
	|		КОГДА ПродажиПоПлатежнымКартам.Регистратор ССЫЛКА Документ.ОплатаОтПокупателяПлатежнойКартой
	|			ТОГДА 2
	|		КОГДА ПродажиПоПлатежнымКартам.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|			ТОГДА 3
	|		ИНАЧЕ 4
	|	КОНЕЦ КАК ТипДокумента
	|ПОМЕСТИТЬ ТаблицаРегистра
	|ИЗ
	|	РегистрНакопления.ПродажиПоПлатежнымКартам КАК ПродажиПоПлатежнымКартам
	|ГДЕ
	|	НЕ ПродажиПоПлатежнымКартам.УдалитьДоговорЭквайринга = &ПустойДоговор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРегистра.Период КАК Период,
	|	ТаблицаРегистра.Регистратор КАК Ссылка,
	|	ТаблицаРегистра.НомерСтроки,
	|	ТаблицаРегистра.Активность,
	|	ВЫБОР
	|		КОГДА ТаблицаРегистра.ТипДокумента = 1
	|			ТОГДА ТаблицаРегистра.Организация
	|		ИНАЧЕ ТаблицаРегистра.Регистратор.Организация
	|	КОНЕЦ КАК Организация,
	|	ТаблицаРегистра.Магазин,
	|	ТаблицаРегистра.ВидОплаты,
	|	ТаблицаРегистра.ЭквайринговыйТерминал,
	|	&ПустойДоговор КАК УдалитьДоговорЭквайринга,
	|	ВЫБОР
	|		КОГДА ТаблицаРегистра.ТипДокумента = 2
	|					И ТаблицаРегистра.Регистратор.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	|				ИЛИ ТаблицаРегистра.ТипДокумента = 3
	|					И ТаблицаРегистра.СуммаОперацийПродажи < 0
	|				ИЛИ ТаблицаРегистра.ТипДокумента = 4
	|					И ТаблицаРегистра.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаРегистра.СуммаОперацийПродажи
	|	КОНЕЦ КАК СуммаОперацийПродажи,
	|	ВЫБОР
	|		КОГДА ТаблицаРегистра.ТипДокумента = 2
	|					И ТаблицаРегистра.Регистратор.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	|				ИЛИ ТаблицаРегистра.ТипДокумента = 3
	|					И ТаблицаРегистра.СуммаОперацийПродажи < 0
	|				ИЛИ ТаблицаРегистра.ТипДокумента = 4
	|					И ТаблицаРегистра.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|			ТОГДА -ТаблицаРегистра.СуммаОперацийПродажи
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаОперацийВозврата,
	|	ВЫБОР
	|		КОГДА ТаблицаРегистра.ТипДокумента = 2
	|					И ТаблицаРегистра.Регистратор.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	|					И ТаблицаРегистра.УдалитьДоговорЭквайринга.ЭквайрерВозвращаетКомиссиюПриВозврате
	|				ИЛИ ТаблицаРегистра.ТипДокумента = 3
	|					И ТаблицаРегистра.СуммаОперацийПродажи < 0
	|				ИЛИ ТаблицаРегистра.ТипДокумента = 4
	|					И ТаблицаРегистра.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаРегистра.НачисленнаяСуммаКомиссии
	|	КОНЕЦ КАК НачисленнаяСуммаКомиссии,
	|	ВЫБОР
	|		КОГДА ТаблицаРегистра.ТипДокумента = 3
	|					И ТаблицаРегистра.СуммаОперацийПродажи < 0
	|				ИЛИ ТаблицаРегистра.ТипДокумента = 4
	|					И ТаблицаРегистра.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|			ТОГДА -ТаблицаРегистра.НачисленнаяСуммаКомиссии
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОтмененнаяСуммаКомиссии,
	|	ВЫБОР
	|		КОГДА ТаблицаРегистра.ТипДокумента = 2
	|				И ТаблицаРегистра.Регистратор.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	|				И ТаблицаРегистра.УдалитьДоговорЭквайринга.ЭквайрерВозвращаетКомиссиюПриВозврате
	|			ТОГДА -ТаблицаРегистра.НачисленнаяСуммаКомиссии
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВозвращаемаяСуммаКомиссии,
	|	ТаблицаРегистра.ТипДокумента
	|ИЗ
	|	ТаблицаРегистра КАК ТаблицаРегистра
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	ТаблицаРегистра.Регистратор
	|ИТОГИ ПО
	|	Ссылка";
	
	Запрос.Параметры.Вставить("ПустойДоговор", Справочники.УдалитьДоговорыЭквайринга.ПустаяСсылка());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		ВыборкаДвижений = Выборка.Выбрать();
		ДвиженияДокументаПоРегистру("ПродажиПоПлатежнымКартам", Выборка.Ссылка, ВыборкаДвижений);
	КонецЦикла;
	
КонецПроцедуры

// Перезаполняет документы Чек ККМ и Оплата платежной картов в рамках Комисси
Процедура ПерезаполнитьДокументыСОтрицательнымПроцентомОплаты() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОплатаОтПокупателяПлатежнойКартой.Ссылка,
	|	&УдалитьДоговорЭквайринга КАК УдалитьДоговорЭквайринга,
	|	-ОплатаОтПокупателяПлатежнойКартой.ПроцентКомиссии КАК ПроцентКомиссии,
	|	-ОплатаОтПокупателяПлатежнойКартой.СуммаКомиссии КАК СуммаКомиссии,
	|	Истина КАК ОтработанПереход
	|ИЗ
	|	Документ.ОплатаОтПокупателяПлатежнойКартой КАК ОплатаОтПокупателяПлатежнойКартой
	|ГДЕ
	|	ОплатаОтПокупателяПлатежнойКартой.ХозяйственнаяОперация = &ХозяйственнаяОперация
	|	И НЕ ОплатаОтПокупателяПлатежнойКартой.ОтработанПереход
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОплатаОтПокупателяПлатежнойКартой.Дата,
	|	ОплатаОтПокупателяПлатежнойКартой.Ссылка";
	
	Запрос.УстановитьПараметр("УдалитьДоговорЭквайринга", Справочники.УдалитьДоговорыЭквайринга.ПустаяСсылка());
	Запрос.УстановитьПараметр("ХозяйственнаяОперация"   , Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОбъектЭО = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ОбъектЭО, Выборка, ,"Ссылка");
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбъектЭО);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЧекККМОплата.Ссылка
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|ГДЕ
	|	ЧекККМОплата.ВидОплаты.ТипОплаты = &ТипОплаты
	|	И ЧекККМОплата.Ссылка.ВидОперации = &ВидОперации
	|	И НЕ ЧекККМОплата.Ссылка.ОтработанПереход
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЧекККМОплата.Ссылка.Дата,
	|	ЧекККМОплата.Ссылка";
	
	Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыОперацийЧекККМ.Возврат);
	Запрос.УстановитьПараметр("ТипОплаты", Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОбъектККМ = Выборка.Ссылка.ПолучитьОбъект();
		ОбъектККМ.УдалитьДоговорЭквайринга = Справочники.УдалитьДоговорыЭквайринга.ПустаяСсылка();
		ОбъектККМ.ОтработанПереход = Истина;
		
		Для каждого СтрокаОплатыЧекаККМ Из ОбъектККМ.Оплата Цикл
			Если СтрокаОплатыЧекаККМ.ВидОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта Тогда
				СтрокаОплатыЧекаККМ.ПроцентКомиссии = - СтрокаОплатыЧекаККМ.ПроцентКомиссии;
				СтрокаОплатыЧекаККМ.СуммаКомиссии   = - СтрокаОплатыЧекаККМ.СуммаКомиссии;
			КонецЕсли;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбъектККМ);
		
	КонецЦикла;
	
КонецПроцедуры

// Включает функциональную опцию использования ордерной схемы
Процедура УстановитьКонстантуИспользоватьОрдернуюСхему() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Магазины.Ссылка
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|ГДЕ
	|	(Магазины.ИспользоватьОрдернуюСхемуПриОтгрузке
	|			ИЛИ Магазины.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач
	|			ИЛИ Магазины.ИспользоватьОрдернуюСхемуПриПеремещении
	|			ИЛИ Магазины.ИспользоватьОрдернуюСхемуПриПоступлении)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Константы.ИспользоватьОрдернуюСхему.Установить(Истина);
	КонецЕсли;

КонецПроцедуры // УстановитьКонстантуИспользоватьОрдернуюСхему()

// Процедура заполняет реквизиты "ФизическоеЛицо" и "Подразделение" справочника "Пользователи" 
//
Процедура УстановкаРеквизитовСправочникаПользователи() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Пользователи.Ссылка,
	|	Пользователи.ФизЛицо,
	|	Пользователи.Магазин
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	(Пользователи.ФизическоеЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|				И НЕ Пользователи.ФизЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ИЛИ Пользователи.Подразделение = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
	|				И НЕ Пользователи.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка))";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОбъектСправочник = Выборка.Ссылка.ПолучитьОбъект();
		ОбъектСправочник.ФизическоеЛицо = Выборка.ФизЛицо;
		ОбъектСправочник.Подразделение = Выборка.Магазин;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбъектСправочник);
		
	КонецЦикла;
	
КонецПроцедуры

// Обновляет поле ВидДляСписка у табличных частей контактной информации
Процедура ЗаполнитьТабличныеЧастиДляСписков(Параметры) Экспорт
	
	// Обновить представление в поле агрегате ВидДляСписка для вывода в контактной информации
	// в динамических списках и отчетах.
	Параметры.ОбработкаЗавершена = Ложь;
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформациюДляСписков();
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

// Установка значения по умолчанию даты начала применения приказа ФСРАР №164.
//
Процедура УстановитьДатуНачалаПримененияПриказа164() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Константы.ДатаНачалаПримененияПриказа164.Получить()) Тогда
		Константы.ДатаНачалаПримененияПриказа164.Установить(Дата(2016, 1, 1));
	КонецЕсли;
	
КонецПроцедуры

// Обновить статусы ЕГАИС по значениям переданных данных
//
Процедура ОбновитьСтатусыОбработкиЕГАИСПоАктам() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТТНВходящаяЕГАИС.Ссылка
	|ПОМЕСТИТЬ ТаблицаТТН
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|ГДЕ
	|	ТТНВходящаяЕГАИС.УдалитьСтатусОбработки = &ПереданоПодтверждение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоступлениеТоваров.ТТНВходящаяЕГАИС,
	|	ПоступлениеТоваров.Дата
	|ИЗ
	|	Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
	|ГДЕ
	|	ПоступлениеТоваров.ЕстьРасхождения
	|	И ПоступлениеТоваров.ТТНВходящаяЕГАИС В
	|			(ВЫБРАТЬ
	|				ТаблицаТТН.Ссылка КАК Ссылка
	|			ИЗ
	|				ТаблицаТТН КАК ТаблицаТТН)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоступлениеТоваров.Дата";
	
	Запрос.УстановитьПараметр("ПереданоПодтверждение", Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.Подтвержден);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		ДокументОбъект = Выборка.ТТНВходящаяЕГАИС.ПолучитьОбъект();
		ДокументОбъект.УдалитьСтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПодтвержденСРасхождениями;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
	
	КонецЦикла;
	
КонецПроцедуры

// Заполнение соответствия видов оплаты информационной базы видам оплаты оборудования с типом 1С:ККМ-Offline.
//
Процедура СоздатьНаборыСоответствийВидовОплаты() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Индекс = 0;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СправочникПодключаемоеОборудование.Ссылка КАК ПодключаемоеОборудование
	               |ПОМЕСТИТЬ ВТ_ПодключаемоеОборудование
	               |ИЗ
	               |	Справочник.ПодключаемоеОборудование КАК СправочникПодключаемоеОборудование
	               |ГДЕ
	               |	(СправочникПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ККМОфлайн)
	               |			ИЛИ СправочникПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.УдалитьWebСервисОборудование))
	               |	И (СправочникПодключаемоеОборудование.ДрайверОборудования.ОбработчикДрайвера = ЗНАЧЕНИЕ(Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СWebСервисОборудование)
	               |			ИЛИ СправочникПодключаемоеОборудование.ДрайверОборудования.ОбработчикДрайвера = ЗНАЧЕНИЕ(Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СККМOffline))
	               |	И НЕ СправочникПодключаемоеОборудование.ПометкаУдаления
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КассыККМ.Ссылка КАК КассаККМ,
	               |	ВТ_ПодключаемоеОборудование.ПодключаемоеОборудование.ПравилоОбмена.УдалитьВидыОплаты.(
	               |		ВидОплаты КАК ВидОплаты
	               |	) КАК ВидыОплаты
	               |ИЗ
	               |	Справочник.КассыККМ КАК КассыККМ
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПодключаемоеОборудование КАК ВТ_ПодключаемоеОборудование
	               |		ПО КассыККМ.ПодключаемоеОборудование = ВТ_ПодключаемоеОборудование.ПодключаемоеОборудование.Ссылка
	               |ГДЕ
	               |	НЕ КассыККМ.ПометкаУдаления
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВидОплаты";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ВидыОплатыДляКассыККМ = Выборка.ВидыОплаты.Выгрузить();
		НайденноеСоответствие = НайтиСуществующиеСоответсвияВидовОплаты(ВидыОплатыДляКассыККМ);
		
		Если НайденноеСоответствие = Неопределено Тогда
			
			Индекс = Индекс + 1;
			
			НовыйЭлемент = Справочники.СоответствиеВидовОплатыСККМOffline.СоздатьЭлемент();
			
			НовыйЭлемент.Наименование = "Соответствие видов оплаты с ККМ Offline №" + Строка(Индекс);
			
			Для Каждого ТекВидОплаты Из ВидыОплатыДляКассыККМ Цикл
				
				НоваяСтрока = НовыйЭлемент.СоответствиеВидовОплаты.Добавить();
				
				НоваяСтрока.ВидОплаты				= ТекВидОплаты.ВидОплаты;
				НоваяСтрока.КодВидаОплатыККМOffline	= ТекВидОплаты.ВидОплаты.УникальныйИдентификатор();
				
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НовыйЭлемент);
			
			НайденноеСоответствие = НовыйЭлемент.Ссылка;
			
		КонецЕсли;
		
		ОбъектКассаККМ = Выборка.КассаККМ.ПолучитьОбъект();
		ОбъектКассаККМ.СоответствиеВидовОплаты = НайденноеСоответствие;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбъектКассаККМ);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет справку 1 и документ-основание в справках 2.
//
Процедура ЗаполнитьСправкиБ() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АктПостановкиНаБалансЕГАИСТовары.Ссылка КАК ДокументОснование,
	|	АктПостановкиНаБалансЕГАИСТовары.Справка2,
	|	АктПостановкиНаБалансЕГАИСТовары.УдалитьСправка1 КАК Справка1,
	|	АктПостановкиНаБалансЕГАИСТовары.УдалитьСправка1.РегистрационныйНомер КАК НомерСправки1
	|ИЗ
	|	Документ.АктПостановкиНаБалансЕГАИС.Товары КАК АктПостановкиНаБалансЕГАИСТовары
	|ГДЕ
	|	АктПостановкиНаБалансЕГАИСТовары.Ссылка.Проведен
	|	И (АктПостановкиНаБалансЕГАИСТовары.Справка2.НомерСправки1 = """"
	|			ИЛИ АктПостановкиНаБалансЕГАИСТовары.Справка2.ДокументОснование <> АктПостановкиНаБалансЕГАИСТовары.Ссылка)
	|	И АктПостановкиНаБалансЕГАИСТовары.УдалитьСправка1 <> ЗНАЧЕНИЕ(Справочник.Справки1ЕГАИС.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТТНВходящаяЕГАИСТовары.Ссылка,
	|	ТТНВходящаяЕГАИСТовары.Справка2,
	|	ТТНВходящаяЕГАИСТовары.УдалитьСправка1,
	|	ТТНВходящаяЕГАИСТовары.УдалитьСправка1.РегистрационныйНомер
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС.Товары КАК ТТНВходящаяЕГАИСТовары
	|ГДЕ
	|	НЕ ТТНВходящаяЕГАИСТовары.Ссылка.ПометкаУдаления
	|	И (ТТНВходящаяЕГАИСТовары.Справка2.НомерСправки1 = """"
	|			ИЛИ ТТНВходящаяЕГАИСТовары.Справка2.ДокументОснование <> ТТНВходящаяЕГАИСТовары.Ссылка)
	|	И ТТНВходящаяЕГАИСТовары.УдалитьСправка1 <> ЗНАЧЕНИЕ(Справочник.Справки1ЕГАИС.ПустаяСсылка)
	|	И ТТНВходящаяЕГАИСТовары.Ссылка.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийТТНВходящейЕГАИС.ПриходнаяНакладная), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийТТНВходящейЕГАИС.ВозвратОтПокупателя))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО,
	|	ТТНВходящаяЕГАИСТовары.УдалитьСправка2Поставщика,
	|	ТТНВходящаяЕГАИСТовары.УдалитьСправка1,
	|	ТТНВходящаяЕГАИСТовары.УдалитьСправка1.РегистрационныйНомер
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС.Товары КАК ТТНВходящаяЕГАИСТовары
	|ГДЕ
	|	НЕ ТТНВходящаяЕГАИСТовары.Ссылка.ПометкаУдаления
	|	И ТТНВходящаяЕГАИСТовары.Справка2.НомерСправки1 = """"
	|	И ТТНВходящаяЕГАИСТовары.УдалитьСправка1 <> ЗНАЧЕНИЕ(Справочник.Справки1ЕГАИС.ПустаяСсылка)
	|	И ТТНВходящаяЕГАИСТовары.Ссылка.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийТТНВходящейЕГАИС.ПриходнаяНакладная), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийТТНВходящейЕГАИС.ВозвратОтПокупателя))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Справка2 = Выборка.Справка2.ПолучитьОбъект();
		Справка2.Справка1 = Выборка.Справка1;
		Справка2.НомерСправки1 = Выборка.НомерСправки1;
		Если Выборка.ДокументОснование <> Неопределено Тогда
			Справка2.ДокументОснование = Выборка.ДокументОснование;
		КонецЕсли;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Справка2);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет данные ЕГАИС в актах постановки на баланс
//
Процедура ЗаполнитьАктыПостановкиНаБаланс() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.Организация,
	|	ВложенныйЗапрос.Магазин,
	|	ВложенныйЗапрос.ОрганизацияЕГАИС
	|ПОМЕСТИТЬ СоответствиеОрганизаций
	|ИЗ
	|	(ВЫБРАТЬ
	|		НастройкиОбменаЕГАИС.УдалитьРесурсОрганизация КАК Организация,
	|		НастройкиОбменаЕГАИС.УдалитьРесурсСклад КАК Магазин,
	|		ЕСТЬNULL(КлассификаторОрганизацийЕГАИС.Ссылка, ЗНАЧЕНИЕ(Справочник.КлассификаторОрганизацийЕГАИС.ПустаяСсылка)) КАК ОрганизацияЕГАИС
	|	ИЗ
	|		РегистрСведений.НастройкиОбменаЕГАИС КАК НастройкиОбменаЕГАИС
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|			ПО НастройкиОбменаЕГАИС.ИдентификаторФСРАР = КлассификаторОрганизацийЕГАИС.Код
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НастройкиОбменаЕГАИС.УдалитьИзмерениеОрганизация,
	|		НастройкиОбменаЕГАИС.УдалитьИзмерениеСклад,
	|		НастройкиОбменаЕГАИС.УдалитьОрганизацияЕГАИС
	|	ИЗ
	|		РегистрСведений.НастройкиОбменаЕГАИС КАК НастройкиОбменаЕГАИС) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктПостановкиНаБалансЕГАИС.Ссылка,
	|	ЕСТЬNULL(СоответствиеОрганизаций.ОрганизацияЕГАИС, ЗНАЧЕНИЕ(Справочник.КлассификаторОрганизацийЕГАИС.ПустаяСсылка)) КАК ОрганизацияЕГАИС,
	|	ВЫБОР
	|		КОГДА АктПостановкиНаБалансЕГАИС.УдалитьСтатусОбработки_ЕГАИС = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.УдалитьПринятоПодтверждение)
	|			ТОГДА АктПостановкиНаБалансЕГАИС.Дата
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаРегистрацииДвижений,
	|	ВЫБОР
	|		КОГДА АктПостановкиНаБалансЕГАИС.УдалитьСтатусОбработки_ЕГАИС = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.УдалитьПереданВЕГАИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ПереданВУТМ)
	|		КОГДА АктПостановкиНаБалансЕГАИС.УдалитьСтатусОбработки_ЕГАИС = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.УдалитьПринятоПодтверждение)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ПроведенЕГАИС)
	|		КОГДА АктПостановкиНаБалансЕГАИС.УдалитьСтатусОбработки_ЕГАИС = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.УдалитьПринятОтказ)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ОшибкаПроведенияЕГАИС)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.Черновик)
	|	КОНЕЦ КАК СтатусОбработки
	|ИЗ
	|	Документ.АктПостановкиНаБалансЕГАИС КАК АктПостановкиНаБалансЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоответствиеОрганизаций КАК СоответствиеОрганизаций
	|		ПО АктПостановкиНаБалансЕГАИС.Организация = СоответствиеОрганизаций.Организация
	|			И АктПостановкиНаБалансЕГАИС.ТорговыйОбъект = СоответствиеОрганизаций.Магазин";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Акт = Выборка.Ссылка.ПолучитьОбъект();
		Если Акт.ОрганизацияЕГАИС.Пустая() Тогда
			Акт.ОрганизацияЕГАИС = Выборка.ОрганизацияЕГАИС;
		КонецЕсли;
		Если Акт.ДатаРегистрацииДвижений <> Выборка.ДатаРегистрацииДвижений Тогда
			Акт.ДатаРегистрацииДвижений = Выборка.ДатаРегистрацииДвижений;
		КонецЕсли;
		Если Акт.УдалитьСтатусОбработки.Пустая() Тогда
			Акт.УдалитьСтатусОбработки = Выборка.СтатусОбработки;
		КонецЕсли;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Акт);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет данные ЕГАИС в актах постановки на баланс
//
Процедура ЗаполнитьИдентификаторыЕГАИС() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПротоколОбменаЕГАИС.ДокументОснование КАК ДокументОснование,
	|	ПротоколОбменаЕГАИС.УдалитьИдентификаторЕГАИС КАК ИдентификаторЕГАИС
	|ИЗ
	|	РегистрСведений.УдалитьПротоколОбменаЕГАИС КАК ПротоколОбменаЕГАИС
	|ГДЕ
	|	ПротоколОбменаЕГАИС.УдалитьИдентификаторЕГАИС <> """"
	|	И ПротоколОбменаЕГАИС.ДокументОснование.ИдентификаторЕГАИС = """"
	|	И (ПротоколОбменаЕГАИС.ДокументОснование ССЫЛКА Документ.АктПостановкиНаБалансЕГАИС
	|			ИЛИ ПротоколОбменаЕГАИС.ДокументОснование ССЫЛКА Документ.ТТНВходящаяЕГАИС
	|			ИЛИ ПротоколОбменаЕГАИС.ДокументОснование ССЫЛКА Документ.ТТНИсходящаяЕГАИС)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Док = Выборка.ДокументОснование.ПолучитьОбъект();
		Док.ИдентификаторЕГАИС = Выборка.ИдентификаторЕГАИС;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Док);
	КонецЦикла;
	
КонецПроцедуры

// Создает исходящие ТТН на основании входящих со статусами РасходнаяНакладная и ВозвратПоставщику.
//
Процедура СоздатьИсходящиеТТН() Экспорт
	
	ВидыОперацийИсходящейТТН = Новый Массив;
	ВидыОперацийИсходящейТТН.Добавить(Перечисления.ВидыОперацийТТНВходящейЕГАИС.УдалитьВозвратПоставщику);
	ВидыОперацийИсходящейТТН.Добавить(Перечисления.ВидыОперацийТТНВходящейЕГАИС.УдалитьРасходнаяНакладная);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидыОперацийИсходящейТТН", ВидыОперацийИсходящейТТН);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТТНВходящаяЕГАИС.Ссылка
	|ПОМЕСТИТЬ ИсходящиеТТН
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС
	|		ПО ТТНВходящаяЕГАИС.Идентификатор = ТТНИсходящаяЕГАИС.Идентификатор
	|			И ТТНВходящаяЕГАИС.Грузоотправитель = ТТНИсходящаяЕГАИС.Грузоотправитель
	|			И ТТНВходящаяЕГАИС.Грузополучатель = ТТНИсходящаяЕГАИС.Грузополучатель
	|			И ТТНВходящаяЕГАИС.НомерТТН = ТТНИсходящаяЕГАИС.НомерТТН
	|			И ТТНВходящаяЕГАИС.ДатаТТН = ТТНИсходящаяЕГАИС.ДатаТТН
	|ГДЕ
	|	НЕ ТТНВходящаяЕГАИС.ПометкаУдаления
	|	И ТТНВходящаяЕГАИС.ВидОперации В(&ВидыОперацийИсходящейТТН)
	|	И ТТНИсходящаяЕГАИС.Ссылка ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходящиеТТН.Ссылка КАК Ссылка,
	|	ИсходящиеТТН.Ссылка.Дата КАК Дата,
	|	ИсходящиеТТН.Ссылка.ВидОперации КАК ВидОперации,
	|	ИсходящиеТТН.Ссылка.Идентификатор КАК Идентификатор,
	|	ИсходящиеТТН.Ссылка.ИдентификаторЕГАИС КАК ИдентификаторЕГАИС,
	|	ИсходящиеТТН.Ссылка.УдалитьСтатусОбработки КАК СтатусОбработки,
	|	ИсходящиеТТН.Ссылка.НомерТТН КАК НомерТТН,
	|	ИсходящиеТТН.Ссылка.ДатаТТН КАК ДатаТТН,
	|	ИсходящиеТТН.Ссылка.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ИсходящиеТТН.Ссылка.Грузоотправитель КАК Грузоотправитель,
	|	ИсходящиеТТН.Ссылка.Грузополучатель КАК Грузополучатель,
	|	ИсходящиеТТН.Ссылка.Поставщик КАК Поставщик,
	|	ИсходящиеТТН.Ссылка.Основание КАК Основание,
	|	ИсходящиеТТН.Ссылка.Упакована КАК Упакована,
	|	ИсходящиеТТН.Ссылка.ТипДоставки КАК ТипДоставки,
	|	ИсходящиеТТН.Ссылка.Перевозчик КАК Перевозчик,
	|	ИсходящиеТТН.Ссылка.НомерТранспортногоСредства КАК НомерТранспортногоСредства,
	|	ИсходящиеТТН.Ссылка.Прицеп КАК Прицеп,
	|	ИсходящиеТТН.Ссылка.Заказчик КАК Заказчик,
	|	ИсходящиеТТН.Ссылка.Водитель КАК Водитель,
	|	ИсходящиеТТН.Ссылка.ПунктПогрузки КАК ПунктПогрузки,
	|	ИсходящиеТТН.Ссылка.ПунктРазгрузки КАК ПунктРазгрузки,
	|	ИсходящиеТТН.Ссылка.Перенаправление КАК Перенаправление,
	|	ИсходящиеТТН.Ссылка.Экспедитор КАК Экспедитор,
	|	ИсходящиеТТН.Ссылка.СуммаДокумента КАК СуммаДокумента,
	|	ИсходящиеТТН.Ссылка.Комментарий КАК Комментарий,
	|	ИсходящиеТТН.Ссылка.Товары.(
	|		НомерСтроки КАК НомерСтроки,
	|		АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|		ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|		Количество КАК Количество,
	|		КоличествоФакт КАК КоличествоФакт,
	|		Сумма КАК Сумма,
	|		Цена КАК Цена,
	|		НомерПартии КАК НомерПартии,
	|		УдалитьСправка2Поставщика КАК Справка2,
	|		Справка2.РегистрационныйНомер КАК НомерСправки2Покупателя
	|	) КАК Товары
	|ИЗ
	|	ИсходящиеТТН КАК ИсходящиеТТН
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТТН = Документы.ТТНИсходящаяЕГАИС.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(ТТН, Выборка,
			"Дата,Идентификатор,ИдентификаторЕГАИС,НомерТТН,ДатаТТН,
			|ДатаОтгрузки,Грузоотправитель,Грузополучатель,Поставщик,Основание,Упакована,
			|ТипДоставки,Перевозчик,НомерТранспортногоСредства,Прицеп,Заказчик,Водитель,ПунктПогрузки,ПунктРазгрузки,Перенаправление,Экспедитор,
			|СуммаДокумента,Комментарий");
		
		ТТН.ВидОперации = ?(
			Выборка.ВидОперации = Перечисления.ВидыОперацийТТНВходящейЕГАИС.УдалитьВозвратПоставщику,
			Перечисления.ВидыОперацийТТНИсходящейЕГАИС.ВозвратПоставщику,
			Перечисления.ВидыОперацийТТНИсходящейЕГАИС.РасходнаяНакладная);
		
		Если Выборка.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.УдалитьПереданВЕГАИС Тогда
			ТТН.УдалитьСтатусОбработки = ?(ПустаяСтрока(Выборка.ИдентификаторЕГАИС),
				Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПереданВУТМ,
				Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОбрабатываетсяЕГАИС);
		ИначеЕсли Выборка.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.УдалитьПринятОтказ Тогда
			ТТН.УдалитьСтатусОбработки = ?(ПустаяСтрока(Выборка.ИдентификаторЕГАИС),
				Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОшибкаПередачи,
				Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОтмененКлиентом);
		ИначеЕсли Выборка.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.УдалитьПринятоПодтверждение Тогда
			ТТН.УдалитьСтатусОбработки = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.Подтвержден;
		ИначеЕсли Выборка.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.УдалитьПереданоПодтверждениеАктаРасхождений Тогда
			ТТН.УдалитьСтатусОбработки = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПодтвержденСРасхождениями;
		ИначеЕсли Выборка.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.УдалитьПереданОтказОтАктаРасхождений Тогда
			ТТН.УдалитьСтатусОбработки = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.Отменен;
		КонецЕсли;
		
		Если ТТН.УдалитьСтатусОбработки = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.Подтвержден
			ИЛИ ТТН.УдалитьСтатусОбработки = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПодтвержденСРасхождениями Тогда
			ТТН.ДатаРегистрацииДвижений = Выборка.Дата;
		КонецЕсли;
		
		ВыборкаТовары = Выборка.Товары.Выбрать();
		Пока ВыборкаТовары.Следующий() Цикл
			СтрокаТЧ = ТТН.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, ВыборкаТовары,
				"АлкогольнаяПродукция,ИдентификаторУпаковки,Количество,КоличествоФакт,Сумма,Цена,НомерПартии,
				|Справка2,НомерСправки2Покупателя");
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ТТН, Истина,, РежимЗаписиДокумента.Проведение);
		
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТТНВходящаяЕГАИС.Ссылка КАК ТТНВходящаяЕГАИС,
	|	ТТНИсходящаяЕГАИС.Ссылка КАК ТТНИсходящаяЕГАИС
	|ПОМЕСТИТЬ СоответствиеТТН
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС
	|		ПО ТТНВходящаяЕГАИС.Идентификатор = ТТНИсходящаяЕГАИС.Идентификатор
	|			И ТТНВходящаяЕГАИС.Грузоотправитель = ТТНИсходящаяЕГАИС.Грузоотправитель
	|			И ТТНВходящаяЕГАИС.Грузополучатель = ТТНИсходящаяЕГАИС.Грузополучатель
	|			И ТТНВходящаяЕГАИС.НомерТТН = ТТНИсходящаяЕГАИС.НомерТТН
	|			И ТТНВходящаяЕГАИС.ДатаТТН = ТТНИсходящаяЕГАИС.ДатаТТН
	|ГДЕ
	|	ТТНВходящаяЕГАИС.ВидОперации В(&ВидыОперацийИсходящейТТН)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТТНВходящаяЕГАИС,
	|	ТТНИсходящаяЕГАИС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВозвратТоваровПоставщику.Ссылка КАК Ссылка,
	|	СоответствиеТТН.ТТНИсходящаяЕГАИС
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СоответствиеТТН КАК СоответствиеТТН
	|		ПО ВозвратТоваровПоставщику.УдалитьТоварноТранспортнаяНакладнаяЕГАИС = СоответствиеТТН.ТТНВходящаяЕГАИС
	|ГДЕ
	|	ВозвратТоваровПоставщику.ТТНИсходящаяЕГАИС = ЗНАЧЕНИЕ(Документ.ТТНИсходящаяЕГАИС.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПеремещениеТоваров.Ссылка,
	|	СоответствиеТТН.ТТНИсходящаяЕГАИС
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СоответствиеТТН КАК СоответствиеТТН
	|		ПО ПеремещениеТоваров.УдалитьТоварноТранспортнаяНакладнаяЕГАИСИсходящая = СоответствиеТТН.ТТНВходящаяЕГАИС
	|ГДЕ
	|	ПеремещениеТоваров.ТТНИсходящаяЕГАИС = ЗНАЧЕНИЕ(Документ.ТТНИсходящаяЕГАИС.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПротоколОбменаЕГАИС.ИдентификаторСессииОбмена КАК ИдентификаторСессииОбмена,
	|	СоответствиеТТН.ТТНИсходящаяЕГАИС
	|ИЗ
	|	РегистрСведений.УдалитьПротоколОбменаЕГАИС КАК ПротоколОбменаЕГАИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СоответствиеТТН КАК СоответствиеТТН
	|		ПО ПротоколОбменаЕГАИС.ДокументОснование = СоответствиеТТН.ТТНВходящаяЕГАИС";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Выборка = МассивРезультатов[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		Док = Выборка.Ссылка.ПолучитьОбъект();
		Док.ТТНИсходящаяЕГАИС = Выборка.ТТНИсходящаяЕГАИС;
		Если ТипЗнч(Док) = Тип("ДокументОбъект.ВозвратТоваровПоставщику") Тогда
			Док.УдалитьТоварноТранспортнаяНакладнаяЕГАИС = Документы.ТТНВходящаяЕГАИС.ПустаяСсылка();
		ИначеЕсли ТипЗнч(Док) = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
			Док.УдалитьТоварноТранспортнаяНакладнаяЕГАИСИсходящая = Документы.ТТНВходящаяЕГАИС.ПустаяСсылка();
		КонецЕсли;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Док);
	КонецЦикла;
	
	Выборка = МассивРезультатов[2].Выбрать();
	Пока Выборка.Следующий() Цикл
		Запись = РегистрыСведений.УдалитьПротоколОбменаЕГАИС.СоздатьМенеджерЗаписи();
		Запись.ИдентификаторСессииОбмена = Выборка.ИдентификаторСессииОбмена;
		Запись.Прочитать();
		Если Запись.Выбран() Тогда
			Запись.ДокументОснование = Выборка.ТТНИсходящаяЕГАИС;
			Запись.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет реквизит СтатусОбработки в документах ВскрытиеТарыЕГАИС.
//
Процедура ЗаполнитьСтатусОбработкиВскрытияТары() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВскрытиеТарыЕГАИС.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ВскрытиеТарыЕГАИС.УдалитьСтатусОбработки_ЕГАИС = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.УдалитьПереданВЕГАИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиВскрытияТарыЕГАИС.ПереданВЕГАИС)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиВскрытияТарыЕГАИС.Новый)
	|	КОНЕЦ КАК СтатусОбработки
	|ИЗ
	|	Документ.УдалитьВскрытиеТарыЕГАИС КАК ВскрытиеТарыЕГАИС
	|ГДЕ
	|	ВскрытиеТарыЕГАИС.СтатусОбработки = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиВскрытияТарыЕГАИС.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Док = Выборка.Ссылка.ПолучитьОбъект();
		Док.СтатусОбработки = Выборка.СтатусОбработки;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Док);
	КонецЦикла;
	
КонецПроцедуры

// Создает новые документы "Акт списания ЕГАИС" на основании выгруженных списаний товаров.
//
Процедура СоздатьАктыСписанияЕГАИС() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.Организация,
	|	ВложенныйЗапрос.Магазин,
	|	ВложенныйЗапрос.ОрганизацияЕГАИС
	|ПОМЕСТИТЬ СоответствиеОрганизаций
	|ИЗ
	|	(ВЫБРАТЬ
	|		НастройкиОбменаЕГАИС.УдалитьРесурсОрганизация КАК Организация,
	|		НастройкиОбменаЕГАИС.УдалитьРесурсСклад КАК Магазин,
	|		ЕСТЬNULL(КлассификаторОрганизацийЕГАИС.Ссылка, ЗНАЧЕНИЕ(Справочник.КлассификаторОрганизацийЕГАИС.ПустаяСсылка)) КАК ОрганизацияЕГАИС
	|	ИЗ
	|		РегистрСведений.НастройкиОбменаЕГАИС КАК НастройкиОбменаЕГАИС
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|			ПО НастройкиОбменаЕГАИС.ИдентификаторФСРАР = КлассификаторОрганизацийЕГАИС.Код
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НастройкиОбменаЕГАИС.УдалитьИзмерениеОрганизация,
	|		НастройкиОбменаЕГАИС.УдалитьИзмерениеСклад,
	|		НастройкиОбменаЕГАИС.УдалитьОрганизацияЕГАИС
	|	ИЗ
	|		РегистрСведений.НастройкиОбменаЕГАИС КАК НастройкиОбменаЕГАИС) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписаниеТоваров.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ СписанияТоваров
	|ИЗ
	|	Документ.СписаниеТоваров КАК СписаниеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктСписанияЕГАИС КАК АктСписания
	|		ПО СписаниеТоваров.УдалитьАктСписанияЕГАИС = АктСписания.Ссылка
	|ГДЕ
	|	СписаниеТоваров.УдалитьСтатусОбработки_ЕГАИС <> ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.ПустаяСсылка)
	|	И АктСписания.Ссылка ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписанияТоваров.Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ПротоколОбменаЕГАИС.УдалитьИдентификаторЕГАИС, """")) КАК ИдентификаторЕГАИС
	|ПОМЕСТИТЬ СписанияСИдентификаторамиЕГАИС
	|ИЗ
	|	СписанияТоваров КАК СписанияТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьПротоколОбменаЕГАИС КАК ПротоколОбменаЕГАИС
	|		ПО СписанияТоваров.Ссылка = ПротоколОбменаЕГАИС.ДокументОснование
	|			И (ПротоколОбменаЕГАИС.УдалитьИдентификаторЕГАИС <> """")
	|
	|СГРУППИРОВАТЬ ПО
	|	СписанияТоваров.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписанияСИдентификаторамиЕГАИС.Ссылка,
	|	СписанияСИдентификаторамиЕГАИС.ИдентификаторЕГАИС,
	|	СписанияСИдентификаторамиЕГАИС.Ссылка.Дата КАК Дата,
	|	СписанияСИдентификаторамиЕГАИС.Ссылка.Номер КАК Номер,
	|	ВЫБОР
	|		КОГДА СписанияСИдентификаторамиЕГАИС.Ссылка.АналитикаХозяйственнойОперации.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеПоИнвентаризации)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПричиныСписанийЕГАИС.Недостача)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПричиныСписанийЕГАИС.Порча)
	|	КОНЕЦ КАК ПричинаСписания,
	|	СписанияСИдентификаторамиЕГАИС.Ссылка.УдалитьСтатусОбработки_ЕГАИС КАК СтатусОбработки,
	|	ЕСТЬNULL(СоответствиеОрганизаций.ОрганизацияЕГАИС, ЗНАЧЕНИЕ(Справочник.КлассификаторОрганизацийЕГАИС.ПустаяСсылка)) КАК ОрганизацияЕГАИС,
	|	СписанияСИдентификаторамиЕГАИС.Ссылка.Комментарий КАК Комментарий,
	|	СписанияСИдентификаторамиЕГАИС.Ссылка.Товары.(
	|		НомерСтроки КАК НомерСтроки,
	|		Справка2.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|		КоличествоУпаковок КАК Количество,
	|		Справка2 КАК Справка2
	|	) КАК Товары
	|ИЗ
	|	СписанияСИдентификаторамиЕГАИС КАК СписанияСИдентификаторамиЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоответствиеОрганизаций КАК СоответствиеОрганизаций
	|		ПО СписанияСИдентификаторамиЕГАИС.Ссылка.Организация = СоответствиеОрганизаций.Организация
	|			И СписанияСИдентификаторамиЕГАИС.Ссылка.Магазин = СоответствиеОрганизаций.Магазин
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Акт = Документы.АктСписанияЕГАИС.СоздатьДокумент();
		Акт.Идентификатор = Строка(Выборка.Ссылка.УникальныйИдентификатор());
		ЗаполнитьЗначенияСвойств(Акт, Выборка, "Номер,Дата,ПричинаСписания,ИдентификаторЕГАИС,ОрганизацияЕГАИС,Комментарий");
		
		Если Выборка.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.УдалитьПереданВЕГАИС Тогда
			Акт.УдалитьСтатусОбработки = Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ПереданВУТМ;
		ИначеЕсли Выборка.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.УдалитьПринятОтказ Тогда
			Акт.УдалитьСтатусОбработки = Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ОшибкаПроведенияЕГАИС;
		ИначеЕсли Выборка.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.УдалитьПринятоПодтверждение Тогда
			Акт.УдалитьСтатусОбработки = Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ПроведенЕГАИС;
		КонецЕсли;
		
		Если Акт.УдалитьСтатусОбработки = Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ПроведенЕГАИС Тогда
			Акт.ДатаРегистрацииДвижений = Выборка.Дата;
		КонецЕсли;
		
		ВыборкаТовары = Выборка.Товары.Выбрать();
		Пока ВыборкаТовары.Следующий() Цикл
			СтрокаТЧ = Акт.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, ВыборкаТовары, "АлкогольнаяПродукция,Количество,Справка2");
		КонецЦикла;
		
		НачатьТранзакцию();
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Акт, Истина,, РежимЗаписиДокумента.Проведение);
		
		Док = Выборка.Ссылка.ПолучитьОбъект();
		Док.АктСписанияЕГАИС = Акт.Ссылка;
		Док.УдалитьСтатусОбработки_ЕГАИС = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПустаяСсылка();
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Док);
		
		ЗафиксироватьТранзакцию();
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПротоколОбменаЕГАИС.ИдентификаторСессииОбмена КАК ИдентификаторСессииОбмена,
	|	ПротоколОбменаЕГАИС.ДокументОснование.АктСписанияЕГАИС КАК АктСписанияЕГАИС
	|ИЗ
	|	РегистрСведений.УдалитьПротоколОбменаЕГАИС КАК ПротоколОбменаЕГАИС
	|ГДЕ
	|	ПротоколОбменаЕГАИС.ДокументОснование ССЫЛКА Документ.СписаниеТоваров
	|	И НЕ ПротоколОбменаЕГАИС.ДокументОснование.АктСписанияЕГАИС ЕСТЬ NULL ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Запись = РегистрыСведений.УдалитьПротоколОбменаЕГАИС.СоздатьМенеджерЗаписи();
		Запись.ИдентификаторСессииОбмена = Выборка.ИдентификаторСессииОбмена;
		Запись.Прочитать();
		Если Запись.Выбран() Тогда
			Запись.ДокументОснование = Выборка.АктСписанияЕГАИС;
			Запись.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет дату регистрации движений и номер справки Б покупателя во входящих ТТН.
//
Процедура ЗаполнитьТТНВходящиеЕГАИС() Экспорт
	
	ВидыОперацийВходящейТТН = Новый Массив;
	ВидыОперацийВходящейТТН.Добавить(Перечисления.ВидыОперацийТТНВходящейЕГАИС.ПриходнаяНакладная);
	ВидыОперацийВходящейТТН.Добавить(Перечисления.ВидыОперацийТТНВходящейЕГАИС.ВозвратОтПокупателя);
	
	СтатусыПодтвержденнойТТН = Новый Массив;
	СтатусыПодтвержденнойТТН.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.Подтвержден);
	СтатусыПодтвержденнойТТН.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПодтвержденСРасхождениями);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидыОперацийВходящейТТН", ВидыОперацийВходящейТТН);
	Запрос.УстановитьПараметр("СтатусыПодтвержденнойТТН", СтатусыПодтвержденнойТТН);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТТНВходящаяЕГАИСТовары.Ссылка КАК Ссылка,
	|	ТТНВходящаяЕГАИСТовары.НомерСтроки КАК НомерСтроки,
	|	ТТНВходящаяЕГАИСТовары.УдалитьСправка2Поставщика.РегистрационныйНомер КАК НомерСправки2Поставщика
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС.Товары КАК ТТНВходящаяЕГАИСТовары
	|ГДЕ
	|	НЕ ТТНВходящаяЕГАИСТовары.Ссылка.ПометкаУдаления
	|	И ТТНВходящаяЕГАИСТовары.Ссылка.ВидОперации В(&ВидыОперацийВходящейТТН)
	|	И ТТНВходящаяЕГАИСТовары.НомерСправки2Поставщика = """"
	|	И ЕСТЬNULL(ТТНВходящаяЕГАИСТовары.Справка2.РегистрационныйНомер, """") <> """"
	|ИТОГИ ПО
	|	Ссылка";
	
	ВыборкаТТН = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаТТН.Следующий() Цикл
		ТТН = ВыборкаТТН.Ссылка.ПолучитьОбъект();
		Если НЕ ЗначениеЗаполнено(ТТН.ДатаРегистрацииДвижений)
			И СтатусыПодтвержденнойТТН.Найти(ТТН.УдалитьСтатусОбработки) <> Неопределено Тогда
			ТТН.ДатаРегистрацииДвижений = ТТН.Дата;
		КонецЕсли;
		
		Если ТТН.УдалитьСтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.УдалитьОбрабатывается Тогда
			ТТН.УдалитьСтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПринятИзЕГАИС;
		КонецЕсли;
		
		Выборка = ВыборкаТТН.Выбрать();
		Пока Выборка.Следующий() Цикл
			ТТН.Товары[Выборка.НомерСтроки - 1].НомерСправки2Поставщика = Выборка.НомерСправки2Поставщика;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ТТН);
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТТНВходящаяЕГАИС.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|ГДЕ
	|	ТТНВходящаяЕГАИС.ВидОперации В(&ВидыОперацийВходящейТТН)
	|	И ТТНВходящаяЕГАИС.УдалитьСтатусОбработки = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.УдалитьОбрабатывается)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТТН = Выборка.Ссылка.ПолучитьОбъект();
		ТТН.УдалитьСтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПринятИзЕГАИС;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ТТН);
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТТНВходящаяЕГАИС.Ссылка КАК Ссылка,
	|	ТТНВходящаяЕГАИС.Дата КАК Дата
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|ГДЕ
	|	НЕ ТТНВходящаяЕГАИС.ПометкаУдаления
	|	И ТТНВходящаяЕГАИС.ВидОперации В(&ВидыОперацийВходящейТТН)
	|	И ТТНВходящаяЕГАИС.ДатаРегистрацииДвижений = ДАТАВРЕМЯ(1, 1, 1)
	|	И ТТНВходящаяЕГАИС.УдалитьСтатусОбработки В (&СтатусыПодтвержденнойТТН)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТТН = Выборка.Ссылка.ПолучитьОбъект();
		ТТН.ДатаРегистрацииДвижений = Выборка.Дата;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ТТН);
	КонецЦикла;
	
КонецПроцедуры

// Изменяет документ-основание в протоколе обмена с "Поступления товаров" на "ТТН входящую".
//
Процедура ИзменитьДокументОснованиеВПротоколеОбмена() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПротоколОбменаЕГАИС.ИдентификаторСессииОбмена КАК ИдентификаторСессииОбмена,
	|	ПротоколОбменаЕГАИС.ДокументОснование.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|ИЗ
	|	РегистрСведений.УдалитьПротоколОбменаЕГАИС КАК ПротоколОбменаЕГАИС
	|ГДЕ
	|	ПротоколОбменаЕГАИС.ДокументОснование ССЫЛКА Документ.ПоступлениеТоваров
	|	И ЕСТЬNULL(ПротоколОбменаЕГАИС.ДокументОснование.ТТНВходящаяЕГАИС, ЗНАЧЕНИЕ(Документ.ТТНВходящаяЕГАИС.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.ТТНВходящаяЕГАИС.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Запись = РегистрыСведений.УдалитьПротоколОбменаЕГАИС.СоздатьМенеджерЗаписи();
		Запись.ИдентификаторСессииОбмена = Выборка.ИдентификаторСессииОбмена;
		Запись.Прочитать();
		Если Запись.Выбран() Тогда
			Запись.ДокументОснование = Выборка.ТТНВходящаяЕГАИС;
			Запись.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает корректный статус обработки у подтвержденных ТТН.
//
Процедура ИзменитьСтатусыПодтвержденныхТТН() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТТНВходящая.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящая
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
	|		ПО ТТНВходящая.Ссылка = ПоступлениеТоваров.ТТНВходящаяЕГАИС
	|ГДЕ
	|	НЕ ТТНВходящая.ПометкаУдаления
	|	И ТТНВходящая.УдалитьСтатусОбработки = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.ПодтвержденСРасхождениями)
	|	И ПоступлениеТоваров.Проведен
	|	И НЕ ПоступлениеТоваров.ЕстьРасхождения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТТНВходящая.Ссылка
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящая
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
	|		ПО ТТНВходящая.Ссылка = ПоступлениеТоваров.ТТНВходящаяЕГАИС
	|ГДЕ
	|	НЕ ТТНВходящая.ПометкаУдаления
	|	И ТТНВходящая.УдалитьСтатусОбработки = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.ПодтвержденСРасхождениями)
	|	И ПоступлениеТоваров.Ссылка ЕСТЬ NULL ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТТН = Выборка.Ссылка.ПолучитьОбъект();
		ТТН.УдалитьСтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.Подтвержден;
		
		Если НЕ ЗначениеЗаполнено(ТТН.ДатаРегистрацииДвижений) Тогда
			ТТН.ДатаРегистрацииДвижений = ТТН.Дата;
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ТТН,,, РежимЗаписиДокумента.Проведение);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Релиз_2_2_3

Процедура ЗаполнениеНСИ() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыНоменклатуры.Ссылка,
	|	ВЫБОР
	|		КОГДА ВидыНоменклатуры.АлкогольнаяПродукция
	|			ТОГДА &АлкогольнаяПродукция
	|		ИНАЧЕ &БезОсобенностейУчета
	|	КОНЕЦ КАК ОсобенностьУчета
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|ГДЕ
	|	ВидыНоменклатуры.ТипНоменклатуры = &Товар
	|	И НЕ ВидыНоменклатуры.ЭтоГруппа
	|	И ВидыНоменклатуры.ОсобенностьУчета = &ОсобенностьУчетаПустаяСсылка";
	
	Запрос.УстановитьПараметр("ОсобенностьУчетаПустаяСсылка", Перечисления.ОсобенностиУчетаНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("АлкогольнаяПродукция"        , Перечисления.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция);
	Запрос.УстановитьПараметр("БезОсобенностейУчета"        , Перечисления.ОсобенностиУчетаНоменклатуры.БезОсобенностейУчета);
	Запрос.УстановитьПараметр("Товар"                       , Перечисления.ТипыНоменклатуры.Товар);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ВидНоменклатурыОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВидНоменклатурыОбъект.ОсобенностьУчета = Выборка.ОсобенностьУчета;
		ВидНоменклатурыОбъект.Записать();
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	ВЫБОР
	|		КОГДА Номенклатура.АлкогольнаяПродукция
	|			ТОГДА &АлкогольнаяПродукция
	|		ИНАЧЕ &БезОсобенностейУчета
	|	КОНЕЦ КАК ОсобенностьУчета
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ТипНоменклатуры = &Товар
	|	И НЕ Номенклатура.ЭтоГруппа
	|	И Номенклатура.ОсобенностьУчета = &ОсобенностьУчетаПустаяСсылка";
	
	Запрос.УстановитьПараметр("ОсобенностьУчетаПустаяСсылка", Перечисления.ОсобенностиУчетаНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("АлкогольнаяПродукция"        , Перечисления.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция);
	Запрос.УстановитьПараметр("БезОсобенностейУчета"        , Перечисления.ОсобенностиУчетаНоменклатуры.БезОсобенностейУчета);
	Запрос.УстановитьПараметр("Товар"                       , Перечисления.ТипыНоменклатуры.Товар);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоменклатураОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НоменклатураОбъект.ОсобенностьУчета = Выборка.ОсобенностьУчета;
		НоменклатураОбъект.Записать();
		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ЗаполнениеОперацийДокументаПоступления() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваров.Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
	|ГДЕ
	|	ПоступлениеТоваров.ХозяйственнаяОперация = &ХозяйственнаяОперация
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоступлениеТоваров.Дата,
	|	ПоступлениеТоваров.Ссылка";
	
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПустаяСсылка());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеТоваров;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ПерезаполнитьНастройкаИспользованияСерий() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВидыНоменклатуры.Ссылка
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|ГДЕ
	|	ВидыНоменклатуры.НастройкаИспользованияСерий В(&НастройкаИспользованияСерий)";
	
	МассивНастройкаИспользованияСерий = Новый Массив;
	МассивНастройкаИспользованияСерий.Добавить(Перечисления.НастройкиИспользованияСерийНоменклатуры.УдалитьПартияТоваровПоНомеру);
	МассивНастройкаИспользованияСерий.Добавить(Перечисления.НастройкиИспользованияСерийНоменклатуры.УдалитьПартияТоваровПоНомеруИСрокуГодности);
	МассивНастройкаИспользованияСерий.Добавить(Перечисления.НастройкиИспользованияСерийНоменклатуры.УдалитьПартияТоваровПоСрокуГодности);
	
	Запрос.УстановитьПараметр("НастройкаИспользованияСерий", МассивНастройкаИспользованияСерий);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.НастройкаИспользованияСерий = Перечисления.НастройкиИспользованияСерийНоменклатуры.ПартияТоваров;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Релиз_2_2_4

Процедура ОбновитьПроведениеДокументовЕГАИС(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	// движения документов
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АктПостановкиНаБалансЕГАИСТовары.Ссылка
	|ПОМЕСТИТЬ ПроведенныеДокументыСАП
	|ИЗ
	|	Документ.АктПостановкиНаБалансЕГАИС.Товары КАК АктПостановкиНаБалансЕГАИСТовары
	|ГДЕ
	|	АктПостановкиНаБалансЕГАИСТовары.Номенклатура.ВидНоменклатуры.ПродаетсяВРозлив
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АктСписанияЕГАИСТовары.Ссылка
	|ИЗ
	|	Документ.АктСписанияЕГАИС.Товары КАК АктСписанияЕГАИСТовары
	|ГДЕ
	|	АктСписанияЕГАИСТовары.Номенклатура.ВидНоменклатуры.ПродаетсяВРозлив
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВозвратИзРегистра2ЕГАИСТовары.Ссылка
	|ИЗ
	|	Документ.ВозвратИзРегистра2ЕГАИС.Товары КАК ВозвратИзРегистра2ЕГАИСТовары
	|ГДЕ
	|	ВозвратИзРегистра2ЕГАИСТовары.Номенклатура.ВидНоменклатуры.ПродаетсяВРозлив
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПередачаВРегистр2ЕГАИСТовары.Ссылка
	|ИЗ
	|	Документ.ПередачаВРегистр2ЕГАИС.Товары КАК ПередачаВРегистр2ЕГАИСТовары
	|ГДЕ
	|	ПередачаВРегистр2ЕГАИСТовары.Номенклатура.ВидНоменклатуры.ПродаетсяВРозлив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроведенныеДокументыСАП.Ссылка
	|ИЗ
	|	ПроведенныеДокументыСАП КАК ПроведенныеДокументыСАП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	т2.Регистратор,
	|	т2.Период,
	|	т2.НомерСтроки,
	|	т2.ОрганизацияЕГАИС,
	|	т1.АлкогольнаяПродукция,
	|	т1.Справка2,
	|	т2.Количество,
	|	т2.СвободныйОстаток,
	|	т1.Количество КАК КоличествоДокумент,
	|	т2.ВидДвижения,
	|	ВЫБОР
	|		КОГДА т1.Номенклатура.ВидНоменклатуры.ПродаетсяВРозлив
	|			ТОГДА т1.Количество * т1.Номенклатура.ОбъемДАЛ
	|		ИНАЧЕ т2.Количество
	|	КОНЕЦ КАК КоличествоДолжноБыть,
	|	ВЫБОР
	|		КОГДА т1.Номенклатура.ВидНоменклатуры.ПродаетсяВРозлив
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоРазливнаяСтрока
	|ИЗ
	|	Документ.АктПостановкиНаБалансЕГАИС.Товары КАК т1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПроведенныеДокументыСАП КАК т3
	|		ПО т1.Ссылка = т3.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиАлкогольнойПродукцииЕГАИС КАК т2
	|		ПО т1.Ссылка = т2.Регистратор
	|			И т1.АлкогольнаяПродукция = т2.АлкогольнаяПродукция
	|			И т1.Справка2 = т2.Справка2
	|			И т1.НомерСтроки = т2.НомерСтроки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	т2.Регистратор,
	|	т2.Период,
	|	т2.НомерСтроки,
	|	т2.ОрганизацияЕГАИС,
	|	т1.АлкогольнаяПродукция,
	|	т1.Справка2,
	|	т2.Количество,
	|	т2.СвободныйОстаток,
	|	т1.Количество,
	|	т2.ВидДвижения,
	|	ВЫБОР
	|		КОГДА т1.Номенклатура.ВидНоменклатуры.ПродаетсяВРозлив
	|			ТОГДА т1.Количество * т1.Номенклатура.ОбъемДАЛ
	|		ИНАЧЕ т2.Количество
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА т1.Номенклатура.ВидНоменклатуры.ПродаетсяВРозлив
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|ИЗ
	|	Документ.АктСписанияЕГАИС.Товары КАК т1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПроведенныеДокументыСАП КАК т3
	|		ПО т1.Ссылка = т3.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиАлкогольнойПродукцииЕГАИС КАК т2
	|		ПО т1.Ссылка = т2.Регистратор
	|			И т1.АлкогольнаяПродукция = т2.АлкогольнаяПродукция
	|			И т1.Справка2 = т2.Справка2
	|			И т1.НомерСтроки = т2.НомерСтроки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	т2.Регистратор,
	|	т2.Период,
	|	т2.НомерСтроки,
	|	т2.ОрганизацияЕГАИС,
	|	т1.АлкогольнаяПродукция,
	|	т1.Справка2,
	|	т2.Количество,
	|	т2.СвободныйОстаток,
	|	т1.Количество,
	|	т2.ВидДвижения,
	|	ВЫБОР
	|		КОГДА т1.Номенклатура.ВидНоменклатуры.ПродаетсяВРозлив
	|			ТОГДА т1.Количество * т1.Номенклатура.ОбъемДАЛ
	|		ИНАЧЕ т2.Количество
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА т1.Номенклатура.ВидНоменклатуры.ПродаетсяВРозлив
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|ИЗ
	|	Документ.ВозвратИзРегистра2ЕГАИС.Товары КАК т1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПроведенныеДокументыСАП КАК т3
	|		ПО т1.Ссылка = т3.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиАлкогольнойПродукцииЕГАИС КАК т2
	|		ПО т1.Ссылка = т2.Регистратор
	|			И т1.АлкогольнаяПродукция = т2.АлкогольнаяПродукция
	|			И т1.Справка2 = т2.Справка2
	|			И т1.НомерСтроки = т2.НомерСтроки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	т2.Регистратор,
	|	т2.Период,
	|	т2.НомерСтроки,
	|	т2.ОрганизацияЕГАИС,
	|	т1.АлкогольнаяПродукция,
	|	т1.Справка2,
	|	т2.Количество,
	|	т2.СвободныйОстаток,
	|	т1.Количество,
	|	т2.ВидДвижения,
	|	ВЫБОР
	|		КОГДА т1.Номенклатура.ВидНоменклатуры.ПродаетсяВРозлив
	|			ТОГДА т1.Количество * т1.Номенклатура.ОбъемДАЛ
	|		ИНАЧЕ т2.Количество
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА т1.Номенклатура.ВидНоменклатуры.ПродаетсяВРозлив
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|ИЗ
	|	Документ.ПередачаВРегистр2ЕГАИС.Товары КАК т1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПроведенныеДокументыСАП КАК т3
	|		ПО т1.Ссылка = т3.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиАлкогольнойПродукцииЕГАИС КАК т2
	|		ПО т1.Ссылка = т2.Регистратор
	|			И т1.АлкогольнаяПродукция = т2.АлкогольнаяПродукция
	|			И т1.Справка2 = т2.Справка2
	|			И т1.НомерСтроки = т2.НомерСтроки";
	Результат = Запрос.ВыполнитьПакет();
	
	Регистраторы = Результат[1].Выгрузить();
	НаборыЗаписей = Результат[2].Выгрузить();
	
	ШаблонИнформации = НСтр("ru = 'Движения документа %1 успешно скорректированы'");
	ШаблонЗаголоваОшибки = НСтр("ru = 'При корректировке движения по документу %1 произошли ошибки, движение не скорректировано'");
	ШаблонОшибки = НСтр("ru = 'Данные документа и данные движений не совпадают по строке %1'");
	
	Для Каждого Регистратор Из Регистраторы Цикл
		
		Набор = НаборыЗаписей.НайтиСтроки(Новый Структура("Регистратор", Регистратор.Ссылка));
		
		Если Набор.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НаборРН = РегистрыНакопления.ОстаткиАлкогольнойПродукцииЕГАИС.СоздатьНаборЗаписей();
		НаборРН.Отбор.Регистратор.Установить(Регистратор.Ссылка);
		
		Отказ = Ложь;
		ТекстОшибки = "";
		
		Для Каждого СтрокаНабора Из Набор Цикл
			
			Если СтрокаНабора.ЭтоРазливнаяСтрока Тогда
				Если не СтрокаНабора.СвободныйОстаток = 0 и не (СтрокаНабора.СвободныйОстаток = СтрокаНабора.КоличествоДокумент или СтрокаНабора.СвободныйОстаток = СтрокаНабора.КоличествоДолжноБыть) Тогда
					Отказ = Истина;
				ИначеЕсли не СтрокаНабора.Количество = 0 и не (СтрокаНабора.Количество = СтрокаНабора.КоличествоДокумент или СтрокаНабора.Количество = СтрокаНабора.КоличествоДолжноБыть) Тогда
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если Отказ Тогда
				ТекстОшибки = ?(ТекстОшибки = "", "", ТекстОшибки + Символы.ПС) + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, СтрокаНабора.НомерСтроки);
			Иначе
				НоваяСтрокаНабораРН = НаборРН.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаНабораРН, СтрокаНабора);
				Если Не НоваяСтрокаНабораРН.Количество = 0 Тогда
					НоваяСтрокаНабораРН.Количество = СтрокаНабора.КоличествоДолжноБыть;
				КонецЕсли;
				Если Не НоваяСтрокаНабораРН.СвободныйОстаток = 0 Тогда
					НоваяСтрокаНабораРН.СвободныйОстаток = СтрокаНабора.КоличествоДолжноБыть;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Отказ Тогда
			ЗаголовокОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголоваОшибки, Регистратор.Ссылка);
			ТекстОшибки = ЗаголовокОшибки + Символы.ПС + ТекстОшибки;
			ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		Иначе
			Попытка
				НаборРН.Записать();
				ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИнформации, Регистратор.Ссылка);
				ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Информация,,, ТекстИнформации);
			Исключение
				ЗаголовокОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголоваОшибки, Регистратор.Ссылка);
				ТекстОшибки = ЗаголовокОшибки + Символы.ПС + ОписаниеОшибки();
				ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
	// корректировка документа Остатки ЕГАИС
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОстаткиАП.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.ОстаткиАлкогольнойПродукцииЕГАИС КАК ОстаткиАП
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеАП
	|		ПО ОстаткиАП.АлкогольнаяПродукция = СоответствиеАП.АлкогольнаяПродукция
	|ГДЕ
	|	ОстаткиАП.Регистратор ССЫЛКА Документ.ОстаткиЕГАИС
	|	И СоответствиеАП.Номенклатура.ВидНоменклатуры.ПродаетсяВРозлив";
	ВыборкаПоДокументам = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Попытка
			ДокументОбъект = ВыборкаПоДокументам.Ссылка.ПолучитьОбъект();
			ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИнформации, ВыборкаПоДокументам.Ссылка);
			ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Информация,,, ТекстИнформации);
		Исключение
			ЗаголовокОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголоваОшибки, ВыборкаПоДокументам.Ссылка);
			ТекстОшибки = ЗаголовокОшибки + Символы.ПС + ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
			Продолжить;
		КонецПопытки;
		
		ДокументОбъект.ЗаполнитьПоРасхождениям();
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИнформации, ВыборкаПоДокументам.Ссылка);
			ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Информация,,, ТекстИнформации);
		Исключение
			ЗаголовокОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголоваОшибки, ВыборкаПоДокументам.Ссылка);
			ТекстОшибки = ЗаголовокОшибки + Символы.ПС + ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

// Установка значения по умолчанию даты начала отражения продаж в ЕГАИС для сельской местности
//
Процедура УстановитьДатуНачалаРегистрацииРозничныхПродажВЕГАИСВСельскойМестности() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Константы.ДатаНачалаРегистрацииРозничныхПродажВЕГАИСВСельскойМестности.Получить()) Тогда
		Константы.ДатаНачалаРегистрацииРозничныхПродажВЕГАИСВСельскойМестности.Установить(Дата(2017, 07, 01));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Релиз_2_2_5

Процедура ИзменитьВладельцаКартВЗаказахПокупателя() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка,
	|	ЗаказПокупателя.Дата,
	|	ЗаказПокупателя.ДисконтнаяКарта,
	|	ЗаказПокупателя.ВладелецДисконтнойКарты,
	|	ЗаказПокупателя.ДисконтнаяКарта.ВладелецКарты КАК ВладелецКарты
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.ВладелецДисконтнойКарты = НЕОПРЕДЕЛЕНО
	|	И НЕ ЗаказПокупателя.ДисконтнаяКарта.ВладелецКарты = ЗаказПокупателя.ВладелецДисконтнойКарты";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.ВладелецДисконтнойКарты = Выборка.ВладелецКарты;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьПравоВыбораКартыБезПодтверждения() Экспорт
	
	УстановитьДополнительноеПраво(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьВыборКартыБезSMS, Истина);
	УстановитьДополнительноеПраво(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьВыборКартыБезEmailПодтверждения, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПризнакиПредметовРасчета() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;

	Справочники.ПризнакиПредметовРасчета.ЗаполнитьПреопределенныеЭлементы();
	
КонецПроцедуры

Процедура ОбновитьДанныеВидовОсобыхНалоговОрганизаций() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыОсобыхНалоговОрганизаций.Период КАК Период,
	|	ВидыОсобыхНалоговОрганизаций.Организация КАК Организация,
	|	ВидыОсобыхНалоговОрганизаций.Склад КАК Склад,
	|	ВидыОсобыхНалоговОрганизаций.УдалитьРозничнаяТорговляОблагаетсяЕНВД КАК УдалитьРозничнаяТорговляОблагаетсяЕНВД
	|ИЗ
	|	РегистрСведений.УдалитьВидыОсобыхНалоговОрганизаций КАК ВидыОсобыхНалоговОрганизаций";
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		Менеджер = РегистрыСведений.УдалитьВидыОсобыхНалоговОрганизаций.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Менеджер, Результат, "Период, Организация, Склад");
		
		Если Результат.УдалитьРозничнаяТорговляОблагаетсяЕНВД Тогда
			Менеджер.ВидНалога = Перечисления.УдалитьВидыНалогов.ЕНВД;
		Иначе
			Менеджер.ВидНалога = Перечисления.УдалитьВидыНалогов.ПустаяСсылка();
		КонецЕсли;
		
		Менеджер.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьДанныеСистемНалогообложенияОрганизаций() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СистемыНалогообложенияОрганизаций.Период КАК Период,
	|	СистемыНалогообложенияОрганизаций.Организация КАК Организация,
	|	СистемыНалогообложенияОрганизаций.СистемаНалогообложения КАК СистемаНалогообложения
	|ИЗ
	|	РегистрСведений.УдалитьСистемыНалогообложенияОрганизаций КАК СистемыНалогообложенияОрганизаций";
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		Менеджер = РегистрыСведений.УдалитьСистемыНалогообложенияОрганизаций.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Менеджер, Результат, "Период, Организация, СистемаНалогообложения");
		
		Если Результат.СистемаНалогообложения = Перечисления.УдалитьСистемыНалогообложения.Упрощенная Тогда
			Менеджер.ОбъектНалогообложения = Перечисления.УдалитьОбъектыНалогообложенияПоУСН.Доходы;
		Иначе
			Менеджер.ОбъектНалогообложения = Перечисления.УдалитьОбъектыНалогообложенияПоУСН.ПустаяСсылка();
		КонецЕсли;
		
		Менеджер.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПризнакиПредметахРасчетаВВидахНоменклатуры() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;

	ЗапросПризнаки = Новый Запрос;
	ЗапросПризнаки.Текст = "ВЫБРАТЬ
	                       |	ПризнакиПредметовРасчета.Ссылка КАК Ссылка
	                       |ИЗ
	                       |	Справочник.ПризнакиПредметовРасчета КАК ПризнакиПредметовРасчета";
	Выборка = ЗапросПризнаки.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект, Истина);
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыНоменклатуры.АлкогольнаяПродукция,
	|	ВидыНоменклатуры.ТипНоменклатуры,
	|	ВидыНоменклатуры.ПризнакПредметаРасчета,
	|	ВидыНоменклатуры.Ссылка,
	|	ВЫБОР
	|		КОГДА НЕ ВидыНоменклатуры.ТипНоменклатуры = &Товар
	|			ТОГДА ВЫБОР
	|					КОГДА ВидыНоменклатуры.ТипНоменклатуры = &Услуга
	|						ТОГДА &Услуга_Признак
	|					ИНАЧЕ &Товар_Признак
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВидыНоменклатуры.ОсобенностьУчета = &АлкогольныйТовар
	|					ТОГДА &ПодакцизныйТовар_Признак
	|				ИНАЧЕ &Товар_Признак
	|			КОНЕЦ
	|	КОНЕЦ КАК РасчетныйПризнак
	|ПОМЕСТИТЬ ТаблицаВЗапросе
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВЗапросе.Ссылка,
	|	ТаблицаВЗапросе.РасчетныйПризнак
	|ИЗ
	|	ТаблицаВЗапросе КАК ТаблицаВЗапросе
	|ГДЕ
	|	НЕ ТаблицаВЗапросе.ПризнакПредметаРасчета = ТаблицаВЗапросе.РасчетныйПризнак
	|			И НЕ ТаблицаВЗапросе.РасчетныйПризнак = &Пустой_Признак";
	
	Запрос.Параметры.Вставить("Товар", Перечисления.ТипыНоменклатуры.Товар);
	Запрос.Параметры.Вставить("Услуга", Перечисления.ТипыНоменклатуры.Услуга);
	Запрос.Параметры.Вставить("АлкогольныйТовар", Перечисления.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция);
	Запрос.Параметры.Вставить("Услуга_Признак", Справочники.ПризнакиПредметовРасчета.Услуга);
	Запрос.Параметры.Вставить("Товар_Признак", Справочники.ПризнакиПредметовРасчета.Товар);
	Запрос.Параметры.Вставить("ПодакцизныйТовар_Признак", Справочники.ПризнакиПредметовРасчета.ПодакцизныйТовар);
	Запрос.Параметры.Вставить("Пустой_Признак", Справочники.ПризнакиПредметовРасчета.ПустаяСсылка());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.ПризнакПредметаРасчета = Выборка.РасчетныйПризнак;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьГруппуКонтактнойИнформацииИнформационныеКарты() Экспорт
	
	ГруппаИнформационныеКарты = Справочники.ВидыКонтактнойИнформации.СправочникИнформационныеКарты.ПолучитьОбъект();
	ГруппаИнформационныеКарты.Используется = Истина;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ГруппаИнформационныеКарты);
	
КонецПроцедуры

Процедура УстановитьТипыОборудованияУКассККМ() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КассыККМ.Ссылка,
	|	КассыККМ.ПодключаемоеОборудование.ТипОборудования КАК ТипОборудования
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	НЕ КассыККМ.ТипОборудования = КассыККМ.ПодключаемоеОборудование.ТипОборудования";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.ТипОборудования = Выборка.ТипОборудования;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьДанныеОткрытыхКассовыхСмен() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КассоваяСмена.Дата,
	|	КассоваяСмена.Номер,
	|	КассоваяСмена.Проведен,
	|	КассоваяСмена.ПометкаУдаления,
	|	КассоваяСмена.КассаККМ,
	|	КассоваяСмена.КассаККМ.ПодключаемоеОборудование КАК ФискальноеУстройство,
	|	КассоваяСмена.Кассир,
	|	КассоваяСмена.Магазин,
	|	КассоваяСмена.Организация,
	|	КассоваяСмена.НачалоКассовойСмены,
	|	КассоваяСмена.ОкончаниеКассовойСмены,
	|	КассоваяСмена.СтатусКассовойСмены КАК Статус,
	|	КассоваяСмена.Комментарий,
	|	КассоваяСмена.Ссылка КАК ИсходнаяКассоваяСмена
	|ИЗ
	|	Документ.УдалитьКассоваяСмена КАК КассоваяСмена
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КассоваяСмена КАК НоваяКассоваяСмена
	|		ПО КассоваяСмена.Ссылка = НоваяКассоваяСмена.ИсходнаяКассоваяСмена
	|ГДЕ
	|	КассоваяСмена.СтатусКассовойСмены = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|	И НоваяКассоваяСмена.Ссылка ЕСТЬ NULL";
	Результат = Запрос.Выполнить().Выбрать();
	
	ШаблонИнформации = НСтр("ru = 'Кассовая смена %1 успешно обновлена'");
	ШаблонОшибки = НСтр("ru = 'При обновлении кассовой смены %1 произошла ошибка'");
	
	Пока Результат.Следующий() Цикл
		
		НоваяКассоваяСмена = Документы.КассоваяСмена.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(НоваяКассоваяСмена, Результат);
		
		НоваяКассоваяСмена.Записать();
		ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИнформации, НоваяКассоваяСмена);
		ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Информация,,, ТекстИнформации);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьДанныеЗакрытыхКассовыхСмен(Параметры) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	КассоваяСмена.Ссылка
	|ПОМЕСТИТЬ КСДляОбработки
	|ИЗ
	|	Документ.УдалитьКассоваяСмена КАК КассоваяСмена
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КассоваяСмена КАК НоваяКассоваяСмена
	|		ПО КассоваяСмена.Ссылка = НоваяКассоваяСмена.ИсходнаяКассоваяСмена
	|ГДЕ
	|	НЕ КассоваяСмена.СтатусКассовойСмены = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|	И НоваяКассоваяСмена.Ссылка ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	КассоваяСмена.Дата УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(1) КАК КоличествоОсталось
	|ИЗ
	|	Документ.УдалитьКассоваяСмена КАК КассоваяСмена
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КассоваяСмена КАК НоваяКассоваяСмена
	|		ПО КассоваяСмена.Ссылка = НоваяКассоваяСмена.ИсходнаяКассоваяСмена
	|		ЛЕВОЕ СОЕДИНЕНИЕ КСДляОбработки КАК КСДляОбработки
	|		ПО КассоваяСмена.Ссылка = КСДляОбработки.Ссылка
	|ГДЕ
	|	НЕ КассоваяСмена.СтатусКассовойСмены = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|	И НоваяКассоваяСмена.Ссылка ЕСТЬ NULL
	|	И КСДляОбработки.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КассоваяСмена.Дата,
	|	КассоваяСмена.Номер,
	|	КассоваяСмена.Проведен,
	|	КассоваяСмена.ПометкаУдаления,
	|	КассоваяСмена.КассаККМ,
	|	КассоваяСмена.КассаККМ.ПодключаемоеОборудование КАК ФискальноеУстройство,
	|	КассоваяСмена.Кассир,
	|	КассоваяСмена.Магазин,
	|	КассоваяСмена.Организация,
	|	КассоваяСмена.НачалоКассовойСмены,
	|	КассоваяСмена.ОкончаниеКассовойСмены,
	|	КассоваяСмена.СтатусКассовойСмены КАК Статус,
	|	КассоваяСмена.Комментарий,
	|	КассоваяСмена.Ссылка КАК ИсходнаяКассоваяСмена
	|ИЗ
	|	Документ.УдалитьКассоваяСмена КАК КассоваяСмена
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КСДляОбработки КАК КСДляОбработки
	|		ПО КассоваяСмена.Ссылка = КСДляОбработки.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	КассоваяСмена.Дата УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОРП.Ссылка,
	|	ОРП.КассоваяСмена
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОРП
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КСДляОбработки КАК КСДляОбработки
	|		ПО ОРП.КассоваяСмена = КСДляОбработки.Ссылка";
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	КассоваяСмена = МассивРезультатов[2].Выбрать();
	ОтчетыРП = МассивРезультатов[3].Выгрузить();
	
	ШаблонИнформации = НСтр("ru = 'Кассовая смена %1 успешно обновлена'");
	ШаблонОшибки = НСтр("ru = 'При обновлении кассовой смены %1 произошла ошибка'");
	
	ЕстьОшибкиОбработки = Ложь;
	
	Пока КассоваяСмена.Следующий() Цикл
		
		НоваяКассоваяСмена = Документы.КассоваяСмена.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(НоваяКассоваяСмена, КассоваяСмена);
		НоваяКассоваяСмена.УстановитьСсылкуНового(Документы.КассоваяСмена.ПолучитьСсылку());
		
		МассивОРПДляЗаписи = Новый Массив();
		СтруктураПоиска = Новый Структура("КассоваяСмена", КассоваяСмена.ИсходнаяКассоваяСмена);
		ВсеОРП = ОтчетыРП.НайтиСтроки(СтруктураПоиска);
		Для Каждого ОРП Из ВсеОРП Цикл
			ОРПОбъект = ОРП.Ссылка.ПолучитьОбъект();
			ОРПОбъект.КассоваяСмена = НоваяКассоваяСмена.ПолучитьСсылкуНового();
			МассивОРПДляЗаписи.Добавить(ОРПОбъект);
		КонецЦикла;
		
		НачатьТранзакцию();
		
		Попытка
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НоваяКассоваяСмена);
			Для Каждого ОРП Из МассивОРПДляЗаписи Цикл
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОРП);
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
			ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИнформации, НоваяКассоваяСмена);
			ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Информация,,, ТекстИнформации);
			
		Исключение
			
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			
			ЕстьОшибкиОбработки = Истина;
			ЗаголовокОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, НоваяКассоваяСмена);
			ТекстОшибки = ЗаголовокОшибки + Символы.ПС + ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
			
		КонецПопытки;
		
	КонецЦикла;
	
	КоличествоОставалось = МассивРезультатов[1].Выбрать();
	КоличествоОставалось.Следующий();
	Если КоличествоОставалось.КоличествоОсталось = 0 и не ЕстьОшибкиОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
	Иначе
		Параметры.ОбработкаЗавершена = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Релиз_2_2_6

Процедура ЗаполнитьИдентификаторСтрокиАктовПостановкиНаБалансЕГАИС(Параметры) Экспорт
	
	МетаданныеОбъекта = Метаданные.Документы.АктПостановкиНаБалансЕГАИС;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АктПостановкиНаБалансЕГАИСТовары.Ссылка КАК Ссылка,
	|	АктПостановкиНаБалансЕГАИСТовары.НомерСтроки КАК НомерСтроки,
	|	АктПостановкиНаБалансЕГАИСТовары.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ИЗ
	|	Документ.АктПостановкиНаБалансЕГАИС.Товары КАК АктПостановкиНаБалансЕГАИСТовары
	|ГДЕ
	|	АктПостановкиНаБалансЕГАИСТовары.ИдентификаторСтроки = """"
	|ИТОГИ ПО
	|	Ссылка";
	
	ВыборкаАктов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаАктов.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
		
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("Документ.АктПостановкиНаБалансЕГАИС");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаАктов.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
		
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось заблокировать данные по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			                         УровеньЖурналаРегистрации.Предупреждение,
			                         МетаданныеОбъекта,
			                         ВыборкаАктов.Ссылка,
			                         ТекстСообщения);
			
			Продолжить;
			
		КонецПопытки;
		
		Док = ВыборкаАктов.Ссылка.ПолучитьОбъект();
		Если Док = Неопределено Тогда
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли;
		
		Выборка = ВыборкаАктов.Выбрать();
		Пока Выборка.Следующий() Цикл
			Док.Товары[Выборка.НомерСтроки - 1].ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		КонецЦикла;
		
		Попытка
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Док);
			
			ЗафиксироватьТранзакцию();
		
		Исключение
			
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Документ% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", ВыборкаАктов.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			                         УровеньЖурналаРегистрации.Предупреждение,
			                         МетаданныеОбъекта,
			                         ВыборкаАктов.Ссылка,
			                         ТекстСообщения);
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АктПостановкиНаБалансЕГАИСТовары.Ссылка КАК Ссылка,
	|	АктПостановкиНаБалансЕГАИСТовары.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	АктПостановкиНаБалансЕГАИСАкцизныеМарки.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.АктПостановкиНаБалансЕГАИС.Товары КАК АктПостановкиНаБалансЕГАИСТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АктПостановкиНаБалансЕГАИС.АкцизныеМарки КАК АктПостановкиНаБалансЕГАИСАкцизныеМарки
	|		ПО АктПостановкиНаБалансЕГАИСТовары.УдалитьКлючСвязи = АктПостановкиНаБалансЕГАИСАкцизныеМарки.УдалитьКлючСвязи
	|			И АктПостановкиНаБалансЕГАИСТовары.Ссылка = АктПостановкиНаБалансЕГАИСАкцизныеМарки.Ссылка
	|ГДЕ
	|	АктПостановкиНаБалансЕГАИСТовары.ИдентификаторСтроки <> АктПостановкиНаБалансЕГАИСАкцизныеМарки.ИдентификаторСтроки
	|ИТОГИ ПО
	|	Ссылка";
	
	ВыборкаАктов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаАктов.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
		
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("Документ.АктПостановкиНаБалансЕГАИС");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаАктов.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
		
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось заблокировать данные по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			                         УровеньЖурналаРегистрации.Предупреждение,
			                         МетаданныеОбъекта,
			                         ВыборкаАктов.Ссылка,
			                         ТекстСообщения);
			
			Продолжить;
			
		КонецПопытки;
		
		Док = ВыборкаАктов.Ссылка.ПолучитьОбъект();
		Если Док = Неопределено Тогда
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли;
		
		Выборка = ВыборкаАктов.Выбрать();
		Пока Выборка.Следующий() Цикл
			Док.АкцизныеМарки[Выборка.НомерСтроки - 1].ИдентификаторСтроки = Выборка.ИдентификаторСтроки;
		КонецЦикла;
		
		Попытка
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Док);
			
			ЗафиксироватьТранзакцию();
		
		Исключение
			
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Документ% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", ВыборкаАктов.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			                         УровеньЖурналаРегистрации.Предупреждение,
			                         МетаданныеОбъекта,
			                         ВыборкаАктов.Ссылка,
			                         ТекстСообщения);
			ВызватьИсключение;
			
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьПризнакРасположенияОрганизацииВСельскойМестности() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиОбменаЕГАИС.ИдентификаторФСРАР КАК ИдентификаторФСРАР
	|ПОМЕСТИТЬ КодыФСРАР
	|ИЗ
	|	РегистрСведений.НастройкиОбменаЕГАИС КАК НастройкиОбменаЕГАИС
	|ГДЕ
	|	НастройкиОбменаЕГАИС.УдалитьУТМВСельскойМестности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КлассификаторОрганизацийЕГАИС.Ссылка КАК Ссылка
	|ИЗ
	|	КодыФСРАР КАК КодыФСРАР
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|		ПО КодыФСРАР.ИдентификаторФСРАР = КлассификаторОрганизацийЕГАИС.Код
	|ГДЕ
	|	НЕ КлассификаторОрганизацийЕГАИС.НаходитсяВСельскойМестности";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОрганизацияЕГАИС = Выборка.Ссылка.ПолучитьОбъект();
		ОрганизацияЕГАИС.НаходитсяВСельскойМестности = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОрганизацияЕГАИС);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСоответствиеОрганизацийЕГАИС(Параметры) Экспорт
	
	МетаданныеОбъекта = Метаданные.Справочники.КлассификаторОрганизацийЕГАИС;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УдалитьСоответствиеОрганизацийЕГАИС.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	УдалитьСоответствиеОрганизацийЕГАИС.Контрагент КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО КАК ТорговыйОбъект,
	|	ВЫБОР
	|		КОГДА УдалитьСоответствиеОрганизацийЕГАИС.Контрагент ССЫЛКА Справочник.Организации
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СоответствуетОрганизации
	|ИЗ
	|	РегистрСведений.УдалитьСоответствиеОрганизацийЕГАИС КАК УдалитьСоответствиеОрганизацийЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОбменаЕГАИС КАК НастройкиОбменаЕГАИС
	|		ПО УдалитьСоответствиеОрганизацийЕГАИС.Контрагент = НастройкиОбменаЕГАИС.УдалитьРесурсОрганизация
	|ГДЕ
	|	ВЫБОР
	|			КОГДА УдалитьСоответствиеОрганизацийЕГАИС.Контрагент ССЫЛКА Справочник.Организации
	|				ТОГДА УдалитьСоответствиеОрганизацийЕГАИС.ОрганизацияЕГАИС.Контрагент = НЕОПРЕДЕЛЕНО
	|						ИЛИ УдалитьСоответствиеОрганизацийЕГАИС.ОрганизацияЕГАИС.Контрагент = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ИНАЧЕ НЕ УдалитьСоответствиеОрганизацийЕГАИС.ОрганизацияЕГАИС.Сопоставлено
	|		КОНЕЦ
	|	И НастройкиОбменаЕГАИС.УдалитьРесурсОрганизация ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка,
	|	ВложенныйЗапрос.Контрагент,
	|	ВложенныйЗапрос.ТорговыйОбъект,
	|	ИСТИНА
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		КлассификаторОрганизацийЕГАИС.Ссылка КАК Ссылка,
	|		НастройкиОбменаЕГАИС.УдалитьРесурсОрганизация КАК Контрагент,
	|		НастройкиОбменаЕГАИС.УдалитьРесурсСклад КАК ТорговыйОбъект
	|	ИЗ
	|		РегистрСведений.НастройкиОбменаЕГАИС КАК НастройкиОбменаЕГАИС
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|			ПО НастройкиОбменаЕГАИС.ИдентификаторФСРАР = КлассификаторОрганизацийЕГАИС.Код
	|	ГДЕ
	|		НЕ КлассификаторОрганизацийЕГАИС.Сопоставлено) КАК ВложенныйЗапрос";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
		
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("Справочник.КлассификаторОрганизацийЕГАИС");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.ОрганизацияЕГАИС);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
		
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось заблокировать данные по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			                         УровеньЖурналаРегистрации.Предупреждение,
			                         МетаданныеОбъекта,
			                         Выборка.ОрганизацияЕГАИС,
			                         ТекстСообщения);
			
			Продолжить;
			
		КонецПопытки;
		
		ОрганизацияЕГАИС = Выборка.ОрганизацияЕГАИС.ПолучитьОбъект();
		Если ОрганизацияЕГАИС = Неопределено Тогда
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли;
		
		Попытка
			
			ОрганизацияЕГАИС.Контрагент = Выборка.Контрагент;
			ОрганизацияЕГАИС.ТорговыйОбъект = Выборка.ТорговыйОбъект;
			ОрганизацияЕГАИС.Сопоставлено = Истина;
			ОрганизацияЕГАИС.СоответствуетОрганизации = Выборка.СоответствуетОрганизации;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОрганизацияЕГАИС);
			
			ЗафиксироватьТранзакцию();
		
		Исключение
			
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось обработать элемент справочника: %Справочник% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Справочник%", Выборка.ОрганизацияЕГАИС);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			                         УровеньЖурналаРегистрации.Предупреждение,
			                         МетаданныеОбъекта,
			                         Выборка.ОрганизацияЕГАИС,
			                         ТекстСообщения);
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьФорматОбменаОрганизацийЕГАИС() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторОрганизацийЕГАИС.Ссылка КАК Ссылка,
	|	УдалитьФорматыОбменаЕГАИС.ФорматОбмена КАК ФорматОбмена
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьФорматыОбменаЕГАИС КАК УдалитьФорматыОбменаЕГАИС
	|		ПО КлассификаторОрганизацийЕГАИС.Код = УдалитьФорматыОбменаЕГАИС.ИдентификаторФСРАР
	|ГДЕ
	|	КлассификаторОрганизацийЕГАИС.ФорматОбмена = ЗНАЧЕНИЕ(Перечисление.ФорматыОбменаЕГАИС.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОрганизацияЕГАИС = Выборка.Ссылка.ПолучитьОбъект();
		ОрганизацияЕГАИС.ФорматОбмена = Выборка.ФорматОбмена;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОрганизацияЕГАИС);
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторОрганизацийЕГАИС.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|ГДЕ
	|	КлассификаторОрганизацийЕГАИС.ФорматОбмена = ЗНАЧЕНИЕ(Перечисление.ФорматыОбменаЕГАИС.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОрганизацияЕГАИС = Выборка.Ссылка.ПолучитьОбъект();
		ОрганизацияЕГАИС.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОрганизацияЕГАИС);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТорговыйОбъектВТТНВходящейЕГАИС(Параметры) Экспорт
	
	МетаданныеОбъекта = Метаданные.Документы.ТТНВходящаяЕГАИС;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТТНВходящаяЕГАИС.Ссылка КАК Ссылка,
	|	ТТНВходящаяЕГАИС.УдалитьМагазин КАК Магазин,
	|	ТТНВходящаяЕГАИС.ТорговыйОбъект КАК ТорговыйОбъект
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|ГДЕ
	|	ТТНВходящаяЕГАИС.ТорговыйОбъект = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
	|	И ТТНВходящаяЕГАИС.УдалитьМагазин <> ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
		
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("Документ.ТТНВходящаяЕГАИС");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
		
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось заблокировать данные по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			                         УровеньЖурналаРегистрации.Предупреждение,
			                         МетаданныеОбъекта,
			                         Выборка.Ссылка,
			                         ТекстСообщения);
			
			Продолжить;
			
		КонецПопытки;
		
		ТТН = Выборка.Ссылка.ПолучитьОбъект();
		
		Если ТТН = Неопределено Тогда
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли;
		
		Попытка
		
			ТТН.ТорговыйОбъект = Выборка.Магазин;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ТТН);
			
			ЗафиксироватьТранзакцию();
		
		Исключение
			
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Документ% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			                         УровеньЖурналаРегистрации.Предупреждение,
			                         МетаданныеОбъекта,
			                         Выборка.Ссылка,
			                         ТекстСообщения);
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура УстановитьПравоДоступностьКолонкиКПоступлению() Экспорт
	
	УстановитьДополнительноеПраво(ПланыВидовХарактеристик.ПраваПользователей.ДоступностьКолонкиКПоступлению, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьСуммуНаличныхВОРП(Параметры) Экспорт
	
	МетаданныеОбъекта = Метаданные.Документы.ОтчетОРозничныхПродажах;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ОтчетОРозничныхПродажах.Ссылка КАК Ссылка,
	|	ОтчетОРозничныхПродажах.СуммаДокумента КАК Сумма
	|ПОМЕСТИТЬ ТаблицаВЗапросе
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.Ссылка,
	|	-ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.Сумма
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.ОплатаПлатежнымиКартами КАК ОтчетОРозничныхПродажахОплатаПлатежнымиКартами
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтчетОРозничныхПродажахОплатаБанковскимиКредитами.Ссылка,
	|	-ОтчетОРозничныхПродажахОплатаБанковскимиКредитами.Сумма
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.ОплатаБанковскимиКредитами КАК ОтчетОРозничныхПродажахОплатаБанковскимиКредитами
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтчетОРозничныхПродажах.Ссылка,
	|	-ОтчетОРозничныхПродажах.ОплатаПодарочнымиСертификатами
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтчетОРозничныхПродажахОплатаНаличнымиАгентскихПлатежей.Ссылка,
	|	-ОтчетОРозничныхПродажахОплатаНаличнымиАгентскихПлатежей.Сумма
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.ОплатаНаличнымиАгентскихПлатежей КАК ОтчетОРозничныхПродажахОплатаНаличнымиАгентскихПлатежей
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтчетОРозничныхПродажахПрочаяВыручка.Ссылка,
	|	-ОтчетОРозничныхПродажахПрочаяВыручка.СуммаПоступления
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.ПрочаяВыручка КАК ОтчетОРозничныхПродажахПрочаяВыручка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтчетОРозничныхПродажахПрочаяВыручка.Ссылка,
	|	ОтчетОРозничныхПродажахПрочаяВыручка.СуммаВозврата
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.ПрочаяВыручка КАК ОтчетОРозничныхПродажахПрочаяВыручка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВЗапросе.Ссылка КАК Ссылка,
	|	СУММА(ТаблицаВЗапросе.Сумма) КАК Сумма,
	|	ТаблицаВЗапросе.Ссылка.Проведен КАК Проведен,
	|	ТаблицаВЗапросе.Ссылка.СуммаОплатыНаличных КАК СуммаОплатыНаличных
	|ПОМЕСТИТЬ СвернутаяТаблица
	|ИЗ
	|	ТаблицаВЗапросе КАК ТаблицаВЗапросе
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаВЗапросе.Ссылка,
	|	ТаблицаВЗапросе.Ссылка.Проведен,
	|	ТаблицаВЗапросе.Ссылка.СуммаОплатыНаличных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СвернутаяТаблица.Ссылка КАК Ссылка,
	|	СвернутаяТаблица.Сумма КАК Сумма,
	|	СвернутаяТаблица.Проведен КАК Проведен,
	|	СвернутаяТаблица.СуммаОплатыНаличных КАК СуммаОплатыНаличных
	|ИЗ
	|	СвернутаяТаблица КАК СвернутаяТаблица
	|ГДЕ
	|	НЕ СвернутаяТаблица.Сумма = СвернутаяТаблица.СуммаОплатыНаличных";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
		
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("Документ.ОтчетОРозничныхПродажах");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
		
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось заблокировать данные по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			                         УровеньЖурналаРегистрации.Предупреждение,
			                         МетаданныеОбъекта,
			                         Выборка.Ссылка,
			                         ТекстСообщения);
			
			Продолжить;
			
		КонецПопытки;
		
		ОРП = Выборка.Ссылка.ПолучитьОбъект();
		
		Если ОРП = Неопределено Тогда
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли;
		
		Попытка
		
			ОРП.СуммаОплатыНаличных = Выборка.Сумма;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОРП);
			
			ЗафиксироватьТранзакцию();
		
		Исключение
			
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Документ% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			                         УровеньЖурналаРегистрации.Предупреждение,
			                         МетаданныеОбъекта,
			                         Выборка.Ссылка,
			                         ТекстСообщения);
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
	
	
КонецПроцедуры

Процедура ЗаполнитьПризнакАгента() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ДоговорыКонтрагентов.БанковскийПлатежныйАгент
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПризнакиАгента.БанковскийПлатежныйАгент)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПризнакиАгента.ПлатежныйАгент)
	|	КОНЕЦ КАК ПризнакАгента
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.ПризнакАгента = Выборка.ПризнакАгента;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТипыПризнакаПредметаРасчета() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Справочники.ПризнакиПредметовРасчета.ЗаполнитьПреопределенныеЭлементы();
	
КонецПроцедуры

Процедура ДополнитьВидыЦенВПравилах(Параметры) Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Правила.Ссылка КАК Правило,
	|	Правила.ВидЦен КАК ВидЦен
	|ПОМЕСТИТЬ ПравилаСЦенами
	|ИЗ
	|	Справочник.ПравилаЦенообразования КАК Правила
	|
	|СГРУППИРОВАТЬ ПО
	|	Правила.Ссылка,
	|	Правила.ВидЦен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПравилаГрупп.Ссылка,
	|	ПравилаГрупп.ВидЦен
	|ИЗ
	|	Справочник.ПравилаЦенообразования.ЦеновыеГруппы КАК ПравилаГрупп
	|
	|СГРУППИРОВАТЬ ПО
	|	ПравилаГрупп.Ссылка,
	|	ПравилаГрупп.ВидЦен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПравилаСЦенами.Правило КАК Правило,
	|	ВлияющиеВидыЦен.ВлияющийВидЦен КАК ВидЦен
	|ИЗ
	|	Справочник.ВидыЦен.ВлияющиеВидыЦен КАК ВлияющиеВидыЦен
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПравилаСЦенами КАК ПравилаСЦенами
	|		ПО ВлияющиеВидыЦен.Ссылка = ПравилаСЦенами.ВидЦен
	|
	|СГРУППИРОВАТЬ ПО
	|	ПравилаСЦенами.Правило,
	|	ВлияющиеВидыЦен.ВлияющийВидЦен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПравилаСЦенами.Правило,
	|	ВлияющиеВидыЦен.Ссылка
	|ИЗ
	|	Справочник.ВидыЦен.ВлияющиеВидыЦен КАК ВлияющиеВидыЦен
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПравилаСЦенами КАК ПравилаСЦенами
	|		ПО ВлияющиеВидыЦен.ВлияющийВидЦен = ПравилаСЦенами.ВидЦен
	|
	|СГРУППИРОВАТЬ ПО
	|	ПравилаСЦенами.Правило,
	|	ВлияющиеВидыЦен.Ссылка
	|ИТОГИ ПО
	|	Правило";
	ВыборкаПравила = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПравила.Следующий() Цикл
		Если ВыборкаПравила.Количество() > 0 Тогда
			ПравилоОбъект = ВыборкаПравила.Правило.ПолучитьОбъект();
			Если ПравилоОбъект <> Неопределено Тогда
				ВыборкаЦены = ВыборкаПравила.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаЦены.Следующий() Цикл
					НоваяСтрока = ПравилоОбъект.ДополнительныеВидыЦен.Добавить();
					НоваяСтрока.ВидЦен = ВыборкаЦены.ВидЦен;
				КонецЦикла;
				ПравилоОбъект.ДополнительныеВидыЦен.Свернуть("ВидЦен");
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ПравилоОбъект, Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДвиженияДокументаПеремаркировкаТоваров(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПеремаркировкаТоваровГИСМСерииКиЗ.Номенклатура КАК Номенклатура,
	|	ПеремаркировкаТоваровГИСМСерииКиЗ.Характеристика КАК Характеристика,
	|	ПеремаркировкаТоваровГИСМСерииКиЗ.Серия КАК Серия,
	|	-ПеремаркировкаТоваровГИСМСерииКиЗ.Количество КАК Количество,
	|	ПеремаркировкаТоваровГИСМСерииКиЗ.Ссылка.Магазин КАК Магазин,
	|	&СкладскаяОперация КАК СкладскаяОперация,
	|	ПеремаркировкаТоваровГИСМСерииКиЗ.Ссылка КАК Документ,
	|	ПеремаркировкаТоваровГИСМСерииКиЗ.Ссылка.Дата КАК Период,
	|	ПеремаркировкаТоваровГИСМСерииКиЗ.Ссылка КАК Регистратор,
	|	ПеремаркировкаТоваровГИСМСерииКиЗ.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ПеремаркировкаТоваровГИСМ.СерииКиЗ КАК ПеремаркировкаТоваровГИСМСерииКиЗ
	|ГДЕ
	|	ПеремаркировкаТоваровГИСМСерииКиЗ.Количество <> 0
	|	И ПеремаркировкаТоваровГИСМСерииКиЗ.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	И ПеремаркировкаТоваровГИСМСерииКиЗ.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаСерии.Номенклатура,
	|	ТаблицаСерии.Характеристика,
	|	ТаблицаСерии.Серия,
	|	ТаблицаСерии.Количество,
	|	ТаблицаСерии.Ссылка.Магазин,
	|	&СкладскаяОперация,
	|	ТаблицаСерии.Ссылка,
	|	ТаблицаСерии.Ссылка.Дата,
	|	ТаблицаСерии.Ссылка,
	|	ТаблицаСерии.НомерСтроки
	|ИЗ
	|	Документ.ПеремаркировкаТоваровГИСМ.Товары КАК ТаблицаСерии
	|ГДЕ
	|	ТаблицаСерии.Количество <> 0
	|	И ТаблицаСерии.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаСерии.Номенклатура,
	|	ТаблицаСерии.Характеристика,
	|	ТаблицаСерии.СписываемаяСерия,
	|	-ТаблицаСерии.Количество,
	|	ТаблицаСерии.Ссылка.Магазин,
	|	&СкладскаяОперация,
	|	ТаблицаСерии.Ссылка,
	|	ТаблицаСерии.Ссылка.Дата,
	|	ТаблицаСерии.Ссылка,
	|	ТаблицаСерии.НомерСтроки
	|ИЗ
	|	Документ.ПеремаркировкаТоваровГИСМ.Товары КАК ТаблицаСерии
	|ГДЕ
	|	ТаблицаСерии.Количество <> 0
	|	И ТаблицаСерии.Ссылка.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Регистратор,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Регистратор";
	
	Запрос.Параметры.Вставить("СкладскаяОперация", Перечисления.СкладскиеОперации.МаркировкаПродукцииДляГИСМ);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		ВыборкаДвижений = Выборка.Выбрать();
		ДвиженияДокументаПоРегистру("ДвиженияСерийТоваров", Выборка.Регистратор, ВыборкаДвижений);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерезаполнитьСуммуНаличныхВОРП(Параметры) Экспорт
	
	ЗапросОтчетОРозничныхПродаж = Новый Запрос;
	
	ЗапросОтчетОРозничныхПродаж.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЧекККМ.ОтчетОРозничныхПродажах.Ссылка КАК Ссылка,
	|	ЧекККМ.ОтчетОРозничныхПродажах.СуммаОплатыНаличных КАК СуммаОплатыНаличных,
	|	ЧекККМ.ОтчетОРозничныхПродажах.Дата КАК Дата,
	|	ЧекККМ.ОтчетОРозничныхПродажах.КассаККМ КАК КассаККМ
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.ОтчетОРозничныхПродажах.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЧекККМ.ОтчетОРозничныхПродажах.Дата,
	|	ЧекККМ.ОтчетОРозничныхПродажах.Ссылка";
	
	Результат = ЗапросОтчетОРозничныхПродаж.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОтчетОРозничныхПродажах = Выборка.Ссылка;
		ЗапросСуммаОплатыНаличных = Новый Запрос;
		ЗапросСуммаОплатыНаличных.УстановитьПараметр("Наличные", Справочники.ВидыОплатЧекаККМ.Наличные);
		ЗапросСуммаОплатыНаличных.УстановитьПараметр("ПустойДоговор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		ЗапросСуммаОплатыНаличных.УстановитьПараметр("ОтчетОРозничныхПродажах", ОтчетОРозничныхПродажах);
		
		ЗапросСуммаОплатыНаличных.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЧекККМОплата.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ТаблицаЧековСОплатойНаличными
		|ИЗ
		|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
		|ГДЕ
		|	ЧекККМОплата.Ссылка.ОтчетОРозничныхПродажах = &ОтчетОРозничныхПродажах
		|	И ЧекККМОплата.Ссылка.Проведен
		|	И НЕ ЧекККМОплата.Ссылка.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Аннулированный)
		|	И НЕ ЧекККМОплата.Ссылка.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Отложенный)
		|	И ЧекККМОплата.ВидОплаты = &Наличные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЧекККМТовары.Сумма КАК СуммаТоваров,
		|	0 КАК СуммаОплат,
		|	0 КАК СуммаНаличных,
		|	ЧекККМТовары.Ссылка КАК Ссылка,
		|	ЧекККМТовары.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента
		|ПОМЕСТИТЬ ТаблицаСумм
		|ИЗ
		|	Документ.ЧекККМ.Товары КАК ЧекККМТовары
		|ГДЕ
		|	ЧекККМТовары.Ссылка.ОтчетОРозничныхПродажах = &ОтчетОРозничныхПродажах
		|	И ЧекККМТовары.Ссылка.Проведен
		|	И НЕ ЧекККМТовары.Ссылка.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Аннулированный)
		|	И НЕ ЧекККМТовары.Ссылка.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Отложенный)
		|	И ЧекККМТовары.Ссылка В
		|			(ВЫБРАТЬ
		|				ТаблицаЧековСОплатойНаличными.Ссылка КАК Ссылка
		|			ИЗ
		|				ТаблицаЧековСОплатойНаличными КАК ТаблицаЧековСОплатойНаличными)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	0,
		|	ЧекККМОплата.Сумма,
		|	ВЫБОР
		|		КОГДА ЧекККМОплата.ВидОплаты = &Наличные
		|			ТОГДА ЧекККМОплата.Сумма
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	ЧекККМОплата.Ссылка,
		|	ЧекККМОплата.Ссылка.ДоговорКонтрагента
		|ИЗ
		|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
		|ГДЕ
		|	ЧекККМОплата.Ссылка.ОтчетОРозничныхПродажах = &ОтчетОРозничныхПродажах
		|	И ЧекККМОплата.Ссылка.Проведен
		|	И НЕ ЧекККМОплата.Ссылка.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Аннулированный)
		|	И НЕ ЧекККМОплата.Ссылка.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Отложенный)
		|	И ЧекККМОплата.Ссылка В
		|			(ВЫБРАТЬ
		|				ТаблицаЧековСОплатойНаличными.Ссылка КАК Ссылка
		|			ИЗ
		|				ТаблицаЧековСОплатойНаличными КАК ТаблицаЧековСОплатойНаличными)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ТаблицаСумм.СуммаТоваров) КАК СуммаТоваров,
		|	СУММА(ТаблицаСумм.СуммаОплат) КАК СуммаОплат,
		|	СУММА(ТаблицаСумм.СуммаНаличных) КАК СуммаНаличных,
		|	ТаблицаСумм.Ссылка КАК Ссылка,
		|	ТаблицаСумм.ДоговорКонтрагента КАК ДоговорКонтрагента
		|ПОМЕСТИТЬ ТаблицаПоЧекам
		|ИЗ
		|	ТаблицаСумм КАК ТаблицаСумм
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаСумм.Ссылка,
		|	ТаблицаСумм.ДоговорКонтрагента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПоЧекам.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА ТаблицаПоЧекам.СуммаТоваров = 0
		|			ТОГДА ТаблицаПоЧекам.СуммаНаличных
		|		ИНАЧЕ ТаблицаПоЧекам.СуммаТоваров - ТаблицаПоЧекам.СуммаОплат + ТаблицаПоЧекам.СуммаНаличных
		|	КОНЕЦ КАК НаличныеБезСдачи,
		|	ТаблицаПоЧекам.ДоговорКонтрагента КАК ДоговорКонтрагента
		|ПОМЕСТИТЬ ТаблицаНаличныеБезСдачи
		|ИЗ
		|	ТаблицаПоЧекам КАК ТаблицаПоЧекам
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНаличныеБезСдачи.Ссылка КАК Ссылка,
		|	ТаблицаНаличныеБезСдачи.НаличныеБезСдачи КАК НаличныеБезСдачи,
		|	ТаблицаНаличныеБезСдачи.ДоговорКонтрагента КАК ДоговорКонтрагента
		|ИЗ
		|	ТаблицаНаличныеБезСдачи КАК ТаблицаНаличныеБезСдачи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА ТаблицаНаличныеБезСдачи.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
		|				ТОГДА -ТаблицаНаличныеБезСдачи.НаличныеБезСдачи
		|			ИНАЧЕ ТаблицаНаличныеБезСдачи.НаличныеБезСдачи
		|		КОНЕЦ) КАК НаличныеБезСдачи
		|ИЗ
		|	ТаблицаНаличныеБезСдачи КАК ТаблицаНаличныеБезСдачи
		|ГДЕ
		|	ТаблицаНаличныеБезСдачи.ДоговорКонтрагента = &ПустойАгентскийДоговор";
		
		
		МассивРезультатСуммаОплатыНаличных = ЗапросСуммаОплатыНаличных.ВыполнитьПакет();
		РезультатСуммаОплатыНаличных       = МассивРезультатСуммаОплатыНаличных[5];
		ТаблицаНаличныеБезСдачи            = МассивРезультатСуммаОплатыНаличных[4].Выгрузить();
		
		СуммаОплатыНаличных = 0;
		
		Если НЕ РезультатСуммаОплатыНаличных.Пустой() Тогда
		
			ВыборкаСуммаОплатыНаличных = РезультатСуммаОплатыНаличных.Выбрать();
			Если ВыборкаСуммаОплатыНаличных.Следующий() Тогда
				СуммаОплатыНаличных = ВыборкаСуммаОплатыНаличных.НаличныеБезСдачи;
				Если НЕ ЗначениеЗаполнено(СуммаОплатыНаличных) Тогда
					СуммаОплатыНаличных = 0;
				КонецЕсли;
			КонецЕсли;
		
		КонецЕсли;
		
		ОтчетОРозничныхПродажахОбъект = ОтчетОРозничныхПродажах.ПолучитьОбъект();
		ОтчетОРозничныхПродажахОбъект.СуммаОплатыНаличных = СуммаОплатыНаличных;
		
		ЗапросПоРасчетамСКлиентами = Новый Запрос;
		ЗапросПоРасчетамСКлиентами.УстановитьПараметр("ОтчетОРозничныхПродажах", ОтчетОРозничныхПродажах);
		
		МассивТиповОплатНеВлияющийНаРасчеты = Новый Массив;
		МассивТиповОплатНеВлияющийНаРасчеты.Добавить(Перечисления.ТипыОплатЧекаККМ.ЗачетАванса);
		МассивТиповОплатНеВлияющийНаРасчеты.Добавить(Перечисления.ТипыОплатЧекаККМ.ВРассрочку);
		
		ЗапросПоРасчетамСКлиентами.УстановитьПараметр("МассивТиповОплатНеВлияющийНаРасчеты", 
													   МассивТиповОплатНеВлияющийНаРасчеты);
		
		ЗапросПоРасчетамСКлиентами.УстановитьПараметр("ЗачетАванса", Перечисления.ТипыОплатЧекаККМ.ЗачетАванса);
		ЗапросПоРасчетамСКлиентами.УстановитьПараметр("ВРассрочку" , Перечисления.ТипыОплатЧекаККМ.ВРассрочку);
		ЗапросПоРасчетамСКлиентами.УстановитьПараметр("ТаблицаНаличныеБезСдачи" , ТаблицаНаличныеБезСдачи);
		ЗапросПоРасчетамСКлиентами.УстановитьПараметр("ТипОплатыНаличные" , Справочники.ВидыОплатЧекаККМ.Наличные);
		
		МассивПустыхЗначенийДокументаРасчета = Новый Массив;
		МассивПустыхЗначенийДокументаРасчета.Добавить(Неопределено);
		МассивПустыхЗначенийДокументаРасчета.Добавить(Документы.ПриходныйКассовыйОрдер.ПустаяСсылка());
		МассивПустыхЗначенийДокументаРасчета.Добавить(Документы.ОплатаОтПокупателяПлатежнойКартой.ПустаяСсылка());
		МассивПустыхЗначенийДокументаРасчета.Добавить(Документы.ЧекККМ.ПустаяСсылка());
		МассивПустыхЗначенийДокументаРасчета.Добавить(Документы.ВводОстатковРасчетовСКлиентами.ПустаяСсылка());
		
		ЗапросПоРасчетамСКлиентами.УстановитьПараметр("МассивПустыхЗначенийДокументаРасчета", 
													   МассивПустыхЗначенийДокументаРасчета);
		
		ЗапросПоРасчетамСКлиентами.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Док.Ссылка КАК Ссылка,
		|	Док.ДокументРасчета КАК ДокументРасчета,
		|	Док.ЗаказПокупателя КАК ЗаказПокупателя,
		|	ВЫБОР
		|		КОГДА Док.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоВозврат,
		|	Док.ОперацияСДенежнымиСредствами КАК ОперацияСДенежнымиСредствами,
		|	Док.Контрагент КАК Контрагент
		|ПОМЕСТИТЬ ТаблицаЧеков
		|ИЗ
		|	Документ.ЧекККМ КАК Док
		|ГДЕ
		|	Док.ОтчетОРозничныхПродажах = &ОтчетОРозничныхПродажах
		|	И Док.Проведен
		|	И НЕ Док.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Аннулированный)
		|	И НЕ Док.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Отложенный)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЧекККМОплата.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ТаблицаЧековСНеСворачиваемымиРасчетами
		|ИЗ
		|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
		|ГДЕ
		|	ЧекККМОплата.Ссылка.ОтчетОРозничныхПродажах = &ОтчетОРозничныхПродажах
		|	И ЧекККМОплата.Ссылка.Проведен
		|	И НЕ ЧекККМОплата.Ссылка.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Аннулированный)
		|	И НЕ ЧекККМОплата.Ссылка.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Отложенный)
		|	И (ЧекККМОплата.Ссылка.ОперацияСДенежнымиСредствами
		|			ИЛИ ЧекККМОплата.ВидОплаты.ТипОплаты В (&МассивТиповОплатНеВлияющийНаРасчеты))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЧеков.Ссылка КАК Ссылка,
		|	ТаблицаЧеков.ДокументРасчета КАК ДокументРасчета,
		|	ТаблицаЧеков.ЗаказПокупателя КАК ЗаказПокупателя,
		|	ТаблицаЧеков.ЭтоВозврат КАК ЭтоВозврат,
		|	ВЫБОР
		|		КОГДА ТаблицаЧековСНеСворачиваемымиРасчетами.Ссылка ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК РазвернутыйУчет,
		|	ТаблицаЧеков.ОперацияСДенежнымиСредствами КАК ОперацияСДенежнымиСредствами,
		|	ТаблицаЧеков.Контрагент КАК Контрагент
		|ПОМЕСТИТЬ ПромежуточнаяТаблицаЧеков
		|ИЗ
		|	ТаблицаЧеков КАК ТаблицаЧеков
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЧековСНеСворачиваемымиРасчетами КАК ТаблицаЧековСНеСворачиваемымиРасчетами
		|		ПО ТаблицаЧеков.Ссылка = ТаблицаЧековСНеСворачиваемымиРасчетами.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНаличныеБезСдачи.НаличныеБезСдачи КАК НаличныеБезСдачи,
		|	ТаблицаНаличныеБезСдачи.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ТаблицаНаличныеБезСдачи
		|ИЗ
		|	&ТаблицаНаличныеБезСдачи КАК ТаблицаНаличныеБезСдачи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЧекККМОплата.ВидОплаты КАК ВидОплаты,
		|	СУММА(ЧекККМОплата.Сумма) КАК Сумма,
		|	ПромежуточнаяТаблицаЧеков.Ссылка КАК Ссылка,
		|	ПромежуточнаяТаблицаЧеков.ДокументРасчета КАК ДокументРасчета,
		|	ПромежуточнаяТаблицаЧеков.ЗаказПокупателя КАК ЗаказПокупателя,
		|	ПромежуточнаяТаблицаЧеков.ЭтоВозврат КАК ЭтоВозврат,
		|	ПромежуточнаяТаблицаЧеков.ОперацияСДенежнымиСредствами КАК ОперацияСДенежнымиСредствами,
		|	ПромежуточнаяТаблицаЧеков.РазвернутыйУчет КАК РазвернутыйУчет,
		|	ПромежуточнаяТаблицаЧеков.Контрагент КАК Контрагент
		|ПОМЕСТИТЬ ТаблицаОплатБезУчетаСдачи
		|ИЗ
		|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПромежуточнаяТаблицаЧеков КАК ПромежуточнаяТаблицаЧеков
		|		ПО ЧекККМОплата.Ссылка = ПромежуточнаяТаблицаЧеков.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ПромежуточнаяТаблицаЧеков.ЗаказПокупателя,
		|	ПромежуточнаяТаблицаЧеков.ДокументРасчета,
		|	ПромежуточнаяТаблицаЧеков.ОперацияСДенежнымиСредствами,
		|	ЧекККМОплата.ВидОплаты,
		|	ПромежуточнаяТаблицаЧеков.РазвернутыйУчет,
		|	ПромежуточнаяТаблицаЧеков.Ссылка,
		|	ПромежуточнаяТаблицаЧеков.ЭтоВозврат,
		|	ПромежуточнаяТаблицаЧеков.Контрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОплатБезУчетаСдачи.ВидОплаты КАК ВидОплаты,
		|	ТаблицаОплатБезУчетаСдачи.ВидОплаты.ТипОплаты КАК ТипОплаты,
		|	ВЫБОР
		|		КОГДА ТаблицаОплатБезУчетаСдачи.ВидОплаты = &ТипОплатыНаличные
		|			ТОГДА ЕСТЬNULL(ТаблицаНаличныеБезСдачи.НаличныеБезСдачи, ТаблицаОплатБезУчетаСдачи.Сумма)
		|		ИНАЧЕ ТаблицаОплатБезУчетаСдачи.Сумма
		|	КОНЕЦ КАК Сумма,
		|	ТаблицаОплатБезУчетаСдачи.Ссылка КАК Ссылка,
		|	ТаблицаОплатБезУчетаСдачи.ДокументРасчета КАК ДокументРасчета,
		|	ТаблицаОплатБезУчетаСдачи.ЗаказПокупателя КАК ЗаказПокупателя,
		|	ТаблицаОплатБезУчетаСдачи.ЭтоВозврат КАК ЭтоВозврат,
		|	ТаблицаОплатБезУчетаСдачи.ОперацияСДенежнымиСредствами КАК ОперацияСДенежнымиСредствами,
		|	ТаблицаОплатБезУчетаСдачи.РазвернутыйУчет КАК РазвернутыйУчет,
		|	ТаблицаОплатБезУчетаСдачи.Контрагент КАК Контрагент
		|ПОМЕСТИТЬ ТаблицаОплат
		|ИЗ
		|	ТаблицаОплатБезУчетаСдачи КАК ТаблицаОплатБезУчетаСдачи
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаНаличныеБезСдачи КАК ТаблицаНаличныеБезСдачи
		|		ПО (ТаблицаОплатБезУчетаСдачи.Ссылка = ТаблицаНаличныеБезСдачи.Ссылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ТаблицаОплат.ТипОплаты = &ЗачетАванса
		|			ТОГДА ТаблицаОплат.ДокументРасчета
		|		КОГДА НЕ ТаблицаОплат.РазвернутыйУчет
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		ИНАЧЕ ТаблицаОплат.Ссылка
		|	КОНЕЦ КАК ДокументРасчета,
		|	0 КАК Оплачено,
		|	ВЫБОР
		|		КОГДА ТаблицаОплат.ЭтоВозврат
		|			ТОГДА -ТаблицаОплат.Сумма
		|		ИНАЧЕ ТаблицаОплат.Сумма
		|	КОНЕЦ КАК Отгружено,
		|	ТаблицаОплат.ЗаказПокупателя КАК ЗаказПокупателя,
		|	ТаблицаОплат.Контрагент КАК Контрагент
		|ПОМЕСТИТЬ ТаблицаОплатДляСворачивания
		|ИЗ
		|	ТаблицаОплат КАК ТаблицаОплат
		|ГДЕ
		|	НЕ ТаблицаОплат.ОперацияСДенежнымиСредствами
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ТаблицаОплат.РазвернутыйУчет
		|			ТОГДА ВЫБОР
		|					КОГДА ТаблицаОплат.ДокументРасчета В (&МассивПустыхЗначенийДокументаРасчета)
		|						ТОГДА ТаблицаОплат.Ссылка
		|					ИНАЧЕ ТаблицаОплат.ДокументРасчета
		|				КОНЕЦ
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ТаблицаОплат.ЭтоВозврат
		|			ТОГДА -ТаблицаОплат.Сумма
		|		ИНАЧЕ ТаблицаОплат.Сумма
		|	КОНЕЦ,
		|	0,
		|	ТаблицаОплат.ЗаказПокупателя,
		|	ТаблицаОплат.Контрагент
		|ИЗ
		|	ТаблицаОплат КАК ТаблицаОплат
		|ГДЕ
		|	НЕ ТаблицаОплат.ТипОплаты В (&МассивТиповОплатНеВлияющийНаРасчеты)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОплатДляСворачивания.ДокументРасчета КАК ДокументРасчета,
		|	СУММА(ТаблицаОплатДляСворачивания.Оплачено) КАК Оплачено,
		|	СУММА(ТаблицаОплатДляСворачивания.Отгружено) КАК Отгружено,
		|	ТаблицаОплатДляСворачивания.ЗаказПокупателя КАК ЗаказПокупателя,
		|	ТаблицаОплатДляСворачивания.Контрагент КАК Контрагент
		|ИЗ
		|	ТаблицаОплатДляСворачивания КАК ТаблицаОплатДляСворачивания
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаОплатДляСворачивания.ЗаказПокупателя,
		|	ТаблицаОплатДляСворачивания.Контрагент,
		|	ТаблицаОплатДляСворачивания.ДокументРасчета";
		
		РезультатПоРасчетамСКлиентами     = ЗапросПоРасчетамСКлиентами.Выполнить();
		
		ВыборкаПоРасчетамСКлиентами = РезультатПоРасчетамСКлиентами.Выбрать();
		
		ОтчетОРозничныхПродажахОбъект.РасчетыСКлиентами.Очистить();
		Пока ВыборкаПоРасчетамСКлиентами.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаПоРасчетамСКлиентами.Оплачено) И НЕ ЗначениеЗаполнено(ВыборкаПоРасчетамСКлиентами.Отгружено) Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТабличнойЧасти = ОтчетОРозничныхПродажахОбъект.РасчетыСКлиентами.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыборкаПоРасчетамСКлиентами);
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОтчетОРозничныхПродажахОбъект, Истина);
		
		СтруктураЗаписи = Новый Структура();
		СтруктураЗаписи.Вставить("Регистратор", ОтчетОРозничныхПродажах);
		СтруктураЗаписи.Вставить("Период", Выборка.Дата);
		СтруктураЗаписи.Вставить("НомерСтроки", 1);
		СтруктураЗаписи.Вставить("КассаККМ", Выборка.КассаККМ);
		СтруктураЗаписи.Вставить("Сумма", СуммаОплатыНаличных);
		
		ДвиженияДокументаПоРегистру("ДенежныеСредстваККМ", ОтчетОРозничныхПродажах, СтруктураЗаписи);
		
		ЗапросДвиженияРасчетСКлиентами = Новый Запрос;
		ЗапросДвиженияРасчетСКлиентами.УстановитьПараметр("ОтчетОРозничныхПродажах", ОтчетОРозничныхПродажах);
		
		ЗапросДвиженияРасчетСКлиентами.Текст = 
		"ВЫБРАТЬ
		|	ОтчетОРозничныхПродажахРасчетыСКлиентами.Ссылка.Дата КАК Период,
		|	ОтчетОРозничныхПродажахРасчетыСКлиентами.Ссылка КАК Регистратор,
		|	ОтчетОРозничныхПродажахРасчетыСКлиентами.НомерСтроки КАК НомерСтроки,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	ОтчетОРозничныхПродажахРасчетыСКлиентами.Ссылка.Магазин КАК Магазин,
		|	ОтчетОРозничныхПродажахРасчетыСКлиентами.Ссылка.Организация КАК Организация,
		|	ОтчетОРозничныхПродажахРасчетыСКлиентами.Контрагент КАК Контрагент,
		|	ВЫБОР
		|		КОГДА ОтчетОРозничныхПродажахРасчетыСКлиентами.ДокументРасчета = НЕОПРЕДЕЛЕНО
		|			ТОГДА &ОтчетОРозничныхПродажах
		|		ИНАЧЕ ОтчетОРозничныхПродажахРасчетыСКлиентами.ДокументРасчета
		|	КОНЕЦ КАК ДокументРасчета,
		|	ОтчетОРозничныхПродажахРасчетыСКлиентами.ЗаказПокупателя КАК ЗаказПокупателя,
		|	ОтчетОРозничныхПродажахРасчетыСКлиентами.Отгружено КАК Сумма
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах.РасчетыСКлиентами КАК ОтчетОРозничныхПродажахРасчетыСКлиентами
		|ГДЕ
		|	ОтчетОРозничныхПродажахРасчетыСКлиентами.Ссылка = &ОтчетОРозничныхПродажах
		|	И ОтчетОРозничныхПродажахРасчетыСКлиентами.Отгружено <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОтчетОРозничныхПродажахРасчетыСКлиентами.Ссылка.Дата КАК Период,
		|	&ОтчетОРозничныхПродажах,
		|	ОтчетОРозничныхПродажахРасчетыСКлиентами.НомерСтроки,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	ОтчетОРозничныхПродажахРасчетыСКлиентами.Ссылка.Магазин,
		|	ОтчетОРозничныхПродажахРасчетыСКлиентами.Ссылка.Организация,
		|	ОтчетОРозничныхПродажахРасчетыСКлиентами.Контрагент,
		|	ВЫБОР
		|		КОГДА ОтчетОРозничныхПродажахРасчетыСКлиентами.ДокументРасчета = НЕОПРЕДЕЛЕНО
		|			ТОГДА &ОтчетОРозничныхПродажах
		|		ИНАЧЕ ОтчетОРозничныхПродажахРасчетыСКлиентами.ДокументРасчета
		|	КОНЕЦ,
		|	ОтчетОРозничныхПродажахРасчетыСКлиентами.ЗаказПокупателя,
		|	ОтчетОРозничныхПродажахРасчетыСКлиентами.Оплачено
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах.РасчетыСКлиентами КАК ОтчетОРозничныхПродажахРасчетыСКлиентами
		|ГДЕ
		|	ОтчетОРозничныхПродажахРасчетыСКлиентами.Ссылка = &ОтчетОРозничныхПродажах
		|	И ОтчетОРозничныхПродажахРасчетыСКлиентами.Оплачено <> 0";
		
		РезультатДвиженияРасчетСКлиентами = ЗапросДвиженияРасчетСКлиентами.Выполнить();
		ВыборкаДвиженияРасчетСКлиентами = РезультатДвиженияРасчетСКлиентами.Выбрать();
		
		ДвиженияДокументаПоРегистру("РасчетыСКлиентами", ОтчетОРозничныхПродажах, ВыборкаДвиженияРасчетСКлиентами);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПлатежныеКартыВОРП(Параметры) Экспорт
	
	ЗапросОтчетОРозничныхПродаж = Новый Запрос;
	
	ЗапросОтчетОРозничныхПродаж.Текст = 
	"ВЫБРАТЬ
	|	ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ТаблицаОРПИмеющихОплаты
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.ОплатаПлатежнымиКартами КАК ОтчетОРозничныхПродажахОплатаПлатежнымиКартами
	|ГДЕ
	|	ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.Ссылка.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЧекККМОплата.Ссылка.ОтчетОРозничныхПродажах КАК Ссылка,
	|	ЧекККМОплата.Ссылка.ОтчетОРозничныхПродажах.Магазин КАК Магазин,
	|	ЧекККМОплата.Ссылка.ОтчетОРозничныхПродажах.Организация КАК Организация,
	|	ЧекККМОплата.Ссылка.ОтчетОРозничныхПродажах.Дата КАК Период
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|ГДЕ
	|	ЧекККМОплата.ВидОплаты.ТипОплаты = &ТипОплаты
	|	И ЧекККМОплата.Ссылка.Проведен
	|	И НЕ ЧекККМОплата.Ссылка.ОтчетОРозничныхПродажах В
	|				(ВЫБРАТЬ
	|					ТаблицаОРПИмеющихОплаты.Ссылка КАК Ссылка
	|				ИЗ
	|					ТаблицаОРПИмеющихОплаты КАК ТаблицаОРПИмеющихОплаты)
	|	И НЕ ЧекККМОплата.Ссылка.ОтчетОРозничныхПродажах = &ПустойДокументОРП
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЧекККМОплата.Ссылка.ОтчетОРозничныхПродажах.Дата,
	|	ЧекККМОплата.Ссылка.ОтчетОРозничныхПродажах.Ссылка";
	
	ЗапросОтчетОРозничныхПродаж.УстановитьПараметр("ТипОплаты", Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта);
	ЗапросОтчетОРозничныхПродаж.УстановитьПараметр("ПустойДокументОРП", Документы.ОтчетОРозничныхПродажах.ПустаяСсылка());
	
	Результат = ЗапросОтчетОРозничныхПродаж.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОтчетОРозничныхПродажах = Выборка.Ссылка;
		
		ЗапросПоОплате = Новый Запрос(
		"ВЫБРАТЬ
		|	ЧекККМОплата.Ссылка КАК Ссылка,
		|	ЧекККМОплата.НомерСтроки КАК НомерСтроки,
		|	ЧекККМОплата.ВидОплаты КАК ВидОплаты,
		|	ЧекККМОплата.ВидОплаты.ТипОплаты КАК ТипОплаты,
		|	ЧекККМОплата.ВидОплаты.БанкКредитор КАК БанкКредитор,
		|	ЧекККМОплата.ВидОплаты.ПроцентБанковскойКомиссии КАК ПроцентБанковскойКомиссии,
		|	ЧекККМОплата.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
		|	ЧекККМОплата.ПроцентКомиссии КАК ПроцентКомиссии,
		|	ЧекККМОплата.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
		|	ЧекККМОплата.Сумма КАК Сумма,
		|	ЧекККМОплата.СуммаКомиссии КАК СуммаКомиссии,
		|	ЧекККМОплата.СуммаБонусовВСкидках КАК СуммаБонусовВСкидках,
		|	ЧекККМОплата.КоличествоБонусов КАК КоличествоБонусов,
		|	ЧекККМОплата.КоличествоБонусовВСкидках КАК КоличествоБонусовВСкидках,
		|	ЧекККМОплата.Ссылка.ДисконтнаяКарта КАК ДисконтнаяКарта,
		|	ВЫБОР
		|		КОГДА ЧекККМОплата.Ссылка.ВидОперации = &ВидОперацииПродажа
		|			ТОГДА 1
		|		ИНАЧЕ -1
		|	КОНЕЦ КАК КоэффициентВидаОплаты
		|ПОМЕСТИТЬ ТаблицаОплат
		|ИЗ
		|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
		|ГДЕ
		|	НЕ ЧекККМОплата.ВидОплаты.ТипОплаты = &ТипОплаты
		|	И ЧекККМОплата.Ссылка.ОтчетОРозничныхПродажах = &ОтчетОРозничныхПродажах
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОплат.ВидОплаты КАК ВидОплаты,
		|	ТаблицаОплат.ТипОплаты КАК ТипОплаты,
		|	ТаблицаОплат.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
		|	ТаблицаОплат.ПроцентКомиссии КАК ПроцентКомиссии,
		|	ТаблицаОплат.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
		|	ТаблицаОплат.КоэффициентВидаОплаты * ТаблицаОплат.Сумма КАК Сумма,
		|	ТаблицаОплат.КоэффициентВидаОплаты * ТаблицаОплат.СуммаКомиссии КАК СуммаКомиссии,
		|	ТаблицаОплат.КоэффициентВидаОплаты * ТаблицаОплат.СуммаБонусовВСкидках КАК СуммаБонусовВСкидках,
		|	ТаблицаОплат.КоэффициентВидаОплаты * ТаблицаОплат.КоличествоБонусов КАК КоличествоБонусов,
		|	ТаблицаОплат.КоэффициентВидаОплаты * ТаблицаОплат.КоличествоБонусовВСкидках КАК КоличествоБонусовВСкидках,
		|	ТаблицаОплат.БанкКредитор КАК БанкКредитор,
		|	ТаблицаОплат.ПроцентБанковскойКомиссии КАК ПроцентБанковскойКомиссии,
		|	ТаблицаОплат.ДисконтнаяКарта КАК ДисконтнаяКарта,
		|	ВЫБОР
		|		КОГДА ТаблицаОплат.КоэффициентВидаОплаты * ТаблицаОплат.Сумма < 0
		|				ИЛИ ТаблицаОплат.КоэффициентВидаОплаты * ТаблицаОплат.СуммаБонусовВСкидках < 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоВозврат
		|ПОМЕСТИТЬ ПодготовительнаяТаблица
		|ИЗ
		|	ТаблицаОплат КАК ТаблицаОплат
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПодготовительнаяТаблица.ВидОплаты КАК ВидОплаты,
		|	ПодготовительнаяТаблица.ТипОплаты КАК ТипОплаты,
		|	ПодготовительнаяТаблица.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
		|	ПодготовительнаяТаблица.ПроцентКомиссии КАК ПроцентКомиссии,
		|	ПодготовительнаяТаблица.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
		|	СУММА(ПодготовительнаяТаблица.Сумма) КАК Сумма,
		|	СУММА(ПодготовительнаяТаблица.СуммаКомиссии) КАК СуммаКомиссии,
		|	СУММА(ПодготовительнаяТаблица.СуммаБонусовВСкидках) КАК СуммаБонусовВСкидках,
		|	СУММА(ПодготовительнаяТаблица.КоличествоБонусов) КАК КоличествоБонусов,
		|	СУММА(ПодготовительнаяТаблица.КоличествоБонусовВСкидках) КАК КоличествоБонусовВСкидках,
		|	ПодготовительнаяТаблица.БанкКредитор КАК БанкКредитор,
		|	ПодготовительнаяТаблица.ПроцентБанковскойКомиссии КАК ПроцентБанковскойКомиссии,
		|	ПодготовительнаяТаблица.ДисконтнаяКарта КАК ДисконтнаяКарта,
		|	ПодготовительнаяТаблица.ЭтоВозврат КАК ЭтоВозврат
		|ИЗ
		|	ПодготовительнаяТаблица КАК ПодготовительнаяТаблица
		|
		|СГРУППИРОВАТЬ ПО
		|	ПодготовительнаяТаблица.БанкКредитор,
		|	ПодготовительнаяТаблица.ТипОплаты,
		|	ПодготовительнаяТаблица.ЭквайринговыйТерминал,
		|	ПодготовительнаяТаблица.БонуснаяПрограммаЛояльности,
		|	ПодготовительнаяТаблица.ВидОплаты,
		|	ПодготовительнаяТаблица.ПроцентКомиссии,
		|	ПодготовительнаяТаблица.ПроцентБанковскойКомиссии,
		|	ПодготовительнаяТаблица.ДисконтнаяКарта,
		|	ПодготовительнаяТаблица.ЭтоВозврат
		|
		|ИМЕЮЩИЕ
		|	(СУММА(ПодготовительнаяТаблица.Сумма) <> 0
		|		ИЛИ СУММА(ПодготовительнаяТаблица.СуммаБонусовВСкидках) <> 0)");

		ЗапросПоОплате.УстановитьПараметр("ОтчетОРозничныхПродажах", ОтчетОРозничныхПродажах);
		ЗапросПоОплате.УстановитьПараметр("ВидОперацииПродажа"     , Перечисления.ВидыОперацийЧекККМ.Продажа);
		ЗапросПоОплате.УстановитьПараметр("ТипОплаты"              , Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта);
		
		РезультатПоОплате = ЗапросПоОплате.Выполнить();
		ТаблицаОплатПлатежныеКарты = РезультатПоОплате.Выгрузить();
		
		ОтчетОРозничныхПродажахОбъект = ОтчетОРозничныхПродажах.ПолучитьОбъект();
		
		Для Каждого СтрокаОплаты Из ТаблицаОплатПлатежныеКарты Цикл
			НоваяСтрока = ОтчетОРозничныхПродажахОбъект.ОплатаПлатежнымиКартами.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОплаты);
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОтчетОРозничныхПродажахОбъект, Истина);
		
		ЗапросОплатаДляДвижений = Новый Запрос;
		ЗапросОплатаДляДвижений.Текст = 
		"ВЫБРАТЬ
		|	ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.ВидОплаты КАК ВидОплаты,
		|	ВЫБОР
		|		КОГДА ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.Сумма > 0
		|			ТОГДА ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.Сумма
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаОперацийПродажи,
		|	ВЫБОР
		|		КОГДА ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.Сумма > 0
		|			ТОГДА 0
		|		ИНАЧЕ -ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.Сумма
		|	КОНЕЦ КАК СуммаОперацийВозврата,
		|	ВЫБОР
		|		КОГДА ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.СуммаКомиссии > 0
		|			ТОГДА ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.СуммаКомиссии
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НачисленнаяСуммаКомиссии,
		|	ВЫБОР
		|		КОГДА ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.СуммаКомиссии > 0
		|			ТОГДА 0
		|		ИНАЧЕ -ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.СуммаКомиссии
		|	КОНЕЦ КАК ОтмененнаяСуммаКомиссии,
		|	&Ссылка КАК Регистратор,
		|	&Магазин КАК Магазин,
		|	&Организация КАК Организация,
		|	&Период КАК Период,
		|	ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.НомерСтроки КАК НомерСтроки,
		|	ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах.ОплатаПлатежнымиКартами КАК ОтчетОРозничныхПродажахОплатаПлатежнымиКартами
		|ГДЕ
		|	ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.Ссылка = &Ссылка";
		
		ЗапросОплатаДляДвижений.УстановитьПараметр("Ссылка"     , ОтчетОРозничныхПродажах);
		ЗапросОплатаДляДвижений.УстановитьПараметр("Организация", Выборка.Организация);
		ЗапросОплатаДляДвижений.УстановитьПараметр("Магазин"    , Выборка.Магазин);
		ЗапросОплатаДляДвижений.УстановитьПараметр("Период"     , Выборка.Период);
		
		РезультатДвиженияПродажиПоПлатежнымКартам = ЗапросОплатаДляДвижений.Выполнить();
		
		ВыборкаДвиженияПродажиПоПлатежнымКартам = РезультатДвиженияПродажиПоПлатежнымКартам.Выбрать();
		
		ДвиженияДокументаПоРегистру("ПродажиПоПлатежнымКартам", ОтчетОРозничныхПродажах, ВыборкаДвиженияПродажиПоПлатежнымКартам);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Релиз_2_2_7

Процедура ПерезаписатьЗаказыНаПеремещение() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказНаПеремещение.Ссылка КАК Регистратор
	|ИЗ
	|	Документ.ЗаказНаПеремещение КАК ЗаказНаПеремещение
	|ГДЕ
	|	(НЕ ЗаказНаПеремещение.Проведен
	|			ИЛИ ЗаказНаПеремещение.ПометкаУдаления)";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыНакопления.ЗаказыТоваров.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьОборудованиеПроверкаЦенников(Параметры = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.Ссылка КАК ПодключаемоеОборудование,
	|	ПодключаемоеОборудование.УдалитьТипыWebServiceОборудования КАК ТипWebServiceОборудования,
	|	ПодключаемоеОборудование.ТипОфлайнОборудования КАК ТипОфлайнОборудования,
	|	ПодключаемоеОборудование.ДрайверОборудования КАК ДрайверОборудования
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ККМОфлайн)";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ТипWebServiceОборудования = Перечисления.УдалитьТипыWebServiceОборудования.ПроверкаЦенников Тогда
			
			ОборудованиеОбъект = Выборка.ПодключаемоеОборудование.ПолучитьОбъект();
			ОборудованиеОбъект.ТипОфлайнОборудования 				= Перечисления.ТипыОфлайнОборудования.ПрайсЧекер;
			ОборудованиеОбъект.ВидТранспортаОфлайнОбмена 			= Перечисления.ВидыТранспортаОфлайнОбмена.WS;
			ОборудованиеОбъект.ДрайверОборудования 					= Справочники.ДрайверыОборудования.Драйвер1СККМOffline;
			ОборудованиеОбъект.УдалитьТипыWebServiceОборудования 	= Перечисления.УдалитьТипыWebServiceОборудования.ПустаяСсылка();
			
			ОборудованиеОбъект.Записать();
			
		ИначеЕсли Выборка.ТипWebServiceОборудования = Перечисления.УдалитьТипыWebServiceОборудования.МобильнаяКасса Тогда
			
			ОборудованиеОбъект = Выборка.ПодключаемоеОборудование.ПолучитьОбъект();
			ОборудованиеОбъект.ТипОфлайнОборудования = Перечисления.ТипыОфлайнОборудования.ККМ;
			
			Если Выборка.ДрайверОборудования = Справочники.ДрайверыОборудования.Драйвер1СККМOffline Тогда
				ОборудованиеОбъект.ВидТранспортаОфлайнОбмена = Перечисления.ВидыТранспортаОфлайнОбмена.FILE;
			Иначе
				ОборудованиеОбъект.ВидТранспортаОфлайнОбмена = Перечисления.ВидыТранспортаОфлайнОбмена.WS;
			КонецЕсли;
			
			ОборудованиеОбъект.ДрайверОборудования = Справочники.ДрайверыОборудования.Драйвер1СККМOffline;
			ОборудованиеОбъект.УдалитьТипыWebServiceОборудования = Перечисления.УдалитьТипыWebServiceОборудования.ПустаяСсылка();
			
			ОборудованиеОбъект.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьДокументаРасходныйКассовыйОрдер(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	НЕ РасходныйКассовыйОрдер.ПометкаУдаления
	|	И РасходныйКассовыйОрдер.ХозяйственнаяОперация = &ХозяйственнаяОперация
	|	И РасходныйКассовыйОрдер.Проведен";
	
	Запрос.Параметры.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Документ = Выборка.Ссылка.ПолучитьОбъект();
		Если Документ.РасшифровкаПлатежа.Количество() = 0 Тогда
			Строка = Документ.РасшифровкаПлатежа.Добавить();
			Строка.ОперацияКассовойОтчетности = Справочники.ОперацииКассовойОтчетности.ПоступлениеОтПродажиТоваров;
			Строка.Сумма = Документ.СуммаДокумента;
			Для Каждого Строка Из Документ.ОписьСдаваемыхНаличныхДенег Цикл
				Если Строка.ПараметрКоличествоБанкнот = "руб_10_1" Тогда
					Строка.ПараметрКоличествоБанкнот = "руб1_10_1";
					Строка.ПараметрСуммаБанкнот = "СуммаРуб_10_1";
				КонецЕсли;
			КонецЦикла;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Документ, Истина, Ложь, РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерезаписатьЗаказыПоставщику(Параметры) Экспорт 
	
	МетаданныеОбъекта = Метаданные.Документы.ЗаказПоставщику;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПоставщику.Ссылка КАК Ссылка,
	|	ЗаказПоставщику.Магазин КАК Магазин
	|ПОМЕСТИТЬ ВТ_Документы
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Проведен
	|	И НЕ ЗаказПоставщику.ПометкаУдаления
	|	И НЕ ЗаказПоставщику.Закрыт
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Магазин
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Документы.Ссылка КАК Ссылка,
	|	Склады.Ссылка КАК Склад
	|ИЗ
	|	ВТ_Документы КАК ВТ_Документы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|		ПО ВТ_Документы.Магазин.СкладПоступления = Склады.Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
		
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("Документ.ЗаказПоставщику");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
		
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось заблокировать данные по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			                         УровеньЖурналаРегистрации.Предупреждение,
			                         МетаданныеОбъекта,
			                         Выборка.Ссылка,
			                         ТекстСообщения);
			
			Продолжить;
			
		КонецПопытки;
		
		ЗаказПоставщику = Выборка.Ссылка.ПолучитьОбъект();
		
		Если ЗаказПоставщику = Неопределено Тогда
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли;
		
		Попытка
		
			ЗаказПоставщику.Склад = Выборка.Склад;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ЗаказПоставщику, Истина, Ложь, РежимЗаписиДокумента.Запись);
			
			ЗафиксироватьТранзакцию();
		
		Исключение
			
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Документ% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			                         УровеньЖурналаРегистрации.Предупреждение,
			                         МетаданныеОбъекта,
			                         Выборка.Ссылка,
			                         ТекстСообщения);
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьСлужебныеПоляТелефоновФизическихЛиц(Параметры) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛицаКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	ФизическиеЛицаКонтактнаяИнформация.Представление КАК Представление,
	|	ФизическиеЛицаКонтактнаяИнформация.НомерТелефона КАК НомерТелефона,
	|	ФизическиеЛицаКонтактнаяИнформация.НомерТелефонаБезКодов КАК НомерТелефонаБезКодов
	|ИЗ
	|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	|ГДЕ
	|	ФизическиеЛицаКонтактнаяИнформация.Вид = &Вид
	|	И ФизическиеЛицаКонтактнаяИнформация.Представление <> &ПустаяСтрока
	|	И (ФизическиеЛицаКонтактнаяИнформация.НомерТелефона = &ПустаяСтрока
	|			ИЛИ ФизическиеЛицаКонтактнаяИнформация.НомерТелефонаБезКодов = &ПустаяСтрока)
	|ИТОГИ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонФизическогоЛица);
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	ВыборкаИтоги = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИтоги.Следующий() Цикл
		
		ФизЛицоОбъект = ВыборкаИтоги.Ссылка.ПолучитьОбъект();
		НужноЗаписывать = Ложь;
		ВыборкаТелефоны = ВыборкаИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаТелефоны.Следующий() Цикл
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонФизическогоЛица);
			СтруктураПоиска.Вставить("Представление", ВыборкаТелефоны.Представление);
			СтрокиТелефона = ФизЛицоОбъект.КонтактнаяИнформация.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаКонтактнойИнформации Из СтрокиТелефона Цикл
				Если ЗначениеЗаполнено(СтрокаКонтактнойИнформации.НомерТелефона)
					И ЗначениеЗаполнено(СтрокаКонтактнойИнформации.НомерТелефонаБезКодов) Тогда
					Продолжить;
				КонецЕсли;
				СтрокаЦифровыхСимволов = "0123456789";
				НомерТелефонаТолькоЦифры = "";
				ДлинаНомера = СтрДлина(ВыборкаТелефоны.Представление);
				Для Индекс = 1 По ДлинаНомера Цикл
					Символ = Сред(ВыборкаТелефоны.Представление, Индекс, 1);
					Если СтрНайти(СтрокаЦифровыхСимволов, Символ) > 0 Тогда
						НомерТелефонаТолькоЦифры = НомерТелефонаТолькоЦифры + Символ;
					КонецЕсли;
				КонецЦикла;
				СтрокаКонтактнойИнформации.НомерТелефона = НомерТелефонаТолькоЦифры;
				СтрокаКонтактнойИнформации.НомерТелефонаБезКодов = Сред(НомерТелефонаТолькоЦифры, 5);
				НужноЗаписывать = Истина;
			КонецЦикла;
		КонецЦикла;
		
		Если НужноЗаписывать Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ФизЛицоОбъект, Истина, Ложь);
		КонецЕсли;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьРазрешениеНаВводДробногоКоличества() Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	НЕ Номенклатура.ЭтоГруппа
		|	И Номенклатура.Весовой
		|	И Номенклатура.ТипНоменклатуры = &Товар";
	
	Запрос.УстановитьПараметр("Товар", Перечисления.ТипыНоменклатуры.Товар);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоменклатураОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НоменклатураОбъект.РазрешитьВводДробногоКоличества = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НоменклатураОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсправитьТипОборудованияПравилаОбменаСПодключаемымОборудованием(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПравилаОбменаСПодключаемымОборудованием.Ссылка КАК ПравилоОбмена
	|ИЗ
	|	Справочник.ПравилаОбменаСПодключаемымОборудованием КАК ПравилаОбменаСПодключаемымОборудованием
	|ГДЕ
	|	ПравилаОбменаСПодключаемымОборудованием.ТипПодключаемогоОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.УдалитьWebСервисОборудование)";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПравилоОбменаОбъект = Выборка.ПравилоОбмена.ПолучитьОбъект();
		ПравилоОбменаОбъект.ТипПодключаемогоОборудования = Перечисления.ТипыПодключаемогоОборудования.ККМОфлайн;
		
		ПравилоОбменаОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсправитьТипКассыККМОфлайнКассыККМ(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КассыККМ.Ссылка КАК КассаККМ
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	КассыККМ.ТипКассы = ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.УдалитьСервисОборудования)";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		КассаККМОбъект = Выборка.КассаККМ.ПолучитьОбъект();
		КассаККМОбъект.ТипКассы = Перечисления.ТипыКассККМ.ККМOffline;
		
		Если НЕ ЗначениеЗаполнено(КассаККМОбъект.РабочееМесто) Тогда
			
			Если ЗначениеЗаполнено(КассаККМОбъект.ПодключаемоеОборудование)
				И ЗначениеЗаполнено(КассаККМОбъект.ПодключаемоеОборудование.РабочееМесто) Тогда
				
				КассаККМОбъект.РабочееМесто = КассаККМОбъект.ПодключаемоеОборудование.РабочееМесто;
			Иначе
				КассаККМОбъект.РабочееМесто = ПараметрыСеанса.РабочееМестоКлиента;
			КонецЕсли;
			
		КонецЕсли;
		
		КассаККМОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКонстантуИспользоватьРасчетыСКлиентами() Экспорт
	
	ИспользоватьРасчетыСКлиентами = Константы.ИспользоватьРасчетыСКлиентами.Получить();
	Если НЕ ИспользоватьРасчетыСКлиентами Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	РасчетыСКлиентами.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами";
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Константы.ИспользоватьРасчетыСКлиентами.Установить(Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Релиз_2_2_8

Процедура ОбновлениеОтложенныхЧековККМ() Экспорт 
	
	МетаданныеОбъекта = Метаданные.Документы.ЧекККМ;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЧекККМАкцизныеМарки.Ссылка КАК Ссылка,
	|	ЧекККМАкцизныеМарки.КлючСвязи КАК КлючСвязи,
	|	ЧекККМАкцизныеМарки.КодАкцизнойМарки КАК КодАкцизнойМарки
	|ПОМЕСТИТЬ ТаблицаЧеков
	|ИЗ
	|	Документ.ЧекККМ.АкцизныеМарки КАК ЧекККМАкцизныеМарки
	|ГДЕ
	|	ЧекККМАкцизныеМарки.Ссылка.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Отложенный)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	КлючСвязи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЧеков.Ссылка КАК Ссылка,
	|	ТаблицаЧеков.КодАкцизнойМарки КАК КодАкцизнойМарки,
	|	ТаблицаЧеков.КлючСвязи КАК КлючСвязи,
	|	ЧекККМТовары.Номенклатура КАК Номенклатура,
	|	ЧекККМТовары.Характеристика КАК Характеристика
	|ИЗ
	|	ТаблицаЧеков КАК ТаблицаЧеков
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Товары КАК ЧекККМТовары
	|		ПО ТаблицаЧеков.Ссылка = ЧекККМТовары.Ссылка
	|			И ТаблицаЧеков.КлючСвязи = ЧекККМТовары.КлючСвязи
	|ИТОГИ ПО
	|	Ссылка";
	
	Результат = Запрос.Выполнить();
	ВыборкаЧек = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаЧек.Следующий() Цикл
		
		ЧекККМОбъект = ВыборкаЧек.Ссылка.ПолучитьОбъект();
		
		Если ЧекККМОбъект = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Выборка = ВыборкаЧек.Выбрать();
		Пока Выборка.Следующий() Цикл

			Если ЗначениеЗаполнено(Выборка.КодАкцизнойМарки) Тогда
				СтрокаАкцизныеМарки = ЧекККМОбъект.АкцизныеМарки.Найти(Выборка.КодАкцизнойМарки, "КодАкцизнойМарки");
				Попытка
					Если СтрокаАкцизныеМарки = Неопределено Тогда
						Продолжить;
					Иначе
						АкцизнаяМарка = ШтрихкодированиеЕГАИС.ПолучитьСгенерироватьАкцизнуюМарку(Выборка.КодАкцизнойМарки,
											Выборка.Номенклатура,
											Выборка.Характеристика,
											Истина);
						СтрокаАкцизныеМарки.АкцизнаяМарка = АкцизнаяМарка;						 
					КонецЕсли;
				Исключение
						
					ТекстСообщения = НСтр("ru = 'Не удалось сгенерировать акцизную марку: %Ключ% по причине: %Причина%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ключ%", Выборка.КодАкцизнойМарки);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
						МетаданныеОбъекта, ТекстСообщения);
					Продолжить;
				КонецПопытки;
			КонецЕсли;
			
		КонецЦикла;
		
		Попытка
		
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ЧекККМОбъект);
		
		Исключение
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Документ% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", ВыборкаЧек.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			                         УровеньЖурналаРегистрации.Предупреждение,
			                         МетаданныеОбъекта,
			                         ВыборкаЧек.Ссылка,
			                         ТекстСообщения);
			ВызватьИсключение;
			
		КонецПопытки;

	КонецЦикла;
		
КонецПроцедуры

Функция ПроверитьПолучитьОбъект(Ссылка,ВерсияДанных,Очередь) Экспорт
	
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Ссылка);
		Возврат Неопределено;
	КонецЕсли;
	Если Объект.ВерсияДанных <> ВерсияДанных Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат Объект;
	
КонецФункции

#Область Оценкапроизводительности

Функция СоздатьКлючевуюОперацию(КлючеваяОперация, ЦелевоеВремя = 1, ВыполненаСОшибкой = Ложь, Длительная = Ложь)
	
	ИмяКлючевойОперации          = КлючеваяОперация.Ключ;
	НаименованиеКлючевойОперации = КлючеваяОперация.Значение;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Справочник.КлючевыеОперации");
	ЭлементБлокировки.УстановитьЗначение("Имя", ИмяКлючевойОперации);
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	КлючевыеОперации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КлючевыеОперации КАК КлючевыеОперации
	|ГДЕ
	|	КлючевыеОперации.ИмяХеш = &ИмяХеш
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	ХешMD5 = Новый ХешированиеДанных(ХешФункция.MD5);
	ХешMD5.Добавить(ИмяКлючевойОперации);
	ИмяХеш = ХешMD5.ХешСумма;
	ИмяХеш = СтрЗаменить(Строка(ИмяХеш), " ", "");			   
	
	Запрос.УстановитьПараметр("ИмяХеш", ИмяХеш);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 			
		НовыйЭлемент = Справочники.КлючевыеОперации.СоздатьЭлемент();
		НовыйЭлемент.Имя               = ИмяКлючевойОперации;
		НовыйЭлемент.Наименование      = НаименованиеКлючевойОперации;
		НовыйЭлемент.ЦелевоеВремя      = ЦелевоеВремя;
		НовыйЭлемент.ВыполненаСОшибкой = ВыполненаСОшибкой;
		НовыйЭлемент.Длительная        = Длительная;
		НовыйЭлемент.Записать();
		КлючеваяОперацияСсылка = НовыйЭлемент.Ссылка;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		КлючеваяОперацияСсылка = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат КлючеваяОперацияСсылка;
	
КонецФункции

Функция ОтсутствуютПрофилиКлючевыхОпераций()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|   ПрофилиКлючевыхОпераций.Ссылка КАК Ссылка
	|ИЗ
	|   Справочник.ПрофилиКлючевыхОпераций КАК ПрофилиКлючевыхОпераций";
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Пустой();
	
КонецФункции 

Функция ПолучитьПредставлениеМетаданных(Выборка)
	
	Возврат Лев(Выборка.ПолноеПредставление, СтрДлина(Выборка.ПолноеПредставление) - (СтрДлина(Выборка.Имя)+1));
	
КонецФункции

Процедура ЗаполнитьСтруктуруЗамеров(ОбъектМетаданных, ТаблицаШаблон, СтруктураЗамеров)
	
	Для каждого ТекущийОбъектМетаданных Из Метаданные[ОбъектМетаданных]  Цикл
		СтрокаТаблицы = ТаблицаШаблон.Добавить();
		СтрокаТаблицы.Имя                 =  ТекущийОбъектМетаданных.Имя;
		СтрокаТаблицы.ПолноеПредставление =  ТекущийОбъектМетаданных.ПолноеИмя();
		СтрокаТаблицы.Синоним             =  ТекущийОбъектМетаданных.Синоним;
	КонецЦикла;
	
	СтруктураЗамеров.Вставить(ОбъектМетаданных, ТаблицаШаблон);
	
КонецПроцедуры

Процедура СоздатьПрофилиКлючевыхОпераций(ПрофилиКлючевыхОпераций)
	
	МассивКлючевыхОпераций = Новый Массив;
	
	Для каждого КлючеваяОперация из ПрофилиКлючевыхОпераций Цикл
		МассивКлючевыхОпераций.Добавить(КлючеваяОперация.Ключ);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	|    ПрофилиКлючевыхОпераций.Наименование КАК Наименование
	|ИЗ
	|    Справочник.ПрофилиКлючевыхОпераций КАК ПрофилиКлючевыхОпераций
	|ГДЕ
	|    ПрофилиКлючевыхОпераций.Наименование В(&МассивКлючевыхОпераций)";
	
	Запрос.УстановитьПараметр("МассивКлючевыхОпераций", МассивКлючевыхОпераций);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ПрофилиКлючевыхОпераций.Удалить(Выборка.Наименование); 
		КонецЦикла;
	КонецЕсли;   
	
	Если ПрофилиКлючевыхОпераций.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ПрофильКлючевойОперации из ПрофилиКлючевыхОпераций Цикл
		
		Имя = ПрофильКлючевойОперации.Ключ;
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ПрофилиКлючевыхОпераций");
		Блокировка.Заблокировать();
		
		ПрофильКлючевыхОпераций = Справочники.ПрофилиКлючевыхОпераций.СоздатьЭлемент();
		ПрофильКлючевыхОпераций.Наименование = Имя;
		
		Для каждого КлючеваяОперация из ПрофильКлючевойОперации.Значение Цикл
			
			НоваяСтрокаПрофиля = ПрофильКлючевыхОпераций.КлючевыеОперацииПрофиля.Добавить();
			НоваяСтрокаПрофиля.КлючеваяОперация = СоздатьКлючевуюОперацию(КлючеваяОперация,0.1, ,);
			НоваяСтрокаПрофиля.Приоритет        = 1;
			НоваяСтрокаПрофиля.ЦелевоеВремя     = 0.1;
			
		КонецЦикла;
		
		ПрофильКлючевыхОпераций.КлючевыеОперацииПрофиля.Сортировать("КлючеваяОперация");
		ПрофильКлючевыхОпераций.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьКлючевыеОперации() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка  
		
		КомандыРМК = Новый Массив;
		КомандыРМК.Добавить("НапечататьОтчетБезГашения");
		КомандыРМК.Добавить("ЗавершениеОплатыИСозданиеЧековРМК");
		КомандыРМК.Добавить("ПодготовкаОплатыРМК");
		КомандыРМК.Добавить("ВводПодарочныхСертификатов");
		КомандыРМК.Добавить("НазначитьАвтоматическиеСкидкиКлиент");
		КомандыРМК.Добавить("ВыборКассыККМ");
		КомандыРМК.Добавить("ПереходНаФормуПоиска");
		КомандыРМК.Добавить("ВыборДокументРасчета");
		КомандыРМК.Добавить("ОтменитьСкидки");
		КомандыРМК.Добавить("ОтменитьОплатуБонусами");
		КомандыРМК.Добавить("ПросмотрНакоплений");
		КомандыРМК.Добавить("ПродажаПоЗаказу");
		КомандыРМК.Добавить("УправляемыеСкидки");
		КомандыРМК.Добавить("ВвестиИнформационнуюКарту");
		КомандыРМК.Добавить("ЗаменитьПрава");
		КомандыРМК.Добавить("ВвестиВнесениеДенег");
		КомандыРМК.Добавить("БыстрыеТоварыОткрытие");
		КомандыРМК.Добавить("ПродолжитьЧек");
		КомандыРМК.Добавить("ОтложитьЧек");
		КомандыРМК.Добавить("УстановкиКартыЗавершение");
		КомандыРМК.Добавить("АннулироватьЧек");
		КомандыРМК.Добавить("ВыемкаДенегЗавершение");
		КомандыРМК.Добавить("ВыборЧекаПриВозврате");
		
		ПрофилиКлючевыхОпераций = Новый Соответствие;
		
		ПредставлениеПрофиля   = "Обработки (команды)";
		КлючевыеОперации        = Новый Соответствие;
		
		Для каждого ТекущаяКоманда Из КомандыРМК Цикл  
			
			КлючевыеОперации.Вставить("Обработка.РМКУправляемыйРежим.Форма.Форма.Команда."+ ТекущаяКоманда,
			"Обработка ""РМК(Управляемый режим)"""+"/Команда ("+ТекущаяКоманда+")");
			
		КонецЦикла;
		
		КлючевыеОперации.Вставить("Обработка.РМКУправляемыйРежим.Форма.Форма.ВнешнееСобытие",
		"Обработка ""РМК(Управляемый режим)"""+"/(Внешнее событие)");
		
		КлючевыеОперации.Вставить("Обработка.ЗакрытиеКассовойСмены.Форма.Форма.Команда.ЗакрытьСмену",
		"Обработка ""Закрытие кассовой смены"" /Команда (Закрыть смену)");
		
		КлючевыеОперации.Вставить("Обработка.АнализПродажФормированиеЗаказов.Форма.Форма.Команда.Рассчитать",
		"Обработка ""Анализ продаж формирование заказов"" /Команда (Рассчитать)");
		
		КлючевыеОперации.Вставить("Обработка.АнализПродажФормированиеЗаказов.Форма.Форма.Команда.СоздатьДокументыВозвратПоставщику",
		"Обработка ""Анализ продаж формирование заказов"" /Команда (СоздатьДокументыВозвратПоставщику)"); 
		
		КлючевыеОперации.Вставить("Обработка.АнализПродажФормированиеЗаказов.Форма.Форма.Команда.СоздатьДокументыЗаказНаПеремещение",
		"Обработка ""Анализ продаж формирование заказов"" /Команда (СоздатьДокументыЗаказНаПеремещение)");
		
		КлючевыеОперации.Вставить("Обработка.АнализПродажФормированиеЗаказов.Форма.Форма.Команда.СоздатьДокументыЗаказНаПеремещениеВозврат",
		"Обработка ""Анализ продаж формирование заказов"" /Команда (СоздатьДокументыЗаказНаПеремещениеВозврат)");
		
		КлючевыеОперации.Вставить("Обработка.АнализПродажФормированиеЗаказов.Форма.Форма.Команда.СоздатьДокументыЗаказПоставщику",
		"Обработка ""Анализ продаж формирование заказов"" /Команда (СоздатьДокументыЗаказПоставщику)");
		
		КлючевыеОперации.Вставить("Обработка.АнализПродажФормированиеЗаказов.Форма.Форма.Команда.ЗаполнитьЗаказыЗакрытие",
		"Обработка ""Анализ продаж формирование заказов"" /Команда (ЗаполнитьЗаказыЗакрытие)" );
		
		КлючевыеОперации.Вставить("Обработка.АнализПродажФормированиеЗаказов.Форма.Форма.Команда.ВыполнитьЗакрытиеЗаказов",
		"Обработка ""Анализ продаж формирование заказов"" /Команда (ВыполнитьЗакрытиеЗаказов)" );
		
		КлючевыеОперации.Вставить("Обработка.НастройкаРаспределенияТоваровПоСкладамИОрганизациям.Форма.Форма.Команда.ЗаполнитьПоПоступлению",
		"Обработка ""Настройка распределения товаров по складам и организациям"" /Команда (ЗаполнитьПоПоступлению)" );
		
		КлючевыеОперации.Вставить("Обработка.НастройкаРаспределенияТоваровПоСкладамИОрганизациям.Форма.Форма.Команда.ПрименитьИзменения",
		"Обработка ""Настройка распределения товаров по складам и организациям"" /Команда (ПрименитьИзменения)" );
		
		ПрофилиКлючевыхОпераций.Вставить(ПредставлениеПрофиля, КлючевыеОперации); 
		
		МассивИсключаемыхДокументовПроведение = Новый Массив; 
		
		МассивИсключаемыхДокументовПроведение.Добавить("УдалитьПроизвольныйЭД");         
		МассивИсключаемыхДокументовПроведение.Добавить("ЧекЕГАИСВозврат");   
		МассивИсключаемыхДокументовПроведение.Добавить("ЧекЕГАИС");
		МассивИсключаемыхДокументовПроведение.Добавить("УдалитьВскрытиеТарыЕГАИС");  
		МассивИсключаемыхДокументовПроведение.Добавить("УведомлениеОСписанииКиЗГИСМ");
		МассивИсключаемыхДокументовПроведение.Добавить("УведомлениеОПоступленииМаркированныхТоваровГИСМ");
		МассивИсключаемыхДокументовПроведение.Добавить("УведомлениеОВвозеМаркированныхТоваровИзЕАЭСГИСМ");
		МассивИсключаемыхДокументовПроведение.Добавить("УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ");
		МассивИсключаемыхДокументовПроведение.Добавить("УведомлениеОбИмпортеМаркированныхТоваровГИСМ");
		МассивИсключаемыхДокументовПроведение.Добавить("ТТНИсходящаяЕГАИС");
		МассивИсключаемыхДокументовПроведение.Добавить("ТТНВходящаяЕГАИС");
		МассивИсключаемыхДокументовПроведение.Добавить("ПеремаркировкаТоваровГИСМ");
		МассивИсключаемыхДокументовПроведение.Добавить("СправкиСПАРКРиски");
		МассивИсключаемыхДокументовПроведение.Добавить("ПередачаВРегистр2ЕГАИС");
		МассивИсключаемыхДокументовПроведение.Добавить("ОтчетЕГАИС");
		МассивИсключаемыхДокументовПроведение.Добавить("ОстаткиЕГАИС");
		МассивИсключаемыхДокументовПроведение.Добавить("МаркировкаТоваровГИСМ");
		МассивИсключаемыхДокументовПроведение.Добавить("ЗаявкаНаВыпускКиЗГИСМ");
		МассивИсключаемыхДокументовПроведение.Добавить("ЗапросАкцизныхМарокЕГАИС");
		МассивИсключаемыхДокументовПроведение.Добавить("ВозвратИзРегистра2ЕГАИС");
		МассивИсключаемыхДокументовПроведение.Добавить("АктСписанияЕГАИС");
		МассивИсключаемыхДокументовПроведение.Добавить("АктПостановкиНаБалансЕГАИС");
		
		МассивИсключаемыхДокументовСоздание = Новый Массив;
		
		МассивИсключаемыхДокументовСоздание.Добавить("УдалитьПроизвольныйЭД");
		МассивИсключаемыхДокументовСоздание.Добавить("ЧекЕГАИСВозврат");   
		МассивИсключаемыхДокументовСоздание.Добавить("ЧекЕГАИС");
		МассивИсключаемыхДокументовСоздание.Добавить("УдалитьПроизвольныйЭД");         
		МассивИсключаемыхДокументовСоздание.Добавить("ЧекЕГАИСВозврат");   
		МассивИсключаемыхДокументовСоздание.Добавить("ЧекЕГАИС");
		МассивИсключаемыхДокументовСоздание.Добавить("УдалитьВскрытиеТарыЕГАИС");  
		МассивИсключаемыхДокументовСоздание.Добавить("УведомлениеОСписанииКиЗГИСМ");
		МассивИсключаемыхДокументовСоздание.Добавить("УведомлениеОПоступленииМаркированныхТоваровГИСМ");
		МассивИсключаемыхДокументовСоздание.Добавить("УведомлениеОВвозеМаркированныхТоваровИзЕАЭСГИСМ");
		МассивИсключаемыхДокументовСоздание.Добавить("УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ");
		МассивИсключаемыхДокументовСоздание.Добавить("УведомлениеОбИмпортеМаркированныхТоваровГИСМ");
		МассивИсключаемыхДокументовСоздание.Добавить("ТТНИсходящаяЕГАИС");
		МассивИсключаемыхДокументовСоздание.Добавить("ТТНВходящаяЕГАИС");
		МассивИсключаемыхДокументовСоздание.Добавить("ПеремаркировкаТоваровГИСМ");
		МассивИсключаемыхДокументовСоздание.Добавить("СправкиСПАРКРиски");
		МассивИсключаемыхДокументовСоздание.Добавить("ПередачаВРегистр2ЕГАИС");
		МассивИсключаемыхДокументовСоздание.Добавить("ОтчетЕГАИС");
		МассивИсключаемыхДокументовСоздание.Добавить("ОстаткиЕГАИС");
		МассивИсключаемыхДокументовСоздание.Добавить("МаркировкаТоваровГИСМ");
		МассивИсключаемыхДокументовСоздание.Добавить("ЗаявкаНаВыпускКиЗГИСМ");
		МассивИсключаемыхДокументовСоздание.Добавить("ЗапросАкцизныхМарокЕГАИС");
		МассивИсключаемыхДокументовСоздание.Добавить("ВозвратИзРегистра2ЕГАИС");
		МассивИсключаемыхДокументовСоздание.Добавить("АктСписанияЕГАИС");
		МассивИсключаемыхДокументовСоздание.Добавить("АктПостановкиНаБалансЕГАИС"); 
		МассивИсключаемыхДокументовСоздание.Добавить("АктОРасхожденияхПриПриемкеТоваров");         
		МассивИсключаемыхДокументовСоздание.Добавить("ВводНачальныхОстатковУзла");              
		МассивИсключаемыхДокументовСоздание.Добавить("ВнесениеДенежныхСредствВКассуККМ");         
		МассивИсключаемыхДокументовСоздание.Добавить("ВыемкаДенежныхСредствИзКассыККМ");
		МассивИсключаемыхДокументовСоздание.Добавить("КассоваяСмена");             
		МассивИсключаемыхДокументовСоздание.Добавить("ОрдерНаОтражениеРезультатовПересчетовТоваров");  
		МассивИсключаемыхДокументовСоздание.Добавить("ПересчетТоваров");  
		МассивИсключаемыхДокументовСоздание.Добавить("ПриходныйОрдерНаТовары");  
		МассивИсключаемыхДокументовСоздание.Добавить("РасходныйОрдерНаТовары");  
		МассивИсключаемыхДокументовСоздание.Добавить("СверткаИзУправляющейСистемы"); 
		МассивИсключаемыхДокументовСоздание.Добавить("СчетФактураВыданный");  
		МассивИсключаемыхДокументовСоздание.Добавить("СчетФактураПолученный");
		МассивИсключаемыхДокументовСоздание.Добавить("ТабельУчетаРабочегоВремени");  
		МассивИсключаемыхДокументовСоздание.Добавить("УдалитьКассоваяСмена");
		МассивИсключаемыхДокументовСоздание.Добавить("ЭлектронныйДокументВходящий"); 
		МассивИсключаемыхДокументовСоздание.Добавить("ЭлектронныйДокументИсходящий");        
		
		МассивСправочниковСоздание = Новый Массив; 
		
		МассивСправочниковСоздание.Добавить("АналитикаХозяйственныхОпераций");
		МассивСправочниковСоздание.Добавить("БанковскиеСчета");  
		МассивСправочниковСоздание.Добавить("УдалитьБанковскиеСчетаОрганизаций");      
		МассивСправочниковСоздание.Добавить("БонусныеПрограммыЛояльности");    
		МассивСправочниковСоздание.Добавить("ВидыДисконтныхКарт");             
		МассивСправочниковСоздание.Добавить("ВидыНоменклатуры");              
		МассивСправочниковСоздание.Добавить("ВидыЦен");                       
		МассивСправочниковСоздание.Добавить("ВнешниеКомпоненты");       
		МассивСправочниковСоздание.Добавить("ВнешниеПользователи");
		МассивСправочниковСоздание.Добавить("ГруппыДоступа");         
		МассивСправочниковСоздание.Добавить("ГруппыПользователей");     
		МассивСправочниковСоздание.Добавить("ДоговорыКонтрагентов");   
		МассивСправочниковСоздание.Добавить("ДрайверыОборудования");          
		МассивСправочниковСоздание.Добавить("ИнтервалыРаботыМагазинов");       
		МассивСправочниковСоздание.Добавить("ИнформационныеКарты");           
		МассивСправочниковСоздание.Добавить("Кассы");
		МассивСправочниковСоздание.Добавить("КассыККМ");         
		МассивСправочниковСоздание.Добавить("Контрагенты");
		МассивСправочниковСоздание.Добавить("ЛицензииПоставщиковАлкогольнойПродукции");  
		МассивСправочниковСоздание.Добавить("Магазины");
		МассивСправочниковСоздание.Добавить("НаборыДополнительныхРеквизитовИСведений");   
		МассивСправочниковСоздание.Добавить("НаборыУпаковок");                             
		МассивСправочниковСоздание.Добавить("НастройкиЗагрузкиДанныхСчетчиковПодсчетаПосетителей");
		МассивСправочниковСоздание.Добавить("НастройкиРаспределенияВыручкиПоСекциямФР");     
		МассивСправочниковСоздание.Добавить("НастройкиРМК");
		МассивСправочниковСоздание.Добавить("Номенклатура");
		МассивСправочниковСоздание.Добавить("Организации");
		МассивСправочниковСоздание.Добавить("ОчередьЗаданийОбластейДанных");
		МассивСправочниковСоздание.Добавить("ПалитраБыстрыхТоваров");
		МассивСправочниковСоздание.Добавить("ПапкиФайлов");
		МассивСправочниковСоздание.Добавить("ПодключаемоеОборудование");
		МассивСправочниковСоздание.Добавить("ПолитикиУчетаСерий");
		МассивСправочниковСоздание.Добавить("Пользователи");
		МассивСправочниковСоздание.Добавить("ПравилаНачисленияБонусныхБаллов");
		МассивСправочниковСоздание.Добавить("ПравилаОбменаСПодключаемымОборудованием");
		МассивСправочниковСоздание.Добавить("ПравилаОтбораТоваров");
		МассивСправочниковСоздание.Добавить("ПравилаРасчетаПремий");
		МассивСправочниковСоздание.Добавить("ПравилаЦенообразования");
		МассивСправочниковСоздание.Добавить("ПричиныОтменыЗаказовПокупателей");
		МассивСправочниковСоздание.Добавить("ПрофилиГруппДоступа");
		МассивСправочниковСоздание.Добавить("ПрофилиКлючевыхОпераций");
		МассивСправочниковСоздание.Добавить("РаботаВыполняемаяСотрудниками");
		МассивСправочниковСоздание.Добавить("РабочиеМеста");
		МассивСправочниковСоздание.Добавить("РассылкиОтчетов");
		МассивСправочниковСоздание.Добавить("РолиИсполнителей");
		МассивСправочниковСоздание.Добавить("Сайты");
		МассивСправочниковСоздание.Добавить("СегментыНоменклатуры");
		МассивСправочниковСоздание.Добавить("СерииНоменклатуры");
		МассивСправочниковСоздание.Добавить("СерийныеНомера");
		МассивСправочниковСоздание.Добавить("СкидкиНаценки");
		МассивСправочниковСоздание.Добавить("Склады");
		МассивСправочниковСоздание.Добавить("СтатьиДвиженияДенежныхСредств");
		МассивСправочниковСоздание.Добавить("УпаковкиНоменклатуры");
		МассивСправочниковСоздание.Добавить("УсловияНачисленияПремийПоЛичнымПродажам");
		МассивСправочниковСоздание.Добавить("УсловияПредоставленияСкидокНаценок");
		МассивСправочниковСоздание.Добавить("ФизическиеЛица");
		МассивСправочниковСоздание.Добавить("ФорматыМагазинов");
		МассивСправочниковСоздание.Добавить("ХранилищеШаблонов");
		МассивСправочниковСоздание.Добавить("ЦеновыеГруппы");
		МассивСправочниковСоздание.Добавить("ШаблоныМагнитныхКарт");
		МассивСправочниковСоздание.Добавить("ШаблоныСообщенийПрисоединенныеФайлы");
		МассивСправочниковСоздание.Добавить("ШтрихкодыУпаковокТоваров");
		МассивСправочниковСоздание.Добавить("ЭквайринговыеТерминалы");
		
		Типы = Новый Массив;
		Типы.Добавить(Тип("Строка"));
		
		КлассификаторСтроки = Новый КвалификаторыСтроки(150);
		
		
		МетаданныеДляЗамеров = Новый Массив;
		МетаданныеДляЗамеров.Добавить("ОбщиеФормы");
		МетаданныеДляЗамеров.Добавить("Справочники");
		МетаданныеДляЗамеров.Добавить("Документы");
		МетаданныеДляЗамеров.Добавить("Обработки");
		МетаданныеДляЗамеров.Добавить("РегистрыСведений");
		
		СтруктураЗамеров = Новый Структура;
		
		Для каждого ТекущийОбъект Из МетаданныеДляЗамеров Цикл
			
			ТаблицаШаблон = Новый ТаблицаЗначений;
			ТаблицаШаблон.Колонки.Добавить("Имя", Новый ОписаниеТипов(Типы,,,,КлассификаторСтроки));
			ТаблицаШаблон.Колонки.Добавить("ПолноеПредставление", Новый ОписаниеТипов(Типы));
			ТаблицаШаблон.Колонки.Добавить("Синоним", Новый ОписаниеТипов(Типы));
			
			ЗаполнитьСтруктуруЗамеров(ТекущийОбъект, ТаблицаШаблон, СтруктураЗамеров);
			
		КонецЦикла;
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос = Новый Запрос;  
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("ТаблицаДокументов",             СтруктураЗамеров.Документы); 
		Запрос.УстановитьПараметр("ТаблицаСправочников",           СтруктураЗамеров.Справочники); 
		Запрос.УстановитьПараметр("ИсключитьДокументыПроведение",  МассивИсключаемыхДокументовПроведение);
		Запрос.УстановитьПараметр("ИсключитьДокументыСоздание",    МассивИсключаемыхДокументовСоздание);
		Запрос.УстановитьПараметр("МассивСправочниковСоздание",    МассивСправочниковСоздание);
		
		Запрос.Текст =  "ВЫБРАТЬ
		|   РегистрируемыеДокументы.Имя КАК Имя,
		|   РегистрируемыеДокументы.Синоним КАК Синоним,
		|   РегистрируемыеДокументы.ПолноеПредставление КАК ПолноеПредставление
		|ПОМЕСТИТЬ ВсеДокументы
		|ИЗ
		|   &ТаблицаДокументов КАК РегистрируемыеДокументы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|   ВсеДокументы.Имя КАК Имя,
		|   ВсеДокументы.Синоним КАК Синоним,
		|   ВсеДокументы.ПолноеПредставление КАК ПолноеПредставление
		|ПОМЕСТИТЬ ДокументыПроведение
		|ИЗ
		|   ВсеДокументы КАК ВсеДокументы
		|ГДЕ
		|   НЕ ВсеДокументы.Имя В (&ИсключитьДокументыПроведение)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|   втДокументы.Имя КАК Имя,
		|   втДокументы.Синоним КАК Синоним,
		|   втДокументы.ПолноеПредставление КАК ПолноеПредставление
		|ПОМЕСТИТЬ ДокументыСоздание
		|ИЗ
		|   ВсеДокументы КАК втДокументы
		|ГДЕ
		|   НЕ втДокументы.Имя В (&ИсключитьДокументыСоздание)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|   РегистрируемыеСправочники.Имя КАК Имя,
		|   РегистрируемыеСправочники.Синоним КАК Синоним,
		|   РегистрируемыеСправочники.ПолноеПредставление КАК ПолноеПредставление
		|ПОМЕСТИТЬ ВсеСправочники
		|ИЗ
		|   &ТаблицаСправочников КАК РегистрируемыеСправочники
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|   втСправочники.Имя КАК Имя,
		|   втСправочники.Синоним КАК Синоним,
		|   втСправочники.ПолноеПредставление КАК ПолноеПредставление
		|ПОМЕСТИТЬ СправочникиЗапись
		|ИЗ
		|   ВсеСправочники КАК втСправочники
		|ГДЕ
		|   втСправочники.Имя В(&МассивСправочниковСоздание)";
		
		Результат = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
		
		Если ТипЗнч(Результат) = Тип("Массив") Тогда
			
			ПредставлениеПрофиля =  "Документы (Запись/Проведение/Команды)"; 
			КлючевыеОперации = Новый Соответствие;
			
			Выборка = Результат[1].Выбрать();          
			Пока Выборка.Следующий() Цикл
				
				КлючевыеОперации.Вставить(Выборка.ПолноеПредставление+".ФормаДокумента.Запись",
				"Документ """+Выборка.Синоним+""" (Проведение/Запись)");
				
			КонецЦикла;
			
			КлючевыеОперации.Вставить("Документ.ЧекККМ.Форма.ФормаДокумента.Команда.ПробитьЧек", 
			"Документ Чек ККМ /Команда(ПробитьЧек)");
			КлючевыеОперации.Вставить("Документ.РегистрацияБезналичнойОплаты.Форма.ФормаДокумента.Команда.ПробитьЧек", 
			"Документ Регистрация безналичной оплаты /Команда(ПробитьЧек)"); 
			КлючевыеОперации.Вставить("Документ.РеализацияТоваров.Форма.ФормаДокумента.Команда.ПробитьЧек", 
			"Документ Реализация товаров /Команда(ПробитьЧек)");
			КлючевыеОперации.Вставить("Документ.РасходныйКассовыйОрдер.Форма.ФормаДокумента.Команда.ПробитьЧек",
			"Документ Расходный кассовый ордер /Команда(ПробитьЧек)"); 
			КлючевыеОперации.Вставить("Документ.ПриходныйКассовыйОрдер.Форма.ФормаДокумента.Команда.ПробитьЧек",
			"Документ Приходный кассовый ордер /Команда(ПробитьЧек)");    
			КлючевыеОперации.Вставить("Документ.ОплатаОтПокупателяПлатежнойКартой.Форма.ФормаДокумента.Команда.ПробитьЧек",
			"Документ Оплата от покупателя платежной картой /Команда(ПробитьЧек)");
			КлючевыеОперации.Вставить("Документ.ВозвратТоваровОтПокупателя.Форма.ФормаДокумента.Команда.ПробитьЧек",
			"Документ Возврат товаров от покупателя /Команда(ПробитьЧек)");
			
			ПрофилиКлючевыхОпераций.Вставить(ПредставлениеПрофиля, КлючевыеОперации);
			
			ПредставлениеПрофиля =  "Документы (Создание)";                
			КлючевыеОперации      = Новый Соответствие;  
			
			Выборка = Результат[2].Выбрать();          
			Пока Выборка.Следующий() Цикл
				
				КлючевыеОперации.Вставить(Выборка.ПолноеПредставление+".Форма.ФормаДокумента.СозданиеНового",
				"Документ """+Выборка.Синоним+""" (создание)");
				
			КонецЦикла;
			
			КлючевыеОперации.Вставить("ЧекККМПроведение", 
			"Документ Чек ККМ /(Проведение)");
			
			КлючевыеОперации.Вставить("РеализацияТоваровПроведение", 
			"Документ Реализация товаров /(Проведение)");
			
			КлючевыеОперации.Вставить("ОтчетОРозничныхПродажахПроведение", 
			"Документ Отчет о розничных продажах /(Проведение)");
			
			КлючевыеОперации.Вставить("УстановкаСебестоимостиПроведение", 
			"Документ Установка себестоимости /(Проведение)");
			
			КлючевыеОперации.Вставить("ПеремещениеТоваровПроведение", 
			"Документ Перемещение товаров /(Проведение)");
			
			КлючевыеОперации.Вставить("УстановкаЦенНоменклатурыПроведение", 
			"Документ Установка цен номенклатуры /(Проведение)");
			
			ПрофилиКлючевыхОпераций.Вставить(ПредставлениеПрофиля, КлючевыеОперации);
			
			ПредставлениеПрофиля = "Справочники (Запись)";    
			КлючевыеОперации      = Новый Соответствие;
			
			Выборка = Результат[3].Выбрать();          
			Пока Выборка.Следующий() Цикл
				
				КлючевыеОперации.Вставить(Выборка.ПолноеПредставление+".Запись",
				"Справочник """+Выборка.Синоним+"""(запись)");
			КонецЦикла;            
			
			ПрофилиКлючевыхОпераций.Вставить(ПредставлениеПрофиля, КлючевыеОперации);
			
			ПредставлениеПрофиля = "Справочники (Создание)";    
			КлючевыеОперации      = Новый Соответствие;
			
			Выборка = Результат[4].Выбрать();          
			Пока Выборка.Следующий() Цикл
				
				
				КлючевыеОперации.Вставить(Выборка.ПолноеПредставление+".Форма.ФормаЭлемента.СозданиеНового",
				"Справочник """+Выборка.Синоним+"""(создание)");
				
			КонецЦикла;            
			
			
			ПрофилиКлючевыхОпераций.Вставить(ПредставлениеПрофиля, КлючевыеОперации);
			
		КонецЕсли;  
		
		ИсключитьСправочники = Новый Массив;
		ИсключитьСправочники.Добавить("ВидыМехаГИСМ");
		ИсключитьСправочники.Добавить("ГИСМПрисоединенныеФайлы");       
		ИсключитьСправочники.Добавить("ЕГАИСПрисоединенныеФайлы");
		ИсключитьСправочники.Добавить("КлассификаторАлкогольнойПродукцииЕГАИС");
		ИсключитьСправочники.Добавить("КлассификаторОрганизацийЕГАИС");
		ИсключитьСправочники.Добавить("Справки1ЕГАИС");
		ИсключитьСправочники.Добавить("Справки2ЕГАИС");
		ИсключитьСправочники.Добавить("СправкиСПАРКРискиПрисоединенныеФайлы");
		ИсключитьСправочники.Добавить("ТипыСобытийСПАРКРиски");
		ИсключитьСправочники.Добавить("УдалитьВидыОбъектовЕГАИС");
		ИсключитьСправочники.Добавить("Заметки");
		ИсключитьСправочники.Добавить("ЛентыНовостей");
		
		ИсключитьОбщиеФормы = Новый Массив;
		ИсключитьОбщиеФормы.Добавить("ЗаписьПароляСертификатаГИСМ");
		ИсключитьОбщиеФормы.Добавить("НастройкаОбменаГИСМ");       
		ИсключитьОбщиеФормы.Добавить("ПодборИзКлассификатораВидовПродукцииЕГАИС");
		ИсключитьОбщиеФормы.Добавить("РезультатВыполненияОбменаЕГАИС");
		ИсключитьОбщиеФормы.Добавить("ФормаВводаАкцизнойМарки");
		ИсключитьОбщиеФормы.Добавить("ФормаВыбораТипаАкцизнойМаркиЕГАИС");
		ИсключитьОбщиеФормы.Добавить("ФормированиеИсходящегоЗапросаЕГАИС");
		ИсключитьОбщиеФормы.Добавить("ДополнительныеОтчетыИОбработки");
		ИсключитьОбщиеФормы.Добавить("ФормаОтчета");
		ИсключитьОбщиеФормы.Добавить("ВопросОбУстановкеРасширенияРаботыСКриптографией");
		ИсключитьОбщиеФормы.Добавить("СохранениеВместеСЭлектроннойПодписью");
		ИсключитьОбщиеФормы.Добавить("ФормаНастроекОтчета");
		ИсключитьОбщиеФормы.Добавить("ЭлектроннаяПодпись");
		
		ИсключитьОбработки = Новый Массив;
		ИсключитьОбработки.Добавить("Панель1СМаркировка");
		ИсключитьОбработки.Добавить("ПанельАдминистрирования1СМаркировка");       
		ИсключитьОбработки.Добавить("ПанельОбменСЕГАИС");
		ИсключитьОбработки.Добавить("ПодтверждениеПоступившихКиЗГИСМ");
		ИсключитьОбработки.Добавить("ПроверкаИПодборАлкогольнойПродукцииЕГАИС");
		ИсключитьОбработки.Добавить("РаботаСАкцизнымиМаркамиЕГАИС");
		ИсключитьОбработки.Добавить("СопоставлениеКлассификаторовЕГАИС");
		ИсключитьОбработки.Добавить("СопоставлениеНоменклатурыЕГАИС");
		ИсключитьОбработки.Добавить("СправкаСПАРКРиски");
		ИсключитьОбработки.Добавить("ТекущиеДелаПоЭДО");
		ИсключитьОбработки.Добавить("Подключение1СТакском");
		ИсключитьОбработки.Добавить("ПанельАдминистрированияЭДО");
		ИсключитьОбработки.Добавить("ПанельАдминистрированияБСП");
		ИсключитьОбработки.Добавить("КартаМаршрутаБизнесПроцесса");
		ИсключитьОбработки.Добавить("СопоставлениеОрганизацийЕГАИСРТ");
		
		ИсключитьРегистрыСведений = Новый Массив;
		ИсключитьРегистрыСведений.Добавить("АкцизныеМаркиЕГАИС");
		ИсключитьРегистрыСведений.Добавить("ВерсииОбъектов"); 
		ИсключитьРегистрыСведений.Добавить("ИндексыСПАРКРиски");
		ИсключитьРегистрыСведений.Добавить("ПроверкаИПодборАлкогольнойПродукцииЕГАИС");
		ИсключитьРегистрыСведений.Добавить("РаботаСАкцизнымиМаркамиЕГАИС");
		ИсключитьРегистрыСведений.Добавить("КонтрагентыНаМониторингеСПАРКРиски");        
		ИсключитьРегистрыСведений.Добавить("НастройкиОбменаЕГАИС");
		ИсключитьРегистрыСведений.Добавить("ОрганизацииДляОбменаГИСМ");
		ИсключитьРегистрыСведений.Добавить("ОчередьПередачиДанныхГИСМ");
		ИсключитьРегистрыСведений.Добавить("ОчередьПередачиДанныхЕГАИС");
		ИсключитьРегистрыСведений.Добавить("ОчередьПолученияДанныхГИСМ");
		ИсключитьРегистрыСведений.Добавить("ОчередьПолученияКвитанцийОФиксацииГИСМ");
		ИсключитьРегистрыСведений.Добавить("СвойстваКонтрагентовСПАРКРиски");
		ИсключитьРегистрыСведений.Добавить("СобытияМониторингаСПАРКРиски");
		ИсключитьРегистрыСведений.Добавить("СтатусыДокументовЕГАИС");
		ИсключитьРегистрыСведений.Добавить("СтатусыЗаявокНаВыпускКиЗГИСМ");
		ИсключитьРегистрыСведений.Добавить("СтатусыИнформированияГИСМ");
		ИсключитьРегистрыСведений.Добавить("СтатусыОформленияДокументовЕГАИС");
		ИсключитьРегистрыСведений.Добавить("УдалитьПротоколОбменаЕГАИС");
		ИсключитьРегистрыСведений.Добавить("УдалитьСоответствиеНоменклатурыЕГАИС");
		ИсключитьРегистрыСведений.Добавить("УдалитьСоответствиеОрганизацийЕГАИС");
		ИсключитьРегистрыСведений.Добавить("УдалитьФорматыОбменаЕГАИС");
		ИсключитьРегистрыСведений.Добавить("НапоминанияПользователя");
		ИсключитьРегистрыСведений.Добавить("ОстаткиАлкогольнойПродукцииЕГАИС");
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("ИсключитьСправочники",         ИсключитьСправочники);
		Запрос.УстановитьПараметр("ТаблицаОбщиеФормы",            СтруктураЗамеров.ОбщиеФормы);
		Запрос.УстановитьПараметр("ТаблицаОбработки",             СтруктураЗамеров.Обработки);
		Запрос.УстановитьПараметр("ТаблицаРегистрыСведений",      СтруктураЗамеров.РегистрыСведений);
		Запрос.УстановитьПараметр("ИсключитьОбщиеФормы",          ИсключитьОбщиеФормы);
		Запрос.УстановитьПараметр("ИсключитьРегистрыСведений",    ИсключитьРегистрыСведений);
		Запрос.УстановитьПараметр("ИсключитьОбработки",           ИсключитьОбработки);
		
		Запрос.Текст =  "ВЫБРАТЬ
		|   ДокументыПроведение.Имя КАК Имя,
		|   ДокументыПроведение.Синоним КАК Синоним,
		|   ДокументыПроведение.ПолноеПредставление КАК ПолноеПредставление,
		|   ""Документы"" КАК ОбъектМетаданных,
		|   ""Документ"" КАК ПредставлениеМетаданных
		|ПОМЕСТИТЬ ФормыДокументов
		|ИЗ
		|   ДокументыПроведение КАК ДокументыПроведение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|   РегистрируемыеСправочники.Имя КАК Имя,
		|   РегистрируемыеСправочники.Синоним КАК Синоним,
		|   РегистрируемыеСправочники.ПолноеПредставление КАК ПолноеПредставление,
		|   ""Справочники"" КАК ОбъектМетаданных,
		|   ""Справочник"" КАК ПредставлениеМетаданных
		|ПОМЕСТИТЬ ФормыСправочников
		|ИЗ
		|   ВсеСправочники КАК РегистрируемыеСправочники
		|ГДЕ
		|   НЕ РегистрируемыеСправочники.Имя В (&ИсключитьСправочники)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|   ОбщиеФормы.Имя КАК Имя,
		|   ОбщиеФормы.Синоним КАК Синоним,
		|   ОбщиеФормы.ПолноеПредставление КАК ПолноеПредставление,
		|   ""ОбщиеФормы"" КАК ОбъектМетаданных,
		|   ""Общая форма"" КАК ПредставлениеМетаданных
		|ПОМЕСТИТЬ ВсеОбщиеФормы
		|ИЗ
		|   &ТаблицаОбщиеФормы КАК ОбщиеФормы
		|ГДЕ
		|   НЕ ОбщиеФормы.Имя В (&ИсключитьОбщиеФормы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|   Обработки.Имя КАК Имя,
		|   Обработки.Синоним КАК Синоним,
		|   Обработки.ПолноеПредставление КАК ПолноеПредставление,
		|   ""Обработки"" КАК ОбъектМетаданных,
		|   ""Обработка"" КАК ПредставлениеМетаданных
		|ПОМЕСТИТЬ Обработки
		|ИЗ
		|   &ТаблицаОбработки КАК Обработки
		|ГДЕ
		|   НЕ Обработки.Имя В (&ИсключитьОбработки)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|   РегистрыСведений.Имя КАК Имя,
		|   РегистрыСведений.Синоним КАК Синоним,
		|   РегистрыСведений.ПолноеПредставление КАК ПолноеПредставление,
		|   ""РегистрыСведений"" КАК ОбъектМетаданных,
		|   ""Регистр сведений"" КАК ПредставлениеМетаданных
		|ПОМЕСТИТЬ РегистрыСведений
		|ИЗ
		|   &ТаблицаРегистрыСведений КАК РегистрыСведений
		|ГДЕ
		|   НЕ РегистрыСведений.Имя В (&ИсключитьРегистрыСведений)";
		
		
		Результаты = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
		
		
		ПредставлениеПрофиля = "Интерфейсы"; 
		КлючевыеОперации      = Новый Соответствие;
		
		Для каждого Результат Из Результаты Цикл
			Выборка = Результат.Выбрать();          
			Пока Выборка.Следующий() Цикл                   
				ОбъектМетаданных = Выборка.ОбъектМетаданных;
				Если ОбъектМетаданных = "ОбщиеФормы" Тогда
					
					ПредставлениеМетаданных =  ПолучитьПредставлениеМетаданных(Выборка);
					
					КлючевыеОперации.Вставить(ПредставлениеМетаданных +"."+Выборка.Имя+".Открытие",
					Выборка.ПредставлениеМетаданных +" """+Выборка.Синоним+""" "+Выборка.Синоним+"/(открытие)");
					
				Иначе
					Для каждого ТекущаяФорма Из Метаданные[ОбъектМетаданных][Выборка.Имя].Формы Цикл
						
						КлючевыеОперации.Вставить(Выборка.ПолноеПредставление+".Форма."+ТекущаяФорма.Имя+".Открытие",
						Выборка.ПредставлениеМетаданных+" """+Выборка.Синоним+""" "+ТекущаяФорма.Синоним+"/(открытие)");
						
					КонецЦикла;
				КонецЕсли;                              
			КонецЦикла;            
		КонецЦикла; 
		
		
		ПрофилиКлючевыхОпераций.Вставить(ПредставлениеПрофиля, КлючевыеОперации);
		СоздатьПрофилиКлючевыхОпераций(ПрофилиКлючевыхОпераций);
		
		ОценкаПроизводительности.СоздатьКлючевуюОперацию("ОбщееВремяЗапускаПриложения");
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура УстановкаПараметровОценкиПроизводительностиПоУмолчанию() Экспорт
	
	МассивКонстант = Новый Массив;
	МассивКонстант.Добавить(Метаданные.Константы.ПериодХраненияЗамеров);
	МассивКонстант.Добавить(Метаданные.Константы.ВыполнятьЗамерыПроизводительности);
	
	НаборКонстант = Константы.СоздатьНабор(МассивКонстант);
	НаборКонстант.Прочитать();
	НаборКонстант.ВыполнятьЗамерыПроизводительности = Истина;
	НаборКонстант.ПериодХраненияЗамеров             = 14;
	НаборКонстант.Записать();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Релиз_2_2_9

Процедура ЗаполнитьДатуПоследнейЗагрузкиЭкземпляраПодключаемогоОборудованияЭвотор(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.Ссылка КАК Ссылка,
	|	ОбменСПодключаемымОборудованием.ДатаЗагрузки КАК ДатаЗагрузки
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланОбмена.ОбменСПодключаемымОборудованием КАК ОбменСПодключаемымОборудованием
	|		ПО ПодключаемоеОборудование.УзелИнформационнойБазы = ОбменСПодключаемымОборудованием.Ссылка
	|ГДЕ
	|	ПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ККМОфлайн)
	|	И ПодключаемоеОборудование.ДрайверОборудования = ЗНАЧЕНИЕ(Справочник.ДрайверыОборудования.Драйвер1СЭвоторККМOffline)";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	УстановитьПривилегированныйРежим(Истина);
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.ДатаЗагрузкиОтчетовКассЭвотор.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.КассаЭвотор.Значение = Выборка.Ссылка;
		НаборЗаписей.Отбор.КассаЭвотор.Использование = Истина;
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 И ЗначениеЗаполнено(Выборка.ДатаЗагрузки) Тогда
			
			Запись             = НаборЗаписей.Добавить();
			Запись.КассаЭвотор = Выборка.Ссылка;
			Запись.ДатаПоследнейЗакрытойКассовойСмены = Выборка.ДатаЗагрузки;
			
		КонецЕсли;
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыЗагрузкиЭкземпляраПодключаемогоОборудованияЭвотор(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ККМОфлайн)
	|	И ПодключаемоеОборудование.ДрайверОборудования = ЗНАЧЕНИЕ(Справочник.ДрайверыОборудования.Драйвер1СЭвоторККМOffline)";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДанныеУстройства = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(Выборка.Ссылка);
		
		Если ДанныеУстройства.Параметры.Свойство("ДатаНачала") И ДанныеУстройства.Параметры.Свойство("ДатаОкончания") Тогда
			Продолжить;
		Иначе
			
			НовыеЗначениеПараметров = Новый Структура;
			НовыеЗначениеПараметров.Вставить("ЭтоПерваяЗагрузка", Истина);
			НовыеЗначениеПараметров.Вставить("ПериодИзмененВручную", Ложь);
			
			Если ДанныеУстройства.Параметры.Свойство("Токен") Тогда
				НовыеЗначениеПараметров.Вставить("Токен", ДанныеУстройства.Параметры.Токен);
			КонецЕсли;
			
			Если ДанныеУстройства.Параметры.Свойство("Магазин") Тогда
				НовыеЗначениеПараметров.Вставить("Магазин", ДанныеУстройства.Параметры.Магазин);
			КонецЕсли;
			
			Если ДанныеУстройства.Параметры.Свойство("МагазинЗначение") Тогда
				НовыеЗначениеПараметров.Вставить("МагазинЗначение", ДанныеУстройства.Параметры.МагазинЗначение);
			КонецЕсли;
			
			Если ДанныеУстройства.Параметры.Свойство("Терминал") Тогда
				НовыеЗначениеПараметров.Вставить("Терминал", ДанныеУстройства.Параметры.Терминал);
			КонецЕсли;
			
			Если ДанныеУстройства.Параметры.Свойство("ТерминалЗначение") Тогда
				НовыеЗначениеПараметров.Вставить("ТерминалЗначение", ДанныеУстройства.Параметры.ТерминалЗначение);
			КонецЕсли;
			
			НовыеЗначениеПараметров.Вставить("ДатаНачала", Неопределено);
			НовыеЗначениеПараметров.Вставить("ДатаОкончания", Неопределено);
				
			МенеджерОборудованияВызовСервера.СохранитьПараметрыУстройства(Выборка.Ссылка, НовыеЗначениеПараметров);
		
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область Релиз_2_2_10

Процедура УдалитьОшибочныеЗаписиРСОтборыПоЛентамНовостейПользовательские(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОтборыПоЛентамНовостейПользовательские.Пользователь КАК Пользователь,
	|	ОтборыПоЛентамНовостейПользовательские.УстановленоПрограммно КАК УстановленоПрограммно
	|ИЗ
	|	РегистрСведений.ОтборыПоЛентамНовостейПользовательские КАК ОтборыПоЛентамНовостейПользовательские
	|ГДЕ
	|	ОтборыПоЛентамНовостейПользовательские.УстановленоПрограммно = ИСТИНА
	|	И ОтборыПоЛентамНовостейПользовательские.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|";
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ОтборыПоЛентамНовостейПользовательские.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор["Пользователь"].Установить(Выборка.Пользователь);
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
	КонецЦикла;

КОнецПроцедуры

Процедура ЗаполнитьИменаДополнительныхРеквизитовИСведений() Экспорт
	
	РаботаСПравиламиИменования.ЗаполнитьИменаДополнительныхРеквизитовИСведений();
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитЧекККМПродажа() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЧекККМ.Ссылка КАК Ссылка,
	|	ЧекККМ.ДокументРасчета КАК ДокументРасчета,
	|	ЧекККМ.ЧекККМПродажа КАК ЧекККМПродажа
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.ВидОперации = &ВидОперации
	|	И ЧекККМ.ДокументРасчета <> НЕОПРЕДЕЛЕНО
	|	И ЧекККМ.ЧекККМПродажа = &ЧекККМПродажаПустой
	|	И ЧекККМ.Проведен";
	
	Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыОперацийЧекККМ.Возврат);
	Запрос.УстановитьПараметр("ЧекККМПродажаПустой", Документы.ЧекККМ.ПустаяСсылка());
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ЧекККМПродажа = Выборка.ДокументРасчета;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Релиз_2_2_11

Процедура ЗаполнитьСистемыНалогообложенияУСН() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СистемыНалогообложенияОрганизаций.Период КАК Период,
	|	СистемыНалогообложенияОрганизаций.Организация КАК Организация,
	|	СистемыНалогообложенияОрганизаций.СистемаНалогообложения КАК СистемаНалогообложения,
	|	СистемыНалогообложенияОрганизаций.ОбъектНалогообложения КАК ОбъектНалогообложения,
	|	ИСТИНА КАК НеЯвляетсяПлательщикомНДС
	|ИЗ
	|	РегистрСведений.УдалитьСистемыНалогообложенияОрганизаций КАК СистемыНалогообложенияОрганизаций
	|ГДЕ
	|	СистемыНалогообложенияОрганизаций.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.УдалитьСистемыНалогообложения.Упрощенная)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ШаблонЗаголовкаОшибки 	= НСтр("ru = 'Не удалось добавить запись в регистр сведений ""Системы налогообложения организаций"" для организации %1 на дату %2.'");
	НаборЗаписей 			= РегистрыСведений.УдалитьСистемыНалогообложенияОрганизаций.СоздатьНаборЗаписей();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
		НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		
		ЗаписьРегистра = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьРегистра, Выборка);
		
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
			
		Попытка
			НаборЗаписей.Записать(Истина);
		Исключение
			ЗаголовокОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовкаОшибки, 
																					  Выборка.Организация, 
																					  Выборка.Период);
			
			ТекстОшибки = ЗаголовокОшибки + Символы.ПС + ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Релиз_2_2_12

Процедура ЗаполнитьТелефонПользователя() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПользователиКонтактнаяИнформация.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
	|ГДЕ
	|	ПользователиКонтактнаяИнформация.Вид = &Вид";
	
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонПользователя1);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонПользователя1);
		МассивСтрок = СправочникОбъект.КонтактнаяИнформация.НайтиСтроки(СтруктураПоиска);
		
		Для каждого СтрокаКонтактнаяИнформация Из МассивСтрок Цикл
			
			СтрокаКонтактнаяИнформация.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПользователя;
			
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
		
	КонецЦикла;
	
	СправочникОбъект = Справочники.ВидыКонтактнойИнформации.ТелефонПользователя1.ПолучитьОбъект();
	СправочникОбъект.Используется = Ложь;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
	
КонецПроцедуры

Процедура ПересчитатьСуммуНаличныхВОРП(Параметры) Экспорт
	
	МетаданныеОбъекта = Метаданные.Документы.ОтчетОРозничныхПродажах;
	
	// Проверка на необходимость обновления
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтчетОРозничныхПродажахОплатаНаличнымиАгентскихПлатежей.Ссылка КАК Ссылка,
	|	ОтчетОРозничныхПродажахОплатаНаличнымиАгентскихПлатежей.Ссылка.СуммаОплатыНаличных КАК СуммаОплатыНаличных
	|ПОМЕСТИТЬ ТаблицаОРП
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.ОплатаНаличнымиАгентскихПлатежей КАК ОтчетОРозничныхПродажахОплатаНаличнымиАгентскихПлатежей
	|ГДЕ
	|	ОтчетОРозничныхПродажахОплатаНаличнымиАгентскихПлатежей.Ссылка.СуммаОплатыНаличных > 0
	|	И ОтчетОРозничныхПродажахОплатаНаличнымиАгентскихПлатежей.Ссылка.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМ.Ссылка КАК Ссылка,
	|	ЧекККМ.СуммаДокумента КАК СуммаДокумента
	|ПОМЕСТИТЬ ТаблицаЧеков
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.ОтчетОРозничныхПродажах В
	|			(ВЫБРАТЬ
	|				ТаблицаОРП.Ссылка КАК ССылка
	|			ИЗ
	|				ТаблицаОРП КАК ТаблицаОРП)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМОплата.Ссылка КАК Ссылка,
	|	ЧекККМОплата.Сумма КАК Сумма,
	|	ЧекККМОплата.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ЧекККМОплата.ВидОплаты КАК ВидОплаты,
	|	ТаблицаЧеков.Ссылка.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|ПОМЕСТИТЬ ТаблицаОплатЧеков
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаЧеков КАК ТаблицаЧеков
	|		ПО ЧекККМОплата.Ссылка = ТаблицаЧеков.Ссылка
	|ГДЕ
	|	ЧекККМОплата.ВидОплаты = &Наличные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОплатЧеков.Ссылка КАК Ссылка,
	|	ТаблицаОплатЧеков.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах,
	|	СУММА(ТаблицаОплатЧеков.Сумма) КАК СуммаПолученная
	|ПОМЕСТИТЬ ТаблицаОплатСгруппированная
	|ИЗ
	|	ТаблицаОплатЧеков КАК ТаблицаОплатЧеков
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОплатЧеков.Ссылка,
	|	ТаблицаОплатЧеков.ОтчетОРозничныхПродажах
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОплатСгруппированная.Ссылка КАК Ссылка,
	|	ТаблицаОплатСгруппированная.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах,
	|	ВЫБОР
	|		КОГДА ТаблицаОплатСгруппированная.СуммаПолученная - ТаблицаЧеков.СуммаДокумента > 0
	|			ТОГДА ТаблицаОплатСгруппированная.СуммаПолученная - ТаблицаЧеков.СуммаДокумента
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сдача
	|ПОМЕСТИТЬ ТаблицаОплатСдача
	|ИЗ
	|	ТаблицаОплатСгруппированная КАК ТаблицаОплатСгруппированная
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаЧеков КАК ТаблицаЧеков
	|		ПО ТаблицаОплатСгруппированная.Ссылка = ТаблицаЧеков.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМОплата.Ссылка КАК Ссылка,
	|	ЧекККМОплата.Сумма КАК Сумма
	|ПОМЕСТИТЬ ТаблицаОплатНаличных
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|ГДЕ
	|	ЧекККМОплата.Ссылка В
	|			(ВЫБРАТЬ
	|				ТаблицаОплатСдача.Ссылка КАК Ссылка
	|			ИЗ
	|				ТаблицаОплатСдача КАК ТаблицаОплатСдача)
	|	И ЧекККМОплата.ВидОплаты = &Наличные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОплатНаличных.Ссылка КАК Ссылка,
	|	СУММА(ТаблицаОплатНаличных.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ТаблицаОплатНаличныхСгруппированная
	|ИЗ
	|	ТаблицаОплатНаличных КАК ТаблицаОплатНаличных
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОплатНаличных.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОплатНаличныхСгруппированная.Ссылка КАК Ссылка,
	|	ТаблицаОплатСдача.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах,
	|	ВЫБОР
	|		КОГДА ТаблицаОплатНаличныхСгруппированная.Сумма - ТаблицаОплатСдача.Сдача > 0
	|			ТОГДА ТаблицаОплатНаличныхСгруппированная.Сумма - ТаблицаОплатСдача.Сдача
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаНаличныхКУчету
	|ПОМЕСТИТЬ ТаблицаСуммыПоЧекам
	|ИЗ
	|	ТаблицаОплатНаличныхСгруппированная КАК ТаблицаОплатНаличныхСгруппированная
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОплатСдача КАК ТаблицаОплатСдача
	|		ПО ТаблицаОплатНаличныхСгруппированная.Ссылка = ТаблицаОплатСдача.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСуммыПоЧекам.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах,
	|	СУММА(ТаблицаСуммыПоЧекам.СуммаНаличныхКУчету) КАК СуммаНаличныхКУчету
	|ПОМЕСТИТЬ ТаблицаОРПКУчету
	|ИЗ
	|	ТаблицаСуммыПоЧекам КАК ТаблицаСуммыПоЧекам
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСуммыПоЧекам.ОтчетОРозничныхПродажах
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетОРозничныхПродажахОплатаНаличнымиАгентскихПлатежей.Ссылка КАК Ссылка,
	|	СУММА(ОтчетОРозничныхПродажахОплатаНаличнымиАгентскихПлатежей.Сумма) КАК СуммаУчтеннаяАгентская
	|ПОМЕСТИТЬ ТаблицаСуммАгентскихУчтенных
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.ОплатаНаличнымиАгентскихПлатежей КАК ОтчетОРозничныхПродажахОплатаНаличнымиАгентскихПлатежей
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетОРозничныхПродажахОплатаНаличнымиАгентскихПлатежей.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСуммАгентскихУчтенных.Ссылка КАК ОтчетОРозничныхПродажах,
	|	ТаблицаОРП.СуммаОплатыНаличных + ТаблицаСуммАгентскихУчтенных.СуммаУчтеннаяАгентская КАК УчтеннаяСумма
	|ПОМЕСТИТЬ ТаблицаСуммУчтенных
	|ИЗ
	|	ТаблицаОРП КАК ТаблицаОРП
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСуммАгентскихУчтенных КАК ТаблицаСуммАгентскихУчтенных
	|		ПО ТаблицаОРП.Ссылка = ТаблицаСуммАгентскихУчтенных.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОРПКУчету.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах,
	|	ТаблицаОРПКУчету.СуммаНаличныхКУчету КАК СуммаНаличныхКУчету,
	|	ТаблицаСуммУчтенных.УчтеннаяСумма КАК УчтеннаяСумма,
	|	ВЫБОР
	|		КОГДА ТаблицаОРПКУчету.СуммаНаличныхКУчету = ТаблицаСуммУчтенных.УчтеннаяСумма
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьКИсправлению,
	|	ТаблицаСуммУчтенных.УчтеннаяСумма - ТаблицаОРПКУчету.СуммаНаличныхКУчету КАК СуммаРазночтения
	|ИЗ
	|	ТаблицаОРПКУчету КАК ТаблицаОРПКУчету
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСуммУчтенных КАК ТаблицаСуммУчтенных
	|		ПО ТаблицаОРПКУчету.ОтчетОРозничныхПродажах = ТаблицаСуммУчтенных.ОтчетОРозничныхПродажах
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ТаблицаОРПКУчету.СуммаНаличныхКУчету = ТаблицаСуммУчтенных.УчтеннаяСумма
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("Наличные", Справочники.ВидыОплатЧекаККМ.Наличные);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		ЗапросДвижения = Новый Запрос;
		ЗапросДвижения.Текст = 
		"ВЫБРАТЬ
		|	ДенежныеСредстваККМ.Период КАК Период,
		|	ДенежныеСредстваККМ.Регистратор КАК Регистратор,
		|	ДенежныеСредстваККМ.НомерСтроки КАК НомерСтроки,
		|	ДенежныеСредстваККМ.Активность КАК Активность,
		|	ДенежныеСредстваККМ.ВидДвижения КАК ВидДвижения,
		|	ДенежныеСредстваККМ.КассаККМ КАК КассаККМ,
		|	ДенежныеСредстваККМ.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ВЫБОР
		|		КОГДА ДенежныеСредстваККМ.ДоговорКонтрагента = &ПустойДоговор
		|			ТОГДА ДенежныеСредстваККМ.Сумма - &СуммаРазночтения
		|		ИНАЧЕ ДенежныеСредстваККМ.Сумма
		|	КОНЕЦ КАК Сумма
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваККМ КАК ДенежныеСредстваККМ
		|ГДЕ
		|	ДенежныеСредстваККМ.Регистратор = &Регистратор
		|	И ВЫБОР
		|			КОГДА ДенежныеСредстваККМ.ДоговорКонтрагента = &ПустойДоговор
		|				ТОГДА ДенежныеСредстваККМ.Сумма - &СуммаРазночтения
		|			ИНАЧЕ ДенежныеСредстваККМ.Сумма
		|		КОНЕЦ <> 0";
		
		ЗапросДвижения.Параметры.Вставить("ПустойДоговор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		ЗапросДвижения.Параметры.Вставить("Регистратор", Выборка.ОтчетОРозничныхПродажах);
		ЗапросДвижения.Параметры.Вставить("СуммаРазночтения", Выборка.СуммаРазночтения);
		
		РезультатДвижений = ЗапросДвижения.Выполнить();
		ВыборкаДвижений = РезультатДвижений.Выбрать();
		
		ЗапросВыемка = Новый Запрос;
		ЗапросВыемка.Текст = 
		"ВЫБРАТЬ
		|	ВыемкаДенежныхСредствИзКассыККМ.Ссылка КАК Ссылка,
		|	ВыемкаДенежныхСредствИзКассыККМ.СуммаДокумента КАК СуммаДокумента,
		|	ВыемкаДенежныхСредствИзКассыККМ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах,
		|	ВыемкаДенежныхСредствИзКассыККМ.ДоговорКонтрагента КАК ДоговорКонтрагента
		|ИЗ
		|	Документ.ВыемкаДенежныхСредствИзКассыККМ КАК ВыемкаДенежныхСредствИзКассыККМ
		|ГДЕ
		|	ВыемкаДенежныхСредствИзКассыККМ.ОтчетОРозничныхПродажах = &ОтчетОРозничныхПродажах
		|	И ВыемкаДенежныхСредствИзКассыККМ.ДоговорКонтрагента = &ПустойДоговор";
		
		ЗапросВыемка.УстановитьПараметр("ОтчетОРозничныхПродажах", Выборка.ОтчетОРозничныхПродажах);
		ЗапросВыемка.Параметры.Вставить("ПустойДоговор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		
		РезультатВыемка = ЗапросВыемка.Выполнить();
		ВыборкаВыемка   = РезультатВыемка.Выбрать();
		
		Если ВыборкаВыемка.Следующий() Тогда
			
			ВыемкаСсылка = ВыборкаВыемка.Ссылка;
			
		КонецЕсли;
		
		ЗапросВыемкаДвижения = Новый Запрос;
		ЗапросВыемкаДвижения.Текст = 
		"ВЫБРАТЬ
		|	ДенежныеСредстваККМ.Период КАК Период,
		|	ДенежныеСредстваККМ.Регистратор КАК Регистратор,
		|	ДенежныеСредстваККМ.НомерСтроки КАК НомерСтроки,
		|	ДенежныеСредстваККМ.Активность КАК Активность,
		|	ДенежныеСредстваККМ.ВидДвижения КАК ВидДвижения,
		|	ДенежныеСредстваККМ.КассаККМ КАК КассаККМ,
		|	ДенежныеСредстваККМ.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ВЫБОР
		|		КОГДА ДенежныеСредстваККМ.ДоговорКонтрагента = &ПустойДоговор
		|			ТОГДА ДенежныеСредстваККМ.Сумма - &СуммаРазночтения
		|		ИНАЧЕ ДенежныеСредстваККМ.Сумма
		|	КОНЕЦ КАК Сумма
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваККМ КАК ДенежныеСредстваККМ
		|ГДЕ
		|	ДенежныеСредстваККМ.Регистратор = &Регистратор
		|	И ВЫБОР
		|			КОГДА ДенежныеСредстваККМ.ДоговорКонтрагента = &ПустойДоговор
		|				ТОГДА ДенежныеСредстваККМ.Сумма - &СуммаРазночтения
		|			ИНАЧЕ ДенежныеСредстваККМ.Сумма
		|		КОНЕЦ <> 0";
		
		ЗапросВыемкаДвижения.Параметры.Вставить("ПустойДоговор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		ЗапросВыемкаДвижения.Параметры.Вставить("Регистратор", ВыемкаСсылка);
		ЗапросВыемкаДвижения.Параметры.Вставить("СуммаРазночтения", Выборка.СуммаРазночтения);
		
		РезультатВыемкаДвижения = ЗапросВыемкаДвижения.Выполнить();
		ВыборкаВыемкаДвижения   = РезультатВыемкаДвижения.Выбрать();
		
		ЗапросДСКПоступлению = Новый Запрос;
		ЗапросДСКПоступлению.Текст = 
		"ВЫБРАТЬ
		|	ДенежныеСредстваКПоступлениюНаличные.Период КАК Период,
		|	ДенежныеСредстваКПоступлениюНаличные.Регистратор КАК Регистратор,
		|	ДенежныеСредстваКПоступлениюНаличные.НомерСтроки КАК НомерСтроки,
		|	ДенежныеСредстваКПоступлениюНаличные.Активность КАК Активность,
		|	ДенежныеСредстваКПоступлениюНаличные.ВидДвижения КАК ВидДвижения,
		|	ДенежныеСредстваКПоступлениюНаличные.Организация КАК Организация,
		|	ДенежныеСредстваКПоступлениюНаличные.Касса КАК Касса,
		|	ДенежныеСредстваКПоступлениюНаличные.ДокументПередачи КАК ДокументПередачи,
		|	ДенежныеСредстваКПоступлениюНаличные.Сумма - &СуммаРазночтения КАК Сумма,
		|	ДенежныеСредстваКПоступлениюНаличные.КассаОтправитель КАК КассаОтправитель
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваКПоступлениюНаличные КАК ДенежныеСредстваКПоступлениюНаличные
		|ГДЕ
		|	ДенежныеСредстваКПоступлениюНаличные.Регистратор = &Регистратор
		|	И ДенежныеСредстваКПоступлениюНаличные.Сумма - &СуммаРазночтения <> 0";
		
		ЗапросДСКПоступлению.Параметры.Вставить("Регистратор", ВыемкаСсылка);
		ЗапросДСКПоступлению.Параметры.Вставить("СуммаРазночтения", Выборка.СуммаРазночтения);
		
		РезультатДСКПоступлению = ЗапросДСКПоступлению.Выполнить();
		ВыборкаДСКПоступлению   = РезультатДСКПоступлению.Выбрать();
		
		Попытка
		
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("Документ.ОтчетОРозничныхПродажах");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.ОтчетОРозничныхПродажах);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ДенежныеСредстваККМ");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Если НЕ ВыемкаСсылка = Неопределено Тогда
				ЭлементБлокировки = Блокировка.Добавить("Документ.ВыемкаДенежныхСредствИзКассыККМ");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыемкаСсылка);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				
				ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ДенежныеСредстваКПоступлениюНаличные");
				ЭлементБлокировки.УстановитьЗначение("ДокументПередачи", ВыемкаСсылка);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			КонецЕсли;
			
			Блокировка.Заблокировать();
		
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось заблокировать данные по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			                         УровеньЖурналаРегистрации.Предупреждение,
			                         МетаданныеОбъекта,
			                         Выборка.ОтчетОРозничныхПродажах,
			                         ТекстСообщения);
			
			Продолжить;
			
		КонецПопытки;
		
		ОРП = Выборка.ОтчетОРозничныхПродажах.ПолучитьОбъект();
		
		Если ОРП = Неопределено Тогда
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли;
		
		
		Попытка
			// Документ "Отчет розничных продаж"
			ОРП.СуммаОплатыНаличных = ОРП.СуммаОплатыНаличных - Выборка.СуммаРазночтения;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОРП);
			
			// Регистр ДенежныеСредстваККМ
			ДвиженияДокументаПоРегистру("ДенежныеСредстваККМ", Выборка.ОтчетОРозничныхПродажах, ВыборкаДвижений);
			
			Если НЕ ВыемкаСсылка = Неопределено Тогда
				// Документ "Выемка денежных средств из кассы ККМ"
				ВыемкаДенежныхСредствИзКассыККМ = ВыемкаСсылка.ПолучитьОбъект();
				ВыемкаДенежныхСредствИзКассыККМ.СуммаДокумента = ВыемкаДенежныхСредствИзКассыККМ.СуммаДокумента - Выборка.СуммаРазночтения;
				Если ВыемкаДенежныхСредствИзКассыККМ.СуммаДокумента = 0 Тогда
					ВыемкаДенежныхСредствИзКассыККМ.Проведен = Ложь;
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВыемкаДенежныхСредствИзКассыККМ);
					ВыемкаДенежныхСредствИзКассыККМ.ПометкаУдаления = Истина;
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВыемкаДенежныхСредствИзКассыККМ);
				Иначе
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВыемкаДенежныхСредствИзКассыККМ);
				КонецЕсли;
			
			// Движения по выемке:
			
				// 1. Регистр ДенежныеСредстваККМ
				ДвиженияДокументаПоРегистру("ДенежныеСредстваККМ", ВыемкаСсылка, ВыборкаВыемкаДвижения);
				
				// 2. Регистр ДенежныеСредстваКПоступлениюНаличные
				ДвиженияДокументаПоРегистру("ДенежныеСредстваКПоступлениюНаличные", ВыемкаСсылка, ВыборкаДСКПоступлению);
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		
		Исключение
			
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Документ% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", Выборка.ОтчетОРозничныхПродажах);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			                         УровеньЖурналаРегистрации.Предупреждение,
			                         МетаданныеОбъекта,
			                         Выборка.ОтчетОРозничныхПродажах,
			                         ТекстСообщения);
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьРаспределениеНоменклатуры() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// РаспределениеПродаж, РаспределениеПродажУслугПоОрганизациям.
	// Если есть конфликтующие записи, то создаётся отдельная товарная группа для услуг и назначается  
	// соответствующей номенклатуре.
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РаспределениеПродажУслугПоОрганизациям.Магазин КАК Магазин,
		|	РаспределениеПродажУслугПоОрганизациям.ТоварнаяГруппа КАК ТоварнаяГруппа,
		|	ЗНАЧЕНИЕ(Справочник.РабочиеМеста.ПустаяСсылка) КАК РабочееМесто,
		|	РаспределениеПродажУслугПоОрганизациям.Организация КАК Организация,
		|	NULL КАК Склад,
		|	""РаспределениеПродажУслугПоОрганизациям"" КАК Источник
		|ПОМЕСТИТЬ ВТ_РаспределениеНоменклатуры
		|ИЗ
		|	РегистрСведений.УдалитьРаспределениеПродажУслугПоОрганизациям КАК РаспределениеПродажУслугПоОрганизациям
		|ГДЕ
		|	РаспределениеПродажУслугПоОрганизациям.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РаспределениеПродаж.Магазин,
		|	РаспределениеПродаж.ТоварнаяГруппа,
		|	РаспределениеПродаж.РабочееМесто,
		|	РаспределениеПродаж.Склад.Организация,
		|	РаспределениеПродаж.Склад,
		|	""РаспределениеПродаж""
		|ИЗ
		|	РегистрСведений.УдалитьРаспределениеПродаж КАК РаспределениеПродаж
		|ГДЕ
		|	РаспределениеПродаж.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	И ЕСТЬNULL(РаспределениеПродаж.Склад.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Магазин,
		|	ТоварнаяГруппа,
		|	РабочееМесто
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЗ_ДанныеСКоличествомРазличныхРесурсов.Магазин КАК Магазин,
		|	ВЗ_ДанныеСКоличествомРазличныхРесурсов.ТоварнаяГруппа КАК ТоварнаяГруппа,
		|	ВЗ_ДанныеСКоличествомРазличныхРесурсов.РабочееМесто КАК РабочееМесто
		|ПОМЕСТИТЬ ВТ_КонфликтующиеНаборыИзмерений
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВТ_РаспределениеНоменклатуры.Магазин КАК Магазин,
		|		ВТ_РаспределениеНоменклатуры.ТоварнаяГруппа КАК ТоварнаяГруппа,
		|		ВТ_РаспределениеНоменклатуры.РабочееМесто КАК РабочееМесто,
		|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_РаспределениеНоменклатуры.Организация) КАК КоличествоОрганизаций
		|	ИЗ
		|		ВТ_РаспределениеНоменклатуры КАК ВТ_РаспределениеНоменклатуры
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВТ_РаспределениеНоменклатуры.Магазин,
		|		ВТ_РаспределениеНоменклатуры.ТоварнаяГруппа,
		|		ВТ_РаспределениеНоменклатуры.РабочееМесто) КАК ВЗ_ДанныеСКоличествомРазличныхРесурсов
		|ГДЕ
		|	ВЗ_ДанныеСКоличествомРазличныхРесурсов.КоличествоОрганизаций > 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_КонфликтующиеНаборыИзмерений.Магазин КАК Магазин,
		|	ВТ_КонфликтующиеНаборыИзмерений.ТоварнаяГруппа КАК ТоварнаяГруппа,
		|	ВТ_КонфликтующиеНаборыИзмерений.РабочееМесто КАК РабочееМесто,
		|	ВТ_РаспределениеНоменклатуры.Организация КАК Организация,
		|	ВТ_РаспределениеНоменклатуры.Источник КАК Источник,
		|	ВТ_РаспределениеНоменклатуры.Склад КАК Склад
		|ПОМЕСТИТЬ ВТ_КонфликтующиеЗаписи
		|ИЗ
		|	ВТ_КонфликтующиеНаборыИзмерений КАК ВТ_КонфликтующиеНаборыИзмерений
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РаспределениеНоменклатуры КАК ВТ_РаспределениеНоменклатуры
		|		ПО ВТ_КонфликтующиеНаборыИзмерений.Магазин = ВТ_РаспределениеНоменклатуры.Магазин
		|			И ВТ_КонфликтующиеНаборыИзмерений.ТоварнаяГруппа = ВТ_РаспределениеНоменклатуры.ТоварнаяГруппа
		|			И ВТ_КонфликтующиеНаборыИзмерений.РабочееМесто = ВТ_РаспределениеНоменклатуры.РабочееМесто
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_КонфликтующиеЗаписи.Магазин КАК Магазин,
		|	ВТ_КонфликтующиеЗаписи.ТоварнаяГруппа КАК ТоварнаяГруппа,
		|	ВТ_КонфликтующиеЗаписи.РабочееМесто КАК РабочееМесто,
		|	ВТ_КонфликтующиеЗаписи.Организация КАК Организация,
		|	ВТ_КонфликтующиеЗаписи.Источник КАК Источник,
		|	ВТ_КонфликтующиеЗаписи.Склад КАК СкладПродажи,
		|	ВТ_КонфликтующиеЗаписи.Склад КАК СкладПоступления,
		|	ВЗ_КоличествоУслугТоваровВГруппе.КоличествоУслугаВГруппе КАК КоличествоУслугаВГруппе,
		|	ВЗ_КоличествоУслугТоваровВГруппе.КоличествоТоваровВГруппе КАК КоличествоТоваровВГруппе
		|ИЗ
		|	ВТ_КонфликтующиеЗаписи КАК ВТ_КонфликтующиеЗаписи
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ВТ_КонфликтующиеЗаписи.ТоварнаяГруппа КАК ТоварнаяГруппа,
		|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
		|					КОГДА Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(перечисление.ТипыНоменклатуры.Услуга)
		|						ТОГДА Номенклатура.Ссылка
		|					ИНАЧЕ NULL
		|				КОНЕЦ) КАК КоличествоУслугаВГруппе,
		|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
		|					КОГДА НЕ Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(перечисление.ТипыНоменклатуры.Услуга)
		|						ТОГДА Номенклатура.Ссылка
		|					ИНАЧЕ NULL
		|				КОНЕЦ) КАК КоличествоТоваровВГруппе
		|		ИЗ
		|			ВТ_КонфликтующиеЗаписи КАК ВТ_КонфликтующиеЗаписи
		|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|				ПО ВТ_КонфликтующиеЗаписи.ТоварнаяГруппа = Номенклатура.ТоварнаяГруппа
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ВТ_КонфликтующиеЗаписи.ТоварнаяГруппа) КАК ВЗ_КоличествоУслугТоваровВГруппе
		|		ПО ВТ_КонфликтующиеЗаписи.ТоварнаяГруппа = ВЗ_КоличествоУслугТоваровВГруппе.ТоварнаяГруппа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_РаспределениеНоменклатуры.Магазин КАК Магазин,
		|	ВТ_РаспределениеНоменклатуры.ТоварнаяГруппа КАК ТоварнаяГруппа,
		|	ВТ_РаспределениеНоменклатуры.РабочееМесто КАК РабочееМесто,
		|	МАКСИМУМ(ВТ_РаспределениеНоменклатуры.Организация) КАК Организация,
		|	МАКСИМУМ(ВТ_РаспределениеНоменклатуры.Склад) КАК СкладПоступления,
		|	МАКСИМУМ(ВТ_РаспределениеНоменклатуры.Склад) КАК СкладПродажи
		|ИЗ
		|	ВТ_РаспределениеНоменклатуры КАК ВТ_РаспределениеНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КонфликтующиеНаборыИзмерений КАК ВТ_КонфликтующиеНаборыИзмерений
		|		ПО ВТ_РаспределениеНоменклатуры.Магазин = ВТ_КонфликтующиеНаборыИзмерений.Магазин
		|			И ВТ_РаспределениеНоменклатуры.ТоварнаяГруппа = ВТ_КонфликтующиеНаборыИзмерений.ТоварнаяГруппа
		|			И ВТ_РаспределениеНоменклатуры.РабочееМесто = ВТ_КонфликтующиеНаборыИзмерений.РабочееМесто
		|ГДЕ
		|	ВТ_КонфликтующиеНаборыИзмерений.Магазин ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_РаспределениеНоменклатуры.РабочееМесто,
		|	ВТ_РаспределениеНоменклатуры.ТоварнаяГруппа,
		|	ВТ_РаспределениеНоменклатуры.Магазин";
	
	МассивРезультатов 	= Запрос.ВыполнитьПакет();
	
	КонфликтующиеЗаписи = МассивРезультатов[3].Выгрузить();
	ДанныеДляЗаписи 	= МассивРезультатов[4].Выгрузить();
		
	ШаблонЗаголовкаОшибки 	= НСтр("ru = 'Не удалось добавить запись в регистр сведений ""Распределение номенклатуры"" с измерениями %1, %2, %3.'");
	НаборЗаписей 			= РегистрыСведений.РаспределениеНоменклатуры.СоздатьНаборЗаписей();
	
	// Добавление неконфликтных записей	
	Для Каждого СтрокаДанных из ДанныеДляЗаписи Цикл
		
		НаборЗаписей.Отбор.Магазин.Установить(СтрокаДанных.Магазин);
		НаборЗаписей.Отбор.ТоварнаяГруппа.Установить(СтрокаДанных.ТоварнаяГруппа);
		НаборЗаписей.Отбор.РабочееМесто.Установить(СтрокаДанных.РабочееМесто);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		ЗаписьРегистра = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьРегистра, СтрокаДанных);
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ЗаголовокОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовкаОшибки, 
																					  СтрокаДанных.Магазин, 
																					  СтрокаДанных.ТоварнаяГруппа, 
																					  СтрокаДанных.РабочееМесто);
			
			ТекстОшибки = ЗаголовокОшибки + Символы.ПС + ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		КонецПопытки;
		
	КонецЦикла;
	
	// Конфликтующие записи
	ДанныеСНовойГруппой = КонфликтующиеЗаписи.СкопироватьКолонки("Магазин, ТоварнаяГруппа, РабочееМесто");
	ДанныеСНовойГруппой.Колонки.Добавить("НоваяТоварнаяГруппа", Новый ОписаниеТипов("СправочникСсылка.ТоварныеГруппы"));
	
	Для Каждого СтрокаДанных из КонфликтующиеЗаписи Цикл
		
		Если СтрокаДанных.КоличествоУслугаВГруппе > 0 И СтрокаДанных.КоличествоТоваровВГруппе > 0 И
			СтрокаДанных.Источник = "РаспределениеПродажУслугПоОрганизациям" Тогда
			
			НайденнаяСтрока = ДанныеСНовойГруппой.Найти(СтрокаДанных.ТоварнаяГруппа, "ТоварнаяГруппа");
			
			Если НайденнаяСтрока <> Неопределено Тогда
				
				ТоварнаяГруппаДляЗаписи = НайденнаяСтрока.НоваяТоварнаяГруппа;
				
			Иначе
				
				НоваяТоварнаяГруппа 				= СтрокаДанных.ТоварнаяГруппа.Скопировать();
				НоваяТоварнаяГруппа.Наименование 	= НоваяТоварнаяГруппа.Наименование + " (услуги)";
				
				НоваяТоварнаяГруппа.Записать();
				
				ТоварнаяГруппаДляЗаписи = НоваяТоварнаяГруппа.Ссылка;
								
			КонецЕсли;
			
			НоваяСтрока = ДанныеСНовойГруппой.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
			НоваяСтрока.НоваяТоварнаяГруппа = ТоварнаяГруппаДляЗаписи;		

		ИначеЕсли СтрокаДанных.КоличествоУслугаВГруппе = 0 И 
			СтрокаДанных.Источник = "РаспределениеПродажУслугПоОрганизациям" Тогда
			
			Продолжить;
			
		ИначеЕсли СтрокаДанных.КоличествоТоваровВГруппе = 0 И 
			СтрокаДанных.Источник = "РаспределениеПродаж" Тогда
			
			Продолжить;
			
		Иначе
			
			ТоварнаяГруппаДляЗаписи = СтрокаДанных.ТоварнаяГруппа;
			
		КонецЕсли;		
		
		НаборЗаписей.Отбор.Магазин.Установить(СтрокаДанных.Магазин);
		НаборЗаписей.Отбор.ТоварнаяГруппа.Установить(ТоварнаяГруппаДляЗаписи);
		НаборЗаписей.Отбор.РабочееМесто.Установить(СтрокаДанных.РабочееМесто);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		
		ЗаписьРегистра = НаборЗаписей.Добавить();
		ЗаписьРегистра.ТоварнаяГруппа = ТоварнаяГруппаДляЗаписи;
		ЗаполнитьЗначенияСвойств(ЗаписьРегистра, СтрокаДанных,,"ТоварнаяГруппа");
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ЗаголовокОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовкаОшибки, 
																					  СтрокаДанных.Магазин, 
																					  СтрокаДанных.ТоварнаяГруппа, 
																					  СтрокаДанных.РабочееМесто);
			
			ТекстОшибки = ЗаголовокОшибки + Символы.ПС + ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		КонецПопытки;	
		
	КонецЦикла;
	
	Если ДанныеСНовойГруппой.Количество() > 0 Тогда
		
		// Изменение товарной группы у услуг на новую	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДанных.ТоварнаяГруппа КАК ТоварнаяГруппа,
		|	ТаблицаДанных.НоваяТоварнаяГруппа КАК НоваяТоварнаяГруппа
		|ПОМЕСТИТЬ ВТ_ТаблицаДанных
		|ИЗ
		|	&ТаблицаДанных КАК ТаблицаДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Номенклатура,
		|	ВТ_ТаблицаДанных.НоваяТоварнаяГруппа КАК ТоварнаяГруппа
		|ИЗ
		|	ВТ_ТаблицаДанных КАК ВТ_ТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|		ПО ВТ_ТаблицаДанных.ТоварнаяГруппа = Номенклатура.ТоварнаяГруппа
		|ГДЕ
		|	Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ТаблицаДанных.НоваяТоварнаяГруппа,
		|	Номенклатура.Ссылка";
		
		Запрос.УстановитьПараметр("ТаблицаДанных", ДанныеСНовойГруппой); 
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		ШаблонЗаголовкаОшибкиНоменклатура = НСтр("ru = 'Не удалось изменить Торваную группу в номенклатуре %1 на %2'");
		
		Пока Выборка.Следующий() Цикл
			
			Попытка
				НоменклатураОбъект = Выборка.Номенклатура.ПолучитьОбъект();
				НоменклатураОбъект.Заблокировать();
				НоменклатураОбъект.ТоварнаяГруппа = Выборка.ТоварнаяГруппа;
				
				НоменклатураОбъект.Записать();
			Исключение
				ЗаголовокОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовкаОшибкиНоменклатура, 
																						  Выборка.Номенклатура, 
																						  Выборка.ТоварнаяГруппа);
				
				ТекстОшибки = ЗаголовокОшибки + Символы.ПС + ОписаниеОшибки();
				ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
			КонецПопытки;
			
		КонецЦикла;
		
		// Для новых товарных групп-дублей необходимо скопировать записи, в которых участвует исходная группа, 
		// только указать новою группу. 
			
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДанных.Магазин КАК Магазин,
		|	ТаблицаДанных.ТоварнаяГруппа КАК ТоварнаяГруппа,
		|	ТаблицаДанных.НоваяТоварнаяГруппа КАК НоваяТоварнаяГруппа,
		|	ТаблицаДанных.РабочееМесто КАК РабочееМесто
		|ПОМЕСТИТЬ ВТ_ТаблицаДанных
		|ИЗ
		|	&ТаблицаДанных КАК ТаблицаДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РаспределениеНоменклатуры.Магазин КАК Магазин,
		|	ВТ_ТаблицаДанных.НоваяТоварнаяГруппа КАК ТоварнаяГруппа,
		|	РаспределениеНоменклатуры.РабочееМесто КАК РабочееМесто,
		|	РаспределениеНоменклатуры.Организация КАК Организация,
		|	РаспределениеНоменклатуры.СкладПродажи КАК СкладПродажи,
		|	РаспределениеНоменклатуры.СкладПоступления КАК СкладПоступления
		|ИЗ
		|	ВТ_ТаблицаДанных КАК ВТ_ТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеНоменклатуры КАК РаспределениеНоменклатуры
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаДанных КАК ВТ_ТаблицаДанныхНоваяТоварнаяГруппа
		|			ПО РаспределениеНоменклатуры.Магазин = ВТ_ТаблицаДанныхНоваяТоварнаяГруппа.Магазин
		|				И РаспределениеНоменклатуры.ТоварнаяГруппа = ВТ_ТаблицаДанныхНоваяТоварнаяГруппа.ТоварнаяГруппа
		|				И РаспределениеНоменклатуры.РабочееМесто = ВТ_ТаблицаДанныхНоваяТоварнаяГруппа.РабочееМесто
		|		ПО ВТ_ТаблицаДанных.ТоварнаяГруппа = РаспределениеНоменклатуры.ТоварнаяГруппа
		|ГДЕ
		|	ВТ_ТаблицаДанныхНоваяТоварнаяГруппа.Магазин ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	РаспределениеНоменклатуры.Магазин,
		|	ВТ_ТаблицаДанных.НоваяТоварнаяГруппа,
		|	РаспределениеНоменклатуры.РабочееМесто,
		|	РаспределениеНоменклатуры.Организация,
		|	РаспределениеНоменклатуры.СкладПродажи,
		|	РаспределениеНоменклатуры.СкладПоступления";

		Запрос.УстановитьПараметр("ТаблицаДанных", ДанныеСНовойГруппой); 
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НаборЗаписей.Отбор.Магазин.Установить(Выборка.Магазин);
			НаборЗаписей.Отбор.ТоварнаяГруппа.Установить(Выборка.ТоварнаяГруппа);
			НаборЗаписей.Отбор.РабочееМесто.Установить(Выборка.РабочееМесто);
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			
			ЗаписьРегистра = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьРегистра, Выборка);
			
			Попытка
				НаборЗаписей.Записать();
			Исключение
				ЗаголовокОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовкаОшибки, 
																						  Выборка.Магазин, 
																						  Выборка.ТоварнаяГруппа, 
																						  Выборка.РабочееМесто);
				
				ТекстОшибки = ЗаголовокОшибки + Символы.ПС + ОписаниеОшибки();
				ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
			КонецПопытки;	
			
		КонецЦикла;	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПрименениеСистемНалогообложения() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// РаспределениеПродажУслугПоОрганизациям, СистемыНалогообложенияОрганизаций, ВидыОсобыхНалоговОрганизаций
	
	// Для подготовки записей из РаспределениеПродажУслугПоОрганизациям берутся все сочетания организации БД и 
	// строки регистра с заполненным ресурсом ВидНалога. Нельзя использовать ресурс Организация регистра
	// РаспределениеПродажУслугПоОрганизациям, т.к. значение этого ресурса не влияет на определение системы 
	// налогообложения, если заполнен ВидНалога.
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СистемыНалогообложенияОрганизаций.Период КАК Период,
	|	СистемыНалогообложенияОрганизаций.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка) КАК Магазин,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад,
	|	ЗНАЧЕНИЕ(Справочник.ТоварныеГруппы.ПустаяСсылка) КАК ТоварнаяГруппа,
	|	ВЫБОР
	|		КОГДА СистемыНалогообложенияОрганизаций.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.УдалитьСистемыНалогообложения.Общая)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыСистемНалогообложенияККТ.ОСН)
	|		КОГДА СистемыНалогообложенияОрганизаций.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.УдалитьСистемыНалогообложения.Упрощенная)
	|			ТОГДА ВЫБОР
	|					КОГДА СистемыНалогообложенияОрганизаций.ОбъектНалогообложения = ЗНАЧЕНИЕ(Перечисление.УдалитьОбъектыНалогообложенияПоУСН.ДоходыМинусРасходы)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыСистемНалогообложенияККТ.УСНДоходрасход)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыСистемНалогообложенияККТ.УСНДоход)
	|				КОНЕЦ
	|	КОНЕЦ КАК СистемаНалогообложения,
	|	ПРЕДСТАВЛЕНИЕ(СистемыНалогообложенияОрганизаций.Организация) КАК ОрганизацияПредставление,
	|	"""" КАК МагазинПредставление,
	|	"""" КАК СкладПредставление,
	|	"""" КАК ТоварнаяГруппаПредставление,
	|	ВЫБОР
	|		КОГДА СистемыНалогообложенияОрганизаций.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.УдалитьСистемыНалогообложения.Общая)
	|			ТОГДА СистемыНалогообложенияОрганизаций.НеЯвляетсяПлательщикомНДС
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОсвобожденОтНДС
	|ИЗ
	|	РегистрСведений.УдалитьСистемыНалогообложенияОрганизаций КАК СистемыНалогообложенияОрганизаций
	|ГДЕ
	|	СистемыНалогообложенияОрганизаций.СистемаНалогообложения <> ЗНАЧЕНИЕ(Перечисление.УдалитьСистемыНалогообложения.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период
	|ИТОГИ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыОсобыхНалоговОрганизаций.Период КАК Период,
	|	ВидыОсобыхНалоговОрганизаций.Организация КАК Организация,
	|	ВидыОсобыхНалоговОрганизаций.Склад.Магазин КАК Магазин,
	|	ВидыОсобыхНалоговОрганизаций.Склад КАК Склад,
	|	ЗНАЧЕНИЕ(Справочник.ТоварныеГруппы.ПустаяСсылка) КАК ТоварнаяГруппа,
	|	ВЫБОР
	|		КОГДА ВидыОсобыхНалоговОрганизаций.ВидНалога = ЗНАЧЕНИЕ(Перечисление.УдалитьВидыНалогов.ЕНВД)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыСистемНалогообложенияККТ.ЕНВД)
	|		КОГДА ВидыОсобыхНалоговОрганизаций.ВидНалога = ЗНАЧЕНИЕ(Перечисление.УдалитьВидыНалогов.ЕСХН)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыСистемНалогообложенияККТ.ЕСН)
	|		КОГДА ВидыОсобыхНалоговОрганизаций.ВидНалога = ЗНАЧЕНИЕ(Перечисление.УдалитьВидыНалогов.ПСН)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыСистемНалогообложенияККТ.Патент)
	|	КОНЕЦ КАК СистемаНалогообложения,
	|	ПРЕДСТАВЛЕНИЕ(ВидыОсобыхНалоговОрганизаций.Организация) КАК ОрганизацияПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ВидыОсобыхНалоговОрганизаций.Склад.Магазин) КАК СкладМагазинПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ВидыОсобыхНалоговОрганизаций.Склад) КАК СкладПредставление,
	|	"""" КАК ТоварнаяГруппаПредставление,
	|	ВЫБОР
	|		КОГДА ВидыОсобыхНалоговОрганизаций.ВидНалога = ЗНАЧЕНИЕ(Перечисление.УдалитьВидыНалогов.ЕНВД)
	|				ИЛИ ВидыОсобыхНалоговОрганизаций.ВидНалога = ЗНАЧЕНИЕ(Перечисление.УдалитьВидыНалогов.ПСН)
	|				ИЛИ ВидыОсобыхНалоговОрганизаций.ВидНалога = ЗНАЧЕНИЕ(Перечисление.УдалитьВидыНалогов.ЕСХН)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОсвобожденОтНДС
	|ИЗ
	|	РегистрСведений.УдалитьВидыОсобыхНалоговОрганизаций КАК ВидыОсобыхНалоговОрганизаций
	|ГДЕ
	|	ВидыОсобыхНалоговОрганизаций.ВидНалога <> ЗНАЧЕНИЕ(Перечисление.УдалитьВидыНалогов.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Склад,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	РаспределениеПродажУслугПоОрганизациям.Магазин КАК Магазин,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад,
	|	РаспределениеПродажУслугПоОрганизациям.ТоварнаяГруппа КАК ТоварнаяГруппа,
	|	ВЫБОР
	|		КОГДА РаспределениеПродажУслугПоОрганизациям.ВидНалога = ЗНАЧЕНИЕ(Перечисление.УдалитьВидыНалогов.ЕНВД)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыСистемНалогообложенияККТ.ЕНВД)
	|		КОГДА РаспределениеПродажУслугПоОрганизациям.ВидНалога = ЗНАЧЕНИЕ(Перечисление.УдалитьВидыНалогов.ЕСХН)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыСистемНалогообложенияККТ.ЕСН)
	|		КОГДА РаспределениеПродажУслугПоОрганизациям.ВидНалога = ЗНАЧЕНИЕ(Перечисление.УдалитьВидыНалогов.ПСН)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыСистемНалогообложенияККТ.Патент)
	|	КОНЕЦ КАК СистемаНалогообложения,
	|	ПРЕДСТАВЛЕНИЕ(Организации.Ссылка) КАК ОрганизацияПредставление,
	|	ПРЕДСТАВЛЕНИЕ(РаспределениеПродажУслугПоОрганизациям.Магазин) КАК МагазинПредставление,
	|	"""" КАК СкладПредставление,
	|	ПРЕДСТАВЛЕНИЕ(РаспределениеПродажУслугПоОрганизациям.ТоварнаяГруппа) КАК ТоварнаяГруппаПредставление,
	|	ВЫБОР
	|		КОГДА РаспределениеПродажУслугПоОрганизациям.ВидНалога = ЗНАЧЕНИЕ(Перечисление.УдалитьВидыНалогов.ЕНВД)
	|				ИЛИ РаспределениеПродажУслугПоОрганизациям.ВидНалога = ЗНАЧЕНИЕ(Перечисление.УдалитьВидыНалогов.ПСН)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОсвобожденОтНДС
	|ИЗ
	|	РегистрСведений.УдалитьРаспределениеПродажУслугПоОрганизациям КАК РаспределениеПродажУслугПоОрганизациям
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО (ИСТИНА)
	|ГДЕ
	|	РаспределениеПродажУслугПоОрганизациям.ВидНалога <> ЗНАЧЕНИЕ(Перечисление.УдалитьВидыНалогов.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	ПРЕДСТАВЛЕНИЕ(Организации.Ссылка) КАК ОрганизацияПредставление
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьСистемыНалогообложенияОрганизаций.СрезПоследних КАК СистемыНалогообложенияОрганизацийСрезПоследних
	|		ПО (СистемыНалогообложенияОрганизацийСрезПоследних.Организация = Организации.Ссылка)
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|	И ЕСТЬNULL(СистемыНалогообложенияОрганизацийСрезПоследних.СистемаНалогообложения, ЗНАЧЕНИЕ(Перечисление.УдалитьСистемыНалогообложения.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.УдалитьСистемыНалогообложения.ПустаяСсылка)";
	
	МассивРезультатов 	= Запрос.ВыполнитьПакет();
	
	СНООрганизаций			= МассивРезультатов[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	СНОСклады				= МассивРезультатов[1].Выгрузить();
	СНОУслуг				= МассивРезультатов[2].Выгрузить();
	ОрганизацииБезСНО 		= МассивРезультатов[3].Выгрузить();
	
	ДанныеДляЗаписи 		= СНОСклады.СкопироватьКолонки();
	МинимальныйПериод 		= Дата(3999,12,31, 23,59,59);
	ПериодыИспользованияНДСОрганизации = Новый Соответствие;
		
	// ПериодыИспользованияНДС можно определить из
	// РС СистемыНалогообложенияОрганизаций. Далее, если в этот период попадает
	// использование ЕСХН, эти переходы нужно "наложить" на данные из 
	// ВидыОсобыхНалоговОрганизаций и РаспределениеПродажУслугПоОрганизациям .
		
	Пока СНООрганизаций.Следующий() Цикл
		
		ПериодыИспользованияНДС = Новый ТаблицаЗначений();
		ПериодыИспользованияНДС.Колонки.Добавить("НачалоПериода", Новый ОписаниеТипов("Дата"));
		ПериодыИспользованияНДС.Колонки.Добавить("КонецПериода",  Новый ОписаниеТипов("Дата"));
		
		НачалоПериодаНДС = Неопределено;
		
		ДетальныеЗаписи = СНООрганизаций.Выбрать();
		
		Пока ДетальныеЗаписи.Следующий() Цикл
			
			// Для записей из РаспределениеПродажУслугПоОрганизациям период заполняется минимальной датой из имеющихся записей. 
			// Если их нет, тогда началом текущего года.
			МинимальныйПериод = ?(ЗначениеЗаполнено(ДетальныеЗаписи.Период), 
									Мин(ДетальныеЗаписи.Период, МинимальныйПериод), 
									МинимальныйПериод);
			
			НоваяСтрока = ДанныеДляЗаписи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДетальныеЗаписи);
			
			Если НЕ ДетальныеЗаписи.ОсвобожденОтНДС И НачалоПериодаНДС = Неопределено Тогда
				
				НачалоПериодаНДС = ДетальныеЗаписи.Период;
				
				НовыйПериод = ПериодыИспользованияНДС.Добавить();
				НовыйПериод.НачалоПериода = НачалоПериодаНДС;
				
			КонецЕсли;
			
			Если ДетальныеЗаписи.ОсвобожденОтНДС И НачалоПериодаНДС <> Неопределено Тогда
				
					НовыйПериод.КонецПериода  = ДетальныеЗаписи.Период;
					
					НачалоПериодаНДС = Неопределено;
					
			КонецЕсли;
			
		КонецЦикла;
		
		ПериодыИспользованияНДСОрганизации.Вставить(СНООрганизаций.Организация, ПериодыИспользованияНДС);
		
	КонецЦикла;
	
	Индекс = 0;
	Пока Индекс <= СНОСклады.Количество()-1 Цикл
		
		СтрокаДанных = СНОСклады[Индекс];
		
		МинимальныйПериод = ?(ЗначениеЗаполнено(СтрокаДанных.Период), Мин(СтрокаДанных.Период, МинимальныйПериод), МинимальныйПериод);
		
		НоваяСтрока = ДанныеДляЗаписи.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
		
		// Для ЕСХН значение ОсвобожденОтНДС с 01.01.19 определяется по данным РС СистемыНалогообложенияОрганизаций.
		// ОСН здесь не будет.
		Если НоваяСтрока.СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.ЕСН 
			 И НоваяСтрока.Период >= УчетНДС.ДатаПереходногоПериода() Тогда
			 
			ПериодыИспользованияНДС = ПериодыИспользованияНДСОрганизации.Получить(НоваяСтрока.Организация);
			
			НоваяСтрока.ОсвобожденОтНДС = ОсвобожденОтНДС(ПериодыИспользованияНДС, НоваяСтрока.Период);
			
			ОбработатьПереходы(ДанныеДляЗаписи, ПериодыИспользованияНДС, СНОСклады, Индекс, НоваяСтрока.ОсвобожденОтНДС);
			
		КонецЕсли;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Индекс = 0;
	Пока Индекс <= СНОУслуг.Количество()-1 Цикл
		
		СтрокаДанных = СНОУслуг[Индекс];
		
		НоваяСтрока = ДанныеДляЗаписи.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
		
		Если МинимальныйПериод <> Дата(3999,12,31, 23,59,59) Тогда 
			Период = МинимальныйПериод;
		Иначе
			Период = НачалоГода(ТекущаяДатаСеанса());
		КонецЕсли;
		
		НоваяСтрока.Период = Период;
		
		// Для ЕСХН значение ОсвобожденОтНДС с 01.01.19 определяется по данным РС СистемыНалогообложенияОрганизаций.
		// ОСН здесь не будет.
		Если НоваяСтрока.СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.ЕСН 
			 И НоваяСтрока.Период >= УчетНДС.ДатаПереходногоПериода() Тогда
			 
			ПериодыИспользованияНДС = ПериодыИспользованияНДСОрганизации.Получить(НоваяСтрока.Организация);
			
			НоваяСтрока.ОсвобожденОтНДС = ОсвобожденОтНДС(ПериодыИспользованияНДС, НоваяСтрока.Период);
			
			// Переходы обрабатываются только при ЕСХН
			ОбработатьПереходы(ДанныеДляЗаписи, ПериодыИспользованияНДС, СНОУслуг, Индекс, НоваяСтрока.ОсвобожденОтНДС);
			
		КонецЕсли;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	ШаблонЗаголовкаОшибки 	= НСтр("ru = 'Не удалось добавить запись в регистр сведений ""Применение систем налогообложения"" на дату %1 с измерениями %2, %3, %4, %5'");
	
	НаборЗаписей = РегистрыСведений.ПрименениеСистемНалогообложения.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
	НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
		
	Для Каждого СтрокаДанных Из ДанныеДляЗаписи Цикл
			
		НаборЗаписей.Отбор.Период.Установить(СтрокаДанных.Период);
		НаборЗаписей.Отбор.Организация.Установить(СтрокаДанных.Организация);
		НаборЗаписей.Отбор.Магазин.Установить(СтрокаДанных.Магазин);
		НаборЗаписей.Отбор.Склад.Установить(СтрокаДанных.Склад);
		НаборЗаписей.Отбор.ТоварнаяГруппа.Установить(СтрокаДанных.ТоварнаяГруппа);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		
		ЗаписьРегистра = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьРегистра, СтрокаДанных);
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ЗаголовокОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовкаОшибки, СтрокаДанных.Период,
					СтрокаДанных.ОрганизацияПредставление, СтрокаДанных.МагазинПредставление, СтрокаДанных.СкладПредставление, 
					СтрокаДанных.ТоварнаяГруппаПредставление);
					
			ТекстОшибки = ЗаголовокОшибки + Символы.ПС + ОписаниеОшибки();
			
			ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		КонецПопытки;
						
	КонецЦикла;
	
	// Организациям, для которых не удалось определить СНО, устанавливается Общая система налогообложения с начала текущего года.
	ПериодЗаписи  			= НачалоГода(ТекущаяДатаСеанса());
	ПустойМагазин 			= Справочники.Магазины.ПустаяСсылка();
	ПустойСклад 			= Справочники.Склады.ПустаяСсылка();
	ПустаяТоварнаяГруппа 	= Справочники.ТоварныеГруппы.ПустаяСсылка();
	ШаблонЗаголовкаОшибки 	= НСтр("ru = 'Не удалось добавить запись в регистр сведений ""Применение систем налогообложения"" на дату %1 для организации %2'");
		
	Для каждого СтрокаДанных из ОрганизацииБезСНО Цикл
		
		НаборЗаписей.Отбор.Период.Установить(ПериодЗаписи);
		НаборЗаписей.Отбор.Организация.Установить(СтрокаДанных.Организация);
		НаборЗаписей.Отбор.Магазин.Установить(ПустойМагазин);
		НаборЗаписей.Отбор.Склад.Установить(ПустойСклад);
		НаборЗаписей.Отбор.ТоварнаяГруппа.Установить(ПустаяТоварнаяГруппа);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		
		ЗаписьРегистра = НаборЗаписей.Добавить();
		ЗаписьРегистра.Период 					= ПериодЗаписи;
		ЗаписьРегистра.Организация 				= СтрокаДанных.Организация;
		ЗаписьРегистра.Магазин 					= ПустойМагазин;
		ЗаписьРегистра.Склад 					= ПустойСклад;
		ЗаписьРегистра.ТоварнаяГруппа 			= ПустаяТоварнаяГруппа;
		ЗаписьРегистра.СистемаНалогообложения 	= Перечисления.ТипыСистемНалогообложенияККТ.ОСН;
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ЗаголовокОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовкаОшибки, ПериодЗаписи,
					СтрокаДанных.ОрганизацияПредставление);
					
			ТекстОшибки = ЗаголовокОшибки + Символы.ПС + ОписаниеОшибки();
			
			ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		КонецПопытки;

	КонецЦикла;

КонецПроцедуры

Процедура ИзменитьТоварыНаСкладахВРамкахРезерва(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтчетОРозничныхПродажахТовары.Ссылка КАК Ссылка,
	|	ОтчетОРозничныхПродажахТовары.Количество КАК Количество,
	|	ОтчетОРозничныхПродажахТовары.Резервировать КАК Резервировать,
	|	ОтчетОРозничныхПродажахТовары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ТаблицаДокументы
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Товары КАК ОтчетОРозничныхПродажахТовары
	|ГДЕ
	|	ОтчетОРозничныхПродажахТовары.Количество < 0
	|	И ОтчетОРозничныхПродажахТовары.Резервировать
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварыНаСкладах.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ТаблицаДокументыКИсправлению
	|ИЗ
	|	ТаблицаДокументы КАК ТаблицаДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
	|		ПО (ТоварыНаСкладах.Регистратор = ТаблицаДокументы.Ссылка)
	|			И (ТоварыНаСкладах.НомерСтроки = ТаблицаДокументы.НомерСтроки)
	|ГДЕ
	|	ТоварыНаСкладах.ВидДвижения = &ВидДвижения
	|	И -ТаблицаДокументы.Количество <> ТоварыНаСкладах.Резерв
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыНаСкладах.Период КАК Период,
	|	ТоварыНаСкладах.Регистратор КАК Регистратор,
	|	ТоварыНаСкладах.НомерСтроки КАК НомерСтроки,
	|	ТоварыНаСкладах.Активность КАК Активность,
	|	ТоварыНаСкладах.ВидДвижения КАК ВидДвижения,
	|	ТоварыНаСкладах.Склад КАК Склад,
	|	ТоварыНаСкладах.Номенклатура КАК Номенклатура,
	|	ТоварыНаСкладах.Характеристика КАК Характеристика,
	|	ТоварыНаСкладах.Количество КАК Количество,
	|	-ТаблицаДокументы.Количество КАК Резерв,
	|	ТоварыНаСкладах.АналитикаХозяйственнойОперации КАК АналитикаХозяйственнойОперации,
	|	ТоварыНаСкладах.КодСтроки КАК КодСтроки
	|ИЗ
	|	ТаблицаДокументы КАК ТаблицаДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
	|		ПО (ТоварыНаСкладах.Регистратор = ТаблицаДокументы.Ссылка)
	|			И (ТоварыНаСкладах.НомерСтроки = ТаблицаДокументы.НомерСтроки)
	|ГДЕ
	|	ТоварыНаСкладах.Регистратор В
	|			(ВЫБРАТЬ
	|				ТаблицаДокументыКИсправлению.Регистратор КАК Регистратор
	|			ИЗ
	|				ТаблицаДокументыКИсправлению КАК ТаблицаДокументыКИсправлению)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Регистратор
	|ИТОГИ ПО
	|	Регистратор";
	
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Приход);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		ВыборкаДвижений = Выборка.Выбрать();
		ДвиженияДокументаПоРегистру("ТоварыНаСкладах", Выборка.Регистратор, ВыборкаДвижений);
	КонецЦикла;
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура УстановитьКонстантуВестиУчетТабачнойПродукцииМОТП() Экспорт
	
	Значение = Константы.УдалитьВестиУчетМаркировкиТабачнойПродукции.Получить();
	
	Если Значение Тогда
		Константы.ВестиУчетТабачнойПродукцииМОТП.Установить(Истина);
		Константы.ДатаОбязательнойМаркировкиТабачнойПродукцииМОТП.Установить(Дата(2019, 07, 01));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаменитьСтавкуНДСВНастройкахПользователей(Параметры) Экспорт
	
	МассивСтавокНДС = Новый Массив;
	МассивСтавокНДС.Добавить(Перечисления.СтавкиНДС.НДС18);
	МассивСтавокНДС.Добавить(Перечисления.СтавкиНДС.НДС18_118);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Настройка", ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяСтавкаНДСНовыхНоменклатурныхПозиций);
	Запрос.УстановитьПараметр("Значение", МассивСтавокНДС);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиПользователей.Пользователь КАК Пользователь,
	|	НастройкиПользователей.Магазин КАК Магазин,
	|	НастройкиПользователей.Настройка КАК Настройка,
	|	ВЫБОР
	|		КОГДА НастройкиПользователей.Значение = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НастройкиПользователей.Значение = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20_120)
	|			КОНЕЦ
	|	КОНЕЦ КАК Значение
	|ИЗ
	|	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
	|ГДЕ
	|	НастройкиПользователей.Настройка = &Настройка
	|	И НастройкиПользователей.Значение В (&Значение)
	|";
	
 	ТаблицаНастроек = Запрос.Выполнить().Выгрузить();
	Если ТаблицаНастроек.Количество() > 0 Тогда
		Для каждого СтрокаТаблицыНастроек Из ТаблицаНастроек Цикл
			
			НаборЗаписей = РегистрыСведений.НастройкиПользователей.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Пользователь.Установить(СтрокаТаблицыНастроек.Пользователь);
			НаборЗаписей.Отбор.Магазин.Установить(СтрокаТаблицыНастроек.Магазин);
			НаборЗаписей.Отбор.Настройка.Установить(СтрокаТаблицыНастроек.Настройка);
			НаборЗаписей.Прочитать();
		
			Если ЗначениеЗаполнено(СтрокаТаблицыНастроек.Значение) Тогда
				Запись = НаборЗаписей[0];
				ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицыНастроек);
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		КонецЦикла;
	КонецЕсли;
	Параметры.ОбработкаЗавершена = Истина;
		
КонецПроцедуры

// Возвращает массив документов для заполнения СНО
//
// Параметры:
//  ТипДокумента - строка, Тип документа. Пример: Документ.ВозвратТоваровОтПокупателя
//
// Возвращаемое значение:
//   Массив ссылок
//
Функция ДокументыДляЗаполненияСНО(ТипДокумента) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СхемаЗапроса = Новый СхемаЗапроса;
	ПакетЗапросов = СхемаЗапроса.ПакетЗапросов[0];
	Операторы = ПакетЗапросов.Операторы[0];
	ИсточникДокумент = Операторы.Источники.Добавить(ТипДокумента,"Документ");
	Операторы.ВыбираемыеПоля.Добавить("Документ.Ссылка");
	
	Операторы.Отбор.Добавить(
		"НЕ Документ.УдалитьВидНалога = ЗНАЧЕНИЕ(Перечисление.УдалитьВидыНалогов.ПустаяСсылка)");
	Операторы.Отбор.Добавить(
		"Документ.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.ТипыСистемНалогообложенияККТ.ПустаяСсылка)");
	
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	МассивДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивДокументов;
	
КонецФункции

// Заполняет реквизит СистемаНалогообложения из УдалитьВидНалога у переданной выборки документов
//
// Параметры:
//  ПолноеИмяОбъекта - Строка, полное имя объекта метаданных.
//  ВыборкаДокументов - Выборка, документы для обработки.
//  Параметры - Структура, параметры обновления.
//
Процедура ЗаполнитьСистемыНалогообложенияДокументов(ПолноеИмяОбъекта, ВыборкаДокументов, Параметры) Экспорт
	
	СоответствиеНалогов = Новый Соответствие;
	СоответствиеНалогов.Вставить(Перечисления.УдалитьВидыНалогов.ЕНВД, Перечисления.ТипыСистемНалогообложенияККТ.ЕНВД);
	СоответствиеНалогов.Вставить(Перечисления.УдалитьВидыНалогов.ЕСХН, Перечисления.ТипыСистемНалогообложенияККТ.ЕСН);
	СоответствиеНалогов.Вставить(Перечисления.УдалитьВидыНалогов.ПСН,  Перечисления.ТипыСистемНалогообложенияККТ.Патент);
	
	ШаблонТекстаОшибки = НСтр("ru = 'Не удалось обработать объект: %1 по причине: 
									|%2'");
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаДокументов.Ссылка);
			Блокировка.Заблокировать();
			
			ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
			
			Если ДокументОбъект = Неопределено Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			СНОДокумента = СоответствиеНалогов.Получить(ДокументОбъект.УдалитьВидНалога);
			
			ДокументОбъект.СистемаНалогообложения = СНОДокумента;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект,,, РежимЗаписиДокумента.Запись);
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтрШаблон(ШаблонТекстаОшибки, ВыборкаДокументов.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстОшибки);
			
		КонецПопытки;
			
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = НЕ ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#Область Релиз_2_2_13

Процедура ОбновитьчЧекиНеЗакрытыхСмен() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЧекККМ.Ссылка КАК Ссылка,
	|	ЧекККМ.Дата КАК Дата
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.Проведен
	|	И ЧекККМ.СтатусЧекаККМ В(&СтатусыЧекаККМ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка";
	
	СтатусыЧекаККМ = Новый Массив;
	СтатусыЧекаККМ.Добавить(Перечисления.СтатусыЧековККМ.ПустаяСсылка());
	СтатусыЧекаККМ.Добавить(Перечисления.СтатусыЧековККМ.Отложенный);
	СтатусыЧекаККМ.Добавить(Перечисления.СтатусыЧековККМ.Пробитый);
	
	Запрос.УстановитьПараметр("СтатусыЧекаККМ", СтатусыЧекаККМ);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ВыручкаНаличными = ПроведениеСервер.ВыручкаНаличными(Выборка.Ссылка);
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Релиз_2_3_1

Процедура СозданиеРозничногоПокупателя() Экспорт
	
	РозничныйПокупатель =  Константы.КонтрагентРозничныйПокупатель.Получить();
	Если НЕ ЗначениеЗаполнено(РозничныйПокупатель) Тогда
		РозничныйПокупатель = Справочники.Контрагенты.СоздатьЭлемент();
		РозничныйПокупатель.Наименование= НСтр("ru = 'Розничный покупатель'");
		РозничныйПокупатель.ЮрФизЛицо 	= Перечисления.ЮрФизЛицо.ФизЛицо;
		РозничныйПокупатель.Покупатель 	= Истина;
		РозничныйПокупатель.УстановитьНовыйКод();
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(РозничныйПокупатель);
		
		Константы.КонтрагентРозничныйПокупатель.Установить(РозничныйПокупатель.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьУчетНДСВДоговорах() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка,
	|	ДоговорыКонтрагентов.ПризнакАгента КАК ПризнакАгента,
	|	Контрагенты.Удалить_СистемаНалогообложения КАК СистемаНалогообложения
	|ПОМЕСТИТЬ ТаблицаВЗапросе
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ДоговорыКонтрагентов.Агент = Контрагенты.Ссылка
	|ГДЕ
	|	ДоговорыКонтрагентов.УчетНДСУКомитента = &ПустойУчетНДСУКомитента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВЗапросе.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ТаблицаВЗапросе.ПризнакАгента = &Комитент
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаВЗапросе.СистемаНалогообложения = &ОсновнаяСистема
	|						ТОГДА &ВыделятьНДСЗаКомиссионныеТоварыПриПечатиЧека
	|					ИНАЧЕ &НеВыделятьНДСЗаКомиссионныеТоварыПриПечатиЧека
	|				КОНЕЦ
	|		ИНАЧЕ &ВыделятьНДСЗаКомиссионныеТоварыПриПечатиЧека
	|	КОНЕЦ КАК УчетНДСУКомитента
	|ИЗ
	|	ТаблицаВЗапросе КАК ТаблицаВЗапросе
	|ГДЕ
	|	ТаблицаВЗапросе.СистемаНалогообложения <> &ПустаяСистема";
	
	Запрос.УстановитьПараметр("Комитент", Перечисления.ПризнакиАгента.Комиссионер);
	Запрос.УстановитьПараметр("ПустаяСистема", Перечисления.ТипыСистемНалогообложенияККТ.ПустаяСсылка());
	Запрос.УстановитьПараметр("ОсновнаяСистема", Перечисления.ТипыСистемНалогообложенияККТ.ОСН);
	Запрос.УстановитьПараметр("ВыделятьНДСЗаКомиссионныеТоварыПриПечатиЧека", Перечисления.УчетНДСУКомитента.ВыделятьНДСЗаКомиссионныеТоварыПриПечатиЧека);
	Запрос.УстановитьПараметр("НеВыделятьНДСЗаКомиссионныеТоварыПриПечатиЧека",Перечисления.УчетНДСУКомитента.НеВыделятьНДСЗаКомиссионныеТоварыПриПечатиЧека);
	Запрос.УстановитьПараметр("ПустойУчетНДСУКомитента", Перечисления.УчетНДСУКомитента.ПустаяСсылка());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.УчетНДСУКомитента = Выборка.УчетНДСУКомитента;
		СправочникОбъект.СтатусДействия = Перечисления.СтатусыДействияДоговоров.Действует;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.СтатусДействия = &ПустойСтатусДействия";
	
	Запрос.УстановитьПараметр("ПустойСтатусДействия", Перечисления.СтатусыДействияДоговоров.ПустаяСсылка());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.СтатусДействия = Перечисления.СтатусыДействияДоговоров.Действует;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ЗаполнитьВидыВнешнихОбработок() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДополнительныеОтчетыИОбработки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
	|ГДЕ
	|	ДополнительныеОтчетыИОбработки.Вид = &Вид
	|	И НЕ ДополнительныеОтчетыИОбработки.ИспользоватьДляФормыОбъекта
	|	И НЕ ДополнительныеОтчетыИОбработки.ИспользоватьДляФормыСписка
	|	И ДополнительныеОтчетыИОбработки.Публикация = &Публикация";
	
	Запрос.УстановитьПараметр("Вид"       , Перечисления.ВидыДополнительныхОтчетовИОбработок.ПустаяСсылка());
	Запрос.УстановитьПараметр("Публикация", Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Релиз_2_3_2

Процедура ОбновитьИНННеРезидента() Экспорт
	
	Справочники.Контрагенты.ОбновитьИНННеРезидента();
	Справочники.ДоговорыКонтрагентов.ОбновитьИНННеРезидента();
	
КонецПроцедуры

Процедура УстановкаКонстантПеремещения() Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПередачиТоваровМеждуОрганизациями") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПередачаТоваровМеждуОрганизациями.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПередачаТоваровМеждуОрганизациями КАК ПередачаТоваровМеждуОрганизациями
		|ГДЕ
		|	ПередачаТоваровМеждуОрганизациями.Проведен";
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			Константы.ИспользоватьПередачиТоваровМеждуОрганизациями.Установить(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОрдерНаПеремещениеТоваров.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ОрдерНаПеремещениеТоваров КАК ОрдерНаПеремещениеТоваров
	|ГДЕ
	|	ОрдерНаПеремещениеТоваров.Проведен";
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Константы.ИспользоватьОрдерНаПеремещениеТоваров.Установить(Истина);
	КонецЕсли;
		
КонецПроцедуры

// Процедура обработчик обновления на версию "2.3.2.18"
//
Процедура ВключитьУчетОбувнойПродукции() Экспорт
	
	Попытка
		
		Если Метаданные.Константы.Найти("ВестиУчетОбувнойПродукцииИСМП") <> Неопределено Тогда
			Константы.ВестиУчетОбувнойПродукцииИСМП.Установить(Константы.УдалитьВестиУчетМаркировкиОбувнойПродукции.Получить());
		ИначеЕсли Метаданные.Константы.Найти("ВестиУчетМаркируемойПродукцииИСМП") <> Неопределено Тогда
			Константы.ВестиУчетМаркируемойПродукцииИСМП.Установить(Константы.УдалитьВестиУчетМаркировкиОбувнойПродукции.Получить());
		КонецЕсли;
		
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Не удалось переключить константу по причине: %Причина%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Предупреждение,,, ТекстСообщения);
		
	КонецПопытки;
	
КонецПроцедуры

// Процедура обработчик обновления на версию "2.3.2.13"
//
Процедура ЗаменитьУдаленныеРолиВНепереопределяемыхПрофилях() Экспорт
	
	СоответствиеРолей = Новый Соответствие;
	СоответствиеРолей.Вставить("? (не используется) Добавление изменение документов закупки ГИСМ РТ (Роль)",
	"Добавление изменение документов закупки ГИСМ");
	СоответствиеРолей.Вставить("? (не используется) Добавление изменение маркировок товаров ГИСМ РТ (Роль)",
	"Добавление изменение маркировок товаров ГИСМ");
	СоответствиеРолей.Вставить("? (не используется) Добавление изменение передач в регистр 2 ЕГАИС РТ (Роль)",
	"Добавление изменение передач в регистр №2 ЕГАИС");
	СоответствиеРолей.Вставить("? (не используется) Добавление изменение уведомлений об отгрузке маркированных товаров ГИСМ РТ (Роль)",
	"Добавление изменение уведомлений об отгрузке маркированных товаров ГИСМ");
	СоответствиеРолей.Вставить("? (не используется) Добавление изменение уведомлений о поступлении маркированных товаров ГИСМ РТ (Роль)",
	"Добавление изменение уведомлений о поступлении маркированных товаров ГИСМ");
	СоответствиеРолей.Вставить("? (не используется) Добавление изменение уведомлений о списании КиЗ ГИСМ РТ (Роль)",
	"Добавление изменение уведомлений о списании КиЗ ГИСМ");
	СоответствиеРолей.Вставить("? (не используется) Чтение документов закупки ГИСМ РТ (Роль)",
	"Чтение документов закупки ГИСМ");
	СоответствиеРолей.Вставить("? (не используется) Чтение маркировок товаров ГИСМ РТ (Роль)",
	"Чтение маркировок товаров ГИСМ");
	СоответствиеРолей.Вставить("? (не используется) Чтение уведомлений об отгрузке маркированных товаров ГИСМ РТ (Роль)",
	"Чтение уведомлений об отгрузке маркированных товаров ГИСМ");
	СоответствиеРолей.Вставить("? (не используется) Чтение уведомлений о поступлении маркированных товаров ГИСМ РТ (Роль)",
	"Чтение уведомлений о поступлении маркированных товаров ГИСМ");
	СоответствиеРолей.Вставить("? (не используется) Чтение уведомлений о списании КиЗ ГИСМ РТ (Роль)",
	"Чтение уведомлений о списании КиЗ ГИСМ");
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ПрофилиГруппДоступа.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа КАК ПрофилиГруппДоступа
	|ГДЕ
	|	НЕ ПрофилиГруппДоступа.Предопределенный");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.ПрофилиГруппДоступа");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			НужноЗаписать = ложь;
			Спр = Выборка.Ссылка.ПолучитьОбъект();
			Роли = Спр.Роли;
			
			Для каждого Стр Из Роли Цикл
				Для Каждого Эл Из СоответствиеРолей Цикл
					Если Стр.Роль.Наименование = Эл.Ключ 
						ИЛИ Стр.Роль.Наименование = СтрЗаменить(Эл.Ключ, "(не используется) ","") Тогда
						Идентификатор= Справочники.ИдентификаторыОбъектовМетаданных.НайтиПоНаименованию(Эл.Значение);
						Если ЗначениеЗаполнено(Идентификатор) Тогда
							Стр.Роль = Идентификатор;
							НужноЗаписать = Истина;
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			Если НужноЗаписать Тогда
				Спр.Записать();
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать: %ПрофилиГруппДоступа% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПрофилиГруппДоступа%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.Справочники.ПрофилиГруппДоступа, Выборка.Ссылка, ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Релиз_2_3_3

Процедура ПоправитьТелефонПользователя()  Экспорт
	
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонПользователя,
		Перечисления.ТипыКонтактнойИнформации.Телефон,               	Истина, Ложь, Ложь, 2);
	
КонецПроцедуры

#КонецОбласти

#Область Релиз_2_3_4

Процедура ОбновитьРозничногоПокупателя() Экспорт
	
	РозничныйПокупатель = Константы.КонтрагентРозничныйПокупатель.Получить();
	Если НЕ ЗначениеЗаполнено(РозничныйПокупатель) Тогда
		РозничныйПокупатель = Справочники.Контрагенты.СоздатьЭлемент();
		РозничныйПокупатель.Наименование		= НСтр("ru = 'Розничный покупатель'");
		РозничныйПокупатель.НаименованиеПолное	= НСтр("ru = 'Розничный покупатель'");
		РозничныйПокупатель.ЮрФизЛицо 			= Перечисления.ЮрФизЛицо.ФизЛицо;
		РозничныйПокупатель.ФизЛицо 			= ОбщегоНазначенияРТ.СоздатьФизЛицоНаОснованииКонтрагента(РозничныйПокупатель);
		РозничныйПокупатель.Покупатель 			= Истина;
		РозничныйПокупатель.УстановитьНовыйКод();
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(РозничныйПокупатель);
		
		Константы.КонтрагентРозничныйПокупатель.Установить(РозничныйПокупатель.Ссылка);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РозничныйПокупатель.ФизЛицо) Тогда
		ОбъектРозничныйПокупатель = РозничныйПокупатель.ПолучитьОбъект();
		ОбъектРозничныйПокупатель.НаименованиеПолное	= НСтр("ru = 'Розничный покупатель'");
		ОбъектРозничныйПокупатель.ФизЛицо = ОбщегоНазначенияРТ.СоздатьФизЛицоНаОснованииКонтрагента(ОбъектРозничныйПокупатель);
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбъектРозничныйПокупатель);
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьПравоРазрешитьНеполнуюВыемку() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Право = ПланыВидовХарактеристик.ПраваПользователей.НайтиПоНаименованию(НСтр("ru = 'Разрешить неполную выемку при закрытии смены'"), Истина);
	Если НЕ ЗначениеЗаполнено(Право) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(Метаданные.ПланыВидовХарактеристик.ПраваПользователей.ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Право);
		Блокировка.Заблокировать();
		
		ПравоОбъект = Право.ПолучитьОбъект();
		ОбновлениеИнформационнойБазы.УдалитьДанные(ПравоОбъект);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Права пользователей. Удаление права ""Разрешить неполную выемку при закрытии смены""'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.ПланыВидовХарактеристик.ПраваПользователей,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область Релиз_2_3_5

// Процедура обработчик обновления на версию "2.3.5.4"
//
Процедура ПеренестиДанныеТЧШтрихкодыАпаковокВАкцизныеМаркиПеремещениеТоваров() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПеремещениеТоваровШтрихкодыУпаковок.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПеремещениеТоваров.УдалитьШтрихкодыУпаковок КАК ПеремещениеТоваровШтрихкодыУпаковок");
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НачатьТранзакцию();
			
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Документ.ПеремещениеТоваров");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
				Блокировка.Заблокировать();
				
				ПеремещениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
				
				Для каждого Стр Из ПеремещениеОбъект.УдалитьШтрихкодыУпаковок Цикл
					НоваяСтрокаУпаковки = ПеремещениеОбъект.АкцизныеМарки.Добавить();
					НоваяСтрокаУпаковки.АкцизнаяМарка    = Стр.ШтрихкодУпаковки;
				КонецЦикла;
				
				ПеремещениеОбъект.УдалитьШтрихкодыУпаковок.Очистить();
				ПеремещениеОбъект.ОбменДанными.Загрузка = Истина;
				ПеремещениеОбъект.Записать();
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				ОтменитьТранзакцию();
				
				ТекстСообщения = НСтр("ru = 'Не удалось обработать: %ПеремещениеТоваров% по причине: %Причина%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПеремещениеТоваров%", Выборка.Ссылка);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.ПеремещениеТоваров, Выборка.Ссылка, ТекстСообщения);
			КонецПопытки;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура обработчик обновления на версию "2.3.5.12"
//
Процедура ВключитьРаботуСНовостями() Экспорт
	
	Константы.РазрешенаРаботаСНовостями.Установить(Истина);
	Константы.РазрешенаРаботаСНовостямиЧерезИнтернет.Установить(Истина);
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

// Включает функциональные опции выгрузки алкогольной продукции в ЕГАИС
Процедура ВключитьДополнительныеОпцииАлкольнойПродукции() Экспорт
	
	Если Константы.ВестиСведенияДляДекларацийПоАлкогольнойПродукции.Получить() Тогда
		Константы.ВыгружатьПродажиНемаркируемойПродукцииВЕГАИСРТ.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры

// Перезаполняет словарь сопоставления номенклатуры БЭД
Процедура ПерезаполнитьСловарьСопоставленияНоменклатуры(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	СопоставлениеНоменклатурыКонтрагентовСлужебный.НачатьПерезаполнениеСловаряСопоставленияНоменклатуры(Новый Структура, "");
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, "РегистрСведений.СловарьСопоставленияНоменклатурыБЭД");
	
КонецПроцедуры

#КонецОбласти

#Область Релиз_2_3_6

Процедура УдалитьПравоИзменятьУчетДенежныхСредствВКассовыхДокументах() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Право = ПланыВидовХарактеристик.ПраваПользователей.НайтиПоНаименованию(НСтр("ru = 'Доступность изменения учета денежных средств в кассовых документах'"), Истина);
	Если НЕ ЗначениеЗаполнено(Право) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(Метаданные.ПланыВидовХарактеристик.ПраваПользователей.ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Право);
		Блокировка.Заблокировать();
		
		ПравоОбъект = Право.ПолучитьОбъект();
		ОбновлениеИнформационнойБазы.УдалитьДанные(ПравоОбъект);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Права пользователей. Удаление права ""Доступность изменения учета денежных средств в кассовых документах""'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.ПланыВидовХарактеристик.ПраваПользователей,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ПровестиВозвратУслуги(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Ложь;
	Результат = ДанныеПоВозвратуУслуг(Параметры);
	
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		ВыборкаДвижений = Выборка.Выбрать();
		ДвиженияДокументаПоРегистру("Продажи", Выборка.Ссылка, ВыборкаДвижений);
	КонецЦикла;
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитОрганизацииВСкладах() Экспорт
	
	ОрганизацияПоУмолчанию = Справочники.Организации.ОрганизацияПоУмолчанию();
	
	Если ЗначениеЗаполнено(ОрганизацияПоУмолчанию) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Склады.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	НЕ Склады.ЭтоГруппа
		|	И Склады.Организация = &ПустаяОрганизация";
		
		Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
		
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			СкладОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СкладОбъект.Организация = ОрганизацияПоУмолчанию;
			СкладОбъект.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Процедура заполняет константы значением по умолчанию.
//
Процедура ЗаполнитьКонстантыПоУмолчанию()
	
	Если НЕ ЗначениеЗаполнено(Константы.ЕдиницаИзмеренияВеса.Получить()) Тогда
		БазоваяЕдиницаИзмеренияВеса = Справочники.БазовыеЕдиницыИзмерения.НайтиПоКоду("166");
		Если ЗначениеЗаполнено(БазоваяЕдиницаИзмеренияВеса) Тогда
			Константы.ЕдиницаИзмеренияВеса.Установить(БазоваяЕдиницаИзмеренияВеса);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Константы.ЕдиницаИзмеренияОбъема.Получить()) Тогда
		БазоваяЕдиницаИзмеренияОбъема = Справочники.БазовыеЕдиницыИзмерения.НайтиПоКоду("113");
		Если ЗначениеЗаполнено(БазоваяЕдиницаИзмеренияОбъема) Тогда
			Константы.ЕдиницаИзмеренияОбъема.Установить(БазоваяЕдиницаИзмеренияОбъема);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Константы.ДополнительнаяКолонкаПриОтображенииНоменклатуры.Получить()) Тогда
		Константы.ДополнительнаяКолонкаПриОтображенииНоменклатуры.Установить(Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить()) Тогда
		Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Установить(Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Константы.РазрешенаРаботаСНовостями.Получить()) Тогда
		Константы.РазрешенаРаботаСНовостями.Установить(Истина);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Константы.РазрешенаРаботаСНовостямиЧерезИнтернет.Получить()) Тогда
		Константы.РазрешенаРаботаСНовостямиЧерезИнтернет.Установить(Истина);
	КонецЕсли;
	
	Константы.ИспользоватьУчетСебестоимости.Установить(Истина);
	
	Если НЕ ЗначениеЗаполнено(Константы.НижняяГраницаДиапазонаSKUВесовогоТовара.Получить()) Тогда
		Константы.НижняяГраницаДиапазонаSKUВесовогоТовара.Установить(100);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Константы.ВерхняяГраницаДиапазонаSKUВесовогоТовара.Получить()) Тогда
		Константы.ВерхняяГраницаДиапазонаSKUВесовогоТовара.Установить(99999);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Константы.ПрефиксВнутреннегоШтрихкодаВесовогоТовара.Получить()) Тогда
		Константы.ПрефиксВнутреннегоШтрихкодаВесовогоТовара.Установить(1);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Константы.ПрефиксВнутреннегоШтрихкодаШтучногоФасованногоТовара.Получить()) Тогда
		Константы.ПрефиксВнутреннегоШтрихкодаШтучногоФасованногоТовара.Установить(3);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Константы.ПрефиксВнутреннегоШтрихкодаШтучногоТовара.Получить()) Тогда
		Константы.ПрефиксВнутреннегоШтрихкодаШтучногоТовара.Установить(2);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Константы.ПрефиксШтрихкодаУзлаРИБ.Получить()) Тогда
		Константы.ПрефиксШтрихкодаУзлаРИБ.Установить(0);
	КонецЕсли;
	
	Константы.ИспользоватьПодключаемоеОборудование.Установить(Истина);
	
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		Константы.SKUУстанавливаетсяВГлавномУзлеРИБ.Установить(Ложь);
	Иначе
		Константы.SKUУстанавливаетсяВГлавномУзлеРИБ.Установить(Истина);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Константы.ДатаНачалаПримененияПриказа164.Получить()) Тогда
		Константы.ДатаНачалаПримененияПриказа164.Установить(Дата(2016, 1, 1));
	КонецЕсли;
	
	Константы.ПроверятьНеобходимостьСозданияДокументовЕГАИС.Установить(Истина);
	
КонецПроцедуры // ЗаполнитьКонстантыПоУмолчанию()

Процедура ДвиженияДокументаПоРегистру(ИмяРегистра, ДокументСсылка, ВыборкаДвижений)
	
	НаборЗаписей = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
	
	Если ТипЗнч(ВыборкаДвижений) = Тип("Структура") Тогда
		ЗаписьРегистра = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьРегистра, ВыборкаДвижений);
	Иначе
		Пока ВыборкаДвижений.Следующий() Цикл
			
			ЗаписьРегистра = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьРегистра, ВыборкаДвижений);
			
		КонецЦикла;
	КонецЕсли;
	ПерезаписатьДанныеРегистров(НаборЗаписей);
	
КонецПроцедуры

// Перезаписывает данные регистров изменения в переданном объекте.
// Для использования в обработчиках обновления.
//
// Параметры:
//   Данные                            - Произвольный - объект, набор записей или менеджер константы, который
//                                                      необходимо записать.
//   РегистрироватьНаУзлахПлановОбмена - Булево       - включает регистрацию на узлах планов обмена при записи объекта.
//   ВключитьБизнесЛогику              - Булево       - включает бизнес-логику при записи объекта.
//
Процедура ПерезаписатьДанныеРегистров(Знач Данные, Знач РегистрироватьНаУзлахПлановОбмена = Ложь, 
	Знач ВключитьБизнесЛогику = Ложь)
	
	Данные.ОбменДанными.Загрузка = Не ВключитьБизнесЛогику;
	Если Не РегистрироватьНаУзлахПлановОбмена Тогда
		Данные.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		Данные.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	КонецЕсли;
	
	Данные.Записать(Истина);
	
КонецПроцедуры

Функция НайтиСуществующиеСоответсвияВидовОплаты(ВидыОплаты)
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СоответствиеВидовОплатыСККМOfflineСоответствиеВидовОплаты.Ссылка КАК СоответствиеВидовОплатыСККМOffline,
	               |	КОЛИЧЕСТВО(СоответствиеВидовОплатыСККМOfflineСоответствиеВидовОплаты.ВидОплаты) КАК КоличествоВидовОплаты
	               |ПОМЕСТИТЬ ВТ_СоответствиеСКоличествомВидовОплаты
	               |ИЗ
	               |	Справочник.СоответствиеВидовОплатыСККМOffline.СоответствиеВидовОплаты КАК СоответствиеВидовОплатыСККМOfflineСоответствиеВидовОплаты
	               |ГДЕ
	               |	НЕ СоответствиеВидовОплатыСККМOfflineСоответствиеВидовОплаты.Ссылка.ПометкаУдаления
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СоответствиеВидовОплатыСККМOfflineСоответствиеВидовОплаты.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СоответствиеСКоличествомВидовОплаты.СоответствиеВидовОплатыСККМOffline
	               |ИЗ
	               |	ВТ_СоответствиеСКоличествомВидовОплаты КАК ВТ_СоответствиеСКоличествомВидовОплаты
	               |ГДЕ
	               |	ВТ_СоответствиеСКоличествомВидовОплаты.КоличествоВидовОплаты = &КоличествоВидовОплаты";
				   
	Запрос.УстановитьПараметр("КоличествоВидовОплаты", ВидыОплаты.Количество());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Соответствует = Истина;
		
		Для Каждого ТекВидОплаты Из ВидыОплаты Цикл
			
			Если Выборка.СоответствиеВидовОплатыСККМOffline.СоответствиеВидовОплаты.НайтиСтроки(Новый Структура("ВидОплаты", ТекВидОплаты)).Количество()=0 Тогда
				НеСоответствует = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Соответствует Тогда
			Результат = Выборка.СоответствиеВидовОплатыСККМOffline;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Установка значения по умолчанию проверки необходимости создания документов ЕГАИС
//
Процедура УстановитьПроверкуНеобходимостиСозданияДокументовЕГАИС() Экспорт
	
	Константы.ПроверятьНеобходимостьСозданияДокументовЕГАИС.Установить(Истина);
	
КонецПроцедуры

// Переносит Сотрудника из шапки документа в табличную часть
//
Процедура ПеренестиСотрудникаЕжедневногоОтчетаВТЧ() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЕжедневныйОтчет.Ссылка КАК Ссылка,
	|	ЕжедневныйОтчет.Сотрудник,
	|	ЕжедневныйОтчет.ПродолжительностьДня
	|ИЗ
	|	Документ.ЕжедневныйОтчет КАК ЕжедневныйОтчет
	|
	|ГДЕ
	|	ЕжедневныйОтчет.Сотрудник <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|	И ЕжедневныйОтчет.ПродолжительностьДня <> ДАТАВРЕМЯ(1,1,1,0,0,0)
	|УПОРЯДОЧИТЬ ПО
	|	ЕжедневныйОтчет.Дата,
	|	Ссылка";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОтчетОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если ОтчетОбъект.ОтработанноеВремя.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ТаблицаОтработанноеВремя = ОтчетОбъект.ОтработанноеВремя.Выгрузить();
		Колонки = ТаблицаОтработанноеВремя.Колонки;
		Колонки.Добавить("ПометкаУдаления", Новый ОписаниеТипов("Булево"));
		
		Для каждого СтрокаТЧ Из ТаблицаОтработанноеВремя Цикл

			РазностьВСекундах = СтрокаТЧ.ОкончаниеРаботы - СтрокаТЧ.НачалоРаботы;
			
			Если ОтчетОбъект.ОтработанноеВремя.Количество() = 1 Тогда
				СтрокаТЧ.Сотрудник = Выборка.Сотрудник;
				СтрокаТЧ.ПродолжительностьДня = Выборка.ПродолжительностьДня;

			ИначеЕсли СтрокаТЧ.НомерСтроки = 1 Тогда
				СтрокаТЧ.Сотрудник = Выборка.Сотрудник;
				Если РазностьВСекундах > 0 Тогда
			    	СтрокаТЧ.ПродолжительностьДня  = ОбщегоНазначенияРТКлиентСервер.ПреобразоватьСекундыВДату(РазностьВСекундах);
				ИначеЕсли РазностьВСекундах < 0 Тогда
					СтрокаТЧ.ПродолжительностьДня  = ОбщегоНазначенияРТКлиентСервер.ПреобразоватьСекундыВДату(86400 - РазностьВСекундах *(-1));
					
				Иначе
					СтрокаТЧ.ПродолжительностьДня = Дата("00010101");
					
				КонецЕсли;
		
			Иначе
				ДополнительныйДокумент = Документы.ЕжедневныйОтчет.СоздатьДокумент();
				ЗаполнитьЗначенияСвойств(ДополнительныйДокумент, ОтчетОбъект,, "Номер, Сотрудник, ПродолжительностьДня, Комментарий");
				ДополнительныйДокумент.Комментарий = НСтр("ru = 'Документ создан обработкой обновления.'");
				
				СтрокаТЧДополнительныйДокумент = ДополнительныйДокумент.ОтработанноеВремя.Добавить();
				СтрокаТЧДополнительныйДокумент.Сотрудник = Выборка.Сотрудник;
				ЗаполнитьЗначенияСвойств(СтрокаТЧДополнительныйДокумент, СтрокаТЧ, "НачалоРаботы, ОкончаниеРаботы");
				
				Если РазностьВСекундах > 0 Тогда
			    	СтрокаТЧДополнительныйДокумент.ПродолжительностьДня  = ОбщегоНазначенияРТКлиентСервер.ПреобразоватьСекундыВДату(РазностьВСекундах);
				ИначеЕсли РазностьВСекундах < 0 Тогда
					СтрокаТЧДополнительныйДокумент.ПродолжительностьДня  = ОбщегоНазначенияРТКлиентСервер.ПреобразоватьСекундыВДату(86400 - РазностьВСекундах *(-1));
					
				Иначе
					СтрокаТЧДополнительныйДокумент.ПродолжительностьДня = Дата("00010101");
					
				КонецЕсли;
				
				ДополнительныйДокумент.Записать(РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
				
				СтрокаТЧ.ПометкаУдаления = Истина;
				
			КонецЕсли;
		КонецЦикла;
		
		ОтчетОбъект.ОтработанноеВремя.Загрузить(ТаблицаОтработанноеВремя.Скопировать(Новый Структура("ПометкаУдаления", Ложь)));
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОтчетОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполнение регистра "ФактическоеРабочееВремяСотрудников"
// 
Процедура ЗаполнитьРегистрФактическоеРабочееВремяСотрудников() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕжедневныйОтчет.Ссылка,
	|	ЕжедневныйОтчет.ОтработанноеВремя.(
	|		Ссылка									КАК Регистратор,
	|		НомерСтроки								КАК НомерСтроки,
	|		Сотрудник								КАК Сотрудник,
	|		НачалоРаботы							КАК НачалоРаботы,
	|		ОкончаниеРаботы							КАК ОкончаниеРаботы,
	|		РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0),
	|			ПродолжительностьДня, МИНУТА) / 60	КАК РабочееВремяСотрудников,
	|		Ссылка.ДатаОтчета 						КАК ПЕРИОД,
	|		Ссылка.Магазин 							КАК Магазин,
	|		Ссылка.РабочаяСмена 					КАК Смена
	|	) КАК ОтработанноеВремя
	|ИЗ
	|	Документ.ЕжедневныйОтчет КАК ЕжедневныйОтчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЕжедневныйОтчет.Дата ВОЗР
	|";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ВыборкаДвижений = Выборка.ОтработанноеВремя.Выбрать();
		ДвиженияДокументаПоРегистру("ФактическоеРабочееВремяСотрудников", Выборка.Ссылка, ВыборкаДвижений);
	КонецЦикла;

КонецПроцедуры

Процедура УстановитьДополнительноеПраво(Право, Значение)
	
	// Только тем пользователям или группам, у которых это право никогда не проставлялось.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗначенияПрав.Пользователь КАК Пользователь
	|ПОМЕСТИТЬ СуществующиеПрава
	|ИЗ
	|	РегистрСведений.ЗначенияДополнительныхПравПользователя КАК ЗначенияПрав
	|ГДЕ
	|	ЗначенияПрав.Право = &Право
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗначенияПрав.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.ЗначенияДополнительныхПравПользователя КАК ЗначенияПрав
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуществующиеПрава КАК СуществующиеПрава
	|		ПО ЗначенияПрав.Пользователь = СуществующиеПрава.Пользователь
	|ГДЕ
	|	СуществующиеПрава.Пользователь ЕСТЬ NULL";
	Запрос.УстановитьПараметр("Право", Право);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Пользователь) Тогда
			НаборЗаписейПрав = РегистрыСведений.ЗначенияДополнительныхПравПользователя.СоздатьНаборЗаписей();
			НаборЗаписейПрав.Отбор.Пользователь.Установить(Выборка.Пользователь, Истина);
			НаборЗаписейПрав.Отбор.Право.Установить(Право, Истина);
			ЗаписьПрав = НаборЗаписейПрав.Добавить();
			ЗаписьПрав.Пользователь = Выборка.Пользователь;
			ЗаписьПрав.Право = Право;
			ЗаписьПрав.Значение = Значение;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписейПрав, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Определяет были ли переходы с "с НДС" на "без НДС" от текущего периода до следующего.
// Если были, то добавляет в ДанныеДляЗаписи необходимые строки
//
// Параметры:
//  ДанныеДляЗаписи		 		- 	 данные для записи в регистр 
//  ПериодыИспользованияНДС	 	- 	 периоды использования НДС в организации 
//  СНОТаблица					- 	 анализируемая таблица
//  Индекс				 		- 	 индекс анализируемой строки
//  НачальныйСтатусНДС	 		- 	 является/не является плательщиком НДС в данном периоде
//
Процедура ОбработатьПереходы(ДанныеДляЗаписи, ПериодыИспользованияНДС, СНОТаблица, Индекс, НачальныйСтатусНДС);
	
	МаксимальныйИндекс 		= СНОТаблица.Количество() - 1;
	ТекущаяСтрокаСНОТаблица	= СНОТаблица[Индекс];
	ТекущийПериод 			= ТекущаяСтрокаСНОТаблица.Период;
	ТекущийСтатусНДС		= НачальныйСтатусНДС;
	
	СледущийПериод = Дата(3999,12,31, 23,59,59);
	Если Индекс < МаксимальныйИндекс Тогда
		СледующаяСтрокаСНОТаблица = СНОТаблица[Индекс+1];
		Если ТекущаяСтрокаСНОТаблица.Организация = СледующаяСтрокаСНОТаблица.Организация
			И ТекущаяСтрокаСНОТаблица.Склад = СледующаяСтрокаСНОТаблица.Склад Тогда
			СледущийПериод = СледующаяСтрокаСНОТаблица.Период;
		КонецЕсли;
	КонецЕсли;
	
	Для каждого Строка Из ПериодыИспользованияНДС Цикл
		
		Если Строка.НачалоПериода >= ТекущийПериод 
			И Строка.НачалоПериода < СледущийПериод 
			И ТекущийСтатусНДС Тогда
			
			НоваяСтрока = ДанныеДляЗаписи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрокаСНОТаблица,, "Период, ОсвобожденОтНДС");
			
			НоваяСтрока.Период = Строка.НачалоПериода;
			НоваяСтрока.ОсвобожденОтНДС = Ложь;
			
			ТекущийСтатусНДС = Ложь;
			
		КонецЕсли;
		
		Если Строка.КонецПериода >= ТекущийПериод 
			И Строка.КонецПериода < СледущийПериод 
			И НЕ ТекущийСтатусНДС Тогда
			
			НоваяСтрока = ДанныеДляЗаписи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрокаСНОТаблица,, "Период, ОсвобожденОтНДС");
			
			НоваяСтрока.Период = Строка.КонецПериода;
			НоваяСтрока.ОсвобожденОтНДС = Истина;

			ТекущийСтатусНДС = НачальныйСтатусНДС; // Возвращение к исходному
		
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура БезЗарегистрированияДанныхКОбработкеДляПерехода(Параметры) Экспорт
	
	// Одна процедура, вызывается в случае, когда данные регистрировать не нужно.
	
КонецПроцедуры

// Функция - Является плательщиком НДС
//
// Параметры:
//  СНООрганизации	 - 	 таблица с СНО  организации 
//  Период			 - 	 дата на которую нужно определить признак 
// 
// Возвращаемое значение:
//   Булево 
//
Функция ОсвобожденОтНДС(ПериодыИспользованияНДС, Период)
	
	Для каждого Строка из ПериодыИспользованияНДС Цикл
		
		Если Период >= Строка.НачалоПериода И Период < Строка.КонецПериода Тогда
			
			Возврат Ложь
			
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат Истина
	
КонецФункции

Процедура ОбновитьДвиженияВознагражденийПоОтчетуКоминенту(Параметры) Экспорт
	
	ИспользоватьРасчетыСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетыСКлиентами");
	Если ИспользоватьРасчетыСКлиентами Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетыСКлиентами.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ТаблицаРегистраторов
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
		|ГДЕ
		|	РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И РасчетыСКлиентами.Регистратор ССЫЛКА Документ.ОтчетКомитентуОПродажах
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасчетыСКлиентами.Период КАК Период,
		|	РасчетыСКлиентами.Регистратор КАК Регистратор,
		|	РасчетыСКлиентами.НомерСтроки КАК НомерСтроки,
		|	РасчетыСКлиентами.Активность КАК Активность,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	РасчетыСКлиентами.Магазин КАК Магазин,
		|	РасчетыСКлиентами.Организация КАК Организация,
		|	РасчетыСКлиентами.Контрагент КАК Контрагент,
		|	РасчетыСКлиентами.ДокументРасчета КАК ДокументРасчета,
		|	РасчетыСКлиентами.ЗаказПокупателя КАК ЗаказПокупателя,
		|	РасчетыСКлиентами.Сумма КАК Сумма
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
		|ГДЕ
		|	РасчетыСКлиентами.Регистратор В
		|			(ВЫБРАТЬ
		|				ТаблицаРегистраторов.Регистратор КАК Регистратор
		|			ИЗ
		|				ТаблицаРегистраторов КАК ТаблицаРегистраторов)
		|ИТОГИ ПО
		|	Регистратор";
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока Выборка.Следующий() Цикл
			ВыборкаДвижений = Выборка.Выбрать();
			ДвиженияДокументаПоРегистру("РасчетыСКлиентами", Выборка.Регистратор, ВыборкаДвижений);
		КонецЦикла;
	КонецЕсли;
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура ОбновитьДвиженияВознагражденийПоПКО(Параметры) Экспорт
	
	ИспользоватьРасчетыСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетыСКлиентами");
	Если ИспользоватьРасчетыСКлиентами Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриходныйКассовыйОрдер.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ТаблицаРегистраторов
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
		|ГДЕ
		|	ПриходныйКассовыйОрдер.Проведен
		|	И ПриходныйКассовыйОрдер.ХозяйственнаяОперация = &ХозяйственнаяОперация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РасчетыСКлиентами.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ТаблицаПравильныхПКО
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
		|ГДЕ
		|	РасчетыСКлиентами.Регистратор В
		|			(ВЫБРАТЬ
		|				ТаблицаРегистраторов.Ссылка КАК Регистратор
		|			ИЗ
		|				ТаблицаРегистраторов КАК ТаблицаРегистраторов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаРегистраторов.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ТаблицаНеПравильныхПКО
		|ИЗ
		|	ТаблицаРегистраторов КАК ТаблицаРегистраторов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПравильныхПКО КАК ТаблицаПравильныхПКО
		|		ПО ТаблицаРегистраторов.Ссылка = ТаблицаПравильныхПКО.Регистратор
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ТаблицаПравильныхПКО.Регистратор ЕСТЬ NULL
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДокумента.Дата КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	ДанныеДокумента.Организация КАК Организация,
		|	ДанныеДокумента.Касса.Магазин КАК Магазин,
		|	ДанныеДокумента.Контрагент КАК Контрагент,
		|	ДанныеДокумента.Ссылка КАК Регистратор,
		|	ЕСТЬNULL(ТабличнаяЧастьРасшифровкаПлатежа.Сумма, ДанныеДокумента.СуммаДокумента) КАК Сумма,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ТабличнаяЧастьРасшифровкаПлатежа.ДокументРасчетовСКонтрагентом, ДанныеДокумента.Ссылка) В (&МассивПустыхДокументовРасчета)
		|			ТОГДА ДанныеДокумента.Ссылка
		|		ИНАЧЕ ЕСТЬNULL(ТабличнаяЧастьРасшифровкаПлатежа.ДокументРасчетовСКонтрагентом, ДанныеДокумента.Ссылка)
		|	КОНЕЦ КАК ДокументРасчета,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧастьРасшифровкаПлатежа.ДокументРасчетовСКонтрагентом ССЫЛКА Документ.ЧекККМ
		|				ИЛИ ТабличнаяЧастьРасшифровкаПлатежа.ДокументРасчетовСКонтрагентом ССЫЛКА Документ.ЧекККМ
		|			ТОГДА ТабличнаяЧастьРасшифровкаПлатежа.ДокументРасчетовСКонтрагентом.ЗаказПокупателя
		|		ИНАЧЕ ДанныеДокумента.ЗаказПокупателя
		|	КОНЕЦ КАК ЗаказПокупателя
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ТабличнаяЧастьРасшифровкаПлатежа
		|		ПО (ТабличнаяЧастьРасшифровкаПлатежа.Ссылка = ДанныеДокумента.Ссылка)
		|ГДЕ
		|	ДанныеДокумента.Ссылка В
		|			(ВЫБРАТЬ
		|				ТаблицаНеПравильныхПКО.Ссылка КАК Регистратор
		|			ИЗ
		|				ТаблицаНеПравильныхПКО КАК ТаблицаНеПравильныхПКО)
		|	И ДанныеДокумента.ХозяйственнаяОперация = &ХозяйственнаяОперация
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТабличнаяЧастьРасшифровкаПлатежа.НомерСтроки
		|ИТОГИ ПО
		|	Регистратор";
		
		Запрос.УстановитьПараметр("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВознаграждениеОтКомитента);
		
		МассивПустыхДокументовРасчета = Новый Массив;
		МассивПустыхДокументовРасчета.Добавить(Документы.РеализацияТоваров.ПустаяСсылка());
		МассивПустыхДокументовРасчета.Добавить(Документы.ЧекККМ.ПустаяСсылка());
		МассивПустыхДокументовРасчета.Добавить(Неопределено);
		
		Запрос.УстановитьПараметр("МассивПустыхДокументовРасчета", МассивПустыхДокументовРасчета);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока Выборка.Следующий() Цикл
			ВыборкаДвижений = Выборка.Выбрать();
			ДвиженияДокументаПоРегистру("РасчетыСКлиентами", Выборка.Регистратор, ВыборкаДвижений);
		КонецЦикла;
	КонецЕсли;
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура ОбновитьВидКИ(ВидКИ, Тип, МожноИзменятьСпособРедактирования, РедактированиеТолькоВДиалоге, АдресТолькоРоссийский, Порядок = Неопределено, МеждународныйФорматАдреса = Ложь)

	НастройкиПроверки = Новый Структура;
	НастройкиПроверки.Вставить("АдресТолькоРоссийский", 		АдресТолькоРоссийский);
	НастройкиПроверки.Вставить("ПроверятьКорректность", 		Ложь);
	НастройкиПроверки.Вставить("ЗапрещатьВводНекорректного", 	Ложь);
	НастройкиПроверки.Вставить("СкрыватьНеактуальныеАдреса", 	Ложь);
	НастройкиПроверки.Вставить("ВключатьСтрануВПредставление", 	Ложь);
	НастройкиПроверки.Вставить("ТелефонCДобавочнымНомером", 	Истина);
	НастройкиПроверки.Вставить("Используется", 	Истина);
	
	МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Тип);
	ПараметрыВида.Вид = ВидКИ;
	ПараметрыВида.Тип = Тип;
	ПараметрыВида.Порядок = Порядок;
	ПараметрыВида.МожноИзменятьСпособРедактирования = МожноИзменятьСпособРедактирования;
	ПараметрыВида.РедактированиеТолькоВДиалоге = РедактированиеТолькоВДиалоге;
	ПараметрыВида.ОбязательноеЗаполнение = Ложь;
	ПараметрыВида.НастройкиПроверки = НастройкиПроверки;
	ПараметрыВида.МеждународныйФорматАдреса = МеждународныйФорматАдреса;
	
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
КонецПроцедуры

Функция ДанныеПоВозвратуУслуг(Параметры) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Продажи.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ТаблицаВЗапросе
	|ИЗ
	|	РегистрНакопления.Продажи КАК Продажи
	|ГДЕ
	|	Продажи.Склад <> &ПустойСклад
	|	И Продажи.Номенклатура.ТипНоменклатуры = &Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Продажи.Период КАК Период,
	|	Продажи.Активность КАК Активность,
	|	Продажи.Магазин КАК Магазин,
	|	ВЫБОР
	|		КОГДА Продажи.Номенклатура.ТипНоменклатуры = &Услуга
	|			ТОГДА &ПустойСклад
	|		ИНАЧЕ Продажи.Склад
	|	КОНЕЦ КАК Склад,
	|	Продажи.Номенклатура КАК Номенклатура,
	|	Продажи.Характеристика КАК Характеристика,
	|	Продажи.ДокументПродажи КАК ДокументПродажи,
	|	Продажи.Продавец КАК Продавец,
	|	Продажи.ЗаказПокупателя КАК ЗаказПокупателя,
	|	Продажи.Количество КАК Количество,
	|	Продажи.Стоимость КАК Стоимость,
	|	Продажи.СтоимостьБезСкидок КАК СтоимостьБезСкидок,
	|	Продажи.НДС КАК НДС,
	|	Продажи.АналитикаХозяйственнойОперации КАК АналитикаХозяйственнойОперации,
	|	Продажи.Регистратор КАК Ссылка,
	|	Продажи.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.Продажи КАК Продажи
	|ГДЕ
	|	Продажи.Регистратор В
	|			(ВЫБРАТЬ
	|				ТаблицаВЗапросе.Регистратор
	|			ИЗ
	|				ТаблицаВЗапросе КАК ТаблицаВЗапросе)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период
	|ИТОГИ ПО
	|	Ссылка";
	
	Запрос.Параметры.Вставить("ПустойСклад", Справочники.Склады.ПустаяСсылка());
	Запрос.Параметры.Вставить("Услуга", Перечисления.ТипыНоменклатуры.Услуга);
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Релиз_2_3_7

Процедура ПеренестиБанковскиеСчетаОрганизаций() Экспорт
	
	//Перенос справочника БанковскиеСчетаОрганизаций
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	БанковскиеСчета.Владелец КАК Владелец,
	|	БанковскиеСчета.НомерСчета КАК НомерСчета,
	|	БанковскиеСчета.Банк КАК Банк
	|ПОМЕСТИТЬ СозданныеРанееБанковскиеСчета
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец ССЫЛКА Справочник.Организации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьБанковскиеСчетаОрганизаций.Владелец КАК Владелец,
	|	УдалитьБанковскиеСчетаОрганизаций.Наименование КАК Наименование,
	|	УдалитьБанковскиеСчетаОрганизаций.Банк КАК Банк,
	|	УдалитьБанковскиеСчетаОрганизаций.НомерСчета КАК НомерСчета,
	|	УдалитьБанковскиеСчетаОрганизаций.РучноеИзменениеРеквизитовБанка КАК РучноеИзменениеРеквизитовБанка,
	|	УдалитьБанковскиеСчетаОрганизаций.ГородБанка КАК ГородБанка,
	|	УдалитьБанковскиеСчетаОрганизаций.АдресБанка КАК АдресБанка,
	|	УдалитьБанковскиеСчетаОрганизаций.ТелефоныБанка КАК ТелефоныБанка,
	|	УдалитьБанковскиеСчетаОрганизаций.КоррСчетБанка КАК КоррСчетБанка,
	|	УдалитьБанковскиеСчетаОрганизаций.НаименованиеБанка КАК НаименованиеБанка,
	|	УдалитьБанковскиеСчетаОрганизаций.БИКБанка КАК БИКБанка
	|ИЗ
	|	Справочник.УдалитьБанковскиеСчетаОрганизаций КАК УдалитьБанковскиеСчетаОрганизаций
	|ГДЕ
	|	НЕ (УдалитьБанковскиеСчетаОрганизаций.Владелец, УдалитьБанковскиеСчетаОрганизаций.Банк, УдалитьБанковскиеСчетаОрганизаций.НомерСчета) В
	|				(ВЫБРАТЬ
	|					СозданныеРанееБанковскиеСчета.Владелец,
	|					СозданныеРанееБанковскиеСчета.Банк,
	|					СозданныеРанееБанковскиеСчета.НомерСчета
	|				ИЗ
	|					СозданныеРанееБанковскиеСчета КАК СозданныеРанееБанковскиеСчета)";
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		БанковскийСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(БанковскийСчет, Выборка);
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(БанковскийСчет);
		
	КонецЦикла;
	
	//Интеграция с Яндекс.Кассой
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НастройкиЯндексКассыДополнительныеНастройки.Ссылка КАК Ссылка,
	|	УдалитьБанковскиеСчетаОрганизаций.Владелец КАК Владелец,
	|	УдалитьБанковскиеСчетаОрганизаций.НомерСчета КАК НомерСчета,
	|	УдалитьБанковскиеСчетаОрганизаций.Банк КАК Банк,
	|	УдалитьБанковскиеСчетаОрганизаций.Ссылка КАК БанковскийСчетОрганизации
	|ПОМЕСТИТЬ ВТНастройкиЯндексКассы
	|ИЗ
	|	Справочник.НастройкиЯндексКассы.ДополнительныеНастройки КАК НастройкиЯндексКассыДополнительныеНастройки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УдалитьБанковскиеСчетаОрганизаций КАК УдалитьБанковскиеСчетаОрганизаций
	|		ПО НастройкиЯндексКассыДополнительныеНастройки.Значение = УдалитьБанковскиеСчетаОрганизаций.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТНастройкиЯндексКассы.Ссылка КАК Ссылка,
	|	ВТНастройкиЯндексКассы.БанковскийСчетОрганизации КАК БанковскийСчетОрганизации,
	|	БанковскиеСчета.Ссылка КАК БанковскийСчет
	|ИЗ
	|	ВТНастройкиЯндексКассы КАК ВТНастройкиЯндексКассы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ПО ВТНастройкиЯндексКассы.Владелец = БанковскиеСчета.Владелец
	|			И ВТНастройкиЯндексКассы.НомерСчета = БанковскиеСчета.НомерСчета
	|			И ВТНастройкиЯндексКассы.Банк = БанковскиеСчета.Банк";
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Значение", Выборка.БанковскийСчетОрганизации);
		
		НастройкиЯндексКассы = Выборка.Ссылка.ПолучитьОбъект();
		СтрокиНастроек = НастройкиЯндексКассы.ДополнительныеНастройки.НайтиСтроки(ПараметрыОтбора);
		Для Каждого СтрокаНастроек Из СтрокиНастроек Цикл
			СтрокаНастроек.Значение = Выборка.БанковскийСчет;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкиЯндексКассы);
		
	КонецЦикла;
	
	//Ввод начальных остатков узла
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВводНачальныхОстатковУзлаДенежныеСредстваБезналичные.Ссылка КАК Ссылка,
	|	ВводНачальныхОстатковУзлаДенежныеСредстваБезналичные.УдалитьБанковскийСчет КАК УдалитьБанковскийСчет,
	|	ВводНачальныхОстатковУзлаДенежныеСредстваБезналичные.Организация КАК Организация
	|ПОМЕСТИТЬ ВТВводНачальныхОстатковУзла
	|ИЗ
	|	Документ.ВводНачальныхОстатковУзла.ДенежныеСредстваБезналичные КАК ВводНачальныхОстатковУзлаДенежныеСредстваБезналичные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТВводНачальныхОстатковУзла.Ссылка КАК Ссылка,
	|	БанковскиеСчета.Ссылка КАК БанковскийСчет,
	|	ВТВводНачальныхОстатковУзла.УдалитьБанковскийСчет КАК УдалитьБанковскийСчет,
	|	ВТВводНачальныхОстатковУзла.Организация КАК Организация
	|ИЗ
	|	ВТВводНачальныхОстатковУзла КАК ВТВводНачальныхОстатковУзла
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ПО ВТВводНачальныхОстатковУзла.УдалитьБанковскийСчет.Банк = БанковскиеСчета.Банк
	|			И ВТВводНачальныхОстатковУзла.УдалитьБанковскийСчет.НомерСчета = БанковскиеСчета.НомерСчета
	|			И ВТВводНачальныхОстатковУзла.УдалитьБанковскийСчет.Владелец = БанковскиеСчета.Владелец";
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Организация", Выборка.Организация);
		ПараметрыОтбора.Вставить("УдалитьБанковскийСчет", Выборка.УдалитьБанковскийСчет);
		
		ОбъектДокумент = Выборка.Ссылка.ПолучитьОбъект();
		СтрокиДС = ОбъектДокумент.ДенежныеСредстваБезналичные.НайтиСтроки(ПараметрыОтбора);
		Для Каждого СтрокаДС Из СтрокиДС Цикл
			СтрокаДС.БанковскийСчет = Выборка.БанковскийСчет;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектДокумент);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерезаполнитьРегистрНакопленияДенежныеСредстваБезналичные(Параметры) Экспорт
	
	РезультатОбработки = Истина;
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка КАК Ссылка,
	|	БанковскиеСчета.Владелец КАК Владелец,
	|	БанковскиеСчета.Банк КАК Банк,
	|	БанковскиеСчета.НомерСчета КАК НомерСчета
	|ПОМЕСТИТЬ БанковскиеСчета
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьБанковскиеСчетаОрганизаций.Ссылка КАК Ссылка,
	|	УдалитьБанковскиеСчетаОрганизаций.Владелец КАК Владелец,
	|	УдалитьБанковскиеСчетаОрганизаций.Банк КАК Банк,
	|	УдалитьБанковскиеСчетаОрганизаций.НомерСчета КАК НомерСчета
	|ПОМЕСТИТЬ БанковскиеСчетаОрганизаций
	|ИЗ
	|	Справочник.УдалитьБанковскиеСчетаОрганизаций КАК УдалитьБанковскиеСчетаОрганизаций
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка КАК БанковскийСчет,
	|	БанковскиеСчетаОрганизаций.Ссылка КАК БанковскийСчетОрганизации
	|ИЗ
	|	БанковскиеСчета КАК БанковскиеСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	|		ПО БанковскиеСчета.Владелец = БанковскиеСчетаОрганизаций.Владелец
	|			И БанковскиеСчета.НомерСчета = БанковскиеСчетаОрганизаций.НомерСчета
	|			И БанковскиеСчета.Банк = БанковскиеСчетаОрганизаций.Банк";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	СоответствиеБанковскихСчетов = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		СоответствиеБанковскихСчетов.Вставить(Выборка.БанковскийСчетОрганизации, Выборка.БанковскийСчет);
	КонецЦикла;
	
	ШаблонТекстаОшибки = НСтр("ru = 'Не удалось обработать движения по регистру ДенежныеСредстваБезналичные: %1 по причине: 
									|%2'");
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДенежныеСредстваБезналичные.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваБезналичные КАК ДенежныеСредстваБезналичные
	|ГДЕ
	|	ДенежныеСредстваБезналичные.БанковскийСчет ССЫЛКА Справочник.УдалитьБанковскиеСчетаОрганизаций";
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ДенежныеСредстваБезналичные");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			НаборЗаписей = РегистрыНакопления.ДенежныеСредстваБезналичные.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборЗаписей.Прочитать();
			
			Для Каждого Движение Из НаборЗаписей Цикл
				Если ТипЗнч(Движение.БанковскийСчет) = Тип("СправочникСсылка.УдалитьБанковскиеСчетаОрганизаций") Тогда
					Движение.БанковскийСчет = СоответствиеБанковскихСчетов.Получить(Движение.БанковскийСчет);
				КонецЕсли;
			КонецЦикла;
			
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтрШаблон(ШаблонТекстаОшибки, Выборка.Регистратор, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстОшибки);
				
			РезультатОбработки = Ложь;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = РезультатОбработки;
	
КонецПроцедуры

// Возвращает массив объектов для заполнения банковского счета организации
//
// Параметры:
//  ТипОбъекта - строка, Тип объекта. Пример: Документ.ВозвратТоваровПоставщику, Справочник.ДоговорыКонтрагентов
//  ИмяРеквизита - строка, Имя реквизита. Пример: "БанковскийСчетКасса", "БанковскийСчет", "БанковскийСчетОрганизации"
//
// Возвращаемое значение:
//   Массив ссылок
//
Функция ОбъектыДляЗаполненияБанковскогоСчетаОрганизации(ТипОбъекта, ИмяРеквизита) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СхемаЗапроса = Новый СхемаЗапроса;
	ПакетЗапросов = СхемаЗапроса.ПакетЗапросов[0];
	Операторы = ПакетЗапросов.Операторы[0];
	ИсточникОбъект = Операторы.Источники.Добавить(ТипОбъекта,"Источник");
	Операторы.ВыбираемыеПоля.Добавить("Источник.Ссылка");
	
	Операторы.Отбор.Добавить(
		"НЕ Источник." + "Удалить" + ИмяРеквизита + " = ЗНАЧЕНИЕ(Справочник.УдалитьБанковскиеСчетаОрганизаций.ПустаяСсылка)");
	Операторы.Отбор.Добавить(
		"Источник." + ИмяРеквизита + ".Ссылка ЕСТЬ NULL");
	
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	МассивДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивДокументов;
	
КонецФункции

// Заполняет реквизит БанковскийСчетОрганизации из УдалитьБанковскийСчетОрганизации у переданной выборки объектов
//
// Параметры:
//  ПолноеИмяОбъекта - Строка, полное имя объекта метаданных.
//  ИмяРеквизита - Строка, имя реквизита банковского счета организации.
//  ВыборкаДокументов - Выборка, документы для обработки.
//  Параметры - Структура, параметры обновления.
//
Процедура ЗаполнитьБанковскийСчетОрганизацииОбъектов(ПолноеИмяОбъекта, ИмяРеквизита, ВыборкаОбъектов, Параметры) Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка КАК Ссылка,
	|	БанковскиеСчета.Владелец КАК Владелец,
	|	БанковскиеСчета.Банк КАК Банк,
	|	БанковскиеСчета.НомерСчета КАК НомерСчета
	|ПОМЕСТИТЬ БанковскиеСчета
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьБанковскиеСчетаОрганизаций.Ссылка КАК Ссылка,
	|	УдалитьБанковскиеСчетаОрганизаций.Владелец КАК Владелец,
	|	УдалитьБанковскиеСчетаОрганизаций.Банк КАК Банк,
	|	УдалитьБанковскиеСчетаОрганизаций.НомерСчета КАК НомерСчета
	|ПОМЕСТИТЬ БанковскиеСчетаОрганизаций
	|ИЗ
	|	Справочник.УдалитьБанковскиеСчетаОрганизаций КАК УдалитьБанковскиеСчетаОрганизаций
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка КАК БанковскийСчет,
	|	БанковскиеСчетаОрганизаций.Ссылка КАК БанковскийСчетОрганизации
	|ИЗ
	|	БанковскиеСчета КАК БанковскиеСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	|		ПО БанковскиеСчета.Владелец = БанковскиеСчетаОрганизаций.Владелец
	|			И БанковскиеСчета.НомерСчета = БанковскиеСчетаОрганизаций.НомерСчета
	|			И БанковскиеСчета.Банк = БанковскиеСчетаОрганизаций.Банк";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	СоответствиеБанковскихСчетов = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		СоответствиеБанковскихСчетов.Вставить(Выборка.БанковскийСчетОрганизации, Выборка.БанковскийСчет);
	КонецЦикла;
	
	ШаблонТекстаОшибки = НСтр("ru = 'Не удалось обработать объект: %1 по причине: 
									|%2'");
	
	Пока ВыборкаОбъектов.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаОбъектов.Ссылка);
			Блокировка.Заблокировать();
			
			Объект = ВыборкаОбъектов.Ссылка.ПолучитьОбъект();
			
			Если Объект = Неопределено Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			УдалитьБанковскийСчетОрганизации = Объект["Удалить" + ИмяРеквизита];
			Если ТипЗнч(УдалитьБанковскийСчетОрганизации) = Тип("СправочникСсылка.УдалитьБанковскиеСчетаОрганизаций") Тогда
				БанковскийСчетОрганизации = СоответствиеБанковскихСчетов.Получить(УдалитьБанковскийСчетОрганизации);
				Объект[ИмяРеквизита] = БанковскийСчетОрганизации;
			Иначе
				Объект[ИмяРеквизита] = УдалитьБанковскийСчетОрганизации;
			КонецЕсли;
			
			Если ОбщегоНазначения.ЭтоДокумент(Объект.Ссылка.Метаданные()) Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект,,, РежимЗаписиДокумента.Запись);
			Иначе
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
			КонецЕсли;
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтрШаблон(ШаблонТекстаОшибки, ВыборкаОбъектов.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстОшибки);
			
		КонецПопытки;
			
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = НЕ ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

Процедура ЗаполнитьКонстантуНаличияОрганизацийСЕНВД() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(ПрименениеСистемНалогообложения.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация,
	               |	ЕСТЬNULL(ПрименениеСистемНалогообложения.Магазин, ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)) КАК Магазин,
	               |	ЕСТЬNULL(ПрименениеСистемНалогообложения.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК Склад,
	               |	ЕСТЬNULL(ПрименениеСистемНалогообложения.ТоварнаяГруппа, ЗНАЧЕНИЕ(Справочник.ТоварныеГруппы.ПустаяСсылка)) КАК ТоварнаяГруппа,
	               |	ПрименениеСистемНалогообложения.СистемаНалогообложения КАК СистемаНалогообложения,
	               |	ПрименениеСистемНалогообложения.Период КАК Период
	               |ИЗ
	               |	РегистрСведений.ПрименениеСистемНалогообложения.СрезПоследних КАК ПрименениеСистемНалогообложения
	               |ГДЕ
	               |	ПрименениеСистемНалогообложения.СистемаНалогообложения = &СистемаНалогообложения";
	Запрос.УстановитьПараметр("СистемаНалогообложения", Перечисления.ТипыСистемНалогообложенияККТ.ЕНВД);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Константы.ЕНВДВОрганизациях.Установить(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Релиз_2_3_9

Процедура ОбновитьПравилаОбменаСОборудованием() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПравилаОбменаСПодключаемымОборудованием.Ссылка КАК Ссылка,
	|	ПравилаОбменаСПодключаемымОборудованием.ТипПодключаемогоОборудования КАК ТипПодключаемогоОборудования
	|ИЗ
	|	Справочник.ПравилаОбменаСПодключаемымОборудованием КАК ПравилаОбменаСПодключаемымОборудованием
	|ГДЕ
	|	ПравилаОбменаСПодключаемымОборудованием.ТипПодключаемогоОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.УдалитьККМОфлайн)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПравилоОбмена = Выборка.Ссылка.ПолучитьОбъект();
		ПравилоОбмена.ТипПодключаемогоОборудования = Перечисления.ТипыОфлайнОборудования.ККМ;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ПравилоОбмена);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерезаполнитьДокументыФизическихЛиц(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыДокументовФизическихЛиц.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ТаблицаВидыДокументов
	|ИЗ
	|	Справочник.ВидыДокументовФизическихЛиц КАК ВидыДокументовФизическихЛиц
	|ГДЕ
	|	ВидыДокументовФизическихЛиц.Предопределенный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыФизическихЛиц.Гражданство КАК Гражданство,
	|	ДокументыФизическихЛиц.ВидДокумента КАК ВидДокумента,
	|	ДокументыФизическихЛиц.Физлицо КАК Физлицо
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц КАК ДокументыФизическихЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаВидыДокументов КАК ТаблицаВидыДокументов
	|		ПО (ТаблицаВидыДокументов.Ссылка = ДокументыФизическихЛиц.ВидДокумента)";
	
	ШаблонТекстаОшибки = НСтр("ru = 'Не удалось обработать запись регистра ДокументыФизическихЛиц по причине: 
								|%1'");
	Выборка = Запрос.Выполнить().Выбрать();
	НаборЗаписейДокументов = РегистрыСведений.ДокументыФизическихЛиц.СоздатьНаборЗаписей();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			НаборЗаписейДокументов.Отбор.Физлицо.Установить(Выборка.Физлицо);
			НаборЗаписейДокументов.Отбор.ВидДокумента.Установить(Выборка.ВидДокумента);
			НаборЗаписейДокументов.Прочитать();
			
			Для Каждого ЗаписьДокумента Из НаборЗаписейДокументов Цикл
				ЗаписьДокумента.Гражданство = ПредопределенноеЗначение("Справочник.СтраныМира.Россия");
			КонецЦикла;
			
			НаборЗаписейДокументов.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтрШаблон(ШаблонТекстаОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
			
			РезультатОбработки = Ложь;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ОбновитьКонстантуПодключаемогоОборудования() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Константы.ИспользоватьПодключаемоеОборудование.Установить(Истина);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ОбновитьКонстантуИспользоватьКодыВидовНоменклатурнойКлассификации() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьНоменклатураСИЗ
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.КодВидаНоменклатурнойКлассификации = """"";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда	
		Константы.ИспользоватьКодыВидовНоменклатурнойКлассификации.Установить(Истина);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область Релиз_2_3_10

Процедура ОбновитьКнопкиВерхнейПанелиРМК() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НастройкиРМК.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НастройкиРМК КАК НастройкиРМК";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеИзменились    = Ложь;
		
		НастройкаРМК 		= Выборка.Ссылка.ПолучитьОбъект();
		НастройкаРМК.ОбновитьКнопкиВерхнейПанели(ДанныеИзменились);
		
		Если ДанныеИзменились Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкаРМК);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьПризнакиПредметовРасчета() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыНоменклатуры.Ссылка КАК Ссылка,
	|	ВидыНоменклатуры.ОсобенностьУчета КАК ОсобенностьУчета,
	|	ВидыНоменклатуры.ПризнакПредметаРасчета КАК ПризнакПредметаРасчета
	|ПОМЕСТИТЬ втВидыНоменклатуры
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВидыНоменклатуры.Ссылка КАК Ссылка,
	|	ЗНАЧЕНИЕ(Справочник.ПризнакиПредметовРасчета.ПодакцизныйТоварМаркируемыйСИНеИмеющийКМ) КАК ПризнакПредметаРасчета
	|ИЗ
	|	втВидыНоменклатуры КАК втВидыНоменклатуры
	|ГДЕ
	|	втВидыНоменклатуры.ПризнакПредметаРасчета = ЗНАЧЕНИЕ(Справочник.ПризнакиПредметовРасчета.ПодакцизныйТовар)
	|	И втВидыНоменклатуры.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втВидыНоменклатуры.Ссылка,
	|	ЗНАЧЕНИЕ(Справочник.ПризнакиПредметовРасчета.ПодакцизныйТоварМаркируемыйСИИмеющийКМ)
	|ИЗ
	|	втВидыНоменклатуры КАК втВидыНоменклатуры
	|ГДЕ
	|	втВидыНоменклатуры.ПризнакПредметаРасчета = ЗНАЧЕНИЕ(Справочник.ПризнакиПредметовРасчета.ПодакцизныйТовар)
	|	И втВидыНоменклатуры.ОсобенностьУчета В(&ТабачнаяПродукция)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втВидыНоменклатуры.Ссылка,
	|	ЗНАЧЕНИЕ(Справочник.ПризнакиПредметовРасчета.ТоварМаркируемыйСИНеИмеющийКМ)
	|ИЗ
	|	втВидыНоменклатуры КАК втВидыНоменклатуры
	|ГДЕ
	|	втВидыНоменклатуры.ПризнакПредметаРасчета = ЗНАЧЕНИЕ(Справочник.ПризнакиПредметовРасчета.Товар)
	|	И втВидыНоменклатуры.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПродукцияМаркируемаяДляГИСМ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втВидыНоменклатуры.Ссылка,
	|	ЗНАЧЕНИЕ(Справочник.ПризнакиПредметовРасчета.ТоварМаркируемыйСИИмеющийКМ)
	|ИЗ
	|	втВидыНоменклатуры КАК втВидыНоменклатуры
	|ГДЕ
	|	втВидыНоменклатуры.ПризнакПредметаРасчета = ЗНАЧЕНИЕ(Справочник.ПризнакиПредметовРасчета.Товар)
	|	И втВидыНоменклатуры.ОсобенностьУчета В(&МаркируемаяНеподакцизнаяПродукция)";	
	
	ТабачнаяПродукция = Новый Массив;
	ТабачнаяПродукция.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.АльтернативныйТабак);
	ТабачнаяПродукция.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция);
	Запрос.УстановитьПараметр("ТабачнаяПродукция", ТабачнаяПродукция);
	
	ВидыПродукциИСМП = ИнтеграцияИСКлиентСервер.ВидыПродукцииИСМП(Ложь, Истина);
	
	МаркируемаяНеподакцизнаяПродукция = Новый Массив;
	Для Каждого ВидПродукцииИСМП Из ВидыПродукциИСМП Цикл
		ОсобенностьУчета = ИнтеграцияИСРТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукцииИСМП, Ложь);
		МаркируемаяНеподакцизнаяПродукция.Добавить(ОсобенностьУчета);
	КонецЦикла;
	Запрос.УстановитьПараметр("МаркируемаяНеподакцизнаяПродукция", МаркируемаяНеподакцизнаяПродукция);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировки = БлокировкаДанных.Добавить("Справочник.ВидыНоменклатуры");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			БлокировкаДанных.Заблокировать();
			
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЗаполнитьЗначенияСвойств(СправочникОбъект, Выборка, "ПризнакПредметаРасчета");
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
			ШаблонОшибки = СтрШаблон("Не удалось изменить элемент справочника: %1", Выборка.Ссылка);
			ИмяСобытия = НСтр(ШаблонОшибки, КодОсновногоЯзыка);
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(
				ИмяСобытия,
				УровеньЖурналаРегистрации.Ошибка,
				Выборка.Ссылка,
				,
				ТекстОшибки);
				
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Релиз_2_3_11

Процедура ЗаполнитьИдентификаторПлатежныхСистем() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СоответствиеНастроекИнтеграции.ТорговыйОбъект КАК ТорговыйОбъект,
	|	СоответствиеНастроекИнтеграции.Организация КАК Организация,
	|	СоответствиеНастроекИнтеграции.СпособОплаты КАК СпособОплаты,
	|	СоответствиеНастроекИнтеграции.Интеграция КАК Интеграция,
	|	СоответствиеНастроекИнтеграции.Интеграция.Родитель.ПлатежнаяСистема КАК ПлатежнаяСистема
	|ИЗ
	|	РегистрСведений.СоответствиеНастроекИнтеграции КАК СоответствиеНастроекИнтеграции
	|ГДЕ
	|	СоответствиеНастроекИнтеграции.ИдентификаторПлатежнойСистемы = """"";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НастройкиИнтеграции = РегистрыСведений.СоответствиеНастроекИнтеграции.СоздатьНаборЗаписей();
		
		НастройкиИнтеграции.Отбор.Организация.Установить(Выборка.Организация);
		НастройкиИнтеграции.Отбор.ТорговыйОбъект.Установить(Выборка.ТорговыйОбъект);
		НастройкиИнтеграции.Отбор.СпособОплаты.Установить(Выборка.СпособОплаты);
		
		Если ЗначениеЗаполнено(Выборка.Интеграция) Тогда
			НастройкиИнтеграции.Прочитать();
		КонецЕсли;
		
		Если НастройкиИнтеграции.Количество() Тогда
			
			Запись 								 = НастройкиИнтеграции[0];
			
			Если ЗначениеЗаполнено(Выборка.ПлатежнаяСистема)
				И Не XMLСтрока(Выборка.ПлатежнаяСистема) = "SWiP" Тогда
			
				НастройкиТорговойТочки 				 = ИнтеграцияСПлатежнымиСистемами.НастройкиТорговойТочки(Выборка.Интеграция);
			
				Запись.ИдентификаторПлатежнойСистемы = НастройкиТорговойТочки.Идентификатор;

			Иначе
				Запись.ИдентификаторПлатежнойСистемы = "SWiP";
			КонецЕсли;
			
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкиИнтеграции);
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьКонстантыПечатиСлипЧека() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Константы.ПечатьСлипЧека.Установить(Истина);
	Константы.ПолныйСлипЧек.Установить(Истина);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ПерезаполнитьПризнакиПредметовРасчета() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыНоменклатуры.Ссылка КАК Ссылка,
	|	ВидыНоменклатуры.ОсобенностьУчета КАК ОсобенностьУчета,
	|	ВидыНоменклатуры.ПризнакПредметаРасчета КАК ПризнакПредметаРасчета
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|ГДЕ
	|	ВидыНоменклатуры.ПризнакПредметаРасчета.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировки = БлокировкаДанных.Добавить("Справочник.ВидыНоменклатуры");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			БлокировкаДанных.Заблокировать();
			
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ТипПризнакаПредметаРасчета = СправочникОбъект.ПризнакПредметаРасчета.ТипПризнакаПредметаРасчета;
			Если ТипПризнакаПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ПодакцизныйТоварМаркируемыйСИИмеющийКМ Тогда
				СправочникОбъект.ПризнакПредметаРасчета = ПредопределенноеЗначение("Справочник.ПризнакиПредметовРасчета.ПодакцизныйТоварМаркируемыйСИИмеющийКМ");
			ИначеЕсли ТипПризнакаПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ПодакцизныйТоварМаркируемыйСИНеИмеющийКМ Тогда
				СправочникОбъект.ПризнакПредметаРасчета = ПредопределенноеЗначение("Справочник.ПризнакиПредметовРасчета.ПодакцизныйТоварМаркируемыйСИНеИмеющийКМ");
			ИначеЕсли ТипПризнакаПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ТоварМаркируемыйСИИмеющийКМ Тогда
				СправочникОбъект.ПризнакПредметаРасчета = ПредопределенноеЗначение("Справочник.ПризнакиПредметовРасчета.ТоварМаркируемыйСИИмеющийКМ");
			ИначеЕсли ТипПризнакаПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ТоварМаркируемыйСИНеИмеющийКМ Тогда
				СправочникОбъект.ПризнакПредметаРасчета = ПредопределенноеЗначение("Справочник.ПризнакиПредметовРасчета.ТоварМаркируемыйСИНеИмеющийКМ");
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
			ШаблонОшибки = СтрШаблон("Не удалось изменить элемент справочника: %1", Выборка.Ссылка);
			ИмяСобытия = НСтр(ШаблонОшибки, КодОсновногоЯзыка);
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(
				ИмяСобытия,
				УровеньЖурналаРегистрации.Ошибка,
				Выборка.Ссылка,
				,
				ТекстОшибки);
				
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

