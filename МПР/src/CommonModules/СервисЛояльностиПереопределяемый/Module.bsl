#Область ПрограммныйИнтерфейс

// Производит разблокировку бонусов клиента при записи документа
//
Процедура РазблокироватьБонусыПриЗаписи(Источник, Отказ) Экспорт
	// Вставить содержимое обработчика.
КонецПроцедуры

// Выполняет обработку состояния бонусов клиентов
// Происходит проверка наличия заблокированных бонусов клиентов
// Если такие найдены и время экспирации для них истекло - происходит разблокировка
Процедура ОбработкаСостоянияБонусов() Экспорт
	// Вставить содержимое обработчика.
КонецПроцедуры

// Возвращает остатки бонусных баллов клиента
//
// Праметры: 
//  ДисконтнаяКарта - СправочникСсылка.ИнформационныеКарты
//
// Возвращаемое значение:
//	Структура - данные о бонусах клиента
//
Функция ПолучитьБонусыКлиента(ДисконтнаяКарта) Экспорт
	Возврат БонусныеБаллыСервер.ОстаткиИДвиженияБонусныхБаллов(ДисконтнаяКарта);	
КонецФункции

// Производит поиск карты клиента по параметрам, полученным через http-сервис
//
// Праметры: 
//  ПараметрыМетода - Структура - структура, содержащая в себе параметры клиента: ИдентификаторКартыКлиента, АдресЭП, НомерТелефона
//
// Возвращаемое значение:
//	СправочникСсылка.ИнформационныеКарты, Неопределено - дисконтная карта клиента
//
Функция НайтиКартуКлиента(ПараметрыМетода) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
		|	ВложенныйЗапрос.Ссылка КАК Ссылка,
		|	ВложенныйЗапрос.Приоритет КАК Приоритет
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ИнформационныеКарты.Ссылка КАК Ссылка,
		|		1 КАК Приоритет
		|	ИЗ
		|		Справочник.ИнформационныеКарты КАК ИнформационныеКарты
		|	ГДЕ
		|		(ИнформационныеКарты.КодКарты = &ИдентификаторКартыКлиента
		|				ИЛИ ИнформационныеКарты.Наименование = &ИдентификаторКартыКлиента)
		|		И НЕ ИнформационныеКарты.ПометкаУдаления
		|		И &ИдентификаторКартыКлиента <> """"
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Штрихкоды.Владелец,
		|		1
		|	ИЗ
		|		РегистрСведений.Штрихкоды КАК Штрихкоды
		|	ГДЕ
		|		&ИдентификаторКартыКлиента <> """"
		|		И Штрихкоды.Штрихкод = &ИдентификаторКартыКлиента
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ИнформационныеКарты.Ссылка,
		|		1
		|	ИЗ
		|		Справочник.ИнформационныеКарты КАК ИнформационныеКарты
		|	ГДЕ
		|		&ВладелецКарты <> """"
		|		И ВЫБОР
		|				КОГДА ИнформационныеКарты.ВладелецКарты ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВЫРАЗИТЬ(ИнформационныеКарты.ВладелецКарты КАК Справочник.Контрагенты).Наименование = &ВладелецКарты
		|				КОГДА ИнформационныеКарты.ВладелецКарты ССЫЛКА Справочник.ФизическиеЛица
		|					ТОГДА ВЫРАЗИТЬ(ИнформационныеКарты.ВладелецКарты КАК Справочник.ФизическиеЛица).Наименование = &ВладелецКарты
		|				КОГДА ИнформационныеКарты.ВладелецКарты ССЫЛКА Справочник.Пользователи
		|					ТОГДА ВЫРАЗИТЬ(ИнформационныеКарты.ВладелецКарты КАК Справочник.Пользователи).Наименование = &ВладелецКарты
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ИнформационныеКартыКонтактнаяИнформация.Ссылка,
		|		2
		|	ИЗ
		|		Справочник.ИнформационныеКарты.КонтактнаяИнформация КАК ИнформационныеКартыКонтактнаяИнформация
		|	ГДЕ
		|		(&АдресЭП <> """"
		|					И ИнформационныеКартыКонтактнаяИнформация.АдресЭП = &АдресЭП
		|					И ИнформационныеКартыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
		|				ИЛИ &НомерТелефона <> """"
		|					И ИнформационныеКартыКонтактнаяИнформация.НомерТелефона = &НомерТелефона
		|					И ИнформационныеКартыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
		|		И НЕ ИнформационныеКартыКонтактнаяИнформация.Ссылка.ПометкаУдаления
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ИнформационныеКарты.Ссылка,
		|		3
		|	ИЗ
		|		Справочник.ИнформационныеКарты КАК ИнформационныеКарты
		|	ГДЕ
		|		ИнформационныеКарты.ВладелецКарты В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					ФизическиеЛицаКонтактнаяИнформация.Ссылка КАК Ссылка
		|				ИЗ
		|					Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
		|				ГДЕ
		|					(&АдресЭП <> """"
		|							И ФизическиеЛицаКонтактнаяИнформация.АдресЭП = &АдресЭП
		|							И ФизическиеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
		|						ИЛИ &НомерТелефона <> """"
		|							И ФизическиеЛицаКонтактнаяИнформация.НомерТелефона = &НомерТелефона
		|							И ФизическиеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
		|					И НЕ ФизическиеЛицаКонтактнаяИнформация.Ссылка.ПометкаУдаления)
		|		И НЕ ИнформационныеКарты.ПометкаУдаления) КАК ВложенныйЗапрос
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВложенныйЗапрос.Приоритет";
	
	Запрос.УстановитьПараметр("ИдентификаторКартыКлиента", ПараметрыМетода.ИдентификаторКартыКлиента);
	Запрос.УстановитьПараметр("ВладелецКарты", ПараметрыМетода.Клиент);
	Запрос.УстановитьПараметр("АдресЭП", ПараметрыМетода.АдресЭП);
	Запрос.УстановитьПараметр("НомерТелефона", ПараметрыМетода.НомерТелефона);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Ссылка;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Производит поиск подарочного сертификата по параметрам, полученным через http-сервис
//
// Параметры:
//  ПараметрыМетода - Структура - структура, содержащая в себе параметры подарочного сертификата
//
// Возвращаемое значение:
//  СправочникСсылка.Номенклатура, Неопределено - подарочный сертификат
//
Функция НайтиПодарочныйСертификат(ПараметрыМетода) Экспорт
	
	ДанныеСертификата = Новый Структура;
	ДанныеСертификата.Вставить("СерийныйНомер"			, Неопределено);
	ДанныеСертификата.Вставить("ПодарочныйСертификат"	, Неопределено);
	
	Попытка
		ДанныеСертификата.СерийныйНомер = Справочники.СерийныеНомера.ПолучитьСсылку(Новый УникальныйИдентификатор(ПараметрыМетода.НомерСертификата));
		ДанныеСертификата.ПодарочныйСертификат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСертификата.СерийныйНомер, "Владелец");
	Исключение
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СерийныеНомера.Ссылка КАК СерийныйНомер,
		|	СерийныеНомера.Владелец КАК ПодарочныйСертификат,
		|	1 КАК Приоритет
		|ИЗ
		|	Справочник.СерийныеНомера КАК СерийныеНомера
		|ГДЕ
		|	(СерийныеНомера.Код = &НомерСертификата
		|			ИЛИ СерийныеНомера.Наименование = &НомерСертификата)
		|	И НЕ СерийныеНомера.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.СерийныеНомера.ПустаяСсылка),
		|	Номенклатура.Ссылка,
		|	2
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	(Номенклатура.Код = &НомерСертификата
		|			ИЛИ Номенклатура.Наименование = &НомерСертификата)
		|	И НЕ Номенклатура.ПометкаУдаления
		|	И Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Штрихкоды.Владелец КАК Справочник.СерийныеНомера),
		|	ВЫРАЗИТЬ(Штрихкоды.Владелец КАК Справочник.СерийныеНомера).Владелец,
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(Штрихкоды.Владелец КАК Справочник.СерийныеНомера).Владелец.ТипСерийногоНомера = ЗНАЧЕНИЕ(Перечисление.ТипыСерийныхНомеровСертификатов.Магнитный)
		|			ТОГДА 2
		|		ИНАЧЕ 1
		|	КОНЕЦ
		|ИЗ
		|	РегистрСведений.Штрихкоды КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Владелец ССЫЛКА Справочник.СерийныеНомера
		|	И Штрихкоды.Штрихкод = &НомерСертификата
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
		
		Запрос.УстановитьПараметр("НомерСертификата", ПараметрыМетода.НомерСертификата);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда 
			ЗаполнитьЗначенияСвойств(ДанныеСертификата, Выборка);
		КонецЕсли;
	
	КонецПопытки;
	
	Возврат ДанныеСертификата;
	
КонецФункции

// Возвращает данные о подарочном сертификате
//
// Параметры:
//  ПараметрыМетода - Структура
//
// Возвращаемое значение:
//  Структура - данные о подарочном сертификате
//  Неопределено - если данные не найдены
//
Функция ПолучитьБалансПодарочногоСертификата(ДанныеСертификата, СтруктураОтвета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(ПодарочныеСертификатыКСписаниюСервисЛояльности.КСписанию) КАК КСписанию,
		|	ПодарочныеСертификатыКСписаниюСервисЛояльности.ПодарочныйСертификат КАК ПодарочныйСертификат,
		|	ПодарочныеСертификатыКСписаниюСервисЛояльности.СерийныйНомер КАК СерийныйНомер
		|ПОМЕСТИТЬ ВТ_ПодарочныеСертификатыРезерв
		|ИЗ
		|	РегистрСведений.ПодарочныеСертификатыКСписаниюСервисЛояльности КАК ПодарочныеСертификатыКСписаниюСервисЛояльности
		|ГДЕ
		|	ПодарочныеСертификатыКСписаниюСервисЛояльности.ПодарочныйСертификат = &ПодарочныйСертификат
		|	И ПодарочныеСертификатыКСписаниюСервисЛояльности.СерийныйНомер = &СерийныйНомер
		|
		|СГРУППИРОВАТЬ ПО
		|	ПодарочныеСертификатыКСписаниюСервисЛояльности.ПодарочныйСертификат,
		|	ПодарочныеСертификатыКСписаниюСервисЛояльности.СерийныйНомер
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПодарочныйСертификат,
		|	СерийныйНомер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПодарочныеСертификатыОстатки.ПодарочныйСертификат КАК ПодарочныйСертификат,
		|	ПодарочныеСертификатыОстатки.НомерСертификата КАК НомерСертификата,
		|	ПодарочныеСертификатыОстатки.ПодарочныйСертификат.Номинал КАК Номинал,
		|	ВЫБОР
		|		КОГДА СостояниеПодарочныхСертификатов.ПодарочныйСертификат ЕСТЬ NULL
		|			ТОГДА ВЫБОР
		|					КОГДА ЕСТЬNULL(ВТ_ПодарочныеСертификатыРезерв.КСписанию, 0) > ПодарочныеСертификатыОстатки.СуммаОстаток
		|						ТОГДА 0
		|					ИНАЧЕ ПодарочныеСертификатыОстатки.СуммаОстаток - ЕСТЬNULL(ВТ_ПодарочныеСертификатыРезерв.КСписанию, 0)
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Остаток,
		|	ВЫБОР
		|		КОГДА СостояниеПодарочныхСертификатов.ПодарочныйСертификат ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Заблокирован
		|ИЗ
		|	РегистрНакопления.ПодарочныеСертификаты.Остатки(
		|			&ДатаЗапроса,
		|			НомерСертификата = &СерийныйНомер
		|				И ПодарочныйСертификат = &ПодарочныйСертификат) КАК ПодарочныеСертификатыОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеПодарочныхСертификатовСервисЛояльности КАК СостояниеПодарочныхСертификатов
		|		ПО ПодарочныеСертификатыОстатки.ПодарочныйСертификат = СостояниеПодарочныхСертификатов.ПодарочныйСертификат
		|			И ПодарочныеСертификатыОстатки.НомерСертификата = СостояниеПодарочныхСертификатов.СерийныйНомер
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПодарочныеСертификатыРезерв КАК ВТ_ПодарочныеСертификатыРезерв
		|		ПО ПодарочныеСертификатыОстатки.ПодарочныйСертификат = ВТ_ПодарочныеСертификатыРезерв.ПодарочныйСертификат
		|			И ПодарочныеСертификатыОстатки.НомерСертификата = ВТ_ПодарочныеСертификатыРезерв.СерийныйНомер";
	
	Запрос.УстановитьПараметр("ДатаЗапроса"				, ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ПодарочныйСертификат"	, ДанныеСертификата.ПодарочныйСертификат);
	Запрос.УстановитьПараметр("СерийныйНомер"			, ДанныеСертификата.СерийныйНомер);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда 
		
		СтруктураОтвета.GiftCard.GiftCardName = Строка(Выборка.ПодарочныйСертификат);
		СтруктураОтвета.GiftCard.GiftCardRef  = XMLСтрока(Выборка.ПодарочныйСертификат);
		СтруктураОтвета.GiftCardNumber 		  = Строка(Выборка.НомерСертификата);
		СтруктураОтвета.GiftCardValue 		  = Выборка.Номинал;
		СтруктураОтвета.GiftCardBalance 	  = Выборка.Остаток;
		СтруктураОтвета.Blocked 	  		  = Выборка.Заблокирован;
		
		СервисЛояльности.ЗаблокироватьПодарочныйСертификат(ДанныеСертификата, ТекущаяДатаСеанса());
	КонецЕсли;
	
КонецФункции

// Возврашает код валюты
//
// Возвращаемое значение:
//  Строка - код валюты
//
Функция КодВалюты() Экспорт
	Возврат ОбщегоНазначенияРТКлиентСервер.КодВалюты();
КонецФункции

// Возвращает номер дисконтной карты
//
// Параметры:
//  ДисконтнаяКарта - СправочникСсылка.ИнформационныеКарты
//
// Возвращаемое значение:
//  Число
//
Функция ПолучитьНомерКарты(ДисконтнаяКарта) Экспорт
	
	Если ДисконтнаяКарта.ВидКарты = Перечисления.ВидыИнформационныхКарт.Штриховая Тогда
		
		ДанныеШтрихКода = ПодключаемоеОборудованиеРТ.ШтрихкодТовара(ДисконтнаяКарта);
		Если Не ДанныеШтрихКода = Неопределено Тогда
			НомерКарты = ДанныеШтрихКода.Штрихкод;
		КонецЕсли;

	Иначе
		НомерКарты = ДисконтнаяКарта.КодКарты;
	КонецЕсли;
	
	Возврат НомерКарты;
	
КонецФункции

// Возвращает номер телефона владельца карты
//
// Параметры:
//  ВладелецКарты - СправочникСсылка.ФизическиеЛица
//
// Возвращаемое значение:
//  Строка
//
Функция ПолучитьНомерТелефонаВладельца(ВладелецКарты) Экспорт
	
	НомерТелефона = ""; 
	
	Если ВладелецКарты = Неопределено Тогда 
		Возврат НомерТелефона
	КонецЕсли;
	
	Для Каждого СтрокаКИ Из ВладелецКарты.КонтактнаяИнформация Цикл
		Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда 
			НомерТелефона = СтрокаКИ.Представление;	
		КонецЕсли;
	КонецЦикла;
	
	Возврат НомерТелефона;
	
КонецФункции

// Возвращает структуру запрета продаж
//
// Параметры:
//  Организация - СправочникСсылка.Организации
//  Магазин 	- СправочникСсылка.Магазины
//
// Возвращаемое значение:
//  Структура
//
Функция ПолучитьСтруктуруЗапретаПродаж(Организация = Неопределено, Магазин = Неопределено) Экспорт
	
	ДанныеОрганизации = Новый Структура;
	ДанныеОрганизации.Вставить("Name", ?(ЗначениеЗаполнено(Организация), Организация.Наименование, ""));
	ДанныеОрганизации.Вставить("Ref" , ?(ЗначениеЗаполнено(Организация), XMLСтрока(Организация)  , ""));
	ДанныеОрганизации.Вставить("ID"  , ?(ЗначениеЗаполнено(Организация), Организация.Код		 , ""));
	ДанныеОрганизации.Вставить("TIN" , ?(ЗначениеЗаполнено(Организация), Организация.ИНН		 , ""));
	
	ДанныеМагазина = Новый Структура;
	ДанныеМагазина.Вставить("Name", ?(ЗначениеЗаполнено(Магазин), Магазин.Наименование, ""));
	ДанныеМагазина.Вставить("Ref" , ?(ЗначениеЗаполнено(Магазин), XMLСтрока(Магазин)  , ""));
	ДанныеМагазина.Вставить("ID"  , ?(ЗначениеЗаполнено(Магазин), Магазин.Код		  , ""));
	
	
	СтруктураЗапретаПродаж = Новый Структура;
	СтруктураЗапретаПродаж.Вставить("StartDate"			, "");
	СтруктураЗапретаПродаж.Вставить("EndDate"			, "");
	
	СтруктураЗапретаПродаж.Вставить("SalesPromotionID"	, "");
	СтруктураЗапретаПродаж.Вставить("SalesPromotionName", "");
 	СтруктураЗапретаПродаж.Вставить("Organisation"		, ДанныеОрганизации);
	СтруктураЗапретаПродаж.Вставить("Store"				, ДанныеМагазина);
	СтруктураЗапретаПродаж.Вставить("DaysOfWeek"		, Новый Массив);
	СтруктураЗапретаПродаж.Вставить("TypesOfGoods"		, Новый Массив);
	
	Возврат СтруктураЗапретаПродаж;

КонецФункции

// Возвращает структуру содержащую данные о днях недели
//
// Параметры:
//  ДеньНедели - Перечисление.ДниНедели
//
// Возвращаемое значение:
//  Структура
//
Функция ПолучитьСтруктуруДниНедели(ДеньНедели) Экспорт
	
	СтруктураДеньНедели = Новый Структура;
	СтруктураДеньНедели.Вставить("Name", Строка(ДеньНедели));
	СтруктураДеньНедели.Вставить("Ref" , XMLСтрока(ДеньНедели));
	
	СтруктураДниНедели = Новый Структура;
	СтруктураДниНедели.Вставить("DayOfWeek", СтруктураДеньНедели);
	СтруктураДниНедели.Вставить("StartTime", "");
	СтруктураДниНедели.Вставить("EndTime"  , "");
	
	Возврат СтруктураДниНедели;
	
КонецФункции

// Возвращает структуру содержащую данные о видах номенклатуры
//
// Параметры:
//  ВидНоменклатуры  - СправочникСсылка.ВидыНоменклатуры
//  ОсобенностьУчета - Перечисление.ОсобенностиУчета
//
// Возвращаемое значение:
//  Структура
//
Функция ПолучитьСтруктуруВидыНоменклатуры(ВидНоменклатуры = Неопределено, ОсобенностьУчета = Неопределено) Экспорт
	
	ДанныеВидаНоменклатуры = Новый Структура;
	ДанныеВидаНоменклатуры.Вставить("Name", ?(ЗначениеЗаполнено(ВидНоменклатуры), ВидНоменклатуры.Наименование, ""));
	ДанныеВидаНоменклатуры.Вставить("Ref" , ?(ЗначениеЗаполнено(ВидНоменклатуры), XMLСтрока(ВидНоменклатуры), ""));
	
	ДанныеУсловияПредоставления = Новый Структура;
	ДанныеУсловияПредоставления.Вставить("Name", ?(ЗначениеЗаполнено(ОсобенностьУчета), Строка(ОсобенностьУчета), "")); 
	ДанныеУсловияПредоставления.Вставить("Ref",  ?(ЗначениеЗаполнено(ОсобенностьУчета), XMLСтрока(ОсобенностьУчета)  , "")); 
	
	СтруктураВидыНоменклатуры = Новый Структура;
	СтруктураВидыНоменклатуры.Вставить("TypeOfGoods", ДанныеВидаНоменклатуры);
	СтруктураВидыНоменклатуры.Вставить("Feature"	, ДанныеУсловияПредоставления);
	
	Возврат СтруктураВидыНоменклатуры;
	
КонецФункции

// Возвращает данные о магазине
//
// Параметры:
//  Магазин  - Строка
//
// Возвращаемое значение:
//  Магазин - СправочникСсылка.Магазины
//
Функция НайтиМагазин(Магазин) Экспорт
	
	Попытка
		МагазинСсылка = Справочники.Магазины.ПолучитьСсылку(Новый УникальныйИдентификатор(Магазин));
	Исключение
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Магазины.Ссылка КАК Ссылка,
		|	1 КАК Приоритет
		|ИЗ
		|	Справочник.Магазины КАК Магазины
		|ГДЕ
		|	Магазины.Код = &Магазин
		|	И НЕ Магазины.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Магазины.Ссылка,
		|	2
		|ИЗ
		|	Справочник.Магазины КАК Магазины
		|ГДЕ
		|	Магазины.Наименование = &Магазин
		|	И НЕ Магазины.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
		
		Запрос.УстановитьПараметр("Магазин", Магазин);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Следующий() Тогда 
			МагазинСсылка = Выборка.Ссылка;	
		Иначе 
			МагазинСсылка = Справочники.Магазины.ПустаяСсылка();
		КонецЕсли;

	КонецПопытки;
	
	Возврат МагазинСсылка;
	
КонецФункции

// Возвращает данные об использовании автоматических скидок
//
// Возвращаемое значение:
//  Булево - использование автоматических скидок в конфигурации
//
Функция ИспользоватьАвтоматическиеСкидки() Экспорт
	
	Возврат СервисЛояльности.ИспользоватьАвтоматическиеСкидки();
	
КонецФункции

// Рассчитывает автоматические скидки
//
// Возвращаемое значение:
//  Структура - структура данных с расчитанными автоматическими скидками
//
Функция РассчитатьАвтоматическиеСкидки(ПараметрыРасчета) Экспорт
	
	Возврат СервисЛояльности.РассчитатьАвтоматическиеСкидки(ПараметрыРасчета);
	
КонецФункции

// Преобразует параметры расчета, полученный в JSON
// в структуру данных
//
// Возвращаемое значение:
//  Структура - структура данных для расчета автоматических скидок
//
Функция ДесериализоватьПараметрыРасчета(ВходящиеДанные) Экспорт
	
	Возврат СервисЛояльности.ДесериализоватьПараметрыРасчета(ВходящиеДанные);	
	
КонецФункции

// Возвращает массив получателей скидок
//
// Параметры:
//  МассивДисконтныхКарт - Массив
//
Функция СформироватьМассивПолучателейСкидок(МассивДисконтныхКарт) Экспорт
	Возврат СервисЛояльности.СформироватьМассивПолучателейСкидок(МассивДисконтныхКарт);
КонецФункции

// Выполняет создание карты клиента
//
// Параметры:
//  ДанныеКарты - Структура - содержит данные карты, исходя из которых система создаст элемент справочника
//
// Возвращаемое значение:
//  СправочникСсылка.ИнформационныеКарты
//
Функция СоздатьКартуКлиента(ДанныеКарты) Экспорт
	Возврат СервисЛояльности.СоздатьКартуКлиента(ДанныеКарты);
КонецФункции

#КонецОбласти

