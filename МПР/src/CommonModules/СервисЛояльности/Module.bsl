#Область ПрограммныйИнтерфейс

// Производит разблокировку бонусов клиента при записи документа
//
Процедура РазблокироватьБонусыПриЗаписи(Источник, Отказ) Экспорт
	
КонецПроцедуры

// Проверяет блокировку бонусов клиента
//
// Праметры: 
//  ДисконтнаяКарта - СправочникСсылка.ИнформационныеКарты - карта клиента
//
// Возврашаемое значение:
//  Булево - Истина, если есть блокировка бонусов, Ложь, если нет блокировки
//
Функция БонусыЗаблокированы(ДисконтнаяКарта) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СостояниеБонусовСервисЛояльности.ДисконтнаяКарта КАК ДисконтнаяКарта,
		|	СостояниеБонусовСервисЛояльности.ДатаБлокировки КАК ДатаБлокировки
		|ИЗ
		|	РегистрСведений.СостояниеБонусовСервисЛояльности КАК СостояниеБонусовСервисЛояльности
		|ГДЕ
		|	СостояниеБонусовСервисЛояльности.ДисконтнаяКарта = &ДисконтнаяКарта";
	
	Запрос.УстановитьПараметр("ДисконтнаяКарта", ДисконтнаяКарта);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

// Блокирует бонусы клиента после ответа Сервиса Лояльности для предотвращения двойного списания
//
// Праметры: 
//  ДисконтнаяКарта - СправочникСсылка.ИнформационныеКарты - карта клиента
//  ДатаБлокировки  - Дата
//
Процедура ЗаблокироватьБонусы(ДисконтнаяКарта, ДатаБлокировки) Экспорт
	
	НаборЗаписей = РегистрыСведений.СостояниеБонусовСервисЛояльности.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДисконтнаяКарта.Установить(ДисконтнаяКарта);
	ЗаписьРегистра = НаборЗаписей.Добавить();
	ЗаписьРегистра.ДисконтнаяКарта = ДисконтнаяКарта;
	ЗаписьРегистра.ДатаБлокировки = ДатаБлокировки;
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Разблокирует бонусы клиента
//
// Праметры: 
//  ДисконтнаяКарта - СправочникСсылка.ИнформационныеКарты - карта клиента
//
Процедура РазблокироватьБонусы(ДисконтнаяКарта) Экспорт
	
	НаборЗаписей = РегистрыСведений.СостояниеБонусовСервисЛояльности.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДисконтнаяКарта.Установить(ДисконтнаяКарта);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Списывает бонусы клиента
//
// Праметры: 
//  ДисконтнаяКарта 		  - СправочникСсылка.ИнформационныеКарты - карта клиента
//  КоличествоБонусныхБаллов  - Число
//
Процедура СписатьБонусы(ДисконтнаяКарта, КоличествоБонусныхБаллов) Экспорт
	
	БонусныеБаллыРезерв = ПолучитьБонусныеБаллыРезерв(ДисконтнаяКарта);
	МенеджерЗаписи = РегистрыСведений.БонусныеБаллыКСписанию.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписи.ДисконтнаяКарта = ДисконтнаяКарта;
	МенеджерЗаписи.БонуснаяПрограммаЛояльности = ДисконтнаяКарта.БонуснаяПрограммаЛояльности;
	МенеджерЗаписи.КСписанию = КоличествоБонусныхБаллов + БонусныеБаллыРезерв;
	МенеджерЗаписи.Записать(Истина);
	
	РазблокироватьБонусы(ДисконтнаяКарта);
	
КонецПроцедуры

// Возвращает структуру параметраов из http запроса
//
// Параметры:
//	Запрос - Структура
//
// Возврашаемое значение:
//  Структура, содержащая в себе набор параметров
//
Функция ПараметрыМетодаИзЗапроса(Запрос) Экспорт
	
	ПараметрыМетода = Новый Структура;
	
	ПараметрыМетода.Вставить("ИдентификаторКартыКлиента", Запрос["ПараметрыЗапроса"].Получить("ClientCardID"));
	ПараметрыМетода.Вставить("НомерТелефона"			, Запрос["ПараметрыЗапроса"].Получить("Phone"));
	ПараметрыМетода.Вставить("АдресЭП"					, Запрос["ПараметрыЗапроса"].Получить("Email"));
	ПараметрыМетода.Вставить("Клиент"					, Запрос["ПараметрыЗапроса"].Получить("Client"));
	ПараметрыМетода.Вставить("Магазин"					, Запрос["ПараметрыЗапроса"].Получить("Store"));
	ПараметрыМетода.Вставить("НомерСертификата"			, Запрос["ПараметрыЗапроса"].Получить("GiftCardNumber"));
	ПараметрыМетода.Вставить("КоличествоБонусныхБаллов"	, ПреобразоватьПараметрМетодаВЧисло(Запрос["ПараметрыЗапроса"].Получить("BonusesCount")));
	ПараметрыМетода.Вставить("СуммаСписания"			, ПреобразоватьПараметрМетодаВЧисло(Запрос["ПараметрыЗапроса"].Получить("GiftCardWriteOffAmount")));
	
	Возврат ПараметрыМетода;
	
КонецФункции

// Возвращает структуру параметраов ответа http-сервиса
//
// Параметры:	
//	ВариантОтвета - Строка - в зависисмости от указанного варианта будет возвращаться та или иная структура ответа 
//
// Возврашаемое значение:
//  Структура, содержащая в себе набор параметров ответа http-сервиса "Сервис лояльности"
//
Функция ПолучистьСтруктуруОтвета(ВариантОтвета = "ЗапросКоличестваБонусов") Экспорт
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("Error", Ложь);
	СтруктураОтвета.Вставить("ErrorMessage", "");
	
	Если ВариантОтвета = "ИнформацияОЗапретахПродаж" Тогда 
		
		СтруктураОтвета.Вставить("AllowControl", Истина);
		СтруктураОтвета.Вставить("RestrictionsList", Новый Массив);
		
	ИначеЕсли ВариантОтвета = "ЗапросДанныхПодарочногоСертификата" Тогда 
		
		СтруктураСертификата = Новый Структура;
		СтруктураСертификата.Вставить("GiftCardName", "");
		СтруктураСертификата.Вставить("GiftCardRef", "");
		
		СтруктураОтвета.Вставить("GiftCard", СтруктураСертификата);
		СтруктураОтвета.Вставить("GiftCardNumber", "");
		СтруктураОтвета.Вставить("GiftCardValue", 0);
		СтруктураОтвета.Вставить("GiftCardBalance", 0);
		СтруктураОтвета.Вставить("Blocked", Ложь);
		
	ИначеЕсли ВариантОтвета = "ЗапросИспользованияАвтоматическихСкидок" Тогда 
		
		СтруктураОтвета.Вставить("UseAutomaticDiscounts", Ложь);
		
	ИначеЕсли ВариантОтвета <> "" Тогда   
		
		СтруктураОтвета.Вставить("BonusCount", 0);
		СтруктураОтвета.Вставить("BonusRate", 0);
		СтруктураОтвета.Вставить("BonusCurrency", СервисЛояльностиПереопределяемый.КодВалюты());
		СтруктураОтвета.Вставить("PaymentPercent", 0);
		
		Если ВариантОтвета = "ЗапросКоличестваБонусов" Тогда  
			
			СтруктураОтвета.Вставить("EndDate", Дата(1, 1, 1));
			СтруктураОтвета.Вставить("ClientNotFound", Истина);
			
		ИначеЕсли ВариантОтвета = "КартаКлиента" Тогда  
			
			СтруктураОтвета.Вставить("ExistingCard", Истина);
			СтруктураОтвета.Вставить("CardID", "");
			СтруктураОтвета.Вставить("Client", "");
			СтруктураОтвета.Вставить("PhoneNumber", "");
			СтруктураОтвета.Вставить("Email", "");
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Проверяет использование подсистемы "Сервис лояльности"
//
// Парметры:
//	Ответ - HTTPСервисОтвет
//
// Возврашаемое значение:
// 	Булево - Истина, если Сервис лояльности используется, Ложь - если не используется
//
Функция ИспользоватьСервисЛояльности(Ответ) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСервисЛояльности") Тогда 
		Возврат Истина;
	Иначе 
		Ответ.УстановитьТелоИзСтроки(НСтр("ru = 'Использование Сервиса лояльности отключено в настройках программы'"));
		Возврат Ложь;	
	КонецЕсли;
	
КонецФункции

// Возвращает количество зарезервированных бонусных баллов
//
// Параметры:
//	ДисконтнаяКарта - СправочникСсылка.ИнформационныеКарты
//
// Возвращаемое значение:
//  Число - количество бонусных баллов, находящихся в резерве
//
Функция ПолучитьБонусныеБаллыРезерв(ДисконтнаяКарта) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(БонусныеБаллыКСписанию.КСписанию) КАК КСписанию,
		|	БонусныеБаллыКСписанию.ДисконтнаяКарта КАК ДисконтнаяКарта
		|ИЗ
		|	РегистрСведений.БонусныеБаллыКСписанию КАК БонусныеБаллыКСписанию
		|ГДЕ
		|	БонусныеБаллыКСписанию.ДисконтнаяКарта = &ДисконтнаяКарта
		|
		|СГРУППИРОВАТЬ ПО
		|	БонусныеБаллыКСписанию.ДисконтнаяКарта";
	
	Запрос.УстановитьПараметр("ДисконтнаяКарта", ДисконтнаяКарта);
	
	Выборка = Запрос.Выполнить().Выбрать();
	БонусныеБаллыРезерв = 0;
	
	Если Выборка.Следующий() Тогда
		БонусныеБаллыРезерв = Выборка.КСписанию;
	КонецЕсли;
	
	Возврат БонусныеБаллыРезерв;
	
КонецФункции

// Выполянет корректировку регистра сведений "Бонусные баллы к списанию"
//
// Параметры:
//  Объект - ДокументОбъект.ЧекККМ
//
Процедура СкорректироватьРегистрСведенийБонусныеБаллыКСписанию(Объект) Экспорт
	
	ДисконтнаяКарта 			= Объект.ДисконтнаяКарта;
	БонуснаяПрограммаЛояльности = ДисконтнаяКарта.БонуснаяПрограммаЛояльности;
	СуммаБаллов 				= 0;
	
	Для каждого СтрокаОплаты Из Объект.Оплата Цикл
		СуммаБаллов = СуммаБаллов + СтрокаОплаты.КоличествоБонусовВСкидках;
	КонецЦикла;
	
	Если СуммаБаллов > 0 Тогда 
		МенеджерЗаписи = РегистрыСведений.БонусныеБаллыКСписанию.СоздатьМенеджерЗаписи();
		
		МенеджерЗаписи.ДисконтнаяКарта = ДисконтнаяКарта;
		МенеджерЗаписи.БонуснаяПрограммаЛояльности = БонуснаяПрограммаЛояльности;
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.КСписанию > СуммаБаллов Тогда
			МенеджерЗаписи.КСписанию = МенеджерЗаписи.КСписанию - СуммаБаллов;
			МенеджерЗаписи.Записать(Истина);
		Иначе	
		    МенеджерЗаписи.Удалить();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет структуру ответа http-сервиса данными дисконтной карты
//
// Параметры:
//  ДисконтнаяКарта - ОпределяемыйТип.КартаЛояльностиСервисЛояльности
//  СтруктураОтвета - Структура
//
Процедура ЗаполнитьСтруктуруОтветаДаннымиКарты(ДисконтнаяКарта, СтруктураОтвета, КартаСуществует = Ложь) Экспорт
	
	СтруктураОтвета.CardID 		 = СервисЛояльностиПереопределяемый.ПолучитьНомерКарты(ДисконтнаяКарта);
	СтруктураОтвета.Client 		 = Строка(ДисконтнаяКарта.ВладелецКарты);
	СтруктураОтвета.PhoneNumber  = СервисЛояльностиПереопределяемый.ПолучитьномерТелефонаВладельца(ДисконтнаяКарта.ВладелецКарты);
	СтруктураОтвета.Email 		 = СервисЛояльностиПереопределяемый.ПолучитьномерТелефонаВладельца(ДисконтнаяКарта.ВладелецКарты);
	СтруктураОтвета.ExistingCard = КартаСуществует;
	
	БонуснаяПрограммаЛояльности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДисконтнаяКарта, "БонуснаяПрограммаЛояльности");
	
	Если ЗначениеЗаполнено(БонуснаяПрограммаЛояльности) Тогда 
		СтруктураОтвета.BonusRate 		= БонуснаяПрограммаЛояльности.КурсКонвертацииБонусовВВалюту;
		СтруктураОтвета.PaymentPercent  = БонуснаяПрограммаЛояльности.МаксимальныйПроцентОплатыБонусами;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру данных о текущих запретах продаж
//
// Параметры:
//  ПараметрыМетода - Структура
//
// Возвращаемое значение:
//  Структура - данные о запретах продаж
//
Функция ДанныеОЗапретахПродаж(ПараметрыМетода) Экспорт
	
	Магазин = СервисЛояльностиПереопределяемый.НайтиМагазин(ПараметрыМетода.Магазин);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 	"ВЫБРАТЬ
	               	|	МаркетинговаяАкцияСкидкиНаценки.Ссылка КАК МаркетинговаяАкция,
	               	|	МаркетинговаяАкцияСкидкиНаценки.Магазин КАК Магазин,
	               	|	МаркетинговаяАкцияСкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
	               	|	МаркетинговаяАкцияСкидкиНаценки.СкидкаНаценка.СегментНоменклатурыПредоставления КАК СегментНоменклатуры,
	               	|	МаркетинговаяАкцияСкидкиНаценки.ДатаНачала КАК ДатаНачала,
	               	|	МаркетинговаяАкцияСкидкиНаценки.ДатаОкончания КАК ДатаОкончания
	               	|ПОМЕСТИТЬ ВТ_МаркетинговыеАкции
	               	|ИЗ
	               	|	Документ.МаркетинговаяАкция.СкидкиНаценки КАК МаркетинговаяАкцияСкидкиНаценки
	               	|ГДЕ
	               	|	МаркетинговаяАкцияСкидкиНаценки.Ссылка.Проведен
	               	|	И МаркетинговаяАкцияСкидкиНаценки.ДатаНачала <= &ДатаЗапроса
	               	|	И МаркетинговаяАкцияСкидкиНаценки.СкидкаНаценка.СтатусДействия = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
	               	|	И МаркетинговаяАкцияСкидкиНаценки.СкидкаНаценка.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.ЗапретРозничнойПродажи)
	               	|	И МаркетинговаяАкцияСкидкиНаценки.Магазин = &Магазин
	               	|;
	               	|
	               	|////////////////////////////////////////////////////////////////////////////////
	               	|ВЫБРАТЬ
	               	|	СкидкиНаценкиУсловияПредоставления.Ссылка КАК СкидкаНаценка,
	               	|	УсловияВремяДействия.ДеньНедели КАК ДеньНедели,
	               	|	УсловияВремяДействия.ВремяНачала КАК ВремяНачала,
	               	|	УсловияВремяДействия.ВремяОкончания КАК ВремяОкончания
	               	|ИЗ
	               	|	Справочник.СкидкиНаценки.УсловияПредоставления КАК СкидкиНаценкиУсловияПредоставления
	               	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УсловияПредоставленияСкидокНаценок.ВремяДействия КАК УсловияВремяДействия
	               	|		ПО СкидкиНаценкиУсловияПредоставления.УсловиеПредоставления = УсловияВремяДействия.Ссылка
	               	|ГДЕ
	               	|	СкидкиНаценкиУсловияПредоставления.Ссылка В
	               	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               	|				ВТ_МаркетинговыеАкции.СкидкаНаценка КАК СкидкаНаценка
	               	|			ИЗ
	               	|				ВТ_МаркетинговыеАкции КАК ВТ_МаркетинговыеАкции)
	               	|;
	               	|
	               	|////////////////////////////////////////////////////////////////////////////////
	               	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	               	|	ВидыНоменклатуры.Ссылка КАК ВидНоменклатуры,
	               	|	ВидыНоменклатуры.ОсобенностьУчета КАК ОсобенностьУчета,
	               	|	НоменклатураСегмента.Сегмент КАК СегментНоменклатуры
	               	|ИЗ
	               	|	РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
	               	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	               	|		ПО НоменклатураСегмента.Номенклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
	               	|ГДЕ
	               	|	НоменклатураСегмента.Сегмент В
	               	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               	|				ВТ_МаркетинговыеАкции.СегментНоменклатуры КАК СегментНоменклатуры
	               	|			ИЗ
	               	|				ВТ_МаркетинговыеАкции КАК ВТ_МаркетинговыеАкции)
	               	|;
	               	|
	               	|////////////////////////////////////////////////////////////////////////////////
	               	|ВЫБРАТЬ
	               	|	ВТ_МаркетинговыеАкции.МаркетинговаяАкция КАК МаркетинговаяАкция,
	               	|	ВТ_МаркетинговыеАкции.Магазин КАК Магазин,
	               	|	ВТ_МаркетинговыеАкции.СкидкаНаценка КАК СкидкаНаценка,
	               	|	ВТ_МаркетинговыеАкции.СегментНоменклатуры КАК СегментНоменклатуры,
	               	|	ВТ_МаркетинговыеАкции.ДатаНачала КАК ДатаНачала,
	               	|	ВТ_МаркетинговыеАкции.ДатаОкончания КАК ДатаОкончания
	               	|ИЗ
	               	|	ВТ_МаркетинговыеАкции КАК ВТ_МаркетинговыеАкции";
	
	Запрос.Параметры.Вставить("ДатаЗапроса", ТекущаяДатаСеанса());
	Запрос.Параметры.Вставить("Магазин"	   , Магазин);
	
	ПакетЗапросов 				 = Запрос.ВыполнитьПакет();
	
	ТаблицаУсловийПредоставления = ПакетЗапросов[1].Выгрузить();
	ТаблицаДанныхСегмента 		 = ПакетЗапросов[2].Выгрузить();
	ТаблицаЗапретов 			 = ПакетЗапросов[3].Выгрузить();
	
	//Формируем структуру ответа
	СтруктураОтвета = Новый Структура;
	
	СтруктураОтвета.Вставить("AllowControl", Истина);
	МассивЗапретов = Новый Массив;
	
	Организация = Справочники.Организации.ПолучитьОрганизациюПоУмолчанию();
	
	Для каждого СтрокаЗапрета Из ТаблицаЗапретов Цикл
		СтруктураЗапретаПродаж = СервисЛояльностиПереопределяемый.ПолучитьСтруктуруЗапретаПродаж(Организация, СтрокаЗапрета.Магазин);
		
		СтруктураЗапретаПродаж.SalesPromotionID   	= XMLСтрока(СтрокаЗапрета.МаркетинговаяАкция);
		СтруктураЗапретаПродаж.SalesPromotionName 	= Строка(СтрокаЗапрета.СкидкаНаценка);
		СтруктураЗапретаПродаж.StartDate 			= Формат(СтрокаЗапрета.ДатаНачала, "ДФ=dd.MM.yyyy");
		СтруктураЗапретаПродаж.EndDate 				= Формат(СтрокаЗапрета.ДатаОкончания, "ДФ=dd.MM.yyyy");
		
		СтруктураОтбор = Новый Структура;
		СтруктураОтбор.Вставить("СкидкаНаценка", СтрокаЗапрета.СкидкаНаценка);
		
		Попытка
			УсловияПредоставления = ТаблицаУсловийПредоставления.НайтиСтроки(СтруктураОтбор);
		Исключение
			Описание = ОписаниеОшибки();
			ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации("СервисЛояльности.ИнформацияОЗапретахПродаж",,,,Описание);
		КонецПопытки;
		
		Для Каждого СтрокаУсловий Из УсловияПредоставления Цикл
			
			СтруктураДниНедели 			 = СервисЛояльностиПереопределяемый.ПолучитьСтруктуруДниНедели(СтрокаУсловий.ДеньНедели);
			СтруктураДниНедели.StartTime = Формат(СтрокаУсловий.ВремяНачала, "ДЛФ=T");
			СтруктураДниНедели.EndTime 	 = Формат(СтрокаУсловий.ВремяОкончания, "ДЛФ=T");
			
			СтруктураЗапретаПродаж.DaysOfWeek.Добавить(СтруктураДниНедели);
			
		КонецЦикла;
		
		СтруктураОтбор = Новый Структура;
		СтруктураОтбор.Вставить("СегментНоменклатуры", СтрокаЗапрета.СегментНоменклатуры);

		Попытка
			ДанныеСегмента = ТаблицаДанныхСегмента.НайтиСтроки(СтруктураОтбор);
		Исключение
		    Описание = ОписаниеОшибки();
			ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации("СервисЛояльности.ИнформацияОЗапретахПродаж",,,,Описание);
		КонецПопытки;
		
		Для Каждого СтрокаДанныхСегмента Из ДанныеСегмента Цикл
			СтруктураВидыНоменклатуры = СервисЛояльностиПереопределяемый.ПолучитьСтруктуруВидыНоменклатуры(СтрокаДанныхСегмента.ВидНоменклатуры, СтрокаДанныхСегмента.ОсобенностьУчета);
			СтруктураЗапретаПродаж.TypesOfGoods.Добавить(СтруктураВидыНоменклатуры);			
		КонецЦикла;
		
		МассивЗапретов.Добавить(СтруктураЗапретаПродаж);

	КонецЦикла;
	
	СтруктураОтвета.Вставить("RestrictionsList", МассивЗапретов);
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Разблокирует подарочный сертификат
//
// Праметры: 
//  ДанныеСертификата - Структура - содержит ссылки на подарочный сертификат и его серийный номер
//
Процедура РазблокироватьПодарочныйСертификат(ДанныеСертификата) Экспорт
	
	НаборЗаписей = РегистрыСведений.СостояниеПодарочныхСертификатовСервисЛояльности.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПодарочныйСертификат.Установить(ДанныеСертификата.ПодарочныйСертификат);
	НаборЗаписей.Отбор.СерийныйНомер.Установить(ДанныеСертификата.СерийныйНомер);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Списывает баланс подарочного сертификата
//
// Праметры: 
//  ДанныеСертификата - Структура - Содержит данные подарочного сертификата: ПодарочныйСертификат, СерийныйНомер
//  СуммаСписания	  - Число 	  - Сумма списания которая будет списана с баланса подарочного сертификата
//
Процедура СписатьБалансПодарочногоСертификата(ДанныеСертификата, СуммаСписания) Экспорт

	СуммаПодарочногоСертификатаРезерв = ПолучитьСуммуПодарочногоСертификатаРезерв(ДанныеСертификата);
	МенеджерЗаписи = РегистрыСведений.ПодарочныеСертификатыКСписаниюСервисЛояльности.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписи.ПодарочныйСертификат = ДанныеСертификата.ПодарочныйСертификат;
	МенеджерЗаписи.СерийныйНомер 		= ДанныеСертификата.СерийныйНомер;
	МенеджерЗаписи.КСписанию 			= СуммаСписания + СуммаПодарочногоСертификатаРезерв;
	МенеджерЗаписи.Записать(Истина);
	
	РазблокироватьПодарочныйСертификат(ДанныеСертификата);		

КонецПроцедуры

// Возвращает зарезервированную сумму подарочного сертификата
//
// Параметры:
//	ДанныеСертификата - Структура - Содержит данные подарочного сертификата: ПодарочныйСертификат, СерийныйНомер
//
// Возвращаемое значение:
//  Число - сумма, находящаяся в резерве
//
Функция ПолучитьСуммуПодарочногоСертификатаРезерв(ДанныеСертификата) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(СУММА(ПодарочныеСертификатыКСписаниюСервисЛояльности.КСписанию), 0) КАК КСписанию
		|ИЗ
		|	РегистрСведений.ПодарочныеСертификатыКСписаниюСервисЛояльности КАК ПодарочныеСертификатыКСписаниюСервисЛояльности
		|ГДЕ
		|	ПодарочныеСертификатыКСписаниюСервисЛояльности.ПодарочныйСертификат = &ПодарочныйСертификат
		|	И ПодарочныеСертификатыКСписаниюСервисЛояльности.СерийныйНомер = &СерийныйНомер";
	
	Запрос.УстановитьПараметр("ПодарочныйСертификат", ДанныеСертификата.ПодарочныйСертификат);
	Запрос.УстановитьПараметр("СерийныйНомер"		, ДанныеСертификата.СерийныйНомер);
	
	Выборка = Запрос.Выполнить().Выбрать();
	СуммаПодарочногоСертификатаРезерв = 0;
	
	Если Выборка.Следующий() Тогда
		СуммаПодарочногоСертификатаРезерв = Выборка.КСписанию;
	КонецЕсли;
	
	Возврат СуммаПодарочногоСертификатаРезерв;
	
КонецФункции

// Блокирует подарочный сертификат после ответа Сервиса Лояльности с целью предотвращения двойного списания баланса
//
// Параметры:
//  ДанныеСертфииката - Структура - содержит ссылки на подарочный сертификат и его серийный номер
//  ДатаБлокировки    - Дата
//
Процедура ЗаблокироватьПодарочныйСертификат(ДанныеСертфиката, ДатаБлокировки) Экспорт
	
	НаборЗаписей = РегистрыСведений.СостояниеПодарочныхСертификатовСервисЛояльности.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПодарочныйСертификат.Установить(ДанныеСертфиката.ПодарочныйСертификат);
	НаборЗаписей.Отбор.СерийныйНомер.Установить(ДанныеСертфиката.СерийныйНомер);
	ЗаписьРегистра = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(ЗаписьРегистра, ДанныеСертфиката);
	ЗаписьРегистра.ДатаБлокировки = ДатаБлокировки;
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Фиксирует ошибку Сервиса Лояльности в журнале регистрации
// 
// Параметры:
//  ОписаниеОшибки - Строка - текстовое описание возникшей ошибки
//  ИмяФункции     - Строка - наименование функции Сервиса лояльности
//
// Возвращаемое значение:
//  HTTPСервисОтвет
//
Функция ЗафиксироватьОшибкуСервисаЛояльности(ОписаниеОшибки, ИмяФункции) Экспорт

	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации("СервисЛояльности." + ИмяФункции,,,,ОписаниеОшибки);
	
	#Если ВнешнееСоединение Тогда
		Ответ = Неопределено;
	#Иначе
		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.УстановитьТелоИзСтроки(ОписаниеОшибки, КодировкаТекста.UTF8);
	#КонецЕсли
	
	Возврат Ответ;

КонецФункции

// Создает физическое лицо - владельца карты лояльности
//
// Параметры:
//  ДанныеКарты - структура. содержащая данные карты лояльности
//
// Возвращаемое значение:
//  СправочникСсылка.ФизическиеЛица - вновь созданный владелец карты лояльности
//
Функция СоздатьВладельцаКарты(ДанныеКарты) Экспорт
	
	ВладелецКарты = Справочники.ФизическиеЛица.СоздатьЭлемент();
	ВладелецКарты.Наименование = ДанныеКарты.Клиент;
	
	Если ЗначениеЗаполнено(ДанныеКарты.НомерТелефона) Тогда 
		СтрокаКИ = ВладелецКарты.КонтактнаяИнформация.Добавить();	
		СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
		СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонФизическогоЛица;
		СтрокаКИ.НомерТелефона = ДанныеКарты.НомерТелефона;
		СтрокаКИ.Представление = ДанныеКарты.НомерТелефона;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКарты.АдресЭП) Тогда 
		СтрокаКИ = ВладелецКарты.КонтактнаяИнформация.Добавить();	
		СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailФизическогоЛица;
		СтрокаКИ.АдресЭП = ДанныеКарты.АдресЭП;
		СтрокаКИ.Представление = ДанныеКарты.АдресЭП;
	КонецЕсли;
	
	ВладелецКарты.Записать();
	
	Возврат ВладелецКарты.Ссылка;
	
КонецФункции

// Выполняет создание карты клиента
//
// Параметры:
//  ДанныеКарты - Структура - содержит данные карты, исходя из которых система создаст элемент справочника
//
// Возвращаемое значение:
//  СправочникСсылка.ИнформационныеКарты
//
Функция СоздатьКартуКлиента(ДанныеКарты) Экспорт
	
	КартаЛояльности = Справочники.ИнформационныеКарты.ПустаяСсылка(); 
	
	НачатьТранзакцию();
	Попытка
		ВладелецКарты 	 = ПолучитьВладельцаКарты(ДанныеКарты);
		ПараметрыШаблона = ПолучитьПараметрыШаблонаКарты(ДанныеКарты);
		ПараметрыШаблона.Вставить("ВладелецКарты", ВладелецКарты);
		ПараметрыШаблона.Вставить("НомерТелефона", ДанныеКарты.НомерТелефона);
		ПараметрыШаблона.Вставить("АдресЭП"		 , ДанныеКарты.АдресЭП);
		
		СтруктураКарты 	 = ИнформационныеКартыВызовСервера.НоваяДисконтнаяКарта(ПараметрыШаблона);
		КартаЛояльности = СтруктураКарты.Карта;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Описание = ОписаниеОшибки();
		ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации("СервисЛояльности.СозданиеКартыКлиента",,,,Описание);
	КонецПопытки;
	
	Возврат КартаЛояльности;
	
КонецФункции

// Ищет клиента по наименованию
// 
// Параметры:
//  ДанныеКарты - структура. содержащая данные карты лояльности
//
// Возвращаемое значение:
//  СправочникСсылка.ФизическиеЛица - владелец карты лояльности
//
Функция ПолучитьВладельцаКарты(ДанныеКарты) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ФизическиеЛица.Ссылка КАК Клиент
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Наименование ПОДОБНО &Наименование
		|	И НЕ ФизическиеЛица.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Наименование", ?(ДанныеКарты.Клиент = Неопределено, "", ДанныеКарты.Клиент));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда 
		ВладелецКарты = Выборка.Клиент;
	Иначе 
		ВладелецКарты = СервисЛояльности.СоздатьВладельцаКарты(ДанныеКарты);
	КонецЕсли;

	Возврат ВладелецКарты;
	
КонецФункции

// Получает параметры шаблона карты клиента
//
// Параметры:
//  ДанныеКарты - Структура - содержит данные карты, исходя из которых система создаст элемент справочника
//
// Возвращаемое значение:
//  Структура
//
Функция ПолучитьПараметрыШаблонаКарты(ДанныеКарты) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ШаблоныРегистрацииНовыхКарт.ВидКарты КАК ВидКарты,
		|	ШаблоныРегистрацииНовыхКарт.ДлинаКода КАК ДлинаКода,
		|	ШаблоныРегистрацииНовыхКарт.НачалоДиапазона КАК НачалоДиапазона,
		|	ШаблоныРегистрацииНовыхКарт.КонецДиапазона КАК КонецДиапазона,
		|	ШаблоныРегистрацииНовыхКарт.ПроводитьОпросВладельцаПриРегистрации КАК ПроводитьОпросВладельцаПриРегистрации,
		|	ШаблоныРегистрацииНовыхКарт.ВидДисконтнойКарты КАК ВидДисконтнойКарты,
		|	ШаблоныРегистрацииНовыхКарт.ГруппаКарты КАК ГруппаКарты,
		|	ШаблоныРегистрацииНовыхКарт.НаименованиеШаблона КАК НаименованиеШаблона,
		|	ШаблоныРегистрацииНовыхКарт.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
		|	ШаблоныРегистрацииНовыхКарт.ГруппаВладельцаКарты КАК ГруппаВладельцаКарты
		|ИЗ
		|	РегистрСведений.ШаблоныРегистрацииНовыхКарт КАК ШаблоныРегистрацииНовыхКарт
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &КодКарты <> """"
		|				ТОГДА &КодКарты МЕЖДУ ШаблоныРегистрацииНовыхКарт.НачалоДиапазона И ШаблоныРегистрацииНовыхКарт.КонецДиапазона
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ШаблоныРегистрацииНовыхКарт.БонуснаяПрограммаЛояльности <> ЗНАЧЕНИЕ(Справочник.БонусныеПрограммыЛояльности.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("КодКарты", ДанныеКарты.ИдентификаторКартыКлиента);
	
	РезультатЗапроса 		  = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи 	  = РезультатЗапроса.Выбрать();
	
	СтруктураШаблона 		  = ПолучитьСтруктуруШаблона();
	СтруктураШаблона.КодКарты = ДанныеКарты.ИдентификаторКартыКлиента;
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		ЗаполнитьЗначенияСвойств(СтруктураШаблона, ВыборкаДетальныеЗаписи);	
	КонецЕсли;
	
	Возврат СтруктураШаблона;
	
КонецФункции

// Получает структуру шаблона карты клиента
//
// Возвращаемое значение:
//  Структура
//		*ВидКарты 					 - Строка
//		*КодКарты 					 - Строка
//		*БонуснаяПрограммаЛояльности - Строка
//		*ГруппаВладельцаКарты 		 - Строка
//		*ГруппаКарты 				 - Строка
//		*ВидДисконтнойКарты 		 - Строка
//		*ТипШтрихкода				 - Строка
//
Функция ПолучитьСтруктуруШаблона()
	
	СтруктураШаблона = Новый Структура;
	СтруктураШаблона.Вставить("ВидКарты", "");
	СтруктураШаблона.Вставить("КодКарты", "");
	СтруктураШаблона.Вставить("БонуснаяПрограммаЛояльности", "");
	СтруктураШаблона.Вставить("ГруппаВладельцаКарты", "");
	СтруктураШаблона.Вставить("ГруппаКарты", "");
	СтруктураШаблона.Вставить("ВидДисконтнойКарты", "");
	СтруктураШаблона.Вставить("ТипШтрихкода", "");

	Возврат СтруктураШаблона;	
	
КонецФункции

// Возвращает данные об использовании автоматических скидок
//
// Возвращаемое значение:
//  Булево - использование автоматических скидок в конфигурации
//
Функция ИспользоватьАвтоматическиеСкидки() Экспорт
	            	
	Возврат Константы.ИспользоватьАвтоматическиеСкидкиВПродажах.Получить();
	
КонецФункции

// Рассчитывает автоматические скидки
//
// Возвращаемое значение:
//  Структура - структура данных с рассчитанными автоматическими скидками
//
Функция РассчитатьАвтоматическиеСкидки(ПараметрыРасчета) Экспорт
	
	СтруктураСкидок = СкидкиНаценкиСервер.ДеревоСкидокНаценок(ПараметрыРасчета, Неопределено);
	СкидкиНаценкиСервер.ПрименитьРезультатРасчетаСкидокКОбъекту(ПараметрыРасчета, "Товары", СтруктураСкидок.ТаблицаСкидкиНаценки);
	СкидкиНаценкиСервер.ОкруглитьЧекВПользуПокупателя(ПараметрыРасчета, "Товары", "СкидкиНаценки");
	СериализованнаяСтруктураСкидок = СериализоватьРезультатРасчета(ПараметрыРасчета, "Товары");
	
	Возврат СериализованнаяСтруктураСкидок;
	
КонецФункции

// Десериализует параметры расчета автоматических скидок, полученными в формате JSON 
//
// Параметры:
//  ВходящиеДанные - Строка - содержит строковое значение тела запроса в формате JSON
//
// Возвращаемое значение:
//  Структура - структура данных с десереализованными параметрами расчета автоматических скидок

Функция ДесериализоватьПараметрыРасчета(ВходящиеДанные) Экспорт
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ЕстьОшибки", Ложь); 
	ПараметрыРасчета.Вставить("ОписаниеОшибки", ""); 
	
	Попытка
		
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(ВходящиеДанные);
		ВходящиеДанныеВJSON = ПрочитатьJSON(ЧтениеJSON,, "CurrentDate", ФорматДатыJSON.ISO);
		ЧтениеJSON.Закрыть();
		
		Если ПроверитьКорректностьВходящихДанных(ВходящиеДанныеВJSON, ПараметрыРасчета) Тогда 
			
			Регистратор = Документы.ЧекККМ.ПустаяСсылка();
			
			ПараметрыРасчета.Вставить("Товары", ПолучитьДесериализованнуюТаблицуТоваров(ВходящиеДанныеВJSON, "Goods"));
			ПараметрыРасчета.Вставить("ДисконтныеКарты", ПолучитьДесериализованныйМассивДисконтныхКарт(ВходящиеДанныеВJSON, "LoyaltyCardsList"));
			ПараметрыРасчета.Вставить("ПолучателиСкидок", СформироватьМассивПолучателейСкидок(ПараметрыРасчета.ДисконтныеКарты));
			ПараметрыРасчета.Вставить("ДисконтнаяКартаПредъявлена", ПараметрыРасчета.ДисконтныеКарты.Количество() > 0);
			ПараметрыРасчета.Вставить("Магазин", ПолучитьДесериализованноеСсылочноеЗначение(ВходящиеДанныеВJSON, "RetailStore", "Справочники.Магазины"));
			ПараметрыРасчета.Вставить("ТекущаяДата", ВходящиеДанныеВJSON.CurrentDate);
			ПараметрыРасчета.Вставить("ТолькоСообщенияПослеОформления", Ложь);
			ПараметрыРасчета.Вставить("ТолькоПредварительныйРасчет", Ложь);
			ПараметрыРасчета.Вставить("РасчетПодарков", Ложь);
			ПараметрыРасчета.Вставить("РасчетСообщений", Ложь);
			ПараметрыРасчета.Вставить("УправляемыеСкидки", Неопределено);
			ПараметрыРасчета.Вставить("СегментИсключаемойНоменклатуры", Неопределено);
			ПараметрыРасчета.Вставить("Регистратор", Регистратор);
			ПараметрыРасчета.Вставить("ВидМинимальныхЦенПродажи", Справочники.ВидыЦен.ПустаяСсылка());
			ПараметрыРасчета.Вставить("СуммаДокумента", 0);
			ПараметрыРасчета.Вставить("СкидкиРассчитаны", Ложь);
			ПараметрыРасчета.Вставить("СкидкиНаценки", Регистратор.СкидкиНаценки.Выгрузить());
			ПараметрыРасчета.Вставить("ЦенаВключаетНДС", Истина);
			ПараметрыРасчета.Вставить("ВремяОбъекта", '00010101' + (ПараметрыРасчета.ТекущаяДата - НачалоДня(ПараметрыРасчета.ТекущаяДата)));
			
		КонецЕсли;
		
	Исключение
		
		ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Ошибка преобразования тела запроса по причине: %1'"), ОписаниеОшибки());
		ПараметрыРасчета.ЕстьОшибки = Истина;
		ПараметрыРасчета.ОписаниеОшибки = ОписаниеОшибки; 
		
		ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации("СервисЛояльности.АвтоматическийРасчетСкидок",,,,ОписаниеОшибки);
		
	КонецПопытки;
	
	Возврат ПараметрыРасчета;	
	
КонецФункции

// Выполняет обработку состояния бонусов и подарочных сертификатов клиентов
// Происходит проверка наличия заблокированных бонусов и подарочных сертификатов клиентов
// Если такие найдены и время экспирации для них истекло - происходит разблокировка
Процедура ОбработкаСостоянияБонусовИПодарочныхСертификатов() Экспорт
	
	РегламентРазблокировки = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.СервисЛояльностиОбработкаСостоянияБонусовПодарочныхСертификатов);
	ВремяЭкспирации = РегламентРазблокировки.Расписание.ПериодПовтораВТечениеДня;
	
	Если Не РегламентРазблокировки.Использование И ВремяЭкспирации = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СостояниеБонусовСервисЛояльности.ДисконтнаяКарта КАК ДисконтнаяКарта,
		|	СостояниеБонусовСервисЛояльности.ДатаБлокировки КАК ДатаБлокировки,
		|	NULL КАК ПодарочныйСертификат,
		|	NULL КАК СерийныйНомер
		|ИЗ
		|	РегистрСведений.СостояниеБонусовСервисЛояльности КАК СостояниеБонусовСервисЛояльности
		|ГДЕ
		|	СостояниеБонусовСервисЛояльности.ДатаБлокировки <= &ДатаЭкспирации
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	СостояниеПодарочныхСертификатовСервисЛояльности.ДатаБлокировки,
		|	СостояниеПодарочныхСертификатовСервисЛояльности.ПодарочныйСертификат,
		|	СостояниеПодарочныхСертификатовСервисЛояльности.СерийныйНомер
		|ИЗ
		|	РегистрСведений.СостояниеПодарочныхСертификатовСервисЛояльности КАК СостояниеПодарочныхСертификатовСервисЛояльности
		|ГДЕ
		|	СостояниеПодарочныхСертификатовСервисЛояльности.ДатаБлокировки <= &ДатаЭкспирации";
	
	ДатаЭкспирации = ТекущаяДатаСеанса() - ВремяЭкспирации;
	Запрос.УстановитьПараметр("ДатаЭкспирации", ДатаЭкспирации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Попытка
		Пока Выборка.Следующий() Цикл
			
			Если ЗначениеЗаполнено(Выборка.ДисконтнаяКарта) Тогда 
				РазблокироватьБонусы(Выборка.ДисконтнаяКарта);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.ПодарочныйСертификат) Тогда 
				ДанныеСертификата = Новый Структура;
				ДанныеСертификата.Вставить("ПодарочныйСертификат", Выборка.ПодарочныйСертификат);
				ДанныеСертификата.Вставить("СерийныйНомер", Выборка.СерийныйНомер);
				РазблокироватьПодарочныйСертификат(ДанныеСертификата);	
			КонецЕсли;
			
		КонецЦикла;
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации("СервисЛояльности.ОбработкаСостоянияБонусовИПодарочныхСертификатов",,,,ОписаниеОшибки);
	КонецПопытки;
	
КонецПроцедуры

// Возвращает массив получателей скидок
//
// Параметры:
//  МассивДисконтныхКарт - Массив
//
Функция СформироватьМассивПолучателейСкидок(МассивДисконтныхКарт) Экспорт

	МассивПолучателейСкидок = Новый Массив;
	
	Для каждого ДисконтнаяКарта Из МассивДисконтныхКарт Цикл
	
		МассивПолучателейСкидок.Добавить(ДисконтнаяКарта);
		МассивПолучателейСкидок.Добавить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДисконтнаяКарта, "ВидДисконтнойКарты"));
		МассивПолучателейСкидок.Добавить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДисконтнаяКарта, "ВладелецКарты"));
	
	КонецЦикла;
	
	Возврат МассивПолучателейСкидок;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПреобразоватьПараметрМетодаВЧисло(ЗначениеПараметра)
	
	ЧисловоеЗначение = 0;
	Если ЗначениеПараметра <> Неопределено Тогда 
		Попытка
			ЧисловоеЗначение = Число(ЗначениеПараметра);
		Исключение
			ЧисловоеЗначение = 0;
		КонецПопытки;
	КонецЕсли;
	
	Возврат ЧисловоеЗначение;
	
КонецФункции

Функция ПроверитьКорректностьВходящихДанных(ВходящиеДанные, ПараметрыРасчета)
	
	МассивПроверяемыхПараметров = МассивОбязательныхПараметровРасчетаСкидок();
	
	Для каждого ПроверяемыйПараметр Из МассивПроверяемыхПараметров Цикл
		Если Не ВходящиеДанные.Свойство(ПроверяемыйПараметр) Тогда 
			ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Во входящих параметрах не обнаружен параметр %1'"), ПроверяемыйПараметр);
			ПараметрыРасчета.ОписаниеОшибки = ПараметрыРасчета.ОписаниеОшибки + ОписаниеОшибки + ?(ПустаяСтрока(ПараметрыРасчета.ОписаниеОшибки), "", Символы.ПС);	
			ПараметрыРасчета.ЕстьОшибки = Истина;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Не ПараметрыРасчета.ЕстьОшибки;
	
КонецФункции

Функция СериализоватьРезультатРасчета(Объект, ИмяТЧ)
	
	ТаблицаТовары = Объект[ИмяТЧ];
	
	СериализованнаяСтруктураСкидок = Новый Структура;
	
	МассивТоваров = Новый Массив;   
	
	Для каждого СтрокаТовар Из ТаблицаТовары Цикл
	
		СтруктураСтроки = Новый Структура;       
		
		СтруктураСтроки.Вставить("Item", ПолучитьСтруктуруСсылки(СтрокаТовар.Номенклатура));
		СтруктураСтроки.Вставить("Variant", ПолучитьСтруктуруСсылки(СтрокаТовар.Характеристика));
		СтруктураСтроки.Вставить("Package", ПолучитьСтруктуруСсылки(СтрокаТовар.Упаковка));
		СтруктураСтроки.Вставить("Count", СтрокаТовар.Количество);
		СтруктураСтроки.Вставить("PackagesCount", СтрокаТовар.КоличествоУпаковок);
		СтруктураСтроки.Вставить("Price", СтрокаТовар.Цена);
		СтруктураСтроки.Вставить("Amount", СтрокаТовар.Сумма);    
		СтруктураСтроки.Вставить("TotalAmount", СтрокаТовар.СуммаВсего);
		СтруктураСтроки.Вставить("LineNumber", 1);
		СтруктураСтроки.Вставить("VATRate", Строка(СтрокаТовар.СтавкаНДС)); 
		СтруктураСтроки.Вставить("VATAmount", СтрокаТовар.СуммаНДС);
		СтруктураСтроки.Вставить("AmountOfAutomaticDiscount", СтрокаТовар.СуммаАвтоматическойСкидки);
		СтруктураСтроки.Вставить("AmountOfManualDiscount",  СтрокаТовар.СуммаРучнойСкидки);
		СтруктураСтроки.Вставить("PercentOfAutomaticDiscount",  СтрокаТовар.ПроцентАвтоматическойСкидки);
		СтруктураСтроки.Вставить("PercentOfManualDiscount", СтрокаТовар.ПроцентРучнойСкидки);
		
		МассивТоваров.Добавить(СтруктураСтроки);
		
	КонецЦикла;
		
	СериализованнаяСтруктураСкидок.Вставить("Goods", МассивТоваров);
	
	Возврат СериализованнаяСтруктураСкидок;
	
КонецФункции     

Функция ПолучитьСтруктуруСсылки(Ссылка)
	
	СтруктураСсылки = Новый Структура;
	СтруктураСсылки.Вставить("Ref", XMLСтрока(Ссылка));
	СтруктураСсылки.Вставить("Name", Ссылка.Наименование);
	
	Возврат СтруктураСсылки;
	
КонецФункции

Функция МассивОбязательныхПараметровРасчетаСкидок()
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить("ObjectTime");
	МассивПараметров.Добавить("LoyaltyCardsList");
	МассивПараметров.Добавить("Goods");
	МассивПараметров.Добавить("RetailStore");
	
	Возврат МассивПараметров;
	
КонецФункции

Функция ПолучитьДесериализованнуюТаблицуТоваров(ВходящиеДанные, ИмяПараметра)
	
	ОписаниеТиповЧисло = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2));
	ОписаниеТиповЧислоДляКоличества = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3));
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТоваров.Колонки.Добавить("ТипНоменклатуры", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("КлючСвязи", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("КлючСвязиУслугаАгента", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("Количество", ОписаниеТиповЧислоДляКоличества);
	ТаблицаТоваров.Колонки.Добавить("КоличествоУпаковок", ОписаниеТиповЧислоДляКоличества);
	ТаблицаТоваров.Колонки.Добавить("ПроцентАвтоматическойСкидки", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("ПроцентРучнойСкидки", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("Сумма", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("СуммаАвтоматическойСкидки", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("СуммаРучнойСкидки", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("СуммаВсего", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("Цена", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("ПродажаПодарка", Новый ОписаниеТипов("Булево"));
	
	МассивСтрокТаблицы = ВходящиеДанные[ИмяПараметра];
	
	НомерСтроки = 1;
	
	Для каждого СтрокаТаблицы Из МассивСтрокТаблицы Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		НоваяСтрока.Номенклатура = ПолучитьДесериализованноеСсылочноеЗначение(СтрокаТаблицы, "Item", "Справочники.Номенклатура");
		НоваяСтрока.ТипНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "ТипНоменклатуры");
		НоваяСтрока.Упаковка = ПолучитьДесериализованноеСсылочноеЗначение(СтрокаТаблицы, "Package", "Справочники.УпаковкиНоменклатуры");
		НоваяСтрока.Характеристика = ПолучитьДесериализованноеСсылочноеЗначение(СтрокаТаблицы, "Variant", "Справочники.ХарактеристикиНоменклатуры");
		НоваяСтрока.Цена = СтрокаТаблицы.Price;
		НоваяСтрока.Сумма = СтрокаТаблицы.Amount;
		НоваяСтрока.Количество = СтрокаТаблицы.Count;
		НоваяСтрока.КоличествоУпаковок = СтрокаТаблицы.PackagesCount;
		НоваяСтрока.ПроцентАвтоматическойСкидки = СтрокаТаблицы.PercentOfAutomaticDiscount;
		НоваяСтрока.ПроцентРучнойСкидки = СтрокаТаблицы.PercentOfManualDiscount;  
		НоваяСтрока.СуммаАвтоматическойСкидки = СтрокаТаблицы.AmountOfAutomaticDiscount;  
		НоваяСтрока.СуммаРучнойСкидки = СтрокаТаблицы.AmountOfManualDiscount;  
		НоваяСтрока.СуммаВсего = СтрокаТаблицы.TotalAmount;
		НоваяСтрока.СуммаНДС = СтрокаТаблицы.VATAmount;
		
		НоваяСтрока.КлючСвязи = НомерСтроки;
		НоваяСтрока.КлючСвязиУслугаАгента = 0;
		НоваяСтрока.НомерСтроки = НомерСтроки;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	Возврат ТаблицаТоваров;		
	
КонецФункции       

Функция ПолучитьДесериализованныйМассивДисконтныхКарт(ВходящиеДанные, ИмяПараметра)
	
	МассивНомеровКарт = ВходящиеДанные[ИмяПараметра];
	МассивДисконтныхКарт = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ИнформационныеКарты.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_НайденныеКарты
		|ИЗ
		|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
		|ГДЕ
		|	(ИнформационныеКарты.КодКарты В (&МассивНомеровКарт)
		|			ИЛИ ИнформационныеКарты.Код В (&МассивНомеровКарт))
		|	И НЕ ИнформационныеКарты.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Штрихкоды.Владелец
		|ИЗ
		|	РегистрСведений.Штрихкоды КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Штрихкод В(&МассивНомеровКарт)
		|	И Штрихкоды.Владелец ССЫЛКА Справочник.ИнформационныеКарты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_НайденныеКарты.Ссылка КАК Ссылка
		|ИЗ
		|	ВТ_НайденныеКарты КАК ВТ_НайденныеКарты";
	
	Запрос.УстановитьПараметр("МассивНомеровКарт", МассивНомеровКарт);
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда 
		
		Выборка	= РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			МассивДисконтныхКарт.Добавить(Выборка.Ссылка);
		КонецЦикла;       
		
	КонецЕсли;
	
	Возврат МассивДисконтныхКарт;
	
КонецФункции

Функция ПолучитьДесериализованноеСсылочноеЗначение(ВходящиеДанные, ИмяПараметра, ТипЗначения)
	
	ЗначениеПараметра = Неопределено;
	
	Попытка
		СтроковоеЗначениеПараметра = ВходящиеДанные[ИмяПараметра].Ref;
		ГУИД = Новый УникальныйИдентификатор(СтроковоеЗначениеПараметра);
		Выполнить("ЗначениеПараметра = " + ТипЗначения + ".ПолучитьСсылку(ГУИД)");
		Если ЗначениеПараметра.ПолучитьОбъект() = Неопределено Тогда 
			ВызватьИсключение ОписаниеОшибки();
		КонецЕсли;
	Исключение
		Выполнить("ЗначениеПараметра = " + ТипЗначения + ".ПустаяСсылка()");
	КонецПопытки;
	
	Возврат ЗначениеПараметра;
	
КонецФункции 


#КонецОбласти