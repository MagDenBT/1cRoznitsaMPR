
///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ПрограммныйИнтерфейс_КалендарныеЗапретыПродаж

#КонецОбласти

// Позволяет реализовать дополнительную логику заполнения подключаемого оборудования при обновлении
//  
// Параметры:
//  СсылкаПодключаемоеОборудование - СправочникСсылка.ПодключаемоеОборудование 
//
Процедура ОбновитьСправочникПодключаемогоОборудования(СсылкаПодключаемоеОборудование) Экспорт
	
	ОбщегоНазначенияРМКРТ.ОбновитьСправочникПодключаемогоОборудования(СсылкаПодключаемоеОборудование);
	
КонецПроцедуры

// Заполняет АдресТорговогоОбъекта по данным сущности ТорговыйОбъект.
//
// Параметры:
//  АдресТорговогоОбъекта - Строка - данные для заполнения
//  ТорговыйОбъект - СправочникСсылка.ТорговыеОбъекты - магазин для получения адреса.
//
Процедура АдресТорговогоОбъекта(АдресМагазина, ТорговыйОбъект) Экспорт
	
	ОбщегоНазначенияРМКРТ.АдресТорговогоОбъекта(АдресМагазина, ТорговыйОбъект);
	
КонецПроцедуры

// Определяет актуальную ставку НДС для товара по данным системы налогообложения
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - данные текущего объекта.
//  ТекущаяСтрока - СтрокаТабличнойЧасти - текущая строка.
//  СистемаНалогообложенияПоУмолчанию - ПеречислениеСсылка.ТипыСистемНалогообложенияККТ, Неопределено.
//
// Возвращаемое значение:
//  АктуальнаяСтавкаНДС - ПеречислениеСсылка.СтавкиНДС
//
Функция АктуальнаяСтавкаНДСДляТовара(Объект, ТекущаяСтрока, СистемаНалогообложенияПоУмолчанию = Неопределено) Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.АктуальнаяСтавкаНДСДляТовара(Объект, ТекущаяСтрока, СистемаНалогообложенияПоУмолчанию);
	
КонецФункции

// Определяет необходимость запуска нового РМК.
//
// Параметры:
//  ЗапуститьНовыйРМК - Булево - признак использования нового РМК. Значение по умолчанию ложь.
//
Процедура ОпределитьРежимЗапуска(ЗапуститьНовыйРМК) Экспорт
	
	ОбщегоНазначенияРМКРТ.ОпределитьРежимЗапуска(ЗапуститьНовыйРМК);
	
КонецПроцедуры

// Возвращает текущий торговый объект, который далее используется в РМК.
//
// Возвращаемое значение:
//  СправочникСсылка.ТорговыеОбъекты - текущий торговый объект РМК.
//
Функция ОпределитьТекущийТорговыйОбъект() Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ОпределитьТекущийТорговыйОбъект();
	
КонецФункции

// Возвращает признак использования оплат платежными картами.
//
// Возвращаемое значение:
//  ИспользоватьОплатуПлатежнымиКартами - Булево - признак использования оплат платежными картами.
//
Функция ИспользоватьОплатуПлатежнымиКартами() Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ИспользоватьОплатуПлатежнымиКартами();
	
КонецФункции

// Возвращает признак использования оплат платежными системами.
//
// Возвращаемое значение:
//  ИспользоватьОплатуПлатежнымиСистемами - Булево - признак использования оплат платежными системами.
//
Функция ИспользоватьОплатуПлатежнымиСистемами() Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ИспользоватьОплатуПлатежнымиСистемами();
	
КонецФункции

// Устанавливает признак использования бонусных программ по данным функциональной опции.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы.
//
Процедура ИспользоватьБонусныеПрограммы(Форма) Экспорт
	
	ОбщегоНазначенияРМКРТ.ИспользоватьБонусныеПрограммы(Форма);
	
КонецПроцедуры

// Возвращает имя константы оплата платежными картами.
//
// Возвращаемое значение:
//  Строка - наименование константы, в которой хранится признак использования оплат платежными картами.
//
Функция ИмяКонстантыИспользоватьОплатуПлатежнымиКартами() Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ИмяКонстантыИспользоватьОплатуПлатежнымиКартами();
	
КонецФункции

// Возвращает имя константы оплата платежными системами.
//
// Возвращаемое значение:
//  Строка - наименование константы, в которой хранится признак использования оплат платежными системами.
//
Функция ИмяКонстантыИспользоватьОплатуПлатежнымиСистемами() Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ИмяКонстантыИспользоватьОплатуПлатежнымиСистемами();
	
КонецФункции

// Возвращает имя константы использовать бонусные программы.
//
// Возвращаемое значение:
//  Строка - наименование константы, в которой хранится признак использования бонусных программ.
//
Функция ИмяКонстантыИспользоватьБонуснуюПрограмму() Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ИмяКонстантыИспользоватьБонуснуюПрограмму();
	
КонецФункции

// Настройка элементов формы "Настройки рабочего места кассира".
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - общая форма настроек РМК.
//
Процедура ПереопределитьНастройкиРМК(Форма) Экспорт
	
	ОбщегоНазначенияРМКРТ.ПереопределитьНастройкиРМК(Форма);
	
КонецПроцедуры

// Возвращает значение параметра сеанса, в котором хранится текущий магазин.
//
// Возвращаемое значение:
//  СправочникСсылка - значение текущего магазина из параметра сеанса.
//
Функция ТекущийМагазин() Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ТекущийМагазин();
	
КонецФункции

// Процедура заполняет данные для работы рабочего места кассира.
// Список параметров: Текущий магазин, розничный вид цен, цена включает НДС, использование подключаемого оборудования,
// использование оплат платежными картами использование бонусных программ, настройка динамического списка товаров.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура ЗаполнитьДанныеДляРМК(Форма) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьДанныеДляРМК(Форма);
	
КонецПроцедуры

// Возвращает текст запроса для заполнения избранных товаров.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаИзбранныхТоваров() Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ТекстЗапросаИзбранныхТоваров();
	
КонецФункции

// Возвращает текущее значение признака использования характеристик номенклатуры
//
// Возвращаемое значение:
//   Результат - Булево
//
Функция ИспользоватьХарактеристикиНоменклатуры() Экспорт

	Возврат ОбщегоНазначенияРМКРТ.ИспользоватьХарактеристикиНоменклатуры();

КонецФункции

// Возвращает текст запроса для данных КассыККМ.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаДанныеКассыККМ() Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ТекстЗапросаДанныеКассыККМ();
	
КонецФункции

// Возвращает значение налогообложения НДС для текущей организации.
//
// Параметры:
//  Организация - Справочник.Ссылка - организация, для которой необходимо получить тип налогообложения.
//
// Возвращаемое значение:
//  ТипНалогообложения - ОпределяемыйТип.НалогообложениеНДСАРМК - тип налогообложения для текущей организации.
//
Функция СНОНДСДляОрганизации(Организация) Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.СНОНДСДляОрганизации(Организация);
	
КонецФункции

// Возвращает значение налогообложения ККТ для текущей строки.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - данные текущего объекта.
//  ТекущаяСтрока - СтрокаТабличнойЧасти - текущая строка.
//  Дата - ДатаВремя - (необязательный).
//
// Возвращаемое значение:
//  ТипСистемыНалогообложения - ПеречислениеСсылка.ТипыСистемНалогообложенияККТ.
//
Функция СНОККТДляОрганизации(Объект, ТекущаяСтрока = Неопределено, Дата = '00010101') Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.СНОККТДляОрганизации(Объект, ТекущаяСтрока, Дата);
	
КонецФункции

// Возвращает значение основной организации.
//
// Параметры:
//  НастройкаРМК - СправочникСсылка.НастройкиРабочегоМестаКассира - настройка РМК, для которой необходимо получить основную организацию.
//
// Возвращаемое значение:
//  Организация - ОпределяемыйТип.ОрганизацияРМК - основная организации.
//
Функция ОсновнаяОрганизацияПоНастройке(НастройкаРМК) Экспорт
	Возврат ОбщегоНазначенияРМКРТ.ОсновнаяОрганизацияПоНастройке(НастройкаРМК);
КонецФункции

// Возвращает текст запроса для данных эквайрингового терминала.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаДанныеЭквайринговогоТерминала() Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ТекстЗапросаДанныеЭквайринговогоТерминала();
	
КонецФункции

/// Определяет возможность классификации операции как сторнирующей
 //
 // Параметры:
 //  ЧекККМПродажи - ДокументСсылка.ЧекККМ - документ - основание дл оформления сторнирования.
 //  СуммаСторнирования  - Число - сумма к сторнированию.
 //  ТекущаяКассоваяСмена - ДокументСсылка.КассоваяСмена. 
 //
 // Возвращаемое значение:
 //   Результат  - Булево
 //
Функция ЭтоСторноОплаты(ЧекККМПродажа, СуммаСторнирования, ТекущаяКассоваяСмена) Экспорт
	
	Результат = Ложь;
	
	РезультатПроверкиСторноОплаты =
		ОбщегоНазначенияРМКРТ.ЭтоСторноОплаты(ЧекККМПродажа, СуммаСторнирования, ТекущаяКассоваяСмена);
	Если ТипЗнч(РезультатПроверкиСторноОплаты) = Тип("Булево") Тогда
		Результат = РезультатПроверкиСторноОплаты;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Обновляет данные карты лояльности
//
// Параметры:
//	КартаЛояльности - СправочникСсылка.КартыЛояльности - карта, данные которой будут изменены
//	ДанныеДляИзменения - Структура
//		* НомерКартыДоИзменения - Строка - предыдущее значение номера карты лояльности
//		* МагнитныйКодКартыЛояльности - Строка - магнитный код карты лояльности
//		* НовыйEmailКлиента - Строка - новый email владельца карты
//		* НовыйНомерТелефонаКлиента - Строка - новый номер телефона владельца карты
//
Процедура СохранитьДанныеКартыЛояльности(КартаЛояльности, ДанныеДляИзменения) Экспорт
	
	ОбщегоНазначенияРМКРТ.СохранитьДанныеКартыЛояльности(КартаЛояльности, ДанныеДляИзменения);
	
КонецПроцедуры

// Возвращает режим записи документа ЧекККМ.
//
// Возвращаемое значение:
//  РежимЗаписиДокумента - режим, который необходим при записи документа ЧекККМ.
//
Функция РежимЗаписи() Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.РежимЗаписи();
	
КонецФункции

// Возвращает текст запроса на получение данных для пробития чека 
//
//
// Возвращаемое значение:
//  ТекстЗапроса - Строка - текст запроса 
Функция ТекстЗапросаДанныхДляПробитияЧека() Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ТекстЗапросаДанныхДляПробитияЧека();
	
КонецФункции

// Процедура создает отложенный документ "Чек ККМ".
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы РМК.
//  ЧекСоздан - Булево - признак, того, что создан отложенный чек.
//
Процедура СоздатьОтложенныйЧек(Форма, ЧекСоздан) Экспорт
	
	ОбщегоНазначенияРМКРТ.СоздатьОтложенныйЧек(Форма, ЧекСоздан);
	
КонецПроцедуры

// Возвращает пустую ссылку на дисконтную карту.
//
// Возвращаемое значение:
//  СправочникСсылка - пустая ссылка на дисконтную карту.
//
Функция ПустаяСсылкаНаДисконтнуюКарту() Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ПустаяСсылкаНаДисконтнуюКарту();
	
КонецФункции

// Возвращает пустую ссылку на контрагента.
//
// Возвращаемое значение:
//  СправочникСсылка - пустая ссылка на контрагента.
//
Функция ПустаяСсылкаНаКонтрагента() Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ПустаяСсылкаНаКонтрагента();
	
КонецФункции

// Возвращает пустую ссылку на серию номенклатуры.
//
// Возвращаемое значение:
//  СправочникСсылка - пустая ссылка на серию номенклатуры.
//
Функция ПустаяСсылкаНаСериюНоменклатуры() Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ПустаяСсылкаНаСериюНоменклатуры();
	
КонецФункции

// Возвращает пустую ссылку на документ чекККМ.
//
// Возвращаемое значение:
//  ДокументСсылка - пустая ссылка на документ чекККМ.
//
Функция ПустаяСсылкаНаЧекККМ() Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ПустаяСсылкаНаЧекККМ();
	
КонецФункции

// Возвращает вид операции чека ККМ.
//
// Параметры:
//  ЭтоВозврат - Булево - признак того, что нужно вернуть вид операции возврат.
//  ЭтоСкупка - Булево - признак того, что нужно вернуть вид операции скупка.
//
// Возвращаемое значение:
//  ПеречислениеСсылка - вид операции чека ККМ (Продажа, Возврат, Скупка, ВозвратСкупки).
//
Функция ВидОперацииЧекаККМ(ЭтоВозврат = Ложь, ЭтоСкупка = Ложь) Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ВидОперацииЧекаККМ(ЭтоВозврат, ЭтоСкупка);
	
КонецФункции

// Возвращает признак того, является ли операция продажей.
//
// Параметры:
//  ВидОперации - ПеречислениеСсылка - текущий вид операции.
//
// Возвращаемое значение:
//  Булево - Истина, если текущий вид операции продажа.
//
Функция ВидОперацииПродажа(ВидОперации) Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ВидОперацииПродажа(ВидОперации);
	
КонецФункции

// Возвращает количество отложенных чеков. Если количество отложенных чеков = 1, то заполняет
// реквизит "Отложенный чек" ссылкой на чекККМ.
//
// Параметры:
//  СтруктураПараметров - Структура - Параметры для выполнения запроса.
//  ОтложенныйЧек - ДокументСсылка.ЧекККМ - реквизит формы, для хранения текущего отложенного чека.
//
// Возвращаемое значение:
//  КоличествоЧеков - Число - количество чеков ККМ со статусом "Отложен".
//
Функция ПроверитьКоличествоОтложенныхЧеков(СтруктураПараметров, ОтложенныйЧек) Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ПроверитьКоличествоОтложенныхЧеков(СтруктураПараметров, ОтложенныйЧек);
	
КонецФункции

// Формирует и записывает документ "Чек ККМ" перед пробитием на ККТ.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы РМК.
//  Отказ - Булево - признак наличия ошибки при записи документа.
//  ТекстОшибки - Строка - текст ошибки.
//  СистемаНалогообложения - ОпределяемыеТипы.ТипыСистемНалогообложенияККТРМК - СНО ККТ для текущего чека.
//
// Возвращаемое значение:
//  ДокументСсылка.ЧекККМ - ссылка на документ Чек ККМ.
//
Функция ЗаписатьЧекККМПередПробитием(Форма, Отказ, ТекстОшибки, СистемаНалогообложения) Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ЗаписатьЧекККМПередПробитием(Форма, Отказ, ТекстОшибки, СистемаНалогообложения);
	
КонецФункции

// Проверяет наличие в таблице товаров алкогольной продукция ЕГАИС по реквизиту НеобходимостьВводаКодаМаркировки
//
// Параметры:
//  ЧекККМ - ОпределяемыйТип.ЧекККМРМК
//
// Возвращаемое значение:
//  ЕстьПродукцияЕГАИС - Булево
//
Функция ЕстьПродукцияЕГАИС(ЧекККМ) Экспорт

	Результат = Ложь;
	
	Если ЗначениеЗаполнено(ЧекККМ) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.НеобходимостьВводаКодаМаркировки КАК НеобходимостьВводаКодаМаркировки
		|ПОМЕСТИТЬ ТаблицаТовары
		|ИЗ
		|	Документ.ЧекККМ.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СпрНоменклатура.Ссылка КАК Ссылка
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыАлкогольнойПродукции КАК ВидыАлкогольнойПродукции
		|			ПО СпрНоменклатура.ВидАлкогольнойПродукцииЕГАИС = ВидыАлкогольнойПродукции.Ссылка
		|		ПО ТаблицаТовары.Номенклатура = СпрНоменклатура.Ссылка
		|ГДЕ
		|	ЕСТЬNULL(ВидыАлкогольнойПродукции.Маркируемый, ЛОЖЬ)
		|	И СпрНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)");
		
		Запрос.УстановитьПараметр("Ссылка", ЧекККМ.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Результат = Выборка.Следующий();
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Возвращает количество записей запретов продаж
//
// Возвращаемое значение:
//  Число
//
Функция КоличествоЗаписейЗапретовПродаж() Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.КоличествоЗаписейЗапретовПродаж();
	
КонецФункции

// Функция возвращает подготовленные данные для пробития на ККТ.
//
// Параметры:
//  ЧекККМВОбработке - ДокументСсылка.ЧекККМ - ссылка на документ ЧекККМ печать, которого производится.
//  ДополнительныеПараметры - Структура:
//   *ЕстьПродукцияЕГАИС - Булево - признак наличия маркируемой алкогольной продукции.
//   *ПечататьБумажныйЧек - Булево - признак нужно печатать чек на ККТ или отправлять в эл.виде.
//   *СистемаНалогообложения - ОпределяемыеТипы.ТипыСистемНалогообложенияККТРМК - СНО ККТ для текущего чека.
//   *СворачиватьСтрокиПриПечатиЧека - Булево - признак нужно ли сворачивать маркируемые товары в чеке.
//   *ОсобенностиУчетаВозвращаемойМаркируемойПродукции - Список - значения особенностей учета товаров из чека,
//     по которым осуществляется возврат без марки
//
// ВозвращаемоеЗначение:
//  Массив - см.ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОперацииФискализацииЧека().
//
Функция ПодготовитьДанныеДляПробитияЧека(ЧекККМВОбработке, ДополнительныеПараметры) Экспорт
	Возврат ОбщегоНазначенияРМКРТ.ПодготовитьДанныеДляПробитияЧека(ЧекККМВОбработке, ДополнительныеПараметры);
КонецФункции

// Процедура обрабатывает ЧекККМ после пробития на ККИ.
//
// Параметры:
//  ВходящиеДанные - Структура - данные о результате пробития чека на ККТ.
//  Форма - ФормаКлиентскогоПриложения - данные формы РМК.
//
Процедура ПробитьЧекЗавершение(ВходящиеДанные, Форма) Экспорт
	
	ОбщегоНазначенияРМКРТ.ПробитьЧекЗавершение(ВходящиеДанные, Форма);
	
КонецПроцедуры

// Процедура настраивает динамический список для получения списка чеков для возврата.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы выбора чеков.
//
Процедура ЗаполнитьТаблицуЧековККМНаВозврат(Форма) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьТаблицуЧековККМНаВозврат(Форма);
	
КонецПроцедуры

// Процедура настраивает динамический список для получения списка отложенных чеков.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы выбора чеков.
//
Процедура ЗаполнитьТаблицуОтложенныхЧековККМ(Форма) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьТаблицуОтложенныхЧековККМ(Форма);
	
КонецПроцедуры

// Процедура настраивает динамический список для получения списка чеков для повторной печати.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы выбора чеков.
//
Процедура ЗаполнитьТаблицуЧековККМДляПовторнойПечати(Форма) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьТаблицуЧековККМДляПовторнойПечати(Форма);
	
КонецПроцедуры

// Процедура архивирует чеки при закрытии смены. При необходимости удаляет чеки.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы РМК.
//  Параметры - Структура - параметры для анализа закрытия смены.
//
Процедура ЗаархивироватьЧекиККМ(Форма, Параметры) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаархивироватьЧекиККМ(Форма, Параметры);
	
КонецПроцедуры

// Процедура заполняет доступные права для текущего пользователя.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы РМК.
//
Процедура ЗаполнитьТаблицуРолейПользователя(Форма) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьТаблицуРолейПользователя(Форма);
	
КонецПроцедуры

// Процедура заполняет данные на форме РМК на освновании выбранного чека.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы РМК.
//  ЧекККМ - ДокументСсылка.ЧекККМ - выбранный чек ККМ.
//
Процедура ЗаполнитьНаОснованииЧекаККМ(Форма, ЧекККМ) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьНаОснованииЧекаККМ(Форма, ЧекККМ);
	
КонецПроцедуры

// Процедура заполняет данные на форме РМК на освновании выбранного отложенного чека.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы РМК.
//  ОтложенныйЧек - ДокументСсылка.ЧекККМ - выбранный отложенный чек ККМ.
//
Процедура ЗаполнитьДанныеИзОтложенногоЧека(Форма, ОтложенныйЧек) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьДанныеИзОтложенногоЧека(Форма, ОтложенныйЧек);
	
КонецПроцедуры

// Процедура заполняет данные на форме РМК о номенклатуре.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы РМК.
//
Процедура ДополнитьСведенияОТоварах(Форма) Экспорт
	
	ОбщегоНазначенияРМКРТ.ДополнитьСведенияОТоварах(Форма);
	
КонецПроцедуры

// Возвращает систему налогообложения чека ККМ.
//
// Параметры:
//  ЧекККМ - ДокументСсылка.ЧекККМ - чек ККМ, для которого нужно определить систему налогообложения.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыСистемНалогообложенияККТ - система налогообложения.
//
Функция СистемаНалогообложенияЧека(ЧекККМ) Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.СистемаНалогообложенияЧека(ЧекККМ);
	
КонецФункции

// Проверяет является ли статус чека пробит.
//
// Параметры:
//  ЧекККМ - ДокументСсылка.ЧекККМ - чек ККМ, в котором нужно проверит статус.
//
// Возвращаемое значение:
//  Булево - Истина, если статус чека пробит.
//
Функция СтатусЧекаПробит(ЧекККМ) Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.СтатусЧекаПробит(ЧекККМ);
	
КонецФункции

// Процедура устанавливает статус чека.
//
// Параметры:
//  ЧекККМ - ДокументОбъект.ЧекККМ - чек ККМ для смены статуса.
//  Статус - Строка - статус, который необходимо установить. Если пустая строка, то очистить статус.
//
Процедура УстановитьСтатусЧека(ЧекККМ, Статус = "") Экспорт
	
	ОбщегоНазначенияРМКРТ.УстановитьСтатусЧека(ЧекККМ, Статус)
	
КонецПроцедуры

// Процедура заполняет массив серий, исключая серии, которые уже присутствуют в РМК.
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - товар, для которого необходимо заполнить серии.
//  МассивСерий - Массив - массив, в который необходимо добавить найденные серии.
//  ИсключаяСерии - Массив - массив, в котором содержаться серии, которые уже присутствуют в РМК и их нужно исключить.
//
Процедура ЗаполнитьСписокВыбораСерийНоменклатуры(Номенклатура, МассивСерий, ИсключаяСерии) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьСписокВыбораСерийНоменклатуры(Номенклатура, МассивСерий, ИсключаяСерии);
	
КонецПроцедуры

// Процедура заполняет шаблон чека в параметры перед пробитием чека на ККТ.
//
// Параметры:
//  ЧекККМ - ДокументСсылка.ЧекККМ - ссылка на чек, который будет пробит.
//  ОбщиеПараметры - Структура - см. МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека().
//  ТекущаяНастройкаРМК - СправочникСсылка.НастройкиРабочегоМестаКассира - текущая настройка рабочего места кассира.
//
Процедура ЗаполнитьШаблонЧека(ЧекККМ, ОбщиеПараметры, ТекущаяНастройкаРМК) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьШаблонЧека(ЧекККМ, ОбщиеПараметры, ТекущаяНастройкаРМК);
	
КонецПроцедуры

// Устанавливает пустой статус в документ ЧекККМ, если у него не установлен статус.
//
// Параметры:
//  ОтложенныйЧек - ДокументСсылка.ЧекККМ - ссылка на отложенный чек.
//
Процедура УстановитьПустойСтатусВОтложенныйЧек(ОтложенныйЧек) Экспорт
	
	ОбщегоНазначенияРМКРТ.УстановитьПустойСтатусВОтложенныйЧек(ОтложенныйЧек);
	
КонецПроцедуры

// Заполнение данных из выбранного документа заказ покупателя.
//
// Параметры:
//  ЗаказПокупателя - Структура, ДокументСсылка - выбранный документ заказ покупателя;
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира;
//  Отказ - Булево - флаг ошибки при выполнении;
//  ОписаниеОшибки - Строка - описание ошибки выполнения.
//
Процедура ЗаполнитьПоЗаказу(ЗаказПокупателя, Форма, Отказ, ОписаниеОшибки) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьПоЗаказу(ЗаказПокупателя, Форма, Отказ, ОписаниеОшибки);
	
КонецПроцедуры

// Заполнение данных из выбранного документа безналичной оплаты.
//
// Параметры:
//  ДанныеВыбора - Структура - данные выбранного документа безналичной оплаты.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура ЗаполнитьПоДокументуБезналичнойОплаты(ДанныеВыбора, Форма) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьПоДокументуБезналичнойОплаты(ДанныеВыбора, Форма);
	
КонецПроцедуры

// Возвращает имя константы использовать бонусные программы.
//
// Возвращаемое значение:
//  Строка - наименование константы, в которой хранится признак использования бонусных программ.
//
Функция ИмяКонстантыИспользоватьСервисЛояльности() Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ИмяКонстантыИспользоватьСервисЛояльности();
	
КонецФункции

// Возвращает пустую ссылку на справочник.
//
// Параметры:
//  ИмяСправочника - Строка - имя справочника
//
// Возвращаемое значение:
//  СправочникСсылка - пустая ссылка на справочник .
//
Функция ПустаяСсылкаНаСправочник(ИмяСправочника) Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ПустаяСсылкаНаСправочник(ИмяСправочника);
	
КонецФункции

// Возвращает признак использования запретов продаж по дням.
//
// Возвращаемое значение:
//  ИспользоватьЗапретПродаж - Булево - признак использования оплат платежными системами.
//
Функция ИспользоватьЗапретыПродажПоДням() Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ИспользоватьЗапретыПродажПоДням();
	
КонецФункции

// Возвращает признак ведения сведений для передачи в ЕГАИС.
//
// Возвращаемое значение:
//  ИспользоватьЗапретПродаж - Булево - признак использования оплат платежными системами.
//
Функция ВестиСведенияДляДекларацийПоАлкоголю() Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ВестиСведенияДляДекларацийПоАлкоголю();
	
КонецФункции

// Устанавливает признак формы по одноименному значению функциональной опции.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы.
//  ИмяФункциональнойОпции - Строка.
//
Процедура УстановитьПризнакФормеПоДаннымФункциональнойОпции(Форма, ИмяФункциональнойОпции) Экспорт
	
	ОбщегоНазначенияРМКРТ.УстановитьПризнакФормеПоДаннымФункциональнойОпции(Форма, ИмяФункциональнойОпции);
	
КонецПроцедуры

// Возвращает имя константы использования запретов на продажи.
//
// Возвращаемое значение:
//  Строка - наименование константы, в которой хранится признак использования запрета продаж.
//
Функция ИмяКонстантыИспользоватьЗапретПродаж() Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ИмяКонстантыИспользоватьЗапретПродаж();
	
КонецФункции

// Возвращает имя константы ведения сведений для декларации по алкоголю.
//
// Возвращаемое значение:
//  Строка - наименование константы, в которой хранится признак использования ведения деклараций для ЕГАИС.
//
Функция ИмяКонстантыВестиСведенияДляДекларацийПоАлкоголю() Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ИмяКонстантыВестиСведенияДляДекларацийПоАлкоголю();
	
КонецФункции

// Возвращает текст запроса наличия запретов продаж по времени.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаДействующихЗапретовПродаж() Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ТекстЗапросаДействующихЗапретовПродаж();
	
КонецФункции

// Процедура производит дополнительные действия для настройки работы с оплатой по карте.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы.
//
Процедура НастроитьОплатуПлатежнымиКартами(Форма) Экспорт
	
	ОбщегоНазначенияРМКРТ.НастроитьОплатуПлатежнымиКартами(Форма);
	
КонецПроцедуры

// Возвращает структуру дисконтной карты
//
// Параметры:
//  МагнитныйКод - Строка - код, по которому выполняется поиск.
//
// Возвращаемое значение:
//  Структура - Параметры дисконтной карты, или Неопределено если карта не найдена
//
Функция ПолучитьДисконтнуюКарту(МагнитныйКод) Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ПолучитьДисконтнуюКарту(МагнитныйКод);
	
КонецФункции

// Процедура производит обработку выбранного документа расчета.
//
// Параметры:
//  ПараметрыВыбора - Структура - данные выбранного документа расчета.
//  Форма - ФормаКлиентскогоПриложения - данные формы.
//
Процедура ОбработатьВыборДокументаРасчета(ПараметрыВыбора, Форма) Экспорт
	
	ОбщегоНазначенияРМКРТ.ОбработатьВыборДокументаРасчета(ПараметрыВыбора, Форма);
	
КонецПроцедуры

// Процедура формирует структуру данных, которая затем будет выгружена в XML.
//
// Параметры:
//  СтруктураНастроек - Структура - структура, в которую нужно добавить настройки.
//  НастройкаРМК - СправочникСсылка.НастройкиРабочегоМестаКассира - текущая настройка РМК.
//
Процедура СформироватьСтруктуруНастроек(СтруктураНастроек, Знач НастройкаРМК) Экспорт
	
	ОбщегоНазначенияРМКРТ.СформироватьСтруктуруНастроек(СтруктураНастроек, НастройкаРМК);
	
КонецПроцедуры

// Процедура производит переопределение запроса для формирования списка продавцов.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма выбора продавцов.
//
Процедура ПереопределитьЗапросДоступныхПродавцов(Форма) Экспорт
	
	ОбщегоНазначенияРМКРТ.ПереопределитьЗапросДоступныхПродавцов(Форма);
	
КонецПроцедуры

// Процедура записывает в базу штрихкод.
//
// Параметры:
//  ДанныеСтроки - Структура - данные для записи в регистр штрихкодов.
//
Процедура ЗаписатьШтрихкод(ДанныеСтроки) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаписатьШтрихкод(ДанныеСтроки);
	
КонецПроцедуры

// Возвращает структуру дисконтной карты
//
// Параметры:
//  СтруктураРезультат - Структура - параметры создания карты лояльности.
//  Форма - ФормаКлиентскогоПриложения - данные формы.
//
Процедура СоздатьЛокальноКартуЛояльности(СтруктураРезультат, Форма) Экспорт
	
	ОбщегоНазначенияРМКРТ.СоздатьЛокальноКартуЛояльности(СтруктураРезультат, Форма);
	
КонецПроцедуры

// Определяет значение системы налогообложения организации на указанную дату.
//
//  Параметры:
//   Организация - СправочникСсылка.Организации - организация для которой нужно определить СНО.
//   ДатаДокумента - Дата, Неопределено - дата на которую нужно определить тип СНО.
//  
// Возвращаемое значение:
//  СистемыНалогообложенияККТ - Перечисление.ТипыСистемНалогообложенияККТ - значение СНО.
//
Функция ТипСистемыНалогообложенияККТ(Организация, ДатаДокумента = Неопределено) Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.СНОККТДляОрганизацииПоУмолчанию(Организация, ДатаДокумента);
	
КонецФункции

// Получает последний порядковый номер документа (чека) для КассыККМ.
//
// Параметры:
//  КассаККМ - СправочникСсылка.КассыККМ - значение справочника "КассыККМ" для которого нужно получить 
//    максимальный номер чека.
// 
// Возвращаемое значение:
//  НомерЧекаККМ - Число - номер последнего документа.
//
Функция НомерЧекаККМ(КассаККМ) Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.НомерЧекаККМ(КассаККМ);
	
КонецФункции

// Функция получает реквизиты кассы.
//
// Параметры:
//  КассаККМ - СправочникСсылка.КассыККМ - Ссылка на кассу ККМ.
//  РабочееМесто - СправочникСсылка.РабочиеМеста, Неопределено - (необязательный) ссылка на рабочее место.
//
// Возвращаемое значение:
//	Структура.
//
Функция РеквизитыКассыККМ(КассаККМ, РабочееМесто = Неопределено) Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.РеквизитыКассыККМ(КассаККМ, РабочееМесто);
	
КонецФункции

// Процедура заполняет организацию продажи в строке.
//
// Параметры:
//  ДанныеСтроки - Структура - данные текущей строки.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура ЗаполнитьОрганизациюПродажи(ДанныеСтроки, Форма) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьОрганизациюПродажи(ДанныеСтроки, Форма);
	
КонецПроцедуры

// Процедура производит поиск подарочного сертификата.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
Процедура НайтиСертификатЛокально(Форма) Экспорт
	
	ОбщегоНазначенияРМКРТ.НайтиСертификатЛокально(Форма);
	
КонецПроцедуры

// Процедура производит запрос бонусных баллов.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
Процедура НайтиБонусыЛокально(Форма) Экспорт
	
	ОбщегоНазначенияРМКРТ.НайтиБонусыЛокально(Форма);
	
КонецПроцедуры

// Функция определяет нужно ли контролировать остатки для текущего пользователя.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
// Возвращаемое значение:
//  КонтролироватьОстатки - булево - Истина, если нужно контролировать остатки.
//
Функция ТребуетсяКонтрольОстатков(Форма) Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ТребуетсяКонтрольОстатков(Форма);
	
КонецФункции

// Процедура производит контроль остатков.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//  КонтрольОстатковПройден - Булево - признак успешной проверки остатков.
//  ТекстОшибки - Строка - текст возможной ошибки.
//
Процедура ПроверитьНаличиеТоваров(Форма, КонтрольОстатковПройден, ТекстОшибки) Экспорт
	
	ОбщегоНазначенияРМКРТ.ПроверитьНаличиеТоваров(Форма, КонтрольОстатковПройден, ТекстОшибки);
	
КонецПроцедуры

// Возвращает реквизиты эквайринговой операции Чека продажи.
//
// Параметры:
//  ЧекПродажи - ДокументСсылка.ЧекККМ - чек продажи, основание чека на возврат.
//
// Возвращаемое значение:
//  Результат - Структура - (содержит НомерПлатежнойКарты, НомерЧекаЭТ, СсылочныйНомер, ЭквайринговыйТерминал)
//
Функция РеквизитыЭквайринговойОперацииПродажи(ЧекПродажи) Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.РеквизитыЭквайринговойОперацииПродажи(ЧекПродажи);
	
КонецФункции

// Процедура устанавливает статус аннулированный у чекаККМ.
//
// Параметры:
//  ЧекККМ - ДокументСсылка.ЧекККМ - документ для изменения статуса.
//
Процедура АннулироватьЧек(ЧекККМ) Экспорт
	
	ОбщегоНазначенияРМКРТ.АннулироватьЧек(ЧекККМ);
	
КонецПроцедуры

// Возвращает признак можно ли открывать рабочее место кассира.
//
// Возвращаемое значение:
//  Булево - Истина, если можно открывать рабочее место кассира
//
Функция МожноОткрыватьРМК() Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.МожноОткрыватьРМК();
	
КонецФункции

// Возвращает строку для печати на ФР разбитую по ширине ленты.
//
// Параметры:
//  МассивДокументов - Массив - массив документов для которых возвращается строка.
//  ШиринаЛенты - Число - ширина ленты печати.
//
// Возвращаемое значение:
//  Строка - строка печати на оборудовании.
//
Функция СтрокаПечатиНаФР(МассивДокументов, ШиринаЛенты = 32) Экспорт
	Возврат ОбщегоНазначенияРМКРТ.СтрокаПечатиНаФР(МассивДокументов, ШиринаЛенты);
КонецФункции

// Возвращает текст запроса для поиска чека в регистре "Фискальные операции" по фискальному признаку.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаЧекПоФискальномуПризнаку() Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ТекстЗапросаЧекПоФискальномуПризнаку();
	
КонецФункции

// Определяет присутствие товаров с возрастным ограничением в ЧекеККМ
//
// Параметры:
//  ЧекККМ - ДокументСсылка.ЧекККМ - анализируемый документ.
//
// Возвращаемое значение:
//  Булево - Истина, если есть товары с возрастным ограничением (табак, алкоголь)
//
Функция ЕстьТоварыСВозрастнымОграничением(ЧекККМ) Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ЕстьТоварыСВозрастнымОграничением(ЧекККМ);
	
КонецФункции	

// Возвращает текст запроса для проверки уникальности избранных товаров.
// Текст запроса должен проверять наличиие дублей строк с одинаковыми товарами.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаУникальностьИзбранныхТоваров() Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ТекстЗапросаУникальностьИзбранныхТоваров();
	
КонецФункции

// Возвращает текст запроса для проверки заполнения характеристик
// для товаров, для которых ведется учет по характеристикам.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаЗаполнениеХарактеристик() Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ТекстЗапросаЗаполнениеХарактеристик();
	
КонецФункции

// Определяет необходимость ввода характеристики по переданной номенклатуре.
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - номенклатура, для которой необходимо проверить характеристики.
//
// Возвращаемое значение:
//  Булево - Истина, если необходим ввод характеристик.
//
Функция ТребуетсяВводХарактеристики(Номенклатура) Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ТребуетсяВводХарактеристики(Номенклатура);
	
КонецФункции

// Возвращает текущее рабочее место.
//
// Возвращаемое значение:
//  СправочникСсылка.РабочиеМеста - текущее рабочее место.
//
Функция ТекущееРабочееМесто() Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ТекущееРабочееМесто();
	
КонецФункции

// Определяет виды номенклатуры по переданному значению Особенность учета..
//
// Параметры:
//  ОсобенностьУчета - ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры - особенность учета..
//
// Возвращаемое значение:
//  Массив - массив, в котором содержатся виды номенклатуры.
//
Функция ВидыНоменклатурыПоОсобенностиУчета(ОсобенностьУчета) Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ВидыНоменклатурыПоОсобенностиУчета(ОсобенностьУчета);
	
КонецФункции

// Возвращает актуальное значение префикса информационной базы
//
// Параметры:
//  ОчищатьПрефикс - Булево - признак необходимости сброса значения префикса
//
// Возвращаемое значение:
//  АктуальноеЗначениеПрефикса - Строка, Неопределено - актуальное значение префикса
//
Функция АктуальноеЗначениеПрефикса(ОчищатьПрефикс) Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.АктуальноеЗначениеПрефикса(ОчищатьПрефикс);
	
КонецФункции

// Определяет кассира по переданному значению пользователя.
//
// Параметры:
//  ПользовательБД - СправочникСсылка.Пользователи - пользователь базы данных.
//
// Возвращаемое значение:
//  Кассир - ОпределяемыйТип.КассирРМК - кассир для текущего пользователя.
//
Функция КассирДляРМК(ПользовательБД) Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.КассирДляРМК(ПользовательБД);
	
КонецФункции

// Заполняет имя кассира и его ИНН для печати на ККТ.
//
// Параметры:
//  ПараметрыОперации - см.ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОткрытияЗакрытияСмены().
//  Пользователь - СправочникСсылка.Пользователи - пользователь РМК.
//  Кассир - ОпределяемыйТип.КассирРМК - кассир РМК
//
Процедура ЗаполнитьПараметрыКассираДляПечати(ПараметрыОперации, Пользователь, Кассир) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьПараметрыКассираДляПечати(ПараметрыОперации, Пользователь, Кассир);
	
КонецПроцедуры

// Возвращает сумму оплат, которые были приняты используя эквайринговый
// терминал, подключенный к программе.
//
// Параметры:
//  ЧекККМ - ОпределяемыйТип.ЧекККМРМК - анализируемый документ.
//
// Возвращаемое значение:
//  Число - сумма безналичной оплаты.
//
Функция СуммаОплатНаПодключенномЭТ(ЧекККМ) Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.СуммаОплатНаПодключенномЭТ(ЧекККМ);
	
КонецФункции

// Заполняет массив статусами,в которых чек ККМ считается пробитым.
//
// Параметры:
//  МассивСтатусов - Массив - массив статусов чека ККМ.
//
Процедура ЗаполнитьСтатусыПробитыхЧековККМ(МассивСтатусов) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьСтатусыПробитыхЧековККМ(МассивСтатусов);
	
КонецПроцедуры

// Получает цену емрц из данных информационной базы на дату.
//
// Параметры:
//  ОсобенностьУчета - Перечисления.ВидыМаркированнойПродукцииБПО - тип маркированной продукции для проверки цены.
//  Период - Дата - дата проверки цены.
//  ЕМРЦ - Число - значение емрц.
//
Процедура ПолучитьЦенуЕМРЦ(ОсобенностьУчета, Период = Неопределено, ЕМРЦ = 0) Экспорт
	
	ОбщегоНазначенияРМКРТ.ПолучитьЦенуЕМРЦ(ОсобенностьУчета, Период, ЕМРЦ);
	
КонецПроцедуры

// Отправляет SMS через настроенного поставщика услуги, возвращает идентификатор сообщения.
//
// Параметры:
//  НомераПолучателей - Массив из Строка - номера получателей в формате +7ХХХХХХХХХХ;
//  ТекстСообщения - Строка - текст сообщения, максимальная длина у операторов может быть разной;
//
// Возвращаемое значение:
//  Структура:
//    * ОтправленныеСообщения - Массив из Структура:
//      ** НомерПолучателя - Строка - номер получателя SMS.
//      ** ИдентификаторСообщения - Строка - идентификатор SMS, присвоенный провайдером для отслеживания доставки.
//    * ОписаниеОшибки - Строка - пользовательское представление ошибки, если пустая строка, то ошибки нет.
//
Функция ОтправитьSMS(НомераПолучателей, ТекстСообщения) Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ОтправитьSMS(НомераПолучателей, ТекстСообщения);
	
КонецФункции

// Проверяет правильность сохраненных настроек отправки SMS.
//
// Возвращаемое значение:
//  Булево - Истина, если отправка SMS уже настроена.
//
Функция НастройкаОтправкиSMSВыполнена() Экспорт
	Возврат ОбщегоНазначенияРМКРТ.НастройкаОтправкиSMSВыполнена();
КонецФункции

// Процедура фискализирует ЧекККМ после пробития на ККТ.
//
// Параметры:
//  ВходящиеДанные - Структура - данные о результате пробития чека на ККТ.
//  ДополнительныеПараметры - Структура - дополнительные параметры пробития чека.
//
Процедура ФискализироватьЧекЗавершение(ВходящиеДанные, ДополнительныеПараметры)Экспорт
	
	ОбщегоНазначенияРМКРТ.ФискализироватьЧекЗавершение(ВходящиеДанные, ДополнительныеПараметры);
	
КонецПроцедуры

// Рассчитывает автоматические скидки 
//
// Параметры:
//  ФормаРМК - ДанныеФормыКоллекция - данные объекта рабочего места кассира.
//
Процедура РассчитатьАвтоматическиеСкидки(ФормаРМК) Экспорт
	
	ОбщегоНазначенияРМКРТ.РассчитатьАвтоматическиеСкидки(ФормаРМК);
	
КонецПроцедуры

// Перечень особенностей учета, поддерживающих возврат товаров без марок
//
// Возвращаемое значение:
//   Результат - Массив из ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры
//
Функция ОсобенностиУчетаДопускающиеВозвратБезМарки() Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ОсобенностиУчетаДопускающиеВозвратБезМарки();
	
КонецФункции

// Возвращает признак табачной продукции
//
// Параметры:
//  ОсобенностьУчета - ОпределяемыйТип.ОсобенностиУчетаНоменклатурыРМК - особенность учета
//
// Возвращаемое значение:
//  Булево - Истина, если особенность учета является табачной
//
Функция ЭтоТабачнаяПродукция(ОсобенностьУчета) Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ЭтоТабачнаяПродукция(ОсобенностьУчета);
	
КонецФункции

// Возвращает признак молочной продукции
//
// Параметры:
//  ОсобенностьУчета - ОпределяемыйТип.ОсобенностиУчетаНоменклатурыРМК - особенность учета
//
// Возвращаемое значение:
//  Булево - Истина, если особенность учета является молочной
//
Функция ЭтоМолочнаяПродукция(ОсобенностьУчета) Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ЭтоМолочнаяПродукция(ОсобенностьУчета);
	
КонецФункции

// Возвращает признак алкогольной продукции
//
// Параметры:
//  ОсобенностьУчета - ОпределяемыйТип.ОсобенностиУчетаНоменклатурыРМК - особенность учета
//
// Возвращаемое значение:
//  Булево - Истина, если особенность учета является алкогольной
//
Функция ЭтоАлкогольнаяПродукция(ОсобенностьУчета) Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ЭтоАлкогольнаяПродукция(ОсобенностьУчета);
	
КонецФункции

// Возвращает признак продажи чека
//
// Параметры:
//  ЧекККМ - ОпределяемыйТип.ОпределяемыйТип.ЧекККМРМК - чек ккм
//
// Возвращаемое значение:
//  Булево - Истина, если это чек продажи
//
Функция ЭтоЧекПродажи(ЧекККМ) Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ЭтоЧекПродажи(ЧекККМ);
	
КонецФункции

// Возвращает признак использования оплат сертификатами НСПК.
//
// Возвращаемое значение:
//  ИспользоватьОплатуСертификатамиНСПК - Булево - признак использования оплат сертификатами НСПК.
//
Функция ИспользоватьОплатуСертификатамиНСПК() Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ИспользоватьОплатуСертификатамиНСПК();
	
КонецФункции

// Возвращает имя константы оплата сертификатами НСПК.
//
// Возвращаемое значение:
//  Строка - наименование константы, в которой хранится признак использования оплат сертификатами НСПК.
//
Функция ИмяКонстантыИспользоватьОплатуСертификатамиНСПК() Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ИмяКонстантыИспользоватьОплатуСертификатамиНСПК();
	
КонецФункции

// Процедура заполняет свойства "КодТРУ" и "ВозможнаОплатаЭС" в строке товара.
//
// Параметры:
//  ДанныеСтроки - Структура - данные текущей строки.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура ЗаполнитьВозможностьОплатыЭС(ДанныеСтроки, Форма) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьВозможностьОплатыЭС(ДанныеСтроки, Форма);
	
КонецПроцедуры

// В процедуре описывается условное оформление для настроек рабочего места кассира.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура НастроитьУсловноеОформлениеВНастройкахРМК(Форма) Экспорт
	
	ОбщегоНазначенияРМКРТ.НастроитьУсловноеОформлениеВНастройкахРМК(Форма);
	
КонецПроцедуры

// Возвращает имя константы префикс штрихкода весового товара.
//
// Возвращаемое значение:
//  Строка - наименование константы, в которой хранится префикс штрихкода весового товара.
//
Функция ИмяКонстантыПрефиксШтрихкодаВесовогоТовара() Экспорт
	Возврат ОбщегоНазначенияРМКРТ.ИмяКонстантыПрефиксШтрихкодаВесовогоТовара();
КонецФункции

// Возвращает имя константы префикс штучного фасованного товара.
//
// Возвращаемое значение:
//  Строка - наименование константы, в которой хранится префикс штрихкода штучного фасованного товара.
//
Функция ИмяКонстантыПрефиксШтрихкодаФасованногоТовара() Экспорт
	Возврат ОбщегоНазначенияРМКРТ.ИмяКонстантыПрефиксШтрихкодаФасованногоТовара();
КонецФункции

// Возвращает имя константы шаблон штрихкода весовых товаров.
//
// Возвращаемое значение:
//  Строка - наименование константы, в которой хранится шаблон штрихкода весовых товаров.
//
Функция ИмяКонстантыШаблонШтрихкодаВесовыхТоваров() Экспорт
	Возврат ОбщегоНазначенияРМКРТ.ИмяКонстантыШаблонШтрихкодаВесовыхТоваров();
КонецФункции

// Процедура заполняет массив серий, исключая серии, которые уже присутствуют в РМК.
//
// Параметры:
//  Номенклатура - ОпределяемыйТип.НоменклатураРМК - товар, для которого необходимо заполнить партии.
//  МассивПартий - Массив - массив, в который необходимо добавить найденные партии.
//
Процедура ЗаполнитьСписокВыбораПартийНоменклатуры(Номенклатура, МассивПартий) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьСписокВыбораПартийНоменклатуры(Номенклатура, МассивПартий);
	
КонецПроцедуры

// В процедуре производится прикладная логика, влияющая на
// заполнение серий и партий в строке товаров.
//
// Параметры:
//  ТекущаяСтрока - ДанныеТекущейСтроки - текущая строка товаров.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура ПереопределитьПараметрыЗаполненияСерийИПартий(ТекущаяСтрока, Форма) Экспорт
	
	ОбщегоНазначенияРМКРТ.ПереопределитьПараметрыЗаполненияСерийИПартий(ТекущаяСтрока, Форма);
	
КонецПроцедуры

// Возвращает имя реквизита, в котором хранится код карты лояльности
//
// Возвращаемое значение:
//  Строка - наименование реквизита, в котором хранится код карты лояльности
//
Функция ИмяРеквизитаКодКартыЛольности() Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ИмяРеквизитаКодКартыЛольности();

КонецФункции

#Область ПомощникНастройкиКассовогоМеста

// Возвращает текст запроса для данных КассыККМ.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаПеречняКассККМПомощникаНастройкиКассовогоМеста() Экспорт
	Возврат ОбщегоНазначенияРМКРТ.ТекстЗапросаПеречняКассККМПомощникаНастройкиКассовогоМеста();
КонецФункции

// Возвращает текст запроса для отчета о подключенном оборудовании.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаДляОтчетаОПодключенномОборудовании() Экспорт
	Возврат ОбщегоНазначенияРМКРТ.ТекстЗапросаДляОтчетаОПодключенномОборудовании();
КонецФункции

// Возвращает текст запроса для данных КассыККМ.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаКассККМСОтборомПоВладельцуИСтруктурнойЕдинице() Экспорт
	Возврат ОбщегоНазначенияРМКРТ.ТекстЗапросаКассККМСОтборомПоВладельцуИСтруктурнойЕдинице();
КонецФункции

// Возвращает текст запроса для видов оплат.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаВидовОплатПомощникаНастройкиКассовогоМеста() Экспорт
	Возврат ОбщегоНазначенияРМКРТ.ТекстЗапросаВидовОплатПомощникаНастройкиКассовогоМеста();
КонецФункции

// Возвращает текст запроса наличия физлица у пользователя.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаПроверкиНаличияФизлицаУПользователя() Экспорт
	Возврат ОбщегоНазначенияРМК.ТекстЗапросаПроверкиНаличияФизлицаУПользователя();
КонецФункции

// Возвращает текст запроса для данных пользователей.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаДополнительныхДанныхПользователей() Экспорт
	Возврат ОбщегоНазначенияРМКРТ.ТекстЗапросаДополнительныхДанныхПользователей();
КонецФункции

// Возвращает текст запроса для кодов доступа пользователей в интерфейс нового рабочего места кассира.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаКодовДоступаПользователей() Экспорт
	Возврат ОбщегоНазначенияРМКРТ.ТекстЗапросаКодовДоступаПользователей();
КонецФункции

// Возвращает текст запроса эквайринговых терминалов.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаПеречняЭквайринговыхТерминалов() Экспорт
	Возврат ОбщегоНазначенияРМКРТ.ТекстЗапросаПеречняЭквайринговыхТерминалов();
КонецФункции

// Возвращает текст запроса для подключенных эквайринговых терминалов.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаПеречняПодключенныхКассККМ() Экспорт
	Возврат ОбщегоНазначенияРМКРТ.ТекстЗапросаПеречняПодключенныхКассККМ();
КонецФункции

// Возвращает текст запроса для подключенных эквайринговых терминалов.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаПеречняПодключенныхЭквайринговыхТерминалов() Экспорт
	Возврат ОбщегоНазначенияРМКРТ.ТекстЗапросаПеречняПодключенныхЭквайринговыхТерминалов();
КонецФункции

// Возвращает текст запроса для подключенных эквайринговых терминалов с незаполненными тарифами на обслуживание.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаЭквайринговыхТерминаловСПустымиТарифамиНаОбслуживание() Экспорт
	Возврат ОбщегоНазначенияРМКРТ.ТекстЗапросаЭквайринговыхТерминаловСПустымиТарифамиНаОбслуживание();
КонецФункции

// Возвращает текст запроса для отображения результатов настройки ККМ.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаДляОтображенияРезультатовНастройкиККМ() Экспорт
	Возврат ОбщегоНазначенияРМКРТ.ТекстЗапросаДляОтображенияРезультатовНастройкиККМ();
КонецФункции

// Возвращает текст запроса организаций и подразделений.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаОрганизацийИПодразделений() Экспорт
	Возврат ОбщегоНазначенияРМКРТ.ТекстЗапросаОрганизацийИПодразделений();
КонецФункции

// Возвращает текст запроса признаков использования оплат картами и платежными системами
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаИспользованияВидовОплатПомощникаНастройкиКассовогоМеста() Экспорт
	Возврат ОбщегоНазначенияРМКРТ.ТекстЗапросаИспользованияВидовОплатПомощникаНастройкиКассовогоМеста();
КонецФункции

// Возвращает имя основной таблицы для программно переопределяемого динамического списка
//
// Параметры:
//  ИмяСущности - Строка - имя динамического списка
//
// Возвращаемое значение:
//  Результат - Строка
//
Функция ИмяОсновнойТаблицыДляСущности(ИмяСущности) Экспорт
	Возврат ОбщегоНазначенияРМКРТ.ИмяОсновнойТаблицыДляСущности(ИмяСущности);
КонецФункции

// Возвращает признак возможности открытия формы помощника настройки кассового места при запуске 
// формы рабочего места кассира
//
// Возвращаемое значение:
//  Результат - Булево.
//
Функция ОткрыватьФормуПомощникаНастройкиКассовогоМеста() Экспорт
	Возврат ОбщегоНазначенияРМК.ОткрыватьФормуПомощникаНастройкиКассовогоМеста();
КонецФункции

#КонецОбласти


#Область ПрограммныйИнтерфейс_ПереопределениеАутентификацииПользователейПоКодамДоступа

// Проверяет наличие ошибок при настройке текущего пользователя 
//
// Параметры:
//  Отказ - Истина - признак наличия отказа, выставляется при выявлении ошибки настройки.
//  ТекстЗаголовка - Строка - текст заголовка ошибки для передачи в заголовок панели ошибок формы РМК.
//  ТекстСообщения - Строка - текст ошибки для передачи в тело ошибки панели ошибок формы РМК.
//
//
Процедура ПроверитьНастройкиПользователя(Отказ, ТекстЗаголовка, ТекстСообщения) Экспорт

	ОбщегоНазначенияРМКРТ.ПроверитьНастройкиПользователя(Отказ, ТекстЗаголовка, ТекстСообщения);

КонецПроцедуры

// Возвращает текст запроса соответствия кассира текущему пользователю.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаСоответствияКассираТекущемуПользователю() Экспорт

	Возврат ОбщегоНазначенияРМКРТ.ТекстЗапросаСоответствияКассираТекущемуПользователю();

КонецФункции

// Возвращает вновь сгенерированный код доступа кассира
//
// Возвращаемое значение:
//  Результат - Строка
//
Функция НовыйКодДоступаКассира() Экспорт
	Возврат ОбщегоНазначенияРМКРТ.НовыйКодДоступаКассира();
КонецФункции

// Возвращает изображение штрихкода в табличном документе
//
// Параметры:
//  КодКассира - Строка - исходные данные кода доступа кассира для выведения в виде сканируемого изображения
//  Наименование - Строка - исходные данные кассира для выведения в виде сканируемого изображения
//
// Возвращаемое значение:
//  Результат - ТабличныйДокумент
//
Функция ПодготовитьКодДоступаПользователяДляСохранения(КодКассира, Наименование) Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ПодготовитьКодДоступаПользователяДляСохранения(КодКассира, Наименование);
	
КонецФункции


// Возвращает запрос на получение паролей текущего пользователя
//
// Параметры:
//  ТекущийПользователь - СправочникСсылка.Пользователи - пользователь - владелец кодов доступа
//
// Возвращаемое значение:
//  Результат - Запрос
//
Функция ЗапросПолученияКодовДоступаПользователя(ТекущийПользователь) Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ЗапросПолученияКодовДоступаПользователя(ТекущийПользователь);
	
КонецФункции

// Возвращает признак возможности отправки электронной почты без функциональности БСП
//
// Возвращаемое значение:
//  Результат - Булево
//
Функция ДоступнаОтправкаЭлектроннойПочтыБезБиблиотечнойФункциональности() Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ДоступнаОтправкаЭлектроннойПочтыБезБиблиотечнойФункциональности();
	
КонецФункции

// Возвращает признак результата успешно формирования email при отправке 
//
// Параметры:
//  ТемаПисьма - Строка - тема отправляемого email
//  ТелоПисьма - Строка - тело текста отправляемого email
//  АдресаПолучателей - Строка - адреса получателей через разделитель
//	РазделительАдресовПолучателей - Строка
//
// Возвращаемое значение:
//  ОтправкаУспешна - Булево - признак успешной отправки
//
Функция ОтправитьEmail(ТемаПисьма, ТелоПисьма, АдресаПолучателей, РазделительАдресовПолучателей = ";") Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ОтправитьEmail(ТемаПисьма, ТелоПисьма, АдресаПолучателей,
		РазделительАдресовПолучателей = ";");
		
КонецФункции

//Переопределяет значение владельца кода доступа по исходным данным
Процедура ПереопределитьВладельцаКодаДоступа(ВладелецКодаДоступа) Экспорт
	ОбщегоНазначенияРМКРТ.ПереопределитьВладельцаКодаДоступа(ВладелецКодаДоступа);
КонецПроцедуры

#КонецОбласти

// Возвращает таблицу с данными по товарам для добавления в РМК.
//
// Параметры:
//  МассивТоваров - Массив - массив, в котором содержится список товаров.
//
// ВозвращаемоеЗначение:
//  ТаблицаЗначений - таблица с данными по товарам для добавления в РМК.
//
Функция ТаблицаДанныхОТоварах(МассивТоваров) Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ТаблицаДанныхОТоварах(МассивТоваров);
	
КонецФункции

// В процедуре производится получение состава набора и заполнение
// таблицы товарами, которые входят в состав набора.
// Также необходимо заполнить в таблице все данные для товара, которые получают в
// ОбщегоНазначенияРМКПереопределяемый.ТаблицаДанныхОТоварах.
//
// Параметры:
//  ДанныеНабора - Структура - данные выбранного набора.
//  ТаблицаСоставНабора - ТаблицаЗначений - таблица, в которой находятся строки с товарами из состава набора и их данные.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура ЗаполнитьСоставНабора(ДанныеНабора, ТаблицаСоставНабора, Форма) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьСоставНабора(ДанныеНабора, ТаблицаСоставНабора, Форма);
	
КонецПроцедуры

// Возвращает текст сообщения по шаблону сообщения.
//
// Параметры:
//  ШаблонСообщения - СправочникСсылка.ШаблоныСообщений - ссылка на шаблон сообщения.
//  ДополнительныеПараметры - Структура - список дополнительных параметров, который будет передан в параметр
//                                        Сообщение в процедурах ПриФормированииСообщения при создании сообщения.
//
// Возвращаемое значение:
//  Строка - текст сообщения.
//
Функция СформироватьТекстСообщения(ШаблонСообщения, ДополнительныеПараметры) Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.СформироватьТекстСообщения(ШаблонСообщения, ДополнительныеПараметры);
	
КонецФункции

// Процедура настраивает динамический список для получения списка чеков для возврата скупки.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы выбора чеков.
//
Процедура ЗаполнитьТаблицуЧековККМНаВозвратСкупки(Форма) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьТаблицуЧековККМНаВозвратСкупки(Форма);
	
КонецПроцедуры

// Определяет необходимость выполнения интерактивной проверки кода маркировки в форме РМК.
// Под проверкой понимается отправка и ожидание результата проверки кода маркировки от ОИСМ (если настройка включена).
//
// Параметры:
//  Выборка - ВыборкаИзРезультатаЗапроса - см. ОбщегоНазначенияРМКПереопределяемый.ТекстЗапросаДанныеКассыККМ.
// 
// Возвращаемое значение:
//  Булево - Истина в форме РМК будет выполняться проверка с выводом результатов пользователю.
//           Ложь - в форме РМК проверка кода маркировки выполняться не будет и марка безусловно добавляется в чек.
//           В этом случае проверку марок перед фискализацией чека необходимо реализовать самостоятельно.
//
Функция ПроверятьМаркированныйТоварНаККТ(Выборка) Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ПроверятьМаркированныйТоварНаККТ(Выборка);
	
КонецФункции

// Возвращает текст запроса для заполнения таблицы чеков ККМ при выборе чека в РМК.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаТаблицаЧековККМ() Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ТекстЗапросаТаблицаЧековККМ();
	
КонецФункции

// Возвращает признак использования замены товаров.
//
// Возвращаемое значение:
//  ИспользоватьЗаменуТоваров - Булево - признак использования замены товаров.
//
Функция ИспользоватьЗаменуТоваров() Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ИспользоватьЗаменуТоваров();
	
КонецФункции

// Возвращает имя константы использования замены товаров.
//
// Возвращаемое значение:
//  Строка - наименование константы, в которой хранится признак использования замены товаров.
//
Функция ИмяКонстантыИспользоватьЗаменуТоваров() Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ИмяКонстантыИспользоватьЗаменуТоваров();
	
КонецФункции

// Настраивает динамический список для получения списка чеков оплаченных в рассрочку.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы выбора чеков.
//
Процедура ЗаполнитьТаблицуЧековККМОплаченыхВРассрочку(Форма) Экспорт
	Возврат;
КонецПроцедуры

// Обрабатывает результат подбора товаров из формы подбора товаров.
// Метод вызывается после обработки оповещения о закрытии формы подбора товаров.
//
// Параметры:
//  РезультатПодбора - ПроизвольноеЗначение - результат подбора товаров из формы подбора товаров;
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура ЗаполнитьПоПодборуТоваров(РезультатПодбора, Форма) Экспорт
	Возврат;
КонецПроцедуры

// Процедура настраивает элементы настроек форм подбора в настройках РМК.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы настроек РМК.
//
Процедура НастроитьЭлементыПодбораТоваров(Форма) Экспорт
	
	ОбщегоНазначенияРМКРТ.НастроитьЭлементыПодбораТоваров(Форма);
	
КонецПроцедуры

// Метод реализующий дополнительную логику при сохранении настроек рабочего места кассира.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - ОбщаяФорма.НастройкиРабочегоМестаКассира.
//  Результат - Структура - возвращаемый параметр работы метода, ключи структуры:
//   * ВыполненоУспешно - Булево - Ложь, если сохранение настроек формы недопустимо.
//   * ТекстПредупрежденийОшибок - Строка - текст сообщения об ошибке, который будет выведен пользователю.
//
Процедура ПриСохраненииНастроекРМК(Форма, Результат) Экспорт
	
	ОбщегоНазначенияРМКРТ.ПриСохраненииНастроекРМК(Форма, Результат);
	
КонецПроцедуры

// Позволяет обработать событие ОбработкаОповещения для формы Обработки.РабочееМестоКассира.Формы.ФормаРМК. на сервере.
// Дополнительно см. метод ОбщегоНазначенияРМККлиентПереопределяемый.ОбработкаОповещения.
//
Процедура ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	ОбщегоНазначенияРМКРТ.ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

// Обновляет исходные данные запрета продаж с выведением статуса обновления
//
// Параметры:
//  ИсходныеДанные - Структура - содержит десериализованные данные ответа из сервиса лояльности
//
// Возвращаемое значение:
//  Результат - Булево - отображает факт успешного обновления данных запрета
//
Функция АктуализироватьДанныеЗапрета(ИсходныеДанные) Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.АктуализироватьДанныеЗапрета(ИсходныеДанные);
	
КонецФункции

// Возвращает текущую кассовую смену.
//
// Параметры:
//  КассаККМ - СправочникСсылка.КассыККМ - касса ККМ, для которой нужно определить кассовую смену.
//
// Возвращаемое значение:
//  ДокументСсылка.КассоваяСмена - ссылка на документ "Кассовая смена".
//
Функция ТекущаяКассоваяСмена(КассаККМ) Экспорт
	
	ОбщегоНазначенияРМКРТ.ТекущаяКассоваяСмена(КассаККМ);
	
КонецФункции

// Формирование текста запроса динамического списка для списка товаров.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура НастроитьДинамическийСписокТоваров(Форма) Экспорт
	
	ОбщегоНазначенияРМКРТ.НастроитьДинамическийСписокТоваров(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти

// Возвращает признак использования запретов продаж по данным сервера лояльности
//
// Параметры:
//  Результат - Булево - устанавливаемое значение признака
//
Процедура ЗаполнитьПризнакИспользованияОграниченийПродажРМК(Результат) Экспорт
	ОбщегоНазначенияРМКРТ.ЗаполнитьПризнакИспользованияОграниченийПродажРМК(Результат);
КонецПроцедуры

// Устанавливает признак использования запретов продаж, поставляемых конфигурацией
//
// Параметры:
//  ИспользоватьОграниченияПродаж - Булево - исходное значение признака
//
Процедура ЗаполнитьПризнакИспользованияПоставляемыхОграниченийПродаж(ИспользоватьОграниченияПродаж) Экспорт
	ОбщегоНазначенияРМКРТ.
		ЗаполнитьПризнакИспользованияПоставляемыхОграниченийПродаж(ИспользоватьОграниченияПродаж);
КонецПроцедуры

// Обновляет признак использования календарного запрета продаж по данным использования поставляемого конфигурацией
// признака запрета продаж
//
// Параметры:
//  ИспользоватьОграниченияПродаж - Булево - устанавливаемое значение признака
//  ПараметрыОбновления - Структура - дополнительные параметры
//
Процедура ОбновитьПризнакИспользованияОграниченийПродаж(ИспользоватьОграниченияПродаж, ПараметрыОбновления) Экспорт
	ОбщегоНазначенияРМКРТ.ОбновитьПризнакИспользованияОграниченийПродаж(ИспользоватьОграниченияПродаж,
		ПараметрыОбновления);
КонецПроцедуры

// Обновляет регистр сведений запретов продаж по поставляемым (встроенным) конфигурацией ограничениям 
//
// Параметры:
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектРМК- торговый объект для отбора перечня ограничений.
//  Результат - Структура:
//  	* КомментарийОбновленияЗапретов - Строка - при наличии ошибок обновления данных содержит пояснение.
//
Процедура ОбновитьОграниченияПродажИзПоставляемыхДанных(ТорговыйОбъект, Результат) Экспорт
	ОбщегоНазначенияРМКРТ.ОбновитьОграниченияПродажИзПоставляемыхДанных(ТорговыйОбъект, Результат);
КонецПроцедуры
