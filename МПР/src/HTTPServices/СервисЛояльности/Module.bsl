#Область ОбработчикиМетодовHTTPСервиса

Функция ПолучитьБонусыКлиентаGET(Запрос)
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	Если Не СервисЛояльности.ИспользоватьСервисЛояльности(Ответ) Тогда 
		Возврат Ответ;	
	КонецЕсли;
	
	Попытка
		
		СтруктураОтвета = СервисЛояльности.ПолучистьСтруктуруОтвета("ЗапросКоличестваБонусов");
		ПараметрыМетода = СервисЛояльности.ПараметрыМетодаИзЗапроса(Запрос);
		КартаКлиента 	= СервисЛояльностиПереопределяемый.НайтиКартуКлиента(ПараметрыМетода);
		
		Если КартаКлиента <> Неопределено Тогда 
			
			СтруктураОтвета.ClientNotFound = Ложь;
			
			Если Не СервисЛояльности.БонусыЗаблокированы(КартаКлиента) Тогда
				ОстаткиБонусныхБаллов = СервисЛояльностиПереопределяемый.ПолучитьБонусыКлиента(КартаКлиента);
				БонусныеБаллыРезерв   = СервисЛояльности.ПолучитьБонусныеБаллыРезерв(КартаКлиента);
				Если ОстаткиБонусныхБаллов.Количество() Тогда 
					БонуснаяПрограммаЛояльности = КартаКлиента.БонуснаяПрограммаЛояльности;
					
					СтруктураОтвета.BonusRate = БонуснаяПрограммаЛояльности.КурсКонвертацииБонусовВВалюту;
					СтруктураОтвета.PaymentPercent = БонуснаяПрограммаЛояльности.МаксимальныйПроцентОплатыБонусами;
					
					Для Каждого СтрокаТаблицы Из ОстаткиБонусныхБаллов Цикл
						Если СтрокаТаблицы.ТекущийОстаток Тогда 
							//Проверяем ситуацию когда бонусных баллов в резерве может быть больше чем на остатке,
							//в этом случае возвращаем 0
							Если БонусныеБаллыРезерв > СтрокаТаблицы.Сумма Тогда
								СтруктураОтвета.BonusCount = 0;
							Иначе 
								СтруктураОтвета.BonusCount = СтрокаТаблицы.Сумма - БонусныеБаллыРезерв;	
							КонецЕсли
						Иначе 
							Прервать;
						КонецЕсли;				
					КонецЦикла;
				КонецЕсли;	
				СервисЛояльности.ЗаблокироватьБонусы(КартаКлиента, ТекущаяДатаСеанса());
			КонецЕсли;
			
		КонецЕсли;
		
		//Возвращаем структуру ответа
		СтруктураОтветаJSON = Новый ЗаписьJSON;
		СтруктураОтветаJSON.УстановитьСтроку();
		ЗаписатьJSON(СтруктураОтветаJSON, СтруктураОтвета);
		
		Ответ.УстановитьТелоИзСтроки(СтруктураОтветаJSON.Закрыть());
		
	Исключение
		
		Ответ = СервисЛояльности.ЗафиксироватьОшибкуСервисаЛояльности(ОписаниеОшибки(), "ПолучитьБонусыКлиента");
		
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

Функция РазблокироватьБонусыКлиентаPOST(Запрос)
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	Попытка
		
		Если Не СервисЛояльности.ИспользоватьСервисЛояльности(Ответ) Тогда 
			Возврат Ответ;	
		КонецЕсли;
		
		ПараметрыМетода = СервисЛояльности.ПараметрыМетодаИзЗапроса(Запрос);
		КартаКлиента 	= СервисЛояльностиПереопределяемый.НайтиКартуКлиента(ПараметрыМетода);
		
		Если КартаКлиента <> Неопределено Тогда
			СервисЛояльности.РазблокироватьБонусы(КартаКлиента);
			ТекстСообщения = НСтр("ru = 'Бонусы разблокированы'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Карта клиента не найдена'");
		КонецЕсли;
		
		Ответ.УстановитьТелоИзСтроки(ТекстСообщения);
		
	Исключение
		
		Ответ = СервисЛояльности.ЗафиксироватьОшибкуСервисаЛояльности(ОписаниеОшибки(), "РазблокироватьБонусыКлиента");
		
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

Функция СписатьБонусыКлиентаPOST(Запрос)
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	Если Не СервисЛояльности.ИспользоватьСервисЛояльности(Ответ) Тогда 
		Возврат Ответ;	
	КонецЕсли;
	
	Попытка
		
		ПараметрыМетода = СервисЛояльности.ПараметрыМетодаИзЗапроса(Запрос);
		КартаКлиента 	= СервисЛояльностиПереопределяемый.НайтиКартуКлиента(ПараметрыМетода);
		
		Если КартаКлиента <> Неопределено Тогда 
			Если ЗначениеЗаполнено(ПараметрыМетода.КоличествоБонусныхБаллов) Тогда
				СервисЛояльности.СписатьБонусы(КартаКлиента, ПараметрыМетода.КоличествоБонусныхБаллов);
				ТекстСообщения = НСтр("ru = 'Бонусы успешно списаны'");
			Иначе 
				ТекстСообщения = НСтр("ru = 'Количество баллов не указано'");
			КонецЕсли;
		Иначе 
			ТекстСообщения = НСтр("ru = 'Карта клиента не найдена'");
		КонецЕсли;
		
		Ответ.УстановитьТелоИзСтроки(ТекстСообщения);
		
	Исключение
		
		Ответ = СервисЛояльности.ЗафиксироватьОшибкуСервисаЛояльности(ОписаниеОшибки(), "СписатьБонусыКлиента");
		
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

Функция ВыдатьКартуКлиентуPOST(Запрос)
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	Если Не СервисЛояльности.ИспользоватьСервисЛояльности(Ответ) Тогда 
		Возврат Ответ;	
	КонецЕсли;
	
	Попытка
		
		ПараметрыМетода = СервисЛояльности.ПараметрыМетодаИзЗапроса(Запрос);
		КартаКлиента 	= СервисЛояльностиПереопределяемый.НайтиКартуКлиента(ПараметрыМетода);
		СтруктураОтвета = СервисЛояльности.ПолучистьСтруктуруОтвета("КартаКлиента");
		КартаСуществует = ЗначениеЗаполнено(КартаКлиента);
		
		Если Не КартаСуществует Тогда
			КартаКлиента  = СервисЛояльности.СоздатьКартуКлиента(ПараметрыМетода);
		КонецЕсли;
		
		СервисЛояльности.ЗаполнитьСтруктуруОтветаДаннымиКарты(КартаКлиента, СтруктураОтвета, КартаСуществует);
		
		//Возвращаем структуру ответа
		СтруктураОтветаJSON = Новый ЗаписьJSON;
		СтруктураОтветаJSON.УстановитьСтроку();
		ЗаписатьJSON(СтруктураОтветаJSON, СтруктураОтвета);
		
		Ответ.УстановитьТелоИзСтроки(СтруктураОтветаJSON.Закрыть());
		
	Исключение
		
		Ответ = СервисЛояльности.ЗафиксироватьОшибкуСервисаЛояльности(ОписаниеОшибки(), "ВыдатьКартуКлиенту");
		
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

Функция ИнфомацияОЗапретахПродажGET(Запрос)	
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	Если Не СервисЛояльности.ИспользоватьСервисЛояльности(Ответ) Тогда 
		Возврат Ответ;	
	КонецЕсли;
	
	ПараметрыМетода = СервисЛояльности.ПараметрыМетодаИзЗапроса(Запрос);
	
	Попытка
		
		СтруктураОтвета = СервисЛояльности.ДанныеОЗапретахПродаж(ПараметрыМетода);
		//Возвращаем структуру ответа
		СтруктураОтветаJSON = Новый ЗаписьJSON;
		СтруктураОтветаJSON.УстановитьСтроку();
		ЗаписатьJSON(СтруктураОтветаJSON, СтруктураОтвета);
		
		Ответ.УстановитьТелоИзСтроки(СтруктураОтветаJSON.Закрыть());	
		
	Исключение
		
		Описание = ОписаниеОшибки();
		ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации("СервисЛояльности.ИнформацияОЗапретахПродаж",,,,Описание);
		Ответ = Новый HTTPСервисОтвет(500, Описание);
		
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьДанныеПодарочногоСертификатаGET(Запрос)
	
	Попытка
		
		Ответ = Новый HTTPСервисОтвет(200);
		
		Если Не СервисЛояльности.ИспользоватьСервисЛояльности(Ответ) Тогда 
			Возврат Ответ;	
		КонецЕсли;
		
		ПараметрыМетода 	= СервисЛояльности.ПараметрыМетодаИзЗапроса(Запрос);
		СтруктураОтвета 	= СервисЛояльности.ПолучистьСтруктуруОтвета("ЗапросДанныхПодарочногоСертификата");
		ДанныеСертификата	= СервисЛояльностиПереопределяемый.НайтиПодарочныйСертификат(ПараметрыМетода);
		
		Если ДанныеСертификата.ПодарочныйСертификат <> Неопределено Тогда 
			СервисЛояльностиПереопределяемый.ПолучитьБалансПодарочногоСертификата(ДанныеСертификата, СтруктураОтвета);
			СервисЛояльности.ЗаблокироватьПодарочныйСертификат(ДанныеСертификата, ТекущаяДатаСеанса());
		Иначе 
			СтруктураОтвета.Error = Истина;
			СтруктураОтвета.ErrorMessage = НСтр("ru = 'Данные о сертификате с номером " + ПараметрыМетода.НомерСертификата + " не найдены'");
		КонецЕсли;
		
		//Возвращаем структуру ответа
		СтруктураОтветаJSON = Новый ЗаписьJSON;
		СтруктураОтветаJSON.УстановитьСтроку();
		ЗаписатьJSON(СтруктураОтветаJSON, СтруктураОтвета);
		
		Ответ.УстановитьТелоИзСтроки(СтруктураОтветаJSON.Закрыть());
		
	Исключение
		
		Ответ = СервисЛояльности.ЗафиксироватьОшибкуСервисаЛояльности(ОписаниеОшибки(), "ПолучитьДанныеПодарочногоСертификата");
		
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

Функция РазблокироватьПодарочныйСертификатPOST(Запрос)
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	Если Не СервисЛояльности.ИспользоватьСервисЛояльности(Ответ) Тогда 
		Возврат Ответ;	
	КонецЕсли;
	
	Попытка
		
		ПараметрыМетода   = СервисЛояльности.ПараметрыМетодаИзЗапроса(Запрос);
		ДанныеСертификата = СервисЛояльностиПереопределяемый.НайтиПодарочныйСертификат(ПараметрыМетода);
		
		Если ДанныеСертификата.ПодарочныйСертификат <> Неопределено Тогда
			СервисЛояльности.РазблокироватьПодарочныйСертификат(ДанныеСертификата);
			ТекстСообщения = НСтр("ru = 'Подарочный сертификат разблокирован'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Подарочный сертификат не найден'");
		КонецЕсли;
		
		Ответ.УстановитьТелоИзСтроки(ТекстСообщения);
		
	Исключение
		
		Ответ = СервисЛояльности.ЗафиксироватьОшибкуСервисаЛояльности(ОписаниеОшибки(), "РазблокироватьПодарочныйСертификат");
		
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

Функция СписатьПодарочныйСертификатPOST(Запрос)
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	Если Не СервисЛояльности.ИспользоватьСервисЛояльности(Ответ) Тогда 
		Возврат Ответ;	
	КонецЕсли;
	
	Попытка
		
		ПараметрыМетода   = СервисЛояльности.ПараметрыМетодаИзЗапроса(Запрос);
		ДанныеСертификата = СервисЛояльностиПереопределяемый.НайтиПодарочныйСертификат(ПараметрыМетода);	
		
		Если ДанныеСертификата.ПодарочныйСертификат <> Неопределено Тогда
			СервисЛояльности.СписатьБалансПодарочногоСертификата(ДанныеСертификата, ПараметрыМетода.СуммаСписания);
			ТекстСообщения = НСтр("ru = 'Подарочный сертификат успешно списан на указанную сумму'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Подарочный сертификат не найден'");
		КонецЕсли;
		Ответ.УстановитьТелоИзСтроки(ТекстСообщения);
	
	Исключение
		
		Ответ = СервисЛояльности.ЗафиксироватьОшибкуСервисаЛояльности(ОписаниеОшибки(), "СписатьПодарочныйСертификат");
		
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

Функция ИспользоватьАвтоматическиеСкидкиGET(Запрос)
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	Если Не СервисЛояльности.ИспользоватьСервисЛояльности(Ответ) Тогда 
		Возврат Ответ;	
	КонецЕсли;
	
	СтруктураОтвета = СервисЛояльности.ПолучистьСтруктуруОтвета("ЗапросИспользованияАвтоматическихСкидок");
	
	Попытка
		
		ИспользоватьАвтоматическиеСкидки = СервисЛояльностиПереопределяемый.ИспользоватьАвтоматическиеСкидки();
		СтруктураОтвета.UseAutomaticDiscounts = ИспользоватьАвтоматическиеСкидки; 
		
		//Возвращаем структуру ответа
		СтруктураОтветаJSON = Новый ЗаписьJSON;
		СтруктураОтветаJSON.УстановитьСтроку();
		ЗаписатьJSON(СтруктураОтветаJSON, СтруктураОтвета);
	
		Ответ.УстановитьТелоИзСтроки(СтруктураОтветаJSON.Закрыть());

	Исключение
		
		Ответ = СервисЛояльности.ЗафиксироватьОшибкуСервисаЛояльности(ОписаниеОшибки(), "ЗапросИспользованияАвтоматическихСкидок");
		
	КонецПопытки;
		
	Возврат Ответ;
	
КонецФункции

Функция РассчитатьАвтоматическиеСкидкиGET(Запрос)
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	Если Не СервисЛояльности.ИспользоватьСервисЛояльности(Ответ) Тогда 
		Возврат Ответ;	
	КонецЕсли;
	
	//ПараметрыМетода   	= СервисЛояльности.ПараметрыМетодаИзЗапроса(Запрос);
	ВходящиеДанные		= Запрос.ПолучитьТелоКакСтроку();
	ПараметрыРасчета 	= СервисЛояльностиПереопределяемый.ДесериализоватьПараметрыРасчета(ВходящиеДанные);
		
	Попытка
		
		Если ПараметрыРасчета.ЕстьОшибки Тогда 
			АвтоматическиеСкидки = СервисЛояльности.ПолучистьСтруктуруОтвета("");
			АвтоматическиеСкидки.Error = Истина;
			АвтоматическиеСкидки.ErrorMessage = ПараметрыРасчета.ОписаниеОшибки;
		Иначе 
			АвтоматическиеСкидки = СервисЛояльностиПереопределяемый.РассчитатьАвтоматическиеСкидки(ПараметрыРасчета);
		КонецЕсли;
		
		//Возвращаем структуру ответа
		СтруктураОтветаJSON = Новый ЗаписьJSON;
		СтруктураОтветаJSON.УстановитьСтроку();
		ЗаписатьJSON(СтруктураОтветаJSON, АвтоматическиеСкидки);
	
		Ответ.УстановитьТелоИзСтроки(СтруктураОтветаJSON.Закрыть());//ВходящиеДанные);//СтруктураОтветаJSON.Закрыть());

	Исключение
		
		Ответ = СервисЛояльности.ЗафиксироватьОшибкуСервисаЛояльности(ОписаниеОшибки(), "РассчитатьАвтоматическиеСкидки");
		
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти
