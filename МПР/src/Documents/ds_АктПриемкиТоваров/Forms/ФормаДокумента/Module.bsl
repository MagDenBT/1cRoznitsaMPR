
#Область ПрограммныйИнтерфейс

&НаКлиенте
Функция ОбработатьДанныеИзТСДКлиент(СтруктураПараметров, ДополнительныеПараметры) Экспорт
	
	СтруктураПараметров.Вставить("СворачиватьУпаковки", Истина);
	Результат = ПодключаемоеОборудованиеРТКлиент.ОбработатьДанныеПоНоменклатуреИзТСДКлиент(ЭтотОбъект, СтруктураПараметров);
	ПодключаемоеОборудованиеРТКлиент.СообщитьТекстПредупреждения(СтруктураПараметров);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	
	МассивКомандПО = Новый Массив;
	//МассивКомандПО.Добавить("ТоварыВыгрузитьДанныеВТСД");
	//МассивКомандПО.Добавить("ТоварыЗагрузитьДанныеИзТСД");
	ПодключаемоеОборудованиеРТ.НастроитьПодключаемоеОборудование(ЭтаФорма, МассивКомандПО);
	
	Для Каждого Стр Из Объект.Товары Цикл 
		РассчитатьОтклонениеНаСервере(Стр);
	КонецЦикла;	
	
	ЗаполнитьДеревоРасхожденийНаСервере(Ложь);
	
	Если РеквизитФормыВЗначение("Объект").ЭтоНовый() Тогда
		Объект.Дата = ТекущаяДатаСеанса(); 
		Объект.Ответственный = ПараметрыСеанса.ТекущийПользователь;	
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	
	УстановитьУсловноеОформление();
	
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	
	ИнтервалАвтосохраненияАктаПриемки = ПолучитьИнтервалАвтосохраненияАктаПриемки();
	ПодключитьОбработчикОжидания("АвтоЗапись", ?(ИнтервалАвтосохраненияАктаПриемки = 0, 300, ИнтервалАвтосохраненияАктаПриемки), Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ОтключитьОбработчикОжидания("АвтоЗапись");
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Не Объект.Завершен Тогда 
		ЗаполнитьОрдераНаСервере();
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Объект.Завершен И Не ds_ОбщегоНазначенияВызовСервера.РольДоступнаТекущемуПользователю("ПолныеПрава")  
		И (Объект.Расхождения.Итог("КоличествоПлан") <> Объект.Расхождения.Итог("КоличествоФакт") + Объект.Расхождения.Итог("КоличествоВозврат")
		+ Объект.Расхождения.Итог("КоличествоПеремещение")	+ Объект.Расхождения.Итог("КоличествоСписание") - Объект.Расхождения.Итог("КоличествоОприходование")
		Или Объект.Товары.Итог("КоличествоПлан") <> Объект.Товары.Итог("КоличествоФакт") И Не Объект.Расхождения.Количество()) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нельзя завершить Акт приемки, существуют необработанные расхождения!",,,, Отказ);
	КонецЕсли;
		
	Если Не Объект.Завершен Тогда 		
		ТекущийОбъект.Магазин = ТекущийОбъект.Склад.Магазин;

		Дерево = РеквизитФормыВЗначение("РасхожденияДерево");
		КонтрольРасхождений(Дерево.Строки, Отказ);
		
		Если Не Отказ Тогда 
			ТекущийОбъект.Расхождения.Очистить();
			ЗаполнитьРасхождения(Дерево.Строки, ТекущийОбъект.Расхождения);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Для Каждого Стр Из Объект.Товары Цикл 
		РассчитатьОтклонениеНаКлиенте(Стр);
	КонецЦикла;	
		
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ВводДоступен() Тогда
		ПодключаемоеОборудованиеРТКлиент.ВнешнееСобытиеОборудования(ЭтотОбъект, Источник, Событие, Данные);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ИнструкцияНажатие(Элемент)
	
	ЗапуститьПриложение("https://www.loom.com/share/fb984d01b6a9436fa7ad8ea2a2b88a12");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекСтрока = Элементы.Товары.ТекущиеДанные;
	ТекСтрока.КоличествоФакт = ТекСтрока.КоличествоФакт + ТекСтрока.Количество;
	РассчитатьОтклонениеНаКлиенте(ТекСтрока);
	
	ТекСтрока.Количество = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоФактПриИзменении(Элемент)
	
	ТекСтрока = Элементы.Товары.ТекущиеДанные;
	РассчитатьОтклонениеНаКлиенте(ТекСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура РасхожденияДеревоОтметкаПриИзменении(Элемент)
	
	ТекСтрока = Элементы.РасхожденияДерево.ТекущиеДанные;
	
	ПроставитьОтметкуПотомкам(ТекСтрока, ТекСтрока.Отметка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасхожденияДеревоКомментарийПриИзменении(Элемент)
	
	РасхожденияДеревоКомментарийПриИзмененииНаСервере();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РасхожденияДеревоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаДерева = Элемент.ТекущиеДанные;
	
	Если СтрокаДерева <> Неопределено Тогда 
		Если Поле.Имя = "РасхожденияДеревоНоменклатура" Тогда 
			ПоказатьЗначение(, СтрокаДерева.Номенклатура);
		ИначеЕсли Поле.Имя = "РасхожденияДеревоДокументОснование" И СтрокаДерева.КоличествоПлан > 0 Тогда 
			ПоказатьЗначение(, СтрокаДерева.ДокументОснование);
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура РасхожденияДеревоПередНачаломИзменения(Элемент, Отказ)
	
	ТекЭлемент = Элементы.РасхожденияДерево.ТекущийЭлемент.Имя;
	ТекСтрока = Элементы.РасхожденияДерево.ТекущиеДанные;
	
	Если ТекСтрока.ЭтоГруппа Тогда 
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	
	Если ТекЭлемент <> "РасхожденияДеревоОтметка"
		И ТекЭлемент <> "РасхожденияДеревоКомментарий" Тогда
		
		Если ТекЭлемент = "РасхожденияДеревоДокументОснование"
			Или ТекЭлемент = "РасхожденияДеревоЦена" Тогда 
			Если ТекСтрока.КоличествоПлан = 0 И ТекСтрока.Отклонение <> 0 Тогда  
				Отказ = Ложь;
			Иначе 
				Отказ = Истина;
			КонецЕсли;
		ИначеЕсли ТекЭлемент = "РасхожденияДеревоБрак" Тогда 
			Если ТекСтрока.КоличествоПлан < ТекСтрока.КоличествоФакт Тогда  
				Отказ = Истина;
			Иначе
				Отказ = Ложь;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура РасхожденияДеревоКоличествоФактПриИзменении(Элемент)
	
	ТекСтрока = Элементы.РасхожденияДерево.ТекущиеДанные;
	РассчитатьОтклонениеРасхожденияНаКлиенте(ТекСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура РасхожденияДеревоДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ВидыДокументов = Новый СписокЗначений;
	
	СписокДокументов = СписокДокументовОснования();
	
	Для Каждого Стр Из СписокДокументов Цикл 
		Если ТипЗнч(Стр) = Тип("ДокументСсылка.ПоступлениеТоваров") И ВидыДокументов.НайтиПоЗначению("ПоступлениеТоваров") = Неопределено Тогда 
			ВидыДокументов.Добавить("ПоступлениеТоваров", "Поступление товаров");
		ИначеЕсли ТипЗнч(Стр) = Тип("ДокументСсылка.ПеремещениеТоваров") И ВидыДокументов.НайтиПоЗначению("ПеремещениеТоваров") = Неопределено Тогда 
			ВидыДокументов.Добавить("ПеремещениеТоваров", "Перемещение товаров");
		КонецЕсли;
	КонецЦикла;	
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СписокДокументов", СписокДокументов);
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	
	Если ВидыДокументов.Количество() > 1 Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("РасхожденияДеревоДокументОснованиеНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВыборИзСписка(ОписаниеОповещения, ВидыДокументов);
	Иначе	
		РасхожденияДеревоДокументОснованиеНачалоВыбораЗавершение(ВидыДокументов[0], ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасхожденияДеревоДокументОснованиеНачалоВыбораЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ЗначениеОтбора = Новый Структура("Ссылка", ДополнительныеПараметры.СписокДокументов);
	П = Новый Структура;
	П.Вставить("Отбор", ЗначениеОтбора);
	П.Вставить("МножественныйВыбор", Ложь);
	П.Вставить("ЗакрыватьПриВыборе", Истина);
	
	ОткрытьФорму("Документ." + ВыбранноеЗначение.Значение + ".ФормаВыбора", П, ДополнительныеПараметры.Элемент);
	
КонецПроцедуры
&НаКлиенте
Процедура ДокументыОснованияПриИзменении(Элемент)
	
	ДокументыОснованияИзменены = ДокументыОснованияИзменены();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если ВыбранноеЗначение = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Для Каждого Стр Из ВыбранноеЗначение Цикл 
			ОбработкаВыбораДокументыОснованияПодборНаСервере(Стр);
		КонецЦикла;	
	Иначе	
		ОбработкаВыбораДокументыОснованияПодборНаСервере(ВыбранноеЗначение);
	КонецЕсли;	
	
	ДокументыОснованияИзменены = Истина;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)

	Если ДокументыОснованияИзменены Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеДокументыОснованияИзменены", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, "Документы основания изменены, перезаполнить товары?", РежимДиалогаВопрос.ОКОтмена,, КодВозвратаДиалога.ОК);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеДокументыПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Не ds_ОбщегоНазначенияВызовСервера.РольДоступнаТекущемуПользователю("ПолныеПрава");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ПодключаемоеОборудованиеРТКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("УчитыватьСерийныеНомераПриСвертке", Ложь);
	ПодключаемоеОборудованиеРТКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоНаименованию(Команда)
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Магазин",Объект.Магазин);
	РаботаСПравиламиИменованияКлиент.ПоискПоНаименованию(ЭтаФорма,ПараметрыПоиска);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормРТКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТовары(Команда)
	
	ЗаполнитьТоварыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКоличествоПоПоступлению(Команда)
	
	ЗаполнитьКоличествоПоПоступлениюНаСервере();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборДокументыОснования(Команда)
	
	ВидыДокументов = Новый СписокЗначений;
	ВидыДокументов.Добавить("ПоступлениеТоваров", "Поступление товаров");
	ВидыДокументов.Добавить("ПеремещениеТоваров", "Перемещение товаров");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодборДокументыОснованияЗавершение", ЭтотОбъект);
	ПоказатьВыборИзСписка(ОписаниеОповещения, ВидыДокументов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборДокументыОснованияЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	СписокДокументов = СписокНепринятыхДокументовОснований(ВыбранноеЗначение.Значение);
	
	ЗначениеОтбора = Новый Структура("Ссылка", СписокДокументов);
	П = Новый Структура;
	П.Вставить("Отбор", ЗначениеОтбора);
	П.Вставить("МножественныйВыбор", Истина);
	П.Вставить("ЗакрыватьПриВыборе", Ложь);
	
	ОткрытьФорму("Документ." + ВыбранноеЗначение.Значение + ".ФормаВыбора", П, Элементы.ДокументыОснования);
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗаполнитьДеревоРасхождений(Команда)
	
	СвернутьТоварыНаСервере();
	
	Для Каждого Стр Из Объект.Товары Цикл 
		РассчитатьОтклонениеНаКлиенте(Стр);
	КонецЦикла;	
	
	ЗаполнитьДеревоРасхожденийНаСервере(Истина);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
    СтрокиДерева = РасхожденияДерево.ПолучитьЭлементы();
	Для Каждого ТекСтрока Из СтрокиДерева Цикл
		ТекСтрока.Отметка = Истина;
		ПроставитьОтметкуПотомкам(ТекСтрока, ТекСтрока.Отметка);
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
    СтрокиДерева = РасхожденияДерево.ПолучитьЭлементы();
	Для Каждого ТекСтрока Из СтрокиДерева Цикл
		ТекСтрока.Отметка = Ложь;
		ПроставитьОтметкуПотомкам(ТекСтрока, ТекСтрока.Отметка);
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ОформитьВозвратыТоваровПоставщику(Команда)
	
	Если ЭтаФорма.Модифицированность Тогда
		Записать();
	КонецЕсли;	
	
	ОформитьВозвратыТоваровПоставщикуНаСервере();
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьОприходованиеТоваров(Команда)
		
	Если ЭтаФорма.Модифицированность Тогда
		Записать();
	КонецЕсли;	
			
	ОформитьОприходованиеТоваровНаСервере();
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПеремещениеТоваров(Команда)
	
	Если ЭтаФорма.Модифицированность Тогда
		Записать();
	КонецЕсли;	
		
	ОформитьПеремещениеТоваровНаСервере();
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьСписаниеТоваров(Команда)
	
	Если ЭтаФорма.Модифицированность Тогда
		Записать();
	КонецЕсли;	
		
	ОформитьСписаниеТоваровНаСервере();
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура СкорректироватьПоступление(Команда)
	
	Если ЭтаФорма.Модифицированность Тогда
		Записать();
	КонецЕсли;	
		
	СкорректироватьПоступлениеНаСервере();
	Записать();
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ДанныеПоискаПоШтрихкодуСервер(Штрихкод)
	
	Возврат ПодключаемоеОборудованиеРТ.ДанныеПоискаПоШтрихкоду(Штрихкод, ЭтотОбъект);
	
КонецФункции

&НаКлиенте
Функция ПолученШтрихкодИзСШК(Штрихкод) Экспорт
	
	СтруктураРезультат = ДанныеПоискаПоШтрихкодуСервер(Штрихкод);
	Возврат ПодключаемоеОборудованиеРТКлиент.ПолученШтрихкодИзСШК(ЭтотОбъект, СтруктураРезультат);
	
КонецФункции

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(Штрихкод) Тогда
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(Штрихкод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента) Экспорт
	
	ОткрытаБлокирующаяФорма = Ложь;
	
	ПодключаемоеОборудованиеРТКлиент.ОбработатьДанныеПоКоду(ЭтотОбъект, СтруктураПараметровКлиента, ОткрытаБлокирующаяФорма);
	
	Если НЕ ОткрытаБлокирующаяФорма Тогда
		ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента)
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТКлиент.ЗавершитьОбработкуДанныхПоКодуКлиент(ЭтотОбъект, СтруктураПараметровКлиента);
	
	Если СтруктураПараметровКлиента.Свойство("АктивизироватьСтроку") Тогда 
		Элементы.Товары.ТекущаяСтрока = ИдентификаторСтроки;
		Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыКоличество;
		Элементы.Товары.ИзменитьСтроку();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОбработатьДанныеПоКоду(СтруктураРезультат, ДополнительныеПараметры) Экспорт
	
	ПродолжитьОбработатьДанныеПоКодуКлиент(СтруктураРезультат);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьОбработатьДанныеПоКодуКлиент(СтруктураРезультат) Экспорт
	
	ИдентификаторСтроки = Неопределено;
	СтрокаРезультата = СтруктураРезультат.ЗначенияПоиска[0];
	
	Если СтрокаРезультата.Свойство("Карта") Тогда
		
		ПодключаемоеОборудованиеРТКлиент.ВставитьПредупреждениеОНевозможностиОбработкиКарт(СтруктураРезультат, СтрокаРезультата);
		
	ИначеЕсли СтрокаРезультата.Свойство("СерийныйНомер") Тогда
		
		ИдентификаторСтроки = ПодключаемоеОборудованиеРТКлиент.ДобавитьНайденныеСерийныеНомера(ЭтотОбъект, СтрокаРезультата);
		
	Иначе // Номенклатура.
		
		//{ds-28.04.2021
		СтрокаРезультата.Вставить("ТипДанныхПО", СтруктураРезультат.ТипДанныхПО);
		//}		
		ИдентификаторСтроки = ДобавитьНайденныеПозицииТоваровСервер(СтрокаРезультата);
		
	КонецЕсли;

	Если СтрокаРезультата.Свойство("ТекстПредупреждения") Тогда
		СтруктураРезультат.Вставить("ТекстПредупреждения", СтрокаРезультата.ТекстПредупреждения);
	КонецЕсли;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		СтруктураРезультат.Вставить("АктивизироватьСтроку", ИдентификаторСтроки);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ДобавитьНайденныеПозицииТоваровСервер(СтруктураПараметров, ДополнительныеПараметры = Неопределено)
	
	Если Не ДополнительныеПараметры = Неопределено Тогда
		СтруктураПараметров = ДополнительныеПараметры;
		ИдентификаторСтроки = СтруктураПараметров;
	Иначе
		ИдентификаторСтроки = Неопределено;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("УчетУпаковок", Ложь);
	
	ДобавленаСтрока = Ложь;
	ТекущаяСтрока = ПодключаемоеОборудованиеРТ.ИнициализацияСтрокиТоваров(ЭтотОбъект, СтруктураПараметров, ДобавленаСтрока);
	
	//{ds-28.04.2021
	Если Не (СтруктураПараметров.Свойство("ТипДанныхПО") И СтруктураПараметров.ТипДанныхПО = "Штрихкод") Тогда
		ТекущаяСтрока.КоличествоФакт = ТекущаяСтрока.КоличествоФакт + ТекущаяСтрока.Количество;
		ТекущаяСтрока.Количество = 0;
		РассчитатьОтклонениеНаСервере(ТекущаяСтрока);
	КонецЕсли;
	//}	
	
	СтруктураДействий = Новый Структура;
	//Если ДобавленаСтрока Тогда
	//	СтруктураДействий.Вставить("ОбнулитьЦену");
	//КонецЕсли;
	//СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	//СтруктураДействий.Вставить("ПересчитатьСумму");
	
	//СтруктураДействий.Вставить("ПроверитьСерийныеНомераПоВладельцу",
	//	ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПроверкиСерийныхНомеровПоВладельцу(ТекущаяСтрока, Объект.СерийныеНомера));
		
	//ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТ.ЗавершениеОбработкиСтрокиТоваров(ЭтотОбъект, ТекущаяСтрока, СтруктураДействий);
	
	Если Не ДополнительныеПараметры = Неопределено Тогда
		СтруктураПараметров = ИдентификаторСтроки;
		Возврат СтруктураПараметров;
	Иначе
		Возврат ИдентификаторСтроки;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ДобавитьНайденныеПозицииТоваров(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ДобавитьНайденныеПозицииТоваровСервер(СтруктураПараметров, ДополнительныеПараметры);
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ЭтаФорма.УсловноеОформление.Элементы.Очистить();
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Товары");
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Отклонение");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбора.ПравоеЗначение = 0;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.ЛососьСветлый);	
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Товары");
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Отклонение");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ЭлементОтбора.ПравоеЗначение = 0;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.БледноЗеленый);	
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьТоварыНаСервере()

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Упаковка КАК Упаковка,
	|	Товары.КоличествоФакт КАК КоличествоФакт
	|ПОМЕСТИТЬ ТоварыФакт
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыОснование.Номенклатура КАК Номенклатура,
	|	ТоварыОснование.Упаковка КАК Упаковка,
	|	СУММА(ТоварыОснование.КоличествоПлан) КАК КоличествоПлан
	|ПОМЕСТИТЬ ТоварыПлан
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПоступлениеТоваровТовары.Номенклатура КАК Номенклатура,
	|		ПоступлениеТоваровТовары.Упаковка КАК Упаковка,
	|		СУММА(ПоступлениеТоваровТовары.КоличествоУпаковок) КАК КоличествоПлан
	|	ИЗ
	|		Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
	|	ГДЕ
	|		ПоступлениеТоваровТовары.Ссылка В(&ДокументыОснования)
	|		И НЕ ПоступлениеТоваровТовары.Ссылка.ЕстьРасхождения
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПоступлениеТоваровТовары.Номенклатура,
	|		ПоступлениеТоваровТовары.Упаковка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПеремещениеТоваровТовары.Номенклатура,
	|		ПеремещениеТоваровТовары.Упаковка,
	|		СУММА(ПеремещениеТоваровТовары.КоличествоУпаковок)
	|	ИЗ
	|		Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	|	ГДЕ
	|		ПеремещениеТоваровТовары.Ссылка В(&ДокументыОснования)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПеремещениеТоваровТовары.Номенклатура,
	|		ПеремещениеТоваровТовары.Упаковка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПоступлениеТоваровТоварыПоДаннымПоставщика.Номенклатура,
	|		ПоступлениеТоваровТоварыПоДаннымПоставщика.Упаковка,
	|		СУММА(ПоступлениеТоваровТоварыПоДаннымПоставщика.КоличествоУпаковок)
	|	ИЗ
	|		Документ.ПоступлениеТоваров.ТоварыПоДаннымПоставщика КАК ПоступлениеТоваровТоварыПоДаннымПоставщика
	|	ГДЕ
	|		ПоступлениеТоваровТоварыПоДаннымПоставщика.Ссылка В(&ДокументыОснования)
	|		И ПоступлениеТоваровТоварыПоДаннымПоставщика.Ссылка.ЕстьРасхождения
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПоступлениеТоваровТоварыПоДаннымПоставщика.Номенклатура,
	|		ПоступлениеТоваровТоварыПоДаннымПоставщика.Упаковка) КАК ТоварыОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыОснование.Номенклатура,
	|	ТоварыОснование.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыИтог.Номенклатура КАК Номенклатура,
	|	ТоварыИтог.Упаковка КАК Упаковка,
	|	СУММА(ТоварыИтог.КоличествоФакт) КАК КоличествоФакт,
	|	СУММА(ТоварыИтог.КоличествоПлан) КАК КоличествоПлан
	|ПОМЕСТИТЬ ТоварыИтог
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыФакт.Номенклатура КАК Номенклатура,
	|		ТоварыФакт.Упаковка КАК Упаковка,
	|		СУММА(ТоварыФакт.КоличествоФакт) КАК КоличествоФакт,
	|		0 КАК КоличествоПлан
	|	ИЗ
	|		ТоварыФакт КАК ТоварыФакт
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТоварыФакт.Номенклатура,
	|		ТоварыФакт.Упаковка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыПлан.Номенклатура,
	|		ТоварыПлан.Упаковка,
	|		0,
	|		ТоварыПлан.КоличествоПлан
	|	ИЗ
	|		ТоварыПлан КАК ТоварыПлан) КАК ТоварыИтог
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыИтог.Номенклатура,
	|	ТоварыИтог.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыИтог.Номенклатура КАК Номенклатура,
	|	ТоварыИтог.Упаковка КАК Упаковка,
	|	ТоварыИтог.КоличествоФакт КАК КоличествоФакт,
	|	ТоварыИтог.КоличествоПлан КАК КоличествоПлан,
	|	спрНоменклатура.Код КАК Код,
	|	МАКСИМУМ(Штрихкоды.Штрихкод) КАК Штрихкод,
	|	ТоварыИтог.КоличествоФакт - ТоварыИтог.КоличествоПлан КАК Отклонение
	|ИЗ
	|	ТоварыИтог КАК ТоварыИтог
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК спрНоменклатура
	|		ПО ТоварыИтог.Номенклатура = спрНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ПО ТоварыИтог.Номенклатура = Штрихкоды.Владелец
	|			И ТоварыИтог.Упаковка = Штрихкоды.Упаковка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыИтог.Номенклатура,
	|	ТоварыИтог.Упаковка,
	|	ТоварыИтог.КоличествоФакт,
	|	ТоварыИтог.КоличествоПлан,
	|	спрНоменклатура.Код,
	|	ТоварыИтог.КоличествоФакт - ТоварыИтог.КоличествоПлан";
	Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("ДокументыОснования", Объект.ДокументыОснования.Выгрузить().ВыгрузитьКолонку("ДокументОснование"));
	
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Сортировать("Код");
	
	Объект.Товары.Очистить();
	
	Для Каждого Стр Из Результат Цикл ЗаполнитьЗначенияСвойств(Объект.Товары.Добавить(), Стр) КонецЦикла;	
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКоличествоПоПоступлениюНаСервере()

	Для Каждого Стр Из Объект.Товары Цикл 
		Стр.КоличествоФакт = Стр.КоличествоПлан;
		РассчитатьОтклонениеНаСервере(Стр);
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьОтклонениеРасхожденияНаКлиенте(ТекСтрока)
	
	ТекСтрока.Отклонение = ТекСтрока.КоличествоФакт + ТекСтрока.КоличествоВозврат + ТекСтрока.КоличествоСписание
		+ ТекСтрока.КоличествоПеремещение + ТекСтрока.КоличествоКорректировка - ТекСтрока.КоличествоПлан - ТекСтрока.КоличествоОприходование;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РассчитатьОтклонениеРасхожденияНаСервере(ТекСтрока)
	
	ТекСтрока.Отклонение = ТекСтрока.КоличествоФакт + ТекСтрока.КоличествоВозврат + ТекСтрока.КоличествоСписание
		+ ТекСтрока.КоличествоПеремещение + ТекСтрока.КоличествоКорректировка - ТекСтрока.КоличествоПлан - ТекСтрока.КоличествоОприходование;
	
КонецПроцедуры	

&НаКлиенте
Процедура РассчитатьОтклонениеНаКлиенте(ТекСтрока)
	
	ТекСтрока.Отклонение = ТекСтрока.КоличествоФакт - ТекСтрока.КоличествоПлан;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РассчитатьОтклонениеНаСервере(ТекСтрока)
	
	ТекСтрока.Отклонение = ТекСтрока.КоличествоФакт - ТекСтрока.КоличествоПлан;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьОтметкуПотомкам(СтрокаДерева, Отметка)
	
    СтрокаДерева.Отметка = Отметка;
    СтрокиДерева = СтрокаДерева.ПолучитьЭлементы();
    Для Каждого ТекСтрока Из СтрокиДерева Цикл
        Если ТекСтрока.Отметка <> Отметка Тогда
            ПроставитьОтметкуПотомкам(ТекСтрока, Отметка);
        КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СписокНепринятыхДокументовОснований(ВидДокумента)

	Запрос = Новый Запрос;
	Если ВидДокумента = "ПоступлениеТоваров" Тогда 
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ПоступлениеТоваров.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ds_АктПриемкиТоваров.ДокументыОснования КАК ds_АктПриемкиТоваровДокументыОснования
		|		ПО ПоступлениеТоваров.Ссылка = ds_АктПриемкиТоваровДокументыОснования.ДокументОснование
		|ГДЕ
		|	ПоступлениеТоваров.Проведен
		|	И ds_АктПриемкиТоваровДокументыОснования.Ссылка ЕСТЬ NULL
		|	И ПоступлениеТоваров.Склад = &Склад";
	ИначеЕсли ВидДокумента = "ПеремещениеТоваров" Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ПеремещениеТоваров.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ds_АктПриемкиТоваров.ДокументыОснования КАК ds_АктПриемкиТоваровДокументыОснования
		|		ПО ПеремещениеТоваров.Ссылка = ds_АктПриемкиТоваровДокументыОснования.ДокументОснование
		|ГДЕ
		|	ПеремещениеТоваров.Проведен
		|	И ds_АктПриемкиТоваровДокументыОснования.Ссылка ЕСТЬ NULL
		|	И ПеремещениеТоваров.СкладПолучатель = &Склад";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	СписокДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат СписокДокументов;
	
КонецФункции

&НаСервере
Функция СписокДокументовОснования()
	
	Возврат Объект.ДокументыОснования.Выгрузить().ВыгрузитьКолонку("ДокументОснование");
	
КонецФункции

&НаСервере 
Процедура ОбработкаВыбораДокументыОснованияПодборНаСервере(ДокументОснование)
	
	Если Не Объект.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование", ДокументОснование)).Количество() Тогда 
		НовСтр = Объект.ДокументыОснования.Добавить();
		Новстр.ДокументОснование = ДокументОснование;
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура СвернутьТоварыНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЗ.Номенклатура,
	|	ТЗ.Характеристика,
	|	ТЗ.Упаковка,
	|	ТЗ.КоличествоПлан,
	|	ТЗ.КоличествоФакт,
	|	ТЗ.Штрихкод,
	|	ТЗ.НомерСтроки
	|ПОМЕСТИТЬ ТЗ
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗ.Номенклатура,
	|	ТЗ.Характеристика,
	|	ТЗ.Упаковка,
	|	МАКСИМУМ(ТЗ.КоличествоПлан) КАК КоличествоПлан,
	|	СУММА(ТЗ.КоличествоФакт) КАК КоличествоФакт,
	|	МАКСИМУМ(ТЗ.Штрихкод) КАК Штрихкод,
	|	МИНИМУМ(ТЗ.НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	ТЗ КАК ТЗ
	|СГРУППИРОВАТЬ ПО
	|	ТЗ.Номенклатура,
	|	ТЗ.Упаковка,
	|	ТЗ.Характеристика";
	Запрос.УстановитьПараметр("ТЗ", Объект.Товары.Выгрузить());
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	ТЗ.Сортировать("НомерСтроки");
	
	Объект.Товары.Загрузить(ТЗ);	

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоРасхожденийНаСервере(Перезаполнить)

	Запрос = Новый Запрос;
	Если Перезаполнить Тогда 
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Упаковка КАК Упаковка,
		|	Товары.КоличествоФакт КАК КоличествоФакт
		|ПОМЕСТИТЬ РасхожденияТовары
		|ИЗ
		|	&Товары КАК Товары
		|ГДЕ
		|	Товары.КоличествоПлан <> Товары.КоличествоФакт
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Расхождения.ДокументОснование КАК ДокументОснование,
		|	Расхождения.Номенклатура КАК Номенклатура,
		|	Расхождения.Комментарий КАК Комментарий,
		|	Расхождения.Брак КАК Брак
		|ПОМЕСТИТЬ Расхождения
		|ИЗ
		|	&Расхождения КАК Расхождения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВозвратТоваровПоставщикуТовары.Ссылка.ДокументОснование КАК ДокументОснование,
		|	ВозвратТоваровПоставщикуТовары.Номенклатура КАК Номенклатура,
		|	ВозвратТоваровПоставщикуТовары.Упаковка КАК Упаковка,
		|	СУММА(ВозвратТоваровПоставщикуТовары.КоличествоУпаковок) КАК Количество
		|ПОМЕСТИТЬ ВозвратТоваровПоставщику
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
		|ГДЕ
		|	ВозвратТоваровПоставщикуТовары.Ссылка.ДокументОснование В(&ДокументыОснования)
		|	И НЕ ВозвратТоваровПоставщикуТовары.Ссылка.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	ВозвратТоваровПоставщикуТовары.Номенклатура,
		|	ВозвратТоваровПоставщикуТовары.Упаковка,
		|	ВозвратТоваровПоставщикуТовары.Ссылка,
		|	ВозвратТоваровПоставщикуТовары.Ссылка.ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОприходованиеТоваровТовары.Ссылка.ds_ДокументПоступления КАК ДокументОснование,
		|	ОприходованиеТоваровТовары.Номенклатура КАК Номенклатура,
		|	ОприходованиеТоваровТовары.Упаковка КАК Упаковка,
		|	СУММА(ОприходованиеТоваровТовары.КоличествоУпаковок) КАК Количество,
		|	МАКСИМУМ(ОприходованиеТоваровТовары.Цена) КАК Цена
		|ПОМЕСТИТЬ ОприходованиеТоваров
		|ИЗ
		|	Документ.ОприходованиеТоваров.Товары КАК ОприходованиеТоваровТовары
		|ГДЕ
		|	ОприходованиеТоваровТовары.Ссылка.ds_ДокументПоступления В(&ДокументыОснования)
		|	И НЕ ОприходованиеТоваровТовары.Ссылка.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	ОприходованиеТоваровТовары.Номенклатура,
		|	ОприходованиеТоваровТовары.Упаковка,
		|	ОприходованиеТоваровТовары.Ссылка,
		|	ОприходованиеТоваровТовары.Ссылка.ds_ДокументПоступления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписаниеТоваровТовары.Ссылка.ds_ДокументПоступления КАК ДокументОснование,
		|	СписаниеТоваровТовары.Номенклатура КАК Номенклатура,
		|	СписаниеТоваровТовары.Упаковка КАК Упаковка,
		|	СУММА(СписаниеТоваровТовары.КоличествоУпаковок) КАК Количество
		|ПОМЕСТИТЬ СписаниеТоваров
		|ИЗ
		|	Документ.СписаниеТоваров.Товары КАК СписаниеТоваровТовары
		|ГДЕ
		|	СписаниеТоваровТовары.Ссылка.ds_ДокументПоступления В(&ДокументыОснования)
		|	И НЕ СписаниеТоваровТовары.Ссылка.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	СписаниеТоваровТовары.Номенклатура,
		|	СписаниеТоваровТовары.Упаковка,
		|	СписаниеТоваровТовары.Ссылка,
		|	СписаниеТоваровТовары.Ссылка.ds_ДокументПоступления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОрдерНаПеремещениеТоваровТовары.Ссылка.ДокументОснование КАК ДокументОснование,
		|	ОрдерНаПеремещениеТоваровТовары.Номенклатура КАК Номенклатура,
		|	ОрдерНаПеремещениеТоваровТовары.Упаковка КАК Упаковка,
		|	СУММА(ОрдерНаПеремещениеТоваровТовары.КоличествоУпаковок) КАК Количество
		|ПОМЕСТИТЬ ОрдерНаПеремещениеТоваров
		|ИЗ
		|	Документ.ОрдерНаПеремещениеТоваров.Товары КАК ОрдерНаПеремещениеТоваровТовары
		|ГДЕ
		|	ОрдерНаПеремещениеТоваровТовары.Ссылка.ДокументОснование В(&ДокументыОснования)
		|	И НЕ ОрдерНаПеремещениеТоваровТовары.Ссылка.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	ОрдерНаПеремещениеТоваровТовары.Номенклатура,
		|	ОрдерНаПеремещениеТоваровТовары.Упаковка,
		|	ОрдерНаПеремещениеТоваровТовары.Ссылка,
		|	ОрдерНаПеремещениеТоваровТовары.Ссылка.ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоступлениеТоваровТоварыПоДаннымПоставщика.Ссылка КАК ДокументОснование,
		|	ПоступлениеТоваровТоварыПоДаннымПоставщика.Номенклатура КАК Номенклатура,
		|	ПоступлениеТоваровТоварыПоДаннымПоставщика.Упаковка КАК Упаковка,
		|	СУММА(ПоступлениеТоваровТоварыПоДаннымПоставщика.КоличествоУпаковок - ЕСТЬNULL(ПоступлениеТоваровТовары.КоличествоУпаковок, 0)) КАК Количество
		|ПОМЕСТИТЬ КорректировкаПоступления
		|ИЗ
		|	Документ.ПоступлениеТоваров.ТоварыПоДаннымПоставщика КАК ПоступлениеТоваровТоварыПоДаннымПоставщика
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
		|		ПО ПоступлениеТоваровТоварыПоДаннымПоставщика.Ссылка = ПоступлениеТоваровТовары.Ссылка
		|			И ПоступлениеТоваровТоварыПоДаннымПоставщика.Номенклатура = ПоступлениеТоваровТовары.Номенклатура
		|			И ПоступлениеТоваровТоварыПоДаннымПоставщика.Упаковка = ПоступлениеТоваровТовары.Упаковка
		|ГДЕ
		|	ПоступлениеТоваровТоварыПоДаннымПоставщика.Ссылка В(&ДокументыОснования)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоступлениеТоваровТоварыПоДаннымПоставщика.Ссылка,
		|	ПоступлениеТоваровТоварыПоДаннымПоставщика.Номенклатура,
		|	ПоступлениеТоваровТоварыПоДаннымПоставщика.Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоступлениеТоваровТовары.Ссылка КАК ДокументОснование,
		|	ПоступлениеТоваровТовары.Номенклатура КАК Номенклатура,
		|	ПоступлениеТоваровТовары.Упаковка КАК Упаковка,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ПоступлениеТоваровТовары.КоличествоУпаковок > 0
		|				ТОГДА (ПоступлениеТоваровТовары.Сумма + ВЫБОР
		|						КОГДА ПоступлениеТоваровТовары.Ссылка.ЦенаВключаетНДС
		|							ТОГДА 0
		|						ИНАЧЕ ПоступлениеТоваровТовары.СуммаНДС
		|					КОНЕЦ) / ПоступлениеТоваровТовары.КоличествоУпаковок
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Цена,
		|	СУММА(ПоступлениеТоваровТовары.КоличествоУпаковок) КАК КоличествоПлан
		|ПОМЕСТИТЬ Поступления
		|ИЗ
		|	Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
		|ГДЕ
		|	ПоступлениеТоваровТовары.Ссылка В(&ДокументыОснования)
		|	И НЕ ПоступлениеТоваровТовары.Ссылка.ЕстьРасхождения
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоступлениеТоваровТовары.Номенклатура,
		|	ПоступлениеТоваровТовары.Упаковка,
		|	ПоступлениеТоваровТовары.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПеремещениеТоваровТовары.Ссылка,
		|	ПеремещениеТоваровТовары.Номенклатура,
		|	ПеремещениеТоваровТовары.Упаковка,
		|	МАКСИМУМ(ПеремещениеТоваровТовары.Цена),
		|	СУММА(ПеремещениеТоваровТовары.КоличествоУпаковок)
		|ИЗ
		|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		|ГДЕ
		|	ПеремещениеТоваровТовары.Ссылка В(&ДокументыОснования)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПеремещениеТоваровТовары.Номенклатура,
		|	ПеремещениеТоваровТовары.Упаковка,
		|	ПеремещениеТоваровТовары.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПоступлениеТоваровТоварыПоДаннымПоставщика.Ссылка,
		|	ПоступлениеТоваровТоварыПоДаннымПоставщика.Номенклатура,
		|	ПоступлениеТоваровТоварыПоДаннымПоставщика.Упаковка,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ПоступлениеТоваровТоварыПоДаннымПоставщика.КоличествоУпаковок > 0
		|				ТОГДА (ПоступлениеТоваровТоварыПоДаннымПоставщика.Сумма + ВЫБОР
		|						КОГДА ПоступлениеТоваровТоварыПоДаннымПоставщика.Ссылка.ЦенаВключаетНДС
		|							ТОГДА 0
		|						ИНАЧЕ ПоступлениеТоваровТоварыПоДаннымПоставщика.СуммаНДС
		|					КОНЕЦ) / ПоступлениеТоваровТоварыПоДаннымПоставщика.КоличествоУпаковок
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	СУММА(ПоступлениеТоваровТоварыПоДаннымПоставщика.КоличествоУпаковок)
		|ИЗ
		|	Документ.ПоступлениеТоваров.ТоварыПоДаннымПоставщика КАК ПоступлениеТоваровТоварыПоДаннымПоставщика
		|ГДЕ
		|	ПоступлениеТоваровТоварыПоДаннымПоставщика.Ссылка В(&ДокументыОснования)
		|	И ПоступлениеТоваровТоварыПоДаннымПоставщика.Ссылка.ЕстьРасхождения
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоступлениеТоваровТоварыПоДаннымПоставщика.Номенклатура,
		|	ПоступлениеТоваровТоварыПоДаннымПоставщика.Упаковка,
		|	ПоступлениеТоваровТоварыПоДаннымПоставщика.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасхожденияТовары.Номенклатура КАК Номенклатура,
		|	РасхожденияТовары.Упаковка КАК Упаковка,
		|	РасхожденияТовары.КоличествоФакт КАК КоличествоФакт,
		|	ЕСТЬNULL(ПоступлениеТоваров.Ссылка, ЕСТЬNULL(ПеремещениеТоваров.Ссылка, ОприходованиеТоваровНетВПоступлении.ДокументОснование)) КАК ДокументОснование,
		|	ЕСТЬNULL(Поступления.КоличествоПлан, 0) КАК КоличествоПлан,
		|	ВозвратТоваровПоставщику.Количество КАК КоличествоВозврат,
		|	ЕСТЬNULL(ОприходованиеТоваров.Количество, ОприходованиеТоваровНетВПоступлении.Количество) КАК КоличествоОприходование,
		|	СписаниеТоваров.Количество КАК КоличествоСписание,
		|	ОрдерНаПеремещениеТоваров.Количество КАК КоличествоПеремещение,
		|	ЕСТЬNULL(Поступления.Цена, ОприходованиеТоваровНетВПоступлении.Цена) КАК Цена,
		|	ЕСТЬNULL(Расхождения.Комментарий, """") КАК Комментарий,
		|	ЕСТЬNULL(Расхождения.Брак, ЛОЖЬ) КАК Брак,
		|	КорректировкаПоступления.Количество КАК КоличествоКорректировка
		|ИЗ
		|	РасхожденияТовары КАК РасхожденияТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Поступления КАК Поступления
		|		ПО РасхожденияТовары.Номенклатура = Поступления.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
		|		ПО (Поступления.ДокументОснование = ПоступлениеТоваров.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
		|		ПО (Поступления.ДокументОснование = ПеремещениеТоваров.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
		|		ПО РасхожденияТовары.Номенклатура = ВозвратТоваровПоставщику.Номенклатура
		|			И (Поступления.ДокументОснование = ВозвратТоваровПоставщику.ДокументОснование)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОприходованиеТоваров КАК ОприходованиеТоваров
		|		ПО РасхожденияТовары.Номенклатура = ОприходованиеТоваров.Номенклатура
		|			И (Поступления.ДокументОснование = ОприходованиеТоваров.ДокументОснование)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОприходованиеТоваров КАК ОприходованиеТоваровНетВПоступлении
		|		ПО РасхожденияТовары.Номенклатура = ОприходованиеТоваровНетВПоступлении.Номенклатура
		|			И (Поступления.ДокументОснование = ОприходованиеТоваровНетВПоступлении.ДокументОснование)
		|		ЛЕВОЕ СОЕДИНЕНИЕ СписаниеТоваров КАК СписаниеТоваров
		|		ПО РасхожденияТовары.Номенклатура = СписаниеТоваров.Номенклатура
		|			И (Поступления.ДокументОснование = СписаниеТоваров.ДокументОснование)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОрдерНаПеремещениеТоваров КАК ОрдерНаПеремещениеТоваров
		|		ПО РасхожденияТовары.Номенклатура = ОрдерНаПеремещениеТоваров.Номенклатура
		|			И (Поступления.ДокументОснование = ОрдерНаПеремещениеТоваров.ДокументОснование)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Расхождения КАК Расхождения
		|		ПО РасхожденияТовары.Номенклатура = Расхождения.Номенклатура
		|			И (Поступления.ДокументОснование = Расхождения.ДокументОснование)
		|		ЛЕВОЕ СОЕДИНЕНИЕ КорректировкаПоступления КАК КорректировкаПоступления
		|		ПО (Поступления.ДокументОснование = КорректировкаПоступления.ДокументОснование)
		|			И РасхожденияТовары.Номенклатура = КорректировкаПоступления.Номенклатура
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура
		|ИТОГИ
		|	МАКСИМУМ(КоличествоФакт),
		|	СУММА(КоличествоПлан),
		|	СУММА(КоличествоВозврат),
		|	СУММА(КоличествоОприходование),
		|	СУММА(КоличествоСписание),
		|	СУММА(КоличествоПеремещение),
		|	МАКСИМУМ(Цена)
		|ПО
		|	Номенклатура";
		Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить());
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Расхождения.ДокументОснование КАК ДокументОснование,
		|	Расхождения.Номенклатура КАК Номенклатура,
		|	Расхождения.Упаковка КАК Упаковка,
		|	Расхождения.КоличествоПлан КАК КоличествоПлан,
		|	Расхождения.КоличествоФакт КАК КоличествоФакт,
		|	Расхождения.Цена КАК Цена,
		|	Расхождения.Комментарий КАК Комментарий,
		|	Расхождения.Брак КАК Брак
		|ПОМЕСТИТЬ Расхождения
		|ИЗ
		|	&Расхождения КАК Расхождения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВозвратТоваровПоставщикуТовары.Ссылка.ДокументОснование КАК ДокументОснование,
		|	ВозвратТоваровПоставщикуТовары.Номенклатура КАК Номенклатура,
		|	ВозвратТоваровПоставщикуТовары.Упаковка КАК Упаковка,
		|	СУММА(ВозвратТоваровПоставщикуТовары.КоличествоУпаковок) КАК Количество
		|ПОМЕСТИТЬ ВозвратТоваровПоставщику
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
		|ГДЕ
		|	ВозвратТоваровПоставщикуТовары.Ссылка.ДокументОснование В(&ДокументыОснования)
		|	И НЕ ВозвратТоваровПоставщикуТовары.Ссылка.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	ВозвратТоваровПоставщикуТовары.Номенклатура,
		|	ВозвратТоваровПоставщикуТовары.Упаковка,
		|	ВозвратТоваровПоставщикуТовары.Ссылка,
		|	ВозвратТоваровПоставщикуТовары.Ссылка.ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОприходованиеТоваровТовары.Ссылка.ds_ДокументПоступления КАК ДокументОснование,
		|	ОприходованиеТоваровТовары.Номенклатура КАК Номенклатура,
		|	ОприходованиеТоваровТовары.Упаковка КАК Упаковка,
		|	СУММА(ОприходованиеТоваровТовары.КоличествоУпаковок) КАК Количество
		|ПОМЕСТИТЬ ОприходованиеТоваров
		|ИЗ
		|	Документ.ОприходованиеТоваров.Товары КАК ОприходованиеТоваровТовары
		|ГДЕ
		|	ОприходованиеТоваровТовары.Ссылка.ds_ДокументПоступления В(&ДокументыОснования)
		|	И НЕ ОприходованиеТоваровТовары.Ссылка.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	ОприходованиеТоваровТовары.Номенклатура,
		|	ОприходованиеТоваровТовары.Упаковка,
		|	ОприходованиеТоваровТовары.Ссылка,
		|	ОприходованиеТоваровТовары.Ссылка.ds_ДокументПоступления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписаниеТоваровТовары.Ссылка.ds_ДокументПоступления КАК ДокументОснование,
		|	СписаниеТоваровТовары.Номенклатура КАК Номенклатура,
		|	СписаниеТоваровТовары.Упаковка КАК Упаковка,
		|	СУММА(СписаниеТоваровТовары.КоличествоУпаковок) КАК Количество
		|ПОМЕСТИТЬ СписаниеТоваров
		|ИЗ
		|	Документ.СписаниеТоваров.Товары КАК СписаниеТоваровТовары
		|ГДЕ
		|	СписаниеТоваровТовары.Ссылка.ds_ДокументПоступления В(&ДокументыОснования)
		|	И НЕ СписаниеТоваровТовары.Ссылка.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	СписаниеТоваровТовары.Номенклатура,
		|	СписаниеТоваровТовары.Упаковка,
		|	СписаниеТоваровТовары.Ссылка,
		|	СписаниеТоваровТовары.Ссылка.ds_ДокументПоступления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОрдерНаПеремещениеТоваровТовары.Ссылка.ДокументОснование КАК ДокументОснование,
		|	ОрдерНаПеремещениеТоваровТовары.Номенклатура КАК Номенклатура,
		|	ОрдерНаПеремещениеТоваровТовары.Упаковка КАК Упаковка,
		|	СУММА(ОрдерНаПеремещениеТоваровТовары.КоличествоУпаковок) КАК Количество
		|ПОМЕСТИТЬ ОрдерНаПеремещениеТоваров
		|ИЗ
		|	Документ.ОрдерНаПеремещениеТоваров.Товары КАК ОрдерНаПеремещениеТоваровТовары
		|ГДЕ
		|	ОрдерНаПеремещениеТоваровТовары.Ссылка.ДокументОснование В(&ДокументыОснования)
		|	И НЕ ОрдерНаПеремещениеТоваровТовары.Ссылка.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	ОрдерНаПеремещениеТоваровТовары.Номенклатура,
		|	ОрдерНаПеремещениеТоваровТовары.Упаковка,
		|	ОрдерНаПеремещениеТоваровТовары.Ссылка,
		|	ОрдерНаПеремещениеТоваровТовары.Ссылка.ДокументОснование
		|;
		|  
		|ВЫБРАТЬ
		|	ПоступлениеТоваровТоварыПоДаннымПоставщика.Ссылка КАК ДокументОснование,
		|	ПоступлениеТоваровТоварыПоДаннымПоставщика.Номенклатура КАК Номенклатура,
		|	ПоступлениеТоваровТоварыПоДаннымПоставщика.Упаковка КАК Упаковка,
		|	СУММА(ПоступлениеТоваровТоварыПоДаннымПоставщика.КоличествоУпаковок - ЕСТЬNULL(ПоступлениеТоваровТовары.КоличествоУпаковок, 0)) КАК Количество
		|ПОМЕСТИТЬ КорректировкаПоступления
		|ИЗ
		|	Документ.ПоступлениеТоваров.ТоварыПоДаннымПоставщика КАК ПоступлениеТоваровТоварыПоДаннымПоставщика
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
		|		ПО ПоступлениеТоваровТоварыПоДаннымПоставщика.Ссылка = ПоступлениеТоваровТовары.Ссылка
		|			И ПоступлениеТоваровТоварыПоДаннымПоставщика.Номенклатура = ПоступлениеТоваровТовары.Номенклатура
		|			И ПоступлениеТоваровТоварыПоДаннымПоставщика.Упаковка = ПоступлениеТоваровТовары.Упаковка
		|ГДЕ
		|	ПоступлениеТоваровТоварыПоДаннымПоставщика.Ссылка В(&ДокументыОснования)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоступлениеТоваровТоварыПоДаннымПоставщика.Ссылка,
		|	ПоступлениеТоваровТоварыПоДаннымПоставщика.Номенклатура,
		|	ПоступлениеТоваровТоварыПоДаннымПоставщика.Упаковка
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Расхождения.ДокументОснование КАК ДокументОснование,
		|	Расхождения.Номенклатура КАК Номенклатура,
		|	Расхождения.Упаковка КАК Упаковка,
		|	Расхождения.КоличествоФакт КАК КоличествоФакт,
		|	Расхождения.КоличествоПлан КАК КоличествоПлан,
		|	ВозвратТоваровПоставщику.Количество КАК КоличествоВозврат,
		|	КорректировкаПоступления.Количество КАК КоличествоКорректировка,
		|	ОприходованиеТоваров.Количество КАК КоличествоОприходование,
		|	СписаниеТоваров.Количество КАК КоличествоСписание,
		|	ОрдерНаПеремещениеТоваров.Количество КАК КоличествоПеремещение,
		|	Расхождения.Цена КАК Цена,
		|	Расхождения.Комментарий КАК Комментарий,
		|	Расхождения.Брак КАК Брак
		|ИЗ
		|	Расхождения КАК Расхождения
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
		|		ПО Расхождения.Номенклатура = ВозвратТоваровПоставщику.Номенклатура
		|			И Расхождения.ДокументОснование = ВозвратТоваровПоставщику.ДокументОснование
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОприходованиеТоваров КАК ОприходованиеТоваров
		|		ПО Расхождения.Номенклатура = ОприходованиеТоваров.Номенклатура
		|			И Расхождения.ДокументОснование = ОприходованиеТоваров.ДокументОснование
		|		ЛЕВОЕ СОЕДИНЕНИЕ СписаниеТоваров КАК СписаниеТоваров
		|		ПО Расхождения.Номенклатура = СписаниеТоваров.Номенклатура
		|			И Расхождения.ДокументОснование = СписаниеТоваров.ДокументОснование
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОрдерНаПеремещениеТоваров КАК ОрдерНаПеремещениеТоваров
		|		ПО Расхождения.Номенклатура = ОрдерНаПеремещениеТоваров.Номенклатура
		|			И Расхождения.ДокументОснование = ОрдерНаПеремещениеТоваров.ДокументОснование    
		|		ЛЕВОЕ СОЕДИНЕНИЕ КорректировкаПоступления КАК КорректировкаПоступления
		|		ПО Расхождения.Номенклатура = КорректировкаПоступления.Номенклатура
		|			И Расхождения.ДокументОснование = КорректировкаПоступления.ДокументОснование
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура
		|ИТОГИ
		|	СУММА(КоличествоФакт),
		|	СУММА(КоличествоПлан),
		|	СУММА(КоличествоВозврат),
		|	СУММА(КоличествоОприходование),
		|	СУММА(КоличествоСписание),
		|	СУММА(КоличествоПеремещение)
		|ПО
		|	Номенклатура";
	КонецЕсли;
	Запрос.УстановитьПараметр("Расхождения", Объект.Расхождения.Выгрузить());
	Запрос.УстановитьПараметр("ДокументыОснования", Объект.ДокументыОснования.Выгрузить().ВыгрузитьКолонку("ДокументОснование"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Дерево = РеквизитФормыВЗначение("РасхожденияДерево");
	Дерево.Строки.Очистить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаНоменклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
		Пока ВыборкаНоменклатура.Следующий() Цикл 
			Выборка = ВыборкаНоменклатура.Выбрать();
			Если Выборка.Количество() > 1 Тогда 
				НовСтр = Дерево.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, ВыборкаНоменклатура);
				РассчитатьОтклонениеРасхожденияНаСервере(НовСтр);
				Строки = НовСтр.Строки;
				НовСтр.ЭтоГруппа = Истина;
			Иначе
				Строки = Дерево.Строки;
			КонецЕсли;
			
			КоличествоВсего = ВыборкаНоменклатура.КоличествоФакт;
			Пока Выборка.Следующий() Цикл 
				НовСтр = Строки.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, Выборка);
				Если Перезаполнить Тогда 
					НовСтр.КоличествоФакт = Мин(КоличествоВсего, НовСтр.КоличествоПлан + НовСтр.КоличествоОприходование
						- НовСтр.КоличествоВозврат - НовСтр.КоличествоПеремещение - НовСтр.КоличествоСписание - НовСтр.КоличествоКорректировка);
				КонецЕсли;	
				РассчитатьОтклонениеРасхожденияНаСервере(НовСтр);
				
				КоличествоВсего = Макс(КоличествоВсего - НовСтр.КоличествоФакт, 0);
			КонецЦикла;
			
			Если КоличествоВсего > 0 Тогда 
				НовСтр.КоличествоФакт = НовСтр.КоличествоФакт + КоличествоВсего;
				РассчитатьОтклонениеРасхожденияНаСервере(НовСтр);
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(Дерево, "РасхожденияДерево");
		
КонецПроцедуры

&НаСервере
Процедура КонтрольРасхождений(СтрокиДерева, Отказ)
	
	Для Каждого Стр Из СтрокиДерева Цикл
		Если Стр.Строки.Количество() И Стр.КоличествоФакт <> Стр.Строки.Итог("КоличествоФакт") Тогда
			СтрокаСообщения = СтрШаблон("Некорректное количество расхождения: %1 - всего %2, по документам %3",
				Стр.Номенклатура, Стр.КоличествоФакт, Стр.Строки.Итог("КоличествоФакт"));
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения,,,, Отказ);
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере
Процедура РасхожденияДеревоКомментарийПриИзмененииНаСервере()
	
	Дерево = РеквизитФормыВЗначение("РасхожденияДерево");
	Объект.Расхождения.Очистить();
	ЗаполнитьРасхождения(Дерево.Строки, Объект.Расхождения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьРасхождения(СтрокиДерева, Расхождения)
	
	Для Каждого Стр Из СтрокиДерева Цикл
		Если Стр.Строки.Количество() Тогда 
			ЗаполнитьРасхождения(Стр.Строки, Расхождения);
		Иначе
			НовСтр = Расхождения.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Стр);
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере
Функция ДокументыОснованияИзменены()
	
	Возврат Не ОбщегоНазначения.КоллекцииИдентичны(Объект.ДокументыОснования, Объект.Ссылка.ДокументыОснования, "ДокументОснование");	
	
КонецФункции

&НаКлиенте
Процедура ОповещениеДокументыОснованияИзменены(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		ДокументыОснованияИзменены = Ложь;
		ЗаполнитьТоварыНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОрдераНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Расхождения.ДокументОснование,
	|	Расхождения.Номенклатура,
	|	Расхождения.КоличествоФакт,
	|	Расхождения.КоличествоВозврат,
	|	Расхождения.КоличествоСписание,
	|	Расхождения.КоличествоПеремещение,
	|	Расхождения.КоличествоОприходование
	|ПОМЕСТИТЬ Расхождения
	|ИЗ
	|	&Расхождения КАК Расхождения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеТоваров.Ссылка КАК Поступление,
	|	ПриходныйОрдерНаТовары.Ссылка КАК Документ,
	|	Расхождения.Номенклатура КАК Номенклатура,
	|	Расхождения.КоличествоФакт + Расхождения.КоличествоВозврат +
	|		Расхождения.КоличествоСписание + Расхождения.КоличествоПеремещение -
	|		Расхождения.КоличествоОприходование КАК КоличествоФакт
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПоступлениеТоваров.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
	|	ГДЕ
	|		ПоступлениеТоваров.Ссылка В (&ДокументыОснования)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ПеремещениеТоваров.Ссылка
	|	ИЗ
	|		Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|	ГДЕ
	|		ПеремещениеТоваров.Ссылка В (&ДокументыОснования)) КАК ПоступлениеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	|		ПО ПоступлениеТоваров.Ссылка = ПриходныйОрдерНаТовары.ДокументОснование
	|		ЛЕВОЕ СОЕДИНЕНИЕ Расхождения КАК Расхождения
	|		ПО ПоступлениеТоваров.Ссылка = Расхождения.ДокументОснование
	|ИТОГИ
	|ПО
	|	Поступление,
	|	Документ";
	Запрос.УстановитьПараметр("ДокументыОснования", Объект.ДокументыОснования.Выгрузить().ВыгрузитьКолонку("ДокументОснование"));
	
	Расхождения = ds_ОбщегоНазначенияВызовСервера.ВыгрузитьДеревоЗначенийВТаблицуЗначений(РеквизитФормыВЗначение("РасхожденияДерево"));
	Запрос.УстановитьПараметр("Расхождения", Расхождения.Скопировать(Новый Структура("ЭтоГруппа", Ложь)));
	
	ВыборкаПоступление = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоступление.Следующий() Цикл
		ВыборкаДокумент = ВыборкаПоступление.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаДокумент.Следующий() Цикл
			Если ВыборкаДокумент.Документ <> Null Тогда 
				Док = ВыборкаДокумент.Документ.ПолучитьОбъект();	
			Иначе 
				Док = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();	
			КонецЕсли;
			
			Док.Дата = Объект.Дата;
			Док.Заполнить(ВыборкаДокумент.Поступление);
			
			Выборка = ВыборкаДокумент.Выбрать();
			Пока Выборка.Следующий() Цикл 
				ИскСтрока = Док.Товары.Найти(Выборка.Номенклатура, "Номенклатура");
				Если ИскСтрока = Неопределено Тогда
					ИскСтрока = Док.Товары.Добавить();
					ИскСтрока.Номенклатура = Выборка.Номенклатура;
				КонецЕсли;	
				
				ИскСтрока.КоличествоУпаковок = Выборка.КоличествоФакт;

				СтруктураДействий = Новый Структура;
				СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
				ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ИскСтрока, СтруктураДействий, Неопределено);
			КонецЦикла;
			
			СтрокиБезКоличества = Док.Товары.НайтиСтроки(Новый Структура("Количество", 0));
			Для Каждого Стр Из СтрокиБезКоличества Цикл 
				Док.Товары.Удалить(Стр);
			КонецЦикла;	
			
			ЗаписатьДокумент(Док);
		КонецЦикла;	
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоЗапись()
	
	Если ЭтаФорма.Модифицированность И Объект.Товары.Количество() Тогда
		Записать();
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Функция ВыбранныеСтрокиРасхождений()
	
	ТЗ = РеквизитФормыВЗначение("Объект").Расхождения.ВыгрузитьКолонки();
	ТЗ.Колонки.Добавить("Отклонение", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	
	ДобавитьВТаблицуВыбранныеСтрокиРасхождений(РасхожденияДерево, ТЗ);
	
	Возврат ТЗ;
	
КонецФункции	

&НаСервере
Процедура ДобавитьВТаблицуВыбранныеСтрокиРасхождений(ЭлементДерева, ТЗ)
	
    СтрокиДерева = ЭлементДерева.ПолучитьЭлементы();
	Если СтрокиДерева.Количество() Тогда
		Для Каждого ТекСтрока Из СтрокиДерева Цикл
			ДобавитьВТаблицуВыбранныеСтрокиРасхождений(ТекСтрока, ТЗ);
		КонецЦикла;
	Иначе
		Если ЭлементДерева.Отметка И ЭлементДерева.Отклонение <> 0 Тогда
			ЗаполнитьЗначенияСвойств(ТЗ.Добавить(), ЭлементДерева);
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура ОформитьВозвратыТоваровПоставщикуНаСервере()

	ВыбранныеСтроки = ВыбранныеСтрокиРасхождений();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеТоваровТовары.Ссылка КАК ДокументПоступления,
	|	ПоступлениеТоваровТовары.Номенклатура КАК Номенклатура,
	|	ПоступлениеТоваровТовары.КоличествоУпаковок КАК Количество,
	|	ПоступлениеТоваровТовары.Цена КАК Цена,
	|	ПоступлениеТоваровТовары.Сумма КАК Сумма,
	|	ПоступлениеТоваровТовары.СтавкаНДС КАК СтавкаНДС,
	|	ПоступлениеТоваровТовары.СуммаНДС КАК СуммаНДС
	|ПОМЕСТИТЬ ЦеныПоступления
	|ИЗ
	|	Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
	|ГДЕ
	|	ПоступлениеТоваровТовары.Ссылка В(&СписокПоступлений)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗ.Номенклатура КАК Номенклатура,
	|	ТЗ.Упаковка КАК Упаковка,
	|	ТЗ.Отклонение КАК Отклонение,
	|	ТЗ.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ ТЗ
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВозвратТоваровПоставщику.Ссылка КАК ВозвратТоваровПоставщику,
	|	ТЗ.Номенклатура КАК Номенклатура,
	|	ТЗ.Упаковка КАК Упаковка,
	|	ТЗ.Отклонение * ВЫБОР
	|		КОГДА ТЗ.Отклонение < 0
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КоличествоКОбработке,
	|	ТЗ.ДокументОснование КАК ДокументОснование,
	|	ЦеныПоступления.Количество КАК КоличествоВПоступлении,
	|	ЦеныПоступления.Цена КАК Цена,
	|	ЦеныПоступления.Сумма КАК Сумма,
	|	ЦеныПоступления.СтавкаНДС КАК СтавкаНДС,
	|	ЦеныПоступления.СуммаНДС КАК СуммаНДС
	|ИЗ
	|	ТЗ КАК ТЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|		ПО ТЗ.ДокументОснование = ВозвратТоваровПоставщику.ДокументОснование
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныПоступления КАК ЦеныПоступления
	|		ПО ТЗ.Номенклатура = ЦеныПоступления.Номенклатура
	|			И ТЗ.ДокументОснование = ЦеныПоступления.ДокументПоступления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Цена УБЫВ
	|ИТОГИ
	|	МАКСИМУМ(ВозвратТоваровПоставщику),
	|	МАКСИМУМ(Упаковка),
	|	МАКСИМУМ(КоличествоКОбработке)
	|ПО
	|	ДокументОснование,
	|	Номенклатура";
	Запрос.УстановитьПараметр("ТЗ", ВыбранныеСтроки);
	Запрос.УстановитьПараметр("СписокПоступлений", СписокДокументовОснования());
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда	
		ВыборкаДокументОснование = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаДокументОснование.Следующий() Цикл 
			Если ВыборкаДокументОснование.ВозвратТоваровПоставщику <> Null Тогда 
				Док = ВыборкаДокументОснование.ВозвратТоваровПоставщику.ПолучитьОбъект();	
			Иначе 
				Док = Документы.ВозвратТоваровПоставщику.СоздатьДокумент();
				Док.Дата = ТекущаяДата();
				Док.Заполнить(ВыборкаДокументОснование.ДокументОснование);
				Док.Товары.Очистить();
			КонецЕсли;
			
			ВыборкаНоменклатура = ВыборкаДокументОснование.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаНоменклатура.Следующий() Цикл 
				НовСтр = Док.Товары.Добавить();
				НовСтр.Номенклатура = ВыборкаНоменклатура.Номенклатура;
				
				КоличествоКОбработке = ВыборкаНоменклатура.КоличествоКОбработке;
				
				Выборка = ВыборкаНоменклатура.Выбрать();
				Пока КоличествоКОбработке > 0 И Выборка.Следующий() Цикл
					Количество = Мин(Выборка.КоличествоВПоступлении, КоличествоКОбработке);
					НовСтр.Количество = Количество;
					НовСтр.КоличествоУпаковок = Количество;
					НовСтр.СтавкаНДС = Выборка.СтавкаНДС;
					НовСтр.Цена = Выборка.Цена;
					
					Если Выборка.КоличествоВПоступлении = КоличествоКОбработке Тогда 
						НовСтр.Сумма = Выборка.Сумма;
						НовСтр.СуммаНДС = Выборка.СуммаНДС;
					Иначе
						КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураКэшируемыхЗначений();
						
						СтруктураДействий = Новый Структура;
						СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Док));
						СтруктураДействий.Вставить("ПересчитатьСумму");
	
						ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(НовСтр, СтруктураДействий, КэшированныеЗначения);
					КонецЕсли;	
					
					КоличествоКОбработке = КоличествоКОбработке - Количество;
				КонецЦикла;	
			КонецЦикла;	
			
			ЗаписатьДокумент(Док);
		КонецЦикла;	
		
		ЗаполнитьДеревоРасхожденийНаСервере(Ложь);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ОформитьОприходованиеТоваровНаСервере()

	ВыбранныеСтроки = ВыбранныеСтрокиРасхождений();
	
	Отказ = Ложь;
	
	Отбор = Новый Структура;
	Отбор.Вставить("КоличествоПлан", 0);
	Отбор.Вставить("Цена", 0);
	
	Если ВыбранныеСтроки.НайтиСтроки(Отбор).Количество() Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для приходуемого товара необходимо указать цену!",,,, Отказ);
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("КоличествоПлан", 0);
	Отбор.Вставить("ДокументОснование", ПредопределенноеЗначение("Документ.ПоступлениеТоваров.ПустаяСсылка"));
	
	Если ВыбранныеСтроки.НайтиСтроки(Отбор).Количество() Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для приходуемого товара необходимо указать Документ основание!",,,, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЗ.Номенклатура КАК Номенклатура,
	|	ТЗ.Упаковка КАК Упаковка,
	|	ТЗ.Отклонение КАК Отклонение,
	|	ТЗ.ДокументОснование КАК ДокументОснование,
	|	ТЗ.Цена КАК Цена
	|ПОМЕСТИТЬ ТЗ
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОприходованиеТоваров.Ссылка КАК ОприходованиеТоваров,
	|	ТЗ.Номенклатура КАК Номенклатура,
	|	ТЗ.Упаковка КАК Упаковка,
	|	ТЗ.Отклонение КАК КоличествоКОбработке,
	|	ПоступлениеТоваров.Ссылка КАК ДокументОснование,
	|	ТЗ.Цена КАК Цена,
	|	ПоступлениеТоваров.Магазин КАК Магазин,
	|	ПоступлениеТоваров.Организация КАК Организация,
	|	ПоступлениеТоваров.Склад КАК Склад
	|ИЗ
	|	ТЗ КАК ТЗ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
	|		ПО ТЗ.ДокументОснование = ПоступлениеТоваров.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОприходованиеТоваров КАК ОприходованиеТоваров
	|		ПО (ПоступлениеТоваров.Ссылка = ОприходованиеТоваров.ds_ДокументПоступления)
	|ИТОГИ
	|	МАКСИМУМ(ОприходованиеТоваров)
	|ПО
	|	ДокументОснование";
	Запрос.УстановитьПараметр("ТЗ", ВыбранныеСтроки);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда	
		ВыборкаДокументОснование = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаДокументОснование.Следующий() Цикл 
			Если ВыборкаДокументОснование.ОприходованиеТоваров <> Null Тогда 
				Док = ВыборкаДокументОснование.ОприходованиеТоваров.ПолучитьОбъект();	
			Иначе 
				Док = Документы.ОприходованиеТоваров.СоздатьДокумент();
				Док.Дата = ТекущаяДата();
				Док.ds_ДокументПоступления = ВыборкаДокументОснование.ДокументОснование;
				Док.Магазин = ВыборкаДокументОснование.Магазин;
				Док.Склад = ВыборкаДокументОснование.Склад;
				Док.Организация = ВыборкаДокументОснование.Организация;
				Док.Ответственный = ПараметрыСеанса.ТекущийПользователь;
				Док.АналитикаХозяйственнойОперации = Справочники.АналитикаХозяйственныхОпераций.ОприходованиеТоваров;
			КонецЕсли;
			
			Выборка = ВыборкаДокументОснование.Выбрать();
			Пока Выборка.Следующий() Цикл 
				НовСтр = Док.Товары.Добавить();
				НовСтр.Номенклатура = Выборка.Номенклатура;
				НовСтр.Количество = Выборка.КоличествоКОбработке;
				НовСтр.КоличествоУпаковок = НовСтр.Количество;
				НовСтр.Цена = Выборка.Цена;
				НовСтр.Сумма = НовСтр.Количество * НовСтр.Цена;
			КонецЦикла;	
			
			ЗаписатьДокумент(Док, ВыбранныеСтроки);
		КонецЦикла;	
		
		ЗаполнитьДеревоРасхожденийНаСервере(Ложь);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ОформитьПеремещениеТоваровНаСервере()
	
	ВыбранныеСтроки = ВыбранныеСтрокиРасхождений();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЗ.Номенклатура КАК Номенклатура,
	|	ТЗ.Упаковка КАК Упаковка,
	|	ТЗ.Отклонение КАК Отклонение,
	|	ТЗ.ДокументОснование КАК ДокументОснование,
	|	ТЗ.Цена КАК Цена
	|ПОМЕСТИТЬ ТЗ
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОрдерНаПеремещениеТоваров.Ссылка КАК ОрдерНаПеремещениеТоваров,
	|	ТЗ.Номенклатура КАК Номенклатура,
	|	ТЗ.Упаковка КАК Упаковка,
	|	-1 * ТЗ.Отклонение КАК КоличествоКОбработке,
	|	ПоступлениеТоваров.Ссылка КАК ДокументОснование,
	|	ТЗ.Цена КАК Цена,
	|	ПоступлениеТоваров.Магазин КАК Магазин,
	|	ПоступлениеТоваров.Организация КАК Организация,
	|	ПоступлениеТоваров.Склад КАК Склад
	|ИЗ
	|	ТЗ КАК ТЗ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
	|		ПО ТЗ.ДокументОснование = ПоступлениеТоваров.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОрдерНаПеремещениеТоваров КАК ОрдерНаПеремещениеТоваров
	|		ПО ТЗ.ДокументОснование = ОрдерНаПеремещениеТоваров.ДокументОснование
	|ИТОГИ ПО
	|	ДокументОснование";
	Запрос.УстановитьПараметр("ТЗ", ВыбранныеСтроки);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДокументОснование = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаДокументОснование.Следующий() Цикл 
			Если ВыборкаДокументОснование.ОрдерНаПеремещениеТоваров <> Null Тогда 
				Док = ВыборкаДокументОснование.ОрдерНаПеремещениеТоваров.ПолучитьОбъект();	
			Иначе 
				Док = Документы.ОрдерНаПеремещениеТоваров.СоздатьДокумент();
				Док.Дата = ТекущаяДата();
				Док.Заполнить(ВыборкаДокументОснование.ДокументОснование);
				
				Запрос.Текст =
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	Склады.Ссылка КАК Склад
				|ИЗ
				|	Справочник.Склады КАК Склады
				|ГДЕ
				|	Склады.Магазин = &Магазин
				|	И Склады.ТипСклада = &ТипСклада";
				Запрос.УстановитьПараметр("Магазин", Док.Магазин);
				Запрос.УстановитьПараметр("ТипСклада", Перечисления.ТипыСкладов.СкладскоеПомещение);
				РезультатЗапроса = Запрос.Выполнить();
				Если Не РезультатЗапроса.Пустой() Тогда 
					Выборка = РезультатЗапроса.Выбрать();
					Выборка.Следующий();
					
					Док.СкладПолучатель = Выборка.Склад;
				КонецЕсли;	
				
				Док.Товары.Очистить();
			КонецЕсли;
			
			Выборка = ВыборкаДокументОснование.Выбрать();
			Пока Выборка.Следующий() Цикл 
				НовСтр = Док.Товары.Добавить();
				НовСтр.Номенклатура = Выборка.Номенклатура;
				НовСтр.Количество = Выборка.КоличествоКОбработке;
				НовСтр.КоличествоУпаковок = НовСтр.Количество;
				НовСтр.Цена = Выборка.Цена;
				НовСтр.Сумма = НовСтр.Количество * НовСтр.Цена;
			КонецЦикла;	
			
			ЗаписатьДокумент(Док);
		КонецЦикла;	
					
		ЗаполнитьДеревоРасхожденийНаСервере(Ложь);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ОформитьСписаниеТоваровНаСервере()

	ВыбранныеСтроки = ВыбранныеСтрокиРасхождений();
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЗ.Номенклатура КАК Номенклатура,
	|	ТЗ.Упаковка КАК Упаковка,
	|	ТЗ.Отклонение КАК Отклонение,
	|	ТЗ.ДокументОснование КАК ДокументОснование,
	|	ТЗ.Цена КАК Цена
	|ПОМЕСТИТЬ ТЗ
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписаниеТоваров.Ссылка КАК СписаниеТоваров,
	|	ТЗ.Номенклатура КАК Номенклатура,
	|	ТЗ.Упаковка КАК Упаковка,
	|	-1 * ТЗ.Отклонение КАК КоличествоКОбработке,
	|	ДокументыОснования.ДокументОснование КАК ДокументОснование,
	|	ТЗ.Цена КАК Цена,
	|	ДокументыОснования.Магазин КАК Магазин,
	|	ДокументыОснования.Организация КАК Организация,
	|	ДокументыОснования.Склад КАК Склад
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ПоступлениеТоваров.Ссылка КАК ДокументОснование,
	|		ПоступлениеТоваров.Магазин КАК Магазин,
	|		ПоступлениеТоваров.Организация КАК Организация,
	|		ПоступлениеТоваров.Склад КАК Склад
	|	ИЗ
	|		ТЗ КАК ТЗ
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
	|			ПО ТЗ.ДокументОснование = ПоступлениеТоваров.Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ПеремещениеТоваров.Ссылка,
	|		ПеремещениеТоваров.МагазинПолучатель,
	|		ПеремещениеТоваров.Организация,
	|		ПеремещениеТоваров.СкладПолучатель
	|	ИЗ
	|		ТЗ КАК ТЗ
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|			ПО ТЗ.ДокументОснование = ПеремещениеТоваров.Ссылка) КАК ДокументыОснования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗ КАК ТЗ
	|		ПО (ТЗ.ДокументОснование = ДокументыОснования.ДокументОснование)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеТоваров КАК СписаниеТоваров
	|		ПО (ТЗ.ДокументОснование = СписаниеТоваров.ds_ДокументПоступления)
	|		И СписаниеТоваров.Проведен
	|ГДЕ
	|	ТЗ.Отклонение < 0
	|ИТОГИ
	|	МАКСИМУМ(СписаниеТоваров),
	|	МАКСИМУМ(Магазин),
	|	МАКСИМУМ(Организация),
	|	МАКСИМУМ(Склад)
	|ПО
	|	ДокументОснование";
	Запрос.УстановитьПараметр("ТЗ", ВыбранныеСтроки);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДокументОснование = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаДокументОснование.Следующий() Цикл 
			Если ВыборкаДокументОснование.СписаниеТоваров <> Null Тогда 
				Док = ВыборкаДокументОснование.СписаниеТоваров.ПолучитьОбъект();	
			Иначе 
				Док = Документы.СписаниеТоваров.СоздатьДокумент();
				Док.Дата = ТекущаяДата();
				Док.ds_ДокументПоступления = ВыборкаДокументОснование.ДокументОснование;
				Док.Магазин = ВыборкаДокументОснование.Магазин;
				Док.Склад = ВыборкаДокументОснование.Склад;
				Док.Организация = ВыборкаДокументОснование.Организация;
				Док.Ответственный = ПараметрыСеанса.ТекущийПользователь;
				
				Запрос.Текст =
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	АналитикаХозяйственныхОпераций.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.АналитикаХозяйственныхОпераций КАК АналитикаХозяйственныхОпераций
				|ГДЕ
				|	АналитикаХозяйственныхОпераций.ХозяйственнаяОперация = &ХозяйственнаяОперация";
				Запрос.УстановитьПараметр("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.СписаниеНаЗатраты);
				РезультатЗапроса = Запрос.Выполнить();
				Если Не РезультатЗапроса.Пустой() Тогда 
					Выборка = РезультатЗапроса.Выбрать();
					Выборка.Следующий();
					Док.АналитикаХозяйственнойОперации = Выборка.Ссылка;
				КонецЕсли;	
			КонецЕсли;
			
			Выборка = ВыборкаДокументОснование.Выбрать();
			Пока Выборка.Следующий() Цикл 
				НовСтр = Док.Товары.Добавить();
				НовСтр.Номенклатура = Выборка.Номенклатура;
				НовСтр.Количество = Выборка.КоличествоКОбработке;
				НовСтр.КоличествоУпаковок = НовСтр.Количество;
				НовСтр.Цена = Выборка.Цена;
				НовСтр.Сумма = НовСтр.Количество * НовСтр.Цена;
			КонецЦикла;	
			
			ЗаписатьДокумент(Док);
		КонецЦикла;	
		
		ЗаполнитьДеревоРасхожденийНаСервере(Ложь);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура СкорректироватьПоступлениеНаСервере()
	
	ВыбранныеСтроки = ВыбранныеСтрокиРасхождений();

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Расхождения.ДокументОснование КАК ДокументОснование,
	|	Расхождения.Номенклатура КАК Номенклатура, 
	|	Расхождения.Упаковка КАК Упаковка,
	|	Расхождения.КоличествоФакт КАК Количество
	|ПОМЕСТИТЬ Расхождения
	|ИЗ
	|	&Расхождения КАК Расхождения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыПлан.Ссылка КАК ДокументОснование,
	|	ТоварыПлан.Номенклатура КАК Номенклатура,
	|	ТоварыПлан.Количество КАК Количество,
	|	ТоварыПлан.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТоварыПлан.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТоварыПлан.НомерСтроки КАК НомерСтроки,
	|	ТоварыПлан.Упаковка КАК Упаковка,
	|	ТоварыПлан.Характеристика КАК Характеристика,
	|	ТоварыПлан.Цена КАК Цена
	|ПОМЕСТИТЬ ТоварыПлан
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПоступлениеТоваровТовары.Ссылка КАК Ссылка,
	|		ПоступлениеТоваровТовары.Номенклатура КАК Номенклатура,
	|		ПоступлениеТоваровТовары.Количество КАК Количество,
	|		ПоступлениеТоваровТовары.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|		ПоступлениеТоваровТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|		ПоступлениеТоваровТовары.НомерСтроки КАК НомерСтроки,
	|		ПоступлениеТоваровТовары.Упаковка КАК Упаковка,
	|		ПоступлениеТоваровТовары.Характеристика КАК Характеристика,
	|		ПоступлениеТоваровТовары.Цена КАК Цена
	|	ИЗ
	|		Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
	|	ГДЕ
	|		ПоступлениеТоваровТовары.Ссылка В(&ДокументыОснования)
	|		И НЕ ПоступлениеТоваровТовары.Ссылка.ЕстьРасхождения
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПоступлениеТоваровТоварыПоДаннымПоставщика.Ссылка,
	|		ПоступлениеТоваровТоварыПоДаннымПоставщика.Номенклатура,
	|		ПоступлениеТоваровТоварыПоДаннымПоставщика.Количество,
	|		ПоступлениеТоваровТоварыПоДаннымПоставщика.ИдентификаторСтроки,
	|		ПоступлениеТоваровТоварыПоДаннымПоставщика.КоличествоУпаковок,
	|		ПоступлениеТоваровТоварыПоДаннымПоставщика.НомерСтроки,
	|		ПоступлениеТоваровТоварыПоДаннымПоставщика.Упаковка,
	|		ПоступлениеТоваровТоварыПоДаннымПоставщика.Характеристика,
	|		ПоступлениеТоваровТоварыПоДаннымПоставщика.Цена
	|	ИЗ
	|		Документ.ПоступлениеТоваров.ТоварыПоДаннымПоставщика КАК ПоступлениеТоваровТоварыПоДаннымПоставщика
	|	ГДЕ
	|		ПоступлениеТоваровТоварыПоДаннымПоставщика.Ссылка В(&ДокументыОснования)
	|		И ПоступлениеТоваровТоварыПоДаннымПоставщика.Ссылка.ЕстьРасхождения) КАК ТоварыПлан
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыПлан.ДокументОснование КАК ДокументОснование,
	|	ТоварыПлан.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(Расхождения.Количество, ТоварыПлан.Количество) КАК Количество,
	|	ТоварыПлан.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ЕСТЬNULL(Расхождения.Количество, ТоварыПлан.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	ТоварыПлан.НомерСтроки КАК НомерСтроки,
	|	ТоварыПлан.Упаковка КАК Упаковка,
	|	ТоварыПлан.Характеристика КАК Характеристика,
	|	ТоварыПлан.Цена КАК Цена
	|ИЗ
	|	ТоварыПлан КАК ТоварыПлан
	|		ЛЕВОЕ СОЕДИНЕНИЕ Расхождения КАК Расхождения
	|		ПО ТоварыПлан.ДокументОснование = Расхождения.ДокументОснование
	|			И ТоварыПлан.Номенклатура = Расхождения.Номенклатура
	|ИТОГИ ПО
	|	ДокументОснование";
	Запрос.УстановитьПараметр("Расхождения", ВыбранныеСтроки);
	Запрос.УстановитьПараметр("ДокументыОснования", Объект.ДокументыОснования.Выгрузить().ВыгрузитьКолонку("ДокументОснование"));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДокументОснование = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаДокументОснование.Следующий() Цикл 
			ПараметрыРаспределения = Новый Структура;
			ПараметрыРаспределения.Вставить("ОрдернаяСхема", Истина);
			
			ПараметрыЗадания = Новый Структура();
			ПараметрыЗадания.Вставить("ДокументРаспоряжение", ВыборкаДокументОснование.ДокументОснование);
			ПараметрыЗадания.Вставить("Магазин", Объект.Магазин);
			ПараметрыЗадания.Вставить("ОсновнойСклад", Объект.Склад);
			ПараметрыЗадания.Вставить("Ответственный", Объект.Ответственный);  
				
			ПараметрыЗадания.Вставить("ПараметрыРаспределения", ПараметрыРаспределения);
			ПараметрыЗадания.Вставить("СкладыРаспределения", Новый ХранилищеЗначения(Неопределено));
			
			ПараметрыЗадания.Вставить("СерийныеНомераФакт", Новый ХранилищеЗначения(Неопределено));
			ПараметрыЗадания.Вставить("СерииФакт", Новый ХранилищеЗначения(Неопределено));
			
			ПараметрыЗадания.Вставить("ТоварыПеремещение", Новый ХранилищеЗначения(Неопределено));
			ПараметрыЗадания.Вставить("СерийныеНомераПеремещение", Новый ХранилищеЗначения(Неопределено));
			
			ТоварыФакт = Документы.ПоступлениеТоваров.СоздатьДокумент().Товары.ВыгрузитьКолонки();
			
			Выборка = ВыборкаДокументОснование.Выбрать();
			Пока Выборка.Следующий() Цикл ЗаполнитьЗначенияСвойств(ТоварыФакт.Добавить(), Выборка) КонецЦикла;	
			
			ПараметрыЗадания.Вставить("ТоварыФакт", Новый ХранилищеЗначения(ТоварыФакт));
			
			Обработки.ПомощникПриемкиОтгрузки.ОформитьРасхожденияВФоне(ПараметрыЗадания, Неопределено);
		КонецЦикла;	
	
		ЗаполнитьДеревоРасхожденийНаСервере(Ложь);
	КонецЕсли;	
			
КонецПроцедуры	

&НаСервере
Процедура ЗаписатьДокумент(Док, СтрокиКОформлениюРасхождений = Неопределено)
	
	ДокументПроведен = Ложь;
	
	Док.ПометкаУдаления = Ложь;
	
	Если Док.ПроверитьЗаполнение() Тогда 
		Попытка
			Док.Записать(РежимЗаписиДокумента.Проведение);
			ДокументПроведен = Истина;
		Исключение
			Док.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;
		
		Если ДокументПроведен И СтрокиКОформлениюРасхождений <> Неопределено Тогда 
			Для Каждого Стр Из СтрокиКОформлениюРасхождений Цикл
				Отбор = Новый Структура;
				Отбор.Вставить("Номенклатура", Стр.Номенклатура);
				ИскСтроки = Объект.Расхождения.НайтиСтроки(Отбор);
				Если ИскСтроки.Количество() Тогда
					ИскСтроки[0].ДокументОснование = Стр.ДокументОснование;
					ИскСтроки[0].Цена = Стр.Цена;
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;	
				
		Если Не Объект.СвязанныеДокументы.НайтиСтроки(Новый Структура("Документ", Док.Ссылка)).Количество() Тогда 
			НовСтр = Объект.СвязанныеДокументы.Добавить();
			НовСтр.Документ = Док.Ссылка;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Функция ПолучитьИнтервалАвтосохраненияАктаПриемки()
	
	Возврат Константы.ds_ИнтервалАвтосохраненияАктаПриемки.Получить();
	
КонецФункции

#КонецОбласти







