
#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения;

&НаКлиенте
Перем ЗначениеПеречислениеВидОперацииПродажа;

&НаКлиенте
Перем ЗначениеПеречислениеВидОперацииВозврат;

&НаКлиенте
Перем ЗначениеСправочникиВидыОплатЧекаККМОплатаПодарочнымСертификатом;

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; // Используется для передачи текущей строки в обработчик ожидания.

&НаКлиенте
Перем ПредыдущиеЗначения; // Используется для отслеживания изменения ключевых реквизитов.

#КонецОбласти

#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийПодключаемогоОборудования

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НЕ ПустаяСтрока(Штрихкод) Тогда
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
					ЭтотОбъект.Элементы.Товары,
					КэшированныеЗначения,
					ПараметрыУказанияСерий);
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(Штрихкод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоМагнитномуКоду(ТекКод, ДополнительныеПараметры) Экспорт
	
	Если Не ПустаяСтрока(ТекКод) Тогда
		СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораДанныхПоиска(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ПродолжитьОбработатьДанныеПоКодуКлиент(Результат);
		ОбработатьДанныеПоКодуКлиент(Результат)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолученМагнитныйКод(МагнитныйКод) Экспорт 
	
	СтруктураРезультат = ДанныеПоискаПоМагнитномуКодуСервер(МагнитныйКод);
	Возврат ПодключаемоеОборудованиеРТКлиент.ПолученМагнитныйКод(ЭтотОбъект, СтруктураРезультат);
	
КонецФункции

&НаКлиенте
Функция ПолученШтрихкодИзСШК(Штрихкод) Экспорт
	
	СтруктураРезультат = ДанныеПоискаПоШтрихкодуСервер(Штрихкод);
	Возврат ПодключаемоеОборудованиеРТКлиент.ПолученШтрихкодИзСШК(ЭтотОбъект, СтруктураРезультат);
	
КонецФункции

&НаКлиенте
Процедура ПолучитьВесЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		ПриИзмененииТоварыКоличестваУпаковок();
		ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента) Экспорт
	
	ОткрытаБлокирующаяФорма = Ложь;
	
	Если СтруктураПараметровКлиента.Свойство("НайденаДисконтнаяКарта") Тогда
		
		Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
			
			Если СтруктураПараметровКлиента.Свойство("НомерТелефона")
				И ПроверитьВозможностьПечатиБумажногоЧека() Тогда
			
				Объект.АдресЭП		= "";
				Объект.Телефон		= СтруктураПараметровКлиента.НомерТелефона;
				
				ОтказКлиентаОтСохраненияТелефонаEmail = Истина;
				
			ИначеЕсли СтруктураПараметровКлиента.Свойство("АдресЭП")
				И ПроверитьВозможностьПечатиБумажногоЧека() Тогда
			
				Объект.АдресЭП		= СтруктураПараметровКлиента.АдресЭП;
				Объект.Телефон		= "";
		
				ОтказКлиентаОтСохраненияТелефонаEmail = Истина;
				
			КонецЕсли;

			ДисконтнаяКартаПриИзменении(Неопределено);
			
		КонецЕсли;
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("НеобходимостьВводаАкцизнойМарки")
		И СтруктураПараметровКлиента.Свойство("АктивизироватьСтроку") Тогда
		
		ПерезаполнитьПризнакиМаркировки();
		
	Иначе
		
		ПодключаемоеОборудованиеРТКлиент.ОбработатьДанныеПоКоду(ЭтотОбъект, СтруктураПараметровКлиента, ОткрытаБлокирующаяФорма);
	
	КонецЕсли;
	
	Если НЕ ОткрытаБлокирующаяФорма Тогда
		ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОбработатьДанныеПослеЗагрузкиИзТСД(СтруктураПараметров, ДополнительныеПараметры) Экспорт
	
	ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
	ПерезаполнитьПризнакиМаркировки();
	
КонецФункции

&НаКлиенте
Функция ДобавитьНайденныеПозицииТоваров(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ДобавитьНайденныеПозицииТоваровСервер(СтруктураПараметров, ДополнительныеПараметры);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьСозданиеИВыборНовойХарактеристики(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторТекущейСтроки);
	ТекущаяСтрока.Характеристика = Результат;
	ТоварыХарактеристикаПриИзменении(Неопределено);

КонецПроцедуры

&НаСервере
Функция Подключаемый_ОбработатьВводШтрихкода(ДанныеШтрихкода, КэшированныеЗначения, ПараметрыСканирования = Неопределено)
	
	РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ОбработатьВводШтрихкода(ЭтотОбъект, ДанныеШтрихкода, КэшированныеЗначения, ПараметрыСканирования);
	
	ПослеОбработкиШтрихкодов(
		РезультатОбработкиШтрихкода,
		КэшированныеЗначения);
		
	ОбновитьИтоговыеПоказателиКлиентСервер(ЭтотОбъект);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Неопределено;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Неопределено;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

&НаСервере
Функция Подключаемый_ВыполнитьДействие(Действие, РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения)
	
	ПараметрыОбработкиВыбора    = ШтрихкодированиеИС.ИнициализироватьПараметрыОбработкиВыбора(РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения);
	РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ВыполнитьДействие(ЭтотОбъект, Действие, ПараметрыОбработкиВыбора);
	
	ПослеОбработкиШтрихкодов(
		РезультатОбработкиШтрихкода,
		КэшированныеЗначения);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Неопределено;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Неопределено;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

&НаСервере
Функция ДанныеПоискаПоМагнитномуКодуСервер(МагнитныйКод)
	
	Возврат ПодключаемоеОборудованиеРТ.ДанныеПоискаПоМагнитномуКоду(МагнитныйКод, ЭтотОбъект);
	
КонецФункции

&НаСервере
Функция ДанныеПоискаПоШтрихкодуСервер(Штрихкод)
	
	Возврат ПодключаемоеОборудованиеРТ.ДанныеПоискаПоШтрихкоду(Штрихкод, ЭтотОбъект);
	
КонецФункции

&НаКлиенте
Процедура ОповещениеОбработатьДанныеПоКоду(СтруктураРезультат, ДополнительныеПараметры) Экспорт
	
	ПродолжитьОбработатьДанныеПоКодуКлиент(СтруктураРезультат);
	
КонецПроцедуры


&НаКлиенте
Процедура ПродолжитьОбработатьДанныеПоКодуКлиент(СтруктураРезультат) Экспорт
	
	ИдентификаторСтроки = Неопределено;
	СтрокаРезультата = СтруктураРезультат.ЗначенияПоиска[0];
	
	Если НЕ СтруктураРезультат.Свойство("ДействиеОтменено") Тогда
		Если СтрокаРезультата.Свойство("Карта") Тогда
			
			Если СтрокаРезультата.ЭтоРегистрационнаяКарта Тогда
				Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
					СтруктураРезультат.Вставить("ТекстПредупреждения", 
						НСтр("ru = 'Изменение продавца при возврате не предусмотрено.'"));
				Иначе
					Если ТипЗнч(СтрокаРезультата.ВладелецКарты) = Тип("СправочникСсылка.Пользователи") Тогда 
						Объект.Продавец = РозничныеПродажиВызовСервера.ФизЛицоВладельцаКарты(СтрокаРезультата.ВладелецКарты);
					Иначе
						Объект.Продавец = СтрокаРезультата.ВладелецКарты;
					КонецЕсли;
					Модифицированность = Истина;
				КонецЕсли;
			Иначе
				Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
					СтруктураРезультат.Вставить("ТекстПредупреждения", 
						НСтр("ru = 'Изменение дисконтной карты при возврате не предусмотрено.'"));
				Иначе
					Объект.ДисконтнаяКарта = СтрокаРезультата.Карта;
					СтруктураРезультат.Вставить("НайденаДисконтнаяКарта", СтрокаРезультата.Карта);
					Модифицированность = Истина;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли СтрокаРезультата.Свойство("СерийныйНомер") Тогда
			
			ИдентификаторСтроки = ПодключаемоеОборудованиеРТКлиент.ДобавитьНайденныеСерийныеНомера(ЭтотОбъект, СтрокаРезультата);
			
		ИначеЕсли СтрокаРезультата.Свойство("Серия") Тогда
			
			ПодключаемоеОборудованиеРТКлиент.ДобавитьНайденныеВТЧСерииНоменклатуры(ЭтотОбъект, СтрокаРезультата);
			
		ИначеЕсли СтрокаРезультата.Свойство("Номенклатура") Тогда
			
			ИдентификаторСтроки = ДобавитьНайденныеПозицииТоваровСервер(СтрокаРезультата);
			
		ИначеЕсли СтрокаРезультата.Свойство("НомерТелефона") 
			И ПроверитьВозможностьПечатиБумажногоЧека() Тогда
			
			Объект.АдресЭП		= "";
			Объект.Телефон		= СтрокаРезультата.НомерТелефона;
			ДанныеSMSИлиEmail	= СтрокаРезультата.ТелефонСтрокой;
			
			ОтказКлиентаОтСохраненияТелефонаEmail = Не ЗначениеЗаполнено(Объект.ДисконтнаяКарта);
			
			ОбновитьФормуSMSИEmail();
			
		ИначеЕсли СтрокаРезультата.Свойство("АдресЭП")
			И ПроверитьВозможностьПечатиБумажногоЧека() Тогда
			
			Объект.Телефон		= "";
			Объект.АдресЭП		= СтрокаРезультата.АдресЭП;
			ДанныеSMSИлиEmail 	= СтрокаРезультата.АдресЭП;
			
			ОтказКлиентаОтСохраненияТелефонаEmail = Не ЗначениеЗаполнено(Объект.ДисконтнаяКарта);
			
			ОбновитьФормуSMSИEmail();
			
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаРезультата.Свойство("ТекстПредупреждения") Тогда
		СтруктураРезультат.Вставить("ТекстПредупреждения", СтрокаРезультата.ТекстПредупреждения);
	КонецЕсли;
	
	Если СтрокаРезультата.Свойство("НеобходимостьВводаАкцизнойМарки") Тогда
		СтруктураРезультат.Вставить("НеобходимостьВводаАкцизнойМарки", СтрокаРезультата.НеобходимостьВводаАкцизнойМарки);
	КонецЕсли;
	
	Если СтрокаРезультата.Свойство("НеобходимостьВводаКодаМаркировки") Тогда
		СтруктураРезультат.Вставить("НеобходимостьВводаКодаМаркировки", СтрокаРезультата.НеобходимостьВводаКодаМаркировки);
	КонецЕсли;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		СтруктураРезультат.Вставить("АктивизироватьСтроку", ИдентификаторСтроки);
	КонецЕсли;
		
КонецПроцедуры
&НаКлиенте
Функция ОбработатьДанныеИзТСДКлиент(СтруктураПараметров, ДополнительныеПараметры) Экспорт
	
	Результат = ПодключаемоеОборудованиеРТКлиент.ОбработатьДанныеПоНоменклатуреИзТСДКлиент(ЭтотОбъект, СтруктураПараметров);
	
	Если Не ДополнительныеПараметры = Неопределено Тогда 
		Если ДополнительныеПараметры.Свойство("ОбработатьПослеЗагрузки") И ДополнительныеПараметры.ОбработатьПослеЗагрузки Тогда 
			ОбработатьДанныеПослеЗагрузкиИзТСД(СтруктураПараметров, Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	ПодключаемоеОборудованиеРТКлиент.СообщитьТекстПредупреждения(СтруктураПараметров);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныеПозицииТоваровСервер(СтруктураПараметров, ДополнительныеПараметры = Неопределено)
	
	Если Не ДополнительныеПараметры = Неопределено Тогда
		СтруктураПараметров = ДополнительныеПараметры;
		ИдентификаторСтроки = СтруктураПараметров;
	Иначе
		ИдентификаторСтроки = Неопределено;
	КонецЕсли;
	
	ОбработатьБезМаркировки = Ложь;
	Если СтруктураПараметров.Свойство("ОбработатьБезМаркировки")
		И СтруктураПараметров.ОбработатьБезМаркировки Тогда
		ОбработатьБезМаркировки = Истина;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	Если СтруктураПараметров.Свойство("ТекущаяСтрока") Тогда
		ТекущаяСтрока = СтруктураПараметров.ТекущаяСтрока;
		СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	Иначе
		ТекущаяСтрока = ИнициализацияСтрокиТоваров(ЭтотОбъект, СтруктураПараметров);
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	КонецЕсли;
	
	ДобавленаСтрока = Ложь;
	Если СтруктураПараметров.Свойство("ДобавленаСтрока") Тогда
		ДобавленаСтрока = СтруктураПараметров.ДобавленаСтрока;
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
	
	Если ДобавленаСтрока Тогда
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ДополнитьСтруктуруДействиямиПриИзмененииЭлемента(Объект, СтруктураДействий, "Номенклатура");
	
		СтруктураДействий.Вставить("ПроверитьСерийныеНомераПоВладельцу",
			ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПроверкиСерийныхНомеровПоВладельцу(ТекущаяСтрока, Объект.СерийныеНомера));
		Если ИспользоватьАссортимент Тогда
			СтруктураДействий.Вставить("ПроверитьАссортиментСтроки", АссортиментКлиентСервер.ПараметрыПроверкиАссортимента(Объект, Истина));
		КонецЕсли;
		СтруктураДействий.Вставить("ПроверитьЗапретРозничнойПродажи", СкидкиНаценкиСервер.ПараметрыПроверкиЗапретаРозничнойПродажи(Объект));
		
		СтруктураДействий.Вставить("ПроставитьПродавца", Объект.Продавец);
		СтруктураДействий.Вставить("ЗаполнитьСкладПродажи", ОбработкаТабличнойЧастиТоварыСервер.СтруктураЗаполненияСкладаПродажиВСтрокеТЧ(Объект));
		СтруктураДействий.Вставить("ЗаполнитьВидНалога", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровЗаполненияВидаНалога(Объект));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДС(Объект));
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.Штрихкод)
			И ИнтеграцияИСМПКлиентСерверПовтИсп.УчитыватьМРЦ() Тогда
			СтруктураДействий.Вставить("ЗаполнитьЦенуМРЦ");
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат И ЗначениеЗаполнено(Объект.ЧекККМПродажа) Тогда
		СтруктураДействий.Вставить("ПересчитатьСуммуВозвратСУчетомОснования",
			Новый Структура("Основание", Объект.ЧекККМПродажа));
	Иначе
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
		Если ДобавленаСтрока Тогда
			СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи",
				ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина));
			СтруктураДействий.Вставить("ПересчитатьЦенуСУчетомАгентскогоВознаграждения", Новый Структура("Цена", ТекущаяСтрока.Цена));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ЗаказПокупателя) Тогда
			СтруктураПересчетаСкидок = Новый Структура;
			СтруктураПересчетаСкидок.Вставить("Очищать", Ложь);
			СтруктураПересчетаСкидок.Вставить("ПересчитыватьСуммуСкидки", Истина);
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки"        , СтруктураПересчетаСкидок);
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", СтруктураПересчетаСкидок);
		Иначе
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки"        , Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	ДополнитьСтруктуруДействиямиНДС(СтруктураДействий, ВестиУчетМаркируемойПродукцииИСМП);
	ДополнитьСтруктуруДействиямиГосИС(СтруктураДействий, Объект.ОперацияСДенежнымиСредствами, МаркировкаВключена, ОбработатьБезМаркировки);
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТ.ЗавершениеОбработкиСтрокиТоваров(ЭтотОбъект, ТекущаяСтрока, СтруктураДействий);
	
	Если НЕ ИдентификаторСтроки = Неопределено Тогда
		ОбработкаТабличнойЧастиТоварыСервер.ВыделитьАгентскоеВознаграждение(Объект, ЭтотОбъект, СтруктураДействий, ТекущаяСтрока);
	КонецЕсли;
	
	Если Не ДополнительныеПараметры = Неопределено Тогда
		СтруктураПараметров = ИдентификаторСтроки;
		Возврат СтруктураПараметров;
	Иначе
		Возврат ИдентификаторСтроки;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ОповещениеПоискаПоНаименованию(Результат, ДополнительныеПараметры) Экспорт
		
	Если Результат <> Неопределено Тогда
		ПродолжитьОбработатьДанныеПоКодуКлиент(Результат);
		ЗавершитьОбработкуДанныхПоКодуКлиент(Результат);
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается обработкой оповещения после открытия формы вывода сообщений
// либо непосредственно при исполнении процедур расчета скидок,
// если сообщений для вывода нет.
&НаКлиенте
Процедура ОповещениеРасчетСкидокКлиент(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ВыдатьПодаркиНаВыбор
		И ЗначениеЗаполнено(АдресПодарковНаВыбор) Тогда
		
		// &ЗамерПроизводительности
		ОценкаПроизводительностиРТКлиент.НачатьЗамер(
									Истина, "ОбщаяФорма.ПодаркиНаВыбор.Открытие");
		
		ДополнительныеПараметры = Новый Структура;
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВыдатьПодаркиНаВыбор", ЭтотОбъект, ДополнительныеПараметры);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("АдресВоВременномХранилище", АдресПодарковНаВыбор);
		ОткрытьФорму("ОбщаяФорма.ПодаркиНаВыбор",
			ПараметрыФормы,
			ЭтотОбъект,
			,
			,
			,
			ОбработчикОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ОповещениеВыдатьПодаркиНаВыбор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВыдатьПодаркиНаВыбор(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат <> Неопределено Тогда
		ВыдатьПодаркиНаВыборНаСервере(Результат, ДополнительныеПараметры);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Подарки);
	ОбновитьИтоговыеПоказателиКлиентСервер(ЭтотОбъект);
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Скидки (наценки)'"),
		?(Объект.Ссылка.Пустая(), "", ПолучитьНавигационнуюСсылку(Объект.Ссылка)),
		НСтр("ru = 'Скидки (наценки) рассчитаны'"),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

// Процедура вызывается обработкой оповещения после ответа на вопрос
// о необходимости отмены проведения документа
// перед оплатой бонусами.
&НаКлиенте
Процедура ОповещениеОплатаБонусамиВопросОбОтменеПроведения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения)) Тогда
			ОткрытьФормуОплатыБонусами(ДополнительныеПараметры);
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'Не удалось отменить проведение документа'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВопросУдалениеСертификатовОплаты(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.ПогашениеПодарочныхСертификатов.Очистить();
		УдалитьСтрокуОплатыПослеВопроса();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВопросПотеряДанныхОтправленныхВБанк(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		УдалитьСтрокуОплатыПослеВопроса();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВопросУдалениеОплатыКартой(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ТекущаяСтрока = Объект.Оплата.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторТекущейСтроки);
		Если НЕ ТекущаяСтрока = Неопределено Тогда
			// Отмена передачи
			УдалитьОплатуКартой(ТекущаяСтрока);
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВопросУспешностиОплатыНаЭТ(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	РезультатОперации = (РезультатВопроса = КодВозвратаДиалога.Да);
	
	Если НЕ РезультатОперации Тогда
		ТекстСообщения = НСтр("ru = 'Операция отменена'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ЗавершитьОплатуПлатежнойКартойЧерезЭквайринговыйТерминал(РезультатОперации, ДополнительныеПараметры.ПараметрДействия);
	
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВопросУспешностиОтменыОперацииНаЭТ(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	РезультатОперации = (РезультатВопроса = КодВозвратаДиалога.Да);
	
	Если НЕ РезультатОперации Тогда
		ТекстСообщения = НСтр("ru = 'Операция отменена'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ЗавершитьОтменуОплатыПлатежнойКартойЧерезЭквайринговыйТерминал(РезультатОперации, ДополнительныеПараметры.ПараметрДействия);
	
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВопросУспешностиВозвратаОплатыНаЭТ(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	РезультатОперации = (РезультатВопроса = КодВозвратаДиалога.Да);
	
	Если НЕ РезультатОперации Тогда
		ТекстСообщения = НСтр("ru = 'Операция отменена'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ЗавершитьВозвратОплатыПлатежнойКартойЧерезЭквайринговыйТерминал(РезультатОперации, ДополнительныеПараметры.ПараметрДействия);
	
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВопросРассчитатьИОткрытьСкидки(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЭтотОбъект.Модифицированность = Истина;
		РассчитатьСкидкиНаценкиКлиент(ДополнительныеПараметры);
		ОткрытьИнформациюОСкидкахЗавершитьОбработкуВопроса();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьАвтоматическиеСкидкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		УправляемыеСкидки = Результат.УправляемыеСкидки;
		
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
		СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
		СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Ложь);
		СтруктураПараметры.Вставить("УправляемыеСкидки",                УправляемыеСкидки);
		СтруктураПараметры.Вставить("ТолькоСообщенияПослеОформления",   Ложь);
		СтруктураПараметры.Вставить("ПеренестиСкидкиПодаркиВТовары");
		СтруктураПараметры.Вставить("КонтролироватьОстаткиТоваров", 	КонтролироватьОстаткиТоваров);
		
		Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО.
			РабочееМесто = МенеджерОборудованияКлиентПовтИсп.РабочееМестоКлиента();
		Иначе
			РабочееМесто = ""
		КонецЕсли;
		
		СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
		
		Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
		Для Каждого КодСкидки Из Результат.СписокОдноразовыхКодов Цикл
			НоваяСтрока = Объект.ПредъявленныеКодыОднократныхСкидок.Добавить();
			НоваяСтрока.КодСкидки = КодСкидки.Значение;
		КонецЦикла;
		
		РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
		
		Если ВывестиСообщения Тогда
			ДополнительныеПараметры = Новый Структура;
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеРасчетСкидокКлиент", ЭтотОбъект, ДополнительныеПараметры);
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("АдресВоВременномХранилище", АдресПримененныхСкидокВоВременномХранилище);
			ОткрытьФорму("ОбщаяФорма.ФормаВыводаСообщений", ПараметрыФормы, ЭтотОбъект, , , , ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			ОповещениеРасчетСкидокКлиент();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(Результат);
		СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(Результат, "RUB");
		
		ОбновитьИтоговыеПоказателиКлиентСервер(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораНоменклатуры(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		
		ДобавитьНайденныеПозицииТоваров(РезультатОткрытияФормы);
		
	КонецЕсли;
	
	ЗавершитьОбработкуДанныхПоКодуКлиент(ДополнительныеПараметры.СтруктураПараметровКлиента);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораИнформационнойКарты(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		
		Объект.ДисконтнаяКарта = РезультатОткрытияФормы.ИнформационнаяКарта;
		Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
			ДисконтнаяКартаПриИзменении(Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗавершитьОбработкуДанныхПоКодуКлиент(ДополнительныеПараметры.СтруктураПараметровКлиента);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораОплатыЧекаККМ(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	НоваяСтрока = Неопределено;
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		НоваяСтрока = Объект.Оплата.Добавить();
		НоваяСтрока.ВидОплаты = РезультатОткрытияФормы;
		
		Сумма = Объект.Товары.Итог("СуммаВсего") - Объект.Оплата.Итог("Сумма");
		НоваяСтрока.ТипОплаты = ДополнительныеПараметры.ТипОплаты;
		
		Если НоваяСтрока.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ЗачетАванса") Тогда
			Сумма = Мин(Объект.Товары.Итог("СуммаВсего"), СуммаДокументаРасчета);
		Иначе
			Сумма = Объект.Товары.Итог("СуммаВсего") - Объект.Оплата.Итог("Сумма");
		КонецЕсли;
		
		НоваяСтрока.Сумма = ?(Сумма > 0, Сумма, 0);
		
		Элементы.Оплата.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Элементы.Оплата.ТекущийЭлемент = Элементы.ОплатаСумма;
		Элементы.Оплата.ИзменитьСтроку();
		МодифицированыСохраняемыеДанные = Истина;
	КонецЕсли;
	
	ОбновитьИтоговыеПоказателиКлиентСервер(ЭтотОбъект);
	Если ДополнительныеПараметры.Свойство("УстановитьЭквайринговыйТерминалПоУмолчанию") Тогда
		УстановитьЭквайринговыйТерминалПоУмолчанию(НоваяСтрока);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораПогашенияПодарочныхСертификатов(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(РезультатОткрытияФормы) Тогда
		ПолучитьПогашениеВХранилище(РезультатОткрытияФормы);
		ОбновитьИтоговыеПоказателиКлиентСервер(ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуАвторизацииЭТЗавершение(РезультатВыполнения, ПараметрДействия) Экспорт 
	
	ЭтотОбъект.Доступность = Истина;
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru = 'При выполнении операции возникла ошибка:
			|""%ОписаниеОшибки%"".
			|Оплата по карте не была произведена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	Иначе
		ПараметрДействия.НомерКарты          = РезультатВыполнения.НомерКарты;
		ПараметрДействия.НомерСсылкиОперации = РезультатВыполнения.СсылочныйНомер;
		ПараметрДействия.НомерЧекаЭТ         = РезультатВыполнения.НомерЧекаЭТ;
		ПараметрДействия.СтрокаСлипЧека      = РезультатВыполнения.ТекстСлипЧека;
		ЗавершитьОплатуПлатежнойКартойЧерезЭквайринговыйТерминал(Истина, ПараметрДействия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуАвторизацииЭТ(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	ПараметрДействия = ДополнительныеПараметры.ПараметрДействия;
	
	Если ТипЗнч(РезультатОткрытияФормы) = Тип("Структура") Тогда
		
		ПараметрДействия.СуммаОперации = РезультатОткрытияФормы.Сумма;
		
		Если НЕ ПараметрДействия.ИспользоватьБезПодключенияОборудованияЭТ Тогда
			
			ЭтотОбъект.Доступность = Ложь;
				
			ПараметрыОперации = ОборудованиеПлатежныеСистемыКлиентСервер.ПараметрыВыполненияЭквайринговойОперации();
			ПараметрыОперации.ТипТранзакции  = "AuthorizeSales";
			ПараметрыОперации.СуммаОперации  = РезультатОткрытияФормы.Сумма;
			ПараметрыОперации.НомерЧека      = РезультатОткрытияФормы.НомерЧека;
			ПараметрыОперации.СсылочныйНомер = РезультатОткрытияФормы.СсылочныйНомер;
			
			Оповещение = Новый ОписаниеОповещения("ОповещениеОткрытьФормуАвторизацииЭТЗавершение", ЭтотОбъект, ПараметрДействия);
			ОборудованиеПлатежныеСистемыКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(Оповещение, УникальныйИдентификатор, 
				ПараметрДействия.ИдентификаторУстройстваЭТ, ПараметрыОперации, Неопределено, ПараметрДействия.ИдентификаторУстройстваФР);
		
		Иначе
			
			ПараметрДействия.НомерКарты          = РезультатОткрытияФормы.НомерКарты;
			ПараметрДействия.НомерСсылкиОперации = РезультатОткрытияФормы.СсылочныйНомер;
			ПараметрДействия.НомерЧекаЭТ         = РезультатОткрытияФормы.НомерЧека;
			
			ТекстВопроса = НСтр("ru = 'Требуется выполнить операцию оплаты на эквайринговом терминале.'") + Символы.ПС;
			ТекстВопроса = ТекстВопроса + НСтр("ru = 'Сумма операции:'") + " "+ ПараметрДействия.СуммаОперации  + Символы.ПС;
			ТекстВопроса = ТекстВопроса + Символы.ПС;
			ТекстВопроса = ТекстВопроса + НСтр("ru = 'Операция оплаты на эквайринговом терминале прошла успешно?'");
			
			ДополнительныеПараметры = Новый Структура; 
			ДополнительныеПараметры.Вставить("ПараметрДействия", ПараметрДействия);
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросУспешностиОплатыНаЭТ", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВводаПодарочныхСертификатов(Результат, ДополнительныеПараметры) Экспорт
    
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		     Истина, "Документ.ЧекККМ.Форма.ФормаТабличнойЧастиПогашениеПодарочныхСертификатов.Открытие");
             
	Если НЕ ДополнительныеПараметры = Неопределено
		 И ДополнительныеПараметры.Свойство("ВыведеныСообщения") Тогда
		ОповещениеРасчетСкидокКлиент();
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	
	АдресВХранилище = ПоместитьПогашениеВХранилище();
	ПараметрыФормы.Вставить("АдресВременногоХранилища_ПогашениеПодарочныхСертификатов", АдресВХранилище);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораПогашенияПодарочныхСертификатов", ЭтотОбъект);
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Документ.ЧекККМ.Форма.ФормаТабличнойЧастиПогашениеПодарочныхСертификатов", ПараметрыФормы, ЭтотОбъект, , , , ОбработчикОповещения, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОплатыПлатежнойКартой(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ ДополнительныеПараметры = Неопределено
		 И ДополнительныеПараметры.Свойство("ВыведеныСообщения") Тогда
		ОповещениеРасчетСкидокКлиент();
	КонецЕсли;
	
	НоваяСтрока = Неопределено;
	ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта");
	ВидОплатыПлатежнаяКарта = ПолучитьВидОплатыПоТипу(ТипОплаты);
	
	
	Если НЕ ВидОплатыПлатежнаяКарта = Неопределено Тогда
		НоваяСтрока = Объект.Оплата.Добавить();
		НоваяСтрока.ВидОплаты = ВидОплатыПлатежнаяКарта;
		
		Сумма = Объект.Товары.Итог("Сумма") - Объект.Оплата.Итог("Сумма");
		НоваяСтрока.Сумма = ?(Сумма > 0, Сумма, 0);
		
		НоваяСтрока.ТипОплаты = ТипОплаты;
		Элементы.Оплата.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Элементы.Оплата.ТекущийЭлемент = Элементы.ОплатаСумма;
		Элементы.Оплата.ИзменитьСтроку();
		МодифицированыСохраняемыеДанные = Истина;
		
		ОбновитьИтоговыеПоказателиКлиентСервер(ЭтотОбъект);
		УстановитьЭквайринговыйТерминалПоУмолчанию(НоваяСтрока);
	Иначе
		
		Отбор = Новый Структура;
		
		Отбор.Вставить("ИмяПоляОтбораЛевоеЗначение", "ТипОплаты");
		Отбор.Вставить("ПравоеЗначение"            , ТипОплаты);
		Отбор.Вставить("Отрицание"                 , Ложь);
		
		ПараметрыФормы =  Новый Структура("СтруктураПараметрыОтбора", Отбор);
		
		Если ДополнительныеПараметры = Неопределено Тогда
			ДополнительныеПараметры = Новый Структура;
		КонецЕсли;
		
		ДополнительныеПараметры.Вставить("ТипОплаты", ТипОплаты);
		ДополнительныеПараметры.Вставить("УстановитьЭквайринговыйТерминалПоУмолчанию");
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораОплатыЧекаККМ", ЭтотОбъект, ДополнительныеПараметры);
		Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму("Справочник.ВидыОплатЧекаККМ.ФормаВыбора", ПараметрыФормы,,,,, ОбработчикОповещения, Режим); 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОплатыБанковскимКредитом(Результат, ДополнительныеПараметры) Экспорт
	
	
	Если НЕ ДополнительныеПараметры = Неопределено
		 И ДополнительныеПараметры.Свойство("ВыведеныСообщения") Тогда
		ОповещениеРасчетСкидокКлиент();
	КонецЕсли;
	
	ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.БанковскийКредит");
	ВидОплатыБанковскийКредит = ПолучитьВидОплатыПоТипу(ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.БанковскийКредит"));
	
	Если НЕ ВидОплатыБанковскийКредит = Неопределено Тогда
		НоваяСтрока = Объект.Оплата.Добавить();
		НоваяСтрока.ВидОплаты = ВидОплатыБанковскийКредит;
		
		Сумма = Объект.Товары.Итог("Сумма") - Объект.Оплата.Итог("Сумма");
		НоваяСтрока.Сумма = ?(Сумма > 0, Сумма, 0);
		
		НоваяСтрока.ТипОплаты = ТипОплаты;
		Элементы.Оплата.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Элементы.Оплата.ТекущийЭлемент = Элементы.ОплатаСумма;
		Элементы.Оплата.ИзменитьСтроку();
		МодифицированыСохраняемыеДанные = Истина;
		
		ОбновитьИтоговыеПоказателиКлиентСервер(ЭтотОбъект);
		
	Иначе
		
		Отбор = Новый Структура;
		
		Отбор.Вставить("ИмяПоляОтбораЛевоеЗначение", "ТипОплаты");
		Отбор.Вставить("ПравоеЗначение"            , ТипОплаты);
		Отбор.Вставить("Отрицание"                 , Ложь);
		
		ПараметрыФормы =  Новый Структура("СтруктураПараметрыОтбора", Отбор);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТипОплаты", ТипОплаты);
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораОплатыЧекаККМ", ЭтотОбъект, ДополнительныеПараметры);
		Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму("Справочник.ВидыОплатЧекаККМ.ФормаВыбора", ПараметрыФормы,,,,, ОбработчикОповещения, Режим); 
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОплатыЧерезТерминал(Результат, ДополнительныеПараметры) Экспорт
	
	ТекущаяСтрока = ДополнительныеПараметры.ТекущаяСтрока;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
		
		Если НЕ ТекущаяСтрока.ДанныеПереданыВБанк Тогда
			
			Если Объект.ОперацияСДенежнымиСредствами И Объект.Товары.Количество() = 0 Тогда
				РасчетнаяСумма = ТекущаяСтрока.Сумма;
				МаксимальнаяСуммаОплатыБезналичными = РасчетнаяСумма;
				
				Если РасчетнаяСумма = 0 Тогда
					СтрокаСообщения = НСтр("ru = 'Необходимо ввести сумму платежа'");
					ОбщегоНазначенияКлиент.СообщитьПользователю(
						СтрокаСообщения,
						Объект,
						"Оплата[" + (ТекущаяСтрока.НомерСтроки - 1) + "].Сумма");
					Возврат;
				КонецЕсли;
			Иначе
				МаксимальнаяСуммаОплатыБезналичными = СуммаВсего - (СуммаБезналичнойОплаты() + СуммаОплатыПодарочнымиСертификатами()) + ТекущаяСтрока.Сумма;
				
				Если МаксимальнаяСуммаОплатыБезналичными <= 0 Тогда
					
					СтрокаСообщения = НСтр("ru = 'Безналичная оплата не требуется'");
					ОбщегоНазначенияКлиент.СообщитьПользователю(
						СтрокаСообщения,
						Объект,
						"Оплата[" + (ТекущаяСтрока.НомерСтроки - 1) + "].Сумма");
					Возврат;
				КонецЕсли;
				
				
				Если ТекущаяСтрока.Сумма > МаксимальнаяСуммаОплатыБезналичными Тогда
					
					СтрокаСообщения = НСтр("ru = 'Сумма оплаты картой больше возможной суммы безналичной оплаты'");
					ОбщегоНазначенияКлиент.СообщитьПользователю(
						СтрокаСообщения,
						Объект,
						"Оплата[" + (ТекущаяСтрока.НомерСтроки - 1) + "].Сумма");
					Возврат;
				КонецЕсли;
				
				РасчетнаяСумма = ?(ТекущаяСтрока.Сумма = 0 , МаксимальнаяСуммаОплатыБезналичными, ТекущаяСтрока.Сумма);
			КонецЕсли;
			// Передача данных в банк
			ОплатаПлатежнойКартойЧерезЭквайринговыйТерминал(ТекущаяСтрока, РасчетнаяСумма, МаксимальнаяСуммаОплатыБезналичными)
			
		Иначе
			// Вопрос
			ТекстВопроса = НСтр("ru = 'Данные об оплате уже переданы в банк'") + Символы.ПС; 
			ТекстВопроса = ТекстВопроса + НСтр("ru = 'Хотите отменить эту операцию?'"); 
			
			ИдентификаторТекущейСтроки = ТекущаяСтрока.ПолучитьИдентификатор();
			
			ДополнительныеПараметры = Новый Структура; 
			ДополнительныеПараметры.Вставить("ИдентификаторТекущейСтроки", ИдентификаторТекущейСтроки);
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросУдалениеОплатыКартой", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
	Иначе
		
		Если НЕ ТекущаяСтрока.ДанныеПереданыВБанк Тогда
			
			Если ЭтоВозвратДеньВДень() И ЭтоПолныйВозврат() Тогда
				// Передача данных в банк
				УдалитьОплатуКартой(ТекущаяСтрока);
			Иначе
				ВернутьОплатуКартой(ТекущаяСтрока);
			КонецЕсли;
		Иначе
			СтрокаСообщения = НСтр("ru = 'Данные об отмене/возврате оплаты в банк уже переданы.'");
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрокаСообщения,
			Объект,
			"Оплата[" + (ТекущаяСтрока.НомерСтроки - 1) + "]"
			);
			
		КонецЕсли;
			
	КонецЕсли;
	
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеДобавитьОплатуНаличными(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ ДополнительныеПараметры = Неопределено
		 И ДополнительныеПараметры.Свойство("ВыведеныСообщения") Тогда
		ОповещениеРасчетСкидокКлиент();
	КонецЕсли;
	
	НоваяСтрока = Объект.Оплата.Добавить();
	НоваяСтрока.ВидОплаты = ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.Наличные");
	НоваяСтрока.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.Наличные");
	
	НоваяСтрока.Сумма = 0;
	
	Элементы.Оплата.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	Элементы.Оплата.ТекущийЭлемент = Элементы.ОплатаСумма;
	
	Элементы.Оплата.ИзменитьСтроку();
	ОбновитьИтоговыеПоказателиКлиентСервер(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОплатыБонусами(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов = Ложь;
	Если ДополнительныеПараметры <> Неопределено
		И ДополнительныеПараметры.Свойство("УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов") Тогда
		УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов = ДополнительныеПараметры.УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов;
	КонецЕсли;
	Если Результат = Неопределено Тогда
		Если (НЕ УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов)
			И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
			ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
		КонецЕсли;
	Иначе
		ОбработатьОплатуБонусами(Результат, УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов);
		Если УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов Тогда
			Отказ = Ложь;
			ПроверитьСкидки(Отказ, ДополнительныеПараметры, Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУказаниеСерий(ЗначениеВозврата, ПараметрыФормыУказанияСерий) Экспорт
	
	Если ЗначениеВозврата <> Неопределено Тогда
		ПараметрыФормыУказанияСерий.Вставить("ЗначениеВозврата", ЗначениеВозврата);
		ТекущаяСтрокаТоваров = Элементы.Товары.ТекущиеДанные;
		Если ТекущаяСтрокаТоваров = Неопределено Тогда
			ПродажаПодарка = Ложь;
		Иначе
			ПродажаПодарка = ТекущаяСтрокаТоваров.ПродажаПодарка;
		КонецЕсли;
		ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий, ПродажаПодарка);
		Если ПараметрыФормыУказанияСерий.ИмяТЧТовары = "Товары" И НЕ ПродажаПодарка Тогда
			ОбновитьИтоговыеПоказателиКлиентСервер(ЭтотОбъект);
			ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
		КонецЕсли;
			
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект[ПараметрыФормыУказанияСерий.ИмяТЧТовары]);
			
		Если НЕ ПродажаПодарка Тогда
			Элементы[ПараметрыФормыУказанияСерий.ИмяТЧТовары].ЗакончитьРедактированиеСтроки(Ложь);
			Если ПараметрыФормыУказанияСерий.ИмяТЧТовары = "Товары" Тогда
				// Интерфейс ЕГАИС
				ПриИзмененииЭлементаГосИС();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодбораПодарочныхСертификатов(НовыеСерийныеНомера, ДополнительныеПараметры) Экспорт
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПослеВводаНомеровПодарочныхСертификатов(НовыеСерийныеНомера, ДополнительныеПараметры);
	
	ПересчетКоличества = ДополнительныеПараметры.ПересчетКоличества;
	
	Если ПересчетКоличества Тогда
		ПриИзмененииТоварыКоличестваУпаковок();
	КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ВыдатьПодаркиНаВыборНаСервере(Результат, ДополнительныеПараметры) Экспорт
	
	ПереноситьВПродажи = Ложь;
	ТаблицаПодарков = ПолучитьИзВременногоХранилища(Результат);
	Для каждого СтрокаПодарка Из ТаблицаПодарков Цикл
		НоваяСтрока = Объект.Подарки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПодарка);
		УчитыватьПодарокКакПродажу = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПодарка.СкидкаНаценка, "УчитыватьПодарокКакПродажу");
		Если УчитыватьПодарокКакПродажу Тогда
			ПереноситьВПродажи = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ПереноситьВПродажи Тогда
		КоличествоПеренесенных = 0;
		СкидкиНаценкиСерверПереопределяемый.ПеренестиСкидкиПодаркиВТовары(Объект, Объект.ЦенаВключаетНДС, , КоличествоПеренесенных, , Истина);
		Если КоличествоПеренесенных > 0 Тогда
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
			ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
			ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Подарки);
			ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
			СкидкиНаценкиСерверПереопределяемый.ОбновитьОтображениеСкидки(Объект);
		КонецЕсли;
	Иначе
		ПараметрыУказанияСерийПодарков = Новый Структура(ПараметрыУказанияСерий);
		ПараметрыУказанияСерийПодарков.Вставить("ИмяТЧТовары", "Подарки");
		ПараметрыУказанияСерийПодарков.Вставить("ИмяТЧСерии", "СерииПодарков");
		ПараметрыУказанияСерийПодарков.Вставить("ИмяПоляКоличество", "КоличествоУпаковок");
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерийПодарков);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВыбораНоменклатуры(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда
		
		СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
		СтрокаТабличнойЧасти.Номенклатура = РезультатВыбора;
		
		СвернутьСтрокиГИСМ(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика);
		ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
		ТоварыНоменклатураПриИзменении(СтрокаТабличнойЧасти);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытиеФормыВводаEmail(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		
		Если ЗначениеЗаполнено(РезультатОткрытияФормы.Email) Тогда
			Объект.АдресЭП = РезультатОткрытияФормы.Email;
			Объект.Телефон = "";
			ТелефонСтрокой = "";
			ДанныеSMSИлиEmail = Объект.АдресЭП;
			ОтказКлиентаОтСохраненияТелефонаEmail = РезультатОткрытияФормы.ОтказКлиентаОтСохраненияEmail;
		Иначе
			Объект.АдресЭП = "";
			Объект.Телефон = "";
			Телефон = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьФормуSMSИEmail();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытиеФормыВводаТелефона(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		
		Если ЗначениеЗаполнено(РезультатОткрытияФормы.ВведенноеЧисло) Тогда
			Телефон = 0;
			ПодключаемоеОборудованиеРТКлиент.ПреобразоватьТелефонКПользовательскомуВиду(РезультатОткрытияФормы.ВведенноеЧисло, Телефон, ТелефонСтрокой);
			Объект.Телефон = Формат(РезультатОткрытияФормы.ВведенноеЧисло, "ЧЦ=10; ЧДЦ=; ЧГ=0");
			Объект.АдресЭП = "";
			ДанныеSMSИлиEmail = ТелефонСтрокой;
			ОтказКлиентаОтСохраненияТелефонаEmail = РезультатОткрытияФормы.ОтказКлиентаОтСохраненияТелефона;
		Иначе
			Объект.Телефон = 0;
			ТелефонСтрокой = "";
			Объект.АдресЭП = "";
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьФормуSMSИEmail();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеЗачетАванса(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ ДополнительныеПараметры = Неопределено
		 И ДополнительныеПараметры.Свойство("ВыведеныСообщения") Тогда
		ОповещениеРасчетСкидокКлиент();
	КонецЕсли;
	
	ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ЗачетАванса");
	ВидОплатыЗачетАванса = ПолучитьВидОплатыПоТипу(ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ЗачетАванса"));
	
	Если НЕ ВидОплатыЗачетАванса = Неопределено Тогда
		НоваяСтрока = Объект.Оплата.Добавить();
		НоваяСтрока.ВидОплаты = ВидОплатыЗачетАванса;
		
		Сумма = Мин(Объект.Товары.Итог("Сумма"), СуммаДокументаРасчета);
		НоваяСтрока.Сумма = ?(Сумма > 0, Сумма, 0);
		
		НоваяСтрока.ТипОплаты = ТипОплаты;
		Элементы.Оплата.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Элементы.Оплата.ТекущийЭлемент = Элементы.ОплатаСумма;
		Элементы.Оплата.ИзменитьСтроку();
		МодифицированыСохраняемыеДанные = Истина;
		
		ОбновитьИтоговыеПоказателиКлиентСервер(ЭтотОбъект);
		
	Иначе
		
		Отбор = Новый Структура;
		
		Отбор.Вставить("ИмяПоляОтбораЛевоеЗначение", "ТипОплаты");
		Отбор.Вставить("ПравоеЗначение"            , ТипОплаты);
		Отбор.Вставить("Отрицание"                 , Ложь);
		
		ПараметрыФормы =  Новый Структура("СтруктураПараметрыОтбора", Отбор);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТипОплаты", ТипОплаты);
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораОплатыЧекаККМ", ЭтотОбъект, ДополнительныеПараметры);
		Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму("Справочник.ВидыОплатЧекаККМ.ФормаВыбора", ПараметрыФормы,,,,, ОбработчикОповещения, Режим); 
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОплатыСРассрочку(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ ДополнительныеПараметры = Неопределено
		 И ДополнительныеПараметры.Свойство("ВыведеныСообщения") Тогда
		ОповещениеРасчетСкидокКлиент();
	КонецЕсли;
	
	ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ВРассрочку");
	ВидОплатыВРассрочку = ПолучитьВидОплатыПоТипу(ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ВРассрочку"));
	
	Если НЕ ВидОплатыВРассрочку = Неопределено Тогда
		НоваяСтрока = Объект.Оплата.Добавить();
		НоваяСтрока.ВидОплаты = ВидОплатыВРассрочку;
		
		Сумма = Объект.Товары.Итог("Сумма") - Объект.Оплата.Итог("Сумма");
		НоваяСтрока.Сумма = ?(Сумма > 0, Сумма, 0);
		
		НоваяСтрока.ТипОплаты = ТипОплаты;
		Элементы.Оплата.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Элементы.Оплата.ТекущийЭлемент = Элементы.ОплатаСумма;
		Элементы.Оплата.ИзменитьСтроку();
		МодифицированыСохраняемыеДанные = Истина;
		
		ОбновитьИтоговыеПоказателиКлиентСервер(ЭтотОбъект);
		
	Иначе
		
		Отбор = Новый Структура;
		
		Отбор.Вставить("ИмяПоляОтбораЛевоеЗначение", "ТипОплаты");
		Отбор.Вставить("ПравоеЗначение"            , ТипОплаты);
		Отбор.Вставить("Отрицание"                 , Ложь);
		
		ПараметрыФормы =  Новый Структура("СтруктураПараметрыОтбора", Отбор);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТипОплаты", ТипОплаты);
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораОплатыЧекаККМ", ЭтотОбъект, ДополнительныеПараметры);
		Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму("Справочник.ВидыОплатЧекаККМ.ФормаВыбора", ПараметрыФормы,,,,, ОбработчикОповещения, Режим); 
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПодтвержденияВозвратаПродукцииИСМПБезМарок(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		
		Если НЕ ВРЕГ(РезультатОткрытияФормы) = "ДА" Тогда
			Возврат;
		КонецЕсли;
		
		ЭтоВозвратПродукцииИСМПБезМарки = Истина;
		
		ПробитьЧекНаКлиентеПродолжение();
		
	КонецЕсли;
	
КонецПроцедуры

// Обработка выборка характеристики, после обработки ШК.
//
// Параметры:
//  Результат - Структура - структура с повторяющимися штрихкодами.
//  Параметры - Структура - структура дополнительных параметров.
//
&НаКлиенте
Процедура ОбработатьСериюНоменклатурыПослеВыбораХарактеристики(Результат, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Параметры.Вставить("Характеристика", Результат);
		ПодключаемоеОборудованиеРТКлиент.ЗаполнениеСерииНоменклатуры(ЭтотОбъект, Параметры);
		ПодключаемоеОборудованиеРТКлиент.ЗаполнениеНоменклатурыИХарактеристики(ЭтотОбъект, Параметры);
		ПодключаемоеОборудованиеРТКлиент.ЗапуститьОбработкуДействийСерий(ЭтотОбъект, Параметры);
	КонецЕсли;
	
КонецПроцедуры

//Обработать изменение строки
&НаКлиенте
Процедура ОбработатьИзменениеСтроки(ИдентификаторСтроки, Действие) Экспорт
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если Действие = "ИзмененоКоличество" Тогда
		ПриИзмененииТоварыКоличестваУпаковок(ТекущаяСтрока);
	ИначеЕсли Действие = "ИзмененыНоменклатураХарактеристика" Тогда
		ПриИзмененииТоварыНоменклатура(ТекущаяСтрока);
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ИдентификаторСтроки, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьСтатусСерийИПодарочныхСертификатов(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОплатыПлатежнойСистемой(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ ДополнительныеПараметры = Неопределено
		 И ДополнительныеПараметры.Свойство("ВыведеныСообщения") Тогда
		ОповещениеРасчетСкидокКлиент();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстВопроса = НСтр("ru = 'Для проведения оплаты QR-кодом необходимо записать документ. Продолжить?'");
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ОплатаПлатежнойСистемойПослеЗаписиДокумента", ЭтотОбъект),
			ТекстВопроса,
			РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	
	ОплатаПлатежнойСистемойФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПлатежнойСистемойПослеЗаписиДокумента(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Проведен Тогда
		УспешнаяЗапись = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения));
	Иначе
		УспешнаяЗапись = Записать();
	КонецЕсли;
		
	Если УспешнаяЗапись Тогда
		ОплатаПлатежнойСистемойФрагмент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПлатежнойСистемойФрагмент()
	
	Сумма = Объект.Товары.Итог("Сумма");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИтогПоОрганизации", 	Сумма);
	ПараметрыФормы.Вставить("ВидОперации", 			Объект.ВидОперации);
	ПараметрыФормы.Вставить("Организация", 			Объект.Организация);
	ПараметрыФормы.Вставить("Магазин", 				Объект.Магазин);
	ПараметрыФормы.Вставить("КассаККМ", 			Объект.КассаККМ);
	ПараметрыФормы.Вставить("ЧекККМПродажа", 		Объект.ЧекККМПродажа);
	ПараметрыФормы.Вставить("ДисконтнаяКарта", 		Объект.ДисконтнаяКарта);
	ПараметрыФормы.Вставить("Телефон", 				Объект.Телефон);
	ПараметрыФормы.Вставить("Email", 				Объект.АдресЭП);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
		ПараметрыФормы.Вставить("ДокументОплаты", 		Объект.Ссылка);
	Иначе
		ПараметрыФормы.Вставить("ДокументОплаты", 		Объект.ЧекККМПродажа);
		ПараметрыФормы.Вставить("ДокументВозврата", 	Объект.Ссылка);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("Товары", 					 Объект.Товары);
	ПараметрыФормы.Вставить("Кассир", 					 Объект.Продавец);
	ПараметрыФормы.Вставить("НомерДокумента", 			 Объект.Номер);
	ПараметрыФормы.Вставить("Оплачивается", 			 Объект.Оплачивается);
	
	ПараметрыФормы.Вставить("ВозможностьЭлектронногоПлатежа", Ложь); // отключить функцию ввода почты / номера телефона в форме оплаты. вводится в чеке
	
	Если ПараметрыФормы.ИтогПоОрганизации <> 0 Тогда
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОплатаПлатежнойСистемойЗавершение", ЭтотОбъект);
		Режим 				 = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		
		ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаОплатыПлатежнойСистемой",
					ПараметрыФормы, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим); 
					
	КонецЕсли;
				
КонецПроцедуры
				
&НаКлиенте
Процедура ОплатаПлатежнойСистемойЗавершение(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если РезультатОткрытияФормы = Неопределено 
		ИЛИ РезультатОткрытияФормы = "ОтложитьЧек" Тогда
		
		Если РезультатОткрытияФормы = "ОтложитьЧек" Тогда
			Объект.Оплачивается = Истина;
			Записать();
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	ВозвратПоОснованию = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат")
						И ЗначениеЗаполнено(Объект.ЧекККМПродажа);
	
	Если ВозвратПоОснованию Тогда
		Объект.Оплата.Очистить();	
	КонецЕсли;						
	
	ОплатаПлатежнойСистемойСервер(РезультатОткрытияФормы);
	
	Если Объект.Оплата.Количество() Тогда
	
		МодифицированыСохраняемыеДанные = Истина;
		
		ОбновитьФормуSMSИEmail();
		ОбновитьИтоговыеПоказателиКлиентСервер(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОплатаПлатежнойСистемойСервер(РезультатОткрытияФормы)
	
	ТаблицаОплаты = ПолучитьИзВременногоХранилища(РезультатОткрытияФормы.АдресТаблицыОплата);
	
	НоваяСтрока   = Неопределено;
	ТипОплаты 	  = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПлатежнаяСистема");
	
	Для Каждого СтрокаОплаты ИЗ ТаблицаОплаты Цикл
		
		НоваяСтрока = Объект.Оплата.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОплаты);
		
		НоваяСтрока.ТипОплаты = ТипОплаты;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ДополнительныеКолонкиНоменклатуры = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ДополнительнаяКолонкаПриОтображенииНоменклатуры");
	
	ПодключаемоеОборудованиеРТ.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	ПараметрыСобытийПО = Новый Структура;
	ПараметрыСобытийПО.Вставить("РегистрацияНовойКарты", Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа);
	ПараметрыСобытийПО.Вставить("ПоискАкцизнойМарки", Истина);
	
	ИспользоватьАвтоматическиеСкидкиВПродажах = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
	ИспользоватьАгентскиеПлатежиИРазделениеВыручки = ПолучитьФункциональнуюОпцию("ИспользоватьАгентскиеПлатежиИРазделениеВыручки");
	ИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьРасчетыСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетыСКлиентами");
	
	Элементы.СкидкиХарактеристика.Видимость = ИспользоватьХарактеристики;
	Элементы.БонусныеБаллыКНачислениюХарактеристика.Видимость = ИспользоватьХарактеристики;
	
	Элементы.ОплатаЗачетАванса.Видимость = ИспользоватьРасчетыСКлиентами;
	Элементы.ОплатаОплатитьВРассрочку.Видимость = ИспользоватьРасчетыСКлиентами;
	
	ИспользоватьБонусныеПрограммыЛояльности = ПолучитьФункциональнуюОпцию("ИспользоватьБонусныеПрограммыЛояльности");
	ИспользоватьКомиссионнуюТорговлю = ПолучитьФункциональнуюОпцию("ИспользоватьКомиссионнуюТорговлю");
	Если ИспользоватьАвтоматическиеСкидкиВПродажах Тогда
		АвтоматическийРасчетСкидок =
			УправлениеПользователямиВызовСервера.ПолучитьБулевоЗначениеПраваПользователя(
				ПланыВидовХарактеристик.ПраваПользователей.АвтоматическийРасчетСкидокПриРедактированииДокументаПродажи,
				Ложь);
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		Элементы.СкидкиКоманднаяПанель.Доступность = Ложь;
		Элементы.ГруппаТоварыСкидкиНаценки.Доступность = Ложь;
		ЭтоВозврат = Истина;
		ЭтоВозвратДеньВДень = ЭтоВозвратДеньВДень(); // для условного оформления
		ЭтоПолныйВозврат = ЭтоПолныйВозврат();
		Элементы.ГруппаПечать.Видимость = Истина;
	КонецЕсли;
	
	ОбщегоНазначенияРТ.ЗаполнитьШапкуДокумента(Объект,КартинкаСостоянияДокумента,Элементы.КартинкаСостоянияДокумента.Подсказка,РазрешеноПроведение);
	
	ИспользуетсяСистемаВзаимодействия = МенеджерОборудованияВызовСервера.ДоступноРаспределеннаяФискализация()
		И СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована();
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда // Это новый 
			
			Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа;
			
		КонецЕсли;
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда // Это новый 
			
			Объект.АналитикаХозяйственнойОперации = Справочники.АналитикаХозяйственныхОпераций.РеализацияТоваров;
			
		КонецЕсли;

		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипНоменклатурыВТЧСервер(Объект.Товары);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.Товары);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипыОплатВТЧСервер(Объект);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНДСПоСтрочно(Объект.Товары);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьВидНалогаВТЧСервер(Объект.Товары, 
				ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровЗаполненияВидаНалога(Объект));
		
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ЧекККМ.ПараметрыУказанияСерий(Объект));
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Подарки);
		
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Подарки);
		СкидкиНаценкиСерверПереопределяемый.ОбновитьОтображениеСкидки(Объект);
		БонусныеБаллыСервер.ОбновитьОтображениеБонусов(Объект);
		
		ОрганизацияИспользовалаЕНВД();
		ПроверитьВозможностьРазныхНалоговыхРежимовСкладов();
		ЗаполнитьСистемуНалогообложения();
		
		Если Элементы.Найти("ТоварыФискальныеДанные") <> Неопределено Тогда
			Элементы.ТоварыФискальныеДанные.Видимость = ИспользоватьКомиссионнуюТорговлю И Объект.НомерЧекаККМ <> 0;
		КонецЕсли;
		
	Иначе
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ЧекККМ.ПараметрыУказанияСерий(Объект));
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыСервер.УправлениеЭлементамиАгентскогоВознаграждения(ЭтотОбъект, Объект);
	
	ОбновитьИтоговыеПоказателиКлиентСервер(ЭтотОбъект);
	
	ТолькоПросмотр = ТолькоПросмотр 
	             ИЛИ Объект.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Пробитый
	             ИЛИ Объект.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Архивный
	             ИЛИ Объект.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Аннулированный;
	
	УстановитьДоступностьКнопокПроведенияСервер();
	
	РабочееМесто = Объект.КассаККМ.РабочееМесто;
	
	НастроитьФормуПоДополнительнымПравам(Ложь);
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипыОплатВТЧСервер(Объект);
	
	Элементы.ОплатаЗаполнитьОплатыПоДокументуПродажи.Доступность = ЗначениеЗаполнено(Объект.ЧекККМПродажа);
	
	ИспользоватьАссортимент = АссортиментСервер.ПолучитьФункциональнуюОпциюКонтроляАссортимента(Объект.Магазин);
	
	КонтролироватьОстаткиТоваров = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.КонтролироватьОстатокПриПроведении, Ложь);
	
	ПродажаПоЗаказу = ЗначениеЗаполнено(Объект.ЗаказПокупателя);
	
	УстановитьКомандыВидовОплаты();
	
	УстановитьДоступностьКомандБуфераОбмена();
	
	ЗаполнитьСтавкиНДС();
	
	УстановитьВидимостьСтатусыСерийИПодарочныхСертификатов();
	
	Элементы.ГруппаБонусныеБаллы.Видимость = ИспользоватьБонусныеПрограммыЛояльности;
	Элементы.ТоварыСуммаСкидкиОплатыБонусом.Видимость = ИспользоватьБонусныеПрограммыЛояльности;
	Элементы.ОплатаГруппаБонусы.Видимость = ИспользоватьБонусныеПрограммыЛояльности;
	
	Элементы.ПросмотрНакоплений.Доступность = ЗначениеЗаполнено(Объект.ДисконтнаяКарта);
	
	РеквизитыКассы = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.КассаККМ, "РабочееМесто, ПодключаемоеОборудование, ПодключаемоеОборудование.ТипОборудования, ЭлектронныйЧекEmailПередаютсяПрограммой1С, ЭлектронныйЧекSMSПередаютсяПрограммой1С");
	
	ПараметрыКассыККМ = ЗначениеНастроекВызовСервера.ПараметрыКассыККМ(Объект.КассаККМ);
	
	РабочееМесто = РеквизитыКассы.РабочееМесто;
	ТипОборудованияКассыККМ = РеквизитыКассы.ПодключаемоеОборудованиеТипОборудования;
	
	ВозможностьЭлектронногоПлатежа = ПодключаемоеОборудованиеРТ.ВозможностьЭлектронногоПлатежа(РеквизитыКассы.ПодключаемоеОборудование);
	Если ВозможностьЭлектронногоПлатежа Тогда
		ПередачаEmailЧерезПрограмму = РеквизитыКассы.ЭлектронныйЧекEmailПередаютсяПрограммой1С;
		ПередачаSMSЧерезПрограмму  = РеквизитыКассы.ЭлектронныйЧекSMSПередаютсяПрограммой1С;
	КонецЕсли;
	
	Элементы.КомандаEmail.Видимость = ВозможностьЭлектронногоПлатежа;
	Элементы.КомандаSMS.Видимость   = ВозможностьЭлектронногоПлатежа;
	Элементы.ГруппаДанныеSMSИEmail.Видимость   = ВозможностьЭлектронногоПлатежа;
	
	ЭтоLinuxСервер = ОбщегоНазначенияРТВызовСервера.ЭтоLinuxСервер();
	
	Если ЗначениеЗаполнено(Объект.ФизЛицо) Тогда
		ЗаполнениеФИО();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ОтчетОРозничныхПродажах) Тогда
		Элементы.ОткрытьОтчетОРозничныхПродажах.Видимость = Истина;
		СтруктураОРП = Новый Структура;
		СтруктураОРП.Вставить("Дата");
		СтруктураОРП.Вставить("Номер");
		РеквизитыОРП = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ОтчетОРозничныхПродажах, СтруктураОРП);
		ЗаголовокОРП = НСтр("ru = 'Отчет о продажах №%1 от %2'");
		ЗаголовокОРП = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ЗаголовокОРП,
							РеквизитыОРП.Номер,
							РеквизитыОРП.Дата);
		Элементы.ОткрытьОтчетОРозничныхПродажах.Заголовок = ЗаголовокОРП;
	Иначе
		Элементы.ОткрытьОтчетОРозничныхПродажах.Видимость = Ложь;
	КонецЕсли;
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);
	
	УстановитьВидимостьДоступностьРасчетыСКлиентами();
	
	Элементы.ЧекККМПродажа.Видимость = Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат;
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.Контрагент = Константы.КонтрагентРозничныйПокупатель.Получить();
	КонецЕсли;
	
	Элементы.ФормаСоздатьДокументЧекККМ.Видимость = ПравоДоступа("Добавление", Метаданные.Документы.ЧекККМ);
	
	ЧекВОчереди = ЧекНаходитсяВОчереди();
	Если Не ЧекВОчереди И Не ЗначениеЗаполнено(Объект.ИдентификаторЧекаВОчереди) Тогда
		Идентификатор = Новый УникальныйИдентификатор;
		Объект.ИдентификаторЧекаВОчереди = XMLСтрока(Идентификатор);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ОбщаяКомандаФискальныеОперации", "Видимость", Объект.Проведен И ТолькоПросмотр);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ОчередьЧеков", "Видимость", ЧекВОчереди);	
		
	УстановитьАвтоОтметкуТЧТовары();
	
	// Интерфейс ГосИС
	ВестиУчетАлкогольнойПродукции     = ИнтеграцияЕГАИСРТ.НужноРаботатьСЕГАИС(Объект.Дата);
	ВестиУчетМаркируемойПродукцииИСМП = ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП");
	ВестиУчетПродукцииГИСМ            = ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ");
	
	МаркировкаВключена = ВестиУчетАлкогольнойПродукции Или ВестиУчетМаркируемойПродукцииИСМП;
	
	СобытияФормРТ.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	ПерезаполнитьПризнакиМаркировки();
	
	АвтоматическийРасчетСкидок = АвтоматическийРасчетСкидок И НЕ ПродажаПоЗаказу И НЕ ЭтоВозврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПредыдущиеЗначения = Новый Структура(
		"Магазин,
		|Контрагент,
		|Организация,
		|КассаККМ");
	ЗаполнитьЗначенияСвойств(ПредыдущиеЗначения, Объект);
	
	УправлениеЭлементамиЗаказПокупателя();
	
	ЗначениеПеречислениеВидОперацииПродажа = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа");
	
	ЗначениеПеречислениеВидОперацииВозврат = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат");
	
	ЗначениеСправочникиВидыОплатЧекаККМОплатаПодарочнымСертификатом = ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом");
	
	УстановитьДоступностьПоВидуОперацииКлиент();
	УстановитьПараметрыВыбораЧекаККМПродажиКлиент();
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода, СчитывательМагнитныхКарт");
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПредставитьТелефонИEmailКлиент();
	
	Если ЗначениеЗаполнено(Объект.КассаККМ) И НомерДокументаКассыККМ[Объект.КассаККМ] = Неопределено Тогда
		ОбщегоНазначенияРТКлиент.ЗаполнитьНомерДокументаКассыККМ(Объект.КассаККМ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваров.Форма.Форма" Тогда
		
		СтрокиИзменены = ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТабличнойЧасти);
		Если СтрокиИзменены Тогда
			ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
		КонецЕсли;
		
		ПроверитьСистемуНалогообложения();
		ПерезаполнитьПризнакиМаркировки();
		УстановитьДоступностьВидаОперации();
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		
		Окно.Активизировать();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КэшированныеЗначения",    КэшированныеЗначения);
	ДополнительныеПараметры.Вставить("СтандартнаяОбработка",    Истина);
	ДополнительныеПараметры.Вставить("ТребуетсяСерверныйВызов", Ложь);
	СобытияФормИСКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник, ДополнительныеПараметры);
	КэшированныеЗначения = ДополнительныеПараметры.КэшированныеЗначения;
	Если ДополнительныеПараметры.ТребуетсяСерверныйВызов Тогда
		ОбработкаОповещенияНаСервере(ИмяСобытия, Параметр, Источник);
		ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
		УстановитьДоступностьВидаОперации();
	КонецЕсли;
	
	Если Источник = "ФормаОпросаВладельцаКарт" Тогда
		ПриИзмененииДисконтнаяКартаСервер();
	КонецЕсли;
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Или ИмяСобытия = "ВставкаСтрокИзБуфераОбмена" Тогда
		УстановитьДоступностьКомандБуфераОбмена();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ВводДоступен() Тогда
		Если (Событие = "Штрихкод" Или Событие = "ПолученШтрихкод") И ВозможностьВводаПоШК() Тогда
			ДанныеСоСканераСтруктура = СобытияФормИСКлиент.ВнешнееСобытиеПреобразоватьДанныеСоСканераВСтруктуру(
				ЭтотОбъект, 
				Источник, 
				Событие, 
				Данные);
				
			Если ДанныеСоСканераСтруктура = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			ОбработатьКодМаркировки(ДанныеСоСканераСтруктура);
			
		Иначе
			ПодключаемоеОборудованиеРТКлиент.ВнешнееСобытиеОборудования(ЭтотОбъект, Источник, Событие, Данные);
		КонецЕсли;
	
	Иначе
		
		//Для тех форм, которые открываются из документа, но не используют внешнее событие для обработки штрихкодов.
		//Например ПоискНоменклатурыПоШтрихкоду.
		Если (Событие = "Штрихкод" Или Событие = "ПолученШтрихкод") Тогда
			ОписаниеСобытия = Новый Структура();
			ОписаниеОшибки  = "";
			
			ОписаниеСобытия.Вставить("Источник", Источник);
			ОписаниеСобытия.Вставить("Событие",  Событие);
			ОписаниеСобытия.Вставить("Данные",   Данные);
			
			// Передать на обработку данные
			Результат = МенеджерОборудованияКлиент.ОбработатьСобытиеОтУстройства(ОписаниеСобытия, ОписаниеОшибки);
			Если Не Результат Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='При обработке внешнего события от устройства произошла ошибка.'")
				+ Символы.ПС + ОписаниеОшибки);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Подарки);
	СтруктураМарки = Новый Структура;
	СтруктураМарки.Вставить("Дата", Объект.Дата);
	СтруктураМарки.Вставить("ОперацияСДенежнымиСредствами", Объект.ОперацияСДенежнымиСредствами);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНеобходимостьВводаАкцизнойМарки(Объект.Товары, СтруктураМарки);
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипНоменклатурыВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипыОплатВТЧСервер(Объект);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьВидНалогаВТЧСервер(Объект.Товары, 
		ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровЗаполненияВидаНалога(Объект));
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНДСПоСтрочно(Объект.Товары);
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, Элементы.КартинкаСостоянияДокумента.Подсказка, КартинкаСостоянияДокумента, РазрешеноПроведение);
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
																"ФормаПробитьЧек",
																"Доступность", 
																Объект.Проведен И НЕ ТолькоПросмотр);
	
	ОбновитьИтоговыеПоказателиКлиентСервер(ЭтотОбъект);
	СкидкиНаценкиСерверПереопределяемый.ОбновитьОтображениеСкидки(Объект);
	БонусныеБаллыСервер.ОбновитьОтображениеБонусов(Объект);
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	ИспользоватьАссортимент = АссортиментСервер.ПолучитьФункциональнуюОпциюКонтроляАссортимента(Объект.Магазин);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Подарки);
	
	Элементы.ПросмотрНакоплений.Доступность = ЗначениеЗаполнено(Объект.ДисконтнаяКарта);
	
	МассивОплатБонусами = Объект.Оплата.НайтиСтроки(Новый Структура("ВидОплаты", Справочники.ВидыОплатЧекаККМ.ОплатаБонусамиКакСкидкой));
	Если МассивОплатБонусами.Количество() > 0 Тогда
		ЕстьОплатаБонусами = Истина;
	КонецЕсли;
	
	ВозможностьЭлектронногоПлатежа = ПодключаемоеОборудованиеРТ.ВозможностьЭлектронногоПлатежа(Объект.КассаККМ.ПодключаемоеОборудование);
	Если ВозможностьЭлектронногоПлатежа Тогда
		ПередачаEmailЧерезПрограмму = Объект.КассаККМ.ЭлектронныйЧекEmailПередаютсяПрограммой1С;
		ПередачаSMSЧерезПрограмму  = Объект.КассаККМ.ЭлектронныйЧекSMSПередаютсяПрограммой1С;
	КонецЕсли;
	
	Элементы.КомандаEmail.Видимость = ВозможностьЭлектронногоПлатежа;
	Элементы.КомандаSMS.Видимость   = ВозможностьЭлектронногоПлатежа;
	Элементы.ГруппаДанныеSMSИEmail.Видимость   = ВозможностьЭлектронногоПлатежа;
	
	ОрганизацияИспользовалаЕНВД();
	ПроверитьВозможностьРазныхНалоговыхРежимовСкладов();
	ВидимостьСистемыНалогообложения();
	
	Если Элементы.Найти("ТоварыФискальныеДанные") <> Неопределено Тогда
		Элементы.ТоварыФискальныеДанные.Видимость = ИспользоватьКомиссионнуюТорговлю И Объект.НомерЧекаККМ <> 0;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// &ЗамерПроизводительности 
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, 
											"Документ.ЧекККМ.ФормаДокумента.Запись",
															Ложь);
	
	ПараметрыЗаписи.Вставить("Замер", Замер);
	// Если документ проводится, рассчитаем скидки.
	
	ПередЗаписьюКлиент(Отказ, ПараметрыЗаписи.РежимЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Подарки);
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипНоменклатурыВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипыОплатВТЧСервер(Объект);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНДСПоСтрочно(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьВидНалогаВТЧСервер(Объект.Товары, 
	ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровЗаполненияВидаНалога(Объект));
	
	ОбработкаТабличнойЧастиТоварыСервер.УправлениеЭлементамиАгентскогоВознаграждения(ЭтотОбъект, Объект);
	
	ОбновитьИтоговыеПоказателиКлиентСервер(ЭтотОбъект);
	СкидкиНаценкиСерверПереопределяемый.ОбновитьОтображениеСкидки(Объект);
	БонусныеБаллыСервер.ОбновитьОтображениеБонусов(Объект);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Подарки);
	
	Если НЕ ОтказКлиентаОтСохраненияТелефонаEmail Тогда
		Если ЗначениеЗаполнено(Объект.Телефон) Тогда
			ПодключаемоеОборудованиеРТ.ЗаписатьТелефонВИнформационнуюКарту(Объект.ДисконтнаяКарта, Объект.Телефон);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.АдресЭП) Тогда
			ПодключаемоеОборудованиеРТ.ЗаписатьEmailВИнформационнуюКарту(Объект.ДисконтнаяКарта, Объект.АдресЭП);
		КонецЕсли;
	КонецЕсли;
	
	СобытияФормИС.ПослеЗаписиНаСервере(ЭтотОбъект);
	ПерезаполнитьПризнакиМаркировки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, Элементы.КартинкаСостоянияДокумента.Подсказка, КартинкаСостоянияДокумента, РазрешеноПроведение);
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
																"ФормаПробитьЧек",
																"Доступность", 
																Объект.Проведен И НЕ ТолькоПросмотр);
	
	Если ЗначениеЗаполнено(Объект.ЗаказПокупателя) Тогда
		Оповестить("ЗаказПокупателя_Состояния", Объект.ЗаказПокупателя);
	КонецЕсли;
	
	// &ЗамерПроизводительности 
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(ПараметрыЗаписи.Замер);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СобытияФормРТКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЧекККМПродажаПриИзменении(Элемент)
	
	ПриИзмененииЧекККМПродажаСервер();
	Если АвтоматическийРасчетСкидок Тогда
		ПодготовитьСкидкиИОплатуБонусамиКСторнированию();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КассаККМПриИзменении(Элемент)
	
	УстановитьПараметрыВыбораЧекаККМПродажиКлиент();
	
	ПриИзмененииКассаККМНаСервере(НомерДокументаКассыККМ, ПорядковыйНомерПродажи);
	
	ПроверитьСистемуНалогообложения(, Ложь);
	
	Если НЕ ПродажаПоЗаказу
		 И АвтоматическийРасчетСкидок
		 И НЕ ПропуститьАвтоматическийРасчетСкидок
		 И НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
		
		Если ВывестиСообщения Тогда
			
			ДополнительныеПараметры = Новый Структура;
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеРасчетСкидокКлиент", ЭтотОбъект, ДополнительныеПараметры);
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("АдресВоВременномХранилище", АдресПримененныхСкидокВоВременномХранилище);
			ОткрытьФорму("ОбщаяФорма.ФормаВыводаСообщений", ПараметрыФормы, ЭтотОбъект, , , , ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		Иначе
			ОповещениеРасчетСкидокКлиент();
		КонецЕсли;
		
	КонецЕсли;
	
	ПриИзмененииКлючевыхРеквизитов("КассаККМ", Объект.КассаККМ);

КонецПроцедуры

&НаКлиенте
Процедура ДисконтнаяКартаПриИзменении(Элемент)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
		
		ИнформационныеКартыКлиент.ПровестиОпросВладельца(Объект.ДисконтнаяКарта, ОбщегоНазначенияКлиент.ДатаСеанса());
		
	КонецЕсли;
	
	ПриИзмененииДисконтнаяКартаСервер();
	Если Элемент <> Неопределено Тогда
		ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
	КонецЕсли;
	
	ОбновитьФормуSMSИEmail();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Объект.ЧекККМПродажа = "";
	Объект.ДокументРасчета = "";
	
	ВидОперацииПриИзмененииСервер();
	
	УправлениеЭлементамиЗаказПокупателя();
	
	ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
	
	УстановитьДоступностьПоВидуОперацииКлиент();
	
	НастроитьФормуПоДополнительнымПравам(Истина);
	
	ЭтоВозвратДеньВДень = ЭтоВозвратДеньВДень();
	ЭтоПолныйВозврат = ЭтоПолныйВозврат();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьКартинкуДляКомментария", 0.5, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииНаСервере();
	
	Если Объект.Товары.Количество() > 0 Тогда 
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", 
									ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДС(Объект));
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", 
									ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПересчетаСуммыНДСВТЧ(Объект));
									
		ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, , СтруктураДействий, Неопределено);
		ОбработкаТабличнойЧастиТоварыКлиент.ВыделитьАгентскоеВознаграждение(Объект, ЭтотОбъект);
		
		ОбновитьИтоговыеПоказателиКлиентСервер(ЭтотОбъект);
	
	КонецЕсли;
	
	ПроверитьСистемуНалогообложения();
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	ОрганизацияИспользовалаЕНВД();
	ПроверитьВозможностьРазныхНалоговыхРежимовСкладов();
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьВидНалогаВТЧСервер(Объект.Товары, 
		ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровЗаполненияВидаНалога(Объект));
	
	ЗаполнитьСистемуНалогообложения();
	ЗаполнитьСтавкиНДС();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументРасчетаПриИзменении(Элемент)
	ДокументРасчетаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОперацияСДенежнымиСредствамиПриИзменении(Элемент)
	
	Если Объект.ОперацияСДенежнымиСредствами Тогда
		
		Объект.Серии.Очистить();
		Объект.АкцизныеМарки.Очистить();
		Объект.СерийныеНомера.Очистить();
		
	КонецЕсли;
	
	ВидимостьОплатРасчетыСКлиентами();
	ПерезаполнитьПризнакиМаркировки();
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикаХозяйственнойОперацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
	          Истина, "Справочник.АналитикаХозяйственныхОпераций.Форма.ФормаВыбора.Открытие");
              
КонецПроцедуры

&НаКлиенте
Процедура КассаККМНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		     Истина, "Справочник.КассыККМ.Форма.ФормаВыбора.Открытие");
             
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
								Истина, "Справочник.Контрагенты.Форма.ФормаВыбора.Открытие");
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	ПриИзмененииКлючевыхРеквизитов("Контрагент", Объект.Контрагент);
КонецПроцедуры

&НаКлиенте
Процедура ДисконтнаяКартаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ДисконтнаяКартаОбработкаВыбораНаСервере(ВыбранноеЗначение);
	УправлениеЭлементамиЗаказПокупателя();
КонецПроцедуры

&НаСервере
Процедура ДисконтнаяКартаОбработкаВыбораНаСервере(ВыбранноеЗначение)
	ОбновитьЗаказ = Ложь;
	Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение) ИЛИ НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ОбновитьЗаказ = Истина;
	Иначе
		Если НЕ Объект.Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение, "ВладелецКарты") Тогда
			ОбновитьЗаказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбновитьЗаказ Тогда
		Объект.ЗаказПокупателя = Неопределено;
	КОнецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФизЛицоПриИзменении(Элемент)
	ЗаполнениеФизЛицаСервер();
	
	Если ЭтоLinuxСервер Тогда
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеУстановкаКомпонентыСклонения", ЭтотОбъект);
		Если ОбщегоНазначенияРТКлиент.КомпонентаСклоненияУстановлена(ОбработчикОповещения) Тогда
			ФИОФизЛица = ОбщегоНазначенияРТКлиентСерверПовтИсп.ПолучитьСклонениеФИО(ФИОФизЛицаИП, 3);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
	УстановитьДоступностьВидаОперации();
	Если КэшированныеЗначения = Неопределено Тогда
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
			Элементы.Товары,
			КэшированныеЗначения,
			ПараметрыУказанияСерий,
			Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ТоварыВводДополнительнойИнформации(Элемент) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	Если РедактированиеТЧТовары
		И ТоварыВводДополнительнойИнформации(Элемент) Тогда
		Элементы.Товары.ЗакончитьРедактированиеСтроки(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.КлючСвязиУслугаАгента) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
	
	УдаляемыйКлючСвязи = ТекущиеДанные.КлючСвязи;
	
	ДополнительныеРеквизиты = Новый Структура("ПередУдалением");
	СобытияФормИСКлиент.ПриИзмененииЭлемента(ЭтотОбъект, "Товары", ДополнительныеРеквизиты);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.УдалитьСтрокиАгентскогоВознаграждения(Объект.Товары, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если Копирование Тогда
		
		ТекущаяСтрока.КлючСвязиСерийныхНомеров    = 0;
		ТекущаяСтрока.СуммаАвтоматическойСкидки   = 0;
		ТекущаяСтрока.ПроцентАвтоматическойСкидки = 0;
		ТекущаяСтрока.СуммаСкидкиОплатыБонусом    = 0;
		
		ТекущаяСтрока.КлючСвязи                   = 0;
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
		
		Если ТекущаяСтрока.ИспользоватьСерийныеНомера Тогда
			ТекущаяСтрока.КоличествоУпаковок = 0;
			ТекущаяСтрока.Количество = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ТекущаяСтрока.Продавец = Объект.Продавец;
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
				Элемент,
				КэшированныеЗначения,
				ПараметрыУказанияСерий,
				Копирование);
	
	РедактированиеТЧТовары = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьИтоговыеПоказателиКлиентСервер(ЭтотОбъект);
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если КэшированныеЗначения = Неопределено Тогда
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
			Элементы.Товары,
			КэшированныеЗначения,
			ПараметрыУказанияСерий,
			Ложь);
	КонецЕсли;
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьСтатусСерийИПодарочныхСертификатов(ТекущиеДанные);
	
	ПриИзмененииЭлементаГосИС();
	
	РедактированиеТЧТовары = Ложь;
	
	Если ПропуститьАвтоматическийРасчетСкидок Тогда
		ПропуститьАвтоматическийРасчетСкидок = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КлючСвязи", УдаляемыйКлючСвязи);
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий,Истина) Тогда
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Неопределено, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	ПроверитьСистемуНалогообложения();
	
	ТоварыПослеУдаленияСервер();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПослеУдаленияСервер()
	
	ОбновитьИтоговыеПоказателиКлиентСервер(ЭтотОбъект);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КлючСвязи", УдаляемыйКлючСвязи);
	
	ЕстьУдаляемыеСтроки = УдаляемыйКлючСвязи > 0;
	
	Если ПродажаПоЗаказу Или ДокументРасчетаЗаполнен Тогда
		Если ЕстьУдаляемыеСтроки Тогда
			
			СтрокиСкидкиНаценки = Объект.СкидкиНаценки.НайтиСтроки(СтруктураПоиска);
			Для каждого СтрокаСкидкиНаценки Из СтрокиСкидкиНаценки Цикл
				Объект.СкидкиНаценки.Удалить(СтрокаСкидкиНаценки);
			КонецЦикла;
			
			УдаляемыйКлючСвязи = 0;
		КонецЕсли;
	КонецЕсли;
	
	УдалитьНесвязанныеСерийныеНомера();
	УдалитьНесвязанныеАкцизы();
	
	СобытияФормИС.ПриИзмененииЭлемента(ЭтотОбъект, "Товары", Неопределено);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если АвтоматическийРасчетСкидок Тогда
		ПропуститьАвтоматическийРасчетСкидок = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ПриИзмененииТоварыНоменклатура();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
								Истина, "Справочник.Номенклатура.Форма.ФормаВыбора.Открытие");
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыВыбораНоменклатуры = Новый Структура();
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ПараметрыВыбораНоменклатуры.Вставить("ТекущаяСтрока", ТекущиеДанные.Номенклатура);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВыбораНоменклатуры", ЭтотОбъект);
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыВыбораНоменклатуры,,,,, ОбработчикОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
		
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиТоварыКлиент.СтруктураЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина));
	СтруктураДействий.Вставить("ПересчитатьЦенуСУчетомАгентскогоВознаграждения", Новый Структура("Цена", ТекущаяСтрока.Цена));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиТоварыКлиент.ВыделитьАгентскоеВознаграждение(Объект, ЭтотОбъект, СтруктураДействий, ТекущаяСтрока, КэшированныеЗначения);
	
	ОбновитьИтоговыеПоказателиКлиентСервер(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьХарактеристикуНоменклатуры(ЭтотОбъект, Элемент, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаСоздание(Элемент, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.СоздатьХарактеристикуНоменклатуры(ЭтотОбъект, Элемент, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	// Отмена операции для табачной продукции
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиТоварыКлиент.СтруктураЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина));
		СтруктураДействий.Вставить("ПересчитатьЦенуСУчетомАгентскогоВознаграждения", Новый Структура("Цена", ТекущаяСтрока.Цена));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиТоварыКлиент.ВыделитьАгентскоеВознаграждение(Объект, ЭтотОбъект, СтруктураДействий, ТекущаяСтрока, КэшированныеЗначения);
	
	ОбновитьИтоговыеПоказателиКлиентСервер(ЭтотОбъект);
	
	// Интерфейс ЕГАИС
	//ПриИзмененииЭлементаГосИС();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьУпаковкуНоменклатуры(ДанныеВыбора, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)

	// Отмена операции для табачной продукции
	ПриИзмененииТоварыКоличестваУпаковок();

	// Интерфейс ЕГАИС
	//ПриИзмененииЭлементаГосИС();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиТоварыКлиент.ВыделитьАгентскоеВознаграждение(Объект, ЭтотОбъект, СтруктураДействий, ТекущаяСтрока, КэшированныеЗначения);
	
	ОбновитьИтоговыеПоказателиКлиентСервер(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиТоварыКлиент.ВыделитьАгентскоеВознаграждение(Объект, ЭтотОбъект, СтруктураДействий, ТекущаяСтрока, КэшированныеЗначения);
	
	ОбновитьИтоговыеПоказателиКлиентСервер(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаРучнойСкидкиПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать, ПересчитыватьСуммуСкидки", Ложь, Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиТоварыКлиент.ВыделитьАгентскоеВознаграждение(Объект, ЭтотОбъект, СтруктураДействий, ТекущаяСтрока, КэшированныеЗначения);
	
	ОбновитьИтоговыеПоказателиКлиентСервер(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах", ОбработкаТабличнойЧастиТоварыКлиент.СтруктураПересчетаЦеныСкидкиВПродажахВТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиТоварыКлиент.ВыделитьАгентскоеВознаграждение(Объект, ЭтотОбъект, СтруктураДействий, ТекущаяСтрока, КэшированныеЗначения);
	
	ОбновитьИтоговыеПоказателиКлиентСервер(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиТоварыКлиент.ВыделитьАгентскоеВознаграждение(Объект, ЭтотОбъект, СтруктураДействий, ТекущаяСтрока, КэшированныеЗначения);
	
	ОбновитьИтоговыеПоказателиКлиентСервер(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСкладПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураПараметровСтавкиНДС = Новый Структура;
	СтруктураПараметровСтавкиНДС.Вставить("Дата"       , Объект.Дата);
	СтруктураПараметровСтавкиНДС.Вставить("Организация", Объект.Организация);
	
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", СтруктураПараметровСтавкиНДС);
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	СтруктураДействий.Вставить("ПроставитьПродавца", Объект.Продавец);
	
	СтруктураДействий.Вставить("ЗаполнитьВидНалога", 
		ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровЗаполненияВидаНалога(Объект));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиТоварыКлиент.ВыделитьАгентскоеВознаграждение(Объект, ЭтотОбъект, СтруктураДействий, ТекущаяСтрока, КэшированныеЗначения);
	
	ОбновитьИтоговыеПоказателиКлиентСервер(ЭтотОбъект);
	
	ПроверитьСистемуНалогообложения(Элементы.Товары.ТекущаяСтрока);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОплата

&НаКлиенте
Процедура ОплатаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	Если НЕ Копирование Тогда
		ДобавитьОплатуНаличными();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОплатаСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Оплата.ТекущиеДанные;
	ПересчитатьСуммуКомиссии(ТекущаяСтрока);
	ОбновитьИтоговыеПоказателиКлиентСервер(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПроцентКомиссииПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Оплата.ТекущиеДанные;
	ПересчитатьСуммуКомиссии(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаВидОплатыПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Оплата.ТекущиеДанные;
	
	УстановитьЭквайринговыйТерминалПоУмолчанию(ТекущаяСтрока);
	
	ТекущаяСтрока.ПроцентКомиссии = ЭквайрингВызовСервера.ПолучитьПроцентКомиссииПоТерминалу(ТекущаяСтрока.ЭквайринговыйТерминал, ТекущаяСтрока.ВидОплаты, ЭтоВозврат, ЭтоВозвратДеньВДень, ЭтоПолныйВозврат);
	ПересчитатьСуммуКомиссии(ТекущаяСтрока);
	
	ТекущаяСтрока.ТипОплаты = ТипОплатыПоВиду(ТекущаяСтрока.ВидОплаты);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаЭквайринговыйТерминалПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Оплата.ТекущиеДанные;
	
	ТекущаяСтрока.ПроцентКомиссии = ЭквайрингВызовСервера.ПолучитьПроцентКомиссииПоТерминалу(ТекущаяСтрока.ЭквайринговыйТерминал, ТекущаяСтрока.ВидОплаты, ЭтоВозврат, ЭтоВозвратДеньВДень, ЭтоПолныйВозврат);
	
	ПересчитатьСуммуКомиссии(ТекущаяСтрока);
	
	ТекущаяСтрока.ТипОплаты = ТипОплатыПоВиду(ТекущаяСтрока.ВидОплаты);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Оплата.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Если НЕ ВопросОбУдаленииСтрокиОплатыУжеЗадан Тогда
			Если ТекущиеДанные.ВидОплаты = ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом") 
				  И Объект.ПогашениеПодарочныхСертификатов.Количество() > 0 Тогда
				
				Отказ = Истина;
				ТекстВопроса = НСтр("ru = 'Удаляется оплата подарочным сертификатом, при этом удалятся все сертификаты оплаты. Продолжить?'"); 
				
				ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросУдалениеСертификатовОплаты", ЭтотОбъект);
				ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет);
				
			ИначеЕсли ТекущиеДанные.ДанныеПереданыВБанк Тогда
				
				Отказ = Истина;
				
				Если ТекущиеДанные.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПлатежнаяСистема") Тогда
					ДополнительныеПараметры = Новый Структура();
					ДополнительныеПараметры.Вставить("ТекущаяСтрока", Элементы.Оплата.ТекущиеДанные);
					ТекстВопроса = НСтр("ru = 'Данные об операции отправлены в НСПК и ожидают подтверждения.
					|Хотите удалить текущую операцию?'");
						
					ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросУдалениеДанныхОтправленныхВНСПК",
						ЭтотОбъект,
						ДополнительныеПараметры);
						
					СписокКнопок = Новый СписокЗначений();
					СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Удалить'"));
					СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Отменить'"));
					ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, СписокКнопок,, КодВозвратаДиалога.Нет);
				Иначе
					Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
						СтрокаСообщения = НСтр("ru = 'Данные об оплате отправлены в банк.'") + Символы.ПС;
						СтрокаСообщения = СтрокаСообщения + НСтр("ru = 'Необходимо отменить операцию.'");
						ОбщегоНазначенияКлиент.СообщитьПользователю(
							СтрокаСообщения,
							Объект,
							"ОплатаОплатаЧерезТерминал");
					Иначе
						ТекстВопроса = НСтр("ru = 'Данные об отмене отправлены в банк.'") + Символы.ПС;
						ТекстВопроса = ТекстВопроса + НСтр("ru = 'Хотите удалить строку с потерей данных?'");
						
						ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросПотеряДанныхОтправленныхВБанк", ЭтотОбъект);
						ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			Если ТекущиеДанные.ВидОплаты = ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.ОплатаБонусамиКакСкидкой")
				И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
				ОтменитьОплатуБонусами(Ложь);
				Если АвтоматическийРасчетСкидок Тогда
					Если НЕ ПропуститьАвтоматическийРасчетСкидок Тогда
						РассчитатьСкидкиНаценкиКлиент();
					КонецЕсли;
				Иначе
					ОтменитьСкидки();
				КонецЕсли;
				ОбновитьИтоговыеПоказателиКлиентСервер(ЭтотОбъект);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Копирование Тогда
		
		ТекущиеДанные = Элементы.Оплата.ТекущиеДанные;
		
		ТекущиеДанные.СсылочныйНомер      = "";
		ТекущиеДанные.НомерЧекаЭТ         = "";
		ТекущиеДанные.НомерПлатежнойКарты = "";
		ТекущиеДанные.ДанныеПереданыВБанк = Ложь;
		
	КонецЕсли;
	
	СуммаПродажи = ?(Объект.ЦенаВключаетНДС, Объект.Товары.Итог("Сумма"), Объект.Товары.Итог("Сумма") + Объект.Товары.Итог("СуммаНДС"));
	СуммаОплат   = Объект.Оплата.Итог("Сумма");
	
	ТекущаяСтрока = Элементы.Оплата.ТекущиеДанные;
	
	Если ТекущаяСтрока.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ЗачетАванса") Тогда
		ОстатокОплаты = Мин(СуммаПродажи, СуммаДокументаРасчета);
	Иначе
		ТекущаяСумма  = ТекущаяСтрока.Сумма;
		
		ОплатаБезТекущейСтроки = СуммаОплат - ТекущаяСумма;
		ОстатокОплаты = СуммаПродажи - ОплатаБезТекущейСтроки;
	КонецЕсли;
	
	Элементы.ОплатаСумма.СписокВыбора.Очистить();
	
	Если ОстатокОплаты > 0 Тогда
		
		Элементы.ОплатаСумма.СписокВыбора.Добавить(ОстатокОплаты, Формат(ОстатокОплаты, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧРГ=' '; ЧН=; ЧГ=3,0"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПриИзменении(Элемент)
	
	ОбновитьИтоговыеПоказателиКлиентСервер(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПодарки

&НаКлиенте
Процедура ПодаркиЦенаПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Подарки.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Подарки, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодаркиСуммаПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Подарки.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах");
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Подарки, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодаркиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ОбработчикиКомандПодключаемогоОборудования

&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ОповещенияПриПолученииВеса = Новый ОписаниеОповещения("ПолучитьВесЗавершение", ЭтотОбъект);
	ПодключаемоеОборудованиеРТКлиент.ПолучениеВесаСЭлектронныхВесовДляТабличнойЧасти(ОповещенияПриПолученииВеса, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧек(Команда)
	
	ПробитьЧекНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ПодключаемоеОборудованиеРТКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыбиратьНенайденные", Ложь);
	ДополнительныеПараметры.Вставить("ОбработатьПослеЗагрузки", Истина);
	ПодключаемоеОборудованиеРТКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект, ДополнительныеПараметры);
		
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоМагнитномуКоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиМагнитныйКод(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ОчиститьСообщения();
	ШтрихкодированиеИСКлиент.ПоказатьВводШтрихкода(ОписаниеОповещенияОбработкиКодаМаркировки());
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеУстановкаКомпонентыСклонения(ДополнительныеПараметры) Экспорт
	ФИОФизЛица = ОбщегоНазначенияРТКлиентСерверПовтИсп.ПолучитьСклонениеФИО(ФИОФизЛицаИП, 3);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПоискПоНаименованию(Команда)
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Магазин",Объект.Магазин);
	РаботаСПравиламиИменованияКлиент.ПоискПоНаименованию(ЭтаФорма,ПараметрыПоиска);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПодарочныеСертификатыПогашения(Команда)
	
	ДополнительныеПараметры = Неопределено;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
		
		ПодготовитьСкидкиИОплатуБонусамиКСторнированию();
		
	Иначе
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяОбработкиОповещения", "ОповещениеВводаПодарочныхСертификатов");
		
		Отказ = Ложь;
		ПроверитьСкидки(Отказ, ДополнительныеПараметры);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("ВыведеныСообщения") Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ОповещениеВводаПодарочныхСертификатов(Неопределено, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьПлатежнойКартой(Команда)
	
	ДополнительныеПараметры = Неопределено;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
		
		ПодготовитьСкидкиИОплатуБонусамиКСторнированию();
		
	Иначе
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяОбработкиОповещения", "ОповещениеОплатыПлатежнойКартой");
		
		Отказ = Ложь;
		ПроверитьСкидки(Отказ, ДополнительныеПараметры);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("ВыведеныСообщения") Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ОповещениеОплатыПлатежнойКартой(Неопределено, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьБанковскимКредитом(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
		
		ПодготовитьСкидкиИОплатуБонусамиКСторнированию();
		
	Иначе
		
		ДополнительныеПараметры.Вставить("ИмяОбработкиОповещения", "ОповещениеОплатыБанковскимКредитом");
		
		Отказ = Ложь;
		ПроверитьСкидки(Отказ, ДополнительныеПараметры);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	
		Если ДополнительныеПараметры.Свойство("ВыведеныСообщения") Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ОповещениеОплатыБанковскимКредитом(Неопределено, ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОплатыПоДокументуПродажи(Команда)
	
	ЗаполнитьОплатыПоДокументуПродажиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьАвтоматическиеСкидки(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		Истина, "ОбщаяФорма.НазначениеАвтоматическихУправляемыхСкидокНаценок.Открытие");
	
	ДополнительныеПараметры = Новый Структура;
	ОбработчикОповещения = Новый ОписаниеОповещения("НазначитьАвтоматическиеСкидкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресВоВременномХранилище", ВыполнитьПредварительныйРасчетСкидокНаСервере(ПорядковыйНомерПродажи));
	СписокОдноразовыхКодов = Новый Массив;
	Для Каждого ПредъявленныйКод Из Объект.ПредъявленныеКодыОднократныхСкидок Цикл
		СписокОдноразовыхКодов.Добавить(ПредъявленныйКод.КодСкидки);
	КонецЦикла;
	ПараметрыФормы.Вставить("СписокОдноразовыхКодов", СписокОдноразовыхКодов);
	ПараметрыФормы.Вставить("Магазин", Объект.Магазин);
	ОткрытьФорму("ОбщаяФорма.НазначениеАвтоматическихУправляемыхСкидокНаценок", ПараметрыФормы, ЭтотОбъект, , , , ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидку(Команда)
	
	Если Не СкидкиНаценкиКлиент.ПроверитьНеобходимостьНазначенияРучнойСкидкиНаценки(Объект, "Товары", "Товары") Тогда
		Возврат;
	КонецЕсли;
    
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		Истина, "ОбщаяФорма.НазначениеРучнойСкидкиНаценки.Открытие");
        
	ПараметрыДляРучнойСкидки = ПараметрыДляНазначенияРучнойСкидки();
	ДополнительныеПараметры = Новый Структура;
	ОбработчикОповещения = Новый ОписаниеОповещения("НазначитьРучнуюСкидкуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("ОбщаяФорма.НазначениеРучнойСкидкиНаценки", ПараметрыДляРучнойСкидки, ЭтотОбъект, , , , ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиОплатуЧерезТерминал(Команда)
	Перем Отказ;
	
	ТекущаяСтрока = Элементы.Оплата.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		СтрокаСообщения = НСтр("ru = 'Необходимо выбрать строку с платежной картой'");
		ПоказатьПредупреждение(, СтрокаСообщения);
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекущаяСтрока.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта") Тогда
		
		СтрокаСообщения = НСтр("ru = 'Выберите строку с платежной картой'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрокаСообщения,
			Объект,
			"Оплата[" + (ТекущаяСтрока.НомерСтроки - 1) + "].ВидОплаты");
		
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ЭквайринговыйТерминал) Тогда
		
		СтрокаСообщения = НСтр("ru = 'Не выбран эквайринговый терминал'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрокаСообщения,
			Объект,
			"Оплата[" + (ТекущаяСтрока.НомерСтроки - 1) + "].ЭквайринговыйТерминал");
		
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
		
		ДополнительныеПараметры.Вставить("ИмяОбработкиОповещения", "ОповещениеОплатыЧерезТерминал");
		
		Отказ = Ложь;
		ПроверитьСкидки(Отказ, ДополнительныеПараметры);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("ВыведеныСообщения") Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ОповещениеОплатыЧерезТерминал(Неопределено, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидках(Команда)
	
	ОткрытьИнформациюОСкидкахКлиент()
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРучныеСкидки(Команда)
	Если Не СкидкиНаценкиКлиент.ПроверитьНеобходимостьОтменыРучныхСкидокНаценок(Объект, "Товары", "Товары") Тогда
		Возврат;
	КонецЕсли;
	
	ОтменитьРучныеСкидкиНаСервере();
	СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок();
	
	ОбновитьИтоговыеПоказателиКлиентСервер(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиПодаркиВТовары(Команда);
	
	ПеренестиСкидкиПодаркиВТоварыСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодаркиОткрытьПодбор(Команда)
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'чек'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Магазин",    Объект.Магазин);
	ПараметрыФормы.Вставить("ИмяТабличнойЧасти", "Подарки");
	ПараметрыФормы.Вставить("РежимПодбораБезСертификатов", Истина);
	ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	
	Если НЕ ЕстьПравоИзменятьЦену() Тогда
		ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
		ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену",НСтр("ru = 'Запрашивать количество'"));
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ПодборТоваров.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрытьИзФормы(Команда)
	Перем Отказ, Объект_Ссылка;
	
	Если Объект.ПометкаУдаления Тогда
		ВызватьИсключение НСтр("ru = 'Помеченный на удаление документ не может быть проведен!'");
	КонецЕсли;
	
	Отказ = Ложь;
	ПередЗаписьюКлиент(Отказ, РежимЗаписиДокумента.Проведение);
	ТекстСообщения = "";
	Если НЕ Отказ Тогда
		ПровестиИзФормыСервер(Отказ, Ложь, Объект_Ссылка,ТекстСообщения);
		Если Отказ 
			И ЗначениеЗаполнено(ТекстСообщения) Тогда
			Возврат;
		КонецЕсли;

		Модифицированность = Отказ;
		Если НЕ Отказ Тогда
			Закрыть();
			ОтобразитьИзменениеДанных(Объект_Ссылка, ВидИзмененияДанных.Изменение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИзФормы(Команда)
	
	Перем Отказ;
	
	Если Объект.ПометкаУдаления Тогда
		ВызватьИсключение НСтр("ru = 'Помеченный на удаление документ не может быть проведен!'");
	КонецЕсли;
	
	Отказ = Ложь;
	ПередЗаписьюКлиент(Отказ, РежимЗаписиДокумента.Проведение);
	ТекстСообщения = "";
	Если НЕ Отказ Тогда
		ПровестиИзФормыСервер(Отказ, Истина,,ТекстСообщения);
		Если Отказ
			И ЗначениеЗаполнено(ТекстСообщения) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента, РазрешеноПроведение);
		ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
																	"ФормаПробитьЧек",
																	"Доступность", 
																	Объект.Проведен И НЕ ТолькоПросмотр);
		
		ОбновитьОтображениеДанных();
		Модифицированность = Отказ;
		
		ОтобразитьИзменениеДанных(ЭтотОбъект.Объект.Ссылка, ВидИзмененияДанных.Изменение);
	КонецЕсли;
	
	ОбменССайтомРТВызовСервера.ЗаписатьСостояниеОплатыЗаказаПокупателя(Объект.ЗаказПокупателя, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиНаценки(Команда)
	
	РассчитатьСкидкиНаценкиКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОткрытьПодбор(Команда)
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'чек'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Магазин",    Объект.Магазин);
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
		ПараметрыФормы.Вставить("РежимПодбораБезСертификатов", Истина);
		ПараметрыФормы.Вставить("РежимПодбораБезУслуг", Ложь);
	КонецЕсли;
	ПараметрыФормы.Вставить("РежимПодбораСУчетомМинимальныхЦен", Истина);
	ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	
	Если НЕ ЕстьПравоИзменятьЦену() Тогда
		ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
		ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену",НСтр("ru = 'Запрашивать количество'"));
	КонецЕсли;
	
	Если ИспользоватьАссортимент Тогда
		ПараметрыФормы.Вставить("МагазинАссортимента", Объект.Магазин);
		ПараметрыФормы.Вставить("РежимПодбораСУчетомАссортимента", Истина);
		ПараметрыФормы.Вставить("УсловиеАссортимента", "РазрешеныПродажи");
	КонецЕсли;
	
	Если СкидкиНаценкиВызовСервера.ФункциональнаяОпцияИспользованияЗапретаРозничнойПродажиАлкоголя() Тогда
		ПараметрыФормы.Вставить("РежимПодбораСУчетомЗапрещенныхКПродаже", Истина);
		ПараметрыФормы.Вставить("ПродажиОптовые", Ложь);
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ПодборТоваров.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСвернутьТЧ(Команда)
	РазвернутьСвернутьТЧНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПросмотрНакоплений(Команда)
    
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		     Истина, "Обработка.РМКУправляемыйРежим.Форма.ФормаПросмотраНакоплений.Открытие");
        
	ПараметрыОткрытия = Новый Структура;
	РеквизитыДокумента = Новый Структура;
	РеквизитыДокумента.Вставить("Ссылка", Объект.Ссылка);
	РеквизитыДокумента.Вставить("Дата",  Объект.Дата);
	РеквизитыДокумента.Вставить("Проведен", Объект.Проведен);
	РеквизитыДокумента.Вставить("ВидОперации", Объект.ВидОперации);
	РеквизитыДокумента.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	РеквизитыДокумента.Вставить("СтатусЧекаККМ", ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.ПустаяСсылка"));
	РеквизитыДокумента.Вставить("ОтчетОРозничныхПродажах", ПредопределенноеЗначение("Документ.ОтчетОРозничныхПродажах.ПустаяСсылка"));
	
	ПараметрыОткрытия.Вставить("РеквизитыДокумента", РеквизитыДокумента);
	ПараметрыОткрытия.Вставить("ВыборИнформационнойКартыТолькоПоКоду", Ложь);
	ПараметрыОткрытия.Вставить("ВводКартДоступен", Ложь);
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаПросмотраНакоплений", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьБонусами(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ВозможнаОплата = ВозможнаОплатаБонусами(ДополнительныеПараметры);
	Если ВозможнаОплата Тогда
		Если Объект.Проведен Тогда
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОплатаБонусамиВопросОбОтменеПроведения", ЭтотОбъект, ДополнительныеПараметры);
			ТекстВопроса = НСтр("ru = 'Оплата бонусами возможна только в не проведенном документе, отменить проведение?'");
			ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			ОткрытьФормуОплатыБонусами(ДополнительныеПараметры);
		КонецЕсли;
		
	Иначе
		Если ДополнительныеПараметры.Свойство("ТекстПредупреждения") Тогда
			ПоказатьПредупреждение(,ДополнительныеПараметры.ТекстПредупреждения);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетОРозничныхПродажах(Команда)
	
	ПоказатьЗначение(, Объект.ОтчетОРозничныхПродажах);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЗаказу(Команда)
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru='Список ""Товары"" будет перезаполнен. Продолжить?'");
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ПоказатьВопросЗаполнитьПоЗаказуЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьПоЗаказуПокупателя();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиВОтчетеОРозничныхПродажах(Команда)
	
	Если ЗначениеЗаполнено(Объект.ОтчетОРозничныхПродажах) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", Объект.ОтчетОРозничныхПродажах);
		
		ТекущиеДанныеТовары = Элементы.Товары.ТекущиеДанные;
		Если ТекущиеДанныеТовары = Неопределено Тогда
			Если Объект.Товары.Количество() > 0  Тогда
				ТекущиеДанныеТовары = Объект.Товары[0];
			КонецЕсли;
		КонецЕсли;
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
			ПараметрыФормы.Вставить("ТекущийЭлемент", "Товары");
			
			Если НЕ ТекущиеДанныеТовары = Неопределено Тогда
				ПараметрыФормы.Вставить("ТекущийРеквизитОбъекта", "Товары");
				ПараметрыТекущейСтроки = Новый Структура;
				ПараметрыТекущейСтроки.Вставить("Склад"          , ТекущиеДанныеТовары.Склад);
				ПараметрыТекущейСтроки.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
				ПараметрыТекущейСтроки.Вставить("Номенклатура"   , ТекущиеДанныеТовары.Номенклатура);
				ПараметрыТекущейСтроки.Вставить("Характеристика" , ТекущиеДанныеТовары.Характеристика);
				ПараметрыТекущейСтроки.Вставить("СтавкаНДС"      , ТекущиеДанныеТовары.СтавкаНДС);
				ПараметрыТекущейСтроки.Вставить("Продавец"       , ТекущиеДанныеТовары.Продавец);
				ПараметрыТекущейСтроки.Вставить("Упаковка"       , ТекущиеДанныеТовары.Упаковка);
				ПараметрыТекущейСтроки.Вставить("Цена"           , ТекущиеДанныеТовары.Цена);
				ПараметрыТекущейСтроки.Вставить("КодСтроки"      , ТекущиеДанныеТовары.КодСтроки);
				ПараметрыТекущейСтроки.Вставить("ЗаказПокупателя", ТекущиеДанныеТовары.ЗаказПокупателя);
				ПараметрыТекущейСтроки.Вставить("Резервировать"  , ТекущиеДанныеТовары.Резервировать);
				
				ПараметрыФормы.Вставить("ТекущаяСтрока", ПараметрыТекущейСтроки);
				
			КонецЕсли;
			
		Иначе
			ПараметрыФормы.Вставить("ТекущийЭлемент", "ВозвращенныеТовары");
			Если НЕ ТекущиеДанныеТовары = Неопределено Тогда
				ПараметрыФормы.Вставить("ТекущийРеквизитОбъекта", "ВозвращенныеТовары");
				ПараметрыТекущейСтроки = Новый Структура;
				ПараметрыТекущейСтроки.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
				ПараметрыТекущейСтроки.Вставить("Склад"          , ТекущиеДанныеТовары.Склад);
				ПараметрыТекущейСтроки.Вставить("Номенклатура"   , ТекущиеДанныеТовары.Номенклатура);
				ПараметрыТекущейСтроки.Вставить("Характеристика" , ТекущиеДанныеТовары.Характеристика);
				ПараметрыТекущейСтроки.Вставить("Продавец"       , ТекущиеДанныеТовары.Продавец);
				ПараметрыТекущейСтроки.Вставить("СтавкаНДС"      , ТекущиеДанныеТовары.СтавкаНДС);
				ПараметрыТекущейСтроки.Вставить("Упаковка"       , ТекущиеДанныеТовары.Упаковка);
				ПараметрыТекущейСтроки.Вставить("Цена"           , ТекущиеДанныеТовары.Цена);
				
				ПараметрыТекущейСтроки.Вставить("АналитикаХозяйственнойОперации", Объект.АналитикаХозяйственнойОперации);
				
				ПараметрыФормы.Вставить("ТекущаяСтрока", ПараметрыТекущейСтроки);
				
			КонецЕсли;
		КонецЕсли;
		
		ОткрытьФорму("Документ.ОтчетОРозничныхПродажах.ФормаОбъекта", ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаEmail(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытиеФормыВводаEmail", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Email", Объект.АдресЭП);
	ПараметрыФормы.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Введите адрес электронной почты (Email)'"));
	ПараметрыФормы.Вставить("ОтказКлиентаОтСохраненияEmail", ОтказКлиентаОтСохраненияТелефонаEmail);
	
	ПодключаемоеОборудованиеРТКлиент.ОткрытьФормуВводаEmailОтправкиЧерезОФД(ОбработчикОповещения, ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаSMS(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытиеФормыВводаТелефона", ЭтотОбъект, ДополнительныеПараметры);
	
	Если ЗначениеЗаполнено(Объект.Телефон) Тогда
		Телефон = Число(Объект.Телефон);
	Иначе
		Телефон = 0;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок" , НСтр("ru = 'Введите номер телефона'"));
	ПараметрыФормы.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	ПараметрыФормы.Вставить("ЧислоВвода", Телефон);
	ПараметрыФормы.Вставить("ОтказКлиентаОтСохраненияТелефона", ОтказКлиентаОтСохраненияТелефонаEmail);
	
	ПодключаемоеОборудованиеРТКлиент.ОткрытьФормуВводаТелефонаДляОтправкиЧерезОФД(ОбработчикОповещения, ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗачетАванса(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
		
		ПодготовитьСкидкиИОплатуБонусамиКСторнированию();
		
	Иначе
		
		ДополнительныеПараметры.Вставить("ИмяОбработкиОповещения", "ОповещениеЗачетАванса");
		
		Отказ = Ложь;
		ПроверитьСкидки(Отказ, ДополнительныеПараметры);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	
		Если ДополнительныеПараметры.Свойство("ВыведеныСообщения") Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ОповещениеЗачетАванса(Неопределено, ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ОплатитьВРассрочку(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
		
		ПодготовитьСкидкиИОплатуБонусамиКСторнированию();
		
	Иначе
		
		ДополнительныеПараметры.Вставить("ИмяОбработкиОповещения", "ОповещениеОплатыСРассрочку");
		
		Отказ = Ложь;
		ПроверитьСкидки(Отказ, ДополнительныеПараметры);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	
		Если ДополнительныеПараметры.Свойство("ВыведеныСообщения") Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ОповещениеОплатыСРассрочку(Неопределено, ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументЧекККМ(Команда)
	
	ЧекККМСсылка = Объект.Ссылка;
	
	Если ЗначениеЗаполнено(ЧекККМСсылка) Тогда
		
		СтруктураОснования = Новый Структура; 
		СтруктураОснования.Вставить("ДанныеЗаполнения", ЧекККМСсылка);
		СтруктураОснования.Вставить("СоздатьЧекПродажи");
		
		ОткрытьФорму("Документ.ЧекККМ.Форма.ФормаДокумента", Новый Структура("Основание", СтруктураОснования));
		
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.Товары.Количество();
	ПолучитьСтрокиИзБуфераОбмена();
	КоличествоВставленных = Объект.Товары.Количество()-КоличествоТоваровДоВставки;
	КопированиеСтрокКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	ПерезаполнитьПризнакиМаркировки();
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	Если КопированиеСтрокКлиент.ВозможноКопированиеСтрок(Элементы.Товары.ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере();
		КопированиеСтрокКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Товары.ВыделенныеСтроки.Количество());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФискальныеДанные(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, 
											   ЭтотОбъект.Команды["ПодменюПечатьОбычное_ФискальнаяОперация"], 
											   Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормИСКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОплатуВПлатежнойСистеме(Команда)
	ОтменитьОплатуВПлатежнойСистемеКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаказПокупателя(Команда)
	ПоказатьЗначение(, Объект.ЗаказПокупателя);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЗаказПокупателя(Команда)
	
	Если НЕ ПроверитьЗаполнениеКлючевыхРеквизитов() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Товары.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Список ""Товары"" будет перезаполнен остатками по заказу. Продолжить?'");
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ПоказатьВопросВыбратьЗаказПокупателяЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ОткрытьФормуВыбораЗаказаПокупателя();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗаказПокупателя(Команда)
	
	Объект.ЗаказПокупателя = Неопределено;
	УправлениеЭлементамиЗаказПокупателя();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчередьЧеков(Команда)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ДокументОснование", Объект.Ссылка);
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Отбор", СтруктураОтбора);
	ОткрытьФорму("РегистрСведений.ОчередьЧековККТ.ФормаСписка", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьQRКодом(Команда)
	
	ВозвратПоОснованию = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат")
						И ЗначениеЗаполнено(Объект.ЧекККМПродажа);
	
	Если Не ВозвратПоОснованию
		И Объект.Оплата.Количество() Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Совместное использование с другими видами оплат не поддерживается!'"),, "Объект.Оплата[0].ВидОплаты");
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Неопределено;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
		
		ПодготовитьСкидкиИОплатуБонусамиКСторнированию();
		ОповещениеОплатыПлатежнойСистемой(Неопределено, ДополнительныеПараметры);
		
	Иначе
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяОбработкиОповещения", "ОповещениеОплатыПлатежнойСистемой");
		
		Отказ = Ложь;
		ПроверитьСкидки(Отказ, ДополнительныеПараметры);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("ВыведеныСообщения") Тогда
			Возврат;
		КонецЕсли;
		
		ОповещениеОплатыПлатежнойСистемой(Неопределено, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьЭСНСПК(Команда)
	
	ОплатитьЭСНСПКНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПодтверждениеНСПК(Команда)
	
	ОтправитьПодтверждениеНСПКНаКлиенте();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Процедура ПроверитьИспользованиеПодключаемогоОборудования(ИспользоватьПодключаемоеОборудование)

	ТипыПодключенногоОборудования = МенеджерОборудованияВызовСервера.ТипыИспользуемогоОборудованияТекущегоРабочегоМеста();
	ИспользоватьПодключаемоеОборудование = ОбщегоНазначенияРТ.ИспользоватьПодключаемоеОборудование(ТипыПодключенногоОборудования);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидНалога()
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат 
		И ЗначениеЗаполнено(Объект.ЧекККМПродажа) Тогда
		
		СистемаНалогообложениеПродажи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Объект.ЧекККМПродажа, "СистемаНалогообложения");
		
		Если ЗначениеЗаполнено(СистемаНалогообложениеПродажи) Тогда
			
			Объект.СистемаНалогообложения = СистемаНалогообложениеПродажи;
			
		Иначе
			
			Объект.СистемаНалогообложения = ПодключаемоеОборудованиеРТ.ПолучитьСистемуНалогообложения(
				Объект.Дата, Объект.Организация, Объект.Магазин, 
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Магазин, "СкладПродажи"));
			
		КонецЕсли;
		
	Иначе
		
		Объект.СистемаНалогообложения = ПодключаемоеОборудованиеРТ.ПолучитьСистемуНалогообложения(
			Объект.Дата, Объект.Организация, Объект.Магазин, 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Магазин, "СкладПродажи"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЭтоВозвратДеньВДень()
	
	Если ЗначениеЗаполнено(Объект.ЧекККМПродажа) Тогда
		
		Возврат НЕ ЗначениеЗаполнено(Объект.ЧекККМПродажа.ОтчетОРозничныхПродажах);
	Иначе
		
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЭтоПолныйВозврат()
	
	Если ЗначениеЗаполнено(Объект.ЧекККМПродажа) Тогда
		
		НеобходимаяСуммаВозврата = Объект.ЧекККМПродажа.Товары.Итог("Сумма");
		ПолнаяСуммаОплаты = Объект.Оплата.Итог("Сумма");
		
		Возврат НеобходимаяСуммаВозврата = ПолнаяСуммаОплаты;
	Иначе
		
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ДокументРасчетаПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ДокументРасчета)  Тогда
		СуммаДокументаРасчета = Объект.ДокументРасчета.СуммаДокумента;
	Иначе
		СуммаДокументаРасчета = 0;
	КонецЕсли;
	
	УстановитьВидимостьДоступностьРасчетыСКлиентами();
	
КонецПроцедуры

&НаКлиенте
Функция ВозможностьВводаПоШК()
	
	Результат = Истина;
	
	Если ТолькоПросмотр Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Если НЕ Результат Тогда
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru = 'Форма заблокирована. Ввод невозможен.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура РазвернутьСвернутьТЧНаСервере()
	
	РазвернутаТЧ = НЕ РазвернутаТЧ;
	
	ВидимостьЭлементов = НЕ РазвернутаТЧ;
	
	ЭтотОбъект.ПоложениеКоманднойПанели             = ?(ВидимостьЭлементов, ПоложениеКоманднойПанелиФормы.Авто, ПоложениеКоманднойПанелиФормы.Нет);
	Элементы.ГруппаОснование.Видимость            = ВидимостьЭлементов;
	Элементы.Шапка.Видимость                      = ВидимостьЭлементов;
	Элементы.ИтогоОплата.Видимость                = ВидимостьЭлементов;
	
	Элементы.РазвернутьСвернутьТЧ.Картинка = ?(ВидимостьЭлементов, БиблиотекаКартинок.РазвернутьТабличнуюЧасть, БиблиотекаКартинок.СвернутьТабличнуюЧасть);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтатусыСерийИПодарочныхСертификатов()
	
	Если НЕ ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры И НЕ Справочники.Номенклатура.ИспользуютсяПодарочныеСертификаты() Тогда
		Элементы.ТоварыСтатусыСерийИПодарочныхСертификатов.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерии(ТекущееПоле, ИмяТЧТовары, ИмяТЧСерии)
	
	ВводСерийРазрешен = Истина;
	ОбработкаТабличнойЧастиТоварыКлиент.ПроверитьВозможностьУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий, ВводСерийРазрешен, ИмяТЧТовары);
	Если НЕ ВводСерийРазрешен Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеИдентификатор = Элементы[ИмяТЧТовары].ТекущиеДанные.ПолучитьИдентификатор();
	Если ИмяТЧТовары = "Товары" Тогда
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
	Иначе
		ПараметрыУказанияСерийПодарков = Новый Структура(ПараметрыУказанияСерий);
		ПараметрыУказанияСерийПодарков.Вставить("ИмяТЧТовары", "Подарки");
		ПараметрыУказанияСерийПодарков.Вставить("ИмяТЧСерии", "СерииПодарков");
		ПараметрыУказанияСерийПодарков.Вставить("ИмяКолонкиКоличество", "КоличествоУпаковок");
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор, ПараметрыУказанияСерийПодарков);
	КонецЕсли;
	ПараметрыФормыУказанияСерий.Вставить("ТекущееПоле", ТекущееПоле);
	ПараметрыФормыУказанияСерий.Вставить("КоличествоЕдиницДоПересчета");
	ПараметрыФормыУказанияСерий.Вставить("ИмяТЧТовары", ИмяТЧТовары);
	ПараметрыФормыУказанияСерий.Вставить("ИмяТЧСерии", ИмяТЧСерии);
	
	ОбработчикУказанияСерий = Новый ОписаниеОповещения("ОбработатьУказаниеСерий", ЭтотОбъект, ПараметрыФормыУказанияСерий);
	РежимБлокировки = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы, ПараметрыФормыУказанияСерий, ЭтотОбъект,,,, ОбработчикУказанияСерий, РежимБлокировки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПодарочныеСертификаты()
	
	ПересчетКоличества = Ложь;
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиСерийныеНомераНоменклатурыВТЧ(ЭтотОбъект,
		Объект.СерийныеНомера,
		Элементы.Товары.ТекущиеДанные);
		
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаСервере
Процедура ВидОперацииПриИзмененииСервер()

	ПриИзмененииЧекККМПродажаСервер();
	ОбновитьСтатусыУказанияСерий();
	
	Объект.АналитикаХозяйственнойОперации = Справочники.АналитикаХозяйственныхОпераций.ПустаяСсылка();
	ЭтоВозврат = Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат;
	
	Если ЭтоВозврат Тогда
		Объект.АналитикаХозяйственнойОперации = ЗначениеНастроекПовтИсп.АналитикаХозяйственнойОперацииПоУмолчанию(Объект.АналитикаХозяйственнойОперации, Перечисления.ХозяйственныеОперации.ВозвратОтПокупателя);
	Иначе
		Объект.АналитикаХозяйственнойОперации = Справочники.АналитикаХозяйственныхОпераций.РеализацияТоваров;//ПредопределенноеЗначение("Справочник.АналитикаХозяйственныхОпераций.РеализацияТоваров");
	КонецЕсли;
	
	УстановитьВидимостьДоступностьРасчетыСКлиентами();
	
	Элементы.ЧекККМПродажа.Видимость = ЭтоВозврат;
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьВидНалогаВТЧСервер(Объект.Товары, 
		ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровЗаполненияВидаНалога(Объект));
	
	ЗаполнитьСистемуНалогообложения();
	
	ЗаполнитьСтавкиНДС();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДисконтнаяКартаСервер()

	Если НЕ Объект.ВладелецДисконтнойКарты = Объект.ДисконтнаяКарта.ВладелецКарты Тогда
	
		Объект.ВладелецДисконтнойКарты = Объект.ДисконтнаяКарта.ВладелецКарты
	
	КонецЕсли;
	
	Элементы.ПросмотрНакоплений.Доступность = ЗначениеЗаполнено(Объект.ДисконтнаяКарта);
	
	ПродажиСервер.ЗаполнитьКонтрагентаПоДисконтнойКарте(Объект, Объект.ДисконтнаяКарта);
	
	Если ПроверитьВозможностьПечатиБумажногоЧека() Тогда
		ПодключаемоеОборудованиеРТ.ЗаполнитьДанныеЭлектронногоЧека(Объект, Объект.ДисконтнаяКарта, ДанныеSMSИлиEmail);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКассаККМСервер()
	
	Если НЕ ЗначениеЗаполнено(Объект.КассаККМ) Тогда
		ПараметрыКассыККМ = Неопределено;
		Возврат;
	КонецЕсли;
	
	НДСПересчитан 			= Ложь;
	ПерезаполнитьСНО 		= Ложь;
	ИзменилсяМагазин		= Ложь;
	ИзмениласьОрганизация	= Ложь;
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Магазин", 									"Магазин");
	СтруктураРеквизитов.Вставить("ПравилоЦенообразования", 						"Магазин.ПравилоЦенообразования");
	СтруктураРеквизитов.Вставить("Владелец", 									"Владелец");
	СтруктураРеквизитов.Вставить("РабочееМесто", 								"РабочееМесто");
	СтруктураРеквизитов.Вставить("ПодключаемоеОборудование", 					"ПодключаемоеОборудование");
	СтруктураРеквизитов.Вставить("ТипОборудования", 							"ПодключаемоеОборудование.ТипОборудования");
	СтруктураРеквизитов.Вставить("ЭлектронныйЧекEmailПередаютсяПрограммой1С", 	"ЭлектронныйЧекEmailПередаютсяПрограммой1С");
	СтруктураРеквизитов.Вставить("ЭлектронныйЧекSMSПередаютсяПрограммой1С", 	"ЭлектронныйЧекSMSПередаютсяПрограммой1С");
	
	РеквизитыКассыККМ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.КассаККМ, СтруктураРеквизитов);
	
	ПараметрыКассыККМ = ЗначениеНастроекВызовСервера.ПараметрыКассыККМ(Объект.КассаККМ);
	
	Если НЕ Объект.Магазин = РеквизитыКассыККМ.Магазин Тогда
		Объект.Магазин = РеквизитыКассыККМ.Магазин;
		ИзменилсяМагазин = Истина;
	КонецЕсли;
	
	Если НЕ Объект.Организация = РеквизитыКассыККМ.Владелец Тогда
		Объект.Организация = РеквизитыКассыККМ.Владелец;
		ИзмениласьОрганизация = Истина;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	
	Если ИзменилсяМагазин ИЛИ ИзмениласьОрганизация Тогда
		
		СтруктураДействий.Вставить("ЗаполнитьВидНалога", 
			ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровЗаполненияВидаНалога(Объект));
			
		ПерезаполнитьСНО = Истина;
		
	КонецЕсли;
	
	Если ИзменилсяМагазин Тогда
		
		Если НЕ Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
			
			Объект.ЦенаВключаетНДС = ОбщегоНазначенияРТ.ЗначениеРеквизитаВПривилегированномРежиме(
				РеквизитыКассыККМ.ПравилоЦенообразования, "ЦенаВключаетНДС");
				
			СтруктураПараметровСтавкиНДС = Новый Структура;
			СтруктураПараметровСтавкиНДС.Вставить("Дата"       , Объект.Дата);
			СтруктураПараметровСтавкиНДС.Вставить("Организация", Объект.Организация);
			СтруктураПараметровСтавкиНДС.Вставить("НеобходимоОбработатьВсюТЧ", Истина);
				
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", СтруктураПараметровСтавкиНДС);
				
			СтруктураПараметровПересчетаНДС = ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект);
			СтруктураПараметровПересчетаНДС.Вставить("НеобходимоОбработатьВсюТЧ", Истина);
				
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПараметровПересчетаНДС);
				
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
			
			СтруктураПараметровДействия = Новый Структура;
			СтруктураПараметровДействия.Вставить("Магазин",      РеквизитыКассыККМ.Магазин);
			СтруктураПараметровДействия.Вставить("РабочееМесто", РеквизитыКассыККМ.РабочееМесто);
			СтруктураПараметровДействия.Вставить("Организация",  РеквизитыКассыККМ.Владелец);
			СтруктураДействий.Вставить("ЗаполнитьСкладПродажи",  СтруктураПараметровДействия);
			
			НДСПересчитан = Истина;
				
		КонецЕсли;
		
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ЧекККМ.ПараметрыУказанияСерий(Объект));
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Подарки);
		
	КонецЕсли;
	
	Если ИзмениласьОрганизация Тогда
		
		Если НЕ НДСПересчитан Тогда
			
			СтруктураПараметровСтавкиНДС = Новый Структура;
			СтруктураПараметровСтавкиНДС.Вставить("Дата"       , Объект.Дата);
			СтруктураПараметровСтавкиНДС.Вставить("Организация", Объект.Организация);
			СтруктураПараметровСтавкиНДС.Вставить("НеобходимоОбработатьВсюТЧ", Истина);
			
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", СтруктураПараметровСтавкиНДС);
			
			СтруктураПараметровПересчетаНДС = ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект);
			СтруктураПараметровПересчетаНДС.Вставить("НеобходимоОбработатьВсюТЧ", Истина);
			
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПараметровПересчетаНДС);
			Если НЕ ПродажаПоЗаказу Тогда
				СтруктураДействий.Вставить("ПересчитатьСумму");
				СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
				СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	СтруктураТЧ = Новый Структура;
	СтруктураТЧ.Вставить("СтрокиТЧ" , Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
	ОбработкаТабличнойЧастиТоварыСервер.ВыделитьАгентскоеВознаграждение(Объект, ЭтотОбъект, СтруктураДействий);
	
	ОбновитьИтоговыеПоказателиКлиентСервер(ЭтотОбъект);
	
	РабочееМесто 			= РеквизитыКассыККМ.РабочееМесто;
	ТипОборудованияКассыККМ = РеквизитыКассыККМ.ТипОборудования;
	
	ИспользоватьАссортимент = АссортиментСервер.ПолучитьФункциональнуюОпциюКонтроляАссортимента(Объект.Магазин);
	
	ВозможностьЭлектронногоПлатежа = ПодключаемоеОборудованиеРТ.ВозможностьЭлектронногоПлатежа(РеквизитыКассыККМ.ПодключаемоеОборудование);
	Если ВозможностьЭлектронногоПлатежа Тогда
		ПередачаEmailЧерезПрограмму = РеквизитыКассыККМ.ЭлектронныйЧекEmailПередаютсяПрограммой1С;
		ПередачаSMSЧерезПрограмму   = РеквизитыКассыККМ.ЭлектронныйЧекSMSПередаютсяПрограммой1С;
	КонецЕсли;
	
	Элементы.КомандаEmail.Видимость = ВозможностьЭлектронногоПлатежа;
	Элементы.КомандаSMS.Видимость   = ВозможностьЭлектронногоПлатежа;
	Элементы.ГруппаДанныеSMSИEmail.Видимость = ВозможностьЭлектронногоПлатежа;
	
	Если НЕ ВозможностьЭлектронногоПлатежа Тогда
		
		Объект.Телефон = "";
		Объект.АдресЭП = "";
		
	КонецЕсли;
	
	Если ПерезаполнитьСНО Тогда
		
		ОрганизацияИспользовалаЕНВД();
		ПроверитьВозможностьРазныхНалоговыхРежимовСкладов();
		ЗаполнитьСистемуНалогообложения();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииТоварыКоличестваУпаковок(ТекущаяСтрока = Неопределено)
	
	Если ТекущаяСтрока = Неопределено Тогда
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект, ПродажаПоЗаказу ИЛИ ДокументРасчетаЗаполнен);
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиТоварыКлиент.ВыделитьАгентскоеВознаграждение(Объект, ЭтотОбъект, СтруктураДействий, ТекущаяСтрока, КэшированныеЗначения);
	
	ОбновитьИтоговыеПоказателиКлиентСервер(ЭтотОбъект);
	Если ПродажаПоЗаказу 
		ИЛИ ДокументРасчетаЗаполнен Тогда
		ОбработкаТабличнойЧастиТоварыКлиентСервер.РаспределитьСуммуИзмененийСтрокиТоваровНаТабличнуюЧастьСкидки(
			Объект.СкидкиНаценки, 
			ТекущаяСтрока.КлючСвязи, 
			ТекущаяСтрока.СуммаАвтоматическойСкидки)
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЧекККМПродажаСервер()
	
	Если НЕ Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		ЦенаВключаетНДС = ОбщегоНазначенияРТ.ЗначениеРеквизитаВПривилегированномРежиме(Объект.Магазин.ПравилоЦенообразования, "ЦенаВключаетНДС");
		Объект.ЦенаВключаетНДС = ЦенаВключаетНДС;
		Элементы.ОплатаЗаполнитьОплатыПоДокументуПродажи.Доступность = Ложь;
	Иначе
		Если ЗначениеЗаполнено(Объект.ЧекККМПродажа) Тогда
			Объект.ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ЧекККМПродажа, "ЦенаВключаетНДС");
			Элементы.ОплатаЗаполнитьОплатыПоДокументуПродажи.Доступность = Истина;
		Иначе
			Элементы.ОплатаЗаполнитьОплатыПоДокументуПродажи.Доступность = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
			Объект.ДисконтнаяКарта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ЧекККМПродажа, "ДисконтнаяКарта");
			Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
				ПриИзмененииДисконтнаяКартаСервер();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьВидНалогаВТЧСервер(Объект.Товары, 
		ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровЗаполненияВидаНалога(Объект));
	
	ЗаполнитьСистемуНалогообложения();
	
	ЗаполнитьСтавкиНДС();
	
	Объект.СерийныеНомера.Очистить();
	Объект.ПогашениеПодарочныхСертификатов.Очистить();
	ЗапасыСервер.УдалитьПодарочныеСертификаты(Объект.Товары);
	
	РаботаСПодарочнымиСертификатами.ДополнитьТоварыОстаткамиПодарочнхСертификатов(Объект, Объект.ЧекККМПродажа);
	
	УстановитьКомандыВидовОплаты();
	
КонецПроцедуры

&НаСервере
Функция ЕстьПравоИзменятьЦену()
	
	Возврат УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);
	
КонецФункции

&НаСервере
Процедура УстановитьАвтоОтметкуТЧТовары()
	
	ЕстьВозможностьПустойТЧТовары = Документы.ЧекККМ.ВозможностьПустойТЧТовары(Объект);
	Элементы.Товары.АвтоОтметкаНезаполненного = НЕ ЕстьВозможностьПустойТЧТовары;
	Элементы.Товары.ОтметкаНезаполненного     = НЕ ЕстьВозможностьПустойТЧТовары;
	
КонецПроцедуры


&НаКлиенте
Процедура ПриИзмененииТоварыНоменклатура(ТекущаяСтрока = Неопределено)
	
	Если ТекущаяСтрока = Неопределено Тогда
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	КонецЕсли;
	
	РозничныеПродажиКлиент.ОчиститьМарки(Объект, ТекущаяСтрока);
	
	СтруктураДействий = Новый Структура;
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ДополнитьСтруктуруДействиямиПриИзмененииЭлемента(Объект, СтруктураДействий, "Номенклатура");
	
	СтруктураДействий.Вставить("ПроверитьСерийныеНомераПоВладельцу",
		ОбработкаТабличнойЧастиТоварыКлиент.СтруктураПроверкиСерийныхНомеровПоВладельцу(ТекущаяСтрока, Объект.СерийныеНомера));
	Если ИспользоватьАссортимент Тогда
		СтруктураДействий.Вставить("ПроверитьАссортиментСтроки", АссортиментКлиентСервер.ПараметрыПроверкиАссортимента(Объект, Истина));
	КонецЕсли;
	СтруктураДействий.Вставить("ПроверитьЗапретРозничнойПродажи", СкидкиНаценкиКлиент.ПараметрыПроверкиЗапретаРозничнойПродажи(Объект));
	
	СтруктураДействий.Вставить("ОчиститьДанныеПоЗаказу");
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	СтруктураПараметровДействия = Новый Структура;
	СтруктураПараметровДействия.Вставить("Магазин", Объект.Магазин);
	СтруктураПараметровДействия.Вставить("РабочееМесто", РабочееМесто);
	СтруктураПараметровДействия.Вставить("Организация", Объект.Организация);
	
	СтруктураДействий.Вставить("ЗаполнитьСкладПродажи", СтруктураПараметровДействия);
	
	СтруктураДействий.Вставить("ЗаполнитьВидНалога", 
		ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровЗаполненияВидаНалога(Объект));
	
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиТоварыКлиент.СтруктураЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина));
	СтруктураДействий.Вставить("ПересчитатьЦенуСУчетомАгентскогоВознаграждения", Новый Структура("Цена", ТекущаяСтрока.Цена));
	
	СтруктураПараметровСтавкиНДС = Новый Структура;
	СтруктураПараметровСтавкиНДС.Вставить("Дата"       , Объект.Дата);
	СтруктураПараметровСтавкиНДС.Вставить("Организация", Объект.Организация);
	
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", СтруктураПараметровСтавкиНДС);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС"           , ОбработкаТабличнойЧастиТоварыКлиент.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки"        , Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	СтруктураДействий.Вставить("ПроставитьПродавца", Объект.Продавец);
	
	ДополнитьСтруктуруДействиямиНДС(СтруктураДействий, ВестиУчетМаркируемойПродукцииИСМП);
	ДополнитьСтруктуруДействиямиГосИС(СтруктураДействий, Объект.ОперацияСДенежнымиСредствами, МаркировкаВключена);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиТоварыКлиент.ВыделитьАгентскоеВознаграждение(Объект, ЭтотОбъект, СтруктураДействий, ТекущаяСтрока, КэшированныеЗначения);
	
	ОбновитьИтоговыеПоказателиКлиентСервер(ЭтотОбъект);
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущаяСтрока.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элементы.Товары, КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьСтатусСерийИПодарочныхСертификатов(ТекущаяСтрока);
	
	Если ПропуститьАвтоматическийРасчетСкидок Тогда
		ПропуститьАвтоматическийРасчетСкидок = Ложь;
	КонецЕсли;
	
	ПроверитьСистемуНалогообложения(Элементы.Товары.ТекущаяСтрока);
	//ПриИзмененииЭлементаГосИС();
	УстановитьДоступностьВидаОперации();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Серии

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения)
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, 
				ПараметрыУказанияСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийСервер()
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусыУказанияСерий()

	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ЧекККМ.ПараметрыУказанияСерий(Объект));
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);

КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий, Знач ПродажаПодарка = Ложь)
	
	СтруктураДействий = Новый Структура();
	
	Если ПараметрыФормыУказанияСерий.ИмяТЧТовары = "Товары" Тогда
		Если НЕ ПродажаПодарка Тогда
			СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку");
			СтруктураДействий.Вставить("ОбновлятьКоличествоТоваровПриРегистрацииСерий", Истина);
			ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(
				СтруктураДействий,
				Объект,
				ПродажаПоЗаказу ИЛИ ДокументРасчетаЗаполнен);
		КонецЕсли;
		
		ТекущиеПараметрыУказанияСерий = ПараметрыУказанияСерий;
	Иначе
		Если НЕ ПродажаПодарка Тогда
			СтруктураДействий.Вставить("ОбновлятьКоличествоТоваровПриРегистрацииСерий", Истина);
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		КонецЕсли;
		
		ТекущиеПараметрыУказанияСерий = Новый Структура(ПараметрыУказанияСерий);
		ТекущиеПараметрыУказанияСерий.Вставить("ИмяТЧТовары", "Подарки");
		ТекущиеПараметрыУказанияСерий.Вставить("ИмяТЧСерии", "СерииПодарков");
		ТекущиеПараметрыУказанияСерий.Вставить("ИмяПоляКоличество", "КоличествоУпаковок");
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыСервер.ОбработатьУказаниеСерий(
		Объект,
		ТекущиеПараметрыУказанияСерий,
		ПараметрыФормыУказанияСерий,
		СтруктураДействий);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор, ПараметрыУказанияСерийВходящие = Неопределено)
	
	Если ПараметрыУказанияСерийВходящие = Неопределено Тогда
		Результат = ОбработкаТабличнойЧастиТоварыСервер.ПоместитьСерииВХранилище(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтотОбъект);
	Иначе
		Результат = ОбработкаТабличнойЧастиТоварыСервер.ПоместитьСерииВХранилище(Объект, ПараметрыУказанияСерийВходящие, ТекущиеДанныеИдентификатор, ЭтотОбъект);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Запрашивает у пользователя скидку и применяет ее к табличной части Товары.
//
&НаСервере
Процедура НазначитьРучнуюСкидкуНаСервере(СуммаСкидкиНаценки)
	
	Если СуммаСкидкиНаценки <> 0 Тогда
		СкидкиНаценкиСервер.НазначитьРучнуюСкидку(Объект, "Товары", СуммаСкидкиНаценки, Истина, Истина);
	Иначе
		СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "Товары", Истина, Истина);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыСервер.ВыделитьАгентскоеВознаграждение(Объект, ЭтотОбъект);
	
КонецПроцедуры

// Очищает ручные скидки в табличной части Товары.
//
&НаСервере
Процедура ОтменитьРучныеСкидкиНаСервере()
	
	СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "Товары", Истина, Истина);
	
	ОбработкаТабличнойЧастиТоварыСервер.ВыделитьАгентскоеВознаграждение(Объект, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиСкидкиПодаркиВТоварыСервер()
	
	ЕстьОшибки = Ложь;
	СкидкиНаценкиСерверПереопределяемый.СообщитьОбОстающихсяПодарках(Объект, ЕстьОшибки);
	Если НЕ ЕстьОшибки Тогда
		СкидкиНаценкиСерверПереопределяемый.ПеренестиСкидкиПодаркиВТовары(Объект, Объект.ЦенаВключаетНДС,,,, Истина);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Подарки);
		
		ПерезаполнитьПризнакиМаркировки();
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
		СкидкиНаценкиСерверПереопределяемый.ОбновитьОтображениеСкидки(Объект);
		ОбновитьИтоговыеПоказателиКлиентСервер(ЭтотОбъект);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Подарки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСкидки(Отказ, ДополнительныеПараметры = Неопределено, ПроверятьРасчет = Истина)
	
	Если ИспользоватьАвтоматическиеСкидкиВПродажах
		И ((НЕ Объект.СкидкиРассчитаны) ИЛИ (НЕ ПроверятьРасчет))
		И НЕ ПродажаПоЗаказу
		И НЕ ДокументРасчетаЗаполнен
		И НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат")
		И Объект.Товары.Количество() > 0 Тогда
		
		РассчитатьСкидкиНаценкиКлиент(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСообщенияПослеОформленияЧека()

	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Ложь);
	СтруктураПараметры.Вставить("УправляемыеСкидки",                УправляемыеСкидки);
	СтруктураПараметры.Вставить("ТолькоСообщенияПослеОформления",   Истина);
	СтруктураПараметры.Вставить("ПеренестиСкидкиПодаркиВТовары");
	СтруктураПараметры.Вставить("КонтролироватьОстаткиТоваров", 	КонтролироватьОстаткиТоваров);
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО.
		РабочееМесто = МенеджерОборудованияКлиентПовтИсп.РабочееМестоКлиента();
	Иначе
		РабочееМесто = ""
	КонецЕсли;
	
	СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
	
	РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	
	Если ВывестиСообщения Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("АдресВоВременномХранилище", АдресПримененныхСкидокВоВременномХранилище);
		ОткрытьФорму("ОбщаяФорма.ФормаВыводаСообщений", ПараметрыФормы, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиНаценкиКлиент(ДополнительныеПараметры = Неопределено)
	
	Если Объект.Товары.Количество() = 0 Тогда
		ОтменитьСкидки();
		ОтменитьОплатуБонусами();
		Возврат;
	КонецЕсли;
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки",                УправляемыеСкидки);
	СтруктураПараметры.Вставить("ТолькоСообщенияПослеОформления",   Ложь);
	СтруктураПараметры.Вставить("ПорядковыйНомерПродажи",           ПорядковыйНомерПродажи);
	СтруктураПараметры.Вставить("ПеренестиСкидкиПодаркиВТовары");
	СтруктураПараметры.Вставить("КонтролироватьОстаткиТоваров", 	КонтролироватьОстаткиТоваров);
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО.
		РабочееМесто = МенеджерОборудованияКлиентПовтИсп.РабочееМестоКлиента();
	Иначе
		РабочееМесто = ""
	КонецЕсли;
	
	СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		Если ДополнительныеПараметры.Свойство("БудетОплатаБонусами") Тогда
			СтруктураПараметры.Вставить("БудетОплатаБонусами", ДополнительныеПараметры.БудетОплатаБонусами);
		КонецЕсли;
	КонецЕсли;
	
	Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	
	Если ВывестиСообщения Тогда
		Если ДополнительныеПараметры = Неопределено Тогда
			ДополнительныеПараметры = Новый Структура;
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеРасчетСкидокКлиент", ЭтотОбъект, ДополнительныеПараметры);
		Иначе
			ОбработчикОповещения = Новый ОписаниеОповещения(ДополнительныеПараметры.ИмяОбработкиОповещения, ЭтотОбъект, ДополнительныеПараметры);
			ДополнительныеПараметры.Вставить("ВыведеныСообщения", Истина);
		КонецЕсли;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("АдресВоВременномХранилище", АдресПримененныхСкидокВоВременномХранилище);
		ОткрытьФорму("ОбщаяФорма.ФормаВыводаСообщений", ПараметрыФормы, ЭтотОбъект, , , , ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ОповещениеРасчетСкидокКлиент();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды "РассчитатьСкидкиНаценки".
//
&НаСервере
Процедура РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры)
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ПеренестиДоговорКотрагентаВТЧ(ЭтотОбъект);
	
	ПримененныеСкидки = СкидкиНаценкиСерверПереопределяемый.Рассчитать(Объект, СтруктураПараметры);
	
	ВывестиСообщения = Ложь;
	
	Если ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
		УдалитьИзВременногоХранилища(АдресПримененныхСкидокВоВременномХранилище);
	КонецЕсли;
	АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	
	Если ПримененныеСкидки.Свойство("ТаблицаПодарковНаВыбор") Тогда
		АдресПодарковНаВыбор = ПоместитьВоВременноеХранилище(ПримененныеСкидки.ТаблицаПодарковНаВыбор, УникальныйИдентификатор);
		ВыдатьПодаркиНаВыбор = Истина;
	Иначе
		АдресПодарковНаВыбор = "";
		ВыдатьПодаркиНаВыбор = Ложь;
	КонецЕсли;
	
	Если ПримененныеСкидки.ТаблицаСообщений.Количество() > 0 Тогда
		ВывестиСообщения = Истина;
	КонецЕсли;
	
	Модифицированность = НЕ СтруктураПараметры.ТолькоСообщенияПослеОформления;
	
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийЧекККМ.Возврат
		И НЕ СтруктураПараметры.ТолькоСообщенияПослеОформления Тогда
		СкидкиНаценкиСервер.ОкруглитьЧекВПользуПокупателя(Объект, "Товары", "СкидкиНаценки");
	КонецЕсли;
	
	СкидкиНаценкиСерверПереопределяемый.ОбновитьОтображениеСкидки(Объект);
	БонусныеБаллыСервер.ОбновитьОтображениеБонусов(Объект);	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Подарки);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	ПараметрыУказанияСерийПодарков = Новый Структура(ПараметрыУказанияСерий);
	ПараметрыУказанияСерийПодарков.Вставить("ИмяТЧТовары", "Подарки");
	ПараметрыУказанияСерийПодарков.Вставить("ИмяТЧСерии", "СерииПодарков");
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерийПодарков);
	
	ОбработкаТабличнойЧастиТоварыСервер.ВыделитьАгентскоеВознаграждение(Объект, ЭтотОбъект);
	
	Если НЕ Объект.СкидкиРассчитаны Тогда
	
		Объект.СкидкиРассчитаны = Истина;
	
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Проведение

&НаСервере
Процедура ПровестиИзФормыСервер(Отказ, ЗапускатьОбработкуПослеЗаписи = Ложь, Объект_Ссылка = Неопределено, Текст)
	
	ЗаписываемыйОбъект = РеквизитФормыВЗначение("Объект");
	
	СтрокаОшибки = "";
	Если ЗаписываемыйОбъект.ПроверитьЗаполнение() Тогда
		Попытка
			Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаСеанса()) Тогда
				ЗаписываемыйОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
			Иначе
				ЗаписываемыйОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			КонецЕсли;
		Исключение
			Отказ = Истина;
		КонецПопытки;
		
		Если ЗаписываемыйОбъект.ДополнительныеСвойства.Свойство("Отказ") Тогда
			Если ЗаписываемыйОбъект.ДополнительныеСвойства.Отказ Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗаписываемыйОбъект.ДополнительныеСвойства.Свойство("ТаблицыДляДвижений")
			И ЗаписываемыйОбъект.ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаПопыткиПродажПревышающихОстаток") Тогда
			
			ПродажиСервер.ОтразитьПопыткиПродаж(ЗаписываемыйОбъект.ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПопыткиПродажПревышающихОстаток, ЗаписываемыйОбъект.Дата);
			
		КонецЕсли;
		
		Объект_Ссылка = ЗаписываемыйОбъект.Ссылка;
		
		Если Отказ Тогда
		
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось провести ""%1"". '"),
					Строка(ЗаписываемыйОбъект)
					);
		ИначеЕсли ЗапускатьОбработкуПослеЗаписи Тогда
			
			ЗначениеВРеквизитФормы(ЗаписываемыйОбъект, "Объект");
			
			ПослеЗаписиНаСервере(Объект, РежимЗаписиДокумента.Проведение);
			
		КонецЕсли;
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Прочее

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект, ПересчитыватьТолькоСуммуСкидки)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	Если ПересчитыватьТолькоСуммуСкидки Тогда
		СтруктураПересчетаСкидок = Новый Структура;
		СтруктураПересчетаСкидок.Вставить("Очищать", Ложь);
		СтруктураПересчетаСкидок.Вставить("ПересчитыватьСуммуСкидки", Истина);
		
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки"        , СтруктураПересчетаСкидок);
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", СтруктураПересчетаСкидок);
	Иначе
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки"        , Новый Структура("Очищать", Ложь));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОплатыПоДокументуПродажиСервер()
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		ПодготовитьСкидкиИОплатуБонусамиКСторнированию();
	КонецЕсли;
	
	ТаблицаОплатыПродажи = Объект.ЧекККМПродажа.Оплата.Выгрузить();
	ТаблицаОплатыПродажи.ЗаполнитьЗначения(Ложь, "ДанныеПереданыВБанк");
	МассивСтрокБонусов = ТаблицаОплатыПродажи.НайтиСтроки(Новый Структура("ВидОплаты", Справочники.ВидыОплатЧекаККМ.ОплатаБонусамиКакСкидкой));
	Для Каждого СтрокаБонуса Из МассивСтрокБонусов Цикл
		ТаблицаОплатыПродажи.Удалить(СтрокаБонуса);
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ДанныеПереданыВБанк", Истина);
	
	СтрокиПереданныеВБанк = Объект.Оплата.НайтиСтроки(СтруктураПоиска);
	
	СтруктураПоиска = Новый Структура("ВидОплаты, ЭквайринговыйТерминал, Сумма, ПроцентКомиссии, СуммаКомиссии, СсылочныйНомер, НомерЧекаЭТ, НомерПлатежнойКарты");
	
	Индекс = 0 ;
	Для каждого СтрокаПереданнаяВБанк Из СтрокиПереданныеВБанк Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПереданнаяВБанк);
		
		СтрокиТаблицыОплатыПродажи = ТаблицаОплатыПродажи.НайтиСтроки(СтруктураПоиска);
		Если СтрокиТаблицыОплатыПродажи.Количество() > 0 Тогда
			Для каждого СтрокаТаблицыОплатыПродажи Из СтрокиТаблицыОплатыПродажи Цикл
				СтрокаТаблицыОплатыПродажи.ДанныеПереданыВБанк = Истина;
			КонецЦикла;
		Иначе
			
			СтрокаТаблицыОплатыПродажи = ТаблицаОплатыПродажи.Вставить(Индекс);
			Индекс = Индекс + 1;
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыОплатыПродажи, СтруктураПоиска);
			СтрокаТаблицыОплатыПродажи.ДанныеПереданыВБанк = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Объект.Оплата.Загрузить(ТаблицаОплатыПродажи);
	
	Для каждого ТекущаяСтрока Из Объект.Оплата Цикл
		ТекущаяСтрока.ПроцентКомиссии = ЭквайрингВызовСервера.ПолучитьПроцентКомиссииПоТерминалу(ТекущаяСтрока.ЭквайринговыйТерминал, ТекущаяСтрока.ВидОплаты, ЭтоВозврат, ЭтоВозвратДеньВДень, ЭтоПолныйВозврат);
		ТекущаяСтрока.СуммаКомиссии   = ТекущаяСтрока.Сумма * ТекущаяСтрока.ПроцентКомиссии / 100;
	КонецЦикла;
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипыОплатВТЧСервер(Объект);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоДополнительнымПравам(ТолькоЦенообразование)
	
	Элементы.ТоварыСуммаРучнойСкидки.ТолькоПросмотр = ЭтоВозврат;
	Элементы.ТоварыПроцентРучнойСкидки.ТолькоПросмотр = ЭтоВозврат;
	Элементы.ТоварыНазначитьРучнуюСкидку.Доступность = НЕ ЭтоВозврат;
	Элементы.ТоварыОтменитьРучныеСкидки.Доступность = НЕ ЭтоВозврат;
	Элементы.ТоварыЦена.ТолькоПросмотр = ЭтоВозврат;
	Элементы.ТоварыСумма.ТолькоПросмотр = ЭтоВозврат;
	Элементы.ПодаркиЦена.ТолькоПросмотр = ЭтоВозврат;
	Элементы.ПодаркиСумма.ТолькоПросмотр = ЭтоВозврат;
	
	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(
		Элементы.ТоварыСуммаРучнойСкидки.ТолькоПросмотр,
		ПланыВидовХарактеристик.ПраваПользователей.ИзменятьРучнуюСкидку);
		
	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(
		Элементы.ТоварыПроцентРучнойСкидки.ТолькоПросмотр,
		ПланыВидовХарактеристик.ПраваПользователей.ИзменятьРучнуюСкидку);
		
	УправлениеПользователями.УстановитьДоступностьДляРеквизитовТабличнойЧасти(
		Элементы.ТоварыНазначитьРучнуюСкидку.Доступность,
		ПланыВидовХарактеристик.ПраваПользователей.ИзменятьРучнуюСкидку);
	
	УправлениеПользователями.УстановитьДоступностьДляРеквизитовТабличнойЧасти(
		Элементы.ТоварыОтменитьРучныеСкидки.Доступность,
		ПланыВидовХарактеристик.ПраваПользователей.ИзменятьРучнуюСкидку);
	
	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(
		Элементы.ТоварыЦена.ТолькоПросмотр,
		ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);
		
	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(
		Элементы.ТоварыСумма.ТолькоПросмотр,
		ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);
		
	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(
		Элементы.ПодаркиЦена.ТолькоПросмотр,
		ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);
		
	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(
		Элементы.ПодаркиСумма.ТолькоПросмотр,
		ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);
	
	Если НЕ ТолькоЦенообразование Тогда
		УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(
			Элементы.Продавец.ТолькоПросмотр,
			ПланыВидовХарактеристик.ПраваПользователей.ИзменятьПродавца);
			
		УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(
			Элементы.ТоварыПродавец.ТолькоПросмотр,
			ПланыВидовХарактеристик.ПраваПользователей.ИзменятьПродавца);
			
		УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(
			Элементы.Дата.ТолькоПросмотр,
			ПланыВидовХарактеристик.ПраваПользователей.ИзменятьДату);
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста

Процедура ОбновитьИтоговыеПоказателиКлиентСервер(Форма, РассчитатьСдачу = Истина)
	
	Объект = Форма.Объект;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, Форма.СуммаВсего);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Оплата, Истина, Форма.СуммаОплачено);
	
	СуммаРучнойСкидки = Объект.Товары.Итог("СуммаРучнойСкидки");
	СуммаАвтоматическойСкидки = Объект.Товары.Итог("СуммаАвтоматическойСкидки");
	СуммаСкидкиОплатыБонусом = Объект.Товары.Итог("СуммаСкидкиОплатыБонусом");
	СкидкиНаценкиИтогСумма = СуммаАвтоматическойСкидки + СуммаРучнойСкидки + СуммаСкидкиОплатыБонусом;
	
	Форма.СкидкиНаценкиИтогСумма = СкидкиНаценкиИтогСумма;
	Форма.СуммаБезСкидки = Форма.СуммаВсего + Форма.СкидкиНаценкиИтогСумма;
	Форма.СуммаКОплате = Форма.СуммаВсего - Форма.СуммаОплачено;
	
	Если РассчитатьСдачу Тогда
		РассчитатьСдачуКлиентСервер(Форма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПлатежнойКартойЧерезЭквайринговыйТерминал(ВыбраннаяСтрока, СуммаОперации, ПределСуммы)
	
	ИдентификаторУстройстваЭТ = Неопределено;
	ИдентификаторУстройстваФР = Неопределено;
	ОписаниеОшибки            = "";
	
	НомерКарты          = "";
	НомерСсылкиОперации = "";
	НомерЧекаЭТ         = "";
	СтрокаСлипЧека      = "";
	ВидКарты            = "";
	НомерЧека           = Объект.Номер;
	
	Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	ИндексСтроки = Объект.Оплата.Индекс(ВыбраннаяСтрока);
	
	Если Объект.Проведен Тогда
		РезультатПроведения = Записать(Новый Структура("РежимЗаписи, РежимПроведения", РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный));
	Иначе
		РезультатПроведения = Записать(Новый Структура("РежимЗаписи, РежимПроведения", РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Оперативный));
	КонецЕсли;
	
	Если НЕ РезультатПроведения Тогда
		Возврат;
	КонецЕсли;
    
    // &ЗамерПроизводительности
    ОценкаПроизводительностиРТКлиент.НачатьЗамер(
             Истина, "Справочник.ПодключаемоеОборудование.Форма.ФормаАвторизацииЭТ.Открытие");
             
	ВыбраннаяСтрока = Объект.Оплата[ИндексСтроки];
		
	СтруктураЭквайринговыйТерминал = СтруктураДанныхЭТ(ВыбраннаяСтрока.ЭквайринговыйТерминал);
	ИдентификаторУстройстваЭТ = СтруктураЭквайринговыйТерминал.ПодключаемоеОборудование;
	ИдентификаторУстройстваФР = ПараметрыКассыККМ.ИдентификаторУстройства;
	
	Если НЕ ИспользоватьПодключаемоеОборудование Тогда
		ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования = Истина;
		СтруктураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования = Истина;
	КонецЕсли;
	
	ИспользоватьКассуККМБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	ИспользоватьБезПодключенияОборудованияЭТ = СтруктураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования;
	
	// Предварительно авторизуем операцию.
	ПараметрыФормы = Новый Структура();
	
	ПараметрыФормы.Вставить("Сумма"      , СуммаОперации);
	ПараметрыФормы.Вставить("ПределСуммы", ПределСуммы);
	ПараметрыФормы.Вставить("ЗапретРедактированияСуммы", Истина);
	
	Если ИспользоватьБезПодключенияОборудованияЭТ Тогда
		ПараметрыФормы.Вставить("ПоказыватьНомерКарты", Истина);   
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ПараметрДействия = Новый Структура;
	ПараметрДействия.Вставить("ИспользоватьКассуККМБезПодключенияОборудования", ИспользоватьКассуККМБезПодключенияОборудования);
	ПараметрДействия.Вставить("ИдентификаторУстройстваФР", ИдентификаторУстройстваФР);
	ПараметрДействия.Вставить("ИспользоватьБезПодключенияОборудованияЭТ", ИспользоватьБезПодключенияОборудованияЭТ);
	ПараметрДействия.Вставить("ИдентификаторУстройстваЭТ", ИдентификаторУстройстваЭТ);
	
	ПараметрДействия.Вставить("ТекстОписаниеОшибки", "");
	ПараметрДействия.Вставить("СтрокаСлипЧека", СтрокаСлипЧека);
	ПараметрДействия.Вставить("ВыбраннаяСтрокаИдентификатор", ВыбраннаяСтрока.ПолучитьИдентификатор());
	ПараметрДействия.Вставить("СуммаОперации", СуммаОперации);
	ПараметрДействия.Вставить("НомерКарты", НомерКарты);
	ПараметрДействия.Вставить("НомерСсылкиОперации", НомерСсылкиОперации);
	ПараметрДействия.Вставить("НомерЧекаЭТ", НомерЧекаЭТ);
	ПараметрДействия.Вставить("НомерЧека", НомерЧека);
	ДополнительныеПараметры.Вставить("ПараметрДействия", ПараметрДействия);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуАвторизацииЭТ", ЭтотОбъект, ДополнительныеПараметры);
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Справочник.ПодключаемоеОборудование.Форма.ФормаАвторизацииЭТ", ПараметрыФормы,,,,, ОбработчикОповещения, Режим); 
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюКлиент(Отказ, РежимЗаписи)
	
	// Если документ проводится, рассчитаем скидки.
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ПроверитьСкидки(Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьСуммуКомиссии(ТекущаяСтрока)
	
	ТекущаяСтрока.СуммаКомиссии = ТекущаяСтрока.Сумма * ТекущаяСтрока.ПроцентКомиссии / 100;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьПогашениеВХранилище(АдресВременногоХранилища)
	
	СуммаДокумента = ?(Объект.ЦенаВключаетНДС, Объект.Товары.Итог("Сумма"), Объект.Товары.Итог("Сумма") + Объект.Товары.Итог("СуммаНДС"));
	СуммаДругихОплат = 0;
	Для Каждого СтрокаОплаты Из Объект.Оплата Цикл
		Если Не СтрокаОплаты.ВидОплаты = Справочники.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом Тогда
			СуммаДругихОплат = СуммаДругихОплат + СтрокаОплаты.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	ИтогоПогашения = 0;
	СуммаКПогашению = СуммаДокумента - СуммаДругихОплат;
	Если СуммаКПогашению = 0 Тогда
		Возврат ;
	КонецЕсли;
	Таблица_ПогашениеПодарочныхСертификатов = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	Для Каждого СтрокаПогашения Из Таблица_ПогашениеПодарочныхСертификатов Цикл
		НоваяСтрокаПогашения = Объект.ПогашениеПодарочныхСертификатов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПогашения, СтрокаПогашения);
		Если СтрокаПогашения.ЧастичноеПогашение Или СтрокаПогашения.ПроизвольныйНоминал Тогда
			СуммаПоСертификату = СтрокаПогашения.Остаток;
		Иначе
			СуммаПоСертификату = СтрокаПогашения.Номинал;
		КонецЕсли;
		СуммаПогашенияСертификата = Мин(СуммаКПогашению, СуммаПоСертификату);
		НоваяСтрокаПогашения.СуммаПогашенияСертификата = СуммаПогашенияСертификата;
		ИтогоПогашения = ИтогоПогашения + СуммаПогашенияСертификата;
		
		СуммаКПогашению = СуммаКПогашению - СуммаПогашенияСертификата;
		Если СуммаКПогашению = 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Таблица_ПогашениеПодарочныхСертификатов.Количество() = 0 Тогда
	
		СтрокиКУдалению = Объект.Оплата.НайтиСтроки(Новый Структура("ВидОплаты", Справочники.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом));
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		
			Объект.Оплата.Удалить(Объект.Оплата.Индекс(СтрокаКУдалению));
		
		КонецЦикла;
	Иначе
		СтрокиТаблицы = Объект.Оплата.НайтиСтроки(Новый Структура("ВидОплаты", Справочники.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом));
		Если СтрокиТаблицы.Количество() = 0  Тогда
			СтрокаТаблицы = Объект.Оплата.Добавить();
			СтрокаТаблицы.ВидОплаты = Справочники.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом;
		Иначе
			СтрокаТаблицы = СтрокиТаблицы[0];
		КонецЕсли;
		
		СтрокаТаблицы.Сумма = Мин(СуммаДокумента, ИтогоПогашения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтруктураДанныхЭТ(Терминал)
	
	Возврат РозничныеПродажиСервер.СтруктураДанныхЭТ(Терминал);
	
КонецФункции

// Функция считает сумму, оплаченную безналичными.
//
// Возвращаемое значение:
//  Число - сумма, оплаченная безналичными.
//
&НаСервере
Функция СуммаБезналичнойОплаты() 

	СуммаБезналичнойОплаты = 0;
	Для Каждого ТекОплата Из Объект.Оплата Цикл
		Если ЗначениеЗаполнено(ТекОплата.ВидОплаты) И ТекОплата.ВидОплаты.ТипОплаты <> Перечисления.ТипыОплатЧекаККМ.Наличные 
		И НЕ ТекОплата.ВидОплаты = Справочники.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом Тогда
			СуммаБезналичнойОплаты = СуммаБезналичнойОплаты + ТекОплата.Сумма;
		КонецЕсли;
	КонецЦикла;

	Возврат СуммаБезналичнойОплаты;

КонецФункции

&НаСервере
// Функция считает сумму, оплаченную подарочными сертификатами.
//
// Возвращаемое значение:
//  Число - сумма, оплаченная подарочными сертификатами.
//
Функция СуммаОплатыПодарочнымиСертификатами() 

	СуммаОплаты = 0;
	Для Каждого ТекОплата Из Объект.Оплата Цикл
		Если ТекОплата.ВидОплаты = Справочники.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом Тогда
			СуммаОплаты = СуммаОплаты + ТекОплата.Сумма;
		КонецЕсли;
	КонецЦикла;

	Возврат СуммаОплаты;

КонецФункции

&НаСервереБезКонтекста
Функция ТипОплатыПоВиду(ВидОплаты)

	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидОплаты, "ТипОплаты");

КонецФункции

&НаСервере
Функция ПоместитьПогашениеВХранилище()

	Возврат ОбщегоНазначенияРТ.ПоместитьВоВременноеХранилищеТабличнуюЧастьОбъекта(Объект, "ПогашениеПодарочныхСертификатов", УникальныйИдентификатор);

КонецФункции

&НаСервере
Функция ПоместитьСкидкиВХранилище()

	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("СкидкиНаценки", Объект.СкидкиНаценки.Выгрузить());
	СтруктураТаблиц.Вставить("Подарки", Объект.Подарки.Выгрузить());
	СтруктураТаблиц.Вставить("БонусныеБаллыКНачислению", Объект.БонусныеБаллыКНачислению.Выгрузить());
	
	Адрес = ПоместитьВоВременноеХранилище(СтруктураТаблиц, УникальныйИдентификатор);
	
	Возврат Адрес;

КонецФункции

#Область ПробитиеЧека

&НаКлиенте
Процедура ПробитьЧекВыполнить(ОповещениеПриЗавершении)
	
	ИдентификаторУстройстваФР = ПараметрыКассыККМ.ИдентификаторУстройства;
	
	ИспользоватьКассуККМБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	
	Если НЕ ИспользоватьПодключаемоеОборудование ИЛИ ИспользоватьКассуККМБезПодключенияОборудования Тогда
		
		Объект.НомерСменыККМ = 0;
		
		Если НомерДокументаКассыККМ[Объект.КассаККМ] <> Неопределено Тогда
			Объект.НомерЧекаККМ  = НомерДокументаКассыККМ[Объект.КассаККМ];
		Иначе
			Объект.НомерЧекаККМ  = ПорядковыйНомерПродажи;
		КонецЕсли;
		
		Объект.СтатусЧекаККМ = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробитый");
		Объект.Дата          = ОбщегоНазначенияКлиент.ДатаСеанса();
		
		Модифицированность = Истина;
		РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
		Если РезультатЗаписи = Истина Тогда
			ПогаситьОднократныеСкидки();
			РезультатОбработкиНакоплений = СкидкиНаценкиВызовСервера.РезультатОбработкиНакопленийВДисконтномСервере(Объект.Ссылка);
			Если РезультатОбработкиНакоплений.Свойство("СообщениеПользователю") Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатОбработкиНакоплений.СообщениеПользователю);
			КонецЕсли;
		КонецЕсли;
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатЗаписи = Истина);
		Возврат;
	КонецЕсли;
	
	Если ИдентификаторУстройстваФР <> Неопределено Тогда
		
		ЭтотОбъект.Доступность = Ложь;
		
		НомерЧека = НомерДокументаКассыККМ[Объект.КассаККМ] + 1;;
		ТекстСообщенияЕГАИС = НСтр("ru = ''");
		
		ОбщиеПараметры = ПодготовитьДанныеДляПробитияЧека(НомерЧека);
		
		ОбщиеПараметры.Вставить("ТекстСообщенияЕГАИС", ТекстСообщенияЕГАИС);
		ОбщиеПараметры.Вставить("ПечатьИзФормыЧека", Истина);
		
		ПроверитьКодМаркировкиСредствамиККТ(ОбщиеПараметры);
		
	Иначе
		ТекстСообщения = НСтр("ru = 'Устройство для печати чеков не выбрано.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Ложь);
	КонецЕсли;
	
	ОбменССайтомРТВызовСервера.ЗаписатьСостояниеОплатыЗаказаПокупателя(Объект.ЗаказПокупателя, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКодМаркировкиСредствамиККТ(ПараметрыЧекаККТ)
	
	ПараметрыЧека = Новый Массив;
	ПараметрыЧека.Добавить(ПараметрыЧекаККТ);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПроверитьКодМаркировкиСредствамиККТЗавершение", ЭтотОбъект, ПараметрыЧекаККТ);
	
	РозничныеПродажиКлиент.ПроверитьКодМаркировкиСредствамиККТ(ПараметрыЧека, ЭтотОбъект, НСтр("ru = 'Пробить чек'"), ОповещениеОЗавершении);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКодМаркировкиСредствамиККТЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат И ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		
		ИдентификаторЧекаВОчереди = ОборудованиеЧекопечатающиеУстройстваВызовСервера.ДобавитьЧекВОчередьЧековККТ(ДополнительныеПараметры);
		
		Оповещение = Новый ОписаниеОповещения("ПоместитьЧекВОчередь", ЭтотОбъект);
		ВыполнитьОбработкуОповещения(Оповещение);
		
	Иначе
		ЭтотОбъект.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоместитьЧекВОчередь(РезультатВыполнения, ПараметрыОперации) Экспорт
	
	Если Не ИспользуетсяСистемаВзаимодействия Тогда
		МенеджерОборудованияКлиент.ФискализацияЧековВОчереди(Ложь);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ПроверитьСтатусЧека", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекОчередиВыполнитьЗавершение(РезультатВыполнения) Экспорт
	
	ЭтотОбъект.Доступность = Истина;
	
	Если РезультатВыполнения.ЧекПробит Тогда
		
		Модифицированность = Истина;
		
		ПогаситьОднократныеСкидки();
		РезультатОбработкиНакоплений = СкидкиНаценкиВызовСервера.РезультатОбработкиНакопленийВДисконтномСервере(Объект.Ссылка);
		Если РезультатОбработкиНакоплений.Свойство("СообщениеПользователю") Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатОбработкиНакоплений.СообщениеПользователю);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСтатусЧека()
	
	СтатусЧека = ОборудованиеЧекопечатающиеУстройстваВызовСервера.ПолучитьСтатусЧекаВОчереди(ИдентификаторЧекаВОчереди);
	
	ПараметрыОперации = Новый Структура;
	Если СтатусЧека.СтатусЧека = ПредопределенноеЗначение("Перечисление.СтатусЧекаККТВОчереди.Фискализирован") Тогда
		
		ПараметрыОперации = Новый Структура;
		ПараметрыОперации.Вставить("НомерСмены"   , СтатусЧека.НомерСменыККМ);
		ПараметрыОперации.Вставить("НомерЧека"    , СтатусЧека.НомерЧекаККМ);
		ПараметрыОперации.Вставить("СтатусЧекаККМ", СтатусЧека.СтатусЧека);
		ПараметрыОперации.Вставить("ЧекПробит", Истина);
		ПараметрыОперации.Вставить("ЧекККМСсылка", СтатусЧека.ДокументОснование);
		
		ПробитьЧекОчередиВыполнитьЗавершение(ПараметрыОперации);
		
	ИначеЕсли СтатусЧека.СтатусЧека = ПредопределенноеЗначение("Перечисление.СтатусЧекаККТВОчереди.Ошибка") Тогда
		
		ПараметрыОперации = Новый Структура;
		ПараметрыОперации.Вставить("НомерСмены"   , СтатусЧека.НомерСменыККМ);
		ПараметрыОперации.Вставить("НомерЧека"    , СтатусЧека.НомерЧекаККМ);
		ПараметрыОперации.Вставить("СтатусЧекаККМ", СтатусЧека.СтатусЧека);
		ПараметрыОперации.Вставить("ЧекПробит", Ложь);
		ПараметрыОперации.Вставить("ЧекККМСсылка", СтатусЧека.ДокументОснование);
		ПараметрыОперации.Вставить("ТекстОшибки", СтатусЧека.ТекстОшибки);
		
		Если НЕ Объект.ОперацияСДенежнымиСредствами Тогда
			ДеактивироватьСкидкиПоИдентификаторуЧека();
		КонецЕсли;
		
		ЗаголовокИнформации = НСтр("ru = 'При печати чека произошла ошибка.'");
		//{ds
		ОшибкаФРНедоступен = СтрНайти(СтатусЧека.ТекстОшибки, "Порт недоступен") <> 0 ИЛИ СтрНайти(СтатусЧека.ТекстОшибки, "Нет связи") <> 0
							  ИЛИ СтрНайти(СтатусЧека.ТекстОшибки, "Connect timed out") <> 0;
		ОшибкаФРЗанят = СтрНайти(СтатусЧека.ТекстОшибки, "Порт занят") <> 0;
		Если ОшибкаФРНедоступен Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось установить связь с фискальным регистратором.
			|
			|Возможные причины:
			|1. Выключен фискальный регистратор.
			|2. Плохо вставлен или отключен кабель от фр-а к компьютеру.
			|
			|Если после устранения возможных причин не получается пробить чек, необходимо обратиться в техподдержку'");
		ИначеЕсли ОшибкаФРЗанят Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось установить связь с фискальным регистратором.
			|
			|Возможные причины:
			|1. Открыт еще один сеанс 1с, попробуйте закрыть все 1с и попробовать пробить чек снова.
			|
			|Если после устранения возможных причин не получается пробить чек, необходимо обратиться в техподдержку'");
		Иначе
		//}
			ТекстСообщения = НСтр("ru = 'Чек не напечатан на устройстве для печати чеков.
			|Дополнительное описание: %ДополнительноеОписание%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", СтатусЧека.ТекстОшибки);
		//{ds
		КонецЕсли;
		//}
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		ОборудованиеЧекопечатающиеУстройстваВызовСервера.УдалитьЧекИзОчереди(СтатусЧека.ДокументОснование);
	Иначе
		ПодключитьОбработчикОжидания("ПроверитьСтатусЧека", 0.1, Истина);
		Возврат;
	КонецЕсли;
	
	ПробитьЧекНаКлиентеЗавершение(ПараметрыОперации.ЧекПробит, Параметры);
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "НапечататьЧек" командной панели.
//
&НаКлиенте
Процедура ПробитьЧекНаКлиенте()
	
	ОчиститьСообщения();
	
	// Выполним проверки перед пробитием чека.
	ЕстьОшибки = Ложь;
	Ошибки = Неопределено;
	
	ПроверитьИспользованиеПодключаемогоОборудования(ИспользоватьПодключаемоеОборудование);
	ИспользоватьКассуККМБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	
	Если Не ИспользоватьПодключаемоеОборудование И Не ИспользоватьКассуККМБезПодключенияОборудования Тогда
		ТекстОшибки = НСтр("ru = 'При пробитии чека произошла ошибка. Чек не пробит. Необходимо проверить оборудование.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "", ТекстОшибки);
	КонецЕсли;
	
	Если Объект.ПометкаУдаления Тогда
		ТекстОшибки = НСтр("ru='Документ помечен на удаление'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "", ТекстОшибки);
	ИначеЕсли НЕ Объект.Проведен ИЛИ ЭтотОбъект.Модифицированность Тогда
		ТекстОшибки = НСтр("ru = 'Необходимо провести документ перед пробитием'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "", ТекстОшибки);
	КонецЕсли;
	
	Если Объект.НомерЧекаККМ <> 0 Тогда
		ТекстСообщения = НСтр("ru = 'Чек уже пробит на фискальном регистраторе'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "", ТекстОшибки);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, ЕстьОшибки);
	
	ПроверитьСкидки(ЕстьОшибки);
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	СписокНоменклатуры = Новый СписокЗначений;
	Если РозничныеПродажиКлиент.ЭтоВозвратПродукцииИСМПБезУказанияМарок(Объект, СписокНоменклатуры) Тогда
		ПодтвердитьВозвратПродукцииИСМПБезМарок(СписокНоменклатуры);
	Иначе
		ПробитьЧекНаКлиентеПродолжение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекНаКлиентеПродолжение()
	
	Если ПроверитьЗаполнение() Тогда
		// &ЗамерПроизводительности 
		Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, 
										 "Документ.ЧекККМ.Форма.ФормаДокумента.Команда.ПробитьЧек",
																 Ложь);
		ЭтотОбъект.Доступность = Ложь;
		
		Оповещение = Новый ОписаниеОповещения("ПробитьЧекНаКлиентеЗавершение", ЭтотОбъект);
		ПробитьЧекВыполнить(Оповещение);
	КонецЕсли;
	
	ЭтоВозвратПродукцииИСМПБезМарки = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекНаКлиентеЗавершение(ЧекПробит, ПараметрыОперации) Экспорт
	
	ЭтотОбъект.Доступность = Истина;
	
	Если ЧекПробит Тогда
		ТолькоПросмотр = Истина;
		УстановитьДоступностьКнопокПроведенияКлиент();
		ПроверитьСообщенияПослеОформленияЧека();
		НомерДокументаКассыККМ[Объект.КассаККМ] = Объект.НомерЧекаККМ +	1;
		ПорядковыйНомерПродажи = ПорядковыйНомерПродажи + 1;
	
		// &ЗамерПроизводительности 
		ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);
		
	КонецЕсли;
	
	ШтрихкодированиеИСМПВызовСервера.ОчиститьРезультатыПроверкиСредствамиККТ(Объект.Ссылка);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ОбщаяКомандаФискальныеОперации", "Видимость", ЧекПробит);
	
КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСдачуКлиентСервер(Форма)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ВидОплаты", ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.Наличные"));
	
	СуммаНаличных  = 0;
	СтрокиНаличных = Форма.Объект.Оплата.НайтиСтроки(СтруктураПоиска);
	
	Для каждого СтрокаНаличных Из СтрокиНаличных Цикл
		СуммаНаличных = СуммаНаличных + СтрокаНаличных.Сумма;
	КонецЦикла;
	
	Форма.Сдача = Макс(Форма.Объект.Оплата.Итог("Сумма") - Форма.СуммаВсего, 0);
	Форма.Сдача = Мин(Форма.Сдача, СуммаНаличных);
	
КонецПроцедуры

// Процедура сообщает о необходимости заполнения реквизитов документа при вызове подбора.
// Параметры:
//  Отказ - Булево
&НаКлиенте
Процедура СообщитьОбОшибкахОткрытияПодбора(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Поле ""Магазин"" не заполнено'"), Объект, "Объект.Магазин",,Отказ);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОплатуКартойЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтотОбъект.Доступность = Истина;
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru = 'При выполнении операции возникла ошибка:
			|""%ОписаниеОшибки%"".
			|Оплата по карте не была произведена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	Иначе
		ЗавершитьОтменуОплатыПлатежнойКартойЧерезЭквайринговыйТерминал(Истина, Параметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьОплатуКартойЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтотОбъект.Доступность = Истина;
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru = 'При выполнении операции возникла ошибка:
			|""%ОписаниеОшибки%"".
			|Возврат оплаты по карте не был произведен.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	Иначе
		
		ЗавершитьВозвратОплатыПлатежнойКартойЧерезЭквайринговыйТерминал(Истина, Параметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОплатуКартой(ТекущиеДанные)
	
	ИдентификаторУстройстваЭТ = Неопределено;
	ИдентификаторУстройстваФР = Неопределено;
	
	СуммаОперации       = ТекущиеДанные.Сумма;
	НомерКарты          = ТекущиеДанные.НомерПлатежнойКарты;
	НомерСсылкиОперации = ТекущиеДанные.СсылочныйНомер;
	НомерЧекаЭТ         = ТекущиеДанные.НомерЧекаЭТ;
	СтрокаСлипЧека      = "";
		
	СтруктураЭквайринговыйТерминал = СтруктураДанныхЭТ(ТекущиеДанные.ЭквайринговыйТерминал);
	ИдентификаторУстройстваЭТ = СтруктураЭквайринговыйТерминал.ПодключаемоеОборудование;
	
	ИдентификаторУстройстваФР  = ПараметрыКассыККМ.ИдентификаторУстройства;
	Если НЕ ИспользоватьПодключаемоеОборудование Тогда
		ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования = Истина;
		СтруктураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования = Истина;
	КонецЕсли;
	
	ИспользоватьКассуККМБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	ИспользоватьБезПодключенияОборудованияЭТ = СтруктураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования;
	
	ПараметрДействия = Новый Структура;
	ПараметрДействия.Вставить("ИспользоватьКассуККМБезПодключенияОборудования", ИспользоватьКассуККМБезПодключенияОборудования);
	ПараметрДействия.Вставить("ИдентификаторУстройстваФР", ИдентификаторУстройстваФР);
	ПараметрДействия.Вставить("ИспользоватьБезПодключенияОборудованияЭТ", ИспользоватьБезПодключенияОборудованияЭТ);
	ПараметрДействия.Вставить("ИдентификаторУстройстваЭТ", ИдентификаторУстройстваЭТ);
	ПараметрДействия.Вставить("ТекстОписаниеОшибки", "");
	ПараметрДействия.Вставить("СтрокаСлипЧека", СтрокаСлипЧека);
	ПараметрДействия.Вставить("ВыбраннаяСтрокаИдентификатор", ТекущиеДанные.ПолучитьИдентификатор());
	ПараметрДействия.Вставить("СуммаОперации", СуммаОперации);
	ПараметрДействия.Вставить("НомерСсылкиОперации", НомерСсылкиОперации);
	ПараметрДействия.Вставить("НомерЧекаЭТ", НомерЧекаЭТ);
	
	Если НЕ ИспользоватьБезПодключенияОборудованияЭТ Тогда
		
		ЭтотОбъект.Доступность = Ложь;
			
		ПараметрыОперации = ОборудованиеПлатежныеСистемыКлиентСервер.ПараметрыВыполненияЭквайринговойОперации();
		ПараметрыОперации.ТипТранзакции  = "AuthorizeVoid";
		ПараметрыОперации.СуммаОперации  = СуммаОперации;
		ПараметрыОперации.НомерКарты     = НомерКарты;
		ПараметрыОперации.НомерЧекаЭТ    = НомерЧекаЭТ;
		ПараметрыОперации.СсылочныйНомер = НомерСсылкиОперации;
		
		Оповещение = Новый ОписаниеОповещения("УдалитьОплатуКартойЗавершение", ЭтотОбъект, ПараметрДействия);
		ОборудованиеПлатежныеСистемыКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(Оповещение, УникальныйИдентификатор, 
			ПараметрДействия.ИдентификаторУстройстваЭТ, ПараметрыОперации, Неопределено, ПараметрДействия.ИдентификаторУстройстваФР);
	
	Иначе
		
		ТекстВопроса = НСтр("ru = 'Требуется выполнить операцию отмены оплаты на эквайринговом терминале.'") + Символы.ПС;
		ТекстВопроса = ТекстВопроса + НСтр("ru = 'Сумма операции:'")        + " "+ СуммаОперации         + Символы.ПС;
		ТекстВопроса = ТекстВопроса + НСтр("ru = 'Номер карты:'")           + " "+ НомерКарты            + Символы.ПС;
		ТекстВопроса = ТекстВопроса + НСтр("ru = 'Ссылочный номер:'")       + " "+ НомерСсылкиОперации   + Символы.ПС;
		ТекстВопроса = ТекстВопроса + НСтр("ru = 'Номер чека:'")            + " "+ НомерЧекаЭТ           + Символы.ПС;
		ТекстВопроса = ТекстВопроса + Символы.ПС;
		ТекстВопроса = ТекстВопроса + НСтр("ru = 'Операция отмены оплаты на эквайринговом терминале прошла успешно?'");
		
		ДополнительныеПараметры = Новый Структура; 
		ДополнительныеПараметры.Вставить("ПараметрДействия", ПараметрДействия);
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросУспешностиОтменыОперацииНаЭТ", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьОплатуКартой(ТекущиеДанные)
	
	ИдентификаторУстройстваЭТ = Неопределено;
	ИдентификаторУстройстваФР = Неопределено;
	
	СуммаОперации       = ТекущиеДанные.Сумма;
	НомерКарты          = ТекущиеДанные.НомерПлатежнойКарты;
	НомерСсылкиОперации = ТекущиеДанные.СсылочныйНомер;
	НомерЧекаЭТ         = ТекущиеДанные.НомерЧекаЭТ;
	СтрокаСлипЧека      = "";
		
	СтруктураЭквайринговыйТерминал = СтруктураДанныхЭТ(ТекущиеДанные.ЭквайринговыйТерминал);
	ИдентификаторУстройстваЭТ = СтруктураЭквайринговыйТерминал.ПодключаемоеОборудование;
	
	ИдентификаторУстройстваФР  = ПараметрыКассыККМ.ИдентификаторУстройства;
	Если НЕ ИспользоватьПодключаемоеОборудование Тогда
		ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования = Истина;
		СтруктураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования = Истина;
	КонецЕсли;
	
	ИспользоватьКассуККМБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	ИспользоватьБезПодключенияОборудованияЭТ = СтруктураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования;
	
	ПараметрДействия = Новый Структура;
	ПараметрДействия.Вставить("ИспользоватьКассуККМБезПодключенияОборудования", ИспользоватьКассуККМБезПодключенияОборудования);
	ПараметрДействия.Вставить("ИдентификаторУстройстваФР", ИдентификаторУстройстваФР);
	ПараметрДействия.Вставить("ИспользоватьБезПодключенияОборудованияЭТ", ИспользоватьБезПодключенияОборудованияЭТ);
	ПараметрДействия.Вставить("ИдентификаторУстройстваЭТ", ИдентификаторУстройстваЭТ);
	ПараметрДействия.Вставить("ТекстОписаниеОшибки", "");
	ПараметрДействия.Вставить("СтрокаСлипЧека", СтрокаСлипЧека);
	ПараметрДействия.Вставить("ВыбраннаяСтрокаИдентификатор", ТекущиеДанные.ПолучитьИдентификатор());
	ПараметрДействия.Вставить("СуммаОперации", СуммаОперации);
	ПараметрДействия.Вставить("НомерСсылкиОперации", НомерСсылкиОперации);
	ПараметрДействия.Вставить("НомерЧекаЭТ", НомерЧекаЭТ);
	
	Если НЕ ИспользоватьБезПодключенияОборудованияЭТ Тогда
		
		ЭтотОбъект.Доступность = Ложь;
			
		ПараметрыОперации = ОборудованиеПлатежныеСистемыКлиентСервер.ПараметрыВыполненияЭквайринговойОперации();
		ПараметрыОперации.ТипТранзакции  = "AuthorizeRefund";
		ПараметрыОперации.СуммаОперации  = СуммаОперации;
		ПараметрыОперации.НомерКарты     = НомерКарты;
		ПараметрыОперации.НомерЧекаЭТ    = НомерЧекаЭТ;
		ПараметрыОперации.СсылочныйНомер = НомерСсылкиОперации;
		
		Оповещение = Новый ОписаниеОповещения("ВернутьОплатуКартойЗавершение", ЭтотОбъект, ПараметрДействия);
		ОборудованиеПлатежныеСистемыКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(Оповещение, УникальныйИдентификатор, 
			ПараметрДействия.ИдентификаторУстройстваЭТ, ПараметрыОперации, Неопределено, ПараметрДействия.ИдентификаторУстройстваФР);
	
	Иначе
		
		ТекстВопроса = НСтр("ru = 'Требуется выполнить операцию возврата оплаты на эквайринговом терминале.'") + Символы.ПС;
		ТекстВопроса = ТекстВопроса + НСтр("ru = 'Сумма операции:'")        + " "+ СуммаОперации         + Символы.ПС;
		ТекстВопроса = ТекстВопроса + НСтр("ru = 'Номер карты:'")           + " "+ НомерКарты            + Символы.ПС;
		ТекстВопроса = ТекстВопроса + НСтр("ru = 'Ссылочный номер:'")       + " "+ НомерСсылкиОперации   + Символы.ПС;
		ТекстВопроса = ТекстВопроса + НСтр("ru = 'Номер чека:'")            + " "+ НомерЧекаЭТ           + Символы.ПС;
		ТекстВопроса = ТекстВопроса + Символы.ПС;
		ТекстВопроса = ТекстВопроса + НСтр("ru = 'Операция возврата оплаты на эквайринговом терминале прошла успешно?'");
		
		ДополнительныеПараметры = Новый Структура; 
		ДополнительныеПараметры.Вставить("ПараметрДействия", ПараметрДействия);
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросУспешностиВозвратаОплатыНаЭТ", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКнопокПроведенияКлиент()
	
	Если Элементы.Найти("ФормаПровестиИЗакрытьИзФормы") <> Неопределено Тогда
		Элементы.ФормаПровестиИЗакрытьИзФормы.Доступность = НЕ ТолькоПросмотр;
	КонецЕсли;
	
	Если Элементы.Найти("ФормаПровестиИзФормы") <> Неопределено Тогда
		Элементы.ФормаПровестиИзФормы.Доступность         = НЕ ТолькоПросмотр;
	КонецЕсли;
	
	Если Элементы.Найти("ТоварыФискальныеДанные") <> Неопределено Тогда
		Элементы.ТоварыФискальныеДанные.Видимость = ИспользоватьКомиссионнуюТорговлю И Объект.НомерЧекаККМ <> 0;
	КонецЕсли;
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
																"ФормаПробитьЧек",
																"Доступность", 
																Объект.Проведен И НЕ ТолькоПросмотр);
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКнопокПроведенияСервер()
	
	Если Элементы.Найти("ФормаПровестиИЗакрытьИзФормы") <> Неопределено Тогда
		Элементы.ФормаПровестиИЗакрытьИзФормы.Доступность = НЕ ТолькоПросмотр;
	КонецЕсли;
	
	Если Элементы.Найти("ФормаПровестиИзФормы") <> Неопределено Тогда
		Элементы.ФормаПровестиИзФормы.Доступность         = НЕ ТолькоПросмотр;
	КонецЕсли;
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
																"ФормаПробитьЧек",
																"Доступность", 
																Объект.Проведен И НЕ ТолькоПросмотр);
КонецПроцедуры

// Устанавливает доступность элементов по виду операции.
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура УстановитьДоступностьПоВидуОперацииКлиент()
	
	ЭтоВозврат = Объект.ВидОперации = ЗначениеПеречислениеВидОперацииВозврат;
	
	Элементы.АналитикаХозяйственнойОперации.ТолькоПросмотр = НЕ ЭтоВозврат;
	Элементы.ЧекККМПродажа.ТолькоПросмотр                  = НЕ ЭтоВозврат;
	Элементы.ДисконтнаяКарта.ТолькоПросмотр                = ЭтоВозврат;
	
КонецПроцедуры

// Устанавливает значение выбора чека возврата.
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура УстановитьПараметрыВыбораЧекаККМПродажиКлиент()

	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.КассаККМ"   , Объект.КассаККМ));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВидОперации",ЗначениеПеречислениеВидОперацииПродажа));
	
	МассивСтатусовЧекаККМ = Новый Массив;
	
	МассивСтатусовЧекаККМ.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.ПустаяСсылка"));
	МассивСтатусовЧекаККМ.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробитый"));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.СтатусЧекаККМ",Новый ФиксированныйМассив(МассивСтатусовЧекаККМ)));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Проведен", Истина));
	
	Элементы.ЧекККМПродажа.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);

КонецПроцедуры

&НаСервере
Функция ПараметрыДляНазначенияРучнойСкидки()
	
	Возврат СкидкиНаценкиСервер.ПараметрыДляНазначенияРучнойСкидки(Объект);
	
КонецФункции

&НаКлиенте
Процедура ДобавитьОплатуНаличными()
	
	ДополнительныеПараметры = Неопределено;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
		
		ПодготовитьСкидкиИОплатуБонусамиКСторнированию();
		
	Иначе
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяОбработкиОповещения", "ОповещениеДобавитьОплатуНаличными");
		
		Отказ = Ложь;
		ПроверитьСкидки(Отказ, ДополнительныеПараметры);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("ВыведеныСообщения") Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ОповещениеДобавитьОплатуНаличными(Неопределено, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКомандыВидовОплаты()

	ПлатежнаяКарта = ЗначениеНастроекПовтИсп.ВидОплатыПоТипу(Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта);
	
	Если ПлатежнаяКарта = Неопределено Тогда
		Элементы.ОплатаПлатежнаяКарта.Заголовок = Элементы.ОплатаПлатежнаяКарта.Заголовок + "...";
	КонецЕсли;
	
	БанковскийКредит = ЗначениеНастроекПовтИсп.ВидОплатыПоТипу(Перечисления.ТипыОплатЧекаККМ.БанковскийКредит);
	
	Если БанковскийКредит = Неопределено Тогда
		Элементы.ОплатаБанковскийКредит.Заголовок = Элементы.ОплатаБанковскийКредит.Заголовок + "...";
	КонецЕсли;

	ВидОплаты		  = Объект.Оплата.Выгрузить().ВыгрузитьКолонку("ВидОплаты");
	Интеграции 		  = РегистрыСведений.СоответствиеНастроекИнтеграции.НастройкиИнтеграции(Объект.Организация, Объект.Магазин);
	
	ОтменаОплаты	  = Ложь;
	ОплатаQR		  = Ложь;
	
	Если Интеграции <> Неопределено
		И Интеграции.Количество() Тогда
		
		ОплатаQR = Истина;
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
			
			Для Каждого НастройкаИнтеграции ИЗ Интеграции Цикл
				
				Если ВидОплаты.Найти(НастройкаИнтеграции.ВидОплаты) <> Неопределено Тогда
				
					НастройкиОпераций = ИнтеграцияСПлатежнымиСистемами.НастройкиТорговойТочки(Интеграции[0].Интеграция);
					ОтменаОплаты	  = НастройкиОпераций.ОтменаОплаты;
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ФормаОтменитьОплатуВПлатежнойСистеме.Видимость = ОтменаОплаты;
	Элементы.ОплатаQRКодом.Видимость						= ОплатаQR;
	
	Если ОплатаQR Тогда
		ПроверитьВозможностьВозвратаПлатежнойСистемой();
	КонецЕсли;
	
	Элементы.ОплатаОплатитьЭСНСПК.Видимость = Не ЭтоВозврат;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВидОплатыПоТипу(ТипыОплаты)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	ВидыОплатЧекаККМ.Ссылка
	|ИЗ
	|	Справочник.ВидыОплатЧекаККМ КАК ВидыОплатЧекаККМ
	|ГДЕ
	|	НЕ ВидыОплатЧекаККМ.ПометкаУдаления
	|	И ВидыОплатЧекаККМ.ТипОплаты = &ТипыОплаты";
	Запрос.УстановитьПараметр("ТипыОплаты", ТипыОплаты);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура УстановитьЭквайринговыйТерминалПоУмолчанию(ТекущаяСтрока = Неопределено)
	
	Если ТекущаяСтрока = Неопределено Тогда
		
		ЭквайринговыйТерминалПоУмолчанию = ПолучитьЭквайринговыйТерминалПоУмолчанию(Неопределено);
		Для Каждого ТекущаяСтрока Из Объект.Оплата Цикл 
			
			ТекущаяСтрока.ЭквайринговыйТерминал = ЭквайринговыйТерминалПоУмолчанию;
			ТекущаяСтрока.ПроцентКомиссии = ЭквайрингВызовСервера.ПолучитьПроцентКомиссииПоТерминалу(ТекущаяСтрока.ЭквайринговыйТерминал, ТекущаяСтрока.ВидОплаты, ЭтоВозврат, ЭтоВозвратДеньВДень, ЭтоПолныйВозврат);
			ПересчитатьСуммуКомиссии(ТекущаяСтрока);
			ТекущаяСтрока.ТипОплаты = ТипОплатыПоВиду(ТекущаяСтрока.ВидОплаты);
			
		КонецЦикла;
		
	Иначе
		
		ЭквайринговыйТерминалПоУмолчанию = ПолучитьЭквайринговыйТерминалПоУмолчанию(ТекущаяСтрока.ВидОплаты);
		ТекущаяСтрока.ЭквайринговыйТерминал = ЭквайринговыйТерминалПоУмолчанию;
		ТекущаяСтрока.ПроцентКомиссии = ЭквайрингВызовСервера.ПолучитьПроцентКомиссииПоТерминалу(ТекущаяСтрока.ЭквайринговыйТерминал, ТекущаяСтрока.ВидОплаты, ЭтоВозврат, ЭтоВозвратДеньВДень, ЭтоПолныйВозврат);
		ПересчитатьСуммуКомиссии(ТекущаяСтрока);
		ТекущаяСтрока.ТипОплаты = ТипОплатыПоВиду(ТекущаяСтрока.ВидОплаты);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЭквайринговыйТерминалПоУмолчанию(ВидОплаты)
	
	Результат = Справочники.ЭквайринговыеТерминалы.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(Объект.КассаККМ) Тогда
		Результат = Справочники.ЭквайринговыеТерминалы.ЭквайринговыйТерминалПоУмолчанию(Объект.КассаККМ, Объект.Организация, Объект.Магазин, ВидОплаты);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ВидимостьОплатРасчетыСКлиентамиСервер()
	
	ЭтоВозврат = Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат;
	
	Элементы.ОплатаОплатитьВРассрочку.Видимость   = НЕ Объект.ОперацияСДенежнымиСредствами;
	Элементы.ОплатаБанковскийКредит.Видимость     = НЕ Объект.ОперацияСДенежнымиСредствами;
	Элементы.ОплатаПодарочныйСертификат.Видимость = НЕ Объект.ОперацияСДенежнымиСредствами И НЕ ЭтоВозврат;
	Элементы.ОплатаОплатитьБонусами.Видимость     = НЕ Объект.ОперацияСДенежнымиСредствами И НЕ ЭтоВозврат;
	Элементы.ОплатаЗачетАванса.Видимость          = НЕ ЭтоВозврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьОплатРасчетыСКлиентами()
	
	ЭтоВозврат = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат");
	
	Элементы.ОплатаБанковскийКредит.Видимость     = НЕ Объект.ОперацияСДенежнымиСредствами;
	Элементы.ОплатаПодарочныйСертификат.Видимость = НЕ Объект.ОперацияСДенежнымиСредствами;
	Элементы.ОплатаОплатитьБонусами.Видимость     = НЕ Объект.ОперацияСДенежнымиСредствами;
	Элементы.ОплатаЗачетАванса.Видимость          = НЕ ЭтоВозврат;
	Элементы.ОплатаОплатитьВРассрочку.Видимость   = НЕ ЭтоВозврат;
	
	Если Объект.ОперацияСДенежнымиСредствами Тогда
		
		УдалитьЛишнееСтрокиОплат(ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.БанковскийКредит"));
		УдалитьЛишнееСтрокиОплат(ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.Бонусы"));
		УдалитьЛишнееСтрокиОплат(ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПодарочныйСертификат"));
		УдалитьЛишнееСтрокиОплат(ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ЗачетАванса"));
		
		Если НЕ ЭтоВозврат Тогда
			УдалитьЛишнееСтрокиОплат(ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ВРассрочку"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЛишнееСтрокиОплат(ТипОплатЧекаККМ)
	
	СтруктуруПоиска = Новый Структура;
	СтруктуруПоиска.Вставить("ТипОплаты", ТипОплатЧекаККМ);
	Строки = Объект.Оплата.НайтиСтроки(СтруктуруПоиска);
	
	Для каждого СтрокаОплаты Из Строки Цикл
		Объект.Оплата.Удалить(СтрокаОплаты);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция АдресТабличнойЧастиТовары()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОбработатьОплатуБонусами(Параметр, УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов)
	
	ТаблицаРаспределения = ПолучитьИзВременногоХранилища(Параметр.АдресВоВременномХранилище);
	КоличествоБонусовОплачено = ТаблицаРаспределения.Итог("КоличествоБонусовОплачено");
	СуммаОплачено = ТаблицаРаспределения.Итог("СуммаОплачено");
	
	НоваяСтрока = Объект.Оплата.Добавить();
	НоваяСтрока.БонуснаяПрограммаЛояльности = Параметр.БонуснаяПрограмма;
	НоваяСтрока.ВидОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметр.БонуснаяПрограмма, "ВидОплаты");
	
	Если НоваяСтрока.ВидОплаты = Справочники.ВидыОплатЧекаККМ.ОплатаБонусамиКакСкидкой Тогда
		НоваяСтрока.КоличествоБонусовВСкидках = КоличествоБонусовОплачено;
		НоваяСтрока.СуммаБонусовВСкидках = СуммаОплачено;
		
		//
		ОчиститьОплатуБонусамиВТоварах();
		Для Каждого СтрокаРаспределения Из ТаблицаРаспределения Цикл
			СтрокаТоваров = Объект.Товары[СтрокаРаспределения.НомерСтроки - 1];
			СтрокаТоваров.СуммаСкидкиОплатыБонусом = СтрокаРаспределения.СуммаОплачено;
			СтрокаТоваров.Сумма = СтрокаТоваров.Сумма - СтрокаТоваров.СуммаСкидкиОплатыБонусом;
			СтрокаТоваров.СуммаНДС = ОбработкаТабличнойЧастиТоварыКлиентСервер.СуммаНДС(СтрокаТоваров.Сумма, СтрокаТоваров.СтавкаНДС, Объект.ЦенаВключаетНДС);
		КонецЦикла;
	Иначе
		НоваяСтрока.КоличествоБонусов = КоличествоБонусовОплачено;
		НоваяСтрока.Сумма = СуммаОплачено;
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	
	Если УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов Тогда
		Объект.СкидкиРассчитаны = Ложь;
	Иначе
		Если Объект.ВидОперации <> Перечисления.ВидыОперацийЧекККМ.Возврат
			И НЕ ПродажаПоЗаказу
			И НЕ ДокументРасчетаЗаполнен Тогда
			СкидкиНаценкиСервер.ОкруглитьЧекВПользуПокупателя(Объект, "Товары", "СкидкиНаценки");
		КонецЕсли;
	КонецЕсли;
	ОбновитьИтоговыеПоказателиКлиентСервер(ЭтотОбъект);
	ЕстьОплатаБонусами = Истина;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция БонуснаяПрограммаКарты(ДисконтнаяКарта)
	
	БонуснаяПрограмма = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДисконтнаяКарта, "БонуснаяПрограммаЛояльности");
	
	Возврат БонуснаяПрограмма;
	
КонецФункции

&НаСервере
Функция ВозможнаОплатаБонусами(ДополнительныеПараметры)
	Результат = Ложь;
	ТекстПредупреждения = "";
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
		
		Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
			БонуснаяПрограммаЛояльности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДисконтнаяКарта, "БонуснаяПрограммаЛояльности");
			Если ЗначениеЗаполнено(БонуснаяПрограммаЛояльности) Тогда
				УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					БонуснаяПрограммаЛояльности,
					"УменьшатьСуммуЧекаДляСкидок");
					Если УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов = Null
						ИЛИ УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов = Неопределено Тогда
					УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов = Ложь;
				КонецЕсли;
			Иначе
				УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов = Ложь;
			КонецЕсли;
		Иначе
			УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов = Ложь;
		КонецЕсли;
		ДополнительныеПараметры.Вставить("УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов", УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов);
		
		ЕстьОплатаБонусами = Ложь;
		ЕстьДругиеОплаты = Ложь;
		Для Каждого СтрокаОплаты Из Объект.Оплата Цикл
			Если СтрокаОплаты.ВидОплаты = Справочники.ВидыОплатЧекаККМ.ОплатаБонусамиКакСкидкой Тогда
				ТекстПредупреждения = НСтр("ru = 'Оплата бонусами уже выбрана.'")
					   + Символы.ПС + НСтр("ru = 'Повторная оплата бонусами невозможна.'");
				
				ЕстьОплатаБонусами = Истина;
			Иначе
				ЕстьДругиеОплаты = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЕстьОплатаБонусами Тогда
			Если ЗначениеЗаполнено(Объект.ДокументРасчета) Тогда
				ТекстПредупреждения = НСтр("ru = 'Цена зафиксирована документом расчета. Применение бонусов как распределение скидки невозможно.'")
			Иначе
				Если УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов И ЕстьДругиеОплаты Тогда
					ТекстПредупреждения = НСтр("ru = 'Оплата бонусами возможна только до указания других видов оплат и расчета скидок.'");
				Иначе
					Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
						БонуснаяПрограммаЛояльности = БонуснаяПрограммаКарты(Объект.ДисконтнаяКарта);
						Если ЗначениеЗаполнено(БонуснаяПрограммаЛояльности) Тогда
							ДополнительныеПараметры.Вставить("БонуснаяПрограммаЛояльности", БонуснаяПрограммаЛояльности);
							Результат = Истина;
						Иначе
							ТекстПредупреждения = НСтр("ru = 'Дисконтная карта не участвует в бонусных программах.'")
								   + Символы.ПС + НСтр("ru = 'Оплата бонусами невозможна.'");
						КонецЕсли;
					Иначе
						ТекстПредупреждения = НСтр("ru = 'Не выбрана дисконтная карта.'")
							   + Символы.ПС + НСтр("ru = 'Оплата бонусами невозможна.'");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекстПредупреждения = НСтр("ru = 'При возврате бонусные баллы сторнируются автоматически.'");
	КонецЕсли;
	ДополнительныеПараметры.Вставить("ТекстПредупреждения", ТекстПредупреждения);
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ОчиститьОплатуБонусамиВТоварах()
	
	БонусныеБаллыСервер.ОчиститьОплатуБонусамиВТоварах(Объект);
	ЕстьОплатаБонусами = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьСкидкиИОплатуБонусамиКСторнированию()
	
	СкидкиНаценкиСерверПереопределяемый.ПодготовитьСкидкиИОплатуБонусамиКСторнированиюПриВозврате(Объект);
	ОбновитьИтоговыеПоказателиКлиентСервер(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьСкидки()
	
	Если НЕ ПродажаПоЗаказу 
		И НЕ ДокументРасчетаЗаполнен Тогда
		Если Объект.СкидкиРассчитаны Тогда
			СкидкиНаценкиСервер.ОтменитьСкидки(Объект, "Товары", "СуммаСкидкиОплатыБонусом");
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
			Объект.Подарки.Очистить();
			Объект.БонусныеБаллыКНачислению.Очистить();
			Объект.СкидкиРассчитаны = Ложь;
			СкидкиНаценкиСерверПереопределяемый.ОчиститьТоварыОтПодарков(Объект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьОплатуБонусами(УдалятьСтрокиИзОплаты = Истина)
	
	Если ЕстьОплатаБонусами Тогда
		БонусныеБаллыСервер.ОчиститьОплатуБонусамиВТоварах(Объект);
		Если УдалятьСтрокиИзОплаты Тогда
			МассивСтрокОплаты = Объект.Оплата.НайтиСтроки(Новый Структура("ВидОплаты", Справочники.ВидыОплатЧекаККМ.ОплатаБонусамиКакСкидкой));
			Для Каждого УдаляемаяСтрока Из МассивСтрокОплаты Цикл
				Объект.Оплата.Удалить(УдаляемаяСтрока);
			КонецЦикла;
		КонецЕсли;
		ЕстьОплатаБонусами = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидкахЗавершитьОбработкуВопроса()
	
	АдресСкидок = ПоместитьСкидкиВХранилище();
	СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(Элементы.Товары.ТекущиеДанные, Объект, ЭтотОбъект, АдресСкидок);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидкахКлиент()
	
	Если Объект.СкидкиРассчитаны Тогда
		ОткрытьИнформациюОСкидкахЗавершитьОбработкуВопроса();
	Иначе
		ДополнительныеПараметры = Новый Структура; 
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросРассчитатьИОткрытьСкидки", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = НСтр("ru = 'Скидки (наценки) не рассчитаны, рассчитать?'");
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОплатыБонусами(ДополнительныеПараметры)
	
	Отказ = Ложь;
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов") Тогда
		УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов = ДополнительныеПараметры.УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов;
	КонецЕсли;
	ДополнительныеПараметры.Вставить("БудетОплатаБонусами", Истина);
	ДополнительныеПараметры.Вставить("ИмяОбработкиОповещения", "ОповещениеРасчетСкидокКлиент");
	Если УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов Тогда
		ОтменитьСкидки();
	Иначе
		ПроверитьСкидки(Отказ, ДополнительныеПараметры, Ложь);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
    
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		     Истина, "Документ.ЧекККМ.Форма.ФормаОплатыБонуснымиБаллами.Открытие");
             
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Магазин", Объект.Магазин);
	ПараметрыОткрытия.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	ПараметрыОткрытия.Вставить("АдресТабличнойЧастиТовары", АдресТабличнойЧастиТовары());
	ПараметрыОткрытия.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыОткрытия.Вставить("БонуснаяПрограммаЛояльности", ДополнительныеПараметры.БонуснаяПрограммаЛояльности);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОплатыБонусами", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Документ.ЧекККМ.Форма.ФормаОплатыБонуснымиБаллами",
					ПараметрыОткрытия,
					ЭтаФорма,
					,
					,
					,
					ОбработчикОповещения,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуОплатыПослеВопроса()
	
	ВопросОбУдаленииСтрокиОплатыУжеЗадан = Истина;
	
	ТекущиеДанные = Элементы.Оплата.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ЭтотОбъект.Модифицированность = Истина;
		Объект.Оплата.Удалить(ТекущиеДанные);
		Если ТекущиеДанные.ВидОплаты = ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.ОплатаБонусамиКакСкидкой")
			И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
			ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
		КонецЕсли;
	КонецЕсли;
	
	ВопросОбУдаленииСтрокиОплатыУжеЗадан = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОплатуПлатежнойКартойЧерезЭквайринговыйТерминал(РезультатОперации, ПараметрДействия)
	
	Если РезультатОперации Тогда
		
		// Сохранить в таблице данные оплаты картой.
		ВыбраннаяСтрока = Объект.Оплата.НайтиПоИдентификатору(ПараметрДействия.ВыбраннаяСтрокаИдентификатор);
		
		ВыбраннаяСтрока.НомерПлатежнойКарты = ПараметрДействия.НомерКарты;
		ВыбраннаяСтрока.Сумма               = ПараметрДействия.СуммаОперации;
		ВыбраннаяСтрока.СсылочныйНомер      = ПараметрДействия.НомерСсылкиОперации;
		ВыбраннаяСтрока.НомерЧекаЭТ         = ПараметрДействия.НомерЧекаЭТ;
		ВыбраннаяСтрока.ДанныеПереданыВБанк = Истина;
		
		Записать(); // Обязательно необходимо записать документ, для предотвращения потери информации.
	КонецЕсли;
	
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОтменуОплатыПлатежнойКартойЧерезЭквайринговыйТерминал(РезультатОперации, ПараметрДействия)
	
	Если РезультатОперации Тогда
		
		ВыбраннаяСтрока = Объект.Оплата.НайтиПоИдентификатору(ПараметрДействия.ВыбраннаяСтрокаИдентификатор);
		
		// Сохранить в таблице данные оплаты картой.
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
			ВыбраннаяСтрока.СсылочныйНомер = "";
			ВыбраннаяСтрока.НомерЧекаЭТ    = "";
			ВыбраннаяСтрока.НомерПлатежнойКарты = "";
			ВыбраннаяСтрока.ДанныеПереданыВБанк = Ложь;
		Иначе
			ВыбраннаяСтрока.ДанныеПереданыВБанк = Истина;
		КонецЕсли;
		
		Записать(); // Обязательно необходимо записать документ, для предотвращения потери информации.
	КонецЕсли;
	
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВозвратОплатыПлатежнойКартойЧерезЭквайринговыйТерминал(РезультатОперации, ПараметрДействия)
	
	Если РезультатОперации Тогда
		
		ВыбраннаяСтрока = Объект.Оплата.НайтиПоИдентификатору(ПараметрДействия.ВыбраннаяСтрокаИдентификатор);
		
		ВыбраннаяСтрока.ДанныеПереданыВБанк = Истина;
		
		Записать(); // Обязательно необходимо записать документ, для предотвращения потери информации.
	КонецЕсли;
	
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента)
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТКлиент.ЗавершитьОбработкуДанныхПоКодуКлиент(ЭтотОбъект, СтруктураПараметровКлиента);
	
	ПроверитьСистемуНалогообложения(ИдентификаторСтроки);
	
	ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьНесвязанныеСерийныеНомера()
	
	ОбработкаТабличнойЧастиТоварыСервер.УдалитьНесвязанныеСерийныеНомера(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьНесвязанныеАкцизы()
	
	ОбработкаТабличнойЧастиТоварыСервер.УдалитьНесвязанныеАкцизы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьКартинкуДляКомментария()
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);
КонецПроцедуры

// Процедура заполняет товары из подбора.
// Параметры: 
//  ВыбранноеЗначение - Структура,
//  ИмяТабличнойЧасти  - Строка
&НаСервере
Функция ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТабличнойЧасти  = "")
	
	СтрокиИзменены = Ложь;
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	ИмяТабличнойЧасти = ?(ПустаяСтрока(ИмяТабличнойЧасти), "Товары", ИмяТабличнойЧасти);
	ТаблицаСерийныхНомеров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресСерийныхНомеровВХранилище);
	ЕстьСерийныеНомера = (ИмяТабличнойЧасти = "Товары") И (ТаблицаСерийныхНомеров.Количество() > 0);
	НужноЗаполнятьЦену = НЕ ЕстьПравоИзменятьЦену();
	СписокСвойствДляЗаполнения = "Номенклатура, Характеристика, Упаковка, Цена, КоличествоУпаковок, ТипНоменклатуры,
		|ХарактеристикиИспользуются, ИспользоватьСерийныеНомера";
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", СтрокаТовара.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", СтрокаТовара.Характеристика);
		
		МассивСтрок = Объект.Товары.НайтиСтроки(СтруктураПоиска);
		КоличествоНайденныхСтрок = МассивСтрок.Количество();
		Если КоличествоНайденныхСтрок > 0 
			И МассивСтрок[0].ОсобенностиУчетаНоменклатуры = Перечисления.ОсобенностиУчетаНоменклатуры.ПродукцияМаркируемаяДляГИСМ Тогда
			
			ТекущаяСтрока = МассивСтрок[0];
			ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.КоличествоУпаковок + СтрокаТовара.КоличествоУпаковок;
			
		Иначе
			
			ТекущаяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,СтрокаТовара, СписокСвойствДляЗаполнения);
			
		КонецЕсли;
		
		Если ЕстьСерийныеНомера Тогда
			МассивСерийныхНомеров = ОбработкаТабличнойЧастиТоварыКлиентСервер.МассивСерийныхНомеровДляСтрокиТоваров(СтрокаТовара.КлючСвязиСерийныхНомеров , ТаблицаСерийныхНомеров);
			ТекущаяСтрока.КлючСвязиСерийныхНомеров = ОбработкаТабличнойЧастиТоварыСервер.ДобавитьСерийныеНомераВТабличнуюЧасть(Объект.СерийныеНомера, МассивСерийныхНомеров, 0);
		КонецЕсли;
		Если СтрокаТовара.ИспользоватьСерийныеНомера Тогда
			Если ЕстьСерийныеНомера Тогда
				ТекущаяСтрока.КоличествоУпаковок = МассивСерийныхНомеров.Количество();
			Иначе
				ТекущаяСтрока.КоличествоУпаковок = 0;
			КонецЕсли;
		КонецЕсли;
		СтруктураДействий = Новый Структура;
		СтруктураПараметровДействия = Новый Структура;
		СтруктураПараметровДействия.Вставить("Магазин", Объект.Магазин);
		СтруктураПараметровДействия.Вставить("РабочееМесто", Объект.КассаККМ.РабочееМесто);
		СтруктураПараметровДействия.Вставить("Организация", Объект.Организация);
		
		СтруктураДействий.Вставить("ЗаполнитьСкладПродажи", СтруктураПараметровДействия);
		СтруктураДействий.Вставить("ЗаполнитьВидНалога", 
			ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровЗаполненияВидаНалога(Объект));
		
		Если ИмяТабличнойЧасти = "Товары" Тогда
			Если НужноЗаполнятьЦену Тогда
				СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи" ,
					ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина));
				СтруктураДействий.Вставить("ПересчитатьЦенуСУчетомАгентскогоВознаграждения", Новый Структура("Цена", ТекущаяСтрока.Цена));
			КонецЕсли;
			ТекущаяСтрока.Продавец = Объект.Продавец;
			СтруктураПараметровСтавкиНДС = Новый Структура;
			СтруктураПараметровСтавкиНДС.Вставить("Дата"       , Объект.Дата);
			СтруктураПараметровСтавкиНДС.Вставить("Организация", Объект.Организация);
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", СтруктураПараметровСтавкиНДС);
			СтруктураДействий.Вставить("ЗаполнитьТипНоменклатуры", СтруктураПараметровСтавкиНДС);
			СтруктураДействий.Вставить("ЗаполнитьДоговорПлатежногоАгента", Новый Структура("Дата", Объект.Дата));
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
			
		КонецЕсли;
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
		ДополнитьСтруктуруДействиямиНДС(СтруктураДействий, ВестиУчетМаркируемойПродукцииИСМП);
		ДополнитьСтруктуруДействиямиГосИС(СтруктураДействий, Объект.ОперацияСДенежнымиСредствами, МаркировкаВключена);
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураКэшируемыхЗначений();
		ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		Если ИмяТабличнойЧасти = "Товары" Тогда
			ОбработкаТабличнойЧастиТоварыСервер.ВыделитьАгентскоеВознаграждение(Объект, ЭтотОбъект, СтруктураДействий, ТекущаяСтрока, КэшированныеЗначения);
		КонецЕсли;
		
		СтрокиИзменены = Истина;
		
	КонецЦикла;
	
	Если ТаблицаТоваров.Количество() = 0 Тогда
		ОбновитьИтоговыеПоказателиКлиентСервер(ЭтотОбъект);
	КонецЕсли;
	ЗаполнитьСтатусыУказанияСерийСервер();
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
	Возврат СтрокиИзменены;
	
КонецФункции

&НаКлиенте
Процедура ПересчитатьИлиОтменитьСкидкиИОплатуБонусами(УдалятьСтрокиИзОплаты = Истина)
	
	Если АвтоматическийРасчетСкидок Тогда
		Если НЕ ПропуститьАвтоматическийРасчетСкидок Тогда
			Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
				ПодготовитьСкидкиИОплатуБонусамиКСторнированию();
			Иначе
				РассчитатьСкидкиНаценкиКлиент();
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
			ОтменитьСкидки();
			ОтменитьОплатуБонусами(УдалятьСтрокиИзОплаты);
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьИтоговыеПоказателиКлиентСервер(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьПредварительныйРасчетСкидокНаСервере(ПорядковыйНомерПродажи)
	
	СтруктураПараметры = РозничныеПродажиКлиентСервер.СтруктураДляПредварительногоРасчетСкидок();
	СтруктураПараметры.ПрименятьКОбъекту                = Ложь;
	СтруктураПараметры.ТолькоПредварительныйРасчет      = Истина;
	СтруктураПараметры.ВосстанавливатьУправляемыеСкидки = Истина;
	СтруктураПараметры.УправляемыеСкидки                = УправляемыеСкидки;
	СтруктураПараметры.ТолькоСообщенияПослеОформления   = Ложь;
	СтруктураПараметры.ПорядковыйНомерПродажи           = ПорядковыйНомерПродажи;
	СтруктураПараметры.РабочееМесто                     = РабочееМесто;
	СтруктураПараметры.КонтролироватьОстаткиТоваров     = КонтролироватьОстаткиТоваров;
	
	Возврат РозничныеПродажиСервер.ВыполнитьПредварительныйРасчетСкидокНаСервере(
		СтруктураПараметры, 
		Объект, 
		УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Функция ТоварыВводДополнительнойИнформации(Элемент)
	
	ВводДополнительнойИнформации = Ложь;
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ЭтотОбъект.ТолькоПросмотр ИЛИ ТекущиеДанные = Неопределено Тогда
		Возврат ВводДополнительнойИнформации;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыКоличествоУпаковок
		ИЛИ Элемент.ТекущийЭлемент = Элементы.ТоварыУпаковка
		ИЛИ Элемент.ТекущийЭлемент = Элементы.ТоварыНоменклатураЕдиницаИзмерения Тогда
		
		Если ТекущиеДанные.ИспользоватьСерийныеНомера Тогда
			ВводДополнительнойИнформации = Истина;
			ВвестиПодарочныеСертификаты();
		ИначеЕсли ТекущиеДанные.СтатусУказанияСерий <> 0 Тогда
			ВводДополнительнойИнформации = Истина;
			Если Элемент.ТекущийЭлемент = Элементы.ТоварыКоличествоУпаковок Тогда
				УказатьСерии("КоличествоУпаковок", "Товары", "Серии");
			Иначе
				УказатьСерии("Упаковка", "Товары", "Серии");
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Элемент.ТекущийЭлемент = Элементы.ТоварыЦена
		ИЛИ Элемент.ТекущийЭлемент = Элементы.ТоварыСумма
		ИЛИ Элемент.ТекущийЭлемент = Элементы.ТоварыЦенаСАгентскимВознаграждением Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ДанныеАгентскогоДоговора) Тогда
			ВводДополнительнойИнформации = Истина;
			ВводПараметровАгентскогоПлатежа(ТекущиеДанные, Элемент.ТекущийЭлемент);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВводДополнительнойИнформации;
	
КонецФункции

&НаКлиенте
Процедура ВводПараметровАгентскогоПлатежа(ТекущиеДанные, Элемент)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("РедактируемаяСтрока", ТекущиеДанные);
	
	ПараметрыФормы = Новый Структура;
	Если Элемент = Элементы.ТоварыСумма Тогда
		ПараметрыФормы.Вставить("Платеж", ТекущиеДанные.Сумма);
		ДополнительныеПараметры.Вставить("ПересчиталиСумму", Истина);
	Иначе
		ПараметрыФормы.Вставить("Платеж", ТекущиеДанные.Цена);
	КонецЕсли;
	ПараметрыФормы.Вставить("ДанныеАгентскогоДоговора",         ТекущиеДанные.ДанныеАгентскогоДоговора);
	ПараметрыФормы.Вставить("ВознаграждениеВключеноВСтоимость", Элемент = Элементы.ТоварыЦенаСАгентскимВознаграждением);
	
	ОбработчикОповещения = Новый ОписаниеОповещения(
									"ОповещениеВводПараметровАгентскогоПлатежа" ,
									ЭтотОбъект,
									ДополнительныеПараметры);
									
	ОткрытьФорму("ОбщаяФорма.ВводПараметровАгентскогоПлатежа", ПараметрыФормы, ЭтотОбъект,,,,ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВводПараметровАгентскогоПлатежа(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	РедактируемаяСтрока = ДополнительныеПараметры.РедактируемаяСтрока;
	Если ДополнительныеПараметры.Свойство("ПересчиталиСумму") И ДополнительныеПараметры.ПересчиталиСумму Тогда
		РедактируемаяСтрока.Сумма = Результат.Платеж;
		ТоварыСуммаПриИзменении(Неопределено);
	Иначе
		РедактируемаяСтрока.Цена = Результат.Платеж;
		ТоварыЦенаПриИзменении(Неопределено);
	КонецЕсли;
	ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодаркиПередНачаломИзменения(Элемент, Отказ)
	
	ПодаркиВводДополнительнойИнформации(Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодаркиВводДополнительнойИнформации(Элемент, Отказ)
	
	Если Элемент.ТекущийЭлемент = Элементы.ПодаркиКоличествоУпаковок
		ИЛИ Элемент.ТекущийЭлемент = Элементы.ПодаркиУпаковка 
		ИЛИ Элемент.ТекущийЭлемент = Элементы.ПодаркиНоменклатураЕдиницаИзмерения Тогда
		ТекущиеДанные = Элементы.Подарки.ТекущиеДанные;
		
		Если ТекущиеДанные <> Неопределено Тогда
			Если ТекущиеДанные.СтатусУказанияСерий = 0 Тогда
				Отказ = Истина;
			Иначе
				Элементы.Подарки.ЗакончитьРедактированиеСтроки(Ложь);
				Если Элемент.ТекущийЭлемент = Элементы.ПодаркиКоличествоУпаковок Тогда
					УказатьСерии("КоличествоУпаковок", "Подарки", "СерииПодарков");
				Иначе
					УказатьСерии("Упаковка", "Подарки", "СерииПодарков");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСистемуНалогообложения(ИдентификаторСтроки = Неопределено, ЗаполнятьВидНалога = Истина)
	
	Если Объект.Товары.Количество() > 0 Тогда
		Если Не Объект.СистемаНалогообложения = Объект.Товары[0].ВидНалога Тогда
			Объект.СистемаНалогообложения = Объект.Товары[0].ВидНалога;
		КонецЕсли;
	Иначе
		Если ЗаполнятьВидНалога Тогда
			ЗаполнитьВидНалога();
		КонецЕсли;
	КонецЕсли;
	
	Если ВозможныРазныеНалоговыеРежимыСкладов И
		ТипОборудованияКассыККМ = ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ККТ") Тогда
		
		Если Объект.Товары.Количество() = 1 Тогда
			
			ТекстСообщения = НСтр("ru = 'Далее в этот чек следует добавлять товары с системой налогообложения ""%1"".'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Объект.Товары[0].ВидНалога);
			
			ЗаголовокСообщения = НСтр("ru = 'Система налогообложения чека'");
			
			ПоказатьОповещениеПользователя(ЗаголовокСообщения,, ТекстСообщения);
			
		ИначеЕсли Объект.Товары.Количество() > 1 Тогда
		
			ЕстьРазличныеЗначения = Ложь;
			
			ВидНалогаПервойСтроки = Объект.Товары[0].ВидНалога;
			
			Если ИдентификаторСтроки = Неопределено Тогда
				Для Инд = 1 По Объект.Товары.Количество() - 1 Цикл
					Если Не ВидНалогаПервойСтроки = Объект.Товары[Инд].ВидНалога Тогда
						ЕстьРазличныеЗначения = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначе
				ЭлементКоллекции = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
				Инд = Объект.Товары.Индекс(ЭлементКоллекции);
				Если Не ВидНалогаПервойСтроки = Объект.Товары[Инд].ВидНалога Тогда
					ЕстьРазличныеЗначения = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ЕстьРазличныеЗначения Тогда
				ТекстСообщения = НСтр("ru = 'В одном чеке, пробиваемом в ККТ с передачей данных, могут пробиваться товары с одной системой налогообложения. Для строки 1 определена: ""%1"". Для строки %2 определена: ""%3"".'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Объект.Товары[0].ВидНалога, Инд + 1, Объект.Товары[Инд].ВидНалога);
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.Товары[" + Инд + "].Номенклатура");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВозможностьРазныхНалоговыхРежимовСкладов()
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПрименениеСистемНалогообложенияСрезПоследних.СистемаНалогообложения КАК СистемаНалогообложения,
	|	ПрименениеСистемНалогообложенияСрезПоследних.Организация КАК Организация,
	|	ПрименениеСистемНалогообложенияСрезПоследних.Период КАК Период,
	|	ПрименениеСистемНалогообложенияСрезПоследних.Склад КАК Склад,
	|	ПрименениеСистемНалогообложенияСрезПоследних.ТоварнаяГруппа КАК ТоварнаяГруппа
	|ПОМЕСТИТЬ ВТСрезПоследних
	|ИЗ
	|	РегистрСведений.ПрименениеСистемНалогообложения.СрезПоследних(
	|			&Дата,
	|			Магазин = &Магазин
	|				И ВЫБОР
	|					КОГДА СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.ТипыСистемНалогообложенияККТ.Патент)
	|						ТОГДА &Дата >= ДатаНачалаПатента
	|									И &Дата <= ДатаОкончанияПатента
	|								ИЛИ ДатаНачалаПатента = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|									И ДатаОкончанияПатента = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ) КАК ПрименениеСистемНалогообложенияСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСрезПоследних.Организация КАК Организация,
	|	ВТСрезПоследних.Склад КАК Склад,
	|	ВТСрезПоследних.ТоварнаяГруппа КАК ТоварнаяГруппа,
	|	МАКСИМУМ(ВТСрезПоследних.Период) КАК Период
	|ПОМЕСТИТЬ ВТПериод
	|ИЗ
	|	ВТСрезПоследних КАК ВТСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТСрезПоследних.Организация,
	|	ВТСрезПоследних.Склад,
	|	ВТСрезПоследних.ТоварнаяГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТСрезПоследних.СистемаНалогообложения КАК СистемаНалогообложения
	|ИЗ
	|	ВТСрезПоследних КАК ВТСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериод КАК ВТПериод
	|		ПО ВТСрезПоследних.Организация = ВТПериод.Организация
	|			И ВТСрезПоследних.Склад = ВТПериод.Склад
	|			И ВТСрезПоследних.ТоварнаяГруппа = ВТПериод.ТоварнаяГруппа";
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Запрос.УстановитьПараметр("Магазин", Объект.Магазин);
	Результат = Запрос.Выполнить().Выбрать();
	
	ВозможныРазныеНалоговыеРежимыСкладов = Результат.Количество() > 1;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияИспользовалаЕНВД()
	
	ИспользовалсяЕНВД =
		РегистрыСведений.ПрименениеСистемНалогообложения.ОрганизацияИспользовалаЕНВД(
			?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()),
			Объект.Организация);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСистемуНалогообложения()
	
	ВидимостьСистемыНалогообложения();
	
	Если Объект.Товары.Количество() > 0 Тогда
		Если НЕ Объект.СистемаНалогообложения = Объект.Товары[0].ВидНалога Тогда
			Объект.СистемаНалогообложения = Объект.Товары[0].ВидНалога;
		КонецЕсли;
	Иначе
		ЗаполнитьВидНалога();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВидимостьСистемыНалогообложения()
	
	Элементы.СтраницаСНОРедактировать.Видимость = ИспользовалсяЕНВД;
	Элементы.СтраницаСНОНеРедактировать.Видимость = ВозможныРазныеНалоговыеРежимыСкладов И НЕ ИспользовалсяЕНВД;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФормуSMSИEmail()
	
	Если ЗначениеЗаполнено(ДанныеSMSИлиEmail)
		И ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		Если ОтказКлиентаОтСохраненияТелефонаEmail Тогда
			Элементы.ДекорацияОтказКлиентаОтСохраненияТелефонаEmail.Картинка = БиблиотекаКартинок.НеСохранять16;
		Иначе
			Элементы.ДекорацияОтказКлиентаОтСохраненияТелефонаEmail.Картинка = БиблиотекаКартинок.Сохранить16;
		КонецЕсли;
	Иначе
		Элементы.ДекорацияОтказКлиентаОтСохраненияТелефонаEmail.Картинка = БиблиотекаКартинок.Пустая;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьВозможностьПечатиБумажногоЧека()
	
	Возврат ПодключаемоеОборудованиеРТ.ПроверитьВозможностьПечатиБумажногоЧека(Объект.КассаККМ);
	
КонецФункции

#Область ЕГАИС

&НаСервере
Функция ПодготовитьДанныеДляПробитияЧека(НомерЧека)
	
	СтруктураДанных = РозничныеПродажиКлиентСервер.СтруктураДанныхДляПробитияЧека();
	СтруктураДанных.ЧекККМСсылка = Объект.Ссылка;
	СтруктураДанных.НомерЧека = НомерЧека;
	СтруктураДанных.Объект = Объект;
	СтруктураДанных.ЭтоВозвратПродукцииИСМПБезМарки = ЭтоВозвратПродукцииИСМПБезМарки;
	СтруктураДанных.НеПечататьБумажныйЧек = ПараметрыКассыККМ.НеПечататьБумажныйЧек;
	
	Возврат РозничныеПродажиСервер.ПодготовитьДанныеДляПробитияЧека(СтруктураДанных);
	
КонецФункции

&НаКлиенте
Процедура ПредставитьТелефонИEmailКлиент()
	
	Если ЗначениеЗаполнено(Объект.Телефон) Тогда
		Если ЗначениеЗаполнено(Объект.Телефон) Тогда
			СохраненныйТелефон = Число(Объект.Телефон);
		Иначе
			СохраненныйТелефон = 0;
		КонецЕсли;
		Телефон = 0;
		ПодключаемоеОборудованиеРТКлиент.ПреобразоватьТелефонКПользовательскомуВиду(СохраненныйТелефон, Телефон, ТелефонСтрокой);
		ДанныеSMSИлиEmail = ТелефонСтрокой;
	ИначеЕсли ЗначениеЗаполнено(Объект.АдресЭП) Тогда
		ДанныеSMSИлиEmail = Объект.АдресЭП;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПослеПередачиЧекаЕГАИС(Изменения, ПараметрыВыполнения) Экспорт
	
	РозничныеПродажиКлиент.ПослеПередачиЧекаЕГАИС(Изменения, ПараметрыВыполнения, "ЧекККМ", Объект);
	
	ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПродолжения, ПараметрыВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ДеактивироватьСкидкиПоИдентификаторуЧека()
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
		СкидкиНаценкиСерверПереопределяемый.ДеактивироватьСкидкиПоИдентификаторуЧека(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПогаситьОднократныеСкидки()
	
	СкидкиНаценкиСерверПереопределяемый.ПогаситьОднократныеСкидки(Объект);
	
КонецПроцедуры

#Область РаботаСБуферомОбмена

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
	ТаблицаТоваров = КопированиеСтрокСервер.СтрокиИзБуфераОбмена();
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьДоговорПлатежногоАгента");
		
		СтруктураДействий.Вставить("ОчиститьДанныеПоЗаказу");
		СтруктураДействий.Вставить("ПроверитьСерийныеНомераПоВладельцу",
		ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПроверкиСерийныхНомеровПоВладельцу(ТекущаяСтрока, Объект.СерийныеНомера));
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу"   , ТекущаяСтрока.Характеристика);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		
		СтруктураПараметровДействия = Новый Структура;
		СтруктураПараметровДействия.Вставить("Магазин", Объект.Магазин);
		СтруктураПараметровДействия.Вставить("РабочееМесто", РабочееМесто);
		СтруктураПараметровДействия.Вставить("Организация", Объект.Организация);
		
		СтруктураДействий.Вставить("ЗаполнитьСкладПродажи", СтруктураПараметровДействия);
		
		СтруктураДействий.Вставить("ЗаполнитьВидНалога", 
			ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровЗаполненияВидаНалога(Объект));
		
		СтруктураПараметровСтавкиНДС = Новый Структура;
		СтруктураПараметровСтавкиНДС.Вставить("Дата"       , Объект.Дата);
		СтруктураПараметровСтавкиНДС.Вставить("Организация", Объект.Организация);
		
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", СтруктураПараметровСтавкиНДС);
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки"        , Новый Структура("Очищать", Истина));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
		
		СтруктураДействий.Вставить("ПроставитьПродавца", Объект.Продавец);
		
		Если ИспользоватьАссортимент Тогда
			СтруктураДействий.Вставить("ПроверитьАссортиментСтроки", АссортиментКлиентСервер.ПараметрыПроверкиАссортимента(Объект, Истина));
		КонецЕсли;
		
		СтруктураДействий.Вставить("ПроверитьЗапретРозничнойПродажи", СкидкиНаценкиСервер.ПараметрыПроверкиЗапретаРозничнойПродажи(Объект));
		
		ДополнитьСтруктуруДействиямиНДС(СтруктураДействий, ВестиУчетМаркируемойПродукцииИСМП);
		ДополнитьСтруктуруДействиямиГосИС(СтруктураДействий, Объект.ОперацияСДенежнымиСредствами, МаркировкаВключена);
		
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураКэшируемыхЗначений();
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьКэшированныеЗначенияДляУчетаСерий(ТекущаяСтрока, КэшированныеЗначения, ПараметрыУказанияСерий, Ложь);
		ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		ОбработкаТабличнойЧастиТоварыСервер.ВыделитьАгентскоеВознаграждение(Объект, ЭтотОбъект, СтруктураДействий, ТекущаяСтрока, КэшированныеЗначения);
		
		ОбновитьИтоговыеПоказателиКлиентСервер(ЭтотОбъект);
		
		ТекущаяСтрокаИдентификатор = ТекущаяСтрока.ПолучитьИдентификатор();
		
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, 
			ПараметрыУказанияСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьКэшированныеЗначенияДляУчетаСерий(ТекущаяСтрока,
			КэшированныеЗначения,ПараметрыУказанияСерий,Ложь);
		
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатовВСтроке(ТекущаяСтрока);
		
		Если ПропуститьАвтоматическийРасчетСкидок Тогда
			ПропуститьАвтоматическийРасчетСкидок = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	КопированиеСтрокСервер.ОчиститьБуферОбмена();
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	КопированиеСтрокСервер.ПоместитьВыделенныеСтрокиВБуферОбмена(Элементы.Товары.ВыделенныеСтроки, Объект.Товары);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", 
		НЕ ОбщегоНазначения.ПустойБуферОбмена("Строки"));
		
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьСтавкиНДС()
	
	ТекущаяДата = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса());
	ДатаПереходногоПериода = УчетНДС.ДатаПереходногоПериода();
	ЭтоВозврат  = Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат;
	
	Если ЗначениеЗаполнено(Объект.ЧекККМПродажа) И Объект.ЧекККМПродажа.Дата < ДатаПереходногоПериода  //Возврат чека за 2018 год.
		И ТекущаяДата > ДатаПереходногоПериода И ЭтоВозврат Тогда
		
		УчетНДС.ЗаполнитьСписокВыбораСтавокНДС(Элементы, ДатаПереходногоПериода - 86400);
		
	ИначеЕсли ЗначениеЗаполнено(Объект.ДокументРасчета) И Объект.ДокументРасчета.Дата < ДатаПереходногоПериода //Возврат чека на Аванс за 2018 год.
		И ТекущаяДата > ДатаПереходногоПериода И ЭтоВозврат Тогда
		
		УчетНДС.ЗаполнитьСписокВыбораСтавокНДС(Элементы, ДатаПереходногоПериода - 86400);
		
	Иначе 
		
		УчетНДС.ЗаполнитьСписокВыбораСтавокНДС(Элементы, ТекущаяДата);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКассаККМНаСервере(НомерДокументаКассыККМ, ПорядковыйНомерПродажи)
	
	ПриИзмененииКассаККМСервер();
	
	Если ЗначениеЗаполнено(Объект.КассаККМ) И НомерДокументаКассыККМ[Объект.КассаККМ] = Неопределено Тогда
		ЗаполнитьНомерДокументаКассыККМ(Объект.КассаККМ, НомерДокументаКассыККМ);
	КонецЕсли;
	
	Если НЕ ПродажаПоЗаказу Тогда
		ПересчитатьИлиОтменитьСкидкиИОплатуБонусамиНаСервере(ПорядковыйНомерПродажи);
	КонецЕсли;
	
	УстановитьЭквайринговыйТерминалПоУмолчаниюСервер();
	УстановитьКомандыВидовОплаты();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНомерДокументаКассыККМ(КассаККМ, НомерДокументаКассыККМ)
	
	Если ЗначениеЗаполнено(КассаККМ) И НомерДокументаКассыККМ[КассаККМ] = Неопределено Тогда
		НомерЧекаККМ = ОбщегоНазначенияРТВызовСервера.ПоследнийНомерДокументаКассыККМ(КассаККМ);
	КонецЕсли; 
	Если Не (НомерЧекаККМ <> Неопределено И НомерЧекаККМ <> 0) Тогда
		НомерЧекаККМ = 1;
	КонецЕсли; 
	НомерДокументаКассыККМ.Вставить(КассаККМ, НомерЧекаККМ);
		
КонецПроцедуры

&НаСервере
Процедура РассчитатьСкидкиНаценкиСервер(ПорядковыйНомерПродажи, ДополнительныеПараметры = Неопределено)
	
	Если Объект.Товары.Количество() = 0 Тогда
		ОтменитьСкидки();
		ОтменитьОплатуБонусами();
		Возврат;
	КонецЕсли;
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки",                УправляемыеСкидки);
	СтруктураПараметры.Вставить("ТолькоСообщенияПослеОформления",   Ложь);
	СтруктураПараметры.Вставить("ПорядковыйНомерПродажи",           ПорядковыйНомерПродажи);
	СтруктураПараметры.Вставить("ПеренестиСкидкиПодаркиВТовары");
	СтруктураПараметры.Вставить("КонтролироватьОстаткиТоваров", 	КонтролироватьОстаткиТоваров);
	СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		Если ДополнительныеПараметры.Свойство("БудетОплатаБонусами") Тогда
			СтруктураПараметры.Вставить("БудетОплатаБонусами", ДополнительныеПараметры.БудетОплатаБонусами);
		КонецЕсли;
	КонецЕсли;
	
	Объект.Дата = ОбщегоНазначения.РабочаяДатаПользователя();
	
	РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЭквайринговыйТерминалПоУмолчаниюСервер(ТекущаяСтрока = Неопределено)
	
	Если ТекущаяСтрока = Неопределено Тогда
		
		ЭквайринговыйТерминалПоУмолчанию = ПолучитьЭквайринговыйТерминалПоУмолчанию(Неопределено);
		Для Каждого ТекущаяСтрока Из Объект.Оплата Цикл 
			
			ТекущаяСтрока.ЭквайринговыйТерминал = ЭквайринговыйТерминалПоУмолчанию;
			ТекущаяСтрока.ПроцентКомиссии = ЭквайрингВызовСервера.ПолучитьПроцентКомиссииПоТерминалу(ТекущаяСтрока.ЭквайринговыйТерминал, ТекущаяСтрока.ВидОплаты, ЭтоВозврат, ЭтоВозвратДеньВДень, ЭтоПолныйВозврат);
			ПересчитатьСуммуКомиссии(ТекущаяСтрока);
			ТекущаяСтрока.ТипОплаты = ТипОплатыПоВиду(ТекущаяСтрока.ВидОплаты);
			
		КонецЦикла;
		
	Иначе
		
		ЭквайринговыйТерминалПоУмолчанию = ПолучитьЭквайринговыйТерминалПоУмолчанию(ТекущаяСтрока.ВидОплаты);
		ТекущаяСтрока.ЭквайринговыйТерминал = ЭквайринговыйТерминалПоУмолчанию;
		ТекущаяСтрока.ПроцентКомиссии = ЭквайрингВызовСервера.ПолучитьПроцентКомиссииПоТерминалу(ТекущаяСтрока.ЭквайринговыйТерминал, ТекущаяСтрока.ВидОплаты, ЭтоВозврат, ЭтоВозвратДеньВДень, ЭтоПолныйВозврат);
		ПересчитатьСуммуКомиссии(ТекущаяСтрока);
		ТекущаяСтрока.ТипОплаты = ТипОплатыПоВиду(ТекущаяСтрока.ВидОплаты);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьИлиОтменитьСкидкиИОплатуБонусамиНаСервере(ПорядковыйНомерПродажи, УдалятьСтрокиИзОплаты = Истина)
	
	Если АвтоматическийРасчетСкидок Тогда
		Если НЕ ПропуститьАвтоматическийРасчетСкидок Тогда
			Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
				ПодготовитьСкидкиИОплатуБонусамиКСторнированию();
			Иначе
				РассчитатьСкидкиНаценкиСервер(ПорядковыйНомерПродажи);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
			ОтменитьСкидки();
			ОтменитьОплатуБонусами(УдалятьСтрокиИзОплаты);
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьИтоговыеПоказателиКлиентСервер(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ИнициализацияСтрокиТоваров(Форма, СтруктураПараметров) Экспорт
	
	ОбработатьБезМаркировки = Ложь;
	Если СтруктураПараметров.Свойство("ОбработатьБезМаркировки")
		И СтруктураПараметров.ОбработатьБезМаркировки Тогда
		ОбработатьБезМаркировки = Истина;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("Количество") Тогда
		КоличествоУпаковок = СтруктураПараметров.Количество;
	Иначе
		КоличествоУпаковок = 1;
	КонецЕсли;
	
	ОбновитьКоличество = Ложь;
	Если СтруктураПараметров.Свойство("ОбновитьКоличество") Тогда
		ОбновитьКоличество = Истина;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("УчетУпаковок") Тогда
		УчетУпаковок = СтруктураПараметров.УчетУпаковок;
	Иначе
		УчетУпаковок = Истина;
	КонецЕсли; 
	
	Если СтруктураПараметров.Свойство("СворачиватьПоСтрокеПоиска") Тогда
		СворачиватьПоСтрокеПоиска = СтруктураПараметров.СворачиватьПоСтрокеПоиска;
	Иначе
		СворачиватьПоСтрокеПоиска = Истина;
	КонецЕсли; 
	
	СтруктураПоиска = Новый Структура;
	
	МассивСтрок = Новый Массив;
	Если СворачиватьПоСтрокеПоиска И Форма.Объект.Товары.Количество() > 0 Тогда
		СтруктураПоиска.Вставить("Номенклатура", СтруктураПараметров.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", СтруктураПараметров.Характеристика);
		Если УчетУпаковок Тогда
			СтруктураПоиска.Вставить("Упаковка", СтруктураПараметров.Упаковка);
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("ОбработатьБезМаркировки")
			И СтруктураПараметров.ОбработатьБезМаркировки Тогда 
			
			СтруктураПоиска.Вставить("МаркируемаяПродукция", Ложь);
		КонецЕсли;
		
		МассивСтрок = Форма.Объект.Товары.НайтиСтроки(СтруктураПоиска);
		
	КонецЕсли;
	
	Если МассивСтрок.Количество() > 0 Тогда 
		
		ТекущаяСтрока = МассивСтрок[0];
		
		Если СтруктураПараметров.Свойство("СтруктураОтбораРедактируемыхСтрок") Тогда
			РедактируемыеСтроки = Форма.Объект.Товары.НайтиСтроки(СтруктураПараметров.СтруктураОтбораРедактируемыхСтрок);
			Если РедактируемыеСтроки.Найти(ТекущаяСтрока) = Неопределено Тогда
				Возврат ТекущаяСтрока;
			КонецЕсли;
		КонецЕсли;
		
		Если ТекущаяСтрока.Свойство("ИспользоватьСерийныеНомера") Тогда
			УстановитьКоличество = ОбновитьКоличество И НЕ ТекущаяСтрока.ИспользоватьСерийныеНомера;
		Иначе
			УстановитьКоличество = ОбновитьКоличество;
		КонецЕсли;
		
		Если УстановитьКоличество Тогда
			
			Если УчетУпаковок Тогда
				ТекущаяСтрока.КоличествоУпаковок = КоличествоУпаковок;
			Иначе
				ТекущаяСтрока.Количество = КоличествоУпаковок;
			КонецЕсли;
			
		ИначеЕсли УчетУпаковок Тогда
			
			Если СтруктураПараметров.Упаковка = ТекущаяСтрока.Упаковка Тогда
				КоэффициентПересчета = 1;
			Иначе
				КоэффициентУпаковкиПоиска = 1;
				Если ЗначениеЗаполнено(СтруктураПараметров.Упаковка) Тогда
					КоэффициентУпаковкиПоиска = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПараметров.Упаковка, "Коэффициент");
					Если КоэффициентУпаковкиПоиска <= 0 Тогда
						КоэффициентУпаковкиПоиска = 1;
					КонецЕсли;
				КонецЕсли;
				
				КоэффициентУпаковкиСтроки = 1;
				Если ЗначениеЗаполнено(ТекущаяСтрока.Упаковка) Тогда
					КоэффициентУпаковкиПоиска = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Упаковка, "Коэффициент");
					Если КоэффициентУпаковкиСтроки <= 0 Тогда
						КоэффициентУпаковкиСтроки = 1;
					КонецЕсли;
				КонецЕсли;
			
				КоэффициентПересчета = КоэффициентУпаковкиПоиска / КоэффициентУпаковкиСтроки;
			КонецЕсли;
			
			ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.КоличествоУпаковок + КоличествоУпаковок * КоэффициентПересчета;
		Иначе
			ТекущаяСтрока.Количество = ТекущаяСтрока.Количество + КоличествоУпаковок;
		КонецЕсли;
		
	Иначе
		
		ТекущаяСтрока = Форма.Объект.Товары.Добавить();
		ТекущаяСтрока.Номенклатура = СтруктураПараметров.Номенклатура;
		ТекущаяСтрока.Характеристика = СтруктураПараметров.Характеристика;
		Если УчетУпаковок Тогда
			ТекущаяСтрока.Упаковка = СтруктураПараметров.Упаковка;
		КонецЕсли;
		Если ТекущаяСтрока.Свойство("ИспользоватьСерийныеНомера") Тогда
			ТекущаяСтрока.ИспользоватьСерийныеНомера = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПараметров.Номенклатура, "ИспользоватьСерийныеНомера");
		КонецЕсли;
		Если ТекущаяСтрока.Свойство("Штрихкод")
			И СтруктураПараметров.Свойство("Штрихкод") Тогда
			Если СтруктураПараметров.Свойство("ШтрихкодУпаковки") Тогда
				Если НЕ ЗначениеЗаполнено(СтруктураПараметров.ШтрихкодУпаковки) Тогда
					ТекущаяСтрока.Штрихкод = СтруктураПараметров.Штрихкод;
				КонецЕсли;
			Иначе
				ТекущаяСтрока.Штрихкод = СтруктураПараметров.Штрихкод;
			КонецЕсли;
		КонецЕсли;
		Если УчетУпаковок Тогда
			ТекущаяСтрока.КоличествоУпаковок = КоличествоУпаковок;
		Иначе
			ТекущаяСтрока.Количество = КоличествоУпаковок
		КонецЕсли;
		
		СтруктураПараметров.Вставить("ДобавленаСтрока", Истина);
		
	КонецЕсли;
	
	Если ТекущаяСтрока.Свойство("ИспользоватьСерийныеНомера")
		И ТекущаяСтрока.ИспользоватьСерийныеНомера
		И НЕ СтруктураПараметров.Свойство("ДобавитьКоличество") Тогда
		МассивСерийныхНомеров = ОбработкаТабличнойЧастиТоварыКлиентСервер.МассивСерийныхНомеровДляСтрокиТоваров(
									ТекущаяСтрока.КлючСвязиСерийныхНомеров,
									Форма.Объект.СерийныеНомера);
		Если УчетУпаковок Тогда
			ТекущаяСтрока.КоличествоУпаковок = МассивСерийныхНомеров.Количество();
		Иначе
			ТекущаяСтрока.Количество = МассивСерийныхНомеров.Количество();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекущаяСтрока;
	
КонецФункции

&НаСервере
Процедура СвернутьСтрокиГИСМ(Номенклатура, Характеристика)
	
	ПерезаполнитьПризнакиМаркировки();
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура", Номенклатура);
	СтруктураПоиска.Вставить("Характеристика", Характеристика);
	
	МассивСтрок = Объект.Товары.НайтиСтроки(СтруктураПоиска);
	КоличествоНайденныхСтрок = МассивСтрок.Количество();
	Если КоличествоНайденныхСтрок > 1 
		И МассивСтрок[0].ОсобенностиУчетаНоменклатуры = Перечисления.ОсобенностиУчетаНоменклатуры.ПродукцияМаркируемаяДляГИСМ Тогда
		
		НоваяТекущаяСтрока = МассивСтрок[КоличествоНайденныхСтрок - 2];
		Элементы.Товары.ТекущаяСтрока = НоваяТекущаяСтрока.ПолучитьИдентификатор();
		Объект.Товары.Удалить(Объект.Товары.Количество() - 1);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьВозвратПродукцииИСМПБезМарок(СписокНоменклатуры)
	
	ЗаголовокИнформации = НСтр("ru = 'Возврат маркируемой продукции'");
	
	ТекстВопроса = НСтр("ru = 'Не указаны коды маркировки для следующих товаров:'") + Символы.ПС;
	Для Каждого ЭлементСписка Из СписокНоменклатуры Цикл 
		ТекстВопроса = ТекстВопроса + "%1" + Символы.ПС;
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ЭлементСписка);
	КонецЦикла;
	ТекстВопроса = ТекстВопроса + Символы.ПС + НСтр("ru = 'Продолжить пробитие?'");
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеПодтвержденияВозвратаПродукцииИСМПБезМарок", ЭтотОбъект);
	ОбщегоНазначенияРТКлиент.ВывестиВопросДляРМКУправляемой(ЗаголовокИнформации, ТекстВопроса, ,ОбработчикОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьВидаОперации()
	
	МассивМаркируемыхТоваров = Объект.Товары.НайтиСтроки(Новый Структура("НеобходимостьВводаАкцизнойМарки", Истина));
	Если МассивМаркируемыхТоваров.Количество() > 0 Тогда 
		Элементы.ВидОперации.Доступность = Ложь;
	Иначе 
		Элементы.ВидОперации.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#Область Штрихкодирование

&НаКлиенте
Процедура Подключаемый_ПослеОбработкиШтрихкодов()
	
	ШтрихкодированиеИСКлиентПереопределяемый.ПослеОбработкиШтрихкодов(
		ЭтотОбъект,
		ДанныеДляОбработки,
		КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьКодМаркировки(ИсходныеДанные, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ИсходныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСканирования = ШтрихкодированиеИСКлиент.ПараметрыСканирования(ЭтотОбъект);
	
	ШтрихкодированиеИСКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ИсходныеДанные);
	
	РезультатОбработки = ОбработатьВводШтрихкода(ИсходныеДанные, Неопределено, ПараметрыСканирования);
	
	ПараметрыЗавершенияВводаШтрихкода = ПараметрыЗавершенияВводаШтрихкода(ИсходныеДанные, РезультатОбработки, ПараметрыСканирования);
	ШтрихкодированиеИСКлиент.ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
	
КонецПроцедуры

&НаСервере
Функция ОбработатьВводШтрихкода(ДанныеШтрихкода, КэшированныеЗначения, ПараметрыСканирования = Неопределено)
	
	РезультатОбработкиШтрихкода =
		ШтрихкодированиеИС.ОбработатьВводШтрихкода(ЭтотОбъект, ДанныеШтрихкода, КэшированныеЗначения, ПараметрыСканирования);
	
	ПослеОбработкиШтрихкодов(РезультатОбработкиШтрихкода, КэшированныеЗначения);
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

&НаСервере
Процедура ПослеОбработкиШтрихкодов(РезультатОбработкиШтрихкода, КэшированныеЗначения)
	
	Если Не РезультатОбработкиШтрихкода.ТребуетсяОбработкаШтрихкода Тогда
		
		ОбработатьСтрокиТЧ(
			РезультатОбработкиШтрихкода.ДобавленныеСтроки,
			РезультатОбработкиШтрихкода.ИзмененныеСтроки,
			КэшированныеЗначения,
			РезультатОбработкиШтрихкода.ОбработкаШтрихкодаБезМарки);
			
		РезультатОбработкиШтрихкода.ИзмененныеСтроки = Неопределено;
		РезультатОбработкиШтрихкода.ДобавленныеСтроки = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыЗавершенияВводаШтрихкода(ИсходныеДанные, РезультатОбработки, ПараметрыСканирования)
	
	ПараметрыЗавершенияВводаШтрихкода = ШтрихкодированиеИСКлиент.ПараметрыЗавершенияОбработкиШтрихкода(,,"ОповещениеЗавершениеОбработкиКодаМаркировки");
	ПараметрыЗавершенияВводаШтрихкода.РезультатОбработкиШтрихкода = РезультатОбработки;
	ПараметрыЗавершенияВводаШтрихкода.Форма                       = ЭтотОбъект;
	ПараметрыЗавершенияВводаШтрихкода.ПараметрыСканирования       = ПараметрыСканирования;
	ПараметрыЗавершенияВводаШтрихкода.ДанныеШтрихкода             = ИсходныеДанные;
	
	Возврат ПараметрыЗавершенияВводаШтрихкода;
	
КонецФункции

&НаКлиенте
Процедура ОповещениеЗавершениеОбработкиКодаМаркировки(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Результат.ТребуетсяОбработкаШтрихкода Тогда
		Штрихкод = Неопределено;
		Если ЗначениеЗаполнено(Результат.Штрихкод) Тогда
			Штрихкод = Результат.Штрихкод;
		ИначеЕсли ТипЗнч(Результат.ИсходныеДанные) = Тип("Структура") И Результат.ИсходныеДанные.Свойство("Штрихкод") Тогда
			Штрихкод = Результат.ИсходныеДанные.Штрихкод;
		ИначеЕсли ТипЗнч(Результат.ДанныеШтрихкода) = Тип("Структура") И Результат.ДанныеШтрихкода.Свойство("Штрихкод") Тогда
			Штрихкод = Результат.ДанныеШтрихкода.Штрихкод;
		ИначеЕсли ТипЗнч(Результат.ДанныеШтрихкода) = Тип("Строка") Тогда
			Штрихкод = Результат.ДанныеШтрихкода;
		КонецЕсли;
		
		// Обработаем штрихкод средствами РТ.
		Если ЗначениеЗаполнено(Штрихкод) Тогда
			ОповещениеПоискаПоШтрихкоду(Штрихкод);
		КонецЕсли;
		
	КонецЕсли;
	
	ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
	УстановитьДоступностьВидаОперации();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьСтрокиТЧ(ДобавленныеСтроки, ИзмененныеСтроки, КэшированныеЗначения = Неопределено, ОбработатьБезМаркировки = Ложь) Экспорт
	
	Для Каждого Строка Из ДобавленныеСтроки Цикл
		СтруктураПараметров = ШтрихкодированиеИСРТ.ДанныеШтрихкодаДляОбработки();
		СтруктураПараметров.Вставить("ТекущаяСтрока", Строка);
		СтруктураПараметров.Вставить("ДобавленаСтрока", Истина);
		СтруктураПараметров.ОбработатьБезМаркировки = ОбработатьБезМаркировки;
		
		ДобавитьНайденныеПозицииТоваровСервер(СтруктураПараметров);
	КонецЦикла;
	
	Для Каждого Строка Из ИзмененныеСтроки Цикл
		СтруктураПараметров = ШтрихкодированиеИСРТ.ДанныеШтрихкодаДляОбработки();
		СтруктураПараметров.Вставить("ТекущаяСтрока", Строка);
		СтруктураПараметров.ОбработатьБезМаркировки = ОбработатьБезМаркировки;
		
		ДобавитьНайденныеПозицииТоваровСервер(СтруктураПараметров);
	КонецЦикла;
	
	Если ДобавленныеСтроки.Количество()>0 Или ИзмененныеСтроки.Количество()>0 Тогда
		СобытияФормИС.ПриИзмененииЭлемента(ЭтотОбъект, "Товары", Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОписаниеОповещенияОбработкиКодаМаркировки()
	
	Возврат Новый ОписаниеОповещения("ОбработатьКодМаркировки", ЭтотОбъект);
	
КонецФункции

&НаКлиенте
Функция ОбработкаКодаМаркировкиВыполнитьДействие(ДанныеДляВыполненияДействия, ДополнительныеПараметры) Экспорт
	
	РезультатВыбора             = ДанныеДляВыполненияДействия.РезультатВыбора;
	РезультатОбработкиШтрихкода = ДанныеДляВыполненияДействия.РезультатОбработкиШтрихкода;
	КэшированныеЗначения        = ДанныеДляВыполненияДействия.КэшированныеЗначения;
	ПараметрыСканирования       = ДанныеДляВыполненияДействия.ПараметрыСканирования;
	
	Действие = ДанныеДляВыполненияДействия.Действие;
	РезультатОбработкиШтрихкода = ОбработкаКодаМаркировкиВыполнитьДействиеСервер(Действие, РезультатВыбора, РезультатОбработкиШтрихкода, ПараметрыСканирования, КэшированныеЗначения);
	
	ПараметрыЗавершенияВводаШтрихкода = ПараметрыЗавершенияВводаШтрихкода(
		ДанныеДляВыполненияДействия.ИсходныеДанные, РезультатОбработкиШтрихкода, ДанныеДляВыполненияДействия.ПараметрыСканирования);
	ШтрихкодированиеИСКлиент.ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
	
КонецФункции

&НаСервере
Функция ОбработкаКодаМаркировкиВыполнитьДействиеСервер(Действие, РезультатВыбора, РезультатОбработкиШтрихкода, ПараметрыСканирования, КэшированныеЗначения)
	
	ПараметрыОбработкиВыбора    = ШтрихкодированиеИС.ИнициализироватьПараметрыОбработкиВыбора(РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения);
	РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ВыполнитьДействие(ЭтотОбъект, Действие, ПараметрыОбработкиВыбора);
	
	ПослеОбработкиШтрихкодов(РезультатОбработкиШтрихкода, КэшированныеЗначения);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Неопределено;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Неопределено;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОткрытьФормуУточненияДанных()
	
	СобытияФормРТКлиент.ПриИзмененииЭлемента(ЭтотОбъект, "Подключаемый_ОткрытьФормуУточненияДанных");
	
КонецПроцедуры

#КонецОбласти

#Область Маркировка

&НаКлиентеНаСервереБезКонтекста
Процедура ДополнитьСтруктуруДействиямиНДС(СтруктураДействий, ВестиУчетМаркируемойПродукцииИСМП)
	
	ИнтеграцияИСРТКлиентСервер.ДополнитьСтруктуруДействиямиНДС(СтруктураДействий, ВестиУчетМаркируемойПродукцииИСМП);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДополнитьСтруктуруДействиямиГосИС(СтруктураДействий, ЭтоОперацияСДС, МаркировкаВключена, БезМаркировки = Ложь)
	
	ИнтеграцияИСРТКлиентСервер.ДополнитьСтруктуруДействиямиГосИС(СтруктураДействий, ЭтоОперацияСДС, МаркировкаВключена, БезМаркировки);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияНаСервере(ИмяСобытия, Параметр, Источник)

	ДополнительныеПараметры = Новый Структура("ИмяСобытия, Параметр, Источник", ИмяСобытия, Параметр, Источник);
	СобытияФормИС.ПриИзмененииЭлемента(ЭтотОбъект, "Событие", ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЭлементаГосИС()
	
	ДополнительныеПараметры = Новый Структура;
	СобытияФормИСКлиент.ПриИзмененииЭлемента(ЭтотОбъект, "Товары", ДополнительныеПараметры);
	Если ДополнительныеПараметры.Свойство("ТребуетсяСерверныйВызов") Тогда
		ТоварыПриОкончанииРедактированияНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПриОкончанииРедактированияНаСервере()
	
	СобытияФормИС.ПриИзмененииЭлемента(ЭтотОбъект, "Товары", Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьПризнакиМаркировки()
	
	Если МаркировкаВключена Тогда 
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьДанныеМаркировки(ЭтотОбъект);
		
		Настройки = ПроверкаИПодборПродукцииИСМПРТ.НастройкиИсточникаКешаЧека();
		ПроверкаИПодборПродукцииИС.ЗаполнитьКешШтрихкодовУпаковок(ЭтотОбъект, Настройки);
		ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(ЭтотОбъект, Настройки);
		ШтрихкодированиеИС.ОбновитьКэшМаркируемойПродукции(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтменитьОплатуВПлатежнойСистемеКлиент()
	
	ПараметрыПроцедуры = Новый Структура();
	ПараметрыПроцедуры.Вставить("Организация", 		Объект.Организация);
	ПараметрыПроцедуры.Вставить("Магазин", 			Объект.Магазин);
	ПараметрыПроцедуры.Вставить("КассаККМ", 		Объект.КассаККМ);
	ПараметрыПроцедуры.Вставить("ДокументОплаты", 	Объект.Ссылка);
	
	РезультатОтмены = ОтменитьОплатуВПлатежнойСистемеСервер(ПараметрыПроцедуры);
	
	ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатОтмены.СообщениеОбОшибке);
	
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаСервере
Функция ОтменитьОплатуВПлатежнойСистемеСервер(ПараметрыПроцедуры)
	
	ВидОплаты	= объект.Оплата.Выгрузить().ВыгрузитьКолонку("ВидОплаты");

	Интеграции 	= РегистрыСведений.СоответствиеНастроекИнтеграции.НастройкиИнтеграции(ПараметрыПроцедуры.Организация, ПараметрыПроцедуры.Магазин, ВидОплаты);
	Если Интеграции.Количество() Тогда
		
		ПараметрыПроцедуры.Вставить("Интеграция", Интеграции[0].Интеграция);
		
		Возврат ИнтеграцияСПлатежнымиСистемамиРТСервер.ОтменитьОплату(ПараметрыПроцедуры);
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьДоступностьРасчетыСКлиентами()
	
	ДокументРасчетаЗаполнен = ЗначениеЗаполнено(Объект.ДокументРасчета);
	
	Элементы.ДокументРасчета.Видимость = НЕ Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат;
	Элементы.ОперацияСДенежнымиСредствами.Доступность = НЕ ДокументРасчетаЗаполнен;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
		Элементы.ОперацияСДенежнымиСредствами.Заголовок = НСтр("ru = 'Прием денежных средств без передачи товаров'");
	Иначе
		Элементы.ОперацияСДенежнымиСредствами.Заголовок = НСтр("ru = 'Возврат денежных средств без передачи товаров'");
	КонецЕсли;
	
	Элементы.Контрагент.Доступность    = НЕ ДокументРасчетаЗаполнен;
	Элементы.ВидОперации.Доступность   = НЕ ДокументРасчетаЗаполнен;
	Элементы.ЧекККМПродажа.Доступность = НЕ ДокументРасчетаЗаполнен;
	
	Элементы.Контрагент.ПодсказкаВвода = Константы.КонтрагентРозничныйПокупатель.Получить().Наименование;
	
	ВидимостьОплатРасчетыСКлиентамиСервер()
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеКлючевыхРеквизитов()
	
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Магазин) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Магазин'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Магазин", "Объект", Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Организация'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Организация", "Объект", Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Контрагент'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Контрагент", "Объект", Отказ);
	КонецЕсли;
	
	Возврат НЕ Отказ;
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииКлючевыхРеквизитов(Источник, Значение)
	
	Если ПредыдущиеЗначения[Источник] = Значение Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник = "КассаККМ" Тогда
		ПриИзмененииКлючевыхРеквизитов("Магазин", Объект.Магазин);
		ПриИзмененииКлючевыхРеквизитов("Организация", Объект.Организация);
	ИначеЕсли ЗначениеЗаполнено(Объект.ЗаказПокупателя) Тогда
		Объект.ЗаказПокупателя = Неопределено;
		УправлениеЭлементамиЗаказПокупателя();
	КонецЕсли;
	
	ПредыдущиеЗначения.Вставить(Источник, Значение);
	
КонецПроцедуры

#Область ЗаказПокупателя

&НаКлиенте
Процедура ПоказатьВопросВыбратьЗаказПокупателяЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОткрытьФормуВыбораЗаказаПокупателя();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораЗаказаПокупателя()
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Организация", Объект.Организация);
	ПараметрыОтбора.Вставить("Контрагент",  Объект.Контрагент);
	ПараметрыОтбора.Вставить("Магазин",     Объект.Магазин);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
	
	ОткрытьФорму("Документ.ЗаказПокупателя.ФормаВыбора",
		ПараметрыФормы,
		ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ВыборЗаказаПокупателяЗавершение", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗаказаПокупателяЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ЗаказПокупателя = Результат;
	УправлениеЭлементамиЗаказПокупателя();
	ЗаполнитьПоЗаказуПокупателя();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросЗаполнитьПоЗаказуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоЗаказуПокупателя();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЗаказуПокупателя()
	
	Объект.Товары.Очистить();
	Объект.СкидкиНаценки.Очистить();
	Объект.СерийныеНомера.Очистить();
	Объект.Серии.Очистить();
	
	Объект.ПогашениеПодарочныхСертификатов.Очистить();
	Объект.Подарки.Очистить();
	Объект.УправляемыеСкидки.Очистить();
	
	ЗаполнитьПоЗаказуПокупателяНаСервере();
	ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
	
	ОбновитьИтоговыеПоказателиКлиентСервер(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоЗаказуПокупателяНаСервере()
	
	РозничныеПродажиСервер.ЗаполнитьПоОстаткамЗаказа(Объект, Объект.ЗаказПокупателя);
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Подарки);
	ПерезаполнитьПризнакиМаркировки();
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Подарки);
	СкидкиНаценкиСерверПереопределяемый.ОбновитьОтображениеСкидки(Объект);
	БонусныеБаллыСервер.ОбновитьОтображениеБонусов(Объект);
	
	// Проверим соответствие документа расчетов заказу.
	Если ЗначениеЗаполнено(Объект.ДокументРасчета) Тогда
		Если ТипЗнч(Объект.ДокументРасчета) = Тип("ДокументСсылка.РегистрацияБезналичнойОплаты") Тогда
			ЗаказДокументаРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументРасчета, "ДокументОснование");
		Иначе
			ЗаказДокументаРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументРасчета, "ЗаказПокупателя");
		КонецЕсли;
		
		Если НЕ Объект.ЗаказПокупателя = ЗаказДокументаРасчетов Тогда
			Объект.ДокументРасчета = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыСервер.УправлениеЭлементамиАгентскогоВознаграждения(ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеЭлементамиЗаказПокупателя()
	
	ЭтоВозврат = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат");
	ПродажаПоЗаказу = ЗначениеЗаполнено(Объект.ЗаказПокупателя);
	
	Элементы.ОткрытьЗаказПокупателя.Заголовок = Строка(Объект.ЗаказПокупателя);
	
	// Установим параметры выбора документа расчетов.
	ПараметрыВыбораДокументРасчетов = Новый Массив;
	Если ПродажаПоЗаказу Тогда
		ПараметрыВыбораДокументРасчетов.Добавить(Новый ПараметрВыбора("Отбор.ЗаказПокупателя", Объект.ЗаказПокупателя));
	КонецЕсли;
	Элементы.ДокументРасчета.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораДокументРасчетов);
	
	// Установим видимость.
	Элементы.ГруппаЗаказПокупателя.Видимость   = НЕ ЭтоВозврат;
	Элементы.ВыбратьЗаказПокупателя.Видимость  = НЕ ПродажаПоЗаказу;
	Элементы.ОткрытьЗаказПокупателя.Видимость  = ПродажаПоЗаказу;
	Элементы.ОчиститьЗаказПокупателя.Видимость = ПродажаПоЗаказу;
	Элементы.ТоварыРезервировать.Видимость     = ПродажаПоЗаказу;
	
	// Установим доступность зависимых элементов управления.
	Элементы.ТоварыЗаполнитьПоЗаказу.Доступность = ПродажаПоЗаказу И НЕ ЭтоВозврат;
	
	ЭлементыДоступность = Новый Массив;
	ЭлементыДоступность.Добавить("ТоварыРассчитатьСкидкиНаценки");
	ЭлементыДоступность.Добавить("ТоварыНазначитьАвтоматическиеСкидки");
	ЭлементыДоступность.Добавить("ТоварыПеренестиПодаркиВТовары");
	ЭлементыДоступность.Добавить("ТоварыНазначитьРучнуюСкидку");
	ЭлементыДоступность.Добавить("ТоварыОтменитьРучныеСкидки");
	ЭлементыДоступность.Добавить("ПодаркиПеренестиПодаркиВТовары");
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, ЭлементыДоступность, "Доступность", НЕ ПродажаПоЗаказу И НЕ ЭтоВозврат);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеФизЛицаСервер()
	
	Если Не ТипЗнч(Объект.ФизЛицо) = Тип("Строка") И ЗначениеЗаполнено(Объект.ФизЛицо) Тогда
		
		УдостоверениеЛичности = РегистрыСведений.ДокументыФизическихЛиц.ДокументУдостоверяющийЛичностьФизлица(Объект.Физлицо);
		Объект.ПоДокументу = УдостоверениеЛичности;
		Объект.ДатаРождения = Объект.ФизЛицо.ДатаРождения;
		
	КонецЕсли;
	
	ЗаполнениеФИО();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеФИО()
	
	Если Не ТипЗнч(Объект.ФизЛицо) = Тип("Строка") И ЗначениеЗаполнено(Объект.ФизЛицо) Тогда
		ФизЛицоФИО = РегистрыСведений.ФИОФизЛиц.ПолучитьПоследнее(, Новый Структура("ФизЛицо", Объект.ФизЛицо)); 
		ФИОФизЛицаИП = ФизЛицоФИО.Фамилия + " " + ФизЛицоФИО.Имя + " " + ФизЛицоФИО.Отчество;

		Если СокрЛП(ФИОФизЛицаИП) = "" Тогда
			ФИОФизЛицаИП = Объект.ФизЛицо.Наименование;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Объект.ФизЛицо) = Тип("Строка") Тогда
		ФИОФизЛицаИП = Объект.ФизЛицо;
	Иначе
		ФИОФизЛицаИП = ""
	КонецЕсли;
	Если Не ЭтоLinuxСервер Тогда
		ФИОФизЛица = ОбщегоНазначенияРТКлиентСерверПовтИсп.ПолучитьСклонениеФИО(ФИОФизЛицаИП, 3);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ЧекНаходитсяВОчереди()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Ложь;
	Если Параметры.Ключ.Пустая() Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОчередьЧековККТ.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	РегистрСведений.ОчередьЧековККТ КАК ОчередьЧековККТ
	|ГДЕ
	|	ОчередьЧековККТ.ДокументОснование = &Ссылка
	|	И ОчередьЧековККТ.СтатусЧека <> &СтатусЧека";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("СтатусЧека", Перечисления.СтатусЧекаККТВОчереди.Фискализирован);
	Результат = Не Запрос.Выполнить().Пустой();
	
	Возврат Результат;
	
КонецФункции

#Область ОплатаЭСНСПК

&НаКлиенте
Процедура ОбработатьРезультатОплатыЭСНСПК(Знач РезультатВыполнения = Неопределено, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РезультатВыполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВыполнения.Результат Тогда
		
		ИдентификаторСтрокиВозврата = Неопределено;
		
		Если НЕ ДополнительныеПараметры = Неопределено Тогда
			ДополнительныеПараметры.Свойство("ИдентификаторСтрокиВозврата", ИдентификаторСтрокиВозврата);
		КонецЕсли;
		
		ОбработатьРезультатОплатыЭСНСПКНаСервере(РезультатВыполнения, ИдентификаторСтрокиВозврата);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатОплатыЭСНСПКНаСервере(РезультатВыполнения, ИдентификаторСтрокиВозврата)
	
	ВидОплатыПлатежнаяКарта = Неопределено;
	Если Не ЭтоВозврат Тогда
		Объект.Оплата.Очистить();
	КонецЕсли;
	
	ЭквайринговыйТерминал = Неопределено;
	
	Если РезультатВыполнения.Свойство("СуммаЭлектронногоСертификата") И РезультатВыполнения.СуммаЭлектронногоСертификата >0 Тогда
		
		ВидОплатыПлатежнаяСистемаНСПК = ЭлектронныеСертификатыНСПКРТ.ВидОплатыПлатежнаяСистемаНСПК();
		СтрокаЭСНСПК = Неопределено;
		Если ЭтоВозврат И ЗначениеЗаполнено(Объект.ЧекККМПродажа) Тогда
			СтрокаЭСНСПК = Объект.Оплата.НайтиПоИдентификатору(ИдентификаторСтрокиВозврата);
			Если СтрокаЭСНСПК = Неопределено ИЛИ
				НЕ СтрокаЭСНСПК.ВидОплаты = ВидОплатыПлатежнаяСистемаНСПК Тогда
				
				СтрокиЭСНСПК = Объект.Оплата.НайтиСтроки(
					Новый Структура("ВидОплаты, ДанныеПереданыВБанк", ВидОплатыПлатежнаяСистемаНСПК, Ложь));
					Если СтрокиЭСНСПК.Количество()>0 Тогда
						СтрокаЭСНСПК = СтрокиЭСНСПК[0];
					КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаЭСНСПК = Неопределено Тогда
			СтрокаЭСНСПК = Объект.Оплата.Добавить();
			СтрокаЭСНСПК.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ПлатежнаяСистема;
			СтрокаЭСНСПК.ВидОплаты = ВидОплатыПлатежнаяСистемаНСПК;
		КонецЕсли;
		
		СтрокаЭСНСПК.Сумма = РезультатВыполнения.СуммаЭлектронногоСертификата;
		
		Если ЭквайринговыйТерминал = Неопределено Тогда
			ЭквайринговыйТерминал = Справочники.ЭквайринговыеТерминалы.НайтиПоРеквизиту(
				"ПодключаемоеОборудование", РезультатВыполнения.ИдентификаторУстройства);
		КонецЕсли;
		
		СтрокаЭСНСПК.ЭквайринговыйТерминал = ЭквайринговыйТерминал;
		СтрокаЭСНСПК.НомерЧекаЭТ = РезультатВыполнения.НомерЧекаЭТ;
		СтрокаЭСНСПК.НомерПлатежнойКарты = РезультатВыполнения.НомерКарты;
		СтрокаЭСНСПК.СсылочныйНомер = РезультатВыполнения.ИдентификаторКорзины;
		СтрокаЭСНСПК.ДанныеПереданыВБанк = Истина;
		
	КонецЕсли;
	
	Если РезультатВыполнения.Свойство("СуммаСобственныхСредств") И РезультатВыполнения.СуммаСобственныхСредств >0 Тогда
		
		ВидОплатыПлатежнаяКартаНСПК = ЭлектронныеСертификатыНСПКРТ.ВидОплатыПлатежнаяКартаНСПК();
		СтрокаПКНСПК = Неопределено;
		
		Если ЭтоВозврат И ЗначениеЗаполнено(Объект.ЧекККМПродажа) Тогда
			СтрокиПКНСПК = Объект.Оплата.НайтиСтроки(
				Новый Структура("ВидОплаты, ДанныеПереданыВБанк", ВидОплатыПлатежнаяКартаНСПК, Ложь));
			Если СтрокиПКНСПК.Количество()>0 Тогда
				СтрокаПКНСПК = СтрокиПКНСПК[0];
			КонецЕсли;
		КонецЕсли;
			
		Если СтрокаПКНСПК = Неопределено Тогда
			СтрокаПКНСПК = Объект.Оплата.Добавить();
			СтрокаПКНСПК.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта;
			СтрокаПКНСПК.ВидОплаты = ВидОплатыПлатежнаяКартаНСПК;
		КонецЕсли;
		
		СтрокаПКНСПК.Сумма = РезультатВыполнения.СуммаСобственныхСредств;
		
		Если ЭквайринговыйТерминал = Неопределено Тогда
			ЭквайринговыйТерминал = Справочники.ЭквайринговыеТерминалы.НайтиПоРеквизиту(
				"ПодключаемоеОборудование",
				РезультатВыполнения.ИдентификаторУстройства);
		КонецЕсли;
			
		СтрокаПКНСПК.ЭквайринговыйТерминал = ЭквайринговыйТерминал;
		СтрокаПКНСПК.НомерЧекаЭТ = РезультатВыполнения.НомерЧекаЭТ;
		СтрокаПКНСПК.НомерПлатежнойКарты = РезультатВыполнения.НомерКарты;
		СтрокаПКНСПК.СсылочныйНомер = РезультатВыполнения.СсылочныйНомер;
		СтрокаПКНСПК.ДанныеПереданыВБанк = Истина;
		
	КонецЕсли;
	
	Если РезультатВыполнения.Свойство("Наличными") И РезультатВыполнения.Наличными >0 Тогда
		
		НоваяСтрока = Объект.Оплата.Добавить();
		НоваяСтрока.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.Наличные");
		НоваяСтрока.ВидОплаты = Справочники.ВидыОплатЧекаККМ.Наличные;
		НоваяСтрока.Сумма = РезультатВыполнения.Наличными;
		
	КонецЕсли;
	
	Сдача = 0;
	
	Если РезультатВыполнения.Свойство("Сдача") И РезультатВыполнения.Сдача >0 Тогда
		
		Сдача = РезультатВыполнения.Сдача;
		
	КонецЕсли;
	
	ОбновитьИтоговыеПоказателиКлиентСервер(ЭтотОбъект, Ложь);
	
	РежимЗаписи = Новый Структура("РежимЗаписи, РежимПроведения",
		РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
	Если НЕ СуммаКОплате = 0 Тогда
		Если Объект.Проведен Тогда
			РежимЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
		КонецЕсли;
	Иначе
		РежимЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение;
		Если НЕ Объект.Проведен Тогда
			Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаСеанса()) Тогда
				РежимЗаписи.РежимПроведения = РежимПроведенияДокумента.Оперативный;
			Иначе
				РежимЗаписи.РежимПроведения = РежимПроведенияДокумента.Неоперативный;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Успешно = Записать(РежимЗаписи);
	
	Если Успешно Тогда
		Прочитать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОплатыЭСНСПК(Знач Результат, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НЕ ДополнительныеПараметры = Неопределено
		И ДополнительныеПараметры.Свойство("ВыведеныСообщения") Тогда
		ОповещениеРасчетСкидокКлиент();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОплатаЭСНСПКПослеЗаписиДокумента", ЭтотОбъект, ДополнительныеПараметры),
			НСтр("ru = 'Для проведения оплаты ЭС НСПК необходимо записать документ. Записать?'"),
			РежимДиалогаВопрос.ДаНетОтмена);
		Возврат;
	КонецЕсли;
	
	ОплатаНСПКПродолжение(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаЭСНСПКПослеЗаписиДокумента(Знач Результат, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Проведен Тогда
		УспешнаяЗапись = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения));
	Иначе
		УспешнаяЗапись = Записать();
	КонецЕсли;
		
	Если УспешнаяЗапись Тогда
		ОплатаНСПКПродолжение(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаНСПКПродолжение(ДополнительныеПараметры)
	
	ТоварныеПозиции = Новый Массив();
	СтрокиДляОплатыЭС = Объект.Товары.НайтиСтроки(Новый Структура("ВозможнаОплатаЭС", Истина));
	
	Для Каждого СтрокаТоваров Из СтрокиДляОплатыЭС Цикл
		ТоварнаяПозиция = Новый Структура();
		ТоварнаяПозиция.Вставить("Номенклатура", СтрокаТоваров.Номенклатура);
		ТоварнаяПозиция.Вставить("КодТовараТРУ", СтрокаТоваров.КодТРУ);
		ТоварнаяПозиция.Вставить("Количество", СтрокаТоваров.Количество);
		ТоварнаяПозиция.Вставить("Цена", Окр(СтрокаТоваров.СуммаВсего/СтрокаТоваров.Количество, 2));
		ТоварнаяПозиция.Вставить("Сумма", СтрокаТоваров.СуммаВсего);
		ТоварныеПозиции.Добавить(ТоварнаяПозиция);
	КонецЦикла;
	
	ДополнительныеПараметры.Вставить("ТоварныеПозиции", ТоварныеПозиции);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатОплатыЭСНСПК", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("ОбщаяФорма.ФормаОплатыЭСНСПК",
		ДополнительныеПараметры,
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьЭСНСПКНаКлиенте()
	
	СтрокиСПустымКоличеством = Объект.Товары.НайтиСтроки(Новый Структура("Количество", 0));
	Для Каждого СтрокаСПустымКоличеством ИЗ СтрокиСПустымКоличеством Цикл
		ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'В строке товаров не указано количество'"),, "Объект.Товары");
		Возврат;
	КонецЦикла;
	
	СтрокиДляОплатыЭС = Объект.Товары.НайтиСтроки(Новый Структура("ВозможнаОплатаЭС", Истина));
	
	Если СтрокиДляОплатыЭС.Количество() = 0 Тогда
		ПоказатьПредупреждение(,
			НСтр("ru = 'В документе не выбраны товары из классификатора ФСС, либо у товаров не указан код ТРУ ФСС.'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоВозврат И Объект.Оплата.Количество() Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Удалите другие виды оплаты из документа. Совместное использование с другими видами оплат не поддерживается.'"),
			,
			"Объект.Оплата[0].ВидОплаты");
		Возврат;
	ИначеЕсли ЭтоВозврат И ЗначениеЗаполнено(Объект.ЧекККМПродажа) Тогда
		ТекущиеДанные = Элементы.Оплата.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено
			ИЛИ НЕ ТекущиеДанные.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПлатежнаяСистема") Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Выберите строку с видом оплаты платежной системой ЭС НСПК'"));
				
			Возврат;
		КонецЕсли;
	ИначеЕсли ЭтоВозврат И НЕ ЗначениеЗаполнено(Объект.ЧекККМПродажа) Тогда
		СтрокиДляОплатыЭС = Объект.Товары.НайтиСтроки(Новый Структура("ВозможнаОплатаЭС", Ложь));
		
		Если СтрокиДляОплатыЭС.Количество() > 0 Тогда
			ПоказатьПредупреждение(,
			НСтр("ru = 'При возврате без основания в документе должны быть выбраны товары только из классификатора ФСС'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("КассаККМ", Объект.КассаККМ);
	ДополнительныеПараметры.Вставить("ЭтоВозврат", ЭтоВозврат);
	ДополнительныеПараметры.Вставить("ИмяОбработкиОповещения", "ОповещениеОплатыЭСНСПК");
	
	Если ЭтоВозврат И ЗначениеЗаполнено(Объект.ЧекККМПродажа) Тогда
		
		ПодготовитьСкидкиИОплатуБонусамиКСторнированию();
		
		ДополнительныеПараметры.Вставить("СуммаЧека", ТекущиеДанные.Сумма);
		ДополнительныеПараметры.Вставить("ИдентификаторКорзины", ТекущиеДанные.СсылочныйНомер);
		ДополнительныеПараметры.Вставить("ИдентификаторСтрокиВозврата", ТекущиеДанные.ПолучитьИдентификатор());
		
		ОповещениеОплатыЭСНСПК(Неопределено, ДополнительныеПараметры);
		
	ИначеЕсли ЭтоВозврат И НЕ ЗначениеЗаполнено(Объект.ЧекККМПродажа) Тогда
		
		ОповещениеОВводеИдентификатораКорзины = Новый ОписаниеОповещения("ОповещениеОВводеИдентификатораКорзины", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВводСтроки(ОповещениеОВводеИдентификатораКорзины,, НСтр("ru='Укажите идентификатор корзины'"), 24);
		
	Иначе
		
		Отказ = Ложь;
		ПроверитьСкидки(Отказ, ДополнительныеПараметры);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("ВыведеныСообщения") Тогда
			Возврат;
		КонецЕсли;
		
		ДополнительныеПараметры.Вставить("СуммаЧека", СуммаКОплате);
		ОповещениеОплатыЭСНСПК(Неопределено, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВопросУдалениеДанныхОтправленныхВНСПК(Знач Результат = Неопределено, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДополнительныеПараметры = Неопределено И ДополнительныеПараметры.Свойство("ТекущаяСтрока") Тогда
		Объект.Оплата.Удалить(ДополнительныеПараметры.ТекущаяСтрока);
		Если Объект.Проведен Тогда
			УспешнаяЗапись = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения));
		Иначе
			УспешнаяЗапись = Записать();
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьИтоговыеПоказателиКлиентСервер(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОВводеИдентификатораКорзины(Знач Результат = Неопределено, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтрДлина(Результат) = 24 Тогда
		ПоказатьПредупреждение(,
			НСтр("ru = 'Идентификатор оплаты должен состоять из 24 символов'"));
		Возврат;
	КонецЕсли;
	
	ПодготовитьСкидкиИОплатуБонусамиКСторнированию();
	
	ДополнительныеПараметры.Вставить("СуммаЧека", СуммаКОплате);
	ДополнительныеПараметры.Вставить("ИдентификаторКорзины", Результат);
	
	ОповещениеОплатыЭСНСПК(Неопределено, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтправитьПодтверждениеНСПКНаСервере(ЧекККМ, СуммаСертификатамиНСПК)
	
	Результат = ЭлектронныеСертификатыНСПКРТ.ПередачаДанныхФискальногоЧека(ЧекККМ, СуммаСертификатамиНСПК);
	
	ОбщегоНазначения.СообщитьПользователю(Результат.ОписаниеОшибки);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПодтверждениеНСПКНаКлиенте()
	
	СтрокиДляОплатыЭС = Объект.Товары.НайтиСтроки(Новый Структура("ВозможнаОплатаЭС", Истина));
	
	Если СтрокиДляОплатыЭС.Количество() = 0 Тогда
		ПоказатьПредупреждение(,
			НСтр("ru = 'В документе не выбраны товары из классификатора ФСС, либо у товаров не указан код ТРУ ФСС.'"));
		Возврат;
	КонецЕсли;
	
	СуммаОплатыСертификатамиНСПК = СуммаОплатыСертификатамиНСПК(Объект.Ссылка);
	
	Если СуммаОплатыСертификатамиНСПК = 0 Тогда
		ПоказатьПредупреждение(,
			НСтр("ru = 'Отправлять подтверждение не требуется, т.к. ЭС НСПК не использовался для оплаты'"));
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("СуммаСертификатамиНСПК", СуммаОплатыСертификатамиНСПК);
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ОповещениеВопросОтправитьПодтверждениеНСПК", ЭтотОбъект, ДополнительныеПараметры),
		НСтр("ru = 'Подтверждение уже было отправлено на сервер НСПК. Повторить отправку подтверждения?'"),
			РежимДиалогаВопрос.ПовторитьОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВопросОтправитьПодтверждениеНСПК(Знач Результат = Неопределено, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Повторить Тогда
		Возврат;
	КонецЕсли;
	
	ОтправитьПодтверждениеНСПКНаСервере(Объект.Ссылка, ДополнительныеПараметры.СуммаСертификатамиНСПК);
КонецПроцедуры

&НаСервере
Функция СуммаОплатыСертификатамиНСПК(ЧекККМ)
	
	Возврат ЭлектронныеСертификатыНСПКРТ.СуммаСертификатамиНСПК(ЧекККМ);
КонецФункции

&НаСервере
Процедура ПроверитьВозможностьВозвратаПлатежнойСистемой()
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат
		И ЗначениеЗаполнено(Объект.ЧекККМПродажа) Тогда
		
		Запрос = Новый Запрос;
	
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЧекККМОплата.Ссылка КАК ДокументОплаты
		|ИЗ
		|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
		|ГДЕ
		|	ЧекККМОплата.Ссылка = &ЧекККМПродажаОснование
		|	И ЧекККМОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ПлатежнаяСистема)
		|	И ЧекККМОплата.Ссылка.СсылкаЯндексКассы = """"";
	
		Запрос.УстановитьПараметр("ЧекККМПродажаОснование", Объект.ЧекККМПродажа);
	
		РезультатЗапроса = Запрос.Выполнить();
	
		Если Не РезультатЗапроса.Пустой() Тогда
			Элементы.ОплатаQRКодом.Доступность = Истина;
		Иначе
			Элементы.ОплатаQRКодом.Доступность = Ложь;
		КонецЕсли;
		
	Иначе
		Элементы.ОплатаQRКодом.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

