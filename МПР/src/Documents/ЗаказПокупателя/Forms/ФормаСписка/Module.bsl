
#Область ОбработчикиСобытийФормы

// Процедура - обработчик события "ПриСозданииНаСервере" формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.КоманднаяПанельФормы;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ИспользоватьРезервированиеПоЗаказамПокупателей = ПолучитьФункциональнуюОпцию("ИспользоватьРезервированиеПоЗаказамПокупателей");
	
	УстановитьОтборДинамическихСписков();
	
	ОбщегоНазначенияРТ.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "Список", "Дата");
	
	//ММС
	ds_ПереопределениеГлобальнойКомандыРеализации();
	//ММС
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Магазин       = Настройки.Получить("Магазин");
	Ответственный = Настройки.Получить("Ответственный");
	СостояниеЗаказаПокупателя = Настройки.Получить("СостояниеЗаказаПокупателя");
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
          
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		     Истина, "Документ.ЗаказПокупателя.Форма.ФормаДокумента.Открытие");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события "ПриИзменении" поля "Магазин".
&НаКлиенте
Процедура ОтборМагазинПриИзменении(Элемент)
	
	МагазинОтборПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
        
    // &ЗамерПроизводительности
    ОценкаПроизводительностиРТКлиент.НачатьЗамер(
             Истина, "Документ.ЗаказПокупателя.Форма.ФормаДокумента.СозданиеНового");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаказыНаДоставку(Команда)
	
	ОчиститьСообщения();
	СервисДоставкиКлиент.ОткрытьФормуСпискаЗаказовНаДоставку();
КонецПроцедуры

&НаКлиенте
Процедура ТрекерЗаказов(Команда)
	
	ОчиститьСообщения();
	СервисДоставкиКлиент.ОткрытьФормуОтслеживанияЗаказа();
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура МагазинОтборПриИзмененииНаСервере()
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтветственныйПриИзменении(Элемент)
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеОплатыПриИзменении(Элемент)
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеДоставкиПриИзменении(Элемент)
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Прочее

// Функция возвращает массив динамических списков, для которых требуется установка отбора.
//
&НаСервере
Функция ПолучитьМассивДинамическихСписковНаСервере()

	МассивСписков = Новый Массив;
	МассивСписков.Добавить(Список);
	
	Возврат МассивСписков;

КонецФункции

// Процедура устанавливает отбор динамических списков формы.
//
&НаСервере
Процедура УстановитьОтборДинамическихСписков()
	
	Для Каждого ДинамическийСписок Из ПолучитьМассивДинамическихСписковНаСервере() Цикл
		
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(ДинамическийСписок, "Магазин"          , Магазин          , ЗначениеЗаполнено(Магазин)          , ВидСравненияКомпоновкиДанных.Равно);
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(ДинамическийСписок, "Ответственный"    , Ответственный    , ЗначениеЗаполнено(Ответственный)    , ВидСравненияКомпоновкиДанных.Равно);
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(ДинамическийСписок, "СостояниеОплаты"  , СостояниеОплаты  , ЗначениеЗаполнено(СостояниеОплаты)  , ВидСравненияКомпоновкиДанных.Равно);
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(ДинамическийСписок, "СостояниеДоставки", СостояниеДоставки, ЗначениеЗаполнено(СостояниеДоставки), ВидСравненияКомпоновкиДанных.Равно);
		
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти

#Область ds_Кастомизация

&НаКлиенте
Процедура ds_СоздатьНаОснованииРеализацияТоваров(Команда)
		
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	МассивЗаказов = новый Массив;
	
	Для Каждого Заказ Из ВыделенныеСтроки Цикл
		МассивЗаказов.Добавить(Заказ);
	КонецЦикла;
	
	Если НЕ ЕстьОшибкиСозданияРеализацииПоЗаказам(МассивЗаказов) Тогда
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", СформироватьПараметрыОснования(МассивЗаказов));
	ОткрытьФорму("Документ.РеализацияТоваров.Форма.ФормаДокумента", ПараметрыФормы, ЭтотОбъект);
	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СформироватьПараметрыОснования(МассивЗаказов)
	Перем ПараметрыФормы;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДокументОснование", МассивЗаказов);
	ПараметрыФормы.Вставить("Магазин", МассивЗаказов[0].Магазин);
	ПараметрыФормы.Вставить("Организация", МассивЗаказов[0].Организация);
	ПараметрыФормы.Вставить("Контрагент", МассивЗаказов[0].Контрагент);
	ПараметрыФормы.Вставить("Склад", МассивЗаказов[0].Склад);
	ПараметрыФормы.Вставить("УчитыватьНДС", МассивЗаказов[0].УчитыватьНДС);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС", МассивЗаказов[0].ЦенаВключаетНДС);
	ПараметрыФормы.Вставить("Статус", МассивЗаказов[0].Статус);
	Возврат ПараметрыФормы
КонецФункции


&НаСервере
Функция ЕстьОшибкиСозданияРеализацииПоЗаказам(МассивЗаказов) Экспорт

	Отказ = Ложь;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПокупателя.ds_ЗаказСWildberries КАК ds_ЗаказСWildberries,
	|	ЗаказПокупателя.Проведен КАК Проведен,
	|	ЗаказПокупателя.Склад КАК Склад,
	|	ЗаказПокупателя.Организация КАК Организация,
	|	ЗаказПокупателя.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателя.ds_ЗаказСWildberries
	|			ТОГДА ЗаказПокупателя.АдресДоставки
	|		ИНАЧЕ """"""""
	|	КОНЕЦ КАК АдресДоставкиВБ,
	|	ЗаказПокупателя.Контрагент КАК Контрагент,
	|	ЗаказПокупателя.УчитыватьНДС,
	|	ЗаказПокупателя.ЦенаВключаетНДС,
	|	ЗаказПокупателя.Статус,
	|	ЗаказПокупателя.Магазин
	|ПОМЕСТИТЬ ВТЗаказы
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Ссылка В (&МассивЗаказов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТЗаказы.ds_ЗаказСWildberries) > 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьЗаказСВБИнеВБ,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТЗаказы.АдресДоставкиВБ) > 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличиеВАдресахДоставкиВБ,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТЗаказы.Склад) > 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличиеВСкладах,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТЗаказы.Организация) > 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличиеВОрганизациях,
	|	МИНИМУМ(ВТЗаказы.Проведен) КАК ВсеЗаказыПроведены,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТЗаказы.Контрагент) > 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличиеВКонтрагентах,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТЗаказы.УчитыватьНДС) > 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличиеВУчитыватьНДС,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТЗаказы.ЦенаВключаетНДС) > 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличиеВЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТЗаказы.Статус) > 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличиеВСтатусах,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТЗаказы.Магазин) > 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличиеВМагазинах
	|ИЗ
	|	ВТЗаказы КАК ВТЗаказы";

	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаРеквизитыШапки = РезультатЗапроса.Выбрать();

	ТекстСообщения = НСтр("ru='У выделенных распоряжений отличается поле ""%ПредставлениеПоля%""'");

	ВыборкаРеквизитыШапки.Следующий();

	Если ВыборкаРеквизитыШапки.ЕстьОтличиеВКонтрагентах Тогда

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Контрагент'")), , , , Отказ);

	КонецЕсли;

	Если ВыборкаРеквизитыШапки.ЕстьОтличиеВОрганизациях Тогда

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Организация'")), , , , Отказ);

	КонецЕсли;

	Если ВыборкаРеквизитыШапки.ЕстьОтличиеВСкладах Тогда

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Склад'")), , , , Отказ);

	КонецЕсли;

	Если НЕ ВыборкаРеквизитыШапки.ВсеЗаказыПроведены Тогда

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Не все заказы проведены", , , , Отказ);

	КонецЕсли;

	Если ВыборкаРеквизитыШапки.ЕстьЗаказСВБИнеВБ Тогда

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Выбраны заказы Wildberries и с другими", , , , Отказ);

	КонецЕсли;

	Если ВыборкаРеквизитыШапки.ЕстьОтличиеВАдресахДоставкиВБ Тогда

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"У заказов с Wildberries отличается адрес доставки", , , , Отказ);

	КонецЕсли;
	
		Если ВыборкаРеквизитыШапки.ЕстьОтличиеВУчитыватьНДС Тогда

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Учитывать НДС'")), , , , Отказ);

		КонецЕсли;
		
			Если ВыборкаРеквизитыШапки.ЕстьОтличиеВЦенаВключаетНДС Тогда

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Цена включает НДС'")), , , , Отказ);

			КонецЕсли;
			
				Если ВыборкаРеквизитыШапки.ЕстьОтличиеВСтатусах Тогда

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Статус'")), , , , Отказ);

				КонецЕсли;
				
					Если ВыборкаРеквизитыШапки.ЕстьОтличиеВМагазинах Тогда

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Магазин'")), , , , Отказ);

	КонецЕсли;
Если Отказ Тогда
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Ввод одной реализации на основании выделенных заказов невозможен'"));
КонецЕсли;
	Возврат Отказ;

КонецФункции

&НаСервере
Процедура ds_ПереопределениеГлобальнойКомандыРеализации()
	Элементы.ФормаДокументРеализацияТоваровСоздатьНаОсновании.Видимость = Ложь;
КонецПроцедуры

#КонецОбласти
