
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	АктуализироватьЭлементыФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_УзелПланаОбмена" Тогда
		УстановитьВидимостьНаСервере();
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_НаборКонстант" Тогда
		
		ОбновитьРеквизитыПоКонстантам();
		НастроитьЭлементыSMSПодтверждения();
		
	ИначеЕсли ИмяСобытия = "ИзмененПризнакИспользованияПоставляемыйОграниченийПродаж" Тогда
		
		ОбновитьПризнакИспользованияОграниченийПродаж(Параметр);
		ОбновитьИнтерфейс();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизитыПоКонстантам()
	
	ИспользоватьШаблоныСообщений = Константы.ИспользоватьШаблоныСообщений.Получить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ВладелецФормы = Неопределено Тогда
		Если ВладелецФормы.ИмяФормы = "Обработка.ПомощникНастройкиКассовогоМеста.Форма.Форма" Тогда
			
			Элементы.ГруппаКнопкиНижнейПанели.Видимость = Истина;
			Элементы.ИндикаторИсполнения.МаксимальноеЗначение = ВладелецФормы.Элементы.ИндикаторИсполнения.МаксимальноеЗначение;
			ИндикаторИсполнения = ВладелецФормы.ИндикаторИсполнения;
			
		КонецЕсли;
	КонецЕсли;
	
	НастроитьЭлементыSMSПодтверждения();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПерейтиКПросмотруНастройки(Команда)
	
	ТекущиеДанные = Элементы.СписокНастроек.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.Свойство("Ссылка") Тогда
	
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.ГруппаНастройки);
		УстановитьЗначениеНастройки(ТекущиеДанные.Ссылка);
		
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите настройку для просмотра'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКСпискуНастроек(Команда)
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.ГруппаВыбораНастроек);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНастройкуДляТекущегоРабочегоМеста(Команда)
	
	ТекущиеДанныеСпискаНастроек = Элементы.СписокНастроек.ТекущиеДанные;
	ЗначениеНастройки = Неопределено;
	
	Если НЕ ТекущиеДанныеСпискаНастроек = Неопределено
		И ТекущиеДанныеСпискаНастроек.Свойство("Ссылка", ЗначениеНастройки)
		И ЗначениеЗаполнено(ЗначениеНастройки) Тогда
		
			ОбщегоНазначенияРМКВызовСервера.УстановитьНастройкуРМКДляТекущегоРабочегоМеста(ЗначениеНастройки);
			Элементы.СписокНастроек.Обновить();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиРМК(Команда)
	
	РезультатВыполнения = СохранитьНастройкиРМКНаСервере();
	
	Если НЕ РезультатВыполнения.ВыполненоУспешно Тогда
		ПоказатьПредупреждение(, РезультатВыполнения.ТекстПредупрежденийОшибок);
	Иначе
		
		ПараметрыОповещения = Новый Структура();
		ПараметрыОповещения.Вставить("РабочееМестоКассираУспешноНастроено", Истина);
		Оповестить("РабочееМестоКассираУспешноНастроено", ПараметрыОповещения, ЭтаФорма);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиСинхронизацииДанных(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
		
		МодульОбменДаннымиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбменДаннымиКлиент");
		МодульОбменДаннымиКлиент.ОткрытьНастройкиСинхронизацииДанных();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПомощникНастройкиОбмена(Команда)
	ОбщегоНазначенияРМККлиентПереопределяемый.ОткрытьПомощникНастройкиОбмена();
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключение(Команда)
	
	ТекстСообщенияПользователю = НСтр("ru = ''");
	
	Если ИспользоватьСервисЛояльности Тогда
		
		ИсходныеДанные = НастройкаРМК;
		ПараметрыПроверкиПодключения = ИсходныеДанныеДляПроверкиДоступностиСервисаЛояльности(ИсходныеДанные);
		
		АдресСервисаЛояльности = ПараметрыПроверкиПодключения.АдресСервисаЛояльности;
		
		Если НЕ ЗначениеЗаполнено(АдресСервисаЛояльности) Тогда
			
			СтрокаСообщения = НСтр("ru = 'Не заполнен адрес сервиса лояльности.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения,, "НастройкаРМК.АдресСервисаЛояльности");
			Возврат;
			
		КонецЕсли;
		
		ПараметрыВыполненияЗапроса				= ОбщегоНазначенияРМККлиентСервер.ПараметрыЗапросаКСервису();
		ПараметрыВыполненияЗапроса.АдресСервера	= АдресСервисаЛояльности;
		ПараметрыВыполненияЗапроса.Пароль		= ПарольСервисаЛояльности(НастройкаРМК.Ссылка);
		ПараметрыВыполненияЗапроса.Ресурс		= ПараметрыПроверкиПодключения.РесурсДляПроверкиДоступности;
		ПараметрыВыполненияЗапроса.Логин		= ПараметрыПроверкиПодключения.ПользовательСервисаЛояльности;
		ПараметрыВыполненияЗапроса.ТипЗапроса	= "GET";
		
		РезультатПроверки =
			ОбщегоНазначенияРМККлиентСервер.ВыполнитьЗапросКСервисуЛояльности(ПараметрыВыполненияЗапроса);
		
		ТекстСообщенияПользователю = ?(РезультатПроверки.ЕстьОшибки,
			РезультатПроверки.ТекстОшибки,
			НСтр("ru = 'Соединение с сервером успешно установлено.'"));
			
	Иначе
		
		ТекстСообщенияПользователю =
			НСтр("ru = 'Пожалуйста, включите использование сервиса лояльности перед проверкой подключения к сервису.'");
			
	КонецЕсли;
		
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщенияПользователю);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПарольСервисаЛояльности(ТекущаяНастройкаРМК)
	Возврат ОбщегоНазначенияРМК.ПарольСервисаЛояльности(ТекущаяНастройкаРМК);
КонецФункции

&НаКлиенте
Процедура ВыгрузитьНастройкиВФайл(Команда)
	
	Если НастройкаРМК.Ссылка.Пустая() Тогда
		
		ПоказатьПредупреждение(, НСтр("ru='Сначала сохраните настройку.'"));
		Возврат;
		
	КонецЕсли;
	
	ВыбратьФайлНаКлиенте(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкиИзФайла(Команда)
	ВыбратьФайлНаКлиенте(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗапретыПродаж(Команда)
	
	КоличествоЗаписей = КоличествоЗаписейЗапретовПродаж();
	ИмяФормыСуффикс = ?(КоличествоЗаписей > 0, "ФормаСписка", "ФормаЗаписи");
	ПолноеИмяФормы = СтрШаблон("РегистрСведений.УсловияЗапретаПродажРМК.%1", ИмяФормыСуффикс);
	
	ОткрытьФорму(ПолноеИмяФормы,, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПодключенияКЕГАИС(Команда)
	ОткрытьФорму("РегистрСведений.НастройкиОбменаЕГАИС.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ВестиСведенияДляДекларацийПоАлкогольнойПродукцииПриИзменении(Элемент)
	АктуализироватьДоступностьКонтроляИспользованияКалендарныхЗапретовПродаж();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОплатуСертификатамиНСПКПриИзменении(Элемент)
	
	ИспользоватьОплатуСертификатамиНСПКПриИзмененииСервер();
	
	Если ИспользоватьОплатуСертификатамиНСПК Тогда
		
		ОповещениеМетода = Новый ОписаниеОповещения("НСПКВерсияВКЗавершение", ЭтотОбъект);
		ЭлектронныеСертификатыНСПККлиент.НачатьПолучениеВерсииВК(ОповещениеМетода);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресСервисаНСПКПриИзменении(Элемент)
	АдресСервисаНСПКПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЗапретПродажПриИзменении(Элемент)
	
	ИспользоватьЗапретПродажПриИзмененииСервер();
	ОбновитьИнтерфейс();
	
КонецПроцедуры

&НаКлиенте
Процедура АнализШтрихкодов(Команда)
	ОткрытьФорму("ОбщаяФорма.АнализШтрихкодов");
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	
	Если НЕ ЗначениеЗаполнено(НастройкаРМК.Ссылка) ИЛИ Модифицированность Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Перед переходом на следующую страницу, сохраните настройку'"));
		Возврат;
		
	КонецЕсли;
	
	ВладелецФормы.ВыполнитьДействияПереходаНаСтраницу(1);
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	Этаформа.ВладелецФормы.ВыполнитьДействияПереходаНаСтраницу(-1);
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеПродаж(Команда)
	
	Если НЕ ЗначениеЗаполнено(НастройкаРМК.Ссылка) Тогда
		
		ПоказатьПредупреждение(, НСтр("ru='Сначала сохраните настройку.'"));
		Возврат;
		
	КонецЕсли;

	ОбщегоНазначенияРМККлиентПереопределяемый.ОткрытьНастройкиРаспределенияПродаж();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЗаменуТоваровПриИзменении(Элемент)
	
	ИспользоватьЗаменуТоваровПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура БИПНастройкаИнтеграцииСПлатежнымиСистемами(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ИнтеграцияСПлатежнымиСистемами") Тогда
		МодульИнтеграцияСПлатежнымиСистемамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтеграцияСПлатежнымиСистемамиКлиент");
		МодульИнтеграцияСПлатежнымиСистемамиКлиент.ИнтернетПоддержкаИСервисы_БИПНастройкаИнтеграцииСПлатежнымиСистемами(
			ЭтотОбъект,
			Команда);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПанельАдминистрированияБСПОрганайзер(Команда)
	ОткрытьФорму("Обработка.ПанельАдминистрированияБСП.Форма.Органайзер");
КонецПроцедуры

&НаКлиенте
Процедура НастройкиСервераЛояльности(Команда)
	ТекущийЭлемент = Элементы.НастройкаРМКАдресСервисаЛояльности;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПрефиксШтрихкодаВесовогоТовараПриИзменении(Элемент)
	ПрефиксШтрихкодаВесовогоТовараПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПрефиксШтрихкодаШтучногоТовараПриИзменении(Элемент)
	ПрефиксШтрихкодаШтучногоТовараПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ШаблонШтрихкодаТовараПриИзменении(Элемент)
	ШаблонШтрихкодаТовараПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКГорячиеКлавишиКлавишаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.НастройкаРМКГорячиеКлавиши.ТекущиеДанные;
	
	Если ПустаяСтрока(ТекущаяСтрока.Клавиша) Тогда
		ТекущаяСтрока.Клавиша = "Нет";
	КонецЕсли;
	
	Если ТекущаяСтрока.Клавиша = "Нет" Тогда
		
		ТекущаяСтрока.АкселераторAlt	= Ложь;
		ТекущаяСтрока.АкселераторCtrl	= Ложь;
		ТекущаяСтрока.АкселераторShift	= Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКомментарийНажатие(Элемент)
	
	ТекстСообщения = Элементы.ДекорацияКомментарийНоваяНастройкаОбмена.Подсказка;
	ПоказатьПредупреждение(, ТекстСообщения);

КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКБыстрыеТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ Элементы.НастройкаРМКБыстрыеТовары.ТекущиеДанные = Неопределено Тогда
		
		Номенклатура = Элементы.НастройкаРМКБыстрыеТовары.ТекущиеДанные.Номенклатура;
		
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			
			ПараметрыВыбора = Новый Структура;
			ОбщегоНазначенияРМККлиентПереопределяемый.ЗаполнитьПараметрыВыбораХарактеристик(ПараметрыВыбора,
				Номенклатура,
				СтандартнаяОбработка);
				
			Если Не СтандартнаяОбработка Тогда
				ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.ФормаВыбора",
					ПараметрыВыбора,
					Элемент);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Элементы.НастройкаРМКБыстрыеТовары.ТекущиеДанные.Характеристика = ВыбранноеЗначение;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКБыстрыеТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НастройкаРМКБыстрыеТовары.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		Номенклатура = ТекущиеДанные.Номенклатура;
		ХарактеристикиИспользуются = ПроверитьПрименениеХарактеристикДляНоменклатуры(Номенклатура);
		ТекущиеДанные.ХарактеристикиИспользуются = ХарактеристикиИспользуются;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрефиксИнформационнойБазыПриИзменении(Элемент)
	
	ФоновоеЗадание = ЗапуститьИзменениеПрефиксаИБВФоновомЗадании();
	
	Если ФоновоеЗадание <> Неопределено
		И ФоновоеЗадание.Статус = "Выполняется" Тогда
		
		Элементы.ПрефиксИнформационнойБазы.Доступность = Ложь;
		Элементы.ДекорацияОжиданиеИзмененияПрефикса.Видимость = Истина;
		
	КонецЕсли;
	
	НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
	
	Обработчик = Новый ОписаниеОповещения("ПослеИзмененияПрефикса", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, Обработчик, НастройкиОжидания);
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьИзменениеПрефиксаИБВФоновомЗадании()
	
	ПараметрыПроцедуры = Новый Структура("НовыйПрефиксИБ, ПродолжитьНумерацию",
		ПрефиксИнформационнойБазы, Истина);
		
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Изменение префикса'");
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("ПрефиксацияОбъектовСлужебный.ИзменитьПрефиксИБ",
		ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ПослеИзмененияПрефикса(ФоновоеЗадание, ДополнительныеПараметры) Экспорт

	Если НЕ Элементы.ПрефиксИнформационнойБазы.Доступность Тогда
		Элементы.ПрефиксИнформационнойБазы.Доступность = Истина;
	КонецЕсли;
	
	Если Элементы.ДекорацияОжиданиеИзмененияПрефикса.Видимость Тогда
		Элементы.ДекорацияОжиданиеИзмененияПрефикса.Видимость = Ложь;
	КонецЕсли;
	
	Если ФоновоеЗадание <> Неопределено
		И ФоновоеЗадание.Статус = "Выполнено" Тогда
		
		ПоказатьОповещениеПользователя(НСтр("ru = 'Префикс изменен.'"));
		
	Иначе
		
		Элементы.ПрефиксИнформационнойБазы.ОбновитьТекстРедактирования();
		
		Если ФоновоеЗадание <> Неопределено Тогда
			
			ТекстОшибки = НСтр("ru='Не удалось изменить префикс.
				|См. подробности в журнале регистрации.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСервисЛояльностиПриИзменении(Элемент)
	ИспользоватьСервисЛояльностиПриИзмененииНаСервере();
	НастроитьЭлементыSMSПодтверждения();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОсобенностиПродаж()

	ОбщегоНазначенияРМКПереопределяемый.УстановитьПризнакФормеПоДаннымФункциональнойОпции(ЭтотОбъект,
		"ИспользоватьСервисЛояльности");
	ОбщегоНазначенияРМКПереопределяемый.УстановитьПризнакФормеПоДаннымФункциональнойОпции(ЭтотОбъект,
		"ИспользоватьЗапретПродаж");
	ОбщегоНазначенияРМКПереопределяемый.УстановитьПризнакФормеПоДаннымФункциональнойОпции(ЭтотОбъект,
		"ВестиСведенияДляДекларацийПоАлкогольнойПродукции");

	АктуализироватьДоступностьКонтроляИспользованияКалендарныхЗапретовПродаж();
	
	ИспользоватьОплатуСертификатамиНСПК = ОбщегоНазначенияРМКПереопределяемый.ИспользоватьОплатуСертификатамиНСПК();
	ИспользоватьЗаменуТоваров = ОбщегоНазначенияРМКПереопределяемый.ИспользоватьЗаменуТоваров();
	
	Элементы.ПараметрыПодключенияЕГАИС.Доступность = ВестиСведенияДляДекларацийПоАлкогольнойПродукции;
	Элементы.ГруппаПараметрыПодключенияНСПК.Доступность = ИспользоватьОплатуСертификатамиНСПК;
		
	Если ИспользоватьОплатуСертификатамиНСПК Тогда
		ЗаполнитьПараметрыПодключенияНСПК();
	КонецЕсли;
	
	ИспользоватьПоставляемыеОграниченияПродаж = ОбщегоНазначенияРМК.ИспользоватьПоставляемыеОграниченияПродаж();
	Элементы.ИспользоватьЗапретПродаж.Доступность =
		НЕ (ИспользоватьПоставляемыеОграниченияПродаж ИЛИ ВестиСведенияДляДекларацийПоАлкогольнойПродукции);
	Элементы.ИспользоватьЗапретПродаж.РасширеннаяПодсказка.Заголовок =
		ОбщегоНазначенияРМККлиентСервер.ТекстПодсказкиНастройкиЗапретовПродаж();
	ИспользоватьЗапретПродаж = ИспользоватьЗапретПродаж ИЛИ ИспользоватьПоставляемыеОграниченияПродаж;

	Элементы.ЗапретыПродаж.Доступность = ИспользоватьЗапретПродаж;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначениеКонстанты(КонстантаИмя, ТекущееЗначениеКонстанты)
	
	Если КонстантаИмя <> "" Тогда
		
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = ТекущееЗначениеКонстанты;
		
		Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
			КонстантаМенеджер.Установить(КонстантаЗначение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура АктуализироватьДоступностьКонтроляИспользованияКалендарныхЗапретовПродаж()
	
	СохранитьЗначениеКонстанты(ОбщегоНазначенияРМКПереопределяемый.ИмяКонстантыВестиСведенияДляДекларацийПоАлкоголю(),
		ВестиСведенияДляДекларацийПоАлкогольнойПродукции);
	
	Если ВестиСведенияДляДекларацийПоАлкогольнойПродукции И НЕ ИспользоватьЗапретПродаж Тогда
		
		ИспользоватьЗапретПродаж = ВестиСведенияДляДекларацийПоАлкогольнойПродукции;
		ИспользоватьЗапретПродажПриИзмененииСервер();
		
	КонецЕсли;

	Если ИспользоватьЗапретПродаж Тогда
		Элементы.ИспользоватьЗапретПродаж.Доступность = НЕ ВестиСведенияДляДекларацийПоАлкогольнойПродукции;
	КонецЕсли;
	
	Элементы.ПараметрыПодключенияЕГАИС.Доступность = ВестиСведенияДляДекларацийПоАлкогольнойПродукции;
	
КонецПроцедуры

&НаСервере
Процедура ИспользоватьОплатуСертификатамиНСПКПриИзмененииСервер()
	
	СохранитьЗначениеКонстанты(ОбщегоНазначенияРМКПереопределяемый.ИмяКонстантыИспользоватьОплатуСертификатамиНСПК(),
		ИспользоватьОплатуСертификатамиНСПК);
		
	Элементы.ГруппаПараметрыПодключенияНСПК.Доступность = ИспользоватьОплатуСертификатамиНСПК;
	
	Если ИспользоватьОплатуСертификатамиНСПК Тогда
		ЭлектронныеСертификатыНСПКРМКПереопределяемый.СоздатьВидыОплатНСПК();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура АдресСервисаНСПКПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(АдресСервисаНСПК) Тогда
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище("ЭС_НСПК_МИР", АдресСервисаНСПК, "АдресСервисаНСПК");
	Иначе
		ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища("ЭС_НСПК_МИР", "АдресСервисаНСПК");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ИспользоватьЗапретПродажПриИзмененииСервер()
	
	СохранитьЗначениеКонстанты(ОбщегоНазначенияРМКПереопределяемый.ИмяКонстантыИспользоватьЗапретПродаж(),
		ИспользоватьЗапретПродаж);
	Элементы.ЗапретыПродаж.Доступность = ИспользоватьЗапретПродаж;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКИспользоватьНовыйПодборТоваровПриИзменении(Элемент)
	НастроитьЭлементыПодбораТоваров();
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыПодбораТоваров()
	
	ИспользоватьНовыйПодборТоваров = НастройкаРМК.ИспользоватьНовыйПодборТоваров;
	Элементы.ГруппаПравоКодАртикул.Доступность = ИспользоватьНовыйПодборТоваров;
	
	Если НЕ ИспользоватьНовыйПодборТоваров Тогда
		НастройкаРМК.ПоказыватьАртикулНоменклатуры = ИспользоватьНовыйПодборТоваров;
		НастройкаРМК.ПоказыватьКодНоменклатуры = ИспользоватьНовыйПодборТоваров;
	КонецЕсли;
	
	ОбщегоНазначенияРМКПереопределяемый.НастроитьЭлементыПодбораТоваров(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПарольСервисаЛояльностиПриИзменении(Элемент)
	ПарольСервисаЛояльностиИзменен = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКПродажиСНесколькихКассККМПриИзменении(Элемент)
	
	Элементы.НастройкаРМКОсновнаяКассаККМ.Доступность = НастройкаРМК.ПродажиСНесколькихКассККМ;
	Если НЕ НастройкаРМК.ПродажиСНесколькихКассККМ Тогда
		НастройкаРМК.ОсновнаяКассаККМ = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКОтправлятьSMSКодПриЗаведенииКартыПриИзменении(Элемент)
	
	Элементы.НастройкаРМКШаблонSMSПриЗаведенииКарты.Доступность = НастройкаРМК.ОтправлятьSMSКодПриЗаведенииКарты;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКБыстрыеТоварыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбщегоНазначенияРМККлиентПереопределяемый.ОбработатьВыбранноеЗначениеБыстрыхТоваров(ЭтотОбъект,
		ВыбранноеЗначение,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПодсказкуАдресаСервераЛояьности()
	
	Элементы.НастройкаРМКАдресСервисаЛояльности.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	
	Строка1 = Новый ФорматированнаяСтрока(НСтр("ru = 'При использовании защищенного соединения или
				|нестандартного порта подключения необходимо указать адрес в таком виде: '"), Новый Шрифт());
	
	Строка2 = Новый ФорматированнаяСтрока(НСтр("ru = 'https://server:111/base/hs/loyaltyservice'"), Новый Шрифт(,,Истина));
	
	Строка3 = Новый ФорматированнаяСтрока(НСтр("ru = 'Стандартные порты 80 и 443 указывать не требуется.'"), Новый Шрифт(,,,));
	
	ЗаголовокПодсказки = Новый ФорматированнаяСтрока(Строка1, Строка2, Символы.ПС, Строка3);
	
	Элементы.НастройкаРМКАдресСервисаЛояльности.РасширеннаяПодсказка.Заголовок = ЗаголовокПодсказки;
	
КонецПроцедуры

&НаСервере
Процедура ИспользоватьЗаменуТоваровПриИзмененииСервер()
	
	СохранитьЗначениеКонстанты(ОбщегоНазначенияРМКПереопределяемый.ИмяКонстантыИспользоватьЗаменуТоваров(),
		ИспользоватьЗаменуТоваров);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвольнаяНастройкаПриИзменении(Элемент) Экспорт
	ОбщегоНазначенияРМККлиентПереопределяемый.ПроизвольнаяНастройкаПриИзменении(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура БИПДлительностьОперацииПлатежнойСистемыПриИзменении(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ИнтеграцияСПлатежнымиСистемами") Тогда
		МодульИнтеграцияСПлатежнымиСистемамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтеграцияСПлатежнымиСистемамиКлиент");
		МодульИнтеграцияСПлатежнымиСистемамиКлиент.БИПДлительностьОперацииПлатежнойСистемыПриИзменении(
			ЭтотОбъект,
			Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ИспользоватьСерверЛояльности" Тогда
		СтандартнаяОбработка = Ложь;
		ТекущийЭлемент = Элементы.ИспользоватьСервисЛояльности;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправлятьSMSПриОплатеБонусамиПриИзменении(Элемент)
	
	Если ОтправлятьSMSПриОплатеБонусами Тогда
		ОтправлятьSMSПриПоискеКартыПоНомеруТелефона = Ложь;
	КонецЕсли;
	
	НастроитьЭлементыSMSПодтверждения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправлятьSMSПриПоискеКартыПоНомеруТелефонаПриИзменении(Элемент)
	
	Если ОтправлятьSMSПриПоискеКартыПоНомеруТелефона Тогда
		ОтправлятьSMSПриОплатеБонусами = Ложь;
	КонецЕсли;
	
	НастроитьЭлементыSMSПодтверждения();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьПризнакИспользованияОграниченийПродаж(ПараметрыОбновления)

	Если ТипЗнч(ПараметрыОбновления) = Тип("Структура")
		И ПараметрыОбновления.Свойство("ИспользоватьОграниченияПродаж") Тогда
	
		ИспользоватьПоставляемыеОграниченияПродаж = ПараметрыОбновления.ИспользоватьОграниченияПродаж;
		ОбщегоНазначенияРМКПереопределяемый.ОбновитьПризнакИспользованияОграниченийПродаж(ИспользоватьПоставляемыеОграниченияПродаж,
			ПараметрыОбновления);
			
			
		ИспользоватьЗапретПродаж = ?(ИспользоватьПоставляемыеОграниченияПродаж,
			ИспользоватьПоставляемыеОграниченияПродаж,
			ИспользоватьСервисЛояльности);
			
		ТекстПоУмолчанию = НСтр("ru = 'Ограничение продажи товаров определенного вида по настроенному расписанию.'");
		ПереопределенныйТекстПодсказки = ОбщегоНазначенияРМККлиентСервер.ТекстПодсказкиНастройкиЗапретовПродаж();
		ТекстПодсказкиПризнака =
			?(ИспользоватьПоставляемыеОграниченияПродаж И НЕ ПустаяСтрока(ПереопределенныйТекстПодсказки),
				ПереопределенныйТекстПодсказки,
				ТекстПоУмолчанию); 
		Элементы.ИспользоватьЗапретПродаж.РасширеннаяПодсказка.Заголовок = ТекстПодсказкиПризнака;
		
		ИспользоватьЗапретПродажПриИзмененииСервер();
		Элементы.ИспользоватьЗапретПродаж.Доступность = НЕ ИспользоватьПоставляемыеОграниченияПродаж;

	КонецЕсли;
	

КонецПроцедуры

&НаСервере
Функция ИменаПолейФлажков()

	Результат = Новый Массив();
	Результат.Добавить("НастройкаРМКСворачиватьСтрокиПриПечатиЧека");
	Результат.Добавить("НастройкаРМКПродажиСНесколькихКассККМ");
	Результат.Добавить("НастройкаРМКИспользоватьРежимСкупки");
//	Результат.Добавить("НастройкаРМКИспользоватьНовыйПодборТоваров");
	Результат.Добавить("ИспользоватьРасширеннуюФормуПодбора");
	
	Результат.Добавить("НастройкаРМКЗакрыватьПодборПриВыбореТовара");
	Результат.Добавить("НастройкаРМКПоказыватьАртикулНоменклатуры");
	Результат.Добавить("НастройкаРМКПоказыватьКодНоменклатуры");
	Результат.Добавить("НастройкаРМКРазрешитьВыборПродавца");
	Результат.Добавить("ИспользоватьСервисЛояльности");
	Результат.Добавить("НастройкаРМКОтправлятьSMSКодПриЗаведенииКарты");
	Результат.Добавить("ВестиСведенияДляДекларацийПоАлкогольнойПродукции");
	Результат.Добавить("ИспользоватьЗапретПродаж");
	Результат.Добавить("НастройкаРМКОжидатьРезультатПроверкиМарок");
	Результат.Добавить("КонтролироватьЕМРЦ");
	Результат.Добавить("ИспользоватьОплатуСертификатамиНСПК");
	Результат.Добавить("ИспользоватьЗаменуТоваров");
	Результат.Добавить("НастройкаРМКЗапрашиватьПодтверждениеВозраста18Плюс"); 
	Результат.Добавить("ВопросПоРасчетуСкидок");
	Возврат Результат;

КонецФункции

&НаСервере
Процедура УстановитьВидОтображенияБинарныхЭлементовИнтерфейса(ИменаЭлементов)
	
	Если ТипЗнч(ИменаЭлементов) = Тип("Массив") Тогда
		
		ВидОтображения = ОбщегоНазначенияРМККлиентСервер.ВидОтображенияБинарногоПоля();
		ПоложениеЗаголовкаЭлемента = ОбщегоНазначенияРМККлиентСервер.ПоложениеЗаголовкаЭлемента();
		
		Для Каждого ИмяЭлемента Из ИменаЭлементов Цикл
		
			Попытка
			
				ЭлементФормы = Элементы[ИмяЭлемента];
				
				Если ТипЗнч(ЭлементФормы) = Тип("ПолеФормы")
					И ЭлементФормы.Вид = ВидПоляФормы.ПолеФлажка Тогда
					
						ЭлементФормы.ВидФлажка = ВидОтображения;
						ЭлементФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлемента;
						
				КонецЕсли;
			
			Исключение
				
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Ошибка получения реквизита формы по имени'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Продолжить;
				
			КонецПопытки;
		
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	ОбщегоНазначенияРМКПереопределяемый.НастроитьУсловноеОформлениеВНастройкахРМК(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеНастройки(ЗначениеНастройки)
	
	НастройкаОбъект = ЗначениеНастройки.ПолучитьОбъект();
	ЗначениеВРеквизитФормы(НастройкаОбъект, "НастройкаРМК");
	ЗаполнитьДанныеПоНастройкеРМК(НастройкаОбъект.Ссылка);
	
КонецПроцедуры

&НаСервере
Функция СохранитьНастройкиРМКНаСервере()
	
	Если ОтправлятьSMSПриПоискеКартыПоНомеруТелефона Тогда
		НастройкаРМК.ОтправлятьSMSКодПриПродаже = Перечисления.ВариантыОтправкиSMSПриПродаже.ПриВыборе;
	ИначеЕсли ОтправлятьSMSПриОплатеБонусами Тогда
		НастройкаРМК.ОтправлятьSMSКодПриПродаже = Перечисления.ВариантыОтправкиSMSПриПродаже.ПриОплатеБаллами;
	Иначе
		НастройкаРМК.ОтправлятьSMSКодПриПродаже = Перечисления.ВариантыОтправкиSMSПриПродаже.ПустаяСсылка();
	КонецЕсли;
	
	РезультатВыполнения = Новый Структура("ВыполненоУспешно,ТекстПредупрежденийОшибок", Истина, "");
	
	ОбъектНастройки = РеквизитФормыВЗначение("НастройкаРМК");
	
	Если НЕ ЗначениеЗаполнено(НастройкаРМК.Ссылка) Тогда
		
		Если КоличествоДоступныхНастроек > 0 Тогда
			
			ТекстПредупреждения =
				НСтр("ru = 'Невозможно создать еще одну настройку для текущего рабочего места
					|Пожалуйста, выберите подходящую настройку из существующих'");
			РезультатВыполнения.Вставить("ВыполненоУспешно", Ложь);
			РезультатВыполнения.Вставить("ТекстПредупрежденийОшибок", ТекстПредупреждения);
			
			Возврат РезультатВыполнения;
			
		Иначе
			
			Если НЕ ЗначениеЗаполнено(НастройкаРМК.Наименование) Тогда
				
				ТекстПредупреждения =
					НСтр("ru = 'Пожалуйста, укажите наименование для настройки.'");
				РезультатВыполнения.Вставить("ВыполненоУспешно", Ложь);
				РезультатВыполнения.Вставить("ТекстПредупрежденийОшибок", ТекстПредупреждения);
				
				Возврат РезультатВыполнения;
				
			КонецЕсли;
			
			ТекущееРабочееМесто = ПараметрыСеанса.РабочееМестоКлиента;
			
			Если НЕ ЗначениеЗаполнено(ТекущееРабочееМесто) Тогда
				ТекущееРабочееМесто = МенеджерОборудованияВызовСервера.РабочееМестоКлиента();
			КонецЕсли;
			
			ОбъектНастройки.РабочееМесто = ТекущееРабочееМесто;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НастройкаРМК.ТочностьОкругления) Тогда 
		
		ТекстПредупреждения =
			НСтр("ru = 'Пожалуйста, укажите точность округления при расчетах с клиентом.'");
		РезультатВыполнения.Вставить("ВыполненоУспешно", Ложь);
		РезультатВыполнения.Вставить("ТекстПредупрежденийОшибок", ТекстПредупреждения);
		
		Возврат РезультатВыполнения;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НастройкаРМК.ВидОтображения) Тогда 
		
		ТекстПредупреждения =
			НСтр("ru = 'Пожалуйста, выберите вариант масштаба интерфейса.'");
		РезультатВыполнения.Вставить("ВыполненоУспешно", Ложь);
		РезультатВыполнения.Вставить("ТекстПредупрежденийОшибок", ТекстПредупреждения);
		
		Возврат РезультатВыполнения;
		
	КонецЕсли;
	
	Если НастройкаРМК.БыстрыеТовары.Количество() > 10 Тогда
		
		ТекстПредупреждения =
			НСтр("ru = 'Можно добавить не более 10 быстрых товаров.'");
		РезультатВыполнения.Вставить("ВыполненоУспешно", Ложь);
		РезультатВыполнения.Вставить("ТекстПредупрежденийОшибок", ТекстПредупреждения);
		
		Возврат РезультатВыполнения;
		
	КонецЕсли;
	
	Если НастройкаРМК.ПродажиСНесколькихКассККМ И НЕ ЗначениеЗаполнено(НастройкаРМК.ОсновнаяКассаККМ) Тогда
		
		ТекстПредупреждения =
			НСтр("ru = 'Пожалуйста, выберите основную кассу ККМ.'");
		РезультатВыполнения.Вставить("ВыполненоУспешно", Ложь);
		РезультатВыполнения.Вставить("ТекстПредупрежденийОшибок", ТекстПредупреждения);
		
		Возврат РезультатВыполнения;
		
	КонецЕсли;
	
	Если ИспользоватьСервисЛояльности
			И (НЕ ЗначениеЗаполнено(НастройкаРМК.АдресСервисаЛояльности)
				ИЛИ НЕ ЗначениеЗаполнено(НастройкаРМК.ПользовательСервисаЛояльности)) Тогда
		
		ТекстПредупреждения =
			НСтр("ru = 'Пожалуйста, укажите адрес и пользователя сервера лояльности.'");
		РезультатВыполнения.Вставить("ВыполненоУспешно", Ложь);
		РезультатВыполнения.Вставить("ТекстПредупрежденийОшибок", ТекстПредупреждения);
		
		Возврат РезультатВыполнения;
		
	КонецЕсли;
	
	НачатьТранзакцию();
	
	ОбщегоНазначенияРМКПереопределяемый.ПриСохраненииНастроекРМК(ЭтотОбъект, РезультатВыполнения);
	Если РезультатВыполнения.ВыполненоУспешно = Ложь Тогда
		
		ОтменитьТранзакцию();
		
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	Попытка
		
		ОбъектНастройки.Записать();
		
		ЗафиксироватьТранзакцию();
		
		Модифицированность = Ложь;
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = НСтр("ru = 'Ошибка при записи настроек РМК.'");
		ЗаписьЖурналаРегистрации(
			ТекстОшибки,
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		РезультатВыполнения.Вставить("ВыполненоУспешно", Ложь);
		РезультатВыполнения.Вставить("ТекстПредупрежденийОшибок", ТекстОшибки);
		Возврат РезультатВыполнения;
	КонецПопытки;
	
	Если ПарольСервисаЛояльностиИзменен Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ОбъектНастройки.Ссылка,
			ПарольСервисаЛояльности, "ПарольСервисаЛояльности");
		УстановитьПривилегированныйРежим(Ложь);
		ПарольСервисаЛояльности = ?(ЗначениеЗаполнено(ПарольСервисаЛояльности), УникальныйИдентификатор, "");
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ОбъектНастройки, "НастройкаРМК");
	АктуализироватьОтображениеУсловногоОформленияХарактеристик();
	ОбновитьПодсказкуТаблицыГорячихКлавиш(ОбъектНастройки);
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
Процедура ПрефиксШтрихкодаВесовогоТовараПриИзмененииНаСервере()
	
	СохранитьЗначениеКонстанты(ОбщегоНазначенияРМКПереопределяемый.ИмяКонстантыПрефиксШтрихкодаВесовогоТовара(),
		ПрефиксШтрихкодаВесовогоТовара);
	
КонецПроцедуры

&НаСервере
Процедура ПрефиксШтрихкодаШтучногоТовараПриИзмененииНаСервере()
	
	СохранитьЗначениеКонстанты(ОбщегоНазначенияРМКПереопределяемый.ИмяКонстантыПрефиксШтрихкодаФасованногоТовара(),
		ПрефиксШтрихкодаШтучногоФасованногоТовара);
	
КонецПроцедуры

&НаСервере
Процедура ШаблонШтрихкодаТовараПриИзмененииНаСервере()
	
	СохранитьЗначениеКонстанты(ОбщегоНазначенияРМКПереопределяемый.ИмяКонстантыШаблонШтрихкодаВесовыхТоваров(),
		ШаблонШтрихкодаТовара);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГорячиеКлавиши(ТекущаяНастройкаРМК)
	
	Макет = Справочники.НастройкиРабочегоМестаКассира.ПолучитьМакет("ГорячиеКлавиши");
	КолСтрок = Макет.ВысотаТаблицы;
	
	Для НомерСтрокиМакета = 2 По КолСтрок Цикл
		
		ИмяКнопки = Макет.Область(НомерСтрокиМакета, 1, НомерСтрокиМакета, 1).Текст;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ИмяКнопки", ИмяКнопки);
		
		МассивСтрок = ТекущаяНастройкаРМК.ГорячиеКлавиши.НайтиСтроки(СтруктураПоиска);
		
		Если МассивСтрок.Количество() = 0 Тогда
			
			НоваяГорячаяКлавиша						= ТекущаяНастройкаРМК.ГорячиеКлавиши.Добавить();
			НоваяГорячаяКлавиша.ИмяКнопки			= ИмяКнопки;
			НоваяГорячаяКлавиша.ЗаголовокКнопки		= Макет.Область(НомерСтрокиМакета, 2, НомерСтрокиМакета, 2).Текст;
			НоваяГорячаяКлавиша.Клавиша				= Макет.Область(НомерСтрокиМакета, 3, НомерСтрокиМакета, 3).Текст;
			НоваяГорячаяКлавиша.АкселераторAlt		= Булево(Макет.Область(НомерСтрокиМакета, 4, НомерСтрокиМакета, 4).Текст);
			НоваяГорячаяКлавиша.АкселераторCtrl		= Булево(Макет.Область(НомерСтрокиМакета, 5, НомерСтрокиМакета, 5).Текст);
			НоваяГорячаяКлавиша.АкселераторShift	= Булево(Макет.Область(НомерСтрокиМакета, 6, НомерСтрокиМакета, 6).Текст);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.НастройкаРМКГорячиеКлавишиКлавиша.СписокВыбора.ЗагрузитьЗначения(МассивКлавиш());
	НастроитьУсловноеОформление(УсловноеОформление);
	
	ОбновитьПодсказкуТаблицыГорячихКлавиш(ТекущаяНастройкаРМК);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция МассивКлавиш()
	
	МассивКлавиш = Новый Массив;
	
	// 0 ... 9
	Для Счетчик = 0 По 9 Цикл
		МассивКлавиш.Добавить(СтрШаблон("_%1", Счетчик));
	КонецЦикла;
	
	// A...Z
	Для Счетчик = 65 По 90 Цикл
		МассивКлавиш.Добавить(Символ(Счетчик));
	КонецЦикла;
	
	МассивКлавиш.Добавить(Строка(Клавиша.BackSpace));
	
	// F1..F12
	Для Счетчик = 1 По 12 Цикл
		МассивКлавиш.Добавить(СтрШаблон("F%1", Счетчик));
	КонецЦикла;
	
	// Num0 ... Num9 
	Для Счетчик = 0 По 9 Цикл
		МассивКлавиш.Добавить(СтрШаблон("Num%1", Счетчик));
	КонецЦикла;
	
	МассивКлавиш.Добавить(Строка(Клавиша.NumAdd));
	МассивКлавиш.Добавить(Строка(Клавиша.NumDecimal));
	МассивКлавиш.Добавить(Строка(Клавиша.NumDivide));
	МассивКлавиш.Добавить(Строка(Клавиша.NumMultiply));
	МассивКлавиш.Добавить(Строка(Клавиша.NumSubtract));
	МассивКлавиш.Добавить(Строка(Клавиша.Space));
	МассивКлавиш.Добавить(Строка(Клавиша.Нет));
	
	Возврат МассивКлавиш;
	
КонецФункции

&НаСервереБезКонтекста
Процедура НастроитьУсловноеОформление(УсловноеОформление)
	
	ЭлементыОформления = УсловноеОформление.Элементы;
	ЭлементыОформления.Очистить();
	
	ЗначенияУсловногоОформления = Новый Структура("ТолькоПросмотр,ЦветФона", Истина, WebЦвета.СеребристоСерый);
	
	ЗаголовкиКнопок = Новый Массив;
	ЗаголовкиКнопок.Добавить("Оплата картой");
	ЗаголовкиКнопок.Добавить("Оплата наличными");
	
	ИмяПоляКомпоновки	= "НастройкаРМКГорячиеКлавиши";
	ЭлементыОформления	= УсловноеОформление.Элементы;	
	Элемент				= ЭлементыОформления.Добавить();
	ПолеЭлемента 		= Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле	= Новый ПолеКомпоновкиДанных(ИмяПоляКомпоновки);
	
	ГруппаОтбораКомпоновки				= Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораКомпоновки.ТипГруппы	= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ;
	
	Для каждого ИмяЗаголовкаКнопки Из ЗаголовкиКнопок Цикл
		
		ПараметрыОтбораУсловногоОформления = Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
			Новый ПолеКомпоновкиДанных("НастройкаРМК.ГорячиеКлавиши.ЗаголовокКнопки"),
			ВидСравненияКомпоновкиДанных.Равно, ИмяЗаголовкаКнопки);
			
			ПараметрыУсловногоОформления = Новый Структура("Отбор,Значения", ПараметрыОтбораУсловногоОформления,
				ЗначенияУсловногоОформления);
			
		НовоеПростоеУсловноеОформление(ПараметрыУсловногоОформления, Элемент, ГруппаОтбораКомпоновки);
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьНаСервере()
	
	НастройкаСинхронизацииСуществует = 
		ОбщегоНазначенияРМК.НастройкаСинхронизацииДанныхСуществует();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПомощникНастройкиОбмена",
		"Доступность",
		НЕ НастройкаСинхронизацииСуществует);

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ДекорацияКомментарийНоваяНастройкаОбмена",
		"Видимость",
		НастройкаСинхронизацииСуществует);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ДекорацияОжиданиеИзмененияПрефикса",
		"Видимость",
		Ложь);
		
	ОчищатьПрефикс = НЕ НастройкаСинхронизацииСуществует;
	АктуальноеЗначениеПрефикса =
		ОбщегоНазначенияРМКПереопределяемый.АктуальноеЗначениеПрефикса(ОчищатьПрефикс);
	
	Если НЕ АктуальноеЗначениеПрефикса = Неопределено
		И АктуальноеЗначениеПрефикса <> ПрефиксИнформационнойБазы Тогда
			ПрефиксИнформационнойБазы = АктуальноеЗначениеПрефикса;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура АктуализироватьОтображениеУсловногоОформленияХарактеристик()
	
	Для каждого СтрокаИзбранного Из НастройкаРМК.БыстрыеТовары Цикл
		
		Товар = СтрокаИзбранного.Номенклатура;
		
		Если ЗначениеЗаполнено(Товар) Тогда
			СтрокаИзбранного.ХарактеристикиИспользуются = ПроверитьПрименениеХарактеристикДляНоменклатуры(Товар);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПодсказкуТаблицыГорячихКлавиш(ТекущаяНастройкаРМК)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ИмяКнопки", "ОткрытьПанельИзбранныхТоваров");
	МассивСтрок = ТекущаяНастройкаРМК.ГорячиеКлавиши.НайтиСтроки(СтруктураПоиска);
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаГорячихКлавишИзбранного = МассивСтрок[0];
	
	Если (НЕ СтрокаГорячихКлавишИзбранного = Неопределено)
		И (СтрокаГорячихКлавишИзбранного.АкселераторAlt 
			ИЛИ СтрокаГорячихКлавишИзбранного.АкселераторCtrl
			ИЛИ СтрокаГорячихКлавишИзбранного.АкселераторShift)
		И НЕ ПустаяСтрока(СтрокаГорячихКлавишИзбранного.Клавиша) Тогда
		
		СоставляющаяCtrl = ?(СтрокаГорячихКлавишИзбранного.АкселераторCtrl, "Ctrl +", "");
		СоставляющаяAlt = ?(СтрокаГорячихКлавишИзбранного.АкселераторAlt, "Alt +", "");
		СоставляющаяShift = ?(СтрокаГорячихКлавишИзбранного.АкселераторShift, "Shift +", "");
		
		КомбинацияГорячихКлавишСтрокой = СтрШаблон("%1%2%3", СоставляющаяCtrl, СоставляющаяAlt, СоставляющаяShift);
		
		ТекстПодсказки = СтрШаблон(
			НСтр("ru = 'Комбинация горячих клавиш для товара определяется как %1 порядковый номер строки из таблицы ниже.
				|Численное значение следует вводить из основного цифрового блока клавиатуры.'"),
				КомбинацияГорячихКлавишСтрокой);
		Элементы.НастройкаРМКБыстрыеТовары.РасширеннаяПодсказка.Заголовок = ТекстПодсказки;
		Элементы.НастройкаРМКБыстрыеТовары.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСверху;
		
	Иначе
		Элементы.НастройкаРМКБыстрыеТовары.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НовоеПростоеУсловноеОформление(ПараметрыУсловногоОформления, ЭлементУсловногоОформления,
		ГруппаЭлементовОтбора = Неопределено)

	Если НЕ(ПараметрыУсловногоОформления = Неопределено
		ИЛИ ЭлементУсловногоОформления = Неопределено
		ИЛИ ОбщегоНазначенияРМККлиентСервер.ЕстьСвойство(ПараметрыУсловногоОформления, "Отбор")
		ИЛИ ЗначениеЗаполнено(ПараметрыУсловногоОформления.Отбор)
		ИЛИ ОбщегоНазначенияРМККлиентСервер.ЕстьСвойство(ПараметрыУсловногоОформления, "Значения")
		ИЛИ ЗначениеЗаполнено(ПараметрыУсловногоОформления.Значения))
		Тогда
			Возврат;
	КонецЕсли;
	
	ПараметрыОтбораУсловногоОформления	= ПараметрыУсловногоОформления.Отбор;
	ЗначенияУсловногоОформления 		= ПараметрыУсловногоОформления.Значения;
		
	Если ТипЗнч(ПараметрыОтбораУсловногоОформления) = Тип("Структура") Тогда
		
		УстановитьЗначениеОтбораКомпоновки(ЭлементУсловногоОформления,
			ПараметрыОтбораУсловногоОформления, ГруппаЭлементовОтбора);
		
	ИначеЕсли ТипЗнч(ПараметрыОтбораУсловногоОформления) = Тип("Массив") Тогда
		
		Для каждого УсловиеОтбора Из ПараметрыОтбораУсловногоОформления Цикл
			УстановитьЗначениеОтбораКомпоновки(ЭлементУсловногоОформления, УсловиеОтбора, ГруппаЭлементовОтбора);
		КонецЦикла;
		
	КонецЕсли;
		
	Для каждого Параметр Из ЗначенияУсловногоОформления Цикл
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьПрименениеХарактеристикДляНоменклатуры(Номенклатура)
	
	Возврат ОбщегоНазначенияРМКПереопределяемый.ТребуетсяВводХарактеристики(Номенклатура);
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьЗначениеОтбораКомпоновки(ЭлементУсловногоОформления, ПараметрыОтбораУсловногоОформления,
	ГруппаЭлементовОтбора = Неопределено)
	
	Если НЕ ГруппаЭлементовОтбора = Неопределено Тогда
		НовыйОтбор = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Иначе
		НовыйОтбор = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйОтбор, ПараметрыОтбораУсловногоОформления);
	НовыйОтбор.Использование = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоНастройкеРМК(НастройкаРМКСсылка)
	
	ЗаполнитьГорячиеКлавиши(НастройкаРМК);
	НастроитьИспользованиеСервисаЛояльности();
	
	Если ИспользоватьСервисЛояльности Тогда
		ПарольСервисаЛояльности = ?(ЗначениеЗаполнено(ПарольСервисаЛояльности), УникальныйИдентификатор, "");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияПоУмолчанию()
	
	Если НЕ ЗначениеЗаполнено(НастройкаРМК.ВидОтображения) Тогда
		НастройкаРМК.ВидОтображения = Перечисления.ВидыОтображения.Стандартный;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НастройкаРМК.ТочностьОкругления) Тогда
		НастройкаРМК.ТочностьОкругления = Перечисления.ПорядкиОкругления.Окр0_01;
	КонецЕсли;
	
	ИнициализироватьЗначенияБулеваТипа = НастройкаРМК.Ссылка.Пустая();
	
	Если ИнициализироватьЗначенияБулеваТипа Тогда
		
		НастройкаРМК.ПечататьБумажныйЧек = ИнициализироватьЗначенияБулеваТипа;
		
		НастройкаРМК.ЗакрыватьПодборПриВыбореТовара = ИнициализироватьЗначенияБулеваТипа;
		НастройкаРМК.ПоказыватьАртикулНоменклатуры = ИнициализироватьЗначенияБулеваТипа;
		НастройкаРМК.ПоказыватьКодНоменклатуры = ИнициализироватьЗначенияБулеваТипа;
		
	КонецЕсли;
	
	Если НастройкаРМК.ГорячиеКлавиши.Количество() = 0 Тогда
		ЗаполнитьГорячиеКлавиши(НастройкаРМК);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НастройкаРМК.Наименование) Тогда
		НастройкаРМК.Наименование = НСтр("ru = 'Настройка РМК'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура АктуализироватьЭлементыФормы()
	
	ОбновитьРеквизитыПоКонстантам();
	
	// Форма будет заполнена по ссылке переданной параметром при открытии формы.
	Если ЗначениеЗаполнено(Параметры.НастройкаРабочегоМеста) Тогда
		
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.ГруппаНастройки);
		
		НастройкиОбъект = Параметры.НастройкаРабочегоМеста.ПолучитьОбъект();
		ЗаполнитьГорячиеКлавиши(НастройкиОбъект);
		ЗначениеВРеквизитФормы(НастройкиОбъект, "НастройкаРМК");
		
	Иначе
		
		ТекущееРабочееМесто = ПараметрыСеанса.РабочееМестоКлиента;
		
		Если НЕ ЗначениеЗаполнено(ТекущееРабочееМесто) Тогда
			ТекущееРабочееМесто = МенеджерОборудованияВызовСервера.РабочееМестоКлиента();
		КонецЕсли;
		
		ДоступныеНастройкиРМК = ОбщегоНазначенияРМК.НастройкиРМКДляТекущегоРабочегоМеста(ТекущееРабочееМесто);
		КоличествоДоступныхНастроек = ДоступныеНастройкиРМК.Количество();
		
		ТекущаяСтраница = ?(КоличествоДоступныхНастроек > 1, Элементы.ГруппаВыбораНастроек, Элементы.ГруппаНастройки);
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(ТекущаяСтраница);
		
		Если КоличествоДоступныхНастроек = 1
			И ЗначениеЗаполнено(ДоступныеНастройкиРМК[0]) Тогда
			
			НастройкиОбъект = ДоступныеНастройкиРМК[0].ПолучитьОбъект();
			ЗаполнитьГорячиеКлавиши(НастройкиОбъект);
			ЗначениеВРеквизитФормы(НастройкиОбъект, "НастройкаРМК");
			
		КонецЕсли;
	КонецЕсли;

	АктуализироватьОтображениеУсловногоОформленияХарактеристик();
	
	Элементы.ПерейтиКСпискуНастроек.Видимость = КоличествоДоступныхНастроек > 1;
	
	ОбщегоНазначенияРМКПереопределяемый.ПереопределитьНастройкиРМК(ЭтотОбъект);
	
	Элементы.НастройкаРМКОсновнаяКассаККМ.Доступность = НастройкаРМК.ПродажиСНесколькихКассККМ;
	
	Если НастройкаРМК.ОтправлятьSMSКодПриПродаже = Перечисления.ВариантыОтправкиSMSПриПродаже.ПриВыборе Тогда
		ОтправлятьSMSПриПоискеКартыПоНомеруТелефона = Истина;
	ИначеЕсли НастройкаРМК.ОтправлятьSMSКодПриПродаже = Перечисления.ВариантыОтправкиSMSПриПродаже.ПриОплатеБаллами Тогда
		ОтправлятьSMSПриОплатеБонусами = Истина;
	КонецЕсли;
	
	ИспользоватьРасширеннуюФормуПодбора = НЕ НастройкаРМК.ИспользоватьНовыйПодборТоваров;
	
	УстановитьУсловноеОформление();
	УстановитьВидимостьНаСервере();
	НастроитьИспользованиеСервисаЛояльности();
	ЗаполнитьЗначенияПоУмолчанию();
	ЗаполнитьОсобенностиПродаж();
	НастроитьЭлементыПодбораТоваров();
	УстановитьПодсказкуАдресаСервераЛояьности();
	
	ИменаПолейФлажков = ИменаПолейФлажков();
	УстановитьВидОтображенияБинарныхЭлементовИнтерфейса(ИменаПолейФлажков);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ИнтеграцияСПлатежнымиСистемами") Тогда
		МодульИнтеграцияСПлатежнымиСистемамиСлужебный = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияСПлатежнымиСистемамиСлужебный");
		МодульИнтеграцияСПлатежнымиСистемамиСлужебный.ИнтернетПоддержкаИСервисы_ПриСозданииНаСервере(ЭтотОбъект);
	Иначе
		Элементы.БИПГруппаИнтеграцияСПлатежнымиСистемами.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайлНаКлиенте(ДляЗагрузки = Ложь)
	
	РежимДиалогаВыбора = ?(ДляЗагрузки, РежимДиалогаВыбораФайла.Открытие, РежимДиалогаВыбораФайла.Сохранение);
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбора);
	ДиалогОткрытияФайла.Фильтр = НСтр("ru = 'НастройкиРМК (*.xml)|*.xml'");
	ДиалогОткрытияФайла.ПолноеИмяФайла = НСтр("ru = 'НастройкиРМК'");
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДляЗагрузки", ДляЗагрузки);
	
	ОповещениеВыбора = Новый ОписаниеОповещения("ВыбранФайл", ЭтотОбъект, ДополнительныеПараметры);
	
	ФайловаяСистемаКлиент.ПоказатьДиалогВыбора(ОповещениеВыбора, ДиалогОткрытияФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранФайл(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКФайлу = ВыбранныеФайлы[0];
	
	Если ДополнительныеПараметры.Свойство("ДляЗагрузки") И ДополнительныеПараметры.ДляЗагрузки Тогда
		
		ЕстьОшибки = Ложь;
		ФайлXML = Новый ТекстовыйДокумент;
		ФайлXML.Прочитать(ПутьКФайлу);
		ТекстXML = ФайлXML.ПолучитьТекст();
		ЗагрузитьНастройкиИзXML(ТекстXML, ЕстьОшибки);
		
		Если ЕстьОшибки Тогда
			
			ПоказатьПредупреждение(, НСтр("ru='При загрузке настроек произошли ошибки.
				|Подробнее см. в журнале регистрации.'")); 
			
		Иначе
			
			ПоказатьПредупреждение(, НСтр("ru='Настройки успешно загружены.'"));
			АктуализироватьЭлементыФормы();
			
		КонецЕсли;
		
	Иначе
		
		СохранитьНастройкиРМКНаСервере();
		ТекстXML = НастройкиВФорматеXML();
		ФайлXML = Новый ТекстовыйДокумент;
		ФайлXML.УстановитьТекст(ТекстXML);
		ФайлXML.Записать(ПутьКФайлу);
		ПоказатьПредупреждение(, НСтр("ru='Настройки успешно выгружены.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НастройкиВФорматеXML()
	
	СтруктураНастроек = Новый Структура;
	ОбщегоНазначенияРМКПереопределяемый.СформироватьСтруктуруНастроек(СтруктураНастроек, НастройкаРМК);
	
	ТекстXML = ОбщегоНазначения.ЗначениеВСтрокуXML(СтруктураНастроек);
	
	Возврат ТекстXML;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьНастройкиИзXML(ТекстXML, ЕстьОшибки)
	
	Попытка
		СтруктураНастроек = ОбщегоНазначения.ЗначениеИзСтрокиXML(ТекстXML);
	Исключение
		
		ЕстьОшибки = Истина;
		ИмяСобытия = НСтр("ru = 'Загрузка настроек РМК из файла.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			ИмяСобытия,
			УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		Возврат;
		
	КонецПопытки;
	
	Если НастройкаРМК.Ссылка.Пустая() Тогда
		
		ТекущееРабочееМесто = МенеджерОборудованияВызовСервера.РабочееМестоКлиента();
		НастройкаРМКОбъект = Справочники.НастройкиРабочегоМестаКассира.СоздатьЭлемент();
		НастройкаРМКОбъект.РабочееМесто = ТекущееРабочееМесто;
		
	Иначе
		НастройкаРМКОбъект = НастройкаРМК.Ссылка.ПолучитьОбъект();
	КонецЕсли;
	
	Для Каждого ЭлементНастройки Из СтруктураНастроек Цикл
		
		Попытка
			
			Если Лев(ЭлементНастройки.Ключ, 9) = "Константа" Тогда
				
				ИмяКонстанты = Сред(ЭлементНастройки.Ключ, 11);
				Константы[ИмяКонстанты].Установить(ЭлементНастройки.Значение);
				
			ИначеЕсли ЭлементНастройки.Ключ = "НастройкаРМК_ГорячиеКлавиши" Тогда
				НастройкаРМКОбъект.ГорячиеКлавиши.Загрузить(ЭлементНастройки.Значение);
			ИначеЕсли ЭлементНастройки.Ключ = "НастройкаРМК_БыстрыеТовары" Тогда
				
				ТаблицаБыстрыеТовары = ЭлементНастройки.Значение;
				НастройкаРМКОбъект.БыстрыеТовары.Очистить();
				
				Для Каждого СтрокаБыстрыеТовары Из ТаблицаБыстрыеТовары Цикл
					
					Если НЕ ОбщегоНазначения.СсылкаСуществует(СтрокаБыстрыеТовары.Номенклатура)
						Или (НЕ СтрокаБыстрыеТовары.Характеристика.Пустая()
							И НЕ ОбщегоНазначения.СсылкаСуществует(СтрокаБыстрыеТовары.Характеристика)) Тогда
							Продолжить;
					КонецЕсли;
						
					НоваяСтрока = НастройкаРМКОбъект.БыстрыеТовары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаБыстрыеТовары);
					
				КонецЦикла;
				
			ИначеЕсли Лев(ЭлементНастройки.Ключ, 12) = "НастройкаРМК" Тогда
				
				ИмяРеквизита = Сред(ЭлементНастройки.Ключ, 14);
				НастройкаРМКОбъект[ИмяРеквизита] = ЭлементНастройки.Значение;
				
			ИначеЕсли ЭлементНастройки.Ключ = "ШаблоныЧеков" Тогда
				
				Для Каждого СтрокаШаблонаЧека Из ЭлементНастройки.Значение Цикл
					
					СсылкаШаблона = СтрокаШаблонаЧека.Ссылка;
					
					Если НЕ СсылкаШаблона.Пустая() И НЕ ОбщегоНазначения.СсылкаСуществует(СсылкаШаблона) Тогда
						
						СтрокаGUID = СсылкаШаблона.УникальныйИдентификатор();
						НовыйGUID = Новый УникальныйИдентификатор(СтрокаGUID);
						НоваяСсылка = Справочники.ХранилищеШаблонов.ПолучитьСсылку(НовыйGUID);
						ОбъектШаблонЧека = Справочники.ХранилищеШаблонов.СоздатьЭлемент();
						ОбъектШаблонЧека.УстановитьСсылкуНового(НоваяСсылка);
						ЗаполнитьЗначенияСвойств(ОбъектШаблонЧека, СтрокаШаблонаЧека, , "Ссылка");
						ОбъектШаблонЧека.Записать();
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		Исключение
			
			ЕстьОшибки = Истина;
			ИмяСобытия = НСтр("ru = 'Сохранение настроек РМК при загрузке из файла настроек.'",
				ОбщегоНазначения.КодОсновногоЯзыка());
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(
				ИмяСобытия,
				УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
				
		КонецПопытки;
			
	КонецЦикла;
	
	Попытка
		НастройкаРМКОбъект.Записать();
	Исключение
		
		ЕстьОшибки = Истина;
		ИмяСобытия = НСтр("ru = 'Запись справочника НастройкиРМК при загрузке из файла настроек.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		МетаданныеОбъекта = Метаданные.Справочники.НастройкиРабочегоМестаКассира;
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			ИмяСобытия,
			УровеньЖурналаРегистрации.Ошибка, МетаданныеОбъекта,
			НастройкаРМКОбъект.Ссылка, ТекстОшибки);
			
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьИспользованиеСервисаЛояльности()
	
	Элементы.ГруппаНастройкаБСГоризонтальная.Доступность = ИспользоватьСервисЛояльности;
	
	ТекущаяСтраницаСерверЛояльности = Элементы.ГруппаСерверВыключен;
	Если ИспользоватьСервисЛояльности Тогда
		ПарольСервисаЛояльности = УникальныйИдентификатор;
		ТекущаяСтраницаСерверЛояльности = Элементы.ГруппаСерверВключен;
	КонецЕсли;
	
	Элементы.ГруппаУправлениеСерверЛояльности.ТекущаяСтраница = ТекущаяСтраницаСерверЛояльности;
КонецПроцедуры

// По данным настройки РМК возвращает адрес сервиса лояльности, ресурс для обращения
// и имя пользователя сервиса лояльности
//
// Параметры:
//  НастройкиРМК - СправочникСсылка.НастройкиРабочегоМестаКассира - данные настройки РМК
//
// Возвращаемое значение:
// Результат - Структура:
//		* АдресСервисаЛояльности - Строка
//		* ПользовательСервисаЛояльности - Строка
//		* РесурсДляПроверкиДоступностиСервиса - Строка
//
&НаСервереБезКонтекста
Функция ИсходныеДанныеДляПроверкиДоступностиСервисаЛояльности(НастройкиРМК)
	
	Результат = Новый Структура();
	Результат.Вставить("РесурсДляПроверкиДоступности", "getclientbonuses");
	Результат.Вставить("АдресСервисаЛояльности", НастройкиРМК.АдресСервисаЛояльности);
	Результат.Вставить("ПользовательСервисаЛояльности", НастройкиРМК.ПользовательСервисаЛояльности);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ИспользоватьСервисЛояльностиПриИзмененииНаСервере()
	
	ИмяКонстанты = ОбщегоНазначенияРМКПереопределяемый.ИмяКонстантыИспользоватьСервисЛояльности();
	Константы[ИмяКонстанты].Установить(ИспользоватьСервисЛояльности);
	НастроитьИспользованиеСервисаЛояльности();
	
КонецПроцедуры

// Возвращает количество записей запретов продаж
//
// Возвращаемое значение:
//  Число
//
&НаСервере
Функция КоличествоЗаписейЗапретовПродаж()
	Возврат ОбщегоНазначенияРМКПереопределяемый.КоличествоЗаписейЗапретовПродаж();
КонецФункции

&НаСервере
Процедура ЗаполнитьПараметрыПодключенияНСПК()
	
	Если ИспользоватьОплатуСертификатамиНСПК Тогда
		ОбщиеПараметрыПодключенияНСПК = ЭлектронныеСертификатыНСПКРМКПереопределяемый.ОбщиеПараметрыПодключенияНСПК();
		
		АдресСервисаНСПК = ОбщиеПараметрыПодключенияНСПК.АдресСервисаНСПК;
		ВерсияКомпонентыНСПК = ЭлектронныеСертификатыНСПК.ВерсияВК();
		Элементы.ГруппаПараметрыПодключенияНСПК.Заголовок = СтрШаблон(
			НСтр("ru = 'Настройки подключения к сервису НСПК (v. %1)'"), ВерсияКомпонентыНСПК);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НСПКВерсияВКЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт 
	
	Если Не ТипЗнч(РезультатВыполнения) = Тип("Строка") Тогда
		ЭлектронныеСертификатыНСПККлиент.УстановитьКомпонентуИнтеграцииНСПК();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЭлементыSMSПодтверждения()
	
	СтандартнаяОбработка = Истина;
	
	ОбщегоНазначенияРМККлиентПереопределяемый.НастроитьЭлементыSMSПодтвержденияНаФормеНастроек(
		ЭтотОбъект, СтандартнаяОбработка);
		
	Если НЕ СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
			
	Если НЕ ИспользоватьСервисЛояльности ИЛИ НЕ ИспользоватьШаблоныСообщений Тогда
		НастройкаРМК.ОтправлятьSMSКодПриЗаведенииКарты = Ложь;
		ОтправлятьSMSПриОплатеБонусами = Ложь;
	КонецЕсли;
	
	Если НЕ ИспользоватьШаблоныСообщений Тогда
		ОтправлятьSMSПриПоискеКартыПоНомеруТелефона = Ложь;
	КонецЕсли;
	
	ИспользоватьСерверЛояльностиИШаблоны = ИспользоватьСервисЛояльности И ИспользоватьШаблоныСообщений;
	
	Элементы.ОтправлятьSMSПриПоискеКартыПоНомеруТелефона.Доступность = ИспользоватьШаблоныСообщений;
	
	Элементы.НастройкаРМКОтправлятьSMSКодПриЗаведенииКарты.Доступность = ИспользоватьСерверЛояльностиИШаблоны;
	Элементы.ОтправлятьSMSПриОплатеБонусами.Доступность = ИспользоватьСерверЛояльностиИШаблоны;
	
	Элементы.НастройкаРМКШаблонSMSПриЗаведенииКарты.Доступность = ИспользоватьСерверЛояльностиИШаблоны
		И НастройкаРМК.ОтправлятьSMSКодПриЗаведенииКарты;
		
	Элементы.НастройкаРМКШаблонSMSПриПродаже.Доступность =
		(ИспользоватьШаблоныСообщений И ОтправлятьSMSПриПоискеКартыПоНомеруТелефона)
		ИЛИ (ИспользоватьСерверЛояльностиИШаблоны И ОтправлятьSMSПриОплатеБонусами);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРасширеннуюФормуПодбораПриИзменении(Элемент)
	
	НастройкаРМК.ИспользоватьНовыйПодборТоваров = НЕ ИспользоватьРасширеннуюФормуПодбора;
	НастроитьЭлементыПодбораТоваров();
	
КонецПроцедуры

#КонецОбласти

