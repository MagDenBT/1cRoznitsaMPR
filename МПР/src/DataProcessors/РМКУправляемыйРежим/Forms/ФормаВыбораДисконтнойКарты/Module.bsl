
#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийПодключаемогоОборудования

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ЗаголовокИнформации = НСтр("ru = 'При подключении оборудования произошла ошибка:'");
		ТекстИнформации     = РезультатВыполнения.ОписаниеОшибки;
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(Штрихкод) Тогда
		//{ds-15.10.2021
		Если РежимПоискаКарты = 5 Или РежимПоискаКарты = 6 Тогда
			ВводимоеЧисло = Штрихкод;
			КомандаНайти(Неопределено);	
		Иначе	
		//}
			СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(Штрихкод);
			ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоМагнитномуКоду(ТекКод, ДополнительныеПараметры) Экспорт
	
	Если Не ПустаяСтрока(ТекКод) Тогда
		СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораДанныхПоиска(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбработатьДанныеПоКодуСервер(Результат);
		ОбработатьДанныеПоКодуКлиент(Результат)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолученМагнитныйКод(МагнитныйКод) Экспорт 
	
	СтруктураРезультат = ДанныеПоискаПоМагнитномуКодуСервер(МагнитныйКод);
	Возврат ПодключаемоеОборудованиеРТКлиент.ПолученМагнитныйКод(ЭтотОбъект, СтруктураРезультат);
	
КонецФункции

&НаСервере
Функция ДанныеПоискаПоМагнитномуКодуСервер(МагнитныйКод)
	
	Возврат ПодключаемоеОборудованиеРТ.ДанныеПоискаПоМагнитномуКоду(МагнитныйКод, ЭтотОбъект);
	
КонецФункции

&НаКлиенте
Функция ПолученШтрихкодИзСШК(Штрихкод) Экспорт
	
	СтруктураРезультат = ДанныеПоискаПоШтрихкодуСервер(Штрихкод);
	Возврат ПодключаемоеОборудованиеРТКлиент.ПолученШтрихкодИзСШК(ЭтотОбъект, СтруктураРезультат);
	
КонецФункции

&НаСервере
Функция ДанныеПоискаПоШтрихкодуСервер(Штрихкод)
	
	Возврат ПодключаемоеОборудованиеРТ.ДанныеПоискаПоШтрихкоду(Штрихкод, ЭтотОбъект);
	
КонецФункции

&НаКлиенте
Процедура ОповещениеОбработатьДанныеПоКоду(СтруктураРезультат, ДополнительныеПараметры) Экспорт
	
	ОбработатьДанныеПоКодуСервер(СтруктураРезультат);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьДанныеПоКодуСервер(СтруктураРезультат) Экспорт
	
	Если СтруктураРезультат.Свойство("РегистрацияНовойКарты")
		ИЛИ СтруктураРезультат.Свойство("РегистрацияНовойКартыВыборШаблона") Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтроки = Неопределено;
	СтрокаРезультата = СтруктураРезультат.ЗначенияПоиска[0];
	
	Если СтрокаРезультата.Свойство("Карта") Тогда
		
		Если СтрокаРезультата.ЭтоРегистрационнаяКарта Тогда
			ПодключаемоеОборудованиеРТ.ВставитьПредупреждениеОНевозможностиОбработкиКарт(СтруктураРезультат, СтрокаРезультата);
		Иначе
			
			ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
				Список,
				"Ссылка",
				СтрокаРезультата.Карта,
				Истина,
				ВидСравненияКомпоновкиДанных.Равно);
			ЭтотОбъект.ТекущийЭлемент = Элементы.Список;
			Элементы.Список.ТекущаяСтрока = СтрокаРезультата.Карта;
		КонецЕсли;
		
	ИначеЕсли СтрокаРезультата.Свойство("СерийныйНомер") Тогда
		
		ПодключаемоеОборудованиеРТ.ВставитьПредупреждениеОНевозможностиОбработкиСертификатов(СтруктураРезультат, СтрокаРезультата);
		
	ИначеЕсли СтрокаРезультата.Свойство("ШтрихкодУпаковкиЕГАИС")
		И ЗначениеЗаполнено(СтрокаРезультата.ШтрихкодУпаковкиЕГАИС) Тогда
		
		ПодключаемоеОборудованиеРТ.ВставитьПредупреждениеОНевозможностиОбработкиАкцизныхМарок(СтруктураРезультат, СтрокаРезультата);
		
	Иначе
		
		ПодключаемоеОборудованиеРТ.ВставитьПредупреждениеОНевозможностиОбработкиНоменклатуры(СтруктураРезультат, СтрокаРезультата);
		
	КонецЕсли;
	
	Если СтрокаРезультата.Свойство("ТекстПредупреждения") Тогда
		СтруктураРезультат.Вставить("ТекстПредупреждения", СтрокаРезультата.ТекстПредупреждения);
	КонецЕсли;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		СтруктураРезультат.Вставить("АктивизироватьСтроку", ИдентификаторСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента) Экспорт
	
	ОткрытаБлокирующаяФорма = Ложь;
	
	ПодключаемоеОборудованиеРТКлиент.ОбработатьДанныеПоКодуРМК(ЭтотОбъект, СтруктураПараметровКлиента, ОткрытаБлокирующаяФорма);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаПраваяКлавиатура;
	Элементы.СтраницыВвода.ТекущаяСтраница = Элементы.СтраницаВводимоеЧисло;
	ЭтотОбъект.ТекущийЭлемент = Элементы.ПолеВводимоеЧисло;
	
	ПодключаемоеОборудованиеРТ.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	ПараметрыСобытийПО = Новый Структура;
	ПараметрыСобытийПО.Вставить("РегистрацияНовойКарты", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	ОповещенияПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(ОповещенияПриПодключении, ЭтотОбъект, "СканерШтрихкода, СчитывательМагнитныхКарт");
	// Конец ПодключаемоеОборудование
	
	//{ds
	Если ds_GMB.НастройкиПодключения() <> Неопределено Тогда 
		РежимПоискаКарты = 6;
	Иначе
		РежимПоискаКарты = 5;
	КонецЕсли;	
	//}
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ВводДоступен() Тогда
		ПодключаемоеОборудованиеРТКлиент.ВнешнееСобытиеОборудованияРМК(ЭтотОбъект, Источник, Событие, Данные);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//{ds
	Если РежимПоискаКарты = 5 Или РежимПоискаКарты = 6 Тогда
		Если ds_ИдентификаторUDS <> "" Или ds_ИдентификаторGMB <> "" Тогда
			ЗафиксироватьВыборСтроки();
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Клиент не найден, необходимо выполнить поиск!");
			СтандартнаяОбработка = Ложь;
		КонецЕсли;			
	Иначе	
	//}
		ЗафиксироватьВыборСтроки(Истина);
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Команда0(Команда)
	
	ДобавитьЦифру("0")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда1(Команда)
	
	ДобавитьЦифру("1")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда2(Команда)
	
	ДобавитьЦифру("2")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда3(Команда)
	
	ДобавитьЦифру("3")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда4(Команда)
	
	ДобавитьЦифру("4")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда5(Команда)
	
	ДобавитьЦифру("5")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда6(Команда)
	
	ДобавитьЦифру("6")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда7(Команда)
	
	ДобавитьЦифру("7")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда8(Команда)
	
	ДобавитьЦифру("8")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда9(Команда)
	
	ДобавитьЦифру("9")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда0ПраваяКлавиатура(Команда)
	
	ДобавитьЦифру("0")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда1ПраваяКлавиатура(Команда)
	
	ДобавитьЦифру("1")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда2ПраваяКлавиатура(Команда)
	
	ДобавитьЦифру("2")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда3ПраваяКлавиатура(Команда)
	
	ДобавитьЦифру("3")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда4ПраваяКлавиатура(Команда)
	
	ДобавитьЦифру("4")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда5ПраваяКлавиатура(Команда)
	
	ДобавитьЦифру("5")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда6ПраваяКлавиатура(Команда)
	
	ДобавитьЦифру("6")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда7ПраваяКлавиатура(Команда)
	
	ДобавитьЦифру("7")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда8ПраваяКлавиатура(Команда)
	
	ДобавитьЦифру("8")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда9ПраваяКлавиатура(Команда)
	
	ДобавитьЦифру("9")
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСтереть(Команда)
	ВводимоеЧисло = "";
	КодТелефона = "";
	НомерТелефонаЧасть1 = "";
	НомерТелефонаЧасть2 = "";
	НомерТелефонаЧасть3 = "";
	Если РежимПоискаКарты = 1 Тогда
		ПервыйВвод = Истина;
	Иначе
		ПервыйВвод = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаНайти(Команда)
	
	СписокКарт = НайтиКарту();
	УстановитьОтборСписка(СписокКарт);
	
	//{ds
	Если РежимПоискаКарты = 5 Тогда
		ВладелецФормы.ds_КодСкидкиUDS = ВводимоеЧисло;
		ВладелецФормы.ds_СуммаСкидкиНеUDS = ВладелецФормы.СуммаСкидки;
	ИначеЕсли РежимПоискаКарты = 6 Тогда
		ВладелецФормы.ds_КодСкидкиGMB = ВводимоеЧисло;
		ВладелецФормы.ds_СуммаСкидкиНеGMB = ВладелецФормы.СуммаСкидки;
	КонецЕсли;
	//}
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ДобавитьЦифру(ВведеннаяЦифраСтрокой)
	
	Если ПервыйВвод Тогда
		ВводимоеЧисло = "";
		КодТелефона = "";
		НомерТелефонаЧасть1 = "";
		НомерТелефонаЧасть2 = "";
		НомерТелефонаЧасть3 = "";
		ПервыйВвод = Ложь;
	КонецЕсли;
	Если РежимПоискаКарты = 1 Тогда
		Если СтрДлина(КодТелефона) = 3 Тогда
			Если СтрДлина(НомерТелефонаЧасть1) = 3 Тогда
				Если СтрДлина(НомерТелефонаЧасть2) = 2 Тогда
					НомерТелефонаЧасть3 = НомерТелефонаЧасть3 + ВведеннаяЦифраСтрокой;
					Если СтрДлина(НомерТелефонаЧасть3) = 2 Тогда
						ТекущийЭлемент = Элементы.КомандаНайтиПраваяКлавиатура;
					КонецЕсли;
				Иначе
					НомерТелефонаЧасть2 = НомерТелефонаЧасть2 + ВведеннаяЦифраСтрокой;
				КонецЕсли;
			Иначе
				НомерТелефонаЧасть1 = НомерТелефонаЧасть1 + ВведеннаяЦифраСтрокой;
			КонецЕсли;
		Иначе
			КодТелефона = КодТелефона + ВведеннаяЦифраСтрокой;
		КонецЕсли;
		ВводимоеЧисло = "7" + КодТелефона + НомерТелефонаЧасть1 + НомерТелефонаЧасть2 + НомерТелефонаЧасть3;
	Иначе
		ВводимоеЧисло = ВводимоеЧисло + ВведеннаяЦифраСтрокой;
		ТекущийЭлемент = Элементы.ПолеВводимоеЧисло;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборСписка(СписокКарт)
	
	КоличествоНайденных = СписокКарт.Количество();
	
	Если КоличествоНайденных = 1 Тогда
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
			Список,
			"Ссылка",
			СписокКарт[0].Значение,
			Истина,
			ВидСравненияКомпоновкиДанных.Равно);
	Иначе
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
			Список,
			"Ссылка",
			СписокКарт,
			Истина,
			ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;
	ЭтотОбъект.ТекущийЭлемент = Элементы.Список;
	Если КоличествоНайденных > 0 Тогда
		Элементы.Список.ТекущаяСтрока = СписокКарт[0].Значение;
	//{ds-15.10.2021
	Иначе
		ТекущийЭлемент = Элементы.КомандаВыбрать;
	//}	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимПоискаКартыПриИзменении(Элемент)
	КомандаСтереть(Неопределено);
	УстановитьФокусВвода();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФокусВвода()
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаПраваяКлавиатура;
	Если РежимПоискаКарты = 1 Тогда
		ЭтотОбъект.ТекущийЭлемент = Элементы.Команда9ПраваяКлавиатура;
		Элементы.СтраницыВвода.ТекущаяСтраница = Элементы.СтраницаТелефон;
	Иначе
		Элементы.СтраницыВвода.ТекущаяСтраница = Элементы.СтраницаВводимоеЧисло;
		ЭтотОбъект.ТекущийЭлемент = Элементы.ПолеВводимоеЧисло;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаТипПоиска(Команда)
	
	КомандаСтереть(Неопределено);
	Если РежимПоискаКарты >= 3 Тогда
		РежимПоискаКарты = 0;
	Иначе
		РежимПоискаКарты = РежимПоискаКарты + 1;
	КонецЕсли;
	
	УстановитьФокусВвода();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтменитьПоиск(Команда)
	
	ПервыйВвод = Истина;
	ВводимоеЧисло = "";
	КодТелефона = "";
	НомерТелефонаЧасть1 = "";
	НомерТелефонаЧасть2 = "";
	НомерТелефонаЧасть3 = "";
	ОтборыСписковКлиентСервер.УдалитьЭлементОтбораСписка(
		Список,
		"Ссылка");
		
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыбрать(Команда)
	
	//{ds
	Если РежимПоискаКарты = 5 Или РежимПоискаКарты = 6 Тогда
		Если ds_ИдентификаторUDS <> "" Или ds_ИдентификаторGMB <> "" Тогда
			ЗафиксироватьВыборСтроки(Истина);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Клиент не найден, необходимо выполнить поиск!");
		КонецЕсли;			
	Иначе	
	//}
		ЗафиксироватьВыборСтроки();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьВыборСтроки(ВыборИзСписка=Ложь)
	
	Если ВыборИзСписка ИЛИ Не ЗначениеЗаполнено(ВводимоеЧисло) Тогда
		ТекущиеДанные = Элементы.Список.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Закрыть();
		Иначе
			СтруктураОтвета = Новый Структура;
			СтруктураОтвета.Вставить("ДисконтнаяКарта", ТекущиеДанные.Ссылка);
		КонецЕсли;
	Иначе
		СтруктураОтвета = Новый Структура;
		СтруктураОтвета.Вставить("ВведенноеЧисло", ВводимоеЧисло);
		Если РежимПоискаКарты = 1 Тогда
			СтруктураОтвета.Вставить("РежимПоискаКарты", "НомерТелефона");
		ИначеЕсли РежимПоискаКарты = 2 Тогда
			СтруктураОтвета.Вставить("РежимПоискаКарты", "ФИО");
		ИначеЕсли РежимПоискаКарты = 3 Тогда
			СтруктураОтвета.Вставить("РежимПоискаКарты", "Email");
		Иначе
			СтруктураОтвета.Вставить("РежимПоискаКарты", "КодКарты");
		КонецЕсли;
	КонецЕсли;
	
	Закрыть(СтруктураОтвета);
КонецПроцедуры

&НаСервере
Функция НайтиКарту()
	
	РезультатыПоиска = Новый СписокЗначений;
	
	ЗапросПоиска = Новый Запрос;
	ЗапросПоиска.Текст = ИнформационныеКартыВызовСервера.ТекстЗапросаПоискаКарты(РежимПоискаКарты);
	
	//{ds
	Если РежимПоискаКарты = 5 Тогда
		УстановитьПривилегированныйРежим(Истина);
		Если СтрДлина(ВводимоеЧисло) = 6 Или СтрДлина(ВводимоеЧисло) = 10 Тогда
			ИнформацияОтСервера = ds_UDS.ПолучитьИнформациюССервера2(ВводимоеЧисло);
			Если НЕ ИнформацияОтСервера = Неопределено И НЕ ИнформацияОтСервера = Ложь Тогда
				ИмяКЛОтСервера = ИнформацияОтСервера.user.displayName;
				ds_ИдентификаторUDS = ИнформацияОтСервера.user.uid;
				ЗапросПоиска.УстановитьПараметр("Наименование", ds_ИдентификаторUDS);
				
				ТипыИнформации = Новый Массив;
				ТипыИнформации.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
				ТипыИнформации.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
				ЗапросПоиска.УстановитьПараметр("ТипыИнформации", ТипыИнформации);
				
				БонуснаяПрограмма = Справочники.БонусныеПрограммыЛояльности.UDS;
				
				//Если БонуснаяПрограмма.МаксимальныйПроцентОплатыБонусами <> ИнформацияОтСервера.loyaltyProgramSettings.maxScoresDiscount Тогда
				//	БонуснаяПрограммаОбъект = БонуснаяПрограмма.ПолучитьОбъект();
				//	БонуснаяПрограммаОбъект.МаксимальныйПроцентОплатыБонусами = ИнформацияОтСервера.loyaltyProgramSettings.maxScoresDiscount;
				//	БонуснаяПрограммаОбъект.Записать();
				//КонецЕсли;
									
				КлиентUDS = Справочники.ФизическиеЛица.НайтиПоРеквизиту("ds_ВнешнийИдентификатор", ds_ИдентификаторUDS);
				Если КлиентUDS.Пустая() Тогда
					НовыйКлиентUDS = Справочники.ФизическиеЛица.СоздатьЭлемент();
					НовыйКлиентUDS.Наименование = ИмяКЛОтСервера;
					НовыйКлиентUDS.Пол = ?(ИнформацияОтСервера.user.gender = "MALE",Перечисления.ПолФизическогоЛица.Мужской,Перечисления.ПолФизическогоЛица.Женский);
					//Если ИнформацияОтСервера.birthdate <> Неопределено и ИнформацияОтСервера.birthdate <> "" Тогда
					//	НовыйКлиентUDS.ДатаРождения = Дата(СтрЗаменить(ИнформацияОтСервера.birthdate,"-",""));
					//КонецЕсли;
					НовыйКлиентUDS.Родитель = Справочники.ФизическиеЛица.UDS;
					НовыйКлиентUDS.ds_ВнешнийИдентификатор = ds_ИдентификаторUDS;
					НовыйКлиентUDS.Записать();
					
					КлиентUDS = НовыйКлиентUDS.Ссылка;
				КонецЕсли;
				
				ЗапросДК = Новый Запрос;
				ЗапросДК.Текст =
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ИнформационныеКарты.Ссылка,
				|	ИнформационныеКарты.КодКарты
				|ИЗ
				|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
				|ГДЕ
				|	ИнформационныеКарты.ВидДисконтнойКарты = &ВидДисконтнойКарты
				|	И ИнформационныеКарты.ВладелецКарты = &ВладелецКарты";
				ЗапросДК.УстановитьПараметр("ВидДисконтнойКарты", Справочники.ВидыДисконтныхКарт.UDS);
				ЗапросДК.УстановитьПараметр("ВладелецКарты", КлиентUDS);
				
				ВыборкаДК = ЗапросДК.Выполнить().Выбрать();
				Если ВыборкаДК.Следующий() Тогда
					Если ВыборкаДК.КодКарты <> Формат(ИнформацияОтСервера.user.participant.id,"ЧГ=") Тогда
						ДК = ВыборкаДК.Ссылка.ПолучитьОбъект();
						ДК.КодКарты = Формат(ИнформацияОтСервера.user.participant.id,"ЧГ=");
						ДК.Записать();
					КонецЕсли;
				Иначе
					НоваяДКUDS = Справочники.ИнформационныеКарты.СоздатьЭлемент();
					НоваяДКUDS.Наименование = ИмяКЛОтСервера;
					НоваяДКUDS.ВладелецКарты = КлиентUDS;
					НоваяДКUDS.ВидДисконтнойКарты = Справочники.ВидыДисконтныхКарт.UDS;
					НоваяДКUDS.ВидКарты = Перечисления.ВидыИнформационныхКарт.Магнитная;
					НоваяДКUDS.ТипКарты = Перечисления.ТипыИнформационныхКарт.Дисконтная;
					НоваяДКUDS.КодКарты = Формат(ИнформацияОтСервера.user.participant.id,"ЧГ=");
					НоваяДКUDS.БонуснаяПрограммаЛояльности = БонуснаяПрограмма;
					НоваяДКUDS.Родитель = Справочники.ИнформационныеКарты.UDS;
					НоваяДКUDS.Записать();
				КонецЕсли;
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("По данному коду клиента не найден! Проверьте код скидки и сделайте поиск дисконтной карты ещё раз! Транзакция прервана!");
				ЗапросПоиска.УстановитьПараметр("Наименование", "%" + "!?*+-" + "%");
				ТипыИнформации = Новый Массив;
				ТипыИнформации.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
				ТипыИнформации.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
				ЗапросПоиска.УстановитьПараметр("ТипыИнформации", ТипыИнформации);
			КонецЕсли;
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Код скидки может быть 6 или 10 цифр! Проверьте код скидки! Поиск прерван!");
			ЗапросПоиска.УстановитьПараметр("Наименование", "%" + "!?*+-" + "%");
			ТипыИнформации = Новый Массив;
			ТипыИнформации.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
			ТипыИнформации.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
			ЗапросПоиска.УстановитьПараметр("ТипыИнформации", ТипыИнформации);
		КонецЕсли;
		ЗапросПоиска.УстановитьПараметр("ТипКарты", Перечисления.ТипыИнформационныхКарт.Дисконтная);
		ЗапросПоиска.УстановитьПараметр("ПустойВладелец", Справочники.ФизическиеЛица.ПустаяСсылка());
			
		Выборка = ЗапросПоиска.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			РезультатыПоиска.Добавить(Выборка.Ссылка);
		КонецЦикла;
		Если РезультатыПоиска.Количество() > 0 Тогда
			//Проверим есть ли бонусы на этой ДК. Поскольку ДК виртуальная, бонусов быть не должно!
			ОстаткиБонусныхБаллов = БонусныеБаллыСервер.ОстаткиИДвиженияБонусныхБаллов(РезультатыПоиска[0].Значение);
			НачальныйОстатокВБаллах = ОстаткиБонусныхБаллов[0].Сумма;
			БаллыUDS = Окр(ИнформацияОтСервера.user.participant.points - 0.49,0);
			Если НачальныйОстатокВБаллах > 0 Тогда
				//Есть начальные бонусы? Тогда добавим/отнимем количество для того чтобы бонусов на ДК было столько
				//же сколько баллов на сервере UDS. Если баллов равное количество, то ничего не делаем.
				РазницаБаллов = БаллыUDS - НачальныйОстатокВБаллах;
				Если РазницаБаллов > 0 Тогда
					ds_UDS.НачислитьБаллыНаДК(РезультатыПоиска[0].Значение, РазницаБаллов);
				ИначеЕсли РазницаБаллов < 0 Тогда
					СписываемыеБаллы = (-1 * РазницаБаллов);
					ds_UDS.СписатьБаллыСДК(РезультатыПоиска[0].Значение, СписываемыеБаллы)
				КонецЕсли;				
			Иначе
				//Добавим бонусы на карту ДК в соответсвии с баллами на сервере UDS
				ds_UDS.НачислитьБаллыНаДК(РезультатыПоиска[0].Значение,БаллыUDS);
			КонецЕсли;
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);		
	ИначеЕсли РежимПоискаКарты = 6 Тогда 
		УстановитьПривилегированныйРежим(Истина); 
		
		Если (СтрДлина(ВводимоеЧисло) = 9 Или СтрДлина(ВводимоеЧисло) = 10) И
			Не ds_НомерТелефонаСодержитНедопустимыеСимволы(ВводимоеЧисло) Тогда   
			НастройкиПодключенияGMB = ds_GMB.НастройкиПодключения();
			
			ИнформацияОтСервера = ds_GMB.НайтиПользователя(ВводимоеЧисло, НастройкиПодключенияGMB);
			Если ИнформацияОтСервера <> Неопределено Тогда
				ИмяКлиента = ИнформацияОтСервера.name;
				ПолКлиента = ИнформацияОтСервера.gender;
				ТелефонКлиента = ИнформацияОтСервера.phone;
				ДоступныеБаллы = ИнформацияОтСервера.balance;
				МаксимальныйПроцентОплатыБонусами = ИнформацияОтСервера.maxPayBonusK;
				ds_ИдентификаторGMB = СтрЗаменить(ИнформацияОтСервера.id_client, Символ(160), ""); 
				
				Если ИнформацияОтСервера.Свойство("email") И Не ПустаяСтрока(ИнформацияОтСервера.email) Тогда  
					ПочтаКлиента = ИнформацияОтСервера.email;
				Иначе 
					ПочтаКлиента = "";
				КонецЕсли;	
				
				Если СтрДлина(ВводимоеЧисло) = 10 Тогда 
					ДоступныеБаллы = 0;	
				КонецЕсли;	
				
				ЗапросПоиска.УстановитьПараметр("Наименование", ds_ИдентификаторGMB);
				
				ТипыИнформации = Новый Массив;
				ТипыИнформации.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
				ТипыИнформации.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
				ЗапросПоиска.УстановитьПараметр("ТипыИнформации", ТипыИнформации);
				
				БонуснаяПрограмма = Справочники.БонусныеПрограммыЛояльности.GMB;
				Если БонуснаяПрограмма.МаксимальныйПроцентОплатыБонусами <> МаксимальныйПроцентОплатыБонусами Тогда 
					БонуснаяПрограммаОбъект = БонуснаяПрограмма.ПолучитьОбъект();
					БонуснаяПрограммаОбъект.МаксимальныйПроцентОплатыБонусами = МаксимальныйПроцентОплатыБонусами;
					БонуснаяПрограммаОбъект.Записать();
				КонецЕсли;	
									
				КлиентGMB = Справочники.ФизическиеЛица.НайтиПоРеквизиту("ds_ВнешнийИдентификатор", ds_ИдентификаторGMB);
				Если КлиентGMB.Пустая() Тогда
					НовыйКлиентGMB = Справочники.ФизическиеЛица.СоздатьЭлемент();
					НовыйКлиентGMB.Наименование = ИмяКлиента;
					НовыйКлиентGMB.Пол = Перечисления.ПолФизическогоЛица[?(ПолКлиента = "М", "Мужской", "Женский")];
					НовыйКлиентGMB.Родитель = Справочники.ФизическиеЛица.GMB;
					НовыйКлиентGMB.ds_ВнешнийИдентификатор = ds_ИдентификаторGMB;
					
					Если Не ПустаяСтрока(ПочтаКлиента) Тогда 
						СтрКИ = НовыйКлиентGMB.КонтактнаяИнформация.Добавить();
						СтрКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
						СтрКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailФизическогоЛица;
						СтрКИ.АдресЭП = ПочтаКлиента;
						СтрКИ.Значение = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияПоПредставлению(ПочтаКлиента, СтрКИ.Вид);
						СтрКИ.Представление = ПочтаКлиента;
						
						КонтактнаяИнформация = НовыйКлиентGMB.КонтактнаяИнформация.Выгрузить();
						КонтактнаяИнформация.Колонки.Добавить("Дата", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
						
						УправлениеКонтактнойИнформацией.УстановитьКонтактнуюИнформациюОбъекта(НовыйКлиентGMB, КонтактнаяИнформация, Ложь); 
					КонецЕсли;	
					
					НовыйКлиентGMB.Записать();
					
					КлиентGMB = НовыйКлиентGMB.Ссылка;
				Иначе
					Если Не ПустаяСтрока(ПочтаКлиента) Тогда 
						ЗапросПочта = Новый Запрос;
						ЗапросПочта.Текст =
						"ВЫБРАТЬ
						|	ФизическиеЛицаКонтактнаяИнформация.Ссылка КАК Ссылка
						|ИЗ
						|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
						|ГДЕ
						|	ФизическиеЛицаКонтактнаяИнформация.АдресЭП = &АдресЭП
						|	И ФизическиеЛицаКонтактнаяИнформация.Ссылка = &Ссылка";
						ЗапросПочта.УстановитьПараметр("АдресЭП", ПочтаКлиента);
						ЗапросПочта.УстановитьПараметр("Ссылка", КлиентGMB);
						
						РезультатЗапросПочта = ЗапросПочта.Выполнить();
						Если РезультатЗапросПочта.Пустой() Тогда 
							НовыйКлиентGMB = КлиентGMB.ПолучитьОбъект();
							
							СтрКИ = НовыйКлиентGMB.КонтактнаяИнформация.Добавить();
							СтрКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
							СтрКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailФизическогоЛица;
							СтрКИ.АдресЭП = ПочтаКлиента;
							СтрКИ.Значение = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияПоПредставлению(ПочтаКлиента, СтрКИ.Вид);
							СтрКИ.Представление = ПочтаКлиента;
							
							КонтактнаяИнформация = НовыйКлиентGMB.КонтактнаяИнформация.Выгрузить();
							КонтактнаяИнформация.Колонки.Добавить("Дата", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
							
							УправлениеКонтактнойИнформацией.УстановитьКонтактнуюИнформациюОбъекта(НовыйКлиентGMB, КонтактнаяИнформация, Ложь); 
							НовыйКлиентGMB.Записать();
						КонецЕсли;	
					КонецЕсли;
				КонецЕсли;
				
				ЗапросДК = Новый Запрос;
				ЗапросДК.Текст =
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ИнформационныеКарты.Ссылка,
				|	ИнформационныеКарты.КодКарты
				|ИЗ
				|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
				|ГДЕ
				|	ИнформационныеКарты.ВидДисконтнойКарты = &ВидДисконтнойКарты
				|	И ИнформационныеКарты.ВладелецКарты = &ВладелецКарты";
				ЗапросДК.УстановитьПараметр("ВидДисконтнойКарты", Справочники.ВидыДисконтныхКарт.GMB);
				ЗапросДК.УстановитьПараметр("ВладелецКарты", КлиентGMB);
				
				ВыборкаДК = ЗапросДК.Выполнить().Выбрать(); 
				КодКарты = Формат(ТелефонКлиента,"ЧГ=");
				Если ВыборкаДК.Следующий() Тогда
					Если ВыборкаДК.КодКарты <> КодКарты Тогда
						ДК = ВыборкаДК.Ссылка.ПолучитьОбъект();
						ДК.КодКарты = КодКарты;
						ДК.Записать();
					КонецЕсли;
				Иначе
					НоваяДКGMB = Справочники.ИнформационныеКарты.СоздатьЭлемент();
					НоваяДКGMB.Наименование = ИмяКлиента;
					НоваяДКGMB.ВладелецКарты = КлиентGMB;
					НоваяДКGMB.ВидДисконтнойКарты = Справочники.ВидыДисконтныхКарт.GMB;
					НоваяДКGMB.ВидКарты = Перечисления.ВидыИнформационныхКарт.Магнитная;
					НоваяДКGMB.ТипКарты = Перечисления.ТипыИнформационныхКарт.Дисконтная;
					НоваяДКGMB.КодКарты = КодКарты;
					НоваяДКGMB.БонуснаяПрограммаЛояльности = БонуснаяПрограмма;
					НоваяДКGMB.Родитель = Справочники.ИнформационныеКарты.GMB;
					НоваяДКGMB.Записать();
				КонецЕсли;
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("По данному коду клиента не найден! Проверьте код скидки и сделайте поиск дисконтной карты ещё раз или начислите баллы по номеру телефона!");
				ЗапросПоиска.УстановитьПараметр("Наименование", "%" + "!?*+-" + "%");
				ТипыИнформации = Новый Массив;
				ТипыИнформации.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
				ТипыИнформации.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
				ЗапросПоиска.УстановитьПараметр("ТипыИнформации", ТипыИнформации);   
				
				Если СтрДлина(ВводимоеЧисло) = 10 Тогда 
					Элементы.ds_НачислитьБаллыПоНомеруТелефона.Видимость = Истина;	
				КонецЕсли;	
			КонецЕсли;
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Код скидки может быть 9 или 10 цифр! Проверьте код скидки! Поиск прерван!");
			ЗапросПоиска.УстановитьПараметр("Наименование", "%" + "!?*+-" + "%");
			ТипыИнформации = Новый Массив;
			ТипыИнформации.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
			ТипыИнформации.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
			ЗапросПоиска.УстановитьПараметр("ТипыИнформации", ТипыИнформации);
		КонецЕсли;
		ЗапросПоиска.УстановитьПараметр("ТипКарты", Перечисления.ТипыИнформационныхКарт.Дисконтная);
		ЗапросПоиска.УстановитьПараметр("ПустойВладелец", Справочники.ФизическиеЛица.ПустаяСсылка());
			
		Выборка = ЗапросПоиска.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			РезультатыПоиска.Добавить(Выборка.Ссылка);
		КонецЦикла;
		Если РезультатыПоиска.Количество() > 0 Тогда
			//Проверим есть ли бонусы на этой ДК. Поскольку ДК виртуальная, бонусов быть не должно!
			ОстаткиБонусныхБаллов = БонусныеБаллыСервер.ОстаткиИДвиженияБонусныхБаллов(РезультатыПоиска[0].Значение);
			НачальныйОстатокВБаллах = ОстаткиБонусныхБаллов[0].Сумма;
			БаллыGMB = Окр(ДоступныеБаллы - 0.49, 0);
			Если НачальныйОстатокВБаллах > 0 Тогда
				//Есть начальные бонусы? Тогда добавим/отнимем количество для того чтобы бонусов на ДК было столько
				//же сколько баллов на сервере GMB. Если баллов равное количество, то ничего не делаем.
				РазницаБаллов = БаллыGMB - НачальныйОстатокВБаллах;
				Если РазницаБаллов > 0 Тогда
					ds_GMB.НачислитьБаллыНаДК(РезультатыПоиска[0].Значение, РазницаБаллов);
				ИначеЕсли РазницаБаллов < 0 Тогда
					СписываемыеБаллы = (-1 * РазницаБаллов);
					ds_GMB.СписатьБаллыСДК(РезультатыПоиска[0].Значение, СписываемыеБаллы)
				КонецЕсли;				
			Иначе
				//Добавим бонусы на карту ДК в соответсвии с баллами на сервере GMB
				ds_GMB.НачислитьБаллыНаДК(РезультатыПоиска[0].Значение, БаллыGMB);
			КонецЕсли;
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);	
	Иначе		
	//}
		Если РежимПоискаКарты = 1 Тогда
			// Точное совпадение телефона.
			ЗапросПоиска.УстановитьПараметр("ВведенноеЧисло", ВводимоеЧисло);
			ЗапросПоиска.УстановитьПараметр("ВведенноеЧислоСВосьмеркой", "8" + Сред(ВводимоеЧисло, 2));
			
		ИначеЕсли РежимПоискаКарты = 2 Тогда
			// Часть наименования.
			ЗапросПоиска.УстановитьПараметр("Наименование", "%" + ВводимоеЧисло + "%");
			
			ТипыИнформации = Новый Массив;
			ТипыИнформации.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
			ТипыИнформации.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
			ЗапросПоиска.УстановитьПараметр("ТипыИнформации", ТипыИнформации);
			
		ИначеЕсли РежимПоискаКарты = 3 Тогда
			// Часть адреса.
			ЗапросПоиска.УстановитьПараметр("АдресЭП", "%" + ВводимоеЧисло + "%");
			
		Иначе
			// Точное совпадение кода
			ЗапросПоиска.УстановитьПараметр("ВводимоеЧисло", ВводимоеЧисло);
			
		КонецЕсли;
		ЗапросПоиска.УстановитьПараметр("ТипКарты", Перечисления.ТипыИнформационныхКарт.Дисконтная);
		
		Выборка = ЗапросПоиска.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			РезультатыПоиска.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;	
	
	Возврат РезультатыПоиска;
	
КонецФункции

#КонецОбласти

#Область ds

&НаКлиенте
Процедура ds_НачислитьБаллыПоНомеруТелефона(Команда)
	
	Если РежимПоискаКарты = 6 И СтрДлина(ВводимоеЧисло) = 10 Тогда 
		СтруктураОтвета = Новый Структура;
		СтруктураОтвета.Вставить("ВведенноеЧисло", ВводимоеЧисло);
		СтруктураОтвета.Вставить("ДисконтнаяКартаGMBБезПриложения");
		
		Закрыть(СтруктураОтвета);
	КонецЕсли;	
				
КонецПроцедуры 

Функция ds_НомерТелефонаСодержитНедопустимыеСимволы(Знач СтрокаПроверки)
	
	СписокДопустимыхСимволов = "+-.,() wp1234567890";
	Возврат СтрРазделить(СтрокаПроверки, СписокДопустимыхСимволов, Ложь).Количество() > 0;
	
КонецФункции
			
#КонецОбласти
