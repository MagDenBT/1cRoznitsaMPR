
#Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура ОповещениеОткрытьФормуПроверкиНепробитыхЧеков(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если РезультатОткрытияФормы = НСтр("ru = 'Закрытие смены'") Тогда
		ПродолжитьОткрытиеОбработкиЗакрытияКассовойСмены(ДополнительныеПараметры.КассаККМ);
	Иначе
		
		ТекстОшибки = НСтр("ru = 'Закрытие кассовой смены прервано пользователем.'");
		
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ТекстОшибки)
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВводаСуммыФактическойВыемки(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗавершитьОткрытиеОбработкиЗакрытияКассовойСмены(РезультатЗакрытия.ПараметрыВыемки, РезультатЗакрытия.ВведенноеЧисло);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуНастройкиРМК(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуЗакрытияКассовойСмены(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Оповестить("ИзменениеСостоянияКассовойСмены", ДополнительныеПараметры.КассаККМ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВопросаЗакрытьСмену(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		Если НЕ ВРЕГ(РезультатОткрытияФормы) = "ДА" Тогда
			Возврат;
		КонецЕсли;
		КассаККМ = ДополнительныеПараметры.КассаККМ;
		ТекстОшибки = "";
		Если НЕ ВозможностьЗакрытияСмены(КассаККМ, ТекстОшибки) Тогда
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ТекстОшибки);
			Возврат;
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("КассаККМ", КассаККМ);
		ОбработчикОповещения= Новый ОписаниеОповещения("ОповещениеОткрытьФормуПроверкиНепробитыхЧеков", ЭтотОбъект, ДополнительныеПараметры);
		ПройденаПроверкаНепробитыхЧеков = РозничныеПродажиКлиент.ПройденаПроверкаНепробитыхЧеков(КассаККМ, ОбработчикОповещения);
		
		Если ПройденаПроверкаНепробитыхЧеков Тогда
			ПродолжитьОткрытиеОбработкиЗакрытияКассовойСмены(КассаККМ);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВопросаЗакрытьРМК(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		Если НЕ ВРЕГ(РезультатОткрытияФормы) = "ДА" Тогда
			ПараметрЗакрытияФормы = "";
			СанкционированноеЗакрытие = Ложь;
			Возврат;
		КонецЕсли;
		
		ПроверятьЗакрытиеКассовойСменыПередВыходомИзРМК = Ложь;
		
		Если ДополнительныеПараметры.Действие = "ПередЗакрытием" Тогда
			Если ЗначениеЗаполнено(ПараметрЗакрытияФормы)  Тогда
				Закрыть(ПараметрЗакрытияФормы);
			Иначе
				Закрыть();
			КонецЕсли;
		ИначеЕсли ДополнительныеПараметры.Действие = "ЗавершитьРаботуСистемы" Тогда
			ЗавершитьРаботуСистемы(Ложь);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрЗакрытияФормы = "";
	СанкционированноеЗакрытие = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьОсновнуюФормуРМК(РезультатОткрытияФормы, ДополнительныеПараметр) Экспорт
	
	ОткрытьОсновнуюФормуРМК();
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСеанса.ФормаРабочегоМестаКассира = Строка(УникальныйИдентификатор);
	
	// Получим узлы обмена.
	УзлыОбмена.ЗагрузитьЗначения(ОбменДаннымиРТ.УзлыОбменаПоРабочемуМесту());
	
	УстановитьДоступностьЭлементов();
	
	Магазин = ПараметрыСеанса.ТекущийМагазин;
	
	Если НЕ ЗначениеЗаполнено(Магазин) Тогда
		ПолучитьДоступныеМагазины();
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаВыбораМагазина;
	Иначе
		СтрокаТаблицыМагазинов = Магазины.Добавить();
		СтрокаТаблицыМагазинов.Магазин = Магазин;
	КонецЕсли;
	
	ИспользоватьПодключаемоеОборудование = ЗначениеНастроекВызовСервера.ИспользоватьПодключаемоеОборудование();
	ИспользоватьКомиссионнуюТорговлю     = ПолучитьФункциональнуюОпцию("ИспользоватьКомиссионнуюТорговлю");
	
	//{ds
	Если Не ОбменДаннымиРТ.ЭтоПодчиненныйУзелПоРабочемуМесту() И Константы.ds_РазрешитьРМКВБазеМагазина.Получить() = Ложь Тогда
		ОбщегоНазначения.СообщитьПользователю("Запуск РМК в базе магазина запрещен!",,,, Отказ);
	КонецЕсли;
	//}
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если Не ВебКлиент Тогда
	мИмяКомпьютера = ИмяКомпьютера();
	#КонецЕсли  
	
	ПолучитьРабочееМесто();
	

	// ПодключаемоеОборудование
	ОповещенияПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);  	
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(ОповещенияПриПодключении, ЭтаФорма, "ДисплейПокупателя");
	// Конец ПодключаемоеОборудование
	
	ПодключитьОбработчикОжидания("ПроверитьВозможностьРаботыПриОткрытии", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ЗаголовокИнформации = НСтр("ru = 'При подключении оборудования произошла ошибка:'");
		ТекстИнформации     = РезультатВыполнения.ОписаниеОшибки;
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
	Иначе
		ВывестиИнформациюНаДисплейПокупателя();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если (НЕ СанкционированноеЗакрытие И Магазины.Количество() > 0) ИЛИ ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Действие", "ПередЗакрытием");
	
	ПроверитьЗакрытиеКассовойСменыПередВыходомИзРМК(Отказ, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтаФорма);
	// Конец ПодключаемоеОборудование
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияРТВызовСервера.УстановитьЗначениеПараметраСеанса("ФормаРабочегоМестаКассира", "");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьФормуМенюРМК" Тогда
		
		УстановитьДоступностьЭлементов();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МагазиныВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыборМагазинаКлиент()
	
КонецПроцедуры

&НаКлиенте
Процедура КассыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыборКассыКлиент()
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРегистрацияПродажНажатие(Элемент)
	
	// &ЗамерПроизводительности 	
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(Истина,
		"Обработка.РМКУправляемыйРежим.Форма.Форма.ПриОткрытии");

	
	ОчиститьСообщения();
	ПолучитьРабочееМесто();
	
	ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ВыводимаяВРМКИнформация();
	Если ПроверитьВозможностьРегистрацииПродаж(ПараметрыИнформации) Тогда
		Если ИспользоватьКомиссионнуюТорговлю Тогда
			Если ВывестиСообщениеОДоговорахСОшибками(Магазин) Тогда
				
				ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьОсновнуюФормуРМК", ЭтотОбъект);
				ЗаголовокИнформации = НСтр("ru = 'Информация'");
				ТекстИнформации     = НСтр("ru = 'На остатках есть товары комитентов, которым 
												 |не назначен тип учета НДС.
												 |
												 |Обратитесь к администратору 
												 |или ответственному за ведение контрагентов.'");
				
				ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации,
																			ТекстИнформации,
																			ОбработчикОповещения);
			Иначе
				ОткрытьОсновнуюФормуРМК();
			КонецЕсли;
		Иначе
			ОткрытьОсновнуюФормуРМК();
		КонецЕсли;
	Иначе
		ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОсновнуюФормуРМК()
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РабочееМесто"  , РабочееМесто);
	ПараметрыФормы.Вставить("Магазин"       , Магазин);
	ПараметрыФормы.Вставить("мИмяКомпьютера", мИмяКомпьютера);
	
	ПараметрыФормы.Вставить("РасчетноеВремяЗакрытияКассы", РасчетноеВремяЗакрытияКассы);
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.Форма", ПараметрыФормы, ЭтотОбъект,,,,, Режим);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОткрытиеСменыНажатие(Элемент)
	
	ОчиститьСообщения();
	ПолучитьРабочееМесто();
	
	ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ВыводимаяВРМКИнформация();
	Если ПроверитьОбщуюВозможностьРаботы(ПараметрыИнформации) Тогда
		
		Если ДоступныеКассыККМ = Неопределено ИЛИ ДоступныеКассыККМ.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьДоступныеКассыСУчетомОткрытия(Ложь);
		
		Если Кассы.Количество() = 0 Тогда
			
			ЗаголовокИнформации = НСтр("ru = 'Ошибка открытия смены'");
			ТекстИнформации = НСтр("ru = 'Нет касс с закрытыми сменами.'");
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
			
			Возврат;
			
		КонецЕсли;
		
		РежимВыбораКассы = "ОткрытьСмену";
		Если Кассы.Количество() > 1  Тогда
			
			Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаВыбораКассы;
			Возврат;
			
		КонецЕсли;
		
		ОткрытьСмену(Кассы[0].Касса)
		
	Иначе
		ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтчетБезГашенияНажатие(Элемент)
	
	ОчиститьСообщения();
	ПолучитьРабочееМесто();
	
	ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ВыводимаяВРМКИнформация();
	Если ПроверитьОбщуюВозможностьРаботы(ПараметрыИнформации) Тогда
		
		Если ДоступныеКассыККМ = Неопределено ИЛИ ДоступныеКассыККМ.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьДоступныеКассыСУчетомОткрытия(Истина, Истина);
		
		Если Кассы.Количество() = 0 Тогда
			
			ЗаголовокИнформации = НСтр("ru = 'Ошибка печати отчета без гашения'");
			ТекстИнформации = НСтр("ru = 'Нет доступных касс.'");
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
			
			Возврат;
			
		КонецЕсли;
		
		Если Кассы.Количество() > 1  Тогда
			
			РежимВыбораКассы = "НапечататьОтчетБезГашения";
			Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаВыбораКассы;
			Возврат;
			
		КонецЕсли;
		
		НапечататьОтчетБезГашения(Кассы[0].Касса)
		
	Иначе
		ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗакрытиеСменыНажатие(Элемент)
	
	ОчиститьСообщения();
	ПолучитьРабочееМесто();
	
	ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ВыводимаяВРМКИнформация();
	Если ПроверитьОбщуюВозможностьРаботы(ПараметрыИнформации) Тогда
		
		Если ДоступныеКассыККМ = Неопределено ИЛИ ДоступныеКассыККМ.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьДоступныеКассыСУчетомОткрытия(Истина);
		
		Если Кассы.Количество() = 0 Тогда
			
			ЗаголовокИнформации = НСтр("ru = 'Ошибка закрытия смены'");
			ТекстИнформации = НСтр("ru = 'Нет касс с открытыми сменами.'");
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
			
			Возврат;
			
		КонецЕсли;
		
		Если Кассы.Количество() > 1  Тогда
			
			РежимВыбораКассы = "ЗакрытьСмену";
			Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаВыбораКассы;
			Возврат;
			
		КонецЕсли;
		
		ЗакрытьСмену(Кассы[0].Касса)
		
	Иначе
		ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСводныйОтчетНажатие(Элемент)
    
    // &ЗамерПроизводительности
    ОценкаПроизводительностиРТКлиент.НачатьЗамер(
             Истина, "Документ.СводныйОтчетПоКассовойСмене.Форма.ФормаДокумента.Открытие");

	ОчиститьСообщения();
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Документ.СводныйОтчетПоКассовойСмене.ФормаОбъекта",,,,,,, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкаРМКНажатие(Элемент)
	
	ОчиститьСообщения();
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуНастройкиРМК", ЭтотОбъект);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
    
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		Истина, "Обработка.РМКУправляемыйРежим.Форма.ФормаНастройкиРМК.Открытие");
        
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаНастройкиРМК",, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим);
	
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОбменДаннымиНажатие(Элемент)
	
	ОчиститьСообщения();
	
	Если УзлыОбмена.Количество() = 1 Тогда
		УзелОбмена = УзлыОбмена[0].Значение;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("УзелИнформационнойБазы", УзелОбмена);
		
		ОткрытьФорму("Обработка.ВыполнениеОбменаДанными.Форма",
			ПараметрыФормы, ЭтаФорма, УзелОбмена.УникальныйИдентификатор(), , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ОткрытьФорму("ОбщаяФорма.СинхронизацияДанных");
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Обнаружено более одной настройки синхронизации ""По рабочему месту"".
				|Выберите подходящую настройку вручную и выполните обмен.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗакрытьНажатие(Элемент)
	
	СанкционированноеЗакрытие = Истина;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗавершениеРаботыНажатие(Элемент)
	
	СанкционированноеЗакрытие = Истина;
	
	Если МодальныйРежим Тогда
		СоединенияИБКлиент.ЗавершитьРаботуЭтогоСеанса(Ложь);
		ПараметрЗакрытияФормы = "ЗавершитьРаботуСистемы";
		Закрыть(ПараметрЗакрытияФормы);
	Иначе
		Отказ = Ложь;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Действие", "ЗавершитьРаботуСистемы");
		
		ПроверитьЗакрытиеКассовойСменыПередВыходомИзРМК(Отказ, ДополнительныеПараметры);
		Если НЕ Отказ Тогда
			ЗавершитьРаботуСистемы(Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаНазадКСпискуКнопок(Команда)
	
	Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаКнопок;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборКассы(Команда)
	ВыборКассыКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ВыборМагазина(Команда)
	
	ВыборМагазинаКлиент()
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьДоступностьЭлементов()
	
	Пользователь = глЗначениеПеременной("ПользовательИзмененныхПрав");
	Если Пользователь = Неопределено 
		ИЛИ НЕ ЗначениеЗаполнено(Пользователь) Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Элементы.ДекорацияОтчетБезГашения.Доступность = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьОтчетОСменеБезГашения, Ложь, Пользователь);
	
	Элементы.ДекорацияЗакрытиеСмены.Доступность = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьЗакрытиеСмены, Ложь, Пользователь);
	
	Элементы.ДекорацияСводныйОтчет.Доступность = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьФормированиеСводныйОтчетПоКассовойСмене, Ложь, Пользователь)
											   И НЕ ОбменДаннымиРТ.ЭтоПодчиненныйУзелПоРабочемуМесту();
	
	Элементы.ДекорацияНастройкаРМК.Доступность = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьНастройкуРМК, Ложь, Пользователь);
	
	Элементы.ДекорацияОбменДанными.Доступность = ОбменДаннымиРТ.ЭтоПодчиненныйУзелПоРабочемуМесту() И УзлыОбмена.Количество() > 0;
	
	Элементы.ДекорацияЗакрыть.Доступность = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьВыходИзРМК, Ложь, Пользователь)
		Или ЕдинственныйПользовательИБ();
	
	ПроверятьЗакрытиеКассовойСменыПередВыходомИзРМК = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.ПроверятьЗакрытиеКассовойСменыПередВыходомИзРМК, Ложь, Пользователь);
	
	//{ds
	Элементы.ds_ДекорацияКраткийОтчетЭС.Доступность = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьЗакрытиеСмены, Ложь, Пользователь);
	
	Элементы.ds_ДекорацияСверкаДС.Доступность = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьЗакрытиеСмены, Ложь, Пользователь);
	//}
	
КонецПроцедуры // УстановитьДоступностьЭлементов()

&НаСервере
// Проверяет и заполняет необходимые параметры для работы.
//
// Параметры:
//  Отказ - Булево
//
Функция ПроверитьОбщуюВозможностьРаботы(ПараметрыИнформации)
	
	Если НЕ ЗначениеЗаполнено(РабочееМесто) Тогда
		ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибка определения рабочего места'");
		
		ПараметрыИнформации.ТекстИнформации = НСтр("ru = 'Не смогли определить рабочее место.
													|Обратитесь к администратору системы.'");
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КассыККМ.Ссылка КАК КассаККМ,
	|	КассыККМ.Магазин КАК Магазин,
	|	КассыККМ.Владелец КАК Организация,
	|	ВЫБОР
	|		КОГДА КассыККМ.ПодключаемоеОборудование.ТипОборудования = &ККТОнлайн
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеобходимостьПроверятьФизЛицо
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	НЕ КассыККМ.ПометкаУдаления
	|	И НЕ КассыККМ.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
	|	И НЕ КассыККМ.ТипКассы = ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ККМOffline)
	|	И КассыККМ.РабочееМесто = &РабочееМестоККМ
	|	И КассыККМ.Магазин = &Магазин
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КассыККМ.Ссылка,
	|	КассыККМ.Магазин,
	|	КассыККМ.Владелец,
	|	ВЫБОР
	|		КОГДА КассыККМ.ПодключаемоеОборудование.ТипОборудования = &ККТОнлайн
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	НЕ КассыККМ.ПометкаУдаления
	|	И НЕ КассыККМ.ТипКассы = ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ККМOffline)
	|	И КассыККМ.ТипКассы = ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.СетевоеОборудование)";
	
	Запрос.УстановитьПараметр("Магазин"        , Магазин);
	Запрос.УстановитьПараметр("РабочееМестоККМ", РабочееМесто);
	Запрос.УстановитьПараметр("ККТОнлайн"      , Перечисления.ТипыПодключаемогоОборудования.ККТ);
	
	Результат = Запрос.Выполнить();
	ТаблицаРезультатаЗапроса = Результат.Выгрузить();
	
	Если ТаблицаРезультатаЗапроса.Количество() = 0  Тогда
		ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибка определения доступных касс ККМ'");
		
		ПараметрыИнформации.ТекстИнформации = НСтр("ru = 'Не смогли определить доступные кассы ККМ.
													|Обратитесь к администратору системы.'");
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НеобходимостьПроверятьФизЛицо", Истина);
	
	СтрокиТаблицы = ТаблицаРезультатаЗапроса.НайтиСтроки(СтруктураПоиска);
	
	Если СтрокиТаблицы.Количество() > 0 Тогда
		Пользователь = глЗначениеПеременной("ПользовательИзмененныхПрав");
		Если Пользователь = Неопределено 
			ИЛИ НЕ ЗначениеЗаполнено(Пользователь) Тогда
			Пользователь = Пользователи.ТекущийПользователь();
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Пользователь.ФизическоеЛицо) Тогда
			ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибка определения кассира'");
			
			ПараметрыИнформации.ТекстИнформации = НСтр("ru = 'Не смогли определить кассира.
														|Администратору необходимо задать пользователю соответствующее физ. лицо.'");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаТаблицаРезультатаЗапросаСкопированная = ТаблицаРезультатаЗапроса.Скопировать();
	ТаблицаТаблицаРезультатаЗапросаСкопированная.Свернуть("КассаККМ");
	ДоступныеКассыККМ.ЗагрузитьЗначения(ТаблицаТаблицаРезультатаЗапросаСкопированная.ВыгрузитьКолонку("КассаККМ"));
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьРегистрацииПродаж(ПараметрыИнформации)
	
	Если ПроверитьОбщуюВозможностьРаботы(ПараметрыИнформации) Тогда
		
		Дата = Дата('00010101');
		РасчетноеВремяЗакрытияКассы = Дата('00010101');
		Для каждого ПроверяемаяКасса Из ДоступныеКассыККМ Цикл
		
			СтруктураСостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(ПроверяемаяКасса.Значение);
			
			КассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена;
			
			ТекстОшибкиЗаголовок = НСтр("ru='Кассовая смена не открыта.'");
			Если НЕ ЗначениеЗаполнено(Дата) Тогда
				Дата = ТекущаяДатаСеанса();
			КонецЕсли;
			
			Если КассоваяСмена = Неопределено Тогда
				ПараметрыИнформации.ЗаголовокИнформации = ТекстОшибкиЗаголовок;
				
				ПараметрыИнформации.ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Касса ККМ №%1 -'") +" " + ТекстОшибкиЗаголовок,
					ПроверяемаяКасса.Значение);
				
				Дата = Дата('00010101');
				
				Возврат Ложь;
			Иначе
				РасчетноеВремяЗакрытияТекущейКассы = КассоваяСмена.НачалоКассовойСмены + 60*60*24;
				
				Если РасчетноеВремяЗакрытияТекущейКассы > Дата Тогда
					Если РасчетноеВремяЗакрытияКассы = Дата('00010101') 
						ИЛИ РасчетноеВремяЗакрытияКассы > РасчетноеВремяЗакрытияТекущейКассы Тогда
							РасчетноеВремяЗакрытияКассы = РасчетноеВремяЗакрытияТекущейКассы;
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ РозничныеПродажиСервер.СменаОткрыта(КассоваяСмена, Дата, ТекстОшибкиЗаголовок) Тогда
					
					ПараметрыИнформации.ЗаголовокИнформации = ТекстОшибкиЗаголовок;
					
					ПараметрыИнформации.ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Касса ККМ №%1 -'") +" " + ТекстОшибкиЗаголовок,
						ПроверяемаяКасса.Значение);
					
					Дата = Дата('00010101');
					
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьРабочееМесто()
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО.
		РабочееМесто = МенеджерОборудованияКлиентПовтИсп.РабочееМестоКлиента();
	КонецЕсли;
	
	ОбновитьЗаголовокФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовокФормы()
	
	Если НЕ ЗначениеЗаполнено(РабочееМесто) Тогда
		Заголовок = НСтр("ru = 'РМК: не указано рабочее место'");
	Иначе
		Заголовок = НСтр("ru = 'РМК:'") + " " + РабочееМесто;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДоступныеМагазины()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Магазины.Ссылка КАК Магазин
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|ГДЕ
	|	НЕ Магазины.ПометкаУдаления
	|	И НЕ Магазины.СкладУправляющейСистемы";
	
	Результат = Запрос.Выполнить();
	ТаблицаЗапроса = Результат.Выгрузить();
	
	Магазины.Загрузить(ТаблицаЗапроса);
	
КонецПроцедуры

// Процедура формирует массив касс с учетом открытия смен.
//
// Параметры:
//  ПроверкаКассСОткрытымиСменами - Булево: 
//                                  Истина - формируется список касс с открытыми сменами
//                                  Ложь   - формируется список касс с закрытыми сменами.
//
&НаСервере
Процедура ЗаполнитьДоступныеКассыСУчетомОткрытия(ПроверкаКассСОткрытымиСменами, ВсеКассы = Ложь)
	
	Кассы.Очистить();
	
	Для каждого ЭлементМассива Из ДоступныеКассыККМ Цикл
		
		ПроверяемаяКасса = ЭлементМассива.Значение;
		
		СтруктураСостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(ПроверяемаяКасса);
		
		Если СтруктураСостояниеКассовойСмены.СменаОткрыта = ПроверкаКассСОткрытымиСменами
			ИЛИ ВсеКассы Тогда
			
			СтрокаКассы = Кассы.Добавить();
			СтрокаКассы.Касса = ПроверяемаяКасса;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВозможностьЗакрытияСмены(КассаККМ, ТекстОшибки)
	
	СтруктураСостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(КассаККМ);
	
	Если НЕ СтруктураСостояниеКассовойСмены.СменаОткрыта Тогда
		
		ТекстОшибки = НСтр("ru='Кассовая смена не открыта.'");
		
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ЗакрытьСмену(КассаККМ)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КассаККМ", КассаККМ);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВопросаЗакрытьСмену", ЭтотОбъект, ДополнительныеПараметры);
	
	//{ds
	Попытка	
		ds_ПараметрыКассыККМ = ЗначениеНастроекВызовСервера.ПараметрыКассыККМ(КассаККМ);
		ds_ДанныеФН = ds_ДанныеФН(ds_ПараметрыКассыККМ.ИдентификаторУстройства);
		
		Если ds_ДанныеФН.КоличествоНеотправленныхДокументов > 0 Тогда
			ds_НеДоступенОФДДней = (НачалоДня(ТекущаяДата()) - НачалоДня(ds_ДанныеФН.ДатаПервогоНеотправленногоДокумента)) / 86400;
		Иначе
			ds_НеДоступенОФДДней = 0;
		КонецЕсли;
		
		Если ds_ДанныеФН.СрокДействияФН <> Дата(1, 1, 1) Тогда		
			ds_ОсталосьДнейФН = (НачалоДня(ds_ДанныеФН.СрокДействияФН) - НачалоДня(ТекущаяДата())) / 86400;
		Иначе
			ds_ОсталосьДнейФН = 999;		
		КонецЕсли;		
		
		ds_ТекстИнформации = "";	
		Если ds_НеДоступенОФДДней > 0 Или ds_ОсталосьДнейФН < 30 Тогда
			Если ds_НеДоступенОФДДней > 0 Тогда
				ds_ТекстИнформации =
					СтрШаблон("Количество неотправленных документов в ОФД: %1.
					|Дата первого непереданного документа: %2.
					|",
					ds_ДанныеФН.КоличествоНеотправленныхДокументов,
					ds_ДанныеФН.ДатаПервогоНеотправленногоДокумента);
			КонецЕсли;		
			
			Если ds_ОсталосьДнейФН < 30 Тогда
				ds_ТекстИнформации = ds_ТекстИнформации + СтрШаблон("Дней до окончания срока действия ФН: %1.", ds_ОсталосьДнейФН);
			КонецЕсли;
			
			ds_ТекстИнформации = ds_ТекстИнформации +
				СтрШаблон("
				|Касса перестанет пробивать чеки через  %1 дня(ей).
				|Обратитесь в техподдержку!",
				Мин(ds_ОсталосьДнейФН, 29 - ds_НеДоступенОФДДней));
		КонецЕсли;		
			
		ОбщегоНазначенияРТКлиент.ВывестиВопросДляРМКУправляемой(НСтр("ru = 'Закрыть смену?'"), ds_ТекстИнформации,,ОбработчикОповещения);
	Исключение
	//}
		ОбщегоНазначенияРТКлиент.ВывестиВопросДляРМКУправляемой(НСтр("ru = 'Закрыть смену?'"),,,ОбработчикОповещения);
	КонецПопытки;;	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьОткрытиеОбработкиЗакрытияКассовойСмены(КассаККМ)
	
	ПараметрыВыемки = РозничныеПродажиКлиентСервер.ПараметрыВыемкиИзКассы();
	ПараметрыВыемки.КассаККМ = КассаККМ;
	
	// Инициализируем параметры.
	ИнициализироватьПараметрыВыемкиИзКассы(ПараметрыВыемки);
	
	Если НЕ ПараметрыВыемки.ЗапрашиватьСуммуВыемки
		ИЛИ ПараметрыВыемки.СуммаОстаток - ПараметрыВыемки.СуммаОстатокАгентские = 0 Тогда
		// Закроем смену без запроса суммы выемки.
		СуммаВыемки = ?(ПараметрыВыемки.ПроизводитьВыемку, ПараметрыВыемки.СуммаОстаток, 0);
		ЗавершитьОткрытиеОбработкиЗакрытияКассовойСмены(ПараметрыВыемки, СуммаВыемки);
	Иначе
		// Откроем форму выемки.
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок",       НСтр("ru = 'Сумма выемки'"));
		ПараметрыФормы.Вставить("Отрицательное",   Ложь);
		ПараметрыФормы.Вставить("ПараметрыВыемки", ПараметрыВыемки);
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВводаСуммыФактическойВыемки", ЭтотОбъект);
		
		ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВводаЧисла", ПараметрыФормы, УникальныйИдентификатор,,,, ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПараметрыВыемкиИзКассы(ПараметрыВыемки)
	 РозничныеПродажиСервер.ИнициализироватьПараметрыВыемкиИзКассы(ПараметрыВыемки);
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОткрытиеОбработкиЗакрытияКассовойСмены(ПараметрыВыемки, СуммаФактическойВыемки)
    
    // &ЗамерПроизводительности
    ОценкаПроизводительностиРТКлиент.НачатьЗамер(
             Истина, "Обработка.ЗакрытиеКассовойСмены.Форма.Форма.Открытие");
             
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДокументыОткрыватьМодально" , Истина);
	ПараметрыФормы.Вставить("ВыводитьСообщенияВРежимеРМК", Истина);
	ПараметрыФормы.Вставить("ПараметрыВыемки",             ПараметрыВыемки);
	ПараметрыФормы.Вставить("СуммаФактическойВыемки"     , СуммаФактическойВыемки);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КассаККМ", ПараметрыВыемки.КассаККМ);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуЗакрытияКассовойСмены", ЭтотОбъект, ДополнительныеПараметры);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Обработка.ЗакрытиеКассовойСмены.Форма.Форма", ПараметрыФормы, ЭтотОбъект,,,, ОбработчикОповещения, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСмену(КассаККМ)
	
	Если ОбщегоНазначенияРТВызовСервера.ФизЛицоПользователяСоСкрытымиПерсональнымиДанными() Тогда
		
		ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ВыводимаяВРМКИнформация();
		ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибка открытия смены'");
		
		ОписаниеОшибки = "У физлица текущего пользователя скрыты персональные данные.";
		ТекстСообщения = НСтр("ru = 'При открытии смены произошла ошибка. Смена не открыта.
			                            |Дополнительное описание:
			                            |%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
		ПараметрыИнформации.ТекстИнформации = ТекстСообщения;
		ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
			
		Возврат;
		
	КонецЕсли;
	
	ПараметрыКассыККМ       = ЗначениеНастроекВызовСервера.ПараметрыКассыККМ(КассаККМ);
	ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
	
	ИспользоватьКассуККМБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КассаККМ", КассаККМ);
	ДополнительныеПараметры.Вставить("Магазин", ПараметрыКассыККМ.Магазин);
	ДополнительныеПараметры.Вставить("Организация", ПараметрыКассыККМ.Организация);
	Если ИспользоватьПодключаемоеОборудование И НЕ ИспользоватьКассуККМБезПодключенияОборудования И ЗначениеЗаполнено(ИдентификаторУстройства) Тогда
		
		ЭтаФорма.Доступность = Ложь;
		
		ПараметрыОперации = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОткрытияЗакрытияСмены();
		ФИОКассира = ОбщегоНазначенияРТВызовСервера.ФИОФизЛицаПользователяСУчетомИзмененныхПрав();
		Если Не ФИОКассира = "" Тогда
			ПараметрыОперации.Кассир = ФИОКассира;
		Иначе
			ПараметрыОперации.Кассир = НСтр("ru='Администратор'");
		КонецЕсли;
		
		Контекст = Новый Структура("КассаККМ", КассаККМ);
		Оповещение = Новый ОписаниеОповещения("ОткрытьСменуЗавершение", ЭтотОбъект, Контекст);
		ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьОткрытиеСменыНаФискальномУстройстве(Оповещение, УникальныйИдентификатор, ИдентификаторУстройства, ПараметрыОперации, ДополнительныеПараметры);
		
	Иначе
		
		ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ВыводимаяВРМКИнформация();
		ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибка открытия смены'");
		
		ОписаниеОшибки = "";
		ТекстПереходящегоОстатка = "";
		
		Результат = ОткрытьКассовуюСменуСервер(КассаККМ, ОписаниеОшибки, ТекстПереходящегоОстатка);
		Если Не Результат Тогда
			ТекстСообщения = НСтр("ru = 'При открытии смены произошла ошибка. Смена не открыта.
			                            |Дополнительное описание:
			                            |%ДополнительноеОписание%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
			ПараметрыИнформации.ТекстИнформации = ТекстСообщения;
			ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
		ИначеЕсли ЗначениеЗаполнено(ТекстПереходящегоОстатка) Тогда
			ЗаголовокИнформации = НСтр("ru = 'Кассовая смена в системе открыта'");
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстПереходящегоОстатка);
		КонецЕсли;
		Оповестить("ИзменениеСостоянияКассовойСмены", КассаККМ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСменуЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтаФорма.Доступность = Истина;
	
	ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ВыводимаяВРМКИнформация();
	ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибка открытия смены'");
	
	Если РезультатВыполнения.Результат Тогда 
		
		ОписаниеОшибки = "";
		ТекстПереходящегоОстатка = "";  
		
		Результат = ОткрытьКассовуюСменуСервер(Параметры.КассаККМ, ОписаниеОшибки, ТекстПереходящегоОстатка);
		Если Не Результат Тогда
			ТекстСообщения = НСтр("ru = 'При открытии смены произошла ошибка.
		                            |Смена не открыта.
		                            |Дополнительное описание:
		                            |%ДополнительноеОписание%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
			ПараметрыИнформации.ТекстИнформации = ТекстСообщения;
			ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
		ИначеЕсли ЗначениеЗаполнено(ТекстПереходящегоОстатка) Тогда
			ЗаголовокИнформации = НСтр("ru = 'Кассовая смена в системе открыта'");
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстПереходящегоОстатка);
		КонецЕсли;
		
		Оповестить("ИзменениеСостоянияКассовойСмены", Параметры.КассаККМ);
	
	Иначе
		ТекстСообщения = НСтр("ru = 'При открытии смены произошла ошибка.
						|%ОписаниеОшибки%
						|Смена не открыта на фискальном устройстве.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		ПараметрыИнформации.ТекстИнформации = ТекстСообщения;
		ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьОтчетБезГашения(КассаККМ)

	Результат = Ложь;
	
	ПараметрыКассыККМ       = ЗначениеНастроекВызовСервера.ПараметрыКассыККМ(КассаККМ);
	ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
	
	ИспользоватьКассуККМБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	
	ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ВыводимаяВРМКИнформация();
	ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибка печати отчета без гашения'");
	
	Если ИспользоватьПодключаемоеОборудование И НЕ ИспользоватьКассуККМБезПодключенияОборудования Тогда
		
		ПараметрыОперации = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыВыполненияОперации();
		ФИОКассира = ОбщегоНазначенияРТВызовСервера.ФИОФизЛицаПользователяСУчетомИзмененныхПрав();
		Если Не ФИОКассира = "" Тогда
			ПараметрыОперации.Кассир = ФИОКассира;
		Иначе
			ПараметрыОперации.Кассир = НСтр("ru='Администратор'");
		КонецЕсли;
		
		ЭтаФорма.Доступность = Ложь;
		Оповещение = Новый ОписаниеОповещения("НапечататьОтчетБезГашенияЗавершение", ЭтотОбъект);
		ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьФормированиеОтчетаБезГашения(Оповещение, УникальныйИдентификатор, ИдентификаторУстройства, ПараметрыОперации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьОтчетБезГашенияЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтаФорма.Доступность = Истина;
	
	Если НЕ РезультатВыполнения.Результат Тогда 
		
		ТекстСообщения = НСтр("ru = 'При снятии отчета на фискальном устройсве произошла ошибка.
						|%ОписаниеОшибки%
						|Отчет на фискальном регистраторе не сформирован.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		
		ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ВыводимаяВРМКИнформация();
		ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибка печати отчета без гашения'");
		ПараметрыИнформации.ТекстИнформации = ТекстСообщения;
		
		ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
	КонецЕсли;
	
КонецПроцедуры

// Процедура осуществляет вывод информации на дисплей покупателя по команде.
//
&НаКлиенте
Процедура ВывестиИнформациюНаДисплейПокупателя()

	Если Не ИспользоватьПодключаемоеОборудование Тогда
		Возврат;
	КонецЕсли;
	
	Строка1 = НСтр("ru = 'КАССА НЕ РАБОТАЕТ'");
	Строка2 = НСтр("ru = 'СЕРВИСНЫЙ РЕЖИМ'");
	
	ПараметрыОперации = ОборудованиеДисплеиПокупателяКлиент.ПараметрыОперацииДисплейПокупателя(Строка1 + Символы.ПС + Строка2);
	
	Описание = Новый ОписаниеОповещения("ВывестиИнформациюНаДисплейПокупателяЗавершение", ЭтотОбъект);
	ОборудованиеДисплеиПокупателяКлиент.НачатьВыводИнформацииНаДисплейПокупателя(Описание, ЭтотОбъект,, ПараметрыОперации);
	
КонецПроцедуры 

&НаКлиенте
Процедура ВывестиИнформациюНаДисплейПокупателяЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ЗаголовокИнформации = НСтр("ru = 'При использовании дисплея покупателя произошла ошибка.'"); 
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, РезультатВыполнения.ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ОткрытьКассовуюСменуСервер(КассаККМ, ОписаниеОшибки, ТекстПереходящегоОстатка)
	
	Возврат РозничныеПродажиСервер.ОткрытьКассовуюСмену(КассаККМ, ОписаниеОшибки, ТекстПереходящегоОстатка);
	
КонецФункции

&НаКлиенте
Процедура ВыборКассыКлиент()
	
	ТекущиеДанные = Элементы.Кассы.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		Если РежимВыбораКассы = "ОткрытьСмену" Тогда
			ОткрытьСмену(ТекущиеДанные.Касса);
		ИначеЕсли РежимВыбораКассы = "ЗакрытьСмену" Тогда
			ЗакрытьСмену(ТекущиеДанные.Касса);
		ИначеЕсли РежимВыбораКассы = "НапечататьОтчетБезГашения" Тогда
			НапечататьОтчетБезГашения(ТекущиеДанные.Касса);
		ИначеЕсли РежимВыбораКассы = "КраткийОтчетЭС" Тогда
			ds_КраткийОтчетЭС(ТекущиеДанные.Касса);
		КонецЕсли;
		
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаКнопок;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборМагазинаКлиент()
	
	ТекущиеДанные = Элементы.Магазины.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		Магазин = ТекущиеДанные.Магазин;
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаКнопок;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗакрытиеКассовойСменыПередВыходомИзРМК(Отказ, ДополнительныеПараметры)
	
	Если ПроверятьЗакрытиеКассовойСменыПередВыходомИзРМК Тогда
		
		ЗаполнитьДоступныеКассыСУчетомОткрытия(Истина);
		Если Кассы.Количество() > 0 Тогда
			Отказ = Истина;
			Если Кассы.Количество() > 1 Тогда
				ЗаголовокИнформации = НСтр("ru = 'Смены не закрыты.'");
			Иначе
				ЗаголовокИнформации = НСтр("ru = 'Смена не закрыта.'");
			КонецЕсли;
			ТекстИнформации = НСтр("ru = 'Хотите выйти из РМК?'");
			
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВопросаЗакрытьРМК", ЭтотОбъект, ДополнительныеПараметры);
			ОбщегоНазначенияРТКлиент.ВывестиВопросДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации, , ОбработчикОповещения);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВозможностьРаботыПриОткрытии()
	ОчиститьСообщения();
	ПолучитьРабочееМесто();
	
	ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ВыводимаяВРМКИнформация();
	Если НЕ ПроверитьОбщуюВозможностьРаботы(ПараметрыИнформации) Тогда
		ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВывестиСообщениеОДоговорахСОшибками(Магазин)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТоварыОрганизацийОстатки.Договор КАК Договор
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций.Остатки(
	|			,
	|			Договор.УчетНДСУКомитента = ЗНАЧЕНИЕ(Перечисление.УчетНДСУКомитента.ПустаяСсылка)
	|				И Договор.ПризнакАгента = ЗНАЧЕНИЕ(Перечисление.ПризнакиАгента.Комиссионер)
	|				И Склад.Магазин = &Магазин) КАК ТоварыОрганизацийОстатки";
	
	Запрос.УстановитьПараметр("Магазин", Магазин);
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой()
	
КонецФункции

&НаСервере
Функция ЕдинственныйПользовательИБ()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Пользователи.Ссылка) КАК Количество
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	НЕ Пользователи.Служебный";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	КоличествоПользователейИБ = Выборка.Количество;
	ДоступностьКомандыЗакрыть = ?(КоличествоПользователейИБ = 1, Истина, Ложь);
	
	Возврат ДоступностьКомандыЗакрыть;
	
КонецФункции

#КонецОбласти

#Область ds

#Область ds_ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ds_ДекорацияСверкаДСНажатие(Элемент)

	ОчиститьСообщения();
	ПолучитьРабочееМесто();
	
	ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ВыводимаяВРМКИнформация();
	Если ПроверитьОбщуюВозможностьРаботы(ПараметрыИнформации) Тогда
		
		Если ДоступныеКассыККМ = Неопределено ИЛИ ДоступныеКассыККМ.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
			
		ЗаполнитьДоступныеКассыСУчетомОткрытия(Истина, Истина);
				
		Если Кассы.Количество() = 0 Тогда
			ЗаголовокИнформации = НСтр("ru = 'Ошибка открытия смены'");
			ТекстИнформации = НСтр("ru = 'Нет касс с закрытыми сменами.'");
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
			
			Возврат;
		КонецЕсли;
		
		Если Кассы.Количество() > 1  Тогда
			Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаВыбораКассы;
			Возврат;
		КонецЕсли;
		
		КассаККМ = Кассы[0].Касса;
		ПараметрыКассыККМ = ЗначениеНастроекВызовСервера.ПараметрыКассыККМ(КассаККМ);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("КассаККМ", КассаККМ);
		ДополнительныеПараметры.Вставить("ИдентификаторУстройства", ПараметрыКассыККМ.ИдентификаторУстройства);
		
		ИмяОбработки = ds_ОбщегоНазначенияВызовСервера.ПодключитьВнешнююОбработку("Сверка денежных средств");
	
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ОткрытьФорму("ВнешняяОбработка." + ИмяОбработки + ".Форма", ДополнительныеПараметры,,,,,, Режим);
	Иначе
		ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ds_ДекорацияКраткийОтчетЭСНажатие(Элемент)
	
	ОчиститьСообщения();
	ПолучитьРабочееМесто();
	
	ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ВыводимаяВРМКИнформация();
	Если ПроверитьОбщуюВозможностьРаботы(ПараметрыИнформации) Тогда
		
		Если ДоступныеКассыККМ = Неопределено ИЛИ ДоступныеКассыККМ.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьДоступныеКассыСУчетомОткрытия(Истина);
		
		Если Кассы.Количество() = 0 Тогда
			
			ЗаголовокИнформации = НСтр("ru = 'Ошибка формирования отчета'");
			ТекстИнформации = НСтр("ru = 'Нет касс с открытыми сменами.'");
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
			
			Возврат;
			
		КонецЕсли;
		
		Если Кассы.Количество() > 1  Тогда
			
			РежимВыбораКассы = "КраткийОтчетЭС";
			Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаВыбораКассы;
			Возврат;
			
		КонецЕсли;
		
		ds_КраткийОтчетЭС(Кассы[0].Касса);
			
	Иначе
		ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ds_СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ds_ДанныеФН(ИдентификаторУстройства)

	Обработка = ds_ОбщегоНазначенияВызовСервера.ВнешняяОбработка("API_KKT");
	
	Возврат Обработка.ДанныеФН(ИдентификаторУстройства);

КонецФункции

#Область КраткийОтчетЭС

&НаКлиенте
Процедура ds_КраткийОтчетЭС(КассаККМ)
	
	ds_ПараметрыКассыККМ = ЗначениеНастроекВызовСервера.ПараметрыКассыККМ(КассаККМ);
	
	ТипыОплатФР = Новый Массив();
	ТипыОплатФР.Добавить(ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта"));
	
	ds_ПродажиФР = ds_ПолучитьПродажиФР(ds_ПараметрыКассыККМ.ИдентификаторУстройства, ТипыОплатФР);
	
	ds_ПараметрыЭТ = ЗначениеНастроекВызовСервера.ПараметрыЭТ(ds_ЭквайринговыйТерминалПоКассеККМ(КассаККМ));
	ds_ПродажиЭТ = ds_ПолучитьПродажиЭТ(ds_ПараметрыЭТ.ИдентификаторУстройства);
		
	ds_ДанныеПродажи1СБезнал = ds_ДанныеПродажи1СБезнал(КассаККМ);
	
	ТекстИнформации = "Сумма продаж (фискальный регистратор): " + Формат(ds_ПродажиФР.СуммаОборот, "ЧЦ=10; ЧДЦ=2; ЧН=0,00") + Символы.ПС + 
					 "Сумма продаж (эквайринговый терминал): " + Формат(ds_ПродажиЭТ.СуммаОборот, "ЧЦ=10; ЧДЦ=2; ЧН=0,00") + Символы.ПС + 
					 "Сумма продаж (1С): " + Формат(ds_ДанныеПродажи1СБезнал, "ЧЦ=10; ЧДЦ=2; ЧН=0,00");
					 
	ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(НСтр("ru = 'Краткий отчет (безналичные оплаты)'"), ТекстИнформации);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ds_ПолучитьПродажиФР(ИдентификаторУстройства, ТипыОплаты)

	Обработка = ds_ОбщегоНазначенияВызовСервера.ВнешняяОбработка("API_KKT");
	
	Возврат Обработка.ПолучитьПродажиФР(ИдентификаторУстройства, ТипыОплаты);

КонецФункции

&НаСервереБезКонтекста
Функция ds_ПолучитьПродажиЭТ(ИдентификаторУстройства)

	Обработка = ds_ОбщегоНазначенияВызовСервера.ВнешняяОбработка("API_KKT");
	
	Возврат Обработка.ПолучитьПродажиЭТ(ИдентификаторУстройства);

КонецФункции

&НаСервереБезКонтекста	
Функция ds_ДанныеПродажи1СБезнал(КассаККМ)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СУММА(ПродажиБезнал.Сумма) КАК СуммаПродажи,
		|	СУММА(ПродажиБезнал.Возврат) КАК СуммаВозврат
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА ЧекККМ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа)
		|				ТОГДА ЧекККМ.СуммаДокумента
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК Сумма,
		|		ВЫБОР
		|			КОГДА ЧекККМ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
		|				ТОГДА ЧекККМ.СуммаДокумента
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК Возврат
		|	ИЗ
		|		Документ.ЧекККМ КАК ЧекККМ
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Оплата КАК ЧекККМОплата
		|			ПО ЧекККМ.Ссылка = ЧекККМОплата.Ссылка
		|	ГДЕ
		|		ЧекККМ.Проведен
		|		И ЧекККМ.КассаККМ = &КассаККМ
		|		И НЕ ЧекККМ.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Архивный)
		|		И НЕ ЧекККМ.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Аннулированный)
		|		И НЕ ЧекККМ.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Отложенный)
		|		И ЧекККМОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта)) КАК ПродажиБезнал";
	
	Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат ВыборкаДетальныеЗаписи.СуммаПродажи - ВыборкаДетальныеЗаписи.СуммаВозврат;
		
КонецФункции

&НаСервереБезКонтекста
Функция ds_ЭквайринговыйТерминалПоКассеККМ(КассаККМ)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЭквайринговыеТерминалы.Ссылка
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|ГДЕ
	|	ЭквайринговыеТерминалы.Касса = &Касса
	|	И (НЕ ЭквайринговыеТерминалы.ПометкаУдаления)
	|	И (НЕ ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования)";
	
	Запрос.УстановитьПараметр("Касса", КассаККМ);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.ЭквайринговыеТерминалы.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти


