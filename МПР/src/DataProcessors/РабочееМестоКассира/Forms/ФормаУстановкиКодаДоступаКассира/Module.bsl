
#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ КассирНазначенПользователю Тогда
		
		ЭтаФорма.Закрыть(КодКассира);
		
		ТекстПоУмолчанию = НСтр("ru = 'Не задан кассир.
			|Пожалуйста, обратитесь к администратору.'");
		ПереопределенныйТекст = ОбщегоНазначенияРМККлиентПереопределяемый.ТекстОповещенияОНеназначенномКассире();
		ТекстПредупреждения = ?(ЗначениеЗаполнено(ПереопределенныйТекст), ПереопределенныйТекст, ТекстПоУмолчанию);
		ПоказатьПредупреждение(,ТекстПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	КассирыРМК = СоответствиеСотрудниковПользователю();
	
	КоличествоСопоставленныхСотрудников = КассирыРМК.Количество();
	
	Если КоличествоСопоставленныхСотрудников >= 1 Тогда
		ПодготовитьФормуГенерацииШтрихкодаДляПользователей(КассирыРМК);
	КонецЕсли;

	КассирНазначенПользователю = КоличествоСопоставленныхСотрудников >= 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправлятьКодПоEmailПриИзменении(Элемент)
	Элементы.ОтправкаEmail.Видимость = ОтправлятьКодПоEmail;
КонецПроцедуры

&НаКлиенте
Процедура КассирОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ДанныеВыбраны = (ВыбранноеЗначение <> Неопределено);
	УстановитьДоступностьЭлементаФормы(Элементы.СгенерироватьКодДоступа, ДанныеВыбраны);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПриступитьКРаботе(Команда)
	ПередатьДанныеОНовомКодеДоступаВФормуРМК();
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьEmail(Команда)
	ОтправитьEmailСНовымКодомДоступа();
КонецПроцедуры

&НаКлиенте
Процедура СгенерироватьКодДоступа(Команда)
	СформироватьНовыйКодДоступаСотрудника();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКодДоступаСотрудника(Команда)
	ВывестиКодДоступаСотрудникаВТабличныйДокумент();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункции_ОтправкаEmail

&НаКлиенте
Процедура ОтправитьEmailСНовымКодомДоступа()
	
	Если ЗначениеЗаполнено(КодКассира) Тогда
		
		АдресЭлектроннойПочтыВалиден =
			ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(Email);
			
		Если АдресЭлектроннойПочтыВалиден Тогда
			
			ОтправкаУспешна = ОтправитьEmailСНовымКодомДоступаНаСервере();
			ТекстОповещения = ?(ОтправкаУспешна,
				НСтр("ru = 'Письмо было успешно отправлено на указанный адрес.'"),
				НСтр("ru = 'Не удалось сформировать email для отправки нового кода доступа.
					|Пожалуйста, обратитесь к администратору.'"));
			
		Иначе
			ТекстОповещения = НСтр("ru = 'Пожалуйста, проверьте корректность адреса получателя кода доступа.'");
		КонецЕсли;
		
		ПоказатьПредупреждение(,ТекстОповещения);
		
	Иначе
		ПоказатьПредупреждение(,НСтр("ru = 'Отсутствует значение кода кассира.
			|Пожалуйста, создайте новое значение и повторите попытку.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОтправитьEmailСНовымКодомДоступаНаСервере()

	ОтправкаУспешна = Ложь;
	
	ТемаПисьма = НСтр("ru = 'Персональный код доступа в интерфейс кассира'");
	ТелоПисьма = СтрШаблон(НСтр("ru = 'Создан персональный код доступа в интерфейс рабочего места кассира.
		|Значение кода: %1'"), КодКассира);
	АдресПолучателя = Email;
	УстановитьПривилегированныйРежим(Истина);
	Результат = ОбщегоНазначенияРМКПереопределяемый.ОтправитьEmail(ТемаПисьма, ТелоПисьма, АдресПолучателя);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ТипЗнч(Результат) = Тип("Булево") Тогда
		ОтправкаУспешна = Результат;
	КонецЕсли;
	
	Возврат ОтправкаУспешна;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ПодготовкаКодаДоступа

&НаКлиенте
Процедура ВывестиКодДоступаСотрудникаВТабличныйДокумент()

	Если ЗначениеЗаполнено(КодКассира) Тогда
		
		Результат = ПодготовитьКодДоступаКассираДляСохранения();
		Результат.Показать();
		
	Иначе
		
		ПоказатьПредупреждение(,
		НСтр("ru = 'Невозможно сохранить несозданный код.
			|Пожалуйста, сформируйте новый код и попробуйте снова.'"));
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ПодготовкаДанныхФормы

&НаКлиенте
Процедура ПередатьДанныеОНовомКодеДоступаВФормуРМК()
	
	ПараметрыОповещения = Новый Структура();
	ПараметрыОповещения.Вставить("НовыйКодДоступа", КодКассира);
	Оповестить("СозданНовыйКодДоступа",ПараметрыОповещения, "ФормаВводаНовогоКодаДоступа");
	Закрыть(ПараметрыОповещения);

КонецПроцедуры

&НаКлиенте
Процедура СформироватьНовыйКодДоступаСотрудника()
	
	НазначитьНовыйКодДоступаКассира();
	
	КодДоступаСформирован = НЕ ПустаяСтрока(КодКассира);
	
	Если НЕ КодДоступаСформирован Тогда
		
		ПоказатьПредупреждение(,
			НСтр("ru = 'Не удалось сформировать новый код доступа для кассира.
			| Пожалуйста, обратитесь за помощью к администратору.'"));
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементаФормы(Элементы.СохранитьКодДоступа, КодДоступаСформирован);
	УстановитьДоступностьЭлементаФормы(Элементы.ОтправлятьКодПоEmail, КодДоступаСформирован);
	УстановитьДоступностьЭлементаФормы(Элементы.ПриступитьКРаботе, КодДоступаСформирован);

КонецПроцедуры

&НаСервере
Функция СоответствиеСотрудниковПользователю()
	
	Результат = Новый Массив();
	
	ТекстЗапроса = ТекстЗапросаСоответствияКассираТекущемуПользователю();
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		Если Результат.Найти(Выборка.Сотрудник) = Неопределено Тогда
			Результат.Добавить(Выборка.Сотрудник);
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПодготовитьФормуГенерацииШтрихкодаДляПользователей(Сотрудники)
	
	КоличествоСотрудников = Сотрудники.Количество();

	Элементы.Кассир.КнопкаСпискаВыбора = (КоличествоСотрудников > 1);
	
	Если КоличествоСотрудников = 1 Тогда
		
		Кассир = Сотрудники[0];
		УстановитьТолькоПросмотрЭлементаФормы(Элементы.Кассир, Истина);
		
	Иначе
		
		Для Каждого Сотрудник Из Сотрудники Цикл
			Элементы.Кассир.СписокВыбора.Добавить(Сотрудник);
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементаФормы(Элементы.СгенерироватьКодДоступа, КоличествоСотрудников = 1);
	ПодготовитьЭлементыОтправкиКодаДоступаНаEmail();
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьЭлементыОтправкиКодаДоступаНаEmail()
	
	ФункциональностьДоступна = ДоступнаОтправкаЭлектроннойПочты();
	УстановитьДоступностьЭлементаФормы(Элементы.ОтправкаEmail, ФункциональностьДоступна);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ВспомогательныеМетоды

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЭлементаФормы(Элемент, Доступность)
	Элемент.Доступность = Доступность;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТолькоПросмотрЭлементаФормы(Элемент, ТолькоПросмотр)
	Элемент.ТолькоПросмотр = ТолькоПросмотр;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Переопределение

&НаСервере
Функция ДоступнаОтправкаЭлектроннойПочты()

	ИмяПодсистемыДляРаботыСЭлектроннойПочтой = "СтандартныеПодсистемы.РаботаСПочтовымиСообщениями";
	ДоступнаОтправкаЭлектроннойПочтыНаОсновеБСП = ОбщегоНазначения.ПодсистемаСуществует(ИмяПодсистемыДляРаботыСЭлектроннойПочтой);
	ДоступнаОтправкаЭлектроннойПочтыБезБиблиотечнойФункциональности =
		ДоступнаОтправкаЭлектроннойПочтыБезБиблиотечнойФункциональности();
	Возврат ДоступнаОтправкаЭлектроннойПочтыНаОсновеБСП
		ИЛИ ДоступнаОтправкаЭлектроннойПочтыБезБиблиотечнойФункциональности;

КонецФункции

&НаСервереБезКонтекста
Функция ДоступнаОтправкаЭлектроннойПочтыБезБиблиотечнойФункциональности()

	ЗначениеПоУмолчанию = Ложь;
	ПереопределенноеЗначение = ОбщегоНазначенияРМКПереопределяемый.
		ДоступнаОтправкаЭлектроннойПочтыБезБиблиотечнойФункциональности();
	Результат = ?((ТипЗнч(ПереопределенноеЗначение) = Тип("Булево")) И ЗначениеПоУмолчанию <> ПереопределенноеЗначение,
		ПереопределенноеЗначение, ЗначениеПоУмолчанию);
	Возврат Результат;

КонецФункции


&НаСервере
Функция ПодготовитьКодДоступаКассираДляСохранения()
	
	Результат = Новый ТабличныйДокумент;
	
	РезультатПоУмолчанию = Новый ТабличныйДокумент;
	РезультатПоУмолчанию.Область("R2C1:R2C15").Текст = КодКассира;

	
	ИмяКассираСтрокой = Строка(Кассир);
	ПереопределенныйРезультат =
		ОбщегоНазначенияРМКПереопределяемый.ПодготовитьКодДоступаПользователяДляСохранения(КодКассира, ИмяКассираСтрокой);

	Результат = ?(ТипЗнч(ПереопределенныйРезультат) = Тип("ТабличныйДокумент"),
		ПереопределенныйРезультат, РезультатПоУмолчанию);
		
	Возврат Результат;
		
КонецФункции


&НаСервере
Процедура НазначитьНовыйКодДоступаКассира()

	УстановитьПривилегированныйРежим(Истина);
	
	КодСотрудникаПоУмолчанию = НовыйКодДоступаКассираПоУмолчанию();
	ПереопределенныйКодСотрудника = ОбщегоНазначенияРМКПереопределяемый.НовыйКодДоступаКассира();
	КодКНазначению =
		?(ЗначениеЗаполнено(ПереопределенныйКодСотрудника), ПереопределенныйКодСотрудника,КодСотрудникаПоУмолчанию);
	КодКассира = КодКНазначению;
	
	//тип владельца - пользователь, кассир - физлицо
	ВладелецКодаДоступа = ?(ТипЗнч(Кассир)= Тип("СправочникСсылка.ФизическиеЛица"),
		Пользователи.ТекущийПользователь(), Кассир);
	ОбщегоНазначенияРМКПереопределяемый.ПереопределитьВладельцаКодаДоступа(ВладелецКодаДоступа);
		
	УстановитьКодДоступаКассиру(ВладелецКодаДоступа, КодКНазначению);
	УстановитьПривилегированныйРежим(Ложь);
		
КонецПроцедуры

&НаСервере
Функция УстановитьКодДоступаКассиру(ВладелецКодаДоступа, НазначаемыйКодДоступа) 

	УстановкаКодаУспешна = Ложь;
	
	ИмяМетаданныхХранящихКодыДоступа = ИмяМетаданныхХранящихКодыДоступаКассиров();
	ИмяРеквизитаХранящегоКодДоступаКассира = ИмяРеквизитаХранящегоКодДоступаКассира();

	ВозможноУстановитьНовыйКодДоступа = КритерийВозможностиУстановкиКодаДоступаВыполнен(ИмяМетаданныхХранящихКодыДоступа,
		ИмяРеквизитаХранящегоКодДоступаКассира);
		
		Если ВозможноУстановитьНовыйКодДоступа Тогда
			
				
			Если СтрНачинаетсяС(ИмяМетаданныхХранящихКодыДоступа, "Справочник") Тогда
				
				КассирОбъект = ВладелецКодаДоступа.ПолучитьОбъект();
				КассирОбъект[ИмяРеквизитаХранящегоКодДоступаКассира] = НазначаемыйКодДоступа;
				Попытка
					
					// АПК:1036-выкл: ответственное чтение не требуется, так как конкурентная работа с данными маловероятна
					КассирОбъект.Записать();
					// АПК:1036-вкл
					
				Исключение
					
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Установка нового кода доступа кассиру.'",
								ОбщегоНазначения.КодОсновногоЯзыка()),
						УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
						
				КонецПопытки;
				
			ИначеЕсли СтрНачинаетсяС(ИмяМетаданныхХранящихКодыДоступа, "Регистр") Тогда
				
				ИмяПодклассаСущности = Сред(ИмяМетаданныхХранящихКодыДоступа, СтрНайти(ИмяМетаданныхХранящихКодыДоступа,".") + 1);
				МенеджерЗаписи = РегистрыСведений[ИмяПодклассаСущности].СоздатьМенеджерЗаписи();
				
				ИмяРеквизитаХранящегоВладельцаКодаДоступа = ИмяРеквизитаХранящегоВладельцаКодаДоступа();
				ВозможноСоздатьЗапись = КритерийВозможностиУстановкиКодаДоступаВыполнен(ИмяМетаданныхХранящихКодыДоступа,
					ИмяРеквизитаХранящегоВладельцаКодаДоступа);
					
					Если ВозможноСоздатьЗапись Тогда
						
						МенеджерЗаписи[ИмяРеквизитаХранящегоВладельцаКодаДоступа] = ВладелецКодаДоступа;
						МенеджерЗаписи[ИмяРеквизитаХранящегоКодДоступаКассира] = НазначаемыйКодДоступа;
						
						Попытка
							МенеджерЗаписи.Записать();
						Исключение
							
							ЗаписьЖурналаРегистрации(НСтр("ru = 'Установка нового кода доступа кассиру.'",
								ОбщегоНазначения.КодОсновногоЯзыка()),
								УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
							
						КонецПопытки;
						
					КонецЕсли;
				
			КонецЕсли;
			
			УстановкаКодаУспешна = Истина;
					
		КонецЕсли;
		
	Возврат УстановкаКодаУспешна;
	
КонецФункции

&НаСервере
Функция КритерийВозможностиУстановкиКодаДоступаВыполнен(ИмяМетаданных, ИмяРеквизита)
	Возврат ОбщегоНазначенияРМК.КритерийВозможностиОбращенияКСвойствуСущностиВыполнен(ИмяМетаданных, ИмяРеквизита);
КонецФункции


&НаСервереБезКонтекста
Функция ИмяМетаданныхХранящихКодыДоступаКассиров()
	Возврат ОбщегоНазначенияРМККлиентСервер.ИмяМетаданныхХранящихКодыДоступаКассиров();
КонецФункции

&НаСервереБезКонтекста
Функция ИмяРеквизитаХранящегоКодДоступаКассира()
	Возврат ОбщегоНазначенияРМККлиентСервер.ИмяРеквизитаХранящегоКодДоступаКассира();
КонецФункции

&НаСервереБезКонтекста
Функция ИмяРеквизитаХранящегоВладельцаКодаДоступа()
	Возврат ОбщегоНазначенияРМККлиентСервер.ИмяРеквизитаХранящегоВладельцаКодаДоступа();
КонецФункции

&НаСервереБезКонтекста
Функция НовыйКодДоступаКассираПоУмолчанию()
	
	СлучайноеЧислоСтрокой = "";
	Генератор = Новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());
	СлучайноеЧисло = Генератор.СлучайноеЧисло(0, 99999);
	
	Если СлучайноеЧисло < 10000 Тогда
		СлучайноеЧислоСтрокой = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Строка(СлучайноеЧисло), 5, "0");
	Иначе
		СлучайноеЧислоСтрокой = Формат(СлучайноеЧисло, "ЧГ=0");
	КонецЕсли;
	
	Возврат СлучайноеЧислоСтрокой;

КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапросаСоответствияКассираТекущемуПользователю()

	ТекстЗапросаПоУмолчанию = "ВЫБРАТЬ
	|	Пользователи.ФизическоеЛицо КАК Сотрудник
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Ссылка = &ТекущийПользователь
	|	И НЕ Пользователи.Недействителен
	|	И НЕ Пользователи.ПометкаУдаления";
	
	ПереопределяемыйТекстЗапроса = ОбщегоНазначенияРМКПереопределяемый.ТекстЗапросаСоответствияКассираТекущемуПользователю();
	Возврат ?(ЗначениеЗаполнено(ПереопределяемыйТекстЗапроса), ПереопределяемыйТекстЗапроса, ТекстЗапросаПоУмолчанию);
	

КонецФункции
	
#КонецОбласти

#КонецОбласти
