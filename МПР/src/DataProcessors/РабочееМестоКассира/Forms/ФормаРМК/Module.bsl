
#Область ОписаниеПеременных

&НаКлиенте
Перем ИдентификаторЗамераПробитияЧека, ИдентификаторЗамераВремениПоиска;

&НаКлиенте
Перем ЭлектронныеВесыЗаняты;

&НаКлиенте
Перем ДанныеКПередачеВДисплейПокупателя;

&НаКлиенте
Перем ВременныйКонтекстПроверкиМарки;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ОбщегоНазначенияРМКПереопределяемый.МожноОткрыватьРМК() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	РабочееМесто = МенеджерОборудованияВызовСервера.РабочееМестоКлиента();
	
	СтрокаШаблон = НСтр("ru = '%1, %2, %3, %4, %5, %6, %7'");
	ПоддерживаемыеТипыПО = СтрШаблон(СтрокаШаблон,
		"СканерШтрихкода",
		"ДисплейПокупателя",
		"ФискальныйРегистратор",
		"ПринтерЧеков",
		"ЭлектронныеВесы",
		"СчитывательМагнитныхКарт");
	ПоддерживаемыеТипыПодключаемогоОборудования = ПоддерживаемыеТипыПО;
	ОбщегоНазначенияРМК.НастроитьПодключаемоеОборудование(ЭтотОбъект, "");
	ПродажиРМК.ЗаполнитьТаблицуОборудование(ЭтотОбъект, ПоддерживаемыеТипыПО);
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьДанныеДляРМК(ЭтотОбъект);
	
	ЗаполнитьТекущуюНастройкуРМК();
	ПроверитьВозможностьРаботы();
	ЗаполнитьПараметрыРучногоПодбораТоваров();
	НастроитьФормуПоТекущемуПользователю();
	
	НастроитьГорячиеКлавиши();
	НастроитьВидОтображения();
	ЗаполнитьДанныеСервисаЛояльности();
	ЗаполнитьПанельИзбранныхТоваров();
	ОбновитьКалендарныеОграниченияПродаж();
	ЗаполнитьКэшДействующихЗапретовПродаж();
	
	Если ИспользоватьОплатуПлатежнымиКартами Тогда
		ОбщегоНазначенияРМКПереопределяемый.НастроитьОплатуПлатежнымиКартами(ЭтотОбъект);
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если НЕ Объект.Товары.Количество() = 0 Тогда
		
		Отказ = Истина;
		ТекстПредупреждения =
			НСтр("ru = 'Перед закрытием программы необходимо пробить, отложить или удалить текущий чек.'");
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ЗначениеЗаполнено(РабочееМесто) Тогда
		ОбщегоНазначенияРМККлиентПереопределяемый.ЗаполнитьРабочееМесто(ЭтотОбъект);
	КонецЕсли;
	
	Если НЕ ПараметрыОткрытияФормы = Неопределено Тогда
		
		Если ЕстьСвойство(ПараметрыОткрытияФормы, "ТекстСообщения")
			И ЕстьСвойство(ПараметрыОткрытияФормы, "ТекстЗаголовка") Тогда
			
			Оповещение = Новый ОписаниеОповещения("ЗакрытьПриложениеПриОшибке", ЭтотОбъект);
			ПоказатьПредупреждение(Оповещение, ПараметрыОткрытияФормы.ТекстСообщения,,
				ПараметрыОткрытияФормы.ТекстЗаголовка);
			Отказ = Истина;
			
		ИначеЕсли ЕстьСвойство(ПараметрыОткрытияФормы, "ПроверитьКассовуюСмену") Тогда
			ПроверитьКассовуюСменуИНайтиКассира();
		Иначе
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		
		Для Каждого СтрокаТЧ Из Оборудование Цикл
			
			ОповещениеПодключенияОборудования = Новый ОписаниеОповещения(
				"ЗавершитьПодключениеОборудованияПоИдентификатору",
				ЭтотОбъект,
				СтрокаТЧ);
			
			МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПоИдентификатору(ОповещениеПодключенияОборудования,
				УникальныйИдентификатор,
				СтрокаТЧ.Ссылка);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ИнициализироватьФормуРабочегоМестаКассира", 1, Истина);
	ОпределитьИспользованиеАвтоматическихСкидок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеСостоянияКассовойСмены" Тогда
		ИзменитьСостояниеКассовойСмены();
	КонецЕсли;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПодтверждениеВозраста
		ИЛИ ВыбранБанковскийПлатеж
		ИЛИ ПриемАванса
		ИЛИ ЗначениеЗаполнено(ВременныйКонтекстПроверкиМарки)
		ИЛИ ПробитыеЧеки.Количество() > 0 Тогда
			Возврат;
	КонецЕсли;
	
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		
		ТипОборудованияСчитывательМагнитныхКарт = ОбщегоНазначенияКлиент.
			ПредопределенныйЭлемент("Перечисление.ТипыПодключаемогоОборудования.СчитывательМагнитныхКарт");
		
		Если ИмяСобытия = "ScanData" Тогда
			Если Параметр[1] = Неопределено Тогда
				Штрихкод = Параметр[0];
			Иначе
				Штрихкод = Параметр[1][1];
			КонецЕсли;
			
			ВыполнитьПоискШтрихкода(Штрихкод);
			
		ИначеЕсли ИмяСобытия = "TracksData" И ПодключеноОборудование(ТипОборудованияСчитывательМагнитныхКарт) Тогда
			ВыполнитьПоискМагнитнойКарты(Параметр[0]);
		Иначе
			Возврат;
		КонецЕсли;
		
	ИначеЕсли Источник = "ФормаТарированияВесов" И ИмяСобытия = "ТарированиеВесов" Тогда
		
		Если ЕстьСвойство(Параметр, "ВесТары") Тогда
			ВесТары = Параметр.ВесТары;
		КонецЕсли;
		
		Если ЕстьСвойство(Параметр, "ЭлектронныеВесыЗаняты") Тогда
			ЭлектронныеВесыЗаняты = Параметр.ЭлектронныеВесыЗаняты;
		КонецЕсли;
		
	ИначеЕсли Источник = "ФормаВводаНовогоКодаДоступа" И ИмяСобытия = "СозданНовыйКодДоступа" Тогда
		
		Если ЕстьСвойство(Параметр, "НовыйКодДоступа")
			И ЗначениеЗаполнено(Параметр.НовыйКодДоступа) Тогда
			
			КодКассира = Параметр.НовыйКодДоступа;
			Войти(Неопределено);
			
		КонецЕсли;
	Иначе
		
		ОбработатьОповещениеНаСервере = Ложь;
		ОбщегоНазначенияРМККлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник,
			ОбработатьОповещениеНаСервере);
		
		Если ОбработатьОповещениеНаСервере Тогда
			ОбработкаОповещенияНаСервере(ИмяСобытия, Параметр, Источник);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	
	Для Каждого Строка Из ТаблицаКассККМОрганизаций Цикл
		
		ПодключаемоеОборудование = Строка.ИдентификаторУстройства;
		МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПоИдентификатору(Неопределено,
			УникальныйИдентификатор,ПодключаемоеОборудование);
	
	КонецЦикла;

	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);

	ВывестиИнформациюНаДисплейПокупателя("Сервис");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	МассивДанных = Новый Массив;
	ОбщегоНазначенияРМККлиентПереопределяемый.ДозаполнитьДанныеРучногоВыбора(ВыбранноеЗначение,
		МассивДанных, ЭтотОбъект);
	
	Для Каждого СтрокаМассива Из МассивДанных Цикл
		СписокТоваровВыборКлиент(СтрокаМассива);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ОбщегоНазначенияРМККлиентПереопределяемый.ИспользоватьВнешнееСобытие() И ВводДоступен() Тогда
		
		Если Событие = "Штрихкод" Или Событие = "ПолученШтрихкод" Или Событие = "ScanData" Тогда
			ВыполнитьПоискШтрихкода(Данные);
		ИначеЕсли Событие = "TracksData" Или Событие = "ДанныеКарты" Тогда
			ВыполнитьПоискМагнитнойКарты(Данные);
		Иначе
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияЗакрытьФормуПлатежныеСистемыНажатие(Элемент)
	
	Если ИнтеграцияСПлатежнымиСистемамиРМККлиентСервер.ТекущаяСтраница(Элементы.ГруппаПодтверждениеОплаты)
		ИЛИ ИнтеграцияСПлатежнымиСистемамиРМККлиентСервер.ТекущаяСтраница(Элементы.ГруппаВопросПредупреждение) Тогда
		
		ИнтеграцияСПлатежнымиСистемамиРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.ГруппаПанельДействий);
		
		Если ПлатежнаяСистема_НоваяЗаявка.ОпределитьСтатусВозвратаПозже Тогда
			ОпределитьСтатусВозврата();
		КонецЕсли;
		
		Если ПлатежнаяСистема_НоваяЗаявка.ОпределитьСтатусОплатыПозже Тогда
			ОпределитьСтатусОплаты();
		КонецЕсли;
		
	ИначеЕсли ИнтеграцияСПлатежнымиСистемамиРМККлиентСервер.ТекущаяСтраница(Элементы.ГруппаПанельДействий) Тогда
		
		ОтменаДействия = Ложь;
		
		ИнтеграцияСПлатежнымиСистемамиРМККлиент.ОбработкаПрерыванияОперацииПлатежнойСистемы(ЭтотОбъект, ОтменаДействия);
		
		Если НЕ ОтменаДействия Тогда
			СанкционироватьЗакрытиеОперацииПлатежнойСистемой();
		КонецЕсли;
		
	Иначе
		СанкционироватьЗакрытиеОперацииПлатежнойСистемой();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторОплатыПриИзменении(Элемент)
	
	ПриИзмененииИдентификатораОплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура КодДляПодтвержденияОплатыПриИзменении(Элемент)
	
	ЗавершитьОплатуПринудительно();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоБНПриИзменении(Элемент)
	ЗачестьОплатуКартой();
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоНалПриИзменении(Элемент)
	ЗачестьОплатуНаличными();
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоВРассрочкуПриИзменении(Элемент)
	ЗачестьОплатуВРассрочку();
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоЗачетАвансаПриИзменении(Элемент)
	
	ПроверитьПревышениеСуммыЗачетаАванса();
	ЗачестьОплатуЗачетАванса();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийТоварЦенаИзКарточкиПриИзменении(Элемент)
	
	Если ПримененыСкидки() Тогда
		ЗадатьВопросПоРасчетуСкидок("ЦенаИзКарточкиПриИзмененииЗавершение");
	Иначе
		ЦенаИзКарточкиПриИзмененииЗавершение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗакрытьФормуДанныеПокупателяНажатие(Элемент)
	ЗакрытьФормуДанныеПокупателя();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСозданиеКартыКартинкаНажатие(Элемент)
	ПереключитьНаСтраницуСозданиеКарты();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСозданиеКартыТекстНажатие(Элемент)
	ПереключитьНаСтраницуСозданиеКарты();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПоискКартыКартинкаНажатие(Элемент)
	ПереключитьНаСтраницуПоискКарты();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПоискКартыТекстНажатие(Элемент)
	ПереключитьНаСтраницуПоискКарты();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтправкаЧекаКартинкаНажатие(Элемент)
	ПереключитьНаСтраницуОтправкаЧека();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтправкаЧекаТекстНажатие(Элемент)
	ПереключитьНаСтраницуОтправкаЧека();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУдалитьСертификатНажатие(Элемент)
	
	ТекущийНомерСертификата = СтрЗаменить(Элемент.Имя, "ДекорацияУдалитьСертификат_", "");
	
	Если ЗначениеЗаполнено(ТекущийНомерСертификата) Тогда 
		
		НомерСертификата = ТекущийНомерСертификата;
		УдалитьПодарочныйСертификат(ТекущийНомерСертификата, Истина);
		ОчиститьДанныеПодарочногоСертификата(Истина);
		ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
		ПараметрыПересчета.ПоКомандеОтменитьОплатуСертификатом = (ТаблицаПодарочныхСертификатов.Количество() = 0);
		ПараметрыПересчета.ПриИзмененииСуммыОплатыСертификатом = Истина;
		РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
		
	КонецЕсли;
	
	НастроитьВидимостьОплатыПодарочнымиСертификатами(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправкаЧекаПочтаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) И ЗначениеЗаполнено(ОтправкаЧекаТелефон) Тогда
		ОтправкаЧекаТелефон = НСтр("ru = ''");
	КонецЕсли;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ОтправкаЧекаТелефон, НЕ ЗначениеЗаполнено(Текст));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправкаЧекаТелефонИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) И ЗначениеЗаполнено(ОтправкаЧекаПочта) Тогда
		ОтправкаЧекаПочта = НСтр("ru = ''");
	КонецЕсли;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ОтправкаЧекаПочта, НЕ ЗначениеЗаполнено(Текст));
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийТоварКоличествоПриИзменении(Элемент)
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока.Количество = ТекущийТоварКоличество;
	ТекущаяСтрока.КоличествоУпаковок = ТекущийТоварКоличество;
	СкорректироватьТекущееКоличество(ТекущаяСтрока);
	
	ПересчитатьСуммы(ТекущаяСтрока);
	ОбновитьИнформациюНаДисплееПокупателя("ИзменениеКоличества");
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоБонусамиПриИзменении(Элемент)
	
	Если СуммаОплаченоБонусами > Элементы.СуммаОплаченоБонусами.МаксимальноеЗначение Тогда
		СуммаОплаченоБонусами = 0;
	КонецЕсли;
	
	Если Объект.Товары.Итог("СуммаСкидкиОплатыБонусом") > 0 Тогда
		
		НоваяСуммаОплатыБонусами		= СуммаОплаченоБонусами;
		ОчиститьДанныеКартыПокупателя	= Ложь;
		ОтменитьПримененныеБонусы(ОчиститьДанныеКартыПокупателя);
		СуммаОплаченоБонусами = НоваяСуммаОплатыБонусами;
		
	КонецЕсли;
	
	ОбнулятьСуммыОплат = Ложь;
	
	СуммаБонусов = СуммаОплаченоБонусами;
	РаспределитьБонусыПоТоварам();
	ПересчитатьИтогиТабличнойЧастиТовары(ОбнулятьСуммыОплат);
	
	Если СуммаОплаченоБН > 0 ИЛИ СуммаОплаченоНал > 0
		ИЛИ СуммаОплаченоВРассрочку > 0 ИЛИ СуммаОплаченоЗачетАванса > 0 Тогда
		
			ЭтоВозврат = ОбщегоНазначенияРМККлиентПереопределяемый.ВидОперацииВозвратПродажи(Объект.ВидОперации);
			
			ПараметрыПересчета							= СтруктураПараметровПересчетаСуммОплаты();
			ПараметрыПересчета.ПриИзмененииБНОплаты		= СуммаОплаченоБН > 0;
			ПараметрыПересчета.ПересчитыватьОкругление	= НЕ ЭтоВозврат;
			ПараметрыПересчета.ПоКомандеОплатитьВсюСуммуБонусами = СуммаОплаченоБонусами > 0
				И (СуммаБонусов = СуммаОплаченоБонусами) И СуммаКОплате = 0;
			
			РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПереключательПриИзменении(Элемент)
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
	
	ОбщегоНазначенияРМККлиентСервер.РассчитатьСуммуНДС(Объект, ТекущаяСтрока);
	ОбщегоНазначенияРМККлиентСервер.СуммаДокумента(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура СистемаНалогообложенияЧекаКоррекцииПриИзменении(Элемент)
	
	ЭтоОбщаяСНО = СистемаНалогообложенияЧекаКоррекции =
		ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ТипыСистемНалогообложенияККТ.ОСН");
	УстановитьВидимостьЭлементаФормы(Элементы.ТоварыСтавкаНДС, ЭтоОбщаяСНО);
	УстановитьВидимостьЭлементаФормы(Элементы.ТоварыСтавкаНДСПереключатель, ЭтоОбщаяСНО);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплатаСертификатамиПриИзменении(Элемент)
	
	ТекущийНомерСертификата = СтрЗаменить(Элемент.Имя, "СуммаСертификата_", "");
	
	Если ЗначениеЗаполнено(ТекущийНомерСертификата) Тогда
		
		Отбор = Новый Структура();
		Отбор.Вставить("НомерСертификата", ТекущийНомерСертификата);
		СтрокиТаблицы = ТаблицаПодарочныхСертификатов.НайтиСтроки(Отбор);
		
		Для каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
			СтрокаТаблицы.СуммаСертификата = ЭтаФорма[Элемент.Имя];
		КонецЦикла;
		
	КонецЕсли;
	
	ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
	ПараметрыПересчета.ПриИзмененииСуммыОплатыСертификатом = Истина;
	РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
	
КонецПроцедуры

&НаКлиенте
Процедура КассаККМДляОперацииПриИзменении(Элемент)
	ПриПереключенииКассыККМ();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУдалитьНаличныеНажатие(Элемент)
	ОплатаНаличнымиНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУдалитьБННажатие(Элемент)
	ОплатаКартойНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУдалитьБонусыНажатие(Элемент)
	ОтменитьОплатуБонусами();
КонецПроцедуры

&НаКлиенте
Процедура ТекущийТоварКоличествоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТекущийТоварСкидкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТекущийТоварЦенаИзКарточкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеСкидкиНаЧекНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоБонусамиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоНалНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоБННачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоВРассрочкуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоЗачетАвансаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплатаСертификатамиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СуммаВыемкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СуммаВнесениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоБонусамиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
	СтандартнаяОбработка)
		УстановитьФокусНаЭлементеФормыПриВводеОплаты(Текст, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоНалОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
	СтандартнаяОбработка)
		УстановитьФокусНаЭлементеФормыПриВводеОплаты(Текст, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоБНОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
	СтандартнаяОбработка)
		УстановитьФокусНаЭлементеФормыПриВводеОплаты(Текст, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоВРассрочкуОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
	СтандартнаяОбработка)
		УстановитьФокусНаЭлементеФормыПриВводеОплаты(Текст, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоЗачетАвансаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
	СтандартнаяОбработка)
		УстановитьФокусНаЭлементеФормыПриВводеОплаты(Текст, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоБезналПриИзменении(Элемент)
	ЗачестьОплатуБезналом();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУдалитьЗачетАвансаНажатие(Элемент)
	ЗачетАвансаНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУдалитьБезналНажатие(Элемент)
	БезналНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУдалитьКЗаменеНажатие(Элемент)
	
	СформироватьЗаголовок(НСтр("ru='Возврат'"));
	
	СуммаТоваровКЗамене = 0;
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСуммаТоваровКЗамене, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаQRCode, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.ОтложитьЧек, Истина);
	
	НастроитьВидимостьОплатыQRКодом(Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСертификатом, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.РассчитатьСкидки, ИспользоватьАвтоматическиеСкидки);
	УстановитьВидимостьЭлементаФормы(Элементы.ОтменаРасчетаСкидок, ИспользоватьАвтоматическиеСкидки);
	УстановитьВидимостьЭлементаФормы(Элементы.ОплатаСертификатомНСПК, ИспользоватьОплатуСертификатамиНСПК);
	
	Результат = Новый Структура;
	Результат.Вставить("ЧекККМ", ЧекККМПродажа);
	ДополнительныеПараметры = Неопределено;
	ВыборЧекаЗавершение(Результат, ДополнительныеПараметры);
	
	ЭтоЗаменаТоваров = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока.ТоварКЗамене Тогда
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаРедактированияСтрокиКорзины, Ложь);
	Иначе
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаРедактированияСтрокиКорзины, Истина);
	КонецЕсли;
	
	НастроитьПредставлениеТовара(ТекущаяСтрока);
	НастроитьТекущуюЦену(ТекущаяСтрока);
	НастроитьТекущееКоличество(ТекущаяСтрока);
	НастроитьПодсказкуДляВыбораСерийИПартий(ТекущаяСтрока);
	ТекущийТоварИдентификатор = ТекущаяСтрока.ПолучитьИдентификатор();
	ТекущийТоварСуммаСкидки = ТекущаяСтрока.СуммаСкидкиНаценки;
	
	Если ТекущаяСтрока.ОтображаетсяСкидкаСуммой Тогда
		
		Элементы.СкидкаТекущийТоварСумма.ЦветФона = Новый Цвет(224, 224, 224);
		Элементы.СкидкаТекущийТоварПроцент.ЦветФона = Новый Цвет;
		ЗначениеСкидкиНаПозицию = СуммаРучнойСкидкиНаПозицию(ТекущаяСтрока);
		ТекущийТоварСкидка = ЗначениеСкидкиНаПозицию;
		УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварСкидка, Ложь);
		
	ИначеЕсли ТекущаяСтрока.ОтображаетсяСкидкаПроцентом Тогда
		
		Элементы.СкидкаТекущийТоварПроцент.ЦветФона = Новый Цвет(224, 224, 224);
		Элементы.СкидкаТекущийТоварСумма.ЦветФона = Новый Цвет;
		ТекущийТоварСкидка = ТекущаяСтрока.ПроцентСкидкиНаценки;
		УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварСкидка, Ложь);
		
	Иначе
		
		ТекущийТоварСкидка = 0;
		Элементы.СкидкаТекущийТоварПроцент.ЦветФона = Новый Цвет;
		Элементы.СкидкаТекущийТоварСумма.ЦветФона = Новый Цвет;
		УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварСкидка, Истина);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущаяОперация) И ДанныеДляРучногоСопоставления = Неопределено Тогда
		
		ЭтоМаркируемыйТоварВЧекеКоррекции = ЭтоЧекКоррекции И ТекущаяСтрока.НеобходимостьВводаКодаМаркировки;
		
		ЭтоПроверкаМарки = ЗначениеЗаполнено(ВременныйКонтекстПроверкиМарки);
		УстановитьДоступностьЭлементаФормы(Элементы.УдалитьТовар,
			НЕ (ЭтоМаркируемыйТоварВЧекеКоррекции ИЛИ ЭтоПроверкаМарки));
		
		Если ТекущаяСтрока.НеобходимостьВводаКодаМаркировки 
			И НЕ ЗначениеЗаполнено(ТекущаяСтрока.КодМаркировки) Тогда
			
			Если НЕ Элементы.СтраницыСтаканПраво.ТекущаяСтраница = Элементы.СтраницаНеверноОтсканированныйШтрихкод
				И НЕ Элементы.СтраницыСтаканПраво.ТекущаяСтраница = Элементы.СтраницаИнфоОшибка Тогда
				
					ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОтсканироватьМарку);
					СформироватьТекстВводМарки();
					ОграничитьДоступностьЭлементовПриОжиданииМарки(Истина);
			
			ИначеЕсли Элементы.СтраницыСтаканПраво.ТекущаяСтраница = Элементы.СтраницаИнфоОшибка Тогда
			
				ТекущийЭлемент = Элементы.ЗакрытьСтраницуИнфоОшибка;
				Возврат;
				
			КонецЕсли;
			
		ИначеЕсли НЕ Элементы.СтраницыСтаканПраво.ТекущаяСтраница = Элементы.СтраницаИнфоОшибка
			И НЕ Элементы.СтраницыСтаканПраво.ТекущаяСтраница = Элементы.СтраницаОтменаОплатыПоКарте
			И НЕ Элементы.СтраницыСтаканПраво.ТекущаяСтраница = Элементы.СтраницаСторноЭквайринг
			И НЕ Элементы.СтраницыСтаканПраво.ТекущаяСтраница = Элементы.СтраницаСерииИПартии
			И НЕ Элементы.СтраницыСтаканПраво.ТекущаяСтраница = Элементы.СтраницаВыборЭквайринговогоТерминала
			И НЕ ЗначениеЗаполнено(ВременныйКонтекстПроверкиМарки) Тогда
				ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОплата);
		КонецЕсли;
			
	КонецЕсли;
	
	НастроитьДоступностьКомандИзмененияКоличества(ТекущаяСтрока);
	НастроитьКомандуУказатьСерии(ТекущаяСтрока);
	НастроитьСтраницыВыбораПродавца(ТекущаяСтрока);
	
	ДобавленВесовойНеФасованныйТовар = ТекущаяСтрока.Весовой И НЕ ТекущаяСтрока.Фасованный;
	УстановитьДоступностьЭлементаФормы(Элементы.ПолучитьВес, ДобавленВесовойНеФасованныйТовар);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокТоваровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанныеСпискаТоваров = Элементы.СписокТоваров.ТекущиеДанные;
	
	Если ТекущиеДанныеСпискаТоваров = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	СписокТоваровВыборКлиент(ТекущиеДанныеСпискаТоваров);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область КомандыОплаты

&НаКлиенте
Процедура ОплатаКартой(Команда)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "ТаблицаПлатежныхКарт") Тогда
		
		СписокВидовПлатежныхКарт = Новый СписокЗначений;
		
		Если ЭтотОбъект.ТаблицаПлатежныхКарт.Количество() > 1 И НЕ Элементы.ГруппаОплатаКартой.Видимость Тогда
			
			Итератор = 0;
			
			Для Каждого СтрокаТаблицыТерминалов Из ЭтотОбъект.ТаблицаПлатежныхКарт Цикл
				
				НазваниеКоманды = СтрШаблон("ОплатаКартой_%1", Итератор);
				СписокВидовПлатежныхКарт.Добавить(НазваниеКоманды, СтрокаТаблицыТерминалов.ВидОплаты);
				Итератор = Итератор + 1;
				
			КонецЦикла;
			
			Оповещение = Новый ОписаниеОповещения("ПослеВыбораВидаПлатежнойКарты", ЭтотОбъект);
			ПоказатьВыборИзМеню(Оповещение, СписокВидовПлатежныхКарт, Элементы.ОплатаКартой);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = Новый Структура("Значение", Команда.Имя);
	ПослеВыбораВидаПлатежнойКарты(Результат, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаНаличными(Команда)
	
	Если ИспользоватьАвтоматическиеСкидки И Не СкидкиРассчитаны И ВопросПоРасчетуСкидок Тогда
		ЗадатьВопросПоРасчетуСкидок("ОплатаНаличнымиЗавершение",, Истина);
	Иначе
		ОплатаНаличнымиЗавершение(?(ВопросПоРасчетуСкидок Или СкидкиРассчитаны, КодВозвратаДиалога.Нет, КодВозвратаДиалога.Да));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаВРассрочку(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент)
		И ОбщегоНазначенияРМККлиентПереопределяемый.ЗапрещенаПредоплатаБезКонтрагента() Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Для оплаты в рассрочку необходимо указать контрагента'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
		НастроитьЭлементыФормы(Элементы.СтраницаОбщая, Ложь);
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПравоДанныеПокупателя);
		ТекущийЭлемент = Элементы.СтрокаПоискаКарты;
		Возврат;
		
	КонецЕсли;
	
	Если ИспользоватьАвтоматическиеСкидки И Не СкидкиРассчитаны И ВопросПоРасчетуСкидок Тогда 
		ЗадатьВопросПоРасчетуСкидок("ОплатаВРассрочкуЗавершение",, Истина);
	Иначе
		ОплатаВРассрочкуЗавершение(?(ВопросПоРасчетуСкидок Или СкидкиРассчитаны, КодВозвратаДиалога.Нет, КодВозвратаДиалога.Да));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Предоплата(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент)
		И ОбщегоНазначенияРМККлиентПереопределяемый.ЗапрещенаПредоплатаБезКонтрагента() Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Для предоплаты необходимо указать контрагента'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
		НастроитьЭлементыФормы(Элементы.СтраницаОбщая, Ложь);
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПравоДанныеПокупателя);
		ТекущийЭлемент = Элементы.СтрокаПоискаКарты;
		Возврат;
		
	КонецЕсли;
	
	Если ИспользоватьАвтоматическиеСкидки И Не СкидкиРассчитаны И ВопросПоРасчетуСкидок Тогда 
		ЗадатьВопросПоРасчетуСкидок("ПредоплатаЗавершение",, Истина);	
	Иначе 
		ПредоплатаЗавершение(?(ВопросПоРасчетуСкидок Или СкидкиРассчитаны, КодВозвратаДиалога.Нет, КодВозвратаДиалога.Да));
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОплатаСертификатомНСПК(Команда)
	
	Если ИспользоватьАвтоматическиеСкидки И Не СкидкиРассчитаны И ВопросПоРасчетуСкидок Тогда
		ЗадатьВопросПоРасчетуСкидок("ОплатаСертификатомНСПКЗавершение",, Истина);
	Иначе
		ОплатаСертификатомНСПКЗавершение(?(ВопросПоРасчетуСкидок Или СкидкиРассчитаны, КодВозвратаДиалога.Нет, КодВозвратаДиалога.Да));
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗачетАванса(Команда)
	
	Если ИспользоватьАвтоматическиеСкидки И Не СкидкиРассчитаны И ВопросПоРасчетуСкидок Тогда
		ЗадатьВопросПоРасчетуСкидок("ЗачетАвансаЗавершение",, Истина);
	Иначе
		ЗачетАвансаЗавершение(?(ВопросПоРасчетуСкидок Или СкидкиРассчитаны, КодВозвратаДиалога.Нет, КодВозвратаДиалога.Да));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Безнал(Команда)
	
	Если ИспользоватьАвтоматическиеСкидки И Не СкидкиРассчитаны И ВопросПоРасчетуСкидок Тогда
		ЗадатьВопросПоРасчетуСкидок("БезналЗавершение",, Истина);
	Иначе
		БезналЗавершение(?(ВопросПоРасчетуСкидок Или СкидкиРассчитаны, КодВозвратаДиалога.Нет, КодВозвратаДиалога.Да));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменаТоваров(Команда)
	
	МаркированныйТовар = Объект.Товары.НайтиСтроки(Новый Структура("НеобходимостьВводаКодаМаркировки", Истина));
	
	Если МаркированныйТовар.Количество() > 0 Тогда
		
		ЗаголовокОшибки = НСтр("ru = 'Замена товара.'");
		ТекстОшибки = НСтр("ru = 'Замена маркированного товара не поддерживается.'");
		ОткрытьСтраницуИнфоОшибка(ЗаголовокОшибки, ТекстОшибки);
		Возврат;
		
	КонецЕсли;
	
	Объект.Оплата.Очистить();
	
	НастроитьЭлементыВРежимеЗаменаТоваров();
	
	ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
	ПараметрыПересчета.ПоКомандеЗаменаТоваров = Истина;
	РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура КомандаОплатаQRКодом(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Имя", Команда.Имя);
	
	Если ИспользоватьАвтоматическиеСкидки И Не СкидкиРассчитаны И ВопросПоРасчетуСкидок Тогда
		ЗадатьВопросПоРасчетуСкидок("ОплатаQRКодомЗавершение", ДополнительныеПараметры, Истина);
	Иначе
		ОплатаQRКодомЗавершение(?(ВопросПоРасчетуСкидок Или СкидкиРассчитаны, КодВозвратаДиалога.Нет, КодВозвратаДиалога.Да), ДополнительныеПараметры);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаЗавершитьОплатуПлатежнойСистемой(Команда)
	
	ЗавершитьЭтапОплатыПлатежнойСистемой();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИнструкция(Команда)
	
	Если ИнтеграцияСПлатежнымиСистемамиРМККлиентСервер.ТекущаяСтраница(Элементы.ГруппаQRКод) Тогда
		
		ИнтеграцияСПлатежнымиСистемамиРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.ГруппаИнструкция);
		Элементы.ФормаОтложить.Заголовок    = НСтр("ru = 'QR код'");
		
	Иначе
		
		ИнтеграцияСПлатежнымиСистемамиРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.ГруппаQRКод);
		Элементы.ФормаОтложить.Заголовок    = НСтр("ru = 'Инструкция'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтменитьОплату(Команда)
	
	Если ИнтеграцияСПлатежнымиСистемамиРМККлиентСервер.ТекущаяСтраница(Элементы.ГруппаОшибка) Тогда
		
		СанкционироватьЗакрытиеОперацииПлатежнойСистемой();
		
	Иначе
		
		Отказ = Ложь;
		ОповещениеЗавершитьОплату = Новый ОписаниеОповещения("ЗавершитьОплатуВозвратПлатежнойСистемой", ЭтотОбъект);
		
		ИнтеграцияСПлатежнымиСистемамиРМККлиент.ОтменитьОперацию(ЭтотОбъект, ОповещениеЗавершитьОплату, Отказ);
		
		Если Не Отказ Тогда
			СанкционироватьЗакрытиеОперацииПлатежнойСистемой();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтложить(Команда)
	
	Если ИнтеграцияСПлатежнымиСистемамиРМККлиентСервер.ТекущаяСтраница(Элементы.ГруппаQRКод)
		ИЛИ ИнтеграцияСПлатежнымиСистемамиРМККлиентСервер.ТекущаяСтраница(Элементы.ГруппаИнструкция) Тогда
			КомандаИнструкция(Команда);
	Иначе
		
		Объект.Оплачивается = Истина;
		СтрокиНаУдаления 	= Объект.Товары.НайтиСтроки(Новый Структура("Оплачена", Истина));
		
		Для Каждого СтрокаНаУдаление ИЗ СтрокиНаУдаления Цикл
			Объект.Товары.Удалить(СтрокаНаУдаление);
		КонецЦикла;
		
		Если ОбщегоНазначенияРМККлиентПереопределяемый.ВидОперацииПродажа(Объект.ВидОперации) Тогда
			ОтложенныйЧек = ПлатежнаяСистема_НоваяЗаявка.ДокументОплаты;
		Иначе
			ОтложенныйЧек = ПлатежнаяСистема_НоваяЗаявка.ДокументВозврата;
		КонецЕсли;
		
		ОтложитьЧек(Команда);
		СанкционироватьЗакрытиеОперацииПлатежнойСистемой();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗавершитьПринудительно(Команда)
	
	ЗавершитьОплатуПринудительно();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗакрытьПринудительно(Команда)
	
	Если ИнтеграцияСПлатежнымиСистемамиРМККлиент.ПрерватьОперацию(ЭтотОбъект) Тогда
		СанкционироватьЗакрытиеОперацииПлатежнойСистемой();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыборВидаОплаты(Команда)
	
	НомерВидаОплаты = Число(Прав(Команда.Имя,1));
	ВариантыВыбора = Элементы.ПлатежнаяСистема_ИдентификаторПС.СписокВыбора.ВыгрузитьЗначения();
	ПлатежнаяСистема_ИдентификаторПС = ВариантыВыбора[НомерВидаОплаты-1];
	
	ИнициализацияПанелиДействий(ПлатежнаяСистема_ИдентификаторПС);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьНайтиВЧеке(Команда)
	НайтиТоварВЧеке(ШтрихкодДляПоиска);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИзбранноеВыбор(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Кассир) Тогда
		
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаВводКассира);
		Возврат;
		
	КонецЕсли;
	
	Индекс = СтрЗаменить(Команда.Имя, "КомандаИзбранныйТовар_", "");
	ПозицияИзбранного = ИзбранныеПозиции.Получить(Индекс);
	
	ДанныеДобавляемогоТовара = Новый Структура;
	ДанныеДобавляемогоТовара.Вставить("Номенклатура", ПозицияИзбранного.Номенклатура);
	ДанныеДобавляемогоТовара.Вставить("Характеристика", ПозицияИзбранного.Характеристика);
	ДанныеДобавляемогоТовара.Вставить("Упаковка", ПозицияИзбранного.Упаковка);
	ДанныеДобавляемогоТовара.Вставить("Цена", ПозицияИзбранного.Цена);
	ДанныеДобавляемогоТовара.Вставить("ОсобенностьУчета", ПозицияИзбранного.ОсобенностьУчета);
	ДанныеДобавляемогоТовара.Вставить("ВидНоменклатуры", ПозицияИзбранного.ВидНоменклатуры);
	ДанныеДобавляемогоТовара.Вставить("ВыборТовараВручную", Истина);
	
	Если ЗапрашиватьПодтверждениеВозраста18Плюс Тогда
		
		Если СостояниеПодтвержденияВозраста = "" ИЛИ СостояниеПодтвержденияВозраста = "Нет18" Тогда
			
			Если ТоварСВозрастнымОграничением(ДанныеДобавляемогоТовара.ОсобенностьУчета) Тогда
				
				ПереключитьНаСтраницуПодтвержденияВозраста();
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СписокТоваровВыборПродолжение();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьТовар(Команда)
	
	Если Объект.Товары.Количество() = 0 Тогда
		
		УстановитьДоступностьЭлементаФормы(Элементы.СкидкаНаЧек, Ложь);
		Возврат;
		
	КонецЕсли;
	
	НеобходимоеПраво = НСтр("ru='ПравоУдалитьСтрокуРМК'");
	
	Если ЕстьПравоНаДействие(НеобходимоеПраво) Тогда
		
		Если СкидкиРассчитаны Тогда
			ЗадатьВопросПоРасчетуСкидок("УдалитьТоварЗавершение");
		Иначе
			УдалитьТоварЗавершение(КодВозвратаДиалога.Да, Неопределено);
		КонецЕсли;
		
	Иначе
		ПредложитьЗаменитьПраваКассира(НеобходимоеПраво);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийТоварУменьшитьКоличество(Команда)
	
	Если ТекущийТоварКоличество = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПересчитатьДанныеПриИзмененииКоличества();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийТоварУвеличитьКоличество(Команда)
	ПересчитатьДанныеПриИзмененииКоличества(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СкидкаТекущийТоварПроцент(Команда)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		
		Если ЭтоСоставляющаяНабора(ТекущиеДанные) Тогда
			
			СоставНабора = СоставНабораПоЭлементуНабора(ТекущиеДанные, Объект.Товары);
			
			Если СоставНабора.Количество() = Объект.Товары.Количество() Тогда
				Позиции = Объект.Товары;
			Иначе
				Позиции = СоставНабора;
			КонецЕсли;
			
			РассчитатьРучнуюСкидкуПроцентомНаПозиции(Позиции, ТекущийТоварСкидка);
			
		Иначе
			РучнаяСкидкаПроцентомПоСтроке(ТекущиеДанные);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РучнаяСкидкаПроцентомПоСтроке(СтрокаЧека)

	Если Не СтрокаЧека = Неопределено Тогда
		
		СкидкиРазрешены = ДопускаетсяПрименениеСкидокНаТовар(СтрокаЧека);
		ЦветФонаНеактивнойКнопки = Новый Цвет;
		ЦветФонаАктивнойКнопки = ЦветФонаНеактивнойКнопки;
		ПересчитыватьСуммуСтроки = Истина;
		
		Если СкидкиРазрешены И Не (СтрокаЧека.РассчитанаСкидка Или ТекущийТоварСкидка = 0
			Или СтрокаЧека.Сумма = СтрокаЧека.СуммаСкидкиОплатыБонусом) Тогда
			
				ПредупредитьОПревышенииРучнойСкидки = Ложь;
				
				Если ТекущийТоварСкидка > МаксимальныйПроцентРучнойСкидки Тогда
					
					ТекущийТоварСкидка = МаксимальныйПроцентРучнойСкидки;
					ПредупредитьОПревышенииРучнойСкидки = Истина;
					
				КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаЧека.МинимальнаяЦена) И ЗначениеЗаполнено(СтрокаЧека.СуммаБезСкидки) Тогда
				
				Если ЗначениеЗаполнено(ТекущийТоварЦенаИзКарточки) Тогда
					ЦенаДляРасчетаСкидкиПоМРЦ = ТекущийТоварЦенаИзКарточки;
				ИначеЕсли ЗначениеЗаполнено(СтрокаЧека.Цена) Тогда
					ЦенаДляРасчетаСкидкиПоМРЦ = СтрокаЧека.Цена;
				Иначе
					ЦенаДляРасчетаСкидкиПоМРЦ = СтрокаЧека.МинимальнаяЦена;
				КонецЕсли;
				
				ПределСкидкиПоМРЦ = (ЦенаДляРасчетаСкидкиПоМРЦ - СтрокаЧека.МинимальнаяЦена)
					* СтрокаЧека.Количество / СтрокаЧека.СуммаБезСкидки * 100;
				
				Если ТекущийТоварСкидка > ПределСкидкиПоМРЦ Тогда
					
					ТекущийТоварСкидка = ПределСкидкиПоМРЦ;
					ПредупредитьОПревышенииРучнойСкидки = Ложь;
					ПредупредитьОПревышенииМинимальнойЦены(СтрокаЧека.МинимальнаяЦена);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПредупредитьОПревышенииРучнойСкидки Тогда
				
				ТекстПредупреждения = СтрШаблон(НСтр("ru = 'Максимальная величина ручной скидки: %1 %%.'"),
					ТекущийТоварСкидка);
				ПоказатьПредупреждение(, ТекстПредупреждения);
				
			КонецЕсли;
			
			СтрокаЧека.ПроцентСкидкиНаценки = ТекущийТоварСкидка;
			
		ИначеЕсли СкидкиРазрешены И СтрокаЧека.РассчитанаСкидка И СтрокаЧека.ОтображаетсяСкидкаСуммой Тогда
			
			ТекущийТоварСкидка = СтрокаЧека.СуммаСкидкиНаценки / СтрокаЧека.СуммаБезСкидки * 100;
			СтрокаЧека.ПроцентСкидкиНаценки = ТекущийТоварСкидка;
			Элементы.СкидкаТекущийТоварСумма.ЦветФона = ЦветФонаНеактивнойКнопки;
			ПересчитыватьСуммуСтроки = Ложь;
			СтрокаЧека.ОтображаетсяСкидкаПроцентом = Истина;
			СтрокаЧека.ОтображаетсяСкидкаСуммой = Не СтрокаЧека.ОтображаетсяСкидкаПроцентом;
			
		Иначе
			
			СтрокаЧека.СуммаСкидкиНаценки = 0;
			СтрокаЧека.ПроцентСкидкиНаценки = 0;
			ТекущийТоварСкидка = 0;
			
		КонецЕсли;
		
		СтрокаЧека.РассчитанаСкидка = (ТекущийТоварСкидка > 0);
		
		Если СтрокаЧека.РассчитанаСкидка Тогда
			ЦветФонаАктивнойКнопки = Новый Цвет(224, 224, 224);
		КонецЕсли;
		
		Если ПересчитыватьСуммуСтроки Тогда
			
			ИдентификаторСтроки = СтрокаЧека.ПолучитьИдентификатор();
			РассчитатьСуммуВСтрокеТабличнойЧасти(ИдентификаторСтроки);
			ОбновитьИнформациюНаДисплееПокупателя("ИзменениеЦены");
			
		КонецЕсли;
		
		Элементы.СкидкаТекущийТоварПроцент.ЦветФона = ЦветФонаАктивнойКнопки;
		ДоступностьСкидкиСуммой = Не СтрокаЧека.РассчитанаСкидка;
		УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварСкидка, ДоступностьСкидкиСуммой);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкидкаТекущийТоварСумма(Команда)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		
		Если ЭтоСоставляющаяНабора(ТекущиеДанные) Тогда
			
			СоставНабора = СоставНабораПоЭлементуНабора(ТекущиеДанные, Объект.Товары);
			
			Если СоставНабора.Количество() = Объект.Товары.Количество() Тогда
				Позиции = Объект.Товары;
			Иначе
				Позиции = СоставНабора;
			КонецЕсли;
			
			ЭтоРасчетСкидкиНаНабор = Истина;
			РассчитатьРучнуюСкидкуСуммойНаПозиции(Позиции, ТекущийТоварСкидка);
			
		Иначе
			РучнаяСкидкаСуммойПоСтроке(ТекущиеДанные);
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
КонецПроцедуры

&НаКлиенте
Процедура РучнаяСкидкаСуммойПоСтроке(СтрокаЧека)

		Если Не СтрокаЧека = Неопределено Тогда
		
		СкидкиРазрешены = ДопускаетсяПрименениеСкидокНаТовар(СтрокаЧека);
		ЦветФонаНеактивнойКнопки = Новый Цвет;
		ЦветФонаАктивнойКнопки = ЦветФонаНеактивнойКнопки;
		ПересчитыватьСуммуСтроки = Истина;
		
		Если СкидкиРазрешены И Не(СтрокаЧека.РассчитанаСкидка Или ТекущийТоварСкидка = 0 
			Или СтрокаЧека.Сумма = СтрокаЧека.СуммаСкидкиОплатыБонусом) Тогда
			
			ПредупредитьОПревышенииРучнойСкидки = Ложь;
			МаксимальнаяСкидка = СтрокаЧека.СуммаБезСкидки * МаксимальныйПроцентРучнойСкидки / 100;
			
			Если ТекущийТоварСкидка > МаксимальнаяСкидка Тогда
				
				ТекущийТоварСкидка = МаксимальнаяСкидка;
				ПредупредитьОПревышенииРучнойСкидки = Истина;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаЧека.МинимальнаяЦена) Тогда
				
				Если ЗначениеЗаполнено(ТекущийТоварЦенаИзКарточки) Тогда
					ЦенаДляРасчетаСкидкиПоМРЦ = ТекущийТоварЦенаИзКарточки;
				ИначеЕсли ЗначениеЗаполнено(СтрокаЧека.Цена) Тогда
					ЦенаДляРасчетаСкидкиПоМРЦ = СтрокаЧека.Цена;
				Иначе
					ЦенаДляРасчетаСкидкиПоМРЦ = СтрокаЧека.МинимальнаяЦена;
				КонецЕсли;
				
				ПределСкидкиПоМРЦ = (ЦенаДляРасчетаСкидкиПоМРЦ - СтрокаЧека.МинимальнаяЦена)
					* СтрокаЧека.Количество;
				
				Если ТекущийТоварСкидка > ПределСкидкиПоМРЦ Тогда
					
					ТекущийТоварСкидка = ПределСкидкиПоМРЦ;
					ПредупредитьОПревышенииРучнойСкидки = Ложь;
					ПредупредитьОПревышенииМинимальнойЦены(СтрокаЧека.МинимальнаяЦена);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПредупредитьОПревышенииРучнойСкидки Тогда
				
				ТекстПредупреждения = СтрШаблон(НСтр("ru = 'Максимальная величина ручной скидки: %1 руб.'"),
					ТекущийТоварСкидка);
				ПоказатьПредупреждение(, ТекстПредупреждения);
				
			КонецЕсли;
			
			СтрокаЧека.СуммаСкидкиНаценки = ТекущийТоварСкидка;
			
		ИначеЕсли СкидкиРазрешены И СтрокаЧека.РассчитанаСкидка И СтрокаЧека.ОтображаетсяСкидкаПроцентом Тогда
			
			ТекущийТоварСкидка = СтрокаЧека.СуммаСкидкиНаценки;
			СтрокаЧека.СуммаСкидкиНаценки = ТекущийТоварСкидка;
			СтрокаЧека.ПроцентСкидкиНаценки = 0;
			Элементы.СкидкаТекущийТоварПроцент.ЦветФона = ЦветФонаНеактивнойКнопки;
			ПересчитыватьСуммуСтроки = Ложь;
			СтрокаЧека.ОтображаетсяСкидкаСуммой = Истина;
			СтрокаЧека.ОтображаетсяСкидкаПроцентом = Не СтрокаЧека.ОтображаетсяСкидкаСуммой;
			
		Иначе
			
			СтрокаЧека.СуммаСкидкиНаценки = 0;
			СтрокаЧека.ПроцентСкидкиНаценки = 0;
			ТекущийТоварСкидка = 0;
			
		КонецЕсли;
		
		СтрокаЧека.РассчитанаСкидка = ТекущийТоварСкидка > 0;
		
		Если СтрокаЧека.РассчитанаСкидка Тогда
			ЦветФонаАктивнойКнопки = Новый Цвет(224, 224, 224);
		КонецЕсли;
		
		Если ПересчитыватьСуммуСтроки Тогда
			
			РассчитатьСуммуВСтрокеТабличнойЧасти();
			ОбновитьИнформациюНаДисплееПокупателя("ИзменениеЦены");
			
		КонецЕсли;
		
		Элементы.СкидкаТекущийТоварСумма.ЦветФона = ЦветФонаАктивнойКнопки;
		ДоступностьСкидкиПроцентом = Не СтрокаЧека.РассчитанаСкидка И (ТекущийТоварСкидка = 0);
		УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварСкидка, ДоступностьСкидкиПроцентом);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтложитьЧек(Команда)
	
	СтрокиНаУдаления = Объект.Товары.НайтиСтроки(Новый Структура("Оплачена", Истина));
	
	Если СтрокиНаУдаления.Количество() > 0 Тогда
		
		Для Каждого СтрокаНаУдаление Из СтрокиНаУдаления Цикл
			Объект.Товары.Удалить(СтрокаНаУдаление);
		КонецЦикла;
		
	КонецЕсли;
	
	Если Объект.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СуммаОплаченоQRКодом > 0 Тогда
		Объект.Оплачивается = Истина;
	КонецЕсли;
		
	ОтложитьЧекСервер();
	ВывестиИнформациюНаДисплейПокупателя("ОтложитьЧек");
	НастроитьЭлементыФормы(Элементы.СтраницаПустая, Ложь);
	
	Если НачинатьНовыйЧекВРежимеСкупка Тогда
		ПереключитьРежимНаСкупка();
	Иначе
		СформироватьЗаголовок(НСтр("ru='Продажа'"));
	КонецЕсли;
	
	РазблокироватьОбъектСервисаЛояльности("clientbonuses");
	СписатьРазблокироватьПодарочныеСертификаты();
	ОграничитьДоступностьЭлементовПриОжиданииМарки(Ложь);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтменитьОтложитьЧекЗавершение", ЭтотОбъект);
	ПоказатьОповещениеПользователя(НСтр("ru = 'Чек отложен'"), ОписаниеОповещения, "Отменить");
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЧек(Команда)

	Если Объект.Товары.Количество() > 0 Тогда
		
		НеобходимоеПраво = НСтр("ru='ПравоУдалитьЧекРМК'");
		
		Если ЕстьПравоНаДействие(НеобходимоеПраво) Тогда
			
			Если ЗначениеЗаполнено(ОтложенныйЧек) Тогда
				АннулироватьЧек(ОтложенныйЧек);
			КонецЕсли;
			
			НастроитьЭлементыФормы(Элементы.СтраницаПустая, Ложь);
			СформироватьЗаголовок(НСтр("ru='Продажа'"));
			РазблокироватьОбъектСервисаЛояльности("clientbonuses");
			СписатьРазблокироватьПодарочныеСертификаты();
			ВывестиИнформациюНаДисплейПокупателя("Аннулирование");
			ИнициализироватьИнтерфейсРабочегоМестаКассира();
			
		Иначе
			
			ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
			ПредложитьЗаменитьПраваКассира(НеобходимоеПраво);
			
		КонецЕсли;
		
	Иначе
		СоздатьНовыйНабор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтложенныеЧеки(Команда)
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='Перед выбором отложенного чека необходимо пробить,
										|удалить или отложить текущий чек.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	КассыККМИОрганизации = ПодключенныеКассыККМИОрганизации();
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("МассивКассККМ", КассыККМИОрганизации.МассивКассККМ);
	ПараметрыОткрытия.Вставить("МассивОрганизаций", КассыККМИОрганизации.МассивОрганизаций);
	ПараметрыОткрытия.Вставить("ТорговыйОбъект", Объект.ТорговыйОбъект);
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru='Выбор отложенного чека'"));
	ПараметрыОткрытия.Вставить("ВыборОтложенногоЧека", Истина);
	
	КоличествоОтложенныхЧеков = ПроверитьКоличествоОтложенныхЧеков(ПараметрыОткрытия, ОтложенныйЧек);
	
	Если КоличествоОтложенныхЧеков = 0 Тогда
		
		ПоказатьПредупреждение(, НСтр("ru='Нет отложенных чеков.'"));
		Возврат;
		
	КонецЕсли;
	
	Если КоличествоОтложенныхЧеков = 1 И ЗначениеЗаполнено(ОтложенныйЧек) Тогда
		
		ПродолжитьЧекКлиент();
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборОтложенногоЧекаЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.РабочееМестоКассира.Форма.ФормаВыбораЧека",
		ПараметрыОткрытия, ЭтотОбъект,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧек(Команда)
	
	ОплатаЗаполненаВерно = Истина;
	
	СтруктураОшибки = Новый Структура;
	СтруктураОшибки.Вставить("ТекстЗаголовка", "");
	СтруктураОшибки.Вставить("ТекстОшибки", "");
	
	ПроверитьЗаполнениеОплатПередПробитиемЧека(ОплатаЗаполненаВерно, СтруктураОшибки);
	
	Если НЕ ОплатаЗаполненаВерно Тогда
		
		ОткрытьСтраницуИнфоОшибка(СтруктураОшибки.ТекстЗаголовка, СтруктураОшибки.ТекстОшибки);
		Возврат;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыбраннаяСистемаНалогообложения) Тогда
		
		СтруктураОшибки.ТекстЗаголовка = НСтр("ru = 'Ошибка.'");
		СтруктураОшибки.ТекстОшибки = НСтр("ru = 'Не заполнена система налогообложения.'");
		ОткрытьСтраницуИнфоОшибка(СтруктураОшибки.ТекстЗаголовка, СтруктураОшибки.ТекстОшибки);
		Возврат;
		
	КонецЕсли;
	
	Если ЭтоЗаменаТоваров И НЕ КонтрольОстатковПройден(СтруктураОшибки.ТекстОшибки) Тогда
		
		СтруктураОшибки.ТекстЗаголовка = НСтр("ru = 'Контроль остатков.
			|Измените количество или удалите товар.'");
		ОткрытьСтраницуИнфоОшибка(СтруктураОшибки.ТекстЗаголовка, СтруктураОшибки.ТекстОшибки);
		Возврат;
		
	КонецЕсли;
	
	ДанныеЗапрета = НаличиеЗапрещенныхКПродажеТоваровВЧеке();
	ЧекСодержитЗапрещенныеТовары = ДанныеЗапрета.Количество();
	
	Если ЧекСодержитЗапрещенныеТовары Тогда
		
		ОткрытьСтраницуЗапретаПродажиПоВремени(ДанныеЗапрета.ВидНоменклатуры,
			ДанныеЗапрета.ВремяНачалаЗапрета, ДанныеЗапрета.ВремяОкончанияЗапрета);
		Возврат;
		
	КонецЕсли;
	
	ПробитоЧеков = ПробитыеЧеки.Количество();
	
	Если ЭтоОплатаВстречнымПредоставлением И НЕ Элементы.ГруппаОплатаНал.Видимость 
		И НЕ Элементы.ГруппаОплатаКартой.Видимость И НЕ Элементы.ГруппаСуммаОплатаСертификатами.Видимость Тогда
		
			ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
			ПараметрыПересчета.ПоКомандеНал = Истина;
			РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
		
	КонецЕсли;
	
	Если НЕ ЭтоЧекКоррекции Тогда
		
		СистемыНалогообложенияПродажТоваровКорзины = РазличныеСНОВСпискеПокупок();
		
		Если ЭтоЗаменаТоваров Тогда
			
			Если СистемыНалогообложенияПродажТоваровКорзины.Количество() > 1 Тогда
				
				СтруктураОшибки.ТекстЗаголовка = НСтр("ru = 'Ошибка.'");
				СтруктураОшибки.ТекстОшибки = НСтр("ru = 'Выбранные товары имеют разные системы налогообложения.'");
				ОткрытьСтраницуИнфоОшибка(СтруктураОшибки.ТекстЗаголовка, СтруктураОшибки.ТекстОшибки);
				Возврат;
				
			КонецЕсли;
			
			СписокОрганизаций = Новый СписокЗначений;
			Для Каждого СтрокаТовара Из Объект.Товары Цикл
				
				Если СписокОрганизаций.НайтиПоЗначению(СтрокаТовара.Организация) = Неопределено Тогда
					СписокОрганизаций.Добавить(СтрокаТовара.Организация);
				КонецЕсли;
				
			КонецЦикла;
			
			Если СписокОрганизаций.Количество() > 1 Тогда
				
				СтруктураОшибки.ТекстЗаголовка = НСтр("ru = 'Ошибка.'");
				СтруктураОшибки.ТекстОшибки = НСтр("ru = 'Выбранные товары относятся к разным организациям.'");
				ОткрытьСтраницуИнфоОшибка(СтруктураОшибки.ТекстЗаголовка, СтруктураОшибки.ТекстОшибки);
				Возврат;
				
			КонецЕсли;
			
			ОжидаемоеКоличествоЧеков = 2 - ПробитоЧеков;
			
		Иначе
			
			Если ЭтоОплатаВстречнымПредоставлением Тогда
				
				Для Каждого СтрокаТовары  Из Объект.Товары Цикл
					
					СтрокаТовары.Сумма		= 0;
					СтрокаТовары.СуммаНДС	= 0;
					
				КонецЦикла;
				
			КонецЕсли;
			
			ОжидаемоеКоличествоЧеков = СистемыНалогообложенияПродажТоваровКорзины.Количество() - ПробитоЧеков;
			
		КонецЕсли;
		
	Иначе
		
		СистемыНалогообложенияПродажТоваровКорзины = Новый Массив();
		СтруктураОрганизацийИСНО = Новый Структура("Организация, СистемаНалогообложения");
		СтруктураОрганизацийИСНО.Организация = ВыбраннаяОрганизация;
		СтруктураОрганизацийИСНО.СистемаНалогообложения = СистемаНалогообложенияЧекаКоррекции;
		СистемыНалогообложенияПродажТоваровКорзины.Добавить(СтруктураОрганизацийИСНО);
		ОжидаемоеКоличествоЧеков = 2 - ПробитоЧеков;
		
	КонецЕсли;
	
	Если ОжидаемоеКоличествоЧеков > 0 Тогда
		
		РезультатПроверки = КассаПоддерживаетОперацииПоСНОИзСпискаПокупок(
			ПодключаемоеОборудование, СистемыНалогообложенияПродажТоваровКорзины);
			
		ПродолжитьФормированиеЧеков = НЕ РезультатПроверки.Ошибка;
		
		Если НЕ ПродолжитьФормированиеЧеков Тогда
			
			ЗаголовокОшибки = НСтр("ru = 'Ошибка пробития чека'");
			ТекстОшибки = РезультатПроверки.ТекстОшибки;
			ОткрытьСтраницуИнфоОшибка(ЗаголовокОшибки, ТекстОшибки);
			ПодключитьОбработчикОжидания("ОбработкаВыводаОжиданияОплатыНаДисплейПокупателя", 5, Истина);
			Возврат;
			
		КонецЕсли;
			
	КонецЕсли;
	
	Если ТипЗнч(Команда) = Тип("ПеречислениеСсылка.ТипыПлатежнойСистемыККТ") Тогда
		НачатьОплатуВозвратПлатежнойСистемой(Команда);
	ИначеЕсли ЗначениеЗаполнено(СуммаОплаченоБН) И НЕ ЭтоЧекКоррекции Тогда
		ПровестиОплатуПоКарте();
	Иначе
		НачатьПечатьЧека();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Войти(Команда)
	
	Если НЕ ЗначениеЗаполнено(КодКассира) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьКассовуюСменуИНайтиКассира(КодКассира);
	СформироватьЗаголовокВводКассира();
	
	Если ЗначениеЗаполнено(Объект.Кассир) Тогда
		
		ОткрытьОбщуюСтраницу();
		СформироватьЗаголовок();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьКассира(Команда)
	
	Объект.Кассир = Неопределено;
	КодКассира = НСтр("ru = ''");
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаВводКассира);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОперации, Ложь);
	ТекущийЭлемент = Элементы.КодКассира;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьПарольКассира(Команда)
	
	Если НЕ ЗначениеЗаполнено(КодДляЗаменыПрав) Тогда
		Возврат;
	КонецЕсли;
	
	ПользовательДоЗаменыПрав = Объект.ПользовательБД;
	КассирДоЗаменыПрав = Объект.Кассир;
	
	Если ТекущаяОперация = НСтр("ru='УдалитьСтрокуРМК'") Тогда
		
		Строка = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
		
		Если ККМПоддерживаетПроверкуКодовМаркировки
			И ЗначениеЗаполнено(Строка.КодМаркировки)
			И ЗначениеЗаполнено(ИдентификаторТекущейСессииПроверкиМарок)
			И ВозможноЗакрытьСессиюРегистрацииМарок() Тогда
				ЗакрытьСессиюРегистрацииМарок();
		КонецЕсли;
		
	КонецЕсли;

	ЗаменитьПраваИВыполнитьТребуемоеДействие(КодДляЗаменыПрав);
	НастроитьФормуПослеЗаменыПрав();
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиДанныеПокупателя(Команда)
	ВвестиДанныеПокупателяКлиент();
КонецПроцедуры

&НаКлиенте
Процедура НайтиВЧеке(Команда)
	НайтиВЧекеНажатие();
КонецПроцедуры

&НаКлиенте
Процедура ОтменаНайтиВЧеке(Команда)
	НайтиВЧекеНажатие();
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьСтраницуИнфоОшибка(Команда)
	
	ОсновнаяСтраницаДляОтображения = Элементы.СтраницаОбщая;
	ДоступностьПоискаВЧеке = (Объект.Товары.Количество() > 0);
	
	Если Объект.Товары.Количество() = 0 Тогда
		ОсновнаяСтраницаДляОтображения = Элементы.СтраницаПустая;
	КонецЕсли;
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(ОсновнаяСтраницаДляОтображения);
	
	СтраницаСтаканПраво = Элементы.СтраницаОплата;
	ОтображатьСтраницуВводаМарки = Ложь;
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
		
		Если НЕ ТекущаяСтрока = Неопределено Тогда
			
			ОтображатьСтраницуВводаМарки = ТекущаяСтрока.НеобходимостьВводаКодаМаркировки
				И НЕ ЗначениеЗаполнено(ТекущаяСтрока.КодМаркировки);
			Если ОтображатьСтраницуВводаМарки Тогда
				СтраницаСтаканПраво = Элементы.СтраницаОтсканироватьМарку;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СуммаОплаченоQRКодом > 0 И НЕ ОтображатьСтраницуВводаМарки Тогда
		СтраницаСтаканПраво = Элементы.СтраницаПлатежнаяСистема;
	КонецЕсли;
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(СтраницаСтаканПраво);
	ПодготовитьИнтерфейсКВозвратуМаркируемогоТовараБезКонтрольнойМарки(ТекущаяСтрока);
	
	УстановитьДоступностьЭлементаФормы(Элементы.НайтиВЧеке, ДоступностьПоискаВЧеке);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.СменитьКассира, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.Каталог, Истина);
	
	ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
	РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветНет(Команда)
	ПерейтиНаСтраницуОплата();
КонецПроцедуры

&НаКлиенте
Процедура ОтветДа(Команда)
	
	Если ЗначениеЗаполнено(СуммаОплаченоБН) Тогда
		
		ОбщегоНазначенияРМККлиентПереопределяемый.ДозаполнитьДанныеПослеОплатыПоКарте(ЭтотОбъект);
		ТранзакцияПоКартеЗавершена = Истина;
		
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.СменитьКассира, Истина);
		
		Если ПечататьБумажныйЧек Тогда
			ПробитьЧекКлиент();
		Иначе
			ПерейтиНаСтраницуОтправкиЭлектронногоЧека();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаОплатыОк(Команда)
	
	ТранзакцияПоКартеЗавершена = Ложь;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.СменитьКассира, Истина);
	ВывестиИнформациюНаДисплейПокупателя("ОтменаОплаты");
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОплата);
	
КонецПроцедуры

&НаКлиенте
Процедура Каталог(Команда)
	
	Если ОжидатьВводМарки Тогда
		Возврат;
	КонецЕсли;
	
	Если СкидкиРассчитаны Тогда
		ЗадатьВопросПоРасчетуСкидок("ОткрытьКаталогЗавершение");
	Иначе 
		ОткрытьКаталогЗавершение(КодВозвратаДиалога.Да);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПоискТоваров(Команда)
	ЗакрытьПоискТоваровКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧек(Команда)
	
	Если Не ЗначениеЗаполнено(ВыбраннаяСистемаНалогообложения) Тогда
		
		ТекстЗаголовка = НСтр("ru = 'Ошибка.'");
		ТекстОшибки = НСтр("ru = 'Чек не готов для отправки. По чеку не принята оплата.'");
		ЗакрытьФормуДанныеПокупателя();
		ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки);
		Возврат;
		
	КонецЕсли;
	
	ПробитоЧеков = ПробитыеЧеки.Количество();
	
	Если ЭтоЧекКоррекции ИЛИ ЭтоЗаменаТоваров Тогда
		ОжидаемоеКоличествоЧеков = 2 - ПробитоЧеков;
	Иначе
		
		СистемыНалогообложенияПродажТоваровКорзины = РазличныеСНОВСпискеПокупок();
		ОжидаемоеКоличествоЧеков = СистемыНалогообложенияПродажТоваровКорзины.Количество() - ПробитоЧеков;
		
	КонецЕсли;
	
	НомерТелефонаДляОтправки = ОбщегоНазначенияРМККлиентСервер.ПодготовитьНомерТелефона(ОтправкаЧекаТелефон);
	
	НомерТелефонаВведенКорректно = ЗначениеЗаполнено(НомерТелефонаДляОтправки);
	АдресЭлектроннойПочтыВведенКорректно =
		ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(ОтправкаЧекаПочта);
	
	Если НомерТелефонаВведенКорректно ИЛИ АдресЭлектроннойПочтыВведенКорректно Тогда
		
		Если НЕ АдресЭлектроннойПочтыВведенКорректно Тогда
			ОтправкаЧекаПочта = НСтр("ru = ''");
		КонецЕсли;
		
		ОтправкаЧекаТелефон =
			?(НомерТелефонаВведенКорректно, СтрШаблон(НСтр("ru = '+%1'"), НомерТелефонаДляОтправки), НСтр("ru = ''"));
			
		БумажныйЧек = Ложь;
		ПробитьЧекКлиент(БумажныйЧек);
		
	Иначе
		
		ОповещениеОНевозможностиОтправкиЧека = Новый ОписаниеОповещения(
			"ПечатьБумажногоЧекаВместоЭлектронногоЗавершение", ЭтотОбъект);
		
		ЗаголовокВопроса = НСтр("ru = 'Отправка чека'");
		ТекстВопроса = НСтр("ru = 'Неверно указан номер телефона и email для отправки чека. Распечатать бумажный чек?'");
		ПоказатьВопрос(
			ОповещениеОНевозможностиОтправкиЧека, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,, ЗаголовокВопроса);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаВыемки(Команда)
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПустая);
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПравоОбщая);
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОперации, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
	
	УстановитьВидимостьЭлементаФормы(Элементы.СтраницыЛево, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.СтраницыЛево, Истина);
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаИнфоВыемка, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОперациюВыемка(Команда)
	
	Если НЕ ЗначениеЗаполнено(СуммаВыемка) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПодключаемоеОборудование) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияРМККлиентПереопределяемый.ВыполнитьОперациюВыемка(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОперациюВнесение(Команда)
	
	Если НЕ ЗначениеЗаполнено(СуммаВнесение) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПодключаемоеОборудование) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияРМККлиентПереопределяемый.ВыполнитьОперациюВнесение(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаВнесения(Команда)
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПустая);
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПравоОбщая);
	
	УстановитьВидимостьЭлементаФормы(Элементы.СтраницыЛево, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.СтраницыЛево, Истина);

	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаИнфоВнесение, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьТовар(Команда)
	
	Если ОжидатьВводМарки И НЕ ДанныеДляРучногоСопоставления = Неопределено Тогда
		
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		
		Если НЕ ТекущаяСтрока = Неопределено Тогда
			
			СопоставитьСТекущейСтрокой();
			
			КонтекстПроверкиКонтрольнойМарки = КонтекстПроверкиКонтрольнойМарки();
			ЗаполнитьЗначенияСвойств(КонтекстПроверкиКонтрольнойМарки, ТекущаяСтрока);
			ЭтоОбработкаСопоставленияТовара = Истина;
			КонтекстПроверкиКонтрольнойМарки.ЭтоОбработкаСопоставленияТовара = ЭтоОбработкаСопоставленияТовара;
			ЗавершитьВводШтрихкодаМаркаВведена(КонтекстПроверкиКонтрольнойМарки);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;

	РучноеСопоставлениеТовара = Истина;
	ОткрытьКаталогКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаСопоставленияТовара(Команда)
	
	ДанныеДляРучногоСопоставления = Неопределено;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
	
	Если НЕ ОжидатьВводМарки Тогда 
		ОграничитьДоступностьЭлементовПриОжиданииМарки(Ложь);
	КонецЕсли;
	
	ОсновнаяСтраница = Элементы.СтраницаПустая;
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		ОсновнаяСтраница = Элементы.СтраницаОбщая;
		
		СтраницаДляОтображения = ?(ОжидатьВводМарки, Элементы.СтраницаОтсканироватьМарку, Элементы.СтраницаОплата);
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(СтраницаДляОтображения);
		
	Иначе
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОплата);
	КонецЕсли;
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(ОсновнаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСторноПоКарте(Команда)
	
	ДанныеТерминалов = ОбщегоНазначенияРМККлиентПереопределяемый.ТекущиеЭквайринговыеТерминалы(ЭтотОбъект);
	Если ДанныеТерминалов.Количество() > 0 Тогда
		ВыполнитьСторноОплатыПоКарте(ДанныеТерминалов[0]);
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура ЧекКоррекции(Команда)
	ПереключитьРежимНаЧекКоррекции();
КонецПроцедуры

&НаКлиенте
Процедура ВозвратПродажи(Команда)
	ПереключитьРежимНаВозврат();
КонецПроцедуры

&НаКлиенте
Процедура Продажа(Команда)
	ПереключитьРежимНаПродажа();
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьСмену(Команда)
	ЗакрытьСменуКлиент();
КонецПроцедуры

&НаКлиенте
Процедура СверкаИтогов(Команда)
	СверкаИтоговКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ПовторнаяПечатьЧека(Команда)
	ПовторнаяПечатьЧекаКлиент();
КонецПроцедуры

&НаКлиенте
Процедура Внесение(Команда)
	ОткрытьСтраницуВнесенияДенежныхСредств();
КонецПроцедуры

&НаКлиенте
Процедура Выемка(Команда)
	ОткрытьСтраницуВыемкиДенежныхСредств();
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВес(Команда)
	ВесТекущегоТовара();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПараметрыТарирования(Команда)
	ПерейтиКПараметрамТарирования();
КонецПроцедуры

&НаКлиенте
Процедура СкидкаНаЧек(Команда)
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		Активность = Ложь;
		НастроитьИнтерфейсПримененияСкидкиНаЧек(Элементы.ГруппаСкидкиНаЧек, Активность);
		ТекущийЭлемент = Элементы.ЗначениеСкидкиНаЧек;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПанельУстановкиСкидкиНаЧек(Команда)
	
	Активность = Истина;
	НастроитьИнтерфейсПримененияСкидкиНаЧек(Элементы.ГруппаРедактированияСтрокиКорзины, Активность);
	ЗначениеСкидкиНаЧек = 0;
	ЦветКнопкиПоУмолчанию = Новый Цвет;
	
	СтрокаСТекущимТоваром = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
	ТекущийТоварСкидка = СтрокаСТекущимТоваром.СуммаСкидкиНаценки;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ЗначениеСкидкиНаЧек, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаНаЧекСуммой, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаНаЧекПроцентом, Истина);
	
	Элементы.СкидкаНаЧекПроцентом.ЦветФона = ЦветКнопкиПоУмолчанию;
	Элементы.СкидкаНаЧекСуммой.ЦветФона = ЦветКнопкиПоУмолчанию;
	
	Элементы.СкидкаТекущийТоварСумма.ЦветФона = ЦветКнопкиПоУмолчанию;
	Элементы.СкидкаТекущийТоварПроцент.ЦветФона = ЦветКнопкиПоУмолчанию;
	
	Если СтрокаСТекущимТоваром.ОтображаетсяСкидкаСуммой Тогда
		
		Элементы.СкидкаТекущийТоварСумма.ЦветФона = Новый Цвет(224, 224, 224);
		ТекущийТоварСкидка = СуммаРучнойСкидкиНаПозицию(СтрокаСТекущимТоваром);
		
	ИначеЕсли СтрокаСТекущимТоваром.ОтображаетсяСкидкаПроцентом Тогда
		
		Элементы.СкидкаТекущийТоварПроцент.ЦветФона = Новый Цвет(224, 224, 224);
		ТекущийТоварСкидка = СтрокаСТекущимТоваром.ПроцентСкидкиНаценки;
		
	КонецЕсли;
	
	ДоступностьПоляСкидкиНаСтроку = 
		Не (СтрокаСТекущимТоваром.ОтображаетсяСкидкаПроцентом Или СтрокаСТекущимТоваром.ОтображаетсяСкидкаСуммой);
	
	УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварСкидка, ДоступностьПоляСкидкиНаСтроку);
	ПримененаСкидкаНаЧек = (Объект.Товары.Итог("СуммаСкидкиНаценки") > 0);
	
КонецПроцедуры

&НаКлиенте
Процедура СкидкаНаЧекПроцентом(Команда)
	
	Позиции = Объект.Товары;
	РассчитатьРучнуюСкидкуПроцентомНаПозиции(Позиции, ЗначениеСкидкиНаЧек);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьРучнуюСкидкуПроцентомНаПозиции(Позиции, ЗначениеСкидки)
	
	Если Позиции.Количество() > 0 Тогда
		
		ЭтоРасчетСкидкиНаНабор = Истина;
		
		Для Каждого СтрокаКорзины Из Позиции Цикл
			
			Если СтрокаКорзины.НомерНабора = 0 Тогда
				
				ЭтоРасчетСкидкиНаНабор = Ложь;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЭтоРасчетСкидкиНаЧек = (Позиции.Количество() = Объект.Товары.Количество());
		
		Если ЭтоРасчетСкидкиНаЧек Тогда
			
			ПровестиРасчетСкидок		= Истина;
			ПересчитатьСкидкуПроцентом	= Истина;
			СкидкаПревышена				= Ложь;
			ЦветФонаНеактивнойКнопки	= Новый Цвет;
			ЦветФонаАктивнойКнопки		= ЦветФонаНеактивнойКнопки;
			
			Если НЕ (ПримененаСкидкаНаЧек Или СуммаКОплате = 0) Тогда
				
				Если ЗначениеСкидки > МаксимальныйПроцентРучнойСкидки Тогда
					
					ЗначениеСкидки = МаксимальныйПроцентРучнойСкидки;
					СкидкаПревышена = Истина;
					
					Если ЭтоРасчетСкидкиНаНабор Тогда
						ТекущийТоварСкидка = ЗначениеСкидки;
					КонецЕсли;
					
				КонецЕсли;
				
				ОтображаетсяСкидкаПроцентомНаЧек = Истина;
				ОтображаетсяСкидкаСуммойНаЧек = Ложь;
				
			ИначеЕсли ПримененаСкидкаНаЧек И ОтображаетсяСкидкаСуммойНаЧек Тогда
				
				ПровестиРасчетСкидок = Ложь;
				
			Иначе
				
				ЗначениеСкидкиНаЧек = 0;
				ПересчитатьСкидкуПроцентом = Ложь;
				
				Если ЭтоРасчетСкидкиНаНабор Тогда
					ТекущийТоварСкидка = 0;
				КонецЕсли;
				
			КонецЕсли;
			
			ИдентификаторТекущейСтрокиДоРасчетаСкидок = ТекущийТоварИдентификатор;
			
			Если ПровестиРасчетСкидок Тогда
				
				Для Каждого СтрокаКорзины Из Позиции Цикл
					
					Если ДопускаетсяПрименениеСкидокНаТовар(СтрокаКорзины) Тогда
						
						ЗначениеСкидкиДляСтроки = ЗначениеСкидки;
						
						Если ЗначениеЗаполнено(СтрокаКорзины.МинимальнаяЦена) И ЗначениеЗаполнено(СтрокаКорзины.СуммаБезСкидки) Тогда
							
							Если ЗначениеЗаполнено(СтрокаКорзины.Цена) Тогда
								ЦенаДляРасчетаСкидкиПоМРЦ = СтрокаКорзины.Цена;
							Иначе
								ЦенаДляРасчетаСкидкиПоМРЦ = СтрокаКорзины.МинимальнаяЦена;
							КонецЕсли;
							
							ЗначениеСкидкиДляСтрокиПоМРЦ = (ЦенаДляРасчетаСкидкиПоМРЦ - СтрокаКорзины.МинимальнаяЦена)
							* СтрокаКорзины.Количество / СтрокаКорзины.СуммаБезСкидки * 100;
							
							Если ЗначениеСкидкиДляСтроки > ЗначениеСкидкиДляСтрокиПоМРЦ Тогда
								ЗначениеСкидкиДляСтроки = ЗначениеСкидкиДляСтрокиПоМРЦ;
							КонецЕсли;
							
						КонецЕсли;
						
						ТекущийТоварИдентификатор = СтрокаКорзины.ПолучитьИдентификатор();
						УстановитьЗначенияСкидкиВСтрокеКорзины(СтрокаКорзины, ЗначениеСкидкиДляСтроки);
						РассчитатьСуммуВСтрокеТабличнойЧасти(ТекущийТоварИдентификатор);
						
						ПримененаСкидкаНаЧек = (ЗначениеСкидкиДляСтроки > 0);
						
						ОбновитьИнформациюНаДисплееПокупателя("ИзменениеЦены");
						
					КонецЕсли;
					
					СтрокаКорзины.ОтображаетсяСкидкаПроцентом = ПримененаСкидкаНаЧек;
					СтрокаКорзины.ОтображаетсяСкидкаСуммой = Ложь;
					
				КонецЦикла;
				
				ПримененаСкидкаНаЧек = (ЗначениеСкидки > 0);
				
			КонецЕсли;
			
			Если ПересчитатьСкидкуПроцентом Тогда
				
				СуммаТоваровПодлежащихДисконтированию = 0;
				
				Для Каждого СтрокаКорзины Из Объект.Товары Цикл
					
					Если ДопускаетсяПрименениеСкидокНаТовар(СтрокаКорзины) Тогда
						СуммаТоваровПодлежащихДисконтированию = СуммаТоваровПодлежащихДисконтированию + СтрокаКорзины.СуммаБезСкидки;
					КонецЕсли;
					
				КонецЦикла;
				
				Если СуммаТоваровПодлежащихДисконтированию > 0 Тогда
					
					ОтображаетсяСкидкаПроцентомНаЧек = Истина;
					ОтображаетсяСкидкаСуммойНаЧек = Ложь;
					Элементы.СкидкаНаЧекСуммой.ЦветФона = ЦветФонаНеактивнойКнопки;
					НовоеЗначениеСкидкиНаЧек = Окр(Объект.Товары.Итог("СуммаСкидкиНаценки")
						/ СуммаТоваровПодлежащихДисконтированию * 100, 2);
					
					Если ЗначениеСкидки <> НовоеЗначениеСкидкиНаЧек Тогда
						
						ЗначениеСкидки = НовоеЗначениеСкидкиНаЧек;
						СкидкаПревышена = Истина;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПровестиРасчетСкидок И СкидкаПревышена Тогда
				
				ТекстПредупреждения = СтрШаблон(НСтр(
					"ru = 'Максимальная величина ручной скидки: %1 %%.'"), ЗначениеСкидки);
				ПоказатьПредупреждение(, ТекстПредупреждения);
				
			КонецЕсли;
			
			Если ПримененаСкидкаНаЧек Тогда
				ЦветФонаАктивнойКнопки = Новый Цвет(224, 224, 224);
			КонецЕсли;
			
			Элементы.СкидкаНаЧекПроцентом.ЦветФона = ЦветФонаАктивнойКнопки;
			ДоступностьСкидкиСуммой = НЕ ПримененаСкидкаНаЧек;
			УстановитьДоступностьЭлементаФормы(Элементы.ЗначениеСкидкиНаЧек, ДоступностьСкидкиСуммой);
			ТекущийТоварИдентификатор = ИдентификаторТекущейСтрокиДоРасчетаСкидок;
			
			Если ЭтоРасчетСкидкиНаНабор Тогда
				
				УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварСкидка, ДоступностьСкидкиСуммой);
				Элементы.СкидкаТекущийТоварПроцент.ЦветФона = ЦветФонаАктивнойКнопки;
				Элементы.СкидкаТекущийТоварСумма.ЦветФона = ЦветФонаНеактивнойКнопки;
				
			КонецЕсли;
			
		ИначеЕсли ЭтоРасчетСкидкиНаНабор Тогда
			
			Для Каждого ПозицияНабора Из Позиции Цикл
				РучнаяСкидкаПроцентомПоСтроке(ПозицияНабора);
			КонецЦикла;

		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкидкаНаЧекСуммой(Команда)
	
	Позиции = Объект.Товары;
	РассчитатьРучнуюСкидкуСуммойНаПозиции(Позиции, ЗначениеСкидкиНаЧек);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьРучнуюСкидкуСуммойНаПозиции(Позиции, ЗначениеСкидки)
	
	Если Позиции.Количество() > 0 Тогда
		
		ЭтоРасчетСкидкиНаНабор = Истина;
		
		Для Каждого СтрокаКорзины Из Позиции Цикл
			
			Если СтрокаКорзины.НомерНабора = 0 Тогда
				
				ЭтоРасчетСкидкиНаНабор = Ложь;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЭтоРасчетСкидкиНаЧек = (Позиции.Количество() = Объект.Товары.Количество());
		
		Если ЭтоРасчетСкидкиНаЧек Тогда
			
			ПровестиРасчетСкидок		= Истина;
			ПересчитатьСкидкуСуммой		= Истина;
			СкидкаПревышена				= Ложь;
			ЦветФонаНеактивнойКнопки	= Новый Цвет;
			ЦветФонаАктивнойКнопки		= ЦветФонаНеактивнойКнопки;
			РаспределенныеСкидки		= Новый Массив;
			ТочностьОкругления			= 2;
			МассивКоэффициентов			= Новый Массив;
			
			Если Не (ПримененаСкидкаНаЧек Или СуммаКОплате = 0) Тогда
				
				МаксимальноеЗначениеСкидки = 0;
				
				Для Каждого СтрокаКорзины Из Объект.Товары Цикл
					
					МассивКоэффициентов.Добавить(СтрокаКорзины.СуммаБезСкидки);
					
					МаксимальнаяСкидкаПоСтроке = Окр(
					СтрокаКорзины.СуммаБезСкидки * МаксимальныйПроцентРучнойСкидки / 100, ТочностьОкругления);
					
					Если ЗначениеЗаполнено(СтрокаКорзины.МинимальнаяЦена) Тогда
						
						МаксимальнаяСкидкаПоСтрокеСУчетомМинимальнойЦены = Окр(
							(СтрокаКорзины.Цена - СтрокаКорзины.МинимальнаяЦена) * СтрокаКорзины.Количество, ТочностьОкругления);
						
						Если МаксимальнаяСкидкаПоСтроке > МаксимальнаяСкидкаПоСтрокеСУчетомМинимальнойЦены Тогда
							МаксимальнаяСкидкаПоСтроке = МаксимальнаяСкидкаПоСтрокеСУчетомМинимальнойЦены;
						КонецЕсли;
						
					КонецЕсли;
					
					МаксимальноеЗначениеСкидки = МаксимальноеЗначениеСкидки + МаксимальнаяСкидкаПоСтроке;
					
				КонецЦикла;
				
				Если ЗначениеСкидки > МаксимальноеЗначениеСкидки Тогда
					
					ЗначениеСкидки = МаксимальноеЗначениеСкидки;
					СкидкаПревышена = Истина; 
					
					Если ЭтоРасчетСкидкиНаНабор Тогда
						ТекущийТоварСкидка = ЗначениеСкидки;
					КонецЕсли;
					
				КонецЕсли;
				
				ОтображаетсяСкидкаСуммойНаЧек = Истина;
				ОтображаетсяСкидкаПроцентомНаЧек = Ложь;
				
			ИначеЕсли ПримененаСкидкаНаЧек И ОтображаетсяСкидкаПроцентомНаЧек Тогда
				ПровестиРасчетСкидок = Ложь;
			Иначе
				
				ЗначениеСкидкиНаЧек = 0;
				ПересчитатьСкидкуСуммой = Ложь;
				
				Если ЭтоРасчетСкидкиНаНабор Тогда
					ТекущийТоварСкидка = 0;
				КонецЕсли;
				
			КонецЕсли;
			
			ИдентификаторТекущейСтрокиДоРасчетаСкидок = ТекущийТоварИдентификатор;
			
			Если ПровестиРасчетСкидок Тогда
				
				ЭтоСкидкаПроцентом = Ложь;
				ТребуетсяРаспределение = Истина;
				РаспределяемаяСумма = ЗначениеСкидки;
				РаспределенныеИндексы = Новый Массив;
				
				Пока ТребуетсяРаспределение Цикл
					
					ТребуетсяРаспределение = Ложь;
					
					РаспределенныеСкидки =
						ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(РаспределяемаяСумма,
							МассивКоэффициентов, ТочностьОкругления);
					
					ТекущийИндекс = 0;
					
					Для Каждого СтрокаКорзины Из Объект.Товары Цикл
						
						ТекущийТоварИдентификатор = СтрокаКорзины.ПолучитьИдентификатор();
						
						Если РаспределяемаяСумма > 0 И РаспределенныеСкидки <> Неопределено Тогда
							
							Если РаспределенныеИндексы.Найти(ТекущийИндекс) = Неопределено Тогда
								
								СуммаСкидкиПоСтроке = РаспределенныеСкидки[ТекущийИндекс];
								
								Если ЗначениеЗаполнено(СтрокаКорзины.МинимальнаяЦена) Тогда
									
									МаксимальнаяСкидкаПоСтрокеСУчетомМинимальнойЦены =
										Окр((СтрокаКорзины.Цена - СтрокаКорзины.МинимальнаяЦена)
											* СтрокаКорзины.Количество, ТочностьОкругления);
									
									Если СуммаСкидкиПоСтроке > МаксимальнаяСкидкаПоСтрокеСУчетомМинимальнойЦены Тогда
										
										СуммаСкидкиПоСтроке = МаксимальнаяСкидкаПоСтрокеСУчетомМинимальнойЦены;
										
										ТребуетсяРаспределение = Истина;
										РаспределяемаяСумма = РаспределяемаяСумма - СуммаСкидкиПоСтроке;
										РаспределенныеИндексы.Добавить(ТекущийИндекс);
										
										МассивКоэффициентов[ТекущийИндекс] = 0;
										
									КонецЕсли;
									
								КонецЕсли;
								
								СтрокаКорзины.ОтображаетсяСкидкаСуммой		= СуммаСкидкиПоСтроке > 0;
								СтрокаКорзины.ОтображаетсяСкидкаПроцентом	= Ложь;
								
								УстановитьЗначенияСкидкиВСтрокеКорзины(СтрокаКорзины, СуммаСкидкиПоСтроке, ЭтоСкидкаПроцентом);
								РассчитатьСуммуВСтрокеТабличнойЧасти(ТекущийТоварИдентификатор);
								ОбновитьИнформациюНаДисплееПокупателя("ИзменениеЦены");
								
							КонецЕсли;
							
						Иначе
							
							СтрокаКорзины.ОтображаетсяСкидкаСуммой		= Ложь;
							СтрокаКорзины.ОтображаетсяСкидкаПроцентом	= Ложь;
							
							УстановитьЗначенияСкидкиВСтрокеКорзины(СтрокаКорзины, 0, ЭтоСкидкаПроцентом);
							РассчитатьСуммуВСтрокеТабличнойЧасти(ТекущийТоварИдентификатор);
							ОбновитьИнформациюНаДисплееПокупателя("ИзменениеЦены");
							
						КонецЕсли;
						
						ТекущийИндекс = ТекущийИндекс + 1;
						
					КонецЦикла;
					
				КонецЦикла;
				
				ПримененаСкидкаНаЧек = ЗначениеСкидки > 0;
				
			КонецЕсли;
			
			Если ПересчитатьСкидкуСуммой Тогда
				
				СуммаТоваровПодлежащихДисконтированию = 0;
				Для Каждого СтрокаКорзины Из Объект.Товары Цикл
					
					Если ДопускаетсяПрименениеСкидокНаТовар(СтрокаКорзины) Тогда
						СуммаТоваровПодлежащихДисконтированию = СуммаТоваровПодлежащихДисконтированию
							+ СтрокаКорзины.СуммаБезСкидки;
					КонецЕсли;
					
				КонецЦикла;
				
				Если СуммаТоваровПодлежащихДисконтированию > 0 Тогда
					
					ОтображаетсяСкидкаСуммойНаЧек			= Истина;
					ОтображаетсяСкидкаПроцентомНаЧек		= Ложь;
					Элементы.СкидкаНаЧекПроцентом.ЦветФона	= ЦветФонаНеактивнойКнопки;
					НовоеЗначениеСкидкиНаЧек = Объект.Товары.Итог("СуммаСкидкиНаценки");
					
					Если ЗначениеСкидки <> НовоеЗначениеСкидкиНаЧек Тогда
						
						ЗначениеСкидки = НовоеЗначениеСкидкиНаЧек;
						СкидкаПревышена = Истина;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПровестиРасчетСкидок И СкидкаПревышена Тогда
				
				ТекстПредупреждения = СтрШаблон(НСтр("ru = 'Максимальная величина ручной скидки: %1 руб.'"),
					ЗначениеСкидки);
				ПоказатьПредупреждение(, ТекстПредупреждения);
				
			КонецЕсли;
			
			Если ПримененаСкидкаНаЧек Тогда
				ЦветФонаАктивнойКнопки = Новый Цвет(224, 224, 224);
			КонецЕсли;
			
			Элементы.СкидкаНаЧекСуммой.ЦветФона = ЦветФонаАктивнойКнопки;
			ДоступностьСкидкиПроцентом = Не ПримененаСкидкаНаЧек;
			УстановитьДоступностьЭлементаФормы(Элементы.ЗначениеСкидкиНаЧек, ДоступностьСкидкиПроцентом);
			ТекущийТоварИдентификатор = ИдентификаторТекущейСтрокиДоРасчетаСкидок;
			
			Если ЭтоРасчетСкидкиНаНабор Тогда
				
				УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварСкидка, ДоступностьСкидкиПроцентом);
				Элементы.СкидкаТекущийТоварСумма.ЦветФона = ЦветФонаАктивнойКнопки;
				Элементы.СкидкаТекущийТоварПроцент.ЦветФона = ЦветФонаНеактивнойКнопки;
				
			КонецЕсли;
			
		ИначеЕсли ЭтоРасчетСкидкиНаНабор Тогда
			РассчитатьРучнуюСкидкуСуммойНаНабор(Позиции, ЗначениеСкидки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьРучнуюСкидкуСуммойНаНабор(Набор, ЗначениеСкидки)
	
	Если Набор.Количество() > 0 Тогда
		
		ПримененаСкидкаНаНабор = Истина;
		ДопустимоПрименениеСкидок = Истина;
		ВесьНаборОплаченБонусами = Истина;
		ОтображаетсяСкидкаПроцентомНаНабор = Истина;
		ОтображаетсяСкидкаСуммойНаНабор = Истина;
		
		Для Каждого СтрокаКорзины Из Набор Цикл
			
			ДопустимоПрименениеСкидок = ДопустимоПрименениеСкидок И ДопускаетсяПрименениеСкидокНаТовар(СтрокаКорзины);
			ВесьНаборОплаченБонусами = ВесьНаборОплаченБонусами
				И (СтрокаКорзины.Сумма = СтрокаКорзины.СуммаСкидкиОплатыБонусом);
			ОтображаетсяСкидкаПроцентомНаНабор = ОтображаетсяСкидкаПроцентомНаНабор
				И СтрокаКорзины.ОтображаетсяСкидкаПроцентом;
			ОтображаетсяСкидкаСуммойНаНабор = ОтображаетсяСкидкаСуммойНаНабор
				И СтрокаКорзины.ОтображаетсяСкидкаСуммой;
			ПримененаСкидкаНаНабор = ПримененаСкидкаНаНабор И (СтрокаКорзины.СуммаСкидкиНаценки > 0);
			
		КонецЦикла;
		
			ПровестиРасчетСкидок		= Истина;
			ПересчитатьСкидкуСуммой		= Истина;
			СкидкаПревышена				= Ложь;
			ЦветФонаНеактивнойКнопки	= Новый Цвет;
			ЦветФонаАктивнойКнопки		= ЦветФонаНеактивнойКнопки;
			РаспределенныеСкидки		= Новый Массив;
			ТочностьОкругления			= 2;
			МассивКоэффициентов			= Новый Массив;
			
			Если ДопустимоПрименениеСкидок И Не (ПримененаСкидкаНаНабор Или СуммаКОплате = 0)
				И НЕ (ТекущийТоварСкидка = 0 Или ВесьНаборОплаченБонусами)Тогда
				
				МаксимальноеЗначениеСкидки = 0;
				
				Для Каждого СтрокаКорзины Из Набор Цикл
					
					МассивКоэффициентов.Добавить(СтрокаКорзины.СуммаБезСкидки);
					
					МаксимальнаяСкидкаПоСтроке = Окр(СтрокаКорзины.СуммаБезСкидки
						* МаксимальныйПроцентРучнойСкидки / 100, ТочностьОкругления);
					
					Если ЗначениеЗаполнено(СтрокаКорзины.МинимальнаяЦена) Тогда
						
						МаксимальнаяСкидкаПоСтрокеСУчетомМинимальнойЦены =
							Окр((СтрокаКорзины.Цена - СтрокаКорзины.МинимальнаяЦена) * СтрокаКорзины.Количество, ТочностьОкругления);
						
						Если МаксимальнаяСкидкаПоСтроке > МаксимальнаяСкидкаПоСтрокеСУчетомМинимальнойЦены Тогда
							МаксимальнаяСкидкаПоСтроке = МаксимальнаяСкидкаПоСтрокеСУчетомМинимальнойЦены;
						КонецЕсли;
						
					КонецЕсли;
					
					МаксимальноеЗначениеСкидки = МаксимальноеЗначениеСкидки + МаксимальнаяСкидкаПоСтроке;
					
				КонецЦикла;
				
				Если ЗначениеСкидки > МаксимальноеЗначениеСкидки Тогда
					
					ЗначениеСкидки = МаксимальноеЗначениеСкидки;
					СкидкаПревышена = Истина;

				КонецЕсли;
				
			ИначеЕсли ПримененаСкидкаНаНабор И ДопустимоПрименениеСкидок И ОтображаетсяСкидкаПроцентомНаНабор Тогда
				
				ПровестиРасчетСкидок = Ложь;
				СкидкаНаНабор = 0;
				
				Для Каждого СтрокаЧека Из Набор Цикл
					
					СтрокаЧека.ОтображаетсяСкидкаПроцентом = Ложь;
					СкидкаНаНабор = СкидкаНаНабор + СтрокаЧека.СуммаСкидкиНаценки;
					СтрокаЧека.ОтображаетсяСкидкаСуммой = Истина;
					
				КонецЦикла;
				
				ТекущийТоварСкидка = СкидкаНаНабор;
				
			Иначе
				
				ПересчитатьСкидкуСуммой = Ложь;
				ТекущийТоварСкидка = 0;
				
			КонецЕсли;
			
			ИдентификаторТекущейСтрокиДоРасчетаСкидок = ТекущийТоварИдентификатор;
			
			Если ПровестиРасчетСкидок Тогда
				
				ЭтоСкидкаПроцентом = Ложь;
				ТребуетсяРаспределение = Истина;
				РаспределяемаяСумма = ЗначениеСкидки;
				РаспределенныеИндексы = Новый Массив;
				
				Пока ТребуетсяРаспределение Цикл
					
					ТребуетсяРаспределение = Ложь;
					
					РаспределенныеСкидки =
						ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(РаспределяемаяСумма,
						МассивКоэффициентов, ТочностьОкругления);
					
					ТекущийИндекс = 0;
					
					Для Каждого СтрокаКорзины Из Набор Цикл
						
						ТекущийТоварИдентификатор = СтрокаКорзины.ПолучитьИдентификатор();
						
						Если РаспределяемаяСумма > 0 И РаспределенныеСкидки <> Неопределено Тогда
							
							Если РаспределенныеИндексы.Найти(ТекущийИндекс) = Неопределено Тогда
								
								СуммаСкидкиПоСтроке = РаспределенныеСкидки[ТекущийИндекс];
								
								Если ЗначениеЗаполнено(СтрокаКорзины.МинимальнаяЦена) Тогда
									
									МаксимальнаяСкидкаПоСтрокеСУчетомМинимальнойЦены =
										Окр((СтрокаКорзины.Цена - СтрокаКорзины.МинимальнаяЦена)
										* СтрокаКорзины.Количество, ТочностьОкругления);
									
									Если СуммаСкидкиПоСтроке > МаксимальнаяСкидкаПоСтрокеСУчетомМинимальнойЦены Тогда
										
										СуммаСкидкиПоСтроке = МаксимальнаяСкидкаПоСтрокеСУчетомМинимальнойЦены;
										
										ТребуетсяРаспределение = Истина;
										РаспределяемаяСумма = РаспределяемаяСумма - СуммаСкидкиПоСтроке;
										РаспределенныеИндексы.Добавить(ТекущийИндекс);
										
										МассивКоэффициентов[ТекущийИндекс] = 0;
										
									КонецЕсли;
									
								КонецЕсли;
								
								СтрокаКорзины.ОтображаетсяСкидкаСуммой		= СуммаСкидкиПоСтроке > 0;
								СтрокаКорзины.ОтображаетсяСкидкаПроцентом	= Ложь;
								
								УстановитьЗначенияСкидкиВСтрокеКорзины(СтрокаКорзины, СуммаСкидкиПоСтроке, ЭтоСкидкаПроцентом);
								РассчитатьСуммуВСтрокеТабличнойЧасти(ТекущийТоварИдентификатор);
								ОбновитьИнформациюНаДисплееПокупателя("ИзменениеЦены");
								
							КонецЕсли;
							
						Иначе
							
							СтрокаКорзины.ОтображаетсяСкидкаСуммой		= Ложь;
							СтрокаКорзины.ОтображаетсяСкидкаПроцентом	= Ложь;
							
							УстановитьЗначенияСкидкиВСтрокеКорзины(СтрокаКорзины, 0, ЭтоСкидкаПроцентом);
							РассчитатьСуммуВСтрокеТабличнойЧасти(ТекущийТоварИдентификатор);
							ОбновитьИнформациюНаДисплееПокупателя("ИзменениеЦены");
							
						КонецЕсли;
						
						ТекущийИндекс = ТекущийИндекс + 1;
						
					КонецЦикла;
					
				КонецЦикла;
				
				ПримененаСкидкаНаНабор = ЗначениеСкидки > 0;
				
			КонецЕсли;
			
			Если ПересчитатьСкидкуСуммой Тогда
				
				СуммаТоваровПодлежащихДисконтированию = 0;
				Для Каждого СтрокаКорзины Из Набор Цикл
					
					Если ДопускаетсяПрименениеСкидокНаТовар(СтрокаКорзины) Тогда
						СуммаТоваровПодлежащихДисконтированию = СуммаТоваровПодлежащихДисконтированию
							+ СтрокаКорзины.СуммаБезСкидки;
					КонецЕсли;
					
				КонецЦикла;
				
				Если СуммаТоваровПодлежащихДисконтированию > 0 Тогда
					
					Элементы.СкидкаТекущийТоварПроцент.ЦветФона	= ЦветФонаНеактивнойКнопки;
					НовоеЗначениеСкидкиНаНабор = 0;
					
					Для Каждого СтрокаКорзины Из Набор Цикл
						
						Если СтрокаКорзины.СуммаСкидкиНаценки > 0 Тогда
							НовоеЗначениеСкидкиНаНабор = НовоеЗначениеСкидкиНаНабор + СтрокаКорзины.СуммаСкидкиНаценки;
						КонецЕсли;
						
					КонецЦикла;

					Если ЗначениеСкидки <> НовоеЗначениеСкидкиНаНабор Тогда
						ТекущийТоварСкидка = НовоеЗначениеСкидкиНаНабор;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПровестиРасчетСкидок И СкидкаПревышена Тогда
				
				ТекстПредупреждения = СтрШаблон(НСтр("ru = 'Максимальная величина ручной скидки: %1 руб.'"),
					ЗначениеСкидки);
				ПоказатьПредупреждение(, ТекстПредупреждения);
				
			КонецЕсли;
			
			Если ПримененаСкидкаНаНабор Тогда
				ЦветФонаАктивнойКнопки = Новый Цвет(224, 224, 224);
			КонецЕсли;
			
			Элементы.СкидкаТекущийТоварСумма.ЦветФона	= ЦветФонаНеактивнойКнопки;
			ДоступностьСкидкиПроцентом = Не ПримененаСкидкаНаНабор;
			ТекущийТоварИдентификатор = ИдентификаторТекущейСтрокиДоРасчетаСкидок;
	
			УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварСкидка, ДоступностьСкидкиПроцентом);
			Элементы.СкидкаТекущийТоварСумма.ЦветФона = ЦветФонаАктивнойКнопки;
			Элементы.СкидкаТекущийТоварПроцент.ЦветФона = ЦветФонаНеактивнойКнопки;
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура СохранитьДанныеКарты(Команда)
	
	Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		
		СохранитьДанныеКартыСервер();
		
		ОтправкаЧекаПочта	= НайденнаяКартаПочта;
		ОтправкаЧекаТелефон	= НайденнаяКартаТелефон;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьКарту(Команда)
	
	Если НЕ Элементы.НайденнаяКартаНомер.ТолькоПросмотр Тогда
		
		НомерКартыДоИзменения = НайденнаяКартаНомер;
		ИзменитьДоступностьПолейНайденнойКарты();
		Возврат;
		
	КонецЕсли;
	
	НеобходимоеПраво = НСтр("ru='ПравоРедактироватьКартуРМК'");
	
	Если ЕстьПравоНаДействие(НеобходимоеПраво) Тогда
		
		НомерКартыДоИзменения = НайденнаяКартаНомер;
		ИзменитьДоступностьПолейНайденнойКарты();
		
	Иначе
		ПредложитьЗаменитьПраваКассира(НеобходимоеПраво);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВводКарты(Команда)
	
	ОтменитьОплатуБонусами();
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаПоискКартыКартаНеНайдена, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаПоискКартыПоиск, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаПоискКартыКартаНайдена, Ложь);
	
	ИзменитьКартинкуВводПокупателя();
	
	ТекущийЭлемент = Элементы.СтрокаПоискаКарты;

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОплатуБонусами()
	
	СтрокаПоискаКарты = "";
	
	РазблокироватьОбъектСервисаЛояльности("clientbonuses");
	ОтменитьПримененныеБонусы();
	ОчиститьДанныеПокупателя();
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерии(Команда)
	ОткрытьСтраницуСерии();
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСерию(Команда)
	ВыбратьСериюДляТекущейСтроки();
КонецПроцедуры

&НаКлиенте
Процедура ОтменаВыбораСерии(Команда)
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОплата);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.СменитьКассира, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПанельИзбранныхТоваров(Команда)
	
	Панель = Элементы.ПанельИзбранныхТоваров;
	ПанельСкрыта = Панель.Скрыта();
	
	ДопустимоСворачиватьПанельИзбранныхТоваров = (Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОбщая);

	Если ДопустимоСворачиватьПанельИзбранныхТоваров Тогда
		
		Если ПанельСкрыта Тогда
			Панель.Показать();
		Иначе
			Панель.Скрыть();
		КонецЕсли;
		
	Иначе
		Панель.Показать();
	КонецЕсли;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПустая Тогда
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьБонусами(Команда)
	
	Если ПараметрыВводаКодаSMS = Неопределено Тогда
		ОплатитьБонусамиКлиент();
	Иначе
		ПереключитьНаСтраницуВводаКодаSMS(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКарту(Команда)
	
	ПереключитьНаСтраницуСозданиеКарты();
	
	Если ОбщегоНазначенияРМККлиентПереопределяемый.ЕстьОшибкиЗаполненияДанныхДисконтнойКарты(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтправлятьSMSКодПриЗаведенииКарты Тогда
		ПереключитьНаСтраницуВводаКодаSMS( ,Истина);
	Иначе
		СоздатьКартуКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискКарты(Команда)
	ОбработатьШтрихкодКлиент(СтрокаПоискаКарты);
КонецПроцедуры

&НаКлиенте
Процедура РаспечататьТоварныйЧек(Команда)
	
	Если ЗначениеЗаполнено(ПринтерЧеков) Тогда
		РаспечататьТоварныйЧекКлиент();
	Иначе
		
		ТекстЗаголовка = НСтр("ru = 'Принтер чеков не подключен.'");
		ТекстСообщения = НСтр("ru = 'Не удалось распечатать товарный чек на принтере чеков.'");
		ПоказатьПредупреждение(, ТекстСообщения,, ТекстЗаголовка);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьИзмененияЧека(Команда)
	
	Результат = Новый Структура;
	Результат.Вставить("ЧекККМ", ЧекККМПродажа);
	ДополнительныеПараметры = Неопределено;
	ВыборЧекаЗавершение(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтчетБезГашения(Команда)
	
	Если ИспользоватьПодключаемоеОборудование И ЗначениеЗаполнено(ПодключаемоеОборудование) Тогда
		СнятьОтчетБезГашенияКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпровергнутьВозраст(Команда)
	
	ВыбранОтложенныйЧек = СостояниеПодтвержденияВозраста = "ВыбранОтложенныйЧек";
	СостояниеПодтвержденияВозраста = "Нет18";
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОперации, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
	
	Если ВыбранОтложенныйЧек И ЗначениеЗаполнено(ОтложенныйЧек) Тогда
		ПродолжитьЧекКлиентЗавершение();
	ИначеЕсли НЕ ДанныеДобавляемогоТовара = Неопределено
		И НЕ ДанныеДобавляемогоТовара.Свойство("ВыборТовараВручную") Тогда
		
			Строка = Объект.Товары.НайтиПоИдентификатору(ДанныеДобавляемогоТовара.ИдентификаторСтроки);
			Объект.Товары.Удалить(Строка);
			
			ОграничитьДоступностьЭлементовПриОжиданииМарки(Ложь);
			ДанныеДобавляемогоТовара = Неопределено;
		
	ИначеЕсли НЕ ДанныеДобавляемогоТовара = Неопределено Тогда
		
		РучноеСопоставлениеТовара = Ложь;
		ДанныеДляРучногоСопоставления = Неопределено;
		КодМаркиВРаботе = НСтр("ru = ''");
		ОграничитьДоступностьЭлементовПриОжиданииМарки(Ложь);
		ДанныеДобавляемогоТовара = Неопределено;
		
		Если СписокДобавленныхСтрокТоваров.Количество() > 0 Тогда
			
			Для Каждого ДобавленныйТовар Из СписокДобавленныхСтрокТоваров Цикл
				
				СтрокаТовары = Объект.Товары.НайтиПоИдентификатору(ДобавленныйТовар.Значение);
				
				Если НЕ СтрокаТовары = Неопределено Тогда
					
					СтруктураПоискаНабора = Новый Структура;
					СтруктураПоискаНабора.Вставить("НомерНабора", СтрокаТовары.НомерНабора);
					МассивСтрокТоваров = Объект.Товары.НайтиСтроки(СтруктураПоискаНабора);
					
					Для Каждого СтрокаМассива Из МассивСтрокТоваров Цикл
						Объект.Товары.Удалить(СтрокаМассива);
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
			УстановитьАктивностьСтроки();
			ПересчитатьИтогиТабличнойЧастиТовары();
			ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОплата);
			СписокДобавленныхСтрокТоваров.Очистить();
			
		КонецЕсли;
	
	КонецЕсли;
	
	ДанныеДобавляемогоТовара = Неопределено;
	
	Если Объект.Товары.Количество() = 0 Тогда
		
		СостояниеПодтвержденияВозраста = "";
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПустая);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьВозраст(Команда)
	
	ВыбранОтложенныйЧек = СостояниеПодтвержденияВозраста = "ВыбранОтложенныйЧек";
	СостояниеПодтвержденияВозраста = "Есть18";
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОперации, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
	
	Если ВыбранОтложенныйЧек И ЗначениеЗаполнено(ОтложенныйЧек) Тогда
		ПродолжитьЧекКлиентЗавершение();
	ИначеЕсли НЕ ДанныеДобавляемогоТовара = Неопределено
		И НЕ ДанныеДобавляемогоТовара.Свойство("ВыборТовараВручную") Тогда
			ОбработатьШтрихкодЗавершение(ДанныеДобавляемогоТовара);
	ИначеЕсли НЕ ДанныеДобавляемогоТовара = Неопределено Тогда
		СписокТоваровВыборПродолжение();
	КонецЕсли;
	
	ДанныеДобавляемогоТовара = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродажаПоЗаказу(Команда)
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='Перед началом операции необходимо пробить, удалить или отложить текущий чек.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	ОбщегоНазначенияРМККлиентПереопределяемый.ВыбратьДокументЗаказПокупателя(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьРаботуСЧеком(Команда)
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОперации, Истина);
		
	Иначе
		СоздатьНовыйНабор();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура БезналичныеПлатежи(Команда)
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='Перед началом операции необходимо пробить, удалить или отложить текущий чек.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	ОбщегоНазначенияРМККлиентПереопределяемый.ВыбратьДокументБезналичнойОплаты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриемАванса(Команда)
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='Перед началом операции необходимо пробить, удалить или отложить текущий чек.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	Если ОбщегоНазначенияРМККлиентПереопределяемый.ВидОперацииСкупка(Объект.ВидОперации) Тогда
		ПереключитьРежимНаПродажа();
	КонецЕсли;
	
	СформироватьЗаголовок(НСтр("ru='Прием аванса'"));
	
	ПриемАванса = Истина;
	Объект.ОперацияСДенежнымиСредствами = Истина;
	
	НастроитьЭлементыФормы(Элементы.СтраницаОбщая, Ложь);
	
	ИспользуютсяДокументыРасчета = Элементы.ДокументРасчета.Видимость;
	
	Если ИспользуютсяДокументыРасчета Тогда
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПравоДанныеПокупателя);
		ТекущийЭлемент = Элементы.СтрокаПоискаКарты;
	Иначе
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПравоОбщая);
	КонецЕсли;
	
	УстановитьДоступностьЭлементаФормы(Элементы.Каталог, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаНаЧек, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.НайтиВЧеке, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ОткрытьПанельИзбранныхТоваров, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаРедактированияСтрокиКорзины, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаВРассрочку, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.Предоплата, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ЗачетАванса, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.УдалитьЧек, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОтложитьЧек, Истина);
	
	Объект.Товары.Очистить();
	
	НоваяСтрокаТовары = Объект.Товары.Добавить();
	НоваяСтрокаТовары.ПредставлениеНоменклатураХарактеристика = НСтр("ru = 'Аванс'");
	НоваяСтрокаТовары.ПредставлениеЕдиницыИзмерения = НСтр("ru = 'шт'");
	НоваяСтрокаТовары.Количество = 1;
	НоваяСтрокаТовары.КоличествоУпаковок = 1;
	НоваяСтрокаТовары.СистемаНалогообложения = СистемаНалогообложенияОрганизацииПоУмолчанию;
	НоваяСтрокаТовары.Организация = ОсновнаяОрганизация;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументРасчета(Команда)
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='Перед началом операции необходимо пробить, удалить или отложить текущий чек.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументРасчета) Тогда
		СоздатьНовыйНабор();
		Возврат;
	Иначе
		ОбщегоНазначенияРМККлиентПереопределяемый.ВыбратьДокументРасчета(ЭтотОбъект);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент)
		И ОбщегоНазначенияРМККлиентПереопределяемый.ЗапрещенаПредоплатаБезКонтрагента() Тогда
		
		НастроитьЭлементыФормы(Элементы.СтраницаОбщая, Ложь);
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПравоДанныеПокупателя);
		ТекущийЭлемент = Элементы.СтрокаПоискаКарты;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПродавца(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборПродавцаЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.РабочееМестоКассира.Форма.ФормаВыбораПродавца",, ЭтотОбъект,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПродавца(Команда)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Продавец = Неопределено;
	Если ТекущиеДанные.ЭтоНабор Тогда
		НомерНабора = ТекущиеДанные.НомерНабора;
		ЗаполнитьПродавцаВНаборе(Продавец, НомерНабора);
	Иначе
		ТекущиеДанные.Продавец = Продавец;
	КонецЕсли;
	
	УстановитьВидимостьЭлементаФормы(Элементы.СтраницаДобавлениеПродавца, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.СтраницаПродавецВыбран, Ложь);
	
	ТекущийПродавец = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьДобавлениеТовараПослеПроверкиМарки(Команда)
	
	УстановитьДоступностьЭлементовРабочейОбластиФормы(Истина);
	
	Если ЗначениеЗаполнено(ВременныйКонтекстПроверкиМарки)Тогда
		НачатьПодтверждениеМарки(ВременныйКонтекстПроверкиМарки);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОтказатьсяОтДобавленияТовараСНепровереннойМаркой(Команда)
	ОтказатьсяОтДобавленияТовара();
КонецПроцедуры

&НаКлиенте
Процедура НайтиПоШтрихкоду(Команда)
	
	Оповещение = Новый ОписаниеОповещения("РучнойВводШтрихкодаПослеВвода", ЭтотОбъект);
	ЗаголовокОкнаВвода = НСтр("ru = 'Введите штрихкод'");
	ПоказатьВводЗначения(Оповещение, "", ЗаголовокОкнаВвода);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаСертификатом(Команда) 
	
	Если ИспользоватьАвтоматическиеСкидки И Не СкидкиРассчитаны И ВопросПоРасчетуСкидок Тогда
		ЗадатьВопросПоРасчетуСкидок("ОплатаСертификатомЗавершение",, Истина);
	Иначе	
		ОплатаСертификатомЗавершение(?(ВопросПоРасчетуСкидок Или СкидкиРассчитаны, КодВозвратаДиалога.Нет, КодВозвратаДиалога.Да));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиСертификат(Команда)
	
	Если Не ЗначениеЗаполнено(НомерСертификата) Тогда 
		
		ТекстОшибки = НСтр("ru = 'Введите номер сертификата'");
		ПоказатьПредупреждение(, ТекстОшибки);
		Возврат;
		
	КонецЕсли;
	
	Если ОбщегоНазначенияРМККлиентПереопределяемый.НуженЗапросСертификата() Тогда
		НайтиСертификатКлиент();
	Иначе
		НайтиСертификатЛокально();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиСертификатКлиент()
	
	Если ИспользоватьСервисЛояльности Тогда
		
		ПараметрыМетода = ПараметрыМетодовБонуснойПодсистемы();
		
		ПараметрыЗапроса = ПараметрыЗапросаКСервисуЛояльности();
		ПараметрыЗапроса.ТипЗапроса = "GET";
		ПараметрыЗапроса.Ресурс = "getgiftcardinfo";
		ПараметрыЗапроса.ПараметрыМетода = ПараметрыМетода;
		
		Результат = ВыполнитьЗапросКСервисуЛояльности(ПараметрыЗапроса);
		
		Если Результат.ЕстьОшибки Тогда
			
			ТекстЗаголовка = НСтр("ru = 'Ошибка поиска подарочного сертификата.'");
			ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, Результат.ТекстОшибки);
			Возврат;
			
		КонецЕсли;
		
		СтрокаJSON = Результат.ДанныеОтвета;
		
		ДанныеОтвета = Неопределено;
		
		#Если ВебКлиент Тогда
			ПрочитатьJSONСервер(СтрокаJSON, ДанныеОтвета);
		#Иначе
			ПрочитатьJSONКлиент(СтрокаJSON, ДанныеОтвета);
		#КонецЕсли
		
		Если НЕ ДанныеОтвета = Неопределено Тогда 
			
			Если ДанныеОтвета.Свойство("Error") И НЕ ДанныеОтвета.Error Тогда
				
				СуммаСертификата = ДанныеОтвета.GiftCardBalance;
				
				ГУИД = ДанныеОтвета.GiftCard.GiftCardRef;
				ПодарочныйСертификат = ПолучитьСертификатПоГУИД(ГУИД);
				
				УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияСуммаСертификата, Истина);
				УстановитьВидимостьЭлементаФормы(Элементы.ОплатитьСертификатом, Истина);
				УстановитьВидимостьЭлементаФормы(Элементы.НайтиСертификат, Ложь);
				УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияОплатаСертификатами, Ложь);
				УстановитьВидимостьЭлементаФормы(Элементы.НомерСертификата, Ложь);
				УстановитьДоступностьЭлементаФормы(Элементы.ОплатитьСертификатом, СуммаСертификата > 0);
				
				ТекущийЭлемент = ?(СуммаСертификата > 0, Элементы.ОплатитьСертификатом, Элементы.ОтменаПоискаСертификата);
				
				ТекстСообщения = СтрШаблон(НСтр("ru = 'У клиента %1 рублей'"), Формат(СуммаСертификата,
					"ЧЦ=15; ЧДЦ=2; ЧН=0,00"));
				Элементы.ДекорацияСуммаСертификата.Заголовок = ТекстСообщения;
				
			ИначеЕсли ДанныеОтвета.Свойство("Error") И ДанныеОтвета.Error Тогда
				
				ТекстЗаголовка = НСтр("ru = 'Ошибка поиска подарочного сертификата.'");
				ТекстОшибки = СтрШаблон(НСтр("ru = '%1'"), ДанныеОтвета.ErrorMessage);
				ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НайтиСертификатЛокально()
	
	ОбщегоНазначенияРМКПереопределяемый.НайтиСертификатЛокально(ЭтотОбъект);
	
	Если Не СуммаСертификата = 0 И ЗначениеЗаполнено(ПодарочныйСертификат) Тогда
		
		УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияСуммаСертификата, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.ОплатитьСертификатом, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.НайтиСертификат, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияОплатаСертификатами, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.НомерСертификата, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатитьСертификатом, СуммаСертификата > 0);
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'У клиента %1 руб.'"), Формат(СуммаСертификата,
			"ЧЦ=15; ЧДЦ=2; ЧН=0,00"));
		Элементы.ДекорацияСуммаСертификата.Заголовок = ТекстСообщения;
		
	Иначе
		
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаИнфоОшибка);
		ТекстЗаголовка = НСтр("ru = 'Ошибка поиска подарочного сертификата.'");
		Элементы.ТекстПредупреждениеЗаголовок.Заголовок = ТекстЗаголовка;
		
		ТекстОшибки = НСтр("ru = 'Сертификат не найден.'");
		
		Если СуммаСертификата = 0 Тогда
			ТекстОшибки = НСтр("ru = 'Сертификат не активирован или полностью погашен.'");
		КонецЕсли;
		
		Элементы.ТекстПредупреждениеОшибка.Заголовок = ТекстОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаПоискаСертификата(Команда)
	
	НастроитьВидимостьОплатыПодарочнымиСертификатами();
	РазблокироватьСертификат = (СуммаСертификата > 0);
	ОчиститьДанныеПодарочногоСертификата(РазблокироватьСертификат);
	ТекущийЭлемент = Элементы.НомерСертификата;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьСертификатом(Команда)
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПравоОбщая);
	
	СуммаСертификата = Мин(СуммаКОплате, СуммаСертификата);
	
	ДобавитьСертификатВТаблицу();
	ДобавитьРеквизиты(НомерСертификата);
	
	СуммаОстаткаСертификатов = ТаблицаПодарочныхСертификатов.Итог("СуммаСертификата");
	СуммаОплаченоСертификатами = СуммаОстаткаСертификатов;
	
	ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
	ПараметрыПересчета.ПоКомандеОплатитьСертификатом = Истина;
	РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
	
	НастроитьВидимостьОплатыПодарочнымиСертификатами(, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСменуИзРежимаВыбораКассы(Команда)
	
	ОткрытьСменуКлиент();
	
	ПриПереключенииКассыККМ();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьСменуИзРежимаВыбораКассы(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗакрытьСменуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Вы уверены, что хотите закрыть смену?'");
	ЗаголовокВопроса = НСтр("ru='Закрытие смены'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,, ЗаголовокВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходИзРежимаВыбораКассы(Команда)
	
	ТекущаяОперация = НСтр("ru=''");
	КассаККМДляОперации = Неопределено;
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПустая);
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПравоОбщая);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьЧекПродажи(Команда)
	
	ИмяКоманды = Команда.Имя;
	
	Элементы.ПереключитьЧекСНООСН.Пометка = Ложь;
	Элементы.ПереключитьЧекСНОУСНДоход.Пометка = Ложь;
	Элементы.ПереключитьЧекСНОУСНДоходРасход.Пометка = Ложь;
	Элементы.ПереключитьЧекСНОЕСН.Пометка = Ложь;
	Элементы.ПереключитьЧекСНОПатент.Пометка = Ложь;
	
	Если ИмяКоманды = "ПереключитьЧекОрганизация1" Тогда
		
		Элементы.ПереключитьЧекОрганизация1.Пометка = Истина;
		Элементы.ПереключитьЧекОрганизация2.Пометка = Ложь;
		
	ИначеЕсли ИмяКоманды = "ПереключитьЧекОрганизация2" Тогда
		
		Элементы.ПереключитьЧекОрганизация1.Пометка = Ложь;
		Элементы.ПереключитьЧекОрганизация2.Пометка = Истина;
		
	ИначеЕсли Лев(ИмяКоманды, 17) = "ПереключитьЧекСНО" Тогда
		Элементы[ИмяКоманды].Пометка = Истина;
	КонецЕсли;
	
	ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
	ПараметрыПересчета.ПоКомандеПереключитьЧек = ИмяКоманды;
	
	РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерСертификатаПриИзменении(Элемент)
	ЭтаФорма.ТекущийЭлемент = Элементы.НайтиСертификат;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСертификат(Команда)
	
	НомерСертификата = "";
	СуммаСертификата = 0;
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаСертификатами, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаВыборОплаты, Ложь);
	ЭтаФорма.ТекущийЭлемент = Элементы.НомерСертификата;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЭквайринговыйТерминал(Команда)
	
	ТекущийТерминал = ЭквайринговыйТерминалВыполненияОперации;
	СтруктураПоиска = Новый Структура("ЭквайринговыйТерминал", ТекущийТерминал);
	
	РезультатПоиска = ТаблицаТерминалы.НайтиСтроки(СтруктураПоиска);
	
	Если РезультатПоиска.Количество() > 0 Тогда
		
		ДанныеВыбранногоТерминала = РезультатПоиска[0];
		
		Если НЕ ЭтоСторноОплатыПоКарте(ЧекККМПродажа, СуммаИтого, КассоваяСмена) Тогда
			ВыполнитьОплатуПоКарте(ДанныеВыбранногоТерминала);
		КонецЕсли;
		
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите эквайринговый терминал.'"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтказатьсяОтВыбораТерминала(Команда)
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОплата);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьSMSСКодомПроверки(Команда)
	СформироватьСообщениеИОтправитьSMS();
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЗаведениеКарты(Команда)
	
	ПараметрыВводаКодаSMS = Неопределено;
	Элементы.ОплатитьБонусами.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЗаголовок, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаВыборМеню, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаБонусыКартыЛояльности, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.СтраницаСозданиеКарты, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВводКодаSMS, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСертификатНСПК(Команда)
	
	ТоварныеПозиции = Новый Массив();
	ДополнительныеПараметры = Новый Структура();
	
	ЭтоВозврат = ОбщегоНазначенияРМККлиентПереопределяемый.ВидОперацииВозвратПродажи(Объект.ВидОперации);
	
	Если ПредварительноеОдобрениеНСПКПолучено Тогда
		
		СледующаяОперация = "ОплатитьЭлектроннымСертификатом";
		Если ЭтоВозврат Тогда
			СледующаяОперация = "ВернутьЭлектроннымСертификатом";
		КонецЕсли;
		
	Иначе
		
		СледующаяОперация = "ПредварительноеОдобрениеИспользования";
		Если ЭтоВозврат Тогда
			СледующаяОперация = "ПредварительноеОдобрениеВозврата";
		КонецЕсли;
		
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("СледующаяОперация", СледующаяОперация);
	
	Если ПредварительноеОдобрениеНСПКПолучено Тогда
		Если ЭтоВозврат Тогда
			ВернутьЭлектронныйСертификат(СледующаяОперация);
		Иначе
			ОплатитьЭлектроннымСертификатом(СледующаяОперация);
		КонецЕсли;
	Иначе
		
		Для Каждого СтрокаТоваров Из ТаблицаТоваровФСС Цикл
			
			ТоварнаяПозиция = Новый Структура();
			ТоварнаяПозиция.Вставить("НомерПозиции", СтрокаТоваров.НомерПозиции);
			ТоварнаяПозиция.Вставить("Артикул", СтрокаТоваров.Артикул);
			ТоварнаяПозиция.Вставить("КодТовараТРУ", СтрокаТоваров.КодТРУ);
			ТоварнаяПозиция.Вставить("Количество", СтрокаТоваров.Количество);
			ТоварнаяПозиция.Вставить("Цена", СтрокаТоваров.Цена);
			ТоварнаяПозиция.Вставить("НомерПозицииВозврата", СтрокаТоваров.НомерПозицииВозврата);
			ТоварныеПозиции.Добавить(ТоварнаяПозиция);
			
		КонецЦикла;
		
		ДополнительныеПараметры.Вставить("ТоварныеПозиции", ТоварныеПозиции);
		
		Если ЭтоВозврат Тогда
			ДополнительныеПараметры.Вставить("ИдентификаторКорзины", ИдентификаторКорзиныНСПК);
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьОперациюНСПКЗавершение", ЭтотОбъект,
			ДополнительныеПараметры);
		ОборудованиеПлатежныеСистемыКлиент.НачатьПолучениеПараметровКарты(ОписаниеОповещения, УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОплатуСертификатомНСПК(Команда)
	
	ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
	ПараметрыПересчета.ПоКомандеОтменитьОплатуСертификатомНСПК = Истина;
	РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
	
	ЭтоВозврат = ОбщегоНазначенияРМККлиентПереопределяемый.ВидОперацииВозвратПродажи(Объект.ВидОперации);
	НастроитьЭлементыВРежимеПроверкаСертификатаНСПК(Ложь, ЭтоВозврат);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидки(Команда)
	РассчитатьСкидкиКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ВернутьПозициюБезМарки(Команда)
	ДобавитьТоварБезМарки();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСерию(Команда)
	
	ВыборСерии = Неопределено;
	ТекущийЭлемент = Элементы.ВыборСерии;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПартию(Команда)
	
	ВыборПартии = Неопределено;
	ТекущийЭлемент = Элементы.ВыборПартии;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаРасчетаСкидок(Команда)
	ОтменитьСкидки();
КонецПроцедуры

&НаКлиенте
Процедура ВозвратСкупки(Команда)
	ПереключитьРежимНаВозвратСкупки();
КонецПроцедуры

&НаКлиенте
Процедура Скупка(Команда)
	ПереключитьРежимНаСкупка();
КонецПроцедуры

&НаКлиенте
Процедура СписатьАлкогольнуюПродукцию(Команда)
	ОбщегоНазначенияРМККлиентПереопределяемый.СписатьАлкогольнуюПродукцию(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОплатаРассрочки(Команда)
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='Перед началом операции необходимо пробить, удалить или отложить текущий чек.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументРасчета) Тогда
		СоздатьНовыйНабор();
		Возврат;
	Иначе
		
		ЭтоОплатаРассрочки = Истина;
		
		Если НЕ ЗначениеЗаполнено(Объект.Контрагент)
			И ОбщегоНазначенияРМККлиентПереопределяемый.ЗапрещенаПредоплатаБезКонтрагента() Тогда
			
			ТекстПредупреждения = НСтр("ru = 'Для оплаты рассрочки необходимо указать контрагента'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
			
			НастроитьЭлементыФормы(Элементы.СтраницаОбщая, Ложь);
			ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПравоДанныеПокупателя);
			ТекущийЭлемент = Элементы.СтрокаПоискаКарты;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВыбратьДокументОплатыРассрочки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОграниченияПродаж(Команда)
	ОбновитьОрганиченияПродажИнтерактивно();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПрограммаЛояльности

&НаКлиенте
Процедура СписатьБонусныеБаллы()
	
	Если ИспользоватьСервисЛояльности И ЗначениеЗаполнено(СуммаБонусов) Тогда
		
		ПараметрыМетода = ПараметрыМетодовБонуснойПодсистемы();
		ПараметрыМетода.Вставить("BonusesCount", Строка(СуммаБонусов));
		
		ПараметрыЗапроса = ПараметрыЗапросаКСервисуЛояльности();
		ПараметрыЗапроса.Ресурс = "writeoffclientbonuses";
		ПараметрыЗапроса.ПараметрыМетода = ПараметрыМетода;
		
		Результат = ВыполнитьЗапросКСервисуЛояльности(ПараметрыЗапроса);
		
		СтрокаОтвета = Результат.ДанныеОтвета;
		
		Если СтрокаОтвета = НСтр("ru = 'Бонусы успешно списаны'") Тогда
			
			Если ОжидаемоеКоличествоЧеков < 1 Тогда
				ОчиститьДанныеКартыЛояльности(); 
			КонецЕсли;
			
		Иначе
			РазблокироватьОбъектСервисаЛояльности("clientbonuses");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуОплатыБонусами()
	
	Если ИспользоватьСервисЛояльности И РассчитыватьБонусы И ЗначениеЗаполнено(КоличествоБонусов) Тогда
		
		СуммаКОплате = СуммаКОплате + СуммаБонусов;
		СуммаИтого = СуммаИтого + СуммаБонусов;
		СуммаБонусов = 0;
		
		МаксимальнаяСуммаОплатыБонусамиПоЧеку = СуммаИтого * ПроцентОплатыБонусами / 100;
		
		ОсталосьОплатитьЗаТовар = СуммаИтого - СуммаОплаченоНал - СуммаОплаченоБН
			- СуммаОплаченоБезнал - СуммаОплаченоВРассрочку - СуммаОплаченоЗачетАванса;
		СуммаБонусовКРаспределению = Окр(Мин(МаксимальнаяСуммаОплатыБонусамиПоЧеку, БонусыДоступноКОплате), 2);
		СуммаБонусовКРаспределениюСУчетомОплат = СуммаБонусовКРаспределению;
		
		Если ОсталосьОплатитьЗаТовар <> 0 Тогда
			СуммаБонусовКРаспределениюСУчетомОплат = Мин(СуммаБонусовКРаспределению, ОсталосьОплатитьЗаТовар);
		Иначе
			СуммаБонусовКРаспределениюСУчетомОплат = ОсталосьОплатитьЗаТовар;
		КонецЕсли;
		
		СуммаБонусов = СуммаБонусовКРаспределениюСУчетомОплат;
		СуммаОплаченоБонусами = СуммаБонусовКРаспределениюСУчетомОплат;
		
		РаспределитьБонусыПоТоварам();
		ОбнулитьСуммыОплат = Ложь;
		ПересчитатьИтогиТабличнойЧастиТовары(ОбнулитьСуммыОплат);
		
		РаспределенныеБонусы = Объект.Товары.Итог("СуммаСкидкиОплатыБонусом");
		
		МаксимальноеКоличествоБонусовКИспользованию = ?(СуммаБонусовКРаспределениюСУчетомОплат > РаспределенныеБонусы,
			РаспределенныеБонусы,
			СуммаБонусовКРаспределению);
		
		СоставляющаяПодсказки = СтрШаблон(НСтр("ru = 'до %1 р.'"),
			Формат(МаксимальноеКоличествоБонусовКИспользованию, "ЧЦ=10; ЧДЦ=2"));
		ТекстПодсказки = СтрШаблон("%1%2%3", НСтр("ru = 'Бонусы'"), Символы.ПС, СоставляющаяПодсказки);
		Элементы.СуммаОплаченоБонусами.Подсказка = ТекстПодсказки;
		Элементы.СуммаОплаченоБонусами.МаксимальноеЗначение = МаксимальноеКоличествоБонусовКИспользованию;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДанныеКартыЛояльности()
	
	ПустаяСтрока = НСтр("ru = ''");
	
	НайденнаяКартаДатаРождения	= ПустаяСтрока;
	НайденнаяКартаНомер			= ПустаяСтрока;
	НайденнаяКартаПочта			= ПустаяСтрока;
	НайденнаяКартаТелефон		= ПустаяСтрока;
	НайденнаяКартаФИО			= ПустаяСтрока;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПримененныеБонусы(ОчиститьДанныеКартыЛояльностиПокупателя = Истина)
	
	Если ИспользоватьСервисЛояльности Тогда
		
		СуммаИтого = СуммаИтого + СуммаОплаченоБонусами;
		СуммаБонусов = 0;
		СуммаОплаченоБонусами = 0;
		НастроитьДоступностьПробитьЧек();
		Сдача = 0;
		ЭтоОплатаВстречнымПредоставлением = Ложь;
		
		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			
			СтрокаТовары.Сумма = СтрокаТовары.Сумма + СтрокаТовары.СуммаСкидкиОплатыБонусом;
			СтрокаТовары.СуммаСкидкиОплатыБонусом = 0;
			РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТовары.ПолучитьИдентификатор());
			
		КонецЦикла;
		
		Если ОчиститьДанныеКартыЛояльностиПокупателя Тогда
			
			ОчиститьДанныеКартыЛояльности();
			ОчиститьДанныеПокупателя();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПарольСервисаЛояльности(ТекущаяНастройкаРМК)
	Возврат ОбщегоНазначенияРМК.ПарольСервисаЛояльности(ТекущаяНастройкаРМК);
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеСервисаЛояльности()
	
	Если ИспользоватьСервисЛояльности Тогда
		
		АдресСервисаЛояльности = ТекущаяНастройкаРМК.АдресСервисаЛояльности;
		ПользовательСервисаЛояльности = ТекущаяНастройкаРМК.ПользовательСервисаЛояльности;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВыполнитьЗапросКСервисуЛояльности(ПараметрыЗапроса, ПоказыватьПредупреждение = Истина)
	
	СтруктураРезультат = СтруктураРезультатСервисаЛояльности();
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса) Тогда
	
		СтруктураРезультат = ОбщегоНазначенияРМККлиентСервер.ВыполнитьЗапросКСервисуЛояльности(ПараметрыЗапроса);
		
		Если СтруктураРезультат.ЕстьОшибки И ПоказыватьПредупреждение Тогда
			
			ПоказатьОповещениеПользователя(
				СтрШаблон(НСтр("ru = 'Ошибка сервиса лояльности. %1'"),
				СтруктураРезультат.ТекстОшибки),
				,,
				БиблиотекаКартинок.Ошибка32);
				
			ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации("Ошибка сервиса лояльности.",
				"Ошибка", СтруктураРезультат.ТекстОшибки,, Истина);
			
		КонецЕсли;
		
	КонецЕсли;

	Возврат СтруктураРезультат;
	
КонецФункции

&НаКлиенте
Функция ПараметрыЗапросаКСервисуЛояльности()
	
	СтатичныеПараметры				= ОбщегоНазначенияРМККлиентСервер.ПараметрыЗапросаКСервису();
	СтатичныеПараметры.АдресСервера	= АдресСервисаЛояльности;
	СтатичныеПараметры.Логин		= ПользовательСервисаЛояльности;
	СтатичныеПараметры.Пароль		= ПарольСервисаЛояльности(ТекущаяНастройкаРМК);
	
	Возврат СтатичныеПараметры;
	
КонецФункции

&НаКлиенте
Функция ПараметрыМетодовБонуснойПодсистемы(ЭтоСозданиеНовойКарты = Ложь)
	
	СтатичныеПараметры				= ОбщегоНазначенияРМККлиентСервер.ПараметрыМетодовБонуснойПодсистемы();
	ПрефиксПоля = ?(ЭтоСозданиеНовойКарты, "НоваяКарта", "НайденнаяКарта");
	
	Если ЭтоСозданиеНовойКарты Тогда 
		СтатичныеПараметры.Вставить("Client", ЭтаФорма[ПрефиксПоля + "ФИО"]);
	КонецЕсли;
	
	СтатичныеПараметры.Email			= ЭтаФорма[ПрефиксПоля + "Почта"];
	СтатичныеПараметры.ClientCardID		= ЭтаФорма[ПрефиксПоля + "Номер"];
	СтатичныеПараметры.Phone			= ЭтаФорма[ПрефиксПоля + "Телефон"];
	СтатичныеПараметры.GiftCardNumber	= НомерСертификата;
	
	Возврат СтатичныеПараметры;
	
КонецФункции

&НаКлиенте
Функция СтруктураРезультатСервисаЛояльности()
	
	СтруктураРезультат = Новый Структура();
	СтруктураРезультат.Вставить("ДанныеОтвета");
	СтруктураРезультат.Вставить("ЕстьОшибки", Ложь);
	СтруктураРезультат.Вставить("ТекстОшибки", "");
	
	Возврат СтруктураРезультат;
	
КонецФункции

&НаКлиенте
Процедура РазблокироватьОбъектСервисаЛояльности(ТипОбъекта = "clientbonuses")
	
	Если ИспользоватьСервисЛояльности Тогда
		
		Если ТипОбъекта = "clientbonuses" И СуммаБонусов <= 0 И КоличествоБонусов <= 0 Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипОбъекта = "giftcard" И СуммаОплаченоСертификатами <= 0 И СуммаСертификата <= 0 Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыМетода = ПараметрыМетодовБонуснойПодсистемы();
		ПараметрыЗапроса = ПараметрыЗапросаКСервисуЛояльности();
		
		ПараметрыЗапроса.ПараметрыМетода = ПараметрыМетода;
		
		ПараметрыЗапроса.Ресурс = "unlock" + ТипОбъекта;
		
		Результат = ВыполнитьЗапросКСервисуЛояльности(ПараметрыЗапроса);
		
		Если ТипОбъекта = "clientbonuses" Тогда 
			
			Если Результат.ДанныеОтвета = НСтр("ru = 'Бонусы разблокированы'") Тогда
				ОчиститьДанныеКартыЛояльности();
			Иначе
				ПоказатьПредупреждение(,
					НСтр("ru = 'Не удалось разблокировать бонусы. Пожалуйста, обратитесь к администратору'"));
			КонецЕсли;
				
		КонецЕсли;
			
		Если ТипОбъекта = "giftcard" 
			И НЕ Результат.ДанныеОтвета = "Подарочный сертификат разблокирован" Тогда
				ПоказатьПредупреждение(,
					НСтр("ru = 'Не удалось разблокировать подарочный сертификат. Пожалуйста, обратитесь к администратору'"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуОплатыСертификатами(СуммаИтогоОсталосьОплатить, СуммаБезОкругления)
	СуммаОплаченоСертификатами = ТаблицаПодарочныхСертификатов.Итог("СуммаСертификата");  
КонецПроцедуры

&НаКлиенте
Процедура СписатьПодарочныйСертификат()
	
		ПараметрыМетода = ПараметрыМетодовБонуснойПодсистемы();
		
		Если ОбщегоНазначенияРМККлиентПереопределяемый.ВидОперацииВозвратПродажи(Объект.ВидОперации) Тогда
			СуммаСписания = Строка(-СуммаСертификата);
		Иначе
			СуммаСписания = Строка(СуммаСертификата);
		КонецЕсли;
		
		ПараметрыМетода.Вставить("GiftCardWriteOffAmount", СуммаСписания);
		
		ПараметрыЗапроса = ПараметрыЗапросаКСервисуЛояльности();
		ПараметрыЗапроса.Ресурс = "writeoffgiftcard";
		ПараметрыЗапроса.ПараметрыМетода = ПараметрыМетода;
		
		Результат = ВыполнитьЗапросКСервисуЛояльности(ПараметрыЗапроса);
		
		СтрокаОтвета = Результат.ДанныеОтвета;
		
		Если СтрокаОтвета = "Подарочный сертификат успешно списан на указанную сумму" Тогда
			
			СуммаОстаткаСертификатов = СуммаОстаткаСертификатов - СуммаОплаченоСертификатами;
			Если ОжидаемоеКоличествоЧеков < 1 Тогда
				ОчиститьДанныеПодарочногоСертификата();
			КонецЕсли;
			
		Иначе
			РазблокироватьОбъектСервисаЛояльности("giftcard");
		КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура НайтиПодарочныйСертификат()
	
	Если Не ЗначениеЗаполнено(НомерСертификата) Тогда 
		
		ТекстОшибки = НСтр("ru = 'Введите номер сертификата'");
		ПоказатьПредупреждение(, ТекстОшибки);
		Возврат;
		
	КонецЕсли;
	
	Если ИспользоватьСервисЛояльности Тогда
		
		ПараметрыМетода = ПараметрыМетодовБонуснойПодсистемы();
		
		ПараметрыЗапроса = ПараметрыЗапросаКСервисуЛояльности();
		ПараметрыЗапроса.ТипЗапроса = "GET";
		ПараметрыЗапроса.Ресурс = "getgiftcardinfo";
		ПараметрыЗапроса.ПараметрыМетода = ПараметрыМетода;
		
		Результат = ВыполнитьЗапросКСервисуЛояльности(ПараметрыЗапроса);
		
		Если Результат.ЕстьОшибки Тогда
			
			ТекстЗаголовка = НСтр("ru = 'Ошибка поиска подарочного сертификата.'");
			ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, Результат.ТекстОшибки);
			Возврат;
			
		КонецЕсли;
		
		СтрокаJSON = Результат.ДанныеОтвета;
		
		ДанныеОтвета = Неопределено;
		
		#Если ВебКлиент Тогда
			ПрочитатьJSONСервер(СтрокаJSON, ДанныеОтвета);
		#Иначе
			ПрочитатьJSONКлиент(СтрокаJSON, ДанныеОтвета);
		#КонецЕсли
		
		Если НЕ ДанныеОтвета = Неопределено Тогда 
			
			Если ДанныеОтвета.Свойство("Error") И НЕ ДанныеОтвета.Error Тогда 
				
				СуммаСертификата = ДанныеОтвета.GiftCardBalance;
				
				ГУИД = ДанныеОтвета.GiftCard.GiftCardRef;
				ПодарочныйСертификат = ПолучитьСертификатПоГУИД(ГУИД);
				
				УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияСуммаСертификата, Истина);
				УстановитьВидимостьЭлементаФормы(Элементы.ОплатитьСертификатом, Истина);
				УстановитьВидимостьЭлементаФормы(Элементы.НайтиСертификат, Ложь);
				УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияОплатаСертификатами, Ложь);
				УстановитьВидимостьЭлементаФормы(Элементы.НомерСертификата, Ложь);
				УстановитьДоступностьЭлементаФормы(Элементы.ОплатитьСертификатом, СуммаСертификата > 0); 
				
				ТекстСообщения = СтрШаблон(НСтр("ru = 'У клиента %1 рублей'"), Формат(СуммаСертификата,
					"ЧЦ=15; ЧДЦ=2; ЧН=0,00"));
				Элементы.ДекорацияСуммаСертификата.Заголовок = ТекстСообщения;
				
			ИначеЕсли ДанныеОтвета.Свойство("Error") И ДанныеОтвета.Error Тогда 
				
				ТекстЗаголовка = НСтр("ru = 'Ошибка поиска подарочного сертификата.'");
				ТекстОшибки = СтрШаблон(НСтр("ru = '%1'"), ДанныеОтвета.ErrorMessage);
				ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПодарочныйСертификат(ТекущийНомерСертификата, УдалитьСтрокуТаблицы = Ложь)
	
	
	Если УдалитьСтрокуТаблицы Тогда 
		
		Отбор = Новый Структура;
		Отбор.Вставить("НомерСертификата", ТекущийНомерСертификата);
		МассивСтрокТаблицы = ТаблицаПодарочныхСертификатов.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаТаблицы Из МассивСтрокТаблицы Цикл
			ТаблицаПодарочныхСертификатов.Удалить(СтрокаТаблицы);
		КонецЦикла;
		
	КонецЕсли;
	
	УдаляемыеРеквизиты = Новый Массив;
	УдаляемыеРеквизиты.Добавить("СуммаСертификата_" + ТекущийНомерСертификата);
	ИзменитьРеквизиты(, УдаляемыеРеквизиты);
	
	УдалитьЭлементФормы("ГруппаСуммаОплатаСертификатом_" + ТекущийНомерСертификата);
	УдалитьЭлементФормы("СуммаСертификата_" + ТекущийНомерСертификата);
	УдалитьЭлементФормы("ДекорацияУдалитьСертификат_" + ТекущийНомерСертификата);
	
КонецПроцедуры

&НаКлиенте
Процедура СписатьРазблокироватьПодарочныеСертификаты(Списать = Ложь)
	
	Если ИспользоватьСервисЛояльности Тогда 
		
		Для Каждого СтрокаТаблицы Из ТаблицаПодарочныхСертификатов Цикл
			
			Если СтрокаТаблицы.СуммаСертификата > 0 Тогда 
				
				НомерСертификата = СтрокаТаблицы.НомерСертификата;
				СуммаСертификата = СтрокаТаблицы.СуммаСертификата;
				
				Если Списать Тогда
					СписатьПодарочныйСертификат();
				Иначе
					РазблокироватьОбъектСервисаЛояльности("giftcard");
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСертификатВТаблицу()
	
	СтрокаДанныхСертификата = ТаблицаПодарочныхСертификатов.Добавить();
	СтрокаДанныхСертификата.СуммаСертификата = СуммаСертификата;
	СтрокаДанныхСертификата.НомерСертификата = НомерСертификата;
	СтрокаДанныхСертификата.ПодарочныйСертификат = ПодарочныйСертификат;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьИспользованиеАвтоматическихСкидок()
	
	Если ИспользоватьСервисЛояльности Тогда
		
		ПараметрыЗапроса = ПараметрыЗапросаКСервисуЛояльности();
		ПараметрыЗапроса.ТипЗапроса = "GET";
		ПараметрыЗапроса.Ресурс = "useautomaticdiscounts";
		
		Результат = ВыполнитьЗапросКСервисуЛояльности(ПараметрыЗапроса, Ложь);
		
		Если Результат.ЕстьОшибки Тогда
			
			ТекстЗаголовка = НСтр("ru = 'Ошибка определения использования автоматических скидок.'");
			ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, Результат.ТекстОшибки);
			
		Иначе
			
			СтрокаJSON = Результат.ДанныеОтвета;
			
			ДанныеОтвета = Неопределено;
			
			#Если ВебКлиент Тогда
				ПрочитатьJSONСервер(СтрокаJSON, ДанныеОтвета);
			#Иначе
				ПрочитатьJSONКлиент(СтрокаJSON, ДанныеОтвета);
			#КонецЕсли
			
			Если НЕ ДанныеОтвета = Неопределено Тогда 
				
				Если ДанныеОтвета.Свойство("Error") И НЕ ДанныеОтвета.Error Тогда
					ИспользоватьАвтоматическиеСкидки = ДанныеОтвета.UseAutomaticDiscounts;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		ИспользоватьАвтоматическиеСкидки = ОбщегоНазначенияРМККлиентПереопределяемый.ОпределитьИспользованиеАвтоматическихСкидок();
	КонецЕсли;
	
	УстановитьВидимостьЭлементаФормы(Элементы.РассчитатьСкидки, ИспользоватьАвтоматическиеСкидки);
	УстановитьВидимостьЭлементаФормы(Элементы.ОтменаРасчетаСкидок, ИспользоватьАвтоматическиеСкидки);
	УстановитьДоступностьЭлементаФормы(Элементы.ОтменаРасчетаСкидок, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьАвтоматическиеСкидкиНаСервере()
	ОбщегоНазначенияРМКПереопределяемый.РассчитатьАвтоматическиеСкидки(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиКлиент()
	
	РассчитатьАвтоматическиеСкидкиНаСервере();
	СкидкиРассчитаны = Истина;
	ПересчитатьИтогиТабличнойЧастиТовары();
	РассчитатьСуммуОплатыБонусами();
	РассчитатьСуммыОплаты();
	
	УстановитьДоступностьЭлементаФормы(Элементы.ОтменаРасчетаСкидок, СкидкиРассчитаны);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьСкидки()
	
	СкидкиРассчитаны = Ложь;
	ЦветФонаНеактивнойКнопки = Новый Цвет;
	ТекущийТоварСкидка = 0;

	Для Каждого СтрокаТовар Из Объект.Товары Цикл
		
		СтрокаТовар.СуммаСкидкиНаценки = 0;
		СтрокаТовар.ПроцентСкидкиНаценки = 0;
		СтрокаТовар.СуммаАвтоматическойСкидки= 0;
		СтрокаТовар.ПроцентАвтоматическойСкидки = 0;
		СтрокаТовар.РассчитанаСкидка = Ложь;
		
		Если СтрокаТовар.ОтображаетсяСкидкаПроцентом ИЛИ СтрокаТовар.ОтображаетсяСкидкаСуммой Тогда
			
			УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварСкидка, НЕ СкидкиРассчитаны);
			
			Если СтрокаТовар.ОтображаетсяСкидкаПроцентом Тогда
				Элементы.СкидкаТекущийТоварПроцент.ЦветФона = ЦветФонаНеактивнойКнопки;
			ИначеЕсли СтрокаТовар.ОтображаетсяСкидкаСуммой Тогда
				Элементы.СкидкаТекущийТоварСумма.ЦветФона = ЦветФонаНеактивнойКнопки;
			КонецЕсли;
			
		КонецЕсли;
		
		ПересчитатьСуммы(СтрокаТовар);
		
	КонецЦикла;
	
	Если ТекущийТоварСкидка <> 0 Тогда
		
		ТекущийТоварСкидка = 0;
		Элементы.СкидкаТекущийТоварПроцент.ЦветФона = Новый Цвет;
		Элементы.СкидкаТекущийТоварСумма.ЦветФона = Новый Цвет;
		УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварСкидка, Истина);
		
	КонецЕсли;
	
	ПересчитатьИтогиТабличнойЧастиТовары();
	РассчитатьСуммыОплаты();
	
	УстановитьДоступностьЭлементаФормы(Элементы.ОтменаРасчетаСкидок, СкидкиРассчитаны);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьТоварЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда 
		Возврат;
	КонецЕсли;
	
	Если СкидкиРассчитаны Тогда 
		ОтменитьСкидки();
	КонецЕсли;
	
	Строка = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
	
	Если ККМПоддерживаетПроверкуКодовМаркировки
		И ЗначениеЗаполнено(Строка.КодМаркировки) 
		И ЗначениеЗаполнено(ИдентификаторТекущейСессииПроверкиМарок)
		И ВозможноЗакрытьСессиюРегистрацииМарок() Тогда
			ЗакрытьСессиюРегистрацииМарок();
	КонецЕсли;
	
	УдалитьСтрокуТовара(Строка, Объект.Товары);
	ОграничитьДоступностьЭлементовПриОжиданииМарки(Ложь);
	ПроинформироватьПользователяОКоличествеЧеков();
	
	ОбновитьИнформациюНаДисплееПокупателя("УдалениеТовара");
	
	Если Объект.Товары.Количество() = 0 И НЕ ЭтоЧекКоррекции Тогда
		
		Если ЗначениеЗаполнено(ОтложенныйЧек) Тогда
			АннулироватьЧек(ОтложенныйЧек);
		КонецЕсли;
		
		РазблокироватьОбъектСервисаЛояльности("clientbonuses");
		СписатьРазблокироватьПодарочныеСертификаты();
		ИнициализироватьИнтерфейсРабочегоМестаКассира();
		
	Иначе
		ПересчитатьСуммыПослеУдаленияСтроки();
	КонецЕсли;
		
КонецПроцедуры  

&НаКлиенте
Процедура ЦенаИзКарточкиПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если Результат = КодВозвратаДиалога.Нет Тогда 
		ТекущийТоварЦенаИзКарточки = ТекущаяСтрока.Цена;
		Возврат;
	КонецЕсли;
	
	Если ПримененыСкидки() Тогда
		ОтменитьСкидки();
	КонецЕсли;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.МРЦ) Тогда
		
		КоэффициентМРЦ	= 0.75;
		МинимумОтМРЦ	= ТекущаяСтрока.МРЦ * КоэффициентМРЦ;
		
		Если ТекущийТоварЦенаИзКарточки > ТекущаяСтрока.МРЦ
			ИЛИ ТекущийТоварЦенаИзКарточки < МинимумОтМРЦ Тогда
				ТекущийТоварЦенаИзКарточки = ТекущаяСтрока.МРЦ;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.МинимальнаяЦена) Тогда
		
		Если ТекущаяСтрока.РассчитанаСкидка Тогда
			
			ТекущаяСтрока.СуммаСкидкиНаценки = 0;
			ТекущаяСтрока.ПроцентСкидкиНаценки = 0;
			ТекущаяСтрока.РассчитанаСкидка = Ложь;
			ТекущийТоварСкидка = 0;
			
		КонецЕсли;
		
		Если ТекущийТоварЦенаИзКарточки < ТекущаяСтрока.МинимальнаяЦена Тогда
			
			ТекущийТоварЦенаИзКарточки = ТекущаяСтрока.МинимальнаяЦена;
			ПредупредитьОПревышенииМинимальнойЦены(ТекущаяСтрока.МинимальнаяЦена);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяСтрока.Цена = ТекущийТоварЦенаИзКарточки;
	ПересчитатьСуммы(ТекущаяСтрока);
	
	ОбновитьИнформациюНаДисплееПокупателя("ИзменениеЦены");
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДанныеПриИзмененииКоличестваЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Свойство("УвеличитьКоличество") Тогда
		УвеличитьКоличество = ДополнительныеПараметры.УвеличитьКоличество;
	Иначе
		УвеличитьКоличество = Ложь;
	КонецЕсли;
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
	
	Если Результат = КодВозвратаДиалога.Нет 
		ИЛИ (НЕ ТекущаяСтрока = Неопределено И ТекущаяСтрока.ТоварКЗамене) Тогда
		
			ТекущийТоварКоличество = ТекущаяСтрока.Количество;
			Возврат;
			
	КонецЕсли;
	
	Если ПримененыСкидки() Тогда
		ОтменитьСкидки();
	КонецЕсли;
	
	Если ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока.Весовой Тогда
		
		ИзменитьКоличествоВесовогоТовара(ТекущаяСтрока, УвеличитьКоличество);
		Возврат;
		
	ИначеЕсли ТекущаяСтрока.ЭтоНабор Тогда
		
		ИзменитьКоличествоНабора(ТекущаяСтрока, УвеличитьКоличество);
		Возврат;
		
	КонецЕсли;
	
	Если УвеличитьКоличество Тогда
		
		ТекущийТоварКоличество = ТекущийТоварКоличество + 1;
		СкорректироватьТекущееКоличество(ТекущаяСтрока);
		
	Иначе
		ТекущийТоварКоличество = ТекущийТоварКоличество - 1;
	КонецЕсли;
	
	ПересчетКоличестваТовара(ТекущаяСтрока);
	
	Если ТекущаяСтрока.Количество = 0 Тогда
		
		Строка = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
		Объект.Товары.Удалить(Строка);
		ПроинформироватьПользователяОКоличествеЧеков();
		
	Иначе
		
		ОбщегоНазначенияРМККлиентСервер.ПересчитатьСуммуВСтроке(ЭтотОбъект, ТекущаяСтрока);
		ОбщегоНазначенияРМККлиентСервер.РассчитатьСуммуНДС(Объект, ТекущаяСтрока);
		ОбщегоНазначенияРМККлиентСервер.СуммаДокумента(Объект);
		
	КонецЕсли;
	
	Если Объект.Товары.Количество() = 0 И НЕ ЭтоЧекКоррекции Тогда
		ИнициализироватьИнтерфейсРабочегоМестаКассира();
	Иначе
		
		ПересчитатьИтогиТабличнойЧастиТовары();
		РассчитатьСуммуОплатыБонусами();
		
	КонецЕсли;
	
	ОбновитьИнформациюНаДисплееПокупателя("ИзменениеКоличества");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКаталогЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда 
		Возврат;	
	КонецЕсли;
	
	Если ИспользоватьАвтоматическиеСкидки И СкидкиРассчитаны Тогда 
		ОтменитьСкидки();
	КонецЕсли;
	
	Если ИспользоватьНовыйПодборТоваров Тогда
		ОткрытьКаталогКлиент();
	Иначе
		ОбщегоНазначенияРМККлиентПереопределяемый.ОткрытьФормуПодбораТоваров(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаНаличнымиЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		РассчитатьСкидкиКлиент();
	КонецЕсли;
	
	ОплатаНаличнымиНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаКартойЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		РассчитатьСкидкиКлиент();
	КонецЕсли;
	
	ОбщегоНазначенияРМККлиентПереопределяемый.ЗаполнитьВыбранныйВидОплаты(ЭтотОбъект, ДополнительныеПараметры.Имя);
	ОплатаКартойНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаСертификатомЗавершение(Результат, ДополнительныеПарметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		РассчитатьСкидкиКлиент();
	КонецЕсли;
	
	ОчиститьДанныеПодарочногоСертификата();
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаСертификатами, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаВыборОплаты, Ложь);
	ЭтаФорма.ТекущийЭлемент = Элементы.НомерСертификата;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаQRКодомЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		РассчитатьСкидкиКлиент();	
	КонецЕсли;
	
	Если ДополнительныеПараметры.Имя = "КомандаПлатежнаяСистема_ОплатаСВИП" Тогда
		ПлатежнаяСистемаККТ = ПредопределенноеЗначение("Перечисление.ТипыПлатежнойСистемыККТ.SWiP");
	ИначеЕсли ДополнительныеПараметры.Имя = "КомандаПлатежнаяСистема_ОплатаСБП" Тогда
		ПлатежнаяСистемаККТ = ПредопределенноеЗначение("Перечисление.ТипыПлатежнойСистемыККТ.СистемаБыстрыхПлатежей");
	КонецЕсли;
	
	ОплатаQRКодом(ПлатежнаяСистемаККТ);

КонецПроцедуры

&НаКлиенте
Процедура ОплатаВРассрочкуЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		РассчитатьСкидкиКлиент();
	КонецЕсли;

	ОплатаВРассрочкуНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		РассчитатьСкидкиКлиент();
	КонецЕсли;

	ПредоплатаНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаСертификатомНСПКЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда 
		РассчитатьСкидкиКлиент();
	КонецЕсли;
	
	ОплатитьСертификатомНСПКНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура ЗачетАвансаЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		РассчитатьСкидкиКлиент();
	КонецЕсли;
	
	ЗачетАвансаНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросПоРасчетуСкидок(ИмяПроцедуры, ДополнительныеПараметры = Неопределено, ПересчетСкидок = Ложь)

	Если ПересчетСкидок Тогда 
		
		ТекстЗаголовка = НСтр("ru = 'Подтверждение расчета скидок.'");
		ТекстВопроса = НСтр("ru = 'Скидки не были расчитаны, рассчитать?'");
		КнопкаПоУмолчанию = КодВозвратаДиалога.Да;
		
	Иначе
		
		ТекстЗаголовка = НСтр("ru = 'Подтверждение отмены скидок.'");
		ТекстВопроса = НСтр("ru = 'Скидки будут очищены, продолжить?'");
		КнопкаПоУмолчанию = КодВозвратаДиалога.Нет;
		
	КонецЕсли;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения(ИмяПроцедуры, ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОповещениеЗавершения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КнопкаПоУмолчанию, ТекстЗаголовка);

КонецПроцедуры

&НаКлиенте
Процедура БезналЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		РассчитатьСкидкиКлиент();
	КонецЕсли;
	
	БезналНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредупредитьОПревышенииМинимальнойЦены(Знач МинимальнаяЦена)
	
	МинимальнаяЦена = Формат(МинимальнаяЦена, "ЧДЦ=2");
	
	ТекстЗаголовка = НСтр("ru = 'Превышена минимальная цена'");
	ТекстПояснения = СтрШаблон(НСтр("ru = 'Установлено значение - %1 руб.'"), МинимальнаяЦена);
	
	ПоказатьПредупреждение(, ТекстПояснения, , ТекстЗаголовка);
	
КонецПроцедуры

#КонецОбласти

#Область ДисплейПокупателя

&НаКлиенте
Функция БуферОбменаДисплеяПокупателя()

	Результат = Новый Структура();
	Результат.Вставить("ТоварНаименование");
	Результат.Вставить("ТоварЦена");
	Результат.Вставить("ТоварКоличество");
	Результат.Вставить("ТоварСумма");
	Результат.Вставить("ТоварСкидка");
	Результат.Вставить("СуммаИтого");
	Результат.Вставить("СуммаСкидки");
	Результат.Вставить("Сдача");
	Результат.Вставить("Оплата");
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ВывестиИнформациюНаДисплейПокупателя(Операция)

	Если ЗначениеЗаполнено(ДисплейПокупателя) Тогда
	
		ИсходныеДанные = МенеджерОборудованияРМККлиент.ИсходныеДанныеДляПервичнойПередачиНаДисплейПокупателя();
		ИсходныеДанные.ИспользоватьПодключаемоеОборудование	= ИспользоватьПодключаемоеОборудование;
		ИсходныеДанные.ДанныеДляОтображения					= ДанныеКПередачеВДисплейПокупателя;
		ИсходныеДанные.Операция								= Операция;
		ИсходныеДанные.СуммаСкидки							= СуммаСкидки;
		ИсходныеДанные.СуммаИтого							= СуммаИтого;
		
		МенеджерОборудованияРМККлиент.ВывестиИнформациюНаДисплейПокупателя(ИсходныеДанные, ЭтотОбъект,
			УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформациюНаДисплееПокупателя(Операция, ОтображатьТолькоИтоги = Ложь)

	Если ЗначениеЗаполнено(ДисплейПокупателя) Тогда
		
		Если Операция = "ДобавлениеТовара" ИЛИ Операция = "ИзменениеЦены" Тогда
			
				Элементы.Товары.ТекущаяСтрока = ТекущийТоварИдентификатор;
				ДобавленаНоваяСтрокаКорзины = Ложь;
			
		КонецЕсли;
		
		
		СтруктураДанных = МенеджерОборудованияРМККлиент.ИсходныеДанныеДляОбновленияДанныхНаДисплееПокупателя();
		СтруктураДанных.ИспользоватьПодключаемоеОборудование	= ИспользоватьПодключаемоеОборудование;
		СтруктураДанных.ДанныеДляОтображения					= ДанныеКПередачеВДисплейПокупателя;
		СтруктураДанных.Операция								= Операция;
		СтруктураДанных.ОтображатьТолькоИтоги					= ОтображатьТолькоИтоги;
		СтруктураДанных.ТекущаяСтрока							= Элементы.Товары.ТекущиеДанные;
		СтруктураДанных.Товары									= Объект.Товары;
		СтруктураДанных.СуммаСкидки								= СуммаСкидки;
		СтруктураДанных.СуммаИтого								= СуммаИтого;
		
		МенеджерОборудованияРМККлиент.ОбновитьДанныеНаДисплееПокупателя(СтруктураДанных, ЭтотОбъект,
			УникальныйИдентификатор);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПростояДисплеяПокупателя()
	
	Если НЕ Открыта() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Товары.Количество() <= 0 Тогда
		ВывестиИнформациюНаДисплейПокупателя("НачалоРаботы");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыводаОжиданияОплатыНаДисплейПокупателя()
	
	ОбработкаПростояДисплеяПокупателя();
	
	Если ЭтотОбъект.Открыта() И Объект.Товары.Количество() > 0 Тогда
		ВывестиИнформациюНаДисплейПокупателя("ОжиданиеОплаты");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОшибкуПроверкиМарки(Контекст, СтраницаДиалога)

	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПодтвержденияКонтрольнойМарки);
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(СтраницаДиалога);
	ТекущийЭлемент = Элементы.ПродолжитьДобавлениеТовараПослеПроверкиМарки;
	ВременныйКонтекстПроверкиМарки = Контекст;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУспешноеДобавлениеМарки(ДанныеОбработкиДобавления)

	КонтекстВызова = ДанныеОбработкиДобавления.КонтекстВызова;
	
	Если КонтекстВызова = "ЗавершитьВводШтрихкодаМаркаВведена" Тогда
		ДобавитьТоварПоДаннымМарки(ДанныеОбработкиДобавления.ЭтоОбработкаСопоставленияТовара);
	ИначеЕсли КонтекстВызова = "ЗавершитьВводШтрихкода" Тогда
		
		ТекущийТоварКоличество = Элементы.Товары.ТекущиеДанные.КоличествоУпаковок;
		РассчитатьСуммуВСтрокеТабличнойЧасти();
		НастроитьЭлементыФормы(Элементы.СтраницаОбщая, Истина);
		
	ИначеЕсли КонтекстВызова = "ОбработатьВыборТовара" Тогда
		
		
		ОбработатьВыборТовараСервер(ДанныеОбработкиДобавления.ТекущийВыбор,
			ДанныеОбработкиДобавления.ДействующиеЗапретыПродаж);
		РассчитатьСуммуВСтрокеТабличнойЧасти();
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КонтекстВызова) Тогда
	
		СтрокаТаблицыТоваров = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
		СтрокаТаблицыТоваров.КонтрольнаяМарка = ДанныеОбработкиДобавления.КодМаркировки;
		
	КонецЕсли;
	
	ВременныйКонтекстПроверкиМарки = Неопределено;
	ДанныеДляРучногоСопоставления = Неопределено;
	УстановитьФокусНаТовареТребующемВводаМарки();
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиИнформациюНаДисплейПокупателяЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если ЕстьСвойство(РезультатВыполнения, "Результат") И НЕ РезультатВыполнения.Результат Тогда
		
		ТекстЗаголовка = НСтр("ru = 'При снятии отчета на фискальном регистраторе произошла ошибка.'");
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось вывести информацию на дисплей покупателя по причине: %1'"),
			РезультатВыполнения.ОписаниеОшибки);
		
		ПоказатьПредупреждение(, ТекстСообщения,, ТекстЗаголовка);

		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиИнформациюНаДисплейПокупателяОВнесеннойСуммеОплаты()
	
	ФорматЧисла = "ЧДЦ=2;ЧГ=;ЧН=0.00";
	ДанныеКПередачеВДисплейПокупателя.Сдача = Формат(Сдача, ФорматЧисла);
	ДанныеКПередачеВДисплейПокупателя.СуммаИтого = Формат(СуммаИтого, ФорматЧисла);
	ДанныеКПередачеВДисплейПокупателя.Оплата = Формат(Объект.Оплата.Итог("Сумма"), ФорматЧисла);
	ВывестиИнформациюНаДисплейПокупателя("Оплата");
	
КонецПроцедуры

#КонецОбласти

#Область ЗапретыПродаж

&НаКлиенте
Процедура ОткрытьСтраницуЗапретаПродажиПоВремени(ВидНоменклатуры, ВремяНачала, ВремяОкончания)
	
	Элементы.ТекстЗапретаПродажи.Заголовок =
		СтрШаблон(НСтр("ru = 'Продажа товаров из категории %1 запрещена с %2 по %3.'"),
			ВидНоменклатуры, СекундыВЧасыИМинуты(ВремяНачала), СекундыВЧасыИМинуты(ВремяОкончания));
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаЗапретаПродажи);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОрганиченияПродажИнтерактивно()

	Если ИспользоватьПоставляемыеОграниченияПродаж ИЛИ
		(ИспользоватьЗапретПродаж И ИспользоватьСервисЛояльности) Тогда
		ОбновитьКалендарныеОграниченияПродаж();
	Иначе
		
		ТекстПредупреждения = НСтр("ru = 'Пожалуйста, включите использование запретов продаж.'");
		ЗаголовокПредупреждения = НСтр("ru = 'Ограничения продаж не используются'");
		ПоказатьПредупреждение(, ТекстПредупреждения, ЗаголовокПредупреждения);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьКалендарныеОграниченияПродаж()
	
	СостояниеОбновленияЗапретовПродаж = НСтр("ru = ''");
	
	Если ИспользоватьПоставляемыеОграниченияПродаж Тогда
		
		РезультатОбновления = ОбновитьОграниченияПродажИзПоставляемыхДанных();
		СостояниеОбновленияЗапретовПродаж = РезультатОбновления.КомментарийОбновленияЗапретов;
		
	ИначеЕсли ИспользоватьСервисЛояльности И ИспользоватьЗапретПродаж Тогда
		
		РезультатОбновления = ОбщегоНазначенияРМККлиентСервер.ОбновитьДанныеЗапретовРедактирования(ТекущаяНастройкаРМК,
			Объект.ТорговыйОбъект);
		
		СостояниеОбновленияЗапретовПродаж = НСтр("ru = ''");
		
		Если НЕ РезультатОбновления.ПризнакУспешноОбновлен Тогда
			
			ПричинаНевозможностиОбновленияПризнака = НСтр("ru = 'Признак разрешения редактирования не обновлен по причине:'");
			СостояниеОбновленияЗапретовПродаж = СтрШаблон("%1 %2%3",
				ПричинаНевозможностиОбновленияПризнака, РезультатОбновления.КомментарийКОбновлениюПризнака, Символы.ПС);
			
		КонецЕсли;
			
		Если НЕ РезультатОбновления.ЗапретыПродажУспешноЗагружены Тогда
			
			ПричинаНевозможностиОбновленияЗапретовПродаж = НСтр("ru = 'Не удалось обновить запреты продаж по причине:'");
			ПричинаНевозможностиОбновленияЗапретовПродажРасширенная = СтрШаблон("%1%2",
				ПричинаНевозможностиОбновленияЗапретовПродаж, РезультатОбновления.КомментарийОбновленияЗапретов);
			СостояниеОбновленияЗапретовПродаж = СтрШаблон("%1%2%3",
				СостояниеОбновленияЗапретовПродаж, ПричинаНевозможностиОбновленияЗапретовПродажРасширенная, Символы.ПС);
			
		КонецЕсли;
		
	КонецЕсли;
		
	Если НЕ ПустаяСтрока(СостояниеОбновленияЗапретовПродаж) Тогда
		
		КомментарийКЗаписи = НСтр("ru = 'Данные о запретах продаж не были обновлены.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
				
		ИмяСобытия = НСтр("ru = 'Обновление данных запретов о продажах'",
			ОбщегоНазначения.КодОсновногоЯзыка());
				
		ЗаписьЖурналаРегистрации(ИмяСобытия,
			УровеньЖурналаРегистрации.Ошибка,,, КомментарийКЗаписи);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьОграниченияПродажИзПоставляемыхДанных()
	
	Результат = Новый Структура();
	Результат.Вставить("КомментарийОбновленияЗапретов", НСтр("ru = ''"));
	ТорговыйОбъект = Объект.ТорговыйОбъект;
	ОбщегоНазначенияРМК.ОбновитьОграниченияПродажИзПоставляемыхДанных(ТорговыйОбъект, Результат);
	Возврат Результат;

КонецФункции

&НаСервере
Процедура ЗаполнитьКэшДействующихЗапретовПродаж()
	
	Если ИспользоватьЗапретПродаж Тогда
		
		КэшЗапретовПродаж.Очистить();
		Выборка = ОбщегоНазначенияРМК.АктуальныеЗапретыПродаж(Объект.Организация, ТекущаяДатаСеанса());
		
		Если НЕ Выборка = Неопределено Тогда
		
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(КэшЗапретовПродаж.Добавить(), Выборка);
			КонецЦикла;
		
		КонецЕсли;
		
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеОплатПередПробитиемЧека(ОплатаЗаполненаВерно, СтруктураОшибки)
	
	Если ЭтоОплатаРассрочки Тогда
		
		Если СуммаОплаченоНал = 0 И СуммаОплаченоБН = 0 Тогда
			
			ОплатаЗаполненаВерно = Ложь;
			ТекстОшибки = НСтр("ru = 'При оплате рассрочки необходимо ввести оплату наличными или платежной картой.'");
			СтруктураОшибки.ТекстЗаголовка = НСтр("ru = 'Ошибка оплаты.'");
			СтруктураОшибки.ТекстОшибки = ТекстОшибки;
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли Объект.ОперацияСДенежнымиСредствами И СуммаОплаченоВРассрочку >= СуммаИтого Тогда
		
		ОплатаЗаполненаВерно = Ложь;
		ТекстОшибки = НСтр("ru = 'Необходимо выбрать вид оплаты и ввести сумму предоплаты.'");
		СтруктураОшибки.ТекстЗаголовка = НСтр("ru = 'Ошибка оплаты.'");
		СтруктураОшибки.ТекстОшибки = ТекстОшибки; 
		Возврат;
		
	КонецЕсли;
	
	ОбщегоНазначенияРМККлиентПереопределяемый.ПроверитьЗаполнениеОплатПередПробитиемЧека(
		ОплатаЗаполненаВерно, СтруктураОшибки, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьКодыМаркировки()
	
	Для Каждого СтрокиКорзины Из Объект.Товары Цикл
	
		Если ЗначениеЗаполнено(СтрокиКорзины.КодМаркировки) Тогда
			СтрокиКорзины.КодМаркировки = "";
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтказатьсяОтДобавленияТовара()

	Если ЗначениеЗаполнено(ВременныйКонтекстПроверкиМарки)
		И ЕстьСвойство(ВременныйКонтекстПроверкиМарки, "КодМаркировки")
		И ЗначениеЗаполнено(ВременныйКонтекстПроверкиМарки.КодМаркировки) Тогда
		
		
		ИдентификаторЗапроса = ВременныйКонтекстПроверкиМарки.ИдентификаторЗапроса;
		ПараметрыПодтвержденияКМ = МенеджерОборудованияКлиентСервер.ПараметрыПодтверждениеКМ();
		ПараметрыПодтвержденияКМ.ИдентификаторЗапроса = ИдентификаторЗапроса;
		ПараметрыПодтвержденияКМ.Выбытие = Ложь;
		
		Отбор = Новый Структура("Организация", ВременныйКонтекстПроверкиМарки.Организация);
		СтрокаКассы = ТаблицаКассККМОрганизаций.НайтиСтроки(Отбор)[0];
		ПодключаемоеОборудованиеДляПроверкиМарки = СтрокаКассы.ИдентификаторУстройства;
		
		ОповещениеОЗавершенииНевыбытияКМ = Новый ОписаниеОповещения("ЗавершитьПодтверждениеНевыбытияКонтрольнойМарки",
			ЭтотОбъект, ВременныйКонтекстПроверкиМарки);
		ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьПодтверждениеКМ(ОповещениеОЗавершенииНевыбытияКМ,
			УникальныйИдентификатор, ПодключаемоеОборудованиеДляПроверкиМарки, ПараметрыПодтвержденияКМ);
		
	КонецЕсли;

	ВременныйКонтекстПроверкиМарки = Неопределено;
	ОжидатьВводМарки = Ложь;
	ДанныеДляРучногоСопоставления = Неопределено;
	УстановитьДоступностьЭлементовРабочейОбластиФормы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФокусНаТовареТребующемВводаМарки()
	
	ОтборПоиска = Новый Структура();
	ОтборПоиска.Вставить("НеобходимостьВводаКодаМаркировки", Истина);
	ОтборПоиска.Вставить("КодМаркировки", "");
	РезультатПоиска = Объект.Товары.НайтиСтроки(ОтборПоиска);
	
	Если РезультатПоиска.Количество() > 0 Тогда

		СтрокаТовара = РезультатПоиска[0];
		Элементы.Товары.ТекущаяСтрока = СтрокаТовара.ПолучитьИдентификатор();
		ПодготовитьИнтерфейсКВозвратуМаркируемогоТовараБезКонтрольнойМарки(СтрокаТовара);
		
	Иначе
		
		УстановитьДоступностьЭлементовРабочейОбластиФормы(Истина);
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОплата);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьРезультатыЗапросаКМ()
	
	Контекст = ВременныйКонтекстПроверкиМарки;
	ПараметрыОперации = Новый Структура();
	
	Отбор = Новый Структура("Организация", Контекст.Организация);
	СтрокаКассы = ТаблицаКассККМОрганизаций.НайтиСтроки(Отбор)[0];
	ПодключаемоеОборудованиеДляПроверкиМарки = СтрокаКассы.ИдентификаторУстройства;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения(
		"ЗавершитьПолучениеРезультатовЗапросаПроверкиКодаМаркировкиОтИСМП",
		ЭтотОбъект, Контекст);
	ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьПолученияРезультатовЗапросаКМ(ОповещениеОЗавершении,
		УникальныйИдентификатор, ПодключаемоеОборудованиеДляПроверкиМарки, ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьКонтрольныеМарки()
	
	Если ЗначениеЗаполнено(ВременныйКонтекстПроверкиМарки) Тогда
		
		КодМаркировкаВBase64 = ПривестиКодМаркировкиКBase64(ВременныйКонтекстПроверкиМарки.КодМаркировки);
		ПараметрыПроверкиМарки = ДанныеЗапросаКМ(КодМаркировкаВBase64);
		ВременныйКонтекстПроверкиМарки.ИдентификаторЗапроса = ПараметрыПроверкиМарки.ИдентификаторЗапроса;
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершитьЗапросКонтрольныхМарок",
			ЭтотОбъект, ВременныйКонтекстПроверкиМарки);
			
		Отбор = Новый Структура("Организация", ВременныйКонтекстПроверкиМарки.Организация);
		СтрокаКассы = ТаблицаКассККМОрганизаций.НайтиСтроки(Отбор)[0];
		ПодключаемоеОборудованиеДляПроверкиМарки = СтрокаКассы.ИдентификаторУстройства;
		
		СохранитьПодключениеККМ = Истина;
		ПараметрыСохраненияПодключения =
			МенеджерОборудованияКлиентСервер.ДополнительныеПараметрыОперации(СохранитьПодключениеККМ);
		
		ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьЗапросКМ(ОповещениеОЗавершении,
			УникальныйИдентификатор, ПодключаемоеОборудованиеДляПроверкиМарки, ПараметрыПроверкиМарки,
			ПараметрыСохраненияПодключения);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьСессиюРегистрацииМарок()
	
	Для Каждого Строка Из ТаблицаКассККМОрганизаций Цикл
	
		Если Строка.ПоддерживаетПроверкуКодовМаркировки Тогда
			
			ПодключаемоеОборудование = Строка.ИдентификаторУстройства;
			
			ОповещениеОЗакрытииСессииРегистрацииМарок =
				Новый ОписаниеОповещения("ЗавершитьЗакрытиеСессииПроверкиКонтрольныхМарок", ЭтотОбъект);
			
			ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьЗакрытииСессииРегистрацииКМ(
				ОповещениеОЗакрытииСессииРегистрацииМарок, УникальныйИдентификатор, ПодключаемоеОборудование);
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементовРабочейОбластиФормы(ЗначениеДоступности)
	
	УстановитьДоступностьЭлементаФормы(Элементы.Каталог, ЗначениеДоступности);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаРядовКнопокБыстрыхТоваров,
		ЗначениеДоступности);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаТовары, ЗначениеДоступности);
	УстановитьДоступностьЭлементаФормы(Элементы.УдалитьТовар, ЗначениеДоступности);
	
КонецПроцедуры

#КонецОбласти

#Область ИзбранныеПозиции

&НаСервере
Процедура ЗаполнитьПанельИзбранныхТоваров()
	
	ДанныеДляЗаполнения = ЗаполнитьИсходныеДанныеИзбранныхПозиций(ТекущаяНастройкаРМК);
	УстановитьВидимостьЭлементаФормы(Элементы.ПанельИзбранныхТоваров, ЗначениеЗаполнено(ДанныеДляЗаполнения));
	УстановитьВидимостьЭлементаФормы(Элементы.ОткрытьПанельИзбранныхТоваров, ЗначениеЗаполнено(ДанныеДляЗаполнения));
	
	Если ЗначениеЗаполнено(ДанныеДляЗаполнения) Тогда
		СформироватьЭлементыПанелиИзбранныхПозиций(ДанныеДляЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьИсходныеДанныеИзбранныхПозиций(ЗначениеНастройкиРМК)

	Результат = Неопределено;
	
	Если ЗначениеЗаполнено(ЗначениеНастройкиРМК) Тогда
		
		ИспользоватьХарактеристикиНоменклатуры =
			ОбщегоНазначенияРМКПереопределяемый.ИспользоватьХарактеристикиНоменклатуры();
		ТекстЗапроса = ОбщегоНазначенияРМКПереопределяемый.ТекстЗапросаИзбранныхТоваров();
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("НастройкаРМК", ЗначениеНастройкиРМК);
		Запрос.УстановитьПараметр("ВидЦены", РозничныйВидЦены);
		Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
		Запрос.УстановитьПараметр("ИспользоватьХарактеристикиНоменклатуры",ИспользоватьХарактеристикиНоменклатуры);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ИзбранныеПозиции.Очистить();
			ИзбранныеПозиции.Загрузить(РезультатЗапроса.Выгрузить());
			Результат = РезультатЗапроса.Выбрать();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СформироватьЭлементыПанелиИзбранныхПозиций(ВыборкаДляЗаполнения)
	
	КоличествоКнопок = ИзбранныеПозиции.Количество();
	
	ИндексКнопки = 0;
	ИндексРяда = 1;
	
	КоличествоКнопокВРяду = 5;
	ОжидаемоеКоличествоРядов = Окр(КоличествоКнопок / КоличествоКнопокВРяду + 0.5);
	
	ИсходныеДанные = ДанныеВедущейКомбинацииГорячихКлавиш();
	
	ВедущаяКомбинацияСтрокой = ИсходныеДанные.ВедущаяКомбинацияСтрокой;
	
	Если НЕ ПустаяСтрока(ВедущаяКомбинацияСтрокой) Тогда
		
		Элементы.ПанельИзбранныхТоваров.Заголовок = СтрШаблон(НСтр("ru = 'Избранное (%1 номер товара)'"),
			ВедущаяКомбинацияСтрокой);
			
	КонецЕсли;
	
	Пока ИндексРяда <= ОжидаемоеКоличествоРядов Цикл
		
		РядКнопок = ДобавитьРядКнопок(Элементы.ГруппаРядовКнопокБыстрыхТоваров, ИндексРяда);
		ДобавитьДекорациюВРяд(РядКнопок, СтрШаблон("Ряд%1", ИндексРяда));
		
		СчетчикКнопок = 0;
		ОсталосьСвободныхСлотовВРяду = КоличествоКнопокВРяду;
		
		Пока СчетчикКнопок < КоличествоКнопокВРяду Цикл
			
			Если ВыборкаДляЗаполнения.Следующий() Тогда
				
				ДобавитьКнопкуВРяд(РядКнопок, ВыборкаДляЗаполнения, ИндексКнопки, ИсходныеДанные);
				ОсталосьСвободныхСлотовВРяду = ОсталосьСвободныхСлотовВРяду - 1;
				
				ИндексКнопки = ИндексКнопки + 1;
				СчетчикКнопок = СчетчикКнопок + 1;
				КоличествоКнопок = КоличествоКнопок - 1;
				
			Иначе
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Пока ОсталосьСвободныхСлотовВРяду > 0 Цикл
			
			ЭтоЗаменаКнопки = Истина;
			ДобавитьДекорациюВРяд(РядКнопок, ИндексКнопки, ЭтоЗаменаКнопки);
			ОсталосьСвободныхСлотовВРяду = ОсталосьСвободныхСлотовВРяду - 1;
			ИндексКнопки = ИндексКнопки + 1;
			
		КонецЦикла;
		
		ИндексРяда = ИндексРяда + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьРядКнопок(РодительскийЭлемент, ИндексРяда)
	
	ИмяРяда = СтрШаблон("РядКнопок_%1", ИндексРяда);
	
	НовыйРяд 									= Элементы.Добавить(ИмяРяда, Тип("ГруппаФормы"), РодительскийЭлемент);
	
	НовыйРяд.Вид 								= ВидГруппыФормы.ОбычнаяГруппа;
	НовыйРяд.ГоризонтальноеПоложениеПодчиненных	= ГоризонтальноеПоложениеЭлемента.Центр;
	НовыйРяд.Группировка						= ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	НовыйРяд.ОтображатьЗаголовок 				= Ложь;
	НовыйРяд.Отображение						= ОтображениеОбычнойГруппы.Нет;
	НовыйРяд.РастягиватьПоГоризонтали			= Истина;
	НовыйРяд.РастягиватьПоВертикали				= Ложь;
	
	Возврат НовыйРяд;
	
КонецФункции

&НаСервере
Процедура ДобавитьКнопкуВРяд(РядКнопок, ВыборкаДляЗаполнения, ИндексКнопки, ИсходныеДанные)
	
	ИмяКоманды = СтрШаблон("КомандаИзбранныйТовар_%1", ИндексКнопки);
	МаксимальнаяШиринаКнопки = 100;
	НоваяКомандаФормы = Команды.Добавить(ИмяКоманды);
	НоваяКомандаФормы.Действие = "Подключаемый_ИзбранноеВыбор";
	
	ЗаголовокКнопки = СформироватьЗаголовокКнопки(ВыборкаДляЗаполнения);
	
	НоваяКомандаФормы.Заголовок = ЗаголовокКнопки;
	ИмяКлавиши = СтрШаблон("_%1", ИндексКнопки);
	
	Если НЕ (ПустаяСтрока(ИмяКлавиши))
		И (ИсходныеДанные.Alt ИЛИ ИсходныеДанные.Shift ИЛИ ИсходныеДанные.Ctrl) Тогда
		
			ЗадействованShift	= ИсходныеДанные.Shift;
			ЗадействованAlt		= ИсходныеДанные.Alt;
			ЗадействованCtrl	= ИсходныеДанные.Ctrl;
			
			ДополнительнаяКлавиша = Клавиша[ИмяКлавиши];
			НоваяКомандаФормы.СочетаниеКлавиш = Новый СочетаниеКлавиш(ДополнительнаяКлавиша,
				ЗадействованAlt, ЗадействованCtrl, ЗадействованShift);
		
	КонецЕсли;
	
	ЭлементФормы 							= Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), РядКнопок);
	ЭлементФормы.ИмяКоманды					= ИмяКоманды;
	ЭлементФормы.АвтоМаксимальнаяШирина		= Ложь;
	ЭлементФормы.МаксимальнаяШирина			= МаксимальнаяШиринаКнопки;
	ЭлементФормы.РастягиватьПоВертикали		= Истина;
	ЭлементФормы.РастягиватьПоГоризонтали	= Истина;
	ВыделитьЖирным = Ложь;
	ЭлементФормы.Шрифт						= Новый Шрифт(, 10, ВыделитьЖирным);
	ЭлементФормы.Ширина						= 1;
	ЭлементФормы.АвтоМаксимальнаяВысота		= Ложь;
	ЭлементФормы.Высота						= 3;
	ЭлементФормы.ВысотаЗаголовка			= 2;
	ЭлементФормы.МаксимальнаяВысота = 6;
	
	ИмяКартинки						= СтрШаблон("НомерИзбранногоТовара_%1", ИндексКнопки);
	ЭлементФормы.Картинка			= БиблиотекаКартинок[ИмяКартинки];
	ЭлементФормы.ПоложениеКартинки	= ПоложениеКартинкиКнопкиФормы.Право;
	
	ЭлементФормы.Отображение = ОтображениеКнопки.КартинкаИТекст;
	ЭлементФормы.Доступность = ВыборкаДляЗаполнения.ДоступностьКоманды;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьДекорациюВРяд(РядКнопок, ИндексКнопки, ЭтоЗаменаКнопки = Ложь)

	ИмяЭлемента = СтрШаблон("ДекорацияИзбранныйТоварПустаяКнопка%1", ИндексКнопки);
	
	Элемент = Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"), РядКнопок);
	Элемент.Вид = ВидДекорацииФормы.Надпись;
	
	Если ЭтоЗаменаКнопки Тогда
		
		Элемент.АвтоМаксимальнаяШирина		= Ложь;
		Элемент.МаксимальнаяШирина			= 100;
		Элемент.РастягиватьПоГоризонтали	= Истина;
		Элемент.Шрифт						= Новый Шрифт(,, 12, Ложь);
		Элемент.Ширина						= 1;
		
	Иначе
		Элемент.Шрифт = Новый Шрифт(,, 28, Ложь);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ДанныеВедущейКомбинацииГорячихКлавиш()
	
	Результат = Новый Структура("ВедущаяКомбинацияСтрокой,Shift,Alt,Ctrl", Ложь, Ложь, Ложь);
	
	КомандаОткрытияПанелиИзбранного = Элементы.Найти("ОткрытьПанельИзбранныхТоваров");
	
	Если НЕ КомандаОткрытияПанелиИзбранного = Неопределено Тогда
		
		СочетаниеКлавиш = КомандаОткрытияПанелиИзбранного.СочетаниеКлавиш;
		
		СоставляющаяCtrl	= ?(СочетаниеКлавиш.Ctrl, "Ctrl +", "");
		СоставляющаяAlt		= ?(СочетаниеКлавиш.Alt, "Alt +", "");
		СоставляющаяShift	= ?(СочетаниеКлавиш.Shift, "Shift +", "");
		
		КомбинацияГорячихКлавишСтрокой = СтрШаблон("%1%2%3", СоставляющаяCtrl, СоставляющаяAlt, СоставляющаяShift);
		
		Результат.Вставить("ВедущаяКомбинацияСтрокой", КомбинацияГорячихКлавишСтрокой);
		Результат.Вставить("Ctrl", СочетаниеКлавиш.Ctrl);
		Результат.Вставить("Alt", СочетаниеКлавиш.Alt);
		Результат.Вставить("Shift", СочетаниеКлавиш.Shift);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СформироватьЗаголовокКнопки(ВыборкаДляЗаполнения)
	
	Результат = НСтр("ru = ''");
	
	Если ЗначениеЗаполнено(ВыборкаДляЗаполнения) Тогда
		
		Результат = ?(ЕстьСвойство(ВыборкаДляЗаполнения, "НоменклатураПредставление"),
			СокрЛП(ВыборкаДляЗаполнения.НоменклатураПредставление), "");
			
		ПредставлениеХарактеристики =?(ЕстьСвойство(ВыборкаДляЗаполнения, "ХарактеристикаПредставление"),
			СокрЛП(ВыборкаДляЗаполнения.ХарактеристикаПредставление), "");
			
		Если НЕ ПустаяСтрока(ПредставлениеХарактеристики) Тогда
			Результат = СтрШаблон(НСтр("ru = '%1 (%2)'"), Результат, ПредставлениеХарактеристики);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция НаличиеЗапрещенныхКПродажеТоваровВЧеке()
	
	Результат = Новый Структура();
	
	Если ИспользоватьЗапретПродаж Тогда
		
		ПустаяОсобенностьУчета =
			ОбщегоНазначенияРМККлиентПереопределяемый.ПустаяСсылкаНаОсобенностьУчетаНоменклатуры();
		ПустойВидНоменклатуры = 
			ОбщегоНазначенияРМККлиентПереопределяемый.ПустаяСсылкаНаВидНоменклатуры();
		
		ДанныеОтбора = Новый Структура();
		
		Для Каждого СтрокаКорзины Из Объект.Товары Цикл
			
			ДанныеОтбора.Вставить("ОсобенностьУчета", СтрокаКорзины.ОсобенностьУчета);
			ДанныеОтбора.Вставить("ВидНоменклатуры", СтрокаКорзины.ВидНоменклатуры);
			
			НайденныеЗапреты = КэшЗапретовПродаж.НайтиСтроки(ДанныеОтбора);
			
			// Детализированные запреты: особенность учета и вид номенклатуры
			Если НайденныеЗапреты.Количество() > 0 Тогда
				
				ДействующиеЗапреты = УсловияЗапретаПродажиТовара(НайденныеЗапреты, СтрокаКорзины.ВидНоменклатуры);
				
				Если ДействующиеЗапреты.Количество() Тогда
					Возврат ДействующиеЗапреты;
				КонецЕсли;
				
			// Обобщенные запреты: для всех особенностей учета и указанного вида номенклатуры
			Иначе
				
				ДанныеОтбора.Вставить("ОсобенностьУчета", ПустаяОсобенностьУчета);
				ДанныеОтбора.Вставить("ВидНоменклатуры", СтрокаКорзины.ВидНоменклатуры);
				
				НайденныеЗапреты = КэшЗапретовПродаж.НайтиСтроки(ДанныеОтбора);
				
				Если НайденныеЗапреты.Количество() > 0 Тогда
					
					ДействующиеЗапреты = УсловияЗапретаПродажиТовара(НайденныеЗапреты, СтрокаКорзины.ВидНоменклатуры);
					
					Если ДействующиеЗапреты.Количество() Тогда
						Возврат ДействующиеЗапреты;
					КонецЕсли;
					
				// Обобщенные запреты: для всех видов номенклатуры и указанной особенности учета
				Иначе
					
					ДанныеОтбора.Вставить("ОсобенностьУчета", СтрокаКорзины.ОсобенностьУчета);
					ДанныеОтбора.Вставить("ВидНоменклатуры", ПустойВидНоменклатуры);
					
					НайденныеЗапреты = КэшЗапретовПродаж.НайтиСтроки(ДанныеОтбора);
					
					Если НайденныеЗапреты.Количество() > 0 Тогда
						
						ДействующиеЗапреты = УсловияЗапретаПродажиТовара(НайденныеЗапреты, СтрокаКорзины.ВидНоменклатуры);
						
						Если ДействующиеЗапреты.Количество() Тогда
							Возврат ДействующиеЗапреты;
						КонецЕсли;
						
					// Общие запреты: для всех видов номенклатуры и всех особенностей учета
					Иначе
						
						ДанныеОтбора.Вставить("ОсобенностьУчета", ПустаяОсобенностьУчета);
						ДанныеОтбора.Вставить("ВидНоменклатуры", ПустойВидНоменклатуры);
						
						НайденныеЗапреты = КэшЗапретовПродаж.НайтиСтроки(ДанныеОтбора);
						
						Если НайденныеЗапреты.Количество() > 0 Тогда
							
							ДействующиеЗапреты = УсловияЗапретаПродажиТовара(НайденныеЗапреты, СтрокаКорзины.ВидНоменклатуры);
							
							Если ДействующиеЗапреты.Количество() Тогда
								Возврат ДействующиеЗапреты;
							КонецЕсли;	
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция УсловияЗапретаПродажиТовара(НайденныеЗапреты, ВидНоменклатуры)
	Возврат ОбщегоНазначенияРМККлиентСервер.УсловияЗапретаПродажиТовара(НайденныеЗапреты, ВидНоменклатуры);
КонецФункции

#КонецОбласти

#Область Интерфейс

&НаСервере
Процедура ИзменитьДоступностьПолейНайденнойКарты()
	
	ТолькоПросмотр = Элементы.НайденнаяКартаНомер.ТолькоПросмотр;
	
	УстановитьТолькоПросмотрЭлементаФормы(Элементы.НайденнаяКартаТелефон, НЕ ТолькоПросмотр);
	УстановитьТолькоПросмотрЭлементаФормы(Элементы.НайденнаяКартаПочта, НЕ ТолькоПросмотр);
	УстановитьТолькоПросмотрЭлементаФормы(Элементы.НайденнаяКартаФИО, НЕ ТолькоПросмотр);
	УстановитьТолькоПросмотрЭлементаФормы(Элементы.НайденнаяКартаДатаРождения, НЕ ТолькоПросмотр);
	УстановитьТолькоПросмотрЭлементаФормы(Элементы.НайденнаяКартаНомер, НЕ ТолькоПросмотр);
	
	УстановитьВидимостьЭлементаФормы(Элементы.СохранитьДанныеКарты, ТолькоПросмотр);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКартинкуВводПокупателя()
	
	Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Или ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Элементы.ВвестиДанныеПокупателя.Картинка = БиблиотекаКартинок.ДанныеПокупателяВведены;
	Иначе
		Элементы.ВвестиДанныеПокупателя.Картинка = БиблиотекаКартинок.ВвестиДанныеПокупателя;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидОтображения()
	
	Если ЗначениеЗаполнено(ТекущаяНастройкаРМК) Тогда
		
		Если ТекущаяНастройкаРМК.ВидОтображения = Перечисления.ВидыОтображения.Стандартный Тогда
			ЭтаФорма.Масштаб = 100;
		ИначеЕсли ТекущаяНастройкаРМК.ВидОтображения = Перечисления.ВидыОтображения.Увеличенный Тогда
			ЭтаФорма.Масштаб = 120;
		ИначеЕсли ТекущаяНастройкаРМК.ВидОтображения = Перечисления.ВидыОтображения.Уменьшенный Тогда
			ЭтаФорма.Масштаб = 80;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьДоступностьКомандИзмененияКоличества(ТекущаяСтрока)
	
	ДоступностьКоманд = Истина;
	
	ТекущаяСтрокаСодержитСкидку = ТекущаяСтрока.СуммаСкидкиНаценки
		Или ТекущаяСтрока.СуммаАвтоматическойСкидки > 0
		Или ТекущаяСтрока.СуммаСкидкиОплатыБонусом > 0;
		
	ЭтоВозвратТовараПоЧекуПриНаличииСкидок = ТекущаяСтрокаСодержитСкидку
		И ОбщегоНазначенияРМККлиентПереопределяемый.ВидОперацииВозвратПродажи(Объект.ВидОперации)
		И НЕ ЭтоВозвратБезОснования;
		
	Если (ТекущаяСтрока.НеобходимостьВводаКодаМаркировки И Не ТекущаяСтрока.ПоштучноеВыбытие 
			И Не ТекущаяСтрока.ИзменятьКоличествоМаркируемойПродукции)
		Или ТекущаяСтрока.НеобходимостьВводаСерии
		Или ЭтоВозвратТовараПоЧекуПриНаличииСкидок Тогда
			ДоступностьКоманд = Ложь;
	КонецЕсли;
	
	Если ТекущаяСтрока.ПоштучноеВыбытие Тогда
		
		УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияПоштучноеВыбытие, Истина);
		ТекстЗаголовка = СтрШаблон(НСтр("ru = 'из %1'"), ТекущаяСтрока.КоличествоВПотребительскойУпаковке);
		Элементы.ДекорацияПоштучноеВыбытие.Заголовок = ТекстЗаголовка;
		
	Иначе
		
		УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияПоштучноеВыбытие, Ложь);
		Элементы.ДекорацияПоштучноеВыбытие.Заголовок = "";
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварУменьшитьКоличество, ДоступностьКоманд);
	УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварУвеличитьКоличество, ДоступностьКоманд);
	УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварКоличество, ДоступностьКоманд);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьКомандуУказатьСерии(ТекущаяСтрока)
	
	Если ТекущаяСтрока.НеобходимостьВводаСерии Или ТекущаяСтрока.ИспользоватьПартии Тогда
		
		УстановитьВидимостьЭлементаФормы(Элементы.УказатьСерии, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.ТекущийТоварСерияПартия, Истина);
		
		ТекстЗаголовкаСерии = "";
		
		Если ТекущаяСтрока.НеобходимостьВводаСерии Тогда
			
			Если ЗначениеЗаполнено(ТекущаяСтрока.Серия) Тогда
				ТекстЗаголовкаСерии = СтрШаблон(НСтр("ru = 'Серия: %1'"), ТекущаяСтрока.Серия);
			Иначе
				ТекстЗаголовкаСерии = НСтр("ru = 'Серия не выбрана'");
			КонецЕсли;
			
		КонецЕсли;
		
		ТекстЗаголовкаПартии = "";
		
		Если ТекущаяСтрока.ИспользоватьПартии Тогда
			
			Если ЗначениеЗаполнено(ТекущаяСтрока.Партия) Тогда
				ТекстЗаголовкаПартии = СтрШаблон(НСтр("ru = 'Партия: %1'"), ТекущаяСтрока.Партия);
			Иначе
				ТекстЗаголовкаПартии = НСтр("ru = 'Партия не выбрана'");
			КонецЕсли;
			
		КонецЕсли;
		
		Элементы.ТекущийТоварСерияПартия.Заголовок = ТекстЗаголовкаСерии + НСтр("ru = ' '") + ТекстЗаголовкаПартии;
		НастроитьКартинкуУказанияСерийИПартий(ТекущаяСтрока);
		
	Иначе
		
		УстановитьВидимостьЭлементаФормы(Элементы.УказатьСерии, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ТекущийТоварСерияПартия, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтраницуСерии(ТекущаяСтрока = Неопределено)
	
	Если ТекущаяСтрока = Неопределено Тогда
		
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		Если ТекущаяСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущийТоварИдентификатор = ТекущаяСтрока.ПолучитьИдентификатор();
	
	Если ТекущаяСтрока.ЭтоНабор Тогда
		Элементы.ДекорацияНоменклатураДляСерии.Заголовок = ТекущаяСтрока.ПредставлениеНоменклатураХарактеристика;
	Иначе
		Элементы.ДекорацияНоменклатураДляСерии.Заголовок = Элементы.ТекущийТоварНаименование.Заголовок;
	КонецЕсли;
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВыборСерии, ТекущаяСтрока.НеобходимостьВводаСерии);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВыборПартии, ТекущаяСтрока.ИспользоватьПартии);
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Серия) Тогда
		ВыборСерии = ТекущаяСтрока.Серия;
	Иначе
		ВыборСерии = ОбщегоНазначенияРМККлиентПереопределяемый.ПустаяСсылкаНаСерию();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Партия) Тогда
		ВыборПартии = ТекущаяСтрока.Партия;
	Иначе
		ВыборПартии = ОбщегоНазначенияРМККлиентПереопределяемый.ПустаяСсылкаНаПартию();
	КонецЕсли;
	
	ЗаполнитьСписокСерийИПартий();
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаСерииИПартии);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.СменитьКассира, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСериюДляТекущейСтроки()
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОплата);
		Возврат;
		
	КонецЕсли;
	
	ТекущаяСтрока.Серия = ВыборСерии;
	ТекущаяСтрока.Партия = ВыборПартии;
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОплата);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.СменитьКассира, Истина);
	
	НастроитьКомандуУказатьСерии(ТекущаяСтрока);
	
	Если ЭтоЗаменаТоваров Тогда
		НастроитьДоступностьПробитьЧек();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьЭлементаФормы(Элемент, Видимость)
	Элемент.Видимость = Видимость;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЭлементаФормы(Элемент, Доступность)
	Элемент.Доступность = Доступность;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТолькоПросмотрЭлементаФормы(Элемент, ТолькоПросмотр)
	Элемент.ТолькоПросмотр = ТолькоПросмотр;
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуОплата()
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.СменитьКассира, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.Каталог, Истина);
	
	ДоступностьЭлементов = (Объект.Товары.Количество() > 0);
	
	УстановитьДоступностьЭлементаФормы(Элементы.НайтиВЧеке, ДоступностьЭлементов);
	УстановитьДоступностьЭлементаФормы(Элементы.УдалитьЧек, ДоступностьЭлементов);
	УстановитьДоступностьЭлементаФормы(Элементы.ОтложитьЧек, ДоступностьЭлементов);
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОплата);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьДоступностьПробитьЧек()
	
	ЭтоВозвратТовара = ОбщегоНазначенияРМККлиентПереопределяемый.ВидОперацииВозвратПродажи(Объект.ВидОперации)
		ИЛИ ЭтоВозвратБезОснования;
		
	ОсобенностиУчетаТоваровДопускающиеВозвратМаркированныхТоваровБезКМ =
		ОсобенностиУчетаМаркированныхТоваровДопускающиеВозвратБезМарки();
	
	Для Каждого Строка Из Объект.Товары Цикл
		
		ТоварДопускаетсяКВозвратуБезМарки =
			ОсобенностиУчетаТоваровДопускающиеВозвратМаркированныхТоваровБезКМ.Найти(
				Строка.ОсобенностьУчета) <> Неопределено;
				
		ЭтоВозвратМаркируемогоТовараБезПроверкиКонтрольнойМарки = ЭтоВозвратТовара
			И Строка.НеобходимостьВводаКодаМаркировки
			И НЕ ЗначениеЗаполнено(Строка.КодМаркировки)
			И ТоварДопускаетсяКВозвратуБезМарки;

		Если Строка.НеобходимостьВводаКодаМаркировки
			И Не (ЗначениеЗаполнено(Строка.КодМаркировки)
			ИЛИ ЭтоВозвратМаркируемогоТовараБезПроверкиКонтрольнойМарки)
			ИЛИ (Строка.ПроверятьЗаполнениеСерий И НЕ ЗначениеЗаполнено(Строка.Серия))
			ИЛИ (Строка.ПроверятьЗаполнениеПартий И НЕ ЗначениеЗаполнено(Строка.Партия))
			ИЛИ Строка.Количество = 0
			ИЛИ Строка.Цена = 0 Тогда
			
				УстановитьДоступностьЭлементаФормы(Элементы.ПробитьЧек, Ложь);
				Возврат;
			
		КонецЕсли;
	КонецЦикла;
	
	СтруктураОрганизацияИСНО = ВыбраннаяОрганизацияИСНО();
	
	ДоступноПробитиеЧека	= НЕ ((ВыбраннаяОрганизация = Неопределено)
		И (ПробитыеЧеки.НайтиСтроки(СтруктураОрганизацияИСНО).Количество() > 0));
		
	ДоступноПробитиеЧека = НЕ ( (ВыбраннаяОрганизация = Неопределено)
		ИЛИ (ПробитыеЧеки.НайтиСтроки(СтруктураОрганизацияИСНО).Количество() > 0) );
		
	УстановитьДоступностьЭлементаФормы(Элементы.ПробитьЧек, ДоступноПробитиеЧека);
	
	Если НЕ ДоступноПробитиеЧека Тогда
		Возврат;
	КонецЕсли;

	
	ЧекПолностьюОплаченБонусами = (СуммаБонусов = (СуммаБезСкидки - СуммаСкидки) И СуммаБонусов <> 0);
	ОсталосьОплатить = СуммаБезСкидки - СуммаСкидки - СуммаБонусов - СуммаОплаченоНал
		- СуммаОплаченоБН - СуммаОплаченоБезнал - СуммаОплаченоВРассрочку - СуммаОплаченоЗачетАванса
		- СуммаОплаченоСертификатами - СуммаОплаченоQRКодом - СуммаОплаченоСертификатамиНСПК - СуммаТоваровКЗамене;
	ДоступноПробитиеЧека = ЧекПолностьюОплаченБонусами ИЛИ (СуммаИтого > 0 И ОсталосьОплатить <= 0
		И СуммаИтого >= СуммаТоваровКЗамене);
		
	Если ЭтоВозвратТовара И Объект.ОперацияСДенежнымиСредствами И НЕ ЭтоВозвратАванса И НЕ ЭтоАванс Тогда
		Если ОсталосьОплатить < (СуммаБезСкидки - СуммаСкидки - СуммаБонусов) Тогда
			ДоступноПробитиеЧека = Истина;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ПробитьЧек, ДоступноПробитиеЧека);
	УстановитьДоступностьЭлементаФормы(Элементы.ПробитьЧекНСПК, ДоступноПробитиеЧека
		И ПредварительноеОдобрениеНСПКПолучено);
	
	Если ДоступноПробитиеЧека Тогда
		УстановитьФокусНаЭлементеФормыПриВводеОплаты();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЭлементыФормы(ТекущаяСтраница, ДоступностьКоманд)
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(ТекущаяСтраница);
	
	Если ТекущаяСтраница = Элементы.СтраницаПустая Тогда
		
		Если ОбщегоНазначенияРМККлиентПереопределяемый.ВидОперацииПродажа(Объект.ВидОперации) Тогда
			
			Элементы.ДекорацияПустойЧекПродажа.Картинка = БиблиотекаКартинок.РМКЗаставкаПродажа;
			Элементы.ДекорацияТекстПустойСтраницы.Заголовок =
				НСтр("ru='Начните продажу, добавив товар сканером, из избранного или каталога'");
			
		ИначеЕсли ОбщегоНазначенияРМККлиентПереопределяемый.ВидОперацииВозвратПродажи(Объект.ВидОперации) Тогда
			
			Элементы.ДекорацияПустойЧекПродажа.Картинка = БиблиотекаКартинок.РМКЗаставкаВозврат;
			Элементы.ДекорацияТекстПустойСтраницы.Заголовок =
				НСтр("ru='Начните возврат, добавив товар сканером, из избранного или каталога'");
			
		ИначеЕсли ОбщегоНазначенияРМККлиентПереопределяемый.ВидОперацииСкупка(Объект.ВидОперации) Тогда
			
			Элементы.ДекорацияПустойЧекПродажа.Картинка = БиблиотекаКартинок.РМКЗаставкаСкупка;
			Элементы.ДекорацияТекстПустойСтраницы.Заголовок =
				НСтр("ru='Начните скупку, добавив товар сканером, из избранного или каталога'");
			
		ИначеЕсли ОбщегоНазначенияРМККлиентПереопределяемый.ВидОперацииВозвратСкупки(Объект.ВидОперации) Тогда
			
			Элементы.ДекорацияПустойЧекПродажа.Картинка = БиблиотекаКартинок.РМКЗаставкаВозвратСкупки;
			Элементы.ДекорацияТекстПустойСтраницы.Заголовок =
				НСтр("ru='Начните возврат скупки, добавив товар сканером, из избранного или каталога'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ПробитьЧек, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.НайтиВЧеке, ДоступностьКоманд);
	УстановитьДоступностьЭлементаФормы(Элементы.УдалитьЧек, ДоступностьКоманд);
	
	ДоступностьОтложитьЧек = ДоступностьКоманд;
	
	Если ЭтоОплатаРассрочки ИЛИ ЭтоАванс ИЛИ ЭтоВозвратАванса ИЛИ ЭтоЗачетАванса Тогда
		ДоступностьОтложитьЧек = Ложь;
	КонецЕсли;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ОтложитьЧек, ДоступностьОтложитьЧек);
	
	ДоступноПрименениеСкидкиНаЧек = ДопускаетсяПрименениеСкидок
		И (Объект.Товары.Количество() > 0)
		И ОбщегоНазначенияРМККлиентПереопределяемый.ВидОперацииПродажа(Объект.ВидОперации);
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаРучнаяСкидкаНаТовар, ДоступноПрименениеСкидкиНаЧек);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаНаЧек, ДоступноПрименениеСкидкиНаЧек);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьРежимНаВозврат()
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='Перед сменой режима необходимо пробить, удалить или отложить текущий чек.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	ПользовательДоЗаменыПрав = Объект.ПользовательБД;
	КассирДоЗаменыПрав = Объект.Кассир;
	
	НеобходимоеПраво = НСтр("ru='ПравоЧекНаВозвратРМК'");
	
	Если ЕстьПравоНаДействие(НеобходимоеПраво) Тогда
		ВыбратьЧекНаВозврат();
	Иначе
		ПредложитьЗаменитьПраваКассира(НеобходимоеПраво);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЭлементыВРежимеВозврат()
	
	Если НЕ ЭтоЧекКоррекции Тогда
		
		Элементы.ГруппаИнфо.ЦветФона = Новый Цвет(253, 236, 236);
		
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОперации, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСуммаБонусов, СуммаБонусов > 0);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСуммаСертификата, СуммаОплаченоСертификатами > 0);
		УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварСкидка, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварЦенаИзКарточки, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.СкидкаТекущийТоварПроцент, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.СкидкаТекущийТоварСумма, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаНаличными, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаКартой, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаКоманднаяПанельКарта, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.СкидкаНаЧек, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаВРассрочку, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.Предоплата, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСертификатом, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСертификатомНСПК, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.Безнал, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ЗачетАванса, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ЗаменаТоваров, ИспользоватьЗаменуТоваров);
		
	Иначе
		
		Элементы.ГруппаИнфо.ЦветФона = Новый Цвет(220, 220, 220);
		
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаНал, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОплатаНал, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаНаличными, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаКартой, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОплатаКартой, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаКартой, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварСкидка, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварЦенаИзКарточки, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.СкидкаТекущийТоварПроцент, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.СкидкаТекущийТоварСумма, Истина);
		
		УстановитьВидимостьЭлементаФормы(Элементы.ОтложитьЧек, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ОтложенныеЧеки, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаQRCode, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ОтменитьИзмененияЧека, Истина);
		
	КонецЕсли;
	
	Для Каждого Строка Из Объект.Оплата Цикл
		
		Если ОбщегоНазначенияРМККлиентПереопределяемый.ЭтоОплатаНаличными(Строка.ВидОплаты) Тогда
			
			УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаНал, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОплатаНал, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ОплатаНаличными, Истина);
			
			СуммаВозврата = Строка(Строка.Сумма);
			ТекстПодсказки = Элементы.СуммаОплаченоНал.Подсказка + СтрШаблон(" (%1 р.)", СуммаВозврата);
			Элементы.СуммаОплаченоНал.Подсказка = ТекстПодсказки;
			
		КонецЕсли;
		
		Если ОбщегоНазначенияРМККлиентПереопределяемый.ЭтоОплатаПлатежнойКартой(Строка.ВидОплаты) Тогда
			
			УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаКартой, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОплатаКартой, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ОплатаКартой, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ГруппаКоманднаяПанельКарта, Истина);
			
			НомерКарты = НСтр("ru = '*'") + Прав(Строка.НомерПлатежнойКарты, 4);
			ТекстПодсказки = Элементы.СуммаОплаченоБН.Подсказка + СтрШаблон(НСтр("ru = ' (%1)'"), НомерКарты);
			
			СуммаВозврата = Строка(Строка.Сумма);
			ТекстПодсказки = Элементы.СуммаОплаченоБН.Подсказка + СтрШаблон(" (%1 р.)", СуммаВозврата);
			
			Элементы.СуммаОплаченоБН.Подсказка = ТекстПодсказки;
			
		КонецЕсли;
		
		Если ОбщегоНазначенияРМККлиентПереопределяемый.ЭтоОплатаВРассрочку(Строка.ВидОплаты) Тогда
			
			Если Объект.ОперацияСДенежнымиСредствами Тогда
				
				УстановитьДоступностьЭлементаФормы(Элементы.Предоплата, Истина);
				УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаВРассрочку, Истина);
				Элементы.СуммаОплаченоВРассрочку.Заголовок = НСтр("ru = 'Возврат предоплаты'");
				Элементы.СуммаОплаченоВРассрочку.Подсказка = НСтр("ru = 'Возврат предоплаты'");
				Элементы.СуммаОплаченоВРассрочку.Доступность = Ложь;
				
			КонецЕсли;
			
			Если Не Объект.ОперацияСДенежнымиСредствами И Не ЗначениеЗаполнено(Объект.ДокументРасчета) Тогда
				
				УстановитьДоступностьЭлементаФормы(Элементы.ОплатаВРассрочку, Истина);
				УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаВРассрочку, Истина);
				Элементы.СуммаОплаченоВРассрочку.Заголовок = НСтр("ru = 'Возврат рассрочки'");
				Элементы.СуммаОплаченоВРассрочку.Подсказка = НСтр("ru = 'Возврат рассрочки'");
				Элементы.СуммаОплаченоВРассрочку.Доступность = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОбщегоНазначенияРМККлиентПереопределяемый.ЭтоОплатаЗачетомАванса(Строка.ВидОплаты) Тогда
			
			УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаЗачетАванса, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОплатаЗачетАванса, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ЗачетАванса, Истина);
			
		КонецЕсли;
		
		Если ОбщегоНазначенияРМККлиентПереопределяемый.ЭтоОплатаБезналом(Строка.ВидОплаты) Тогда
			
			УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаБезнал, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОплатаБезнал, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.Безнал, Истина);
			
		КонецЕсли;
		
		Если Строка.ВидОплаты = ВидОплатыНСПК
			И ЗначениеЗаполнено(ВидОплатыНСПК) Тогда
			
			ИдентификаторКорзиныНСПК = Строка.СсылочныйНомер;
			НастроитьЭлементыВРежимеПроверкаСертификатаНСПК(Истина, Истина);
			
			ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПодтверждениеНСПК);
			
			СуммаОплаченоСертификатамиНСПК = Строка.Сумма;
			
			УстановитьЗаголовкиОплаты();
			ПодготовитьПредварительноеОдобрениеНСПК();
			УстановитьВидимостьЭлементаФормы(Элементы.ЗаменаТоваров, Ложь);
		КонецЕсли;
		
		Если ОбщегоНазначенияРМККлиентПереопределяемый.ЭтоОплатаВстречнымПредоставлением(Строка.ВидОплаты) Тогда
			ЕстьОплатаВстречнымПредоставлением = Истина;
			УстановитьДоступностьЭлементаФормы(Элементы.ОплатаНаличными, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ОплатаКартой, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Объект.ОперацияСДенежнымиСредствами И НЕ ЭтоВозвратАванса Тогда
		
		УстановитьДоступностьЭлементаФормы(Элементы.Предоплата, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаВРассрочку, Истина);
		Элементы.СуммаОплаченоВРассрочку.Заголовок = НСтр("ru = 'Возврат предоплаты'");
		Элементы.СуммаОплаченоВРассрочку.Подсказка = НСтр("ru = 'Возврат предоплаты'");
		Элементы.СуммаОплаченоВРассрочку.Доступность = Ложь;
		
	КонецЕсли;
	
	Если Объект.Оплата.Количество() = 0 Тогда
		
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаНал, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОплатаНал, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаНаличными, Истина);
		
		Если ИспользоватьОплатуПлатежнымиКартами Тогда
			
			УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаКартой, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОплатаКартой, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ОплатаКартой, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ГруппаКоманднаяПанельКарта, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	НастроитьВидимостьОплатыQRКодом();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЭлементыВРежимеПродажа()
	
	Элементы.ГруппаИнфо.ЦветФона = Новый Цвет(229, 247, 238);
	
	УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварСкидка, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаТекущийТоварПроцент, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаТекущийТоварСумма, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаКартой, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаКоманднаяПанельКарта, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаНаличными, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСертификатом, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСертификатомНСПК, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.ЗаменаТоваров, Ложь);
	
	НастроитьВидимостьОплатыQRКодом();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьРежимНаПродажа()
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='Перед сменой режима необходимо пробить, удалить или отложить текущий чек.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	СформироватьЗаголовок(НСтр("ru='Продажа'"));
	Объект.ВидОперации = ОбщегоНазначенияРМККлиентПереопределяемый.ВидОперацииЧекаККМ();
	Элементы.ДекорацияТекстПустойСтраницы.Заголовок =
		НСтр("ru='Начните продажу, добавив товар сканером, из избранного или каталога'");
	Элементы.ДекорацияПустойЧекПродажа.Картинка = БиблиотекаКартинок.РМКЗаставкаПродажа;
		
	НачинатьНовыйЧекВРежимеСкупка = Ложь;
	
	НастроитьЭлементыВРежимеПродажа();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьАктивностьСтроки()
	
	Если Объект.Товары.Количество() > 0 Тогда
		Элементы.Товары.ТекущаяСтрока = Объект.Товары[0].ПолучитьИдентификатор();
	КонецЕсли;

	ОткрытыСообщенияОбОшибках =(Элементы.СтраницыСтаканПраво.ТекущаяСтраница = Элементы.СтраницаИнфоОшибка);
	Если НЕ ОткрытыСообщенияОбОшибках Тогда
		УстановитьФокусНаТовареТребующемВводаМарки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоТекущемуПользователю()
	
	Если ЗначениеЗаполнено(Объект.ПользовательБД) Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.Кассир) Тогда
			Объект.Кассир = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ПользовательБД, "ФизическоеЛицо");
		КонецЕсли;
		
	Иначе
		
		Объект.ПользовательБД = Пользователи.ТекущийПользователь();
		ФизЛицоПользователя = ОбщегоНазначенияРМКПереопределяемый.КассирДляРМК(Объект.ПользовательБД);
		СтраницаДляОтображения = Элементы.СтраницаВводКассира;
		
		Если ЗначениеЗаполнено(ФизЛицоПользователя) Тогда
			
			СтраницаДляОтображения = Элементы.СтраницаПустая;
			Объект.Кассир = ФизЛицоПользователя;
			
			Если ПараметрыОткрытияФормы = Неопределено Тогда
				ПараметрыОткрытияФормы = Новый Структура();
			КонецЕсли;
			
			ПараметрыОткрытияФормы.Вставить("ПроверитьКассовуюСмену");
			
		КонецЕсли;
		
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(СтраницаДляОтображения);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОперации, ЗначениеЗаполнено(ФизЛицоПользователя));
		
	КонецЕсли;
	
	ЗаполнитьТаблицуРолейПользователя();
	НастроитьФормуВСоответствииСПравамиПользователя();
	НастроитьДоступностьВыбораПродавцов();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьДоступностьВыбораПродавцов()
	
	Если ЗначениеЗаполнено(ТекущаяНастройкаРМК) Тогда
		
		УстановитьВидимостьЭлементаФормы(Элементы.СтраницыВыборПродавца,
			ТекущаяНастройкаРМК.РазрешитьВыборПродавца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуВСоответствииСПравамиПользователя()
	
	ПравоИзменятьЦенуРМК = НЕ (СписокРолейПользователя.НайтиПоЗначению("ПравоИзменятьЦенуРМК") = Неопределено);
	УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварЦенаИзКарточки, ПравоИзменятьЦенуРМК);
	
	ПравоУстанавливатьРучныеСкидки =
		НЕ (СписокРолейПользователя.НайтиПоЗначению("ПравоРучнаяСкидкаРМК") = Неопределено);
	
	
	ДопускаетсяПрименениеСкидок = ПравоУстанавливатьРучныеСкидки И (МаксимальныйПроцентРучнойСкидки > 0);
	ДоступныРучныеСкидки = ДопускаетсяПрименениеСкидок И Объект.Товары.Количество() > 0;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаРучнаяСкидкаНаТовар, ДоступныРучныеСкидки);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаНаЧек, ДоступныРучныеСкидки);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьНачальнуюСтраницу(НоваяСтраница)
	
	Если НЕ ЗначениеЗаполнено(Объект.Кассир) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыборКассыККМ Тогда
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(НоваяСтраница);
	КонецЕсли;
	
	Если НЕ НоваяСтраница = Элементы.СтраницаВводКассира Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОперации, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложитьЗаменитьПраваКассира(НеобходимоеПраво)
	
	КодДляЗаменыПрав = НСтр("ru = ''");
	ТекущаяОперация = НСтр("ru = ''");
	
	Если НеобходимоеПраво = НСтр("ru='ПравоУдалитьСтрокуРМК'") Тогда
		
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаЗаменаПрав);
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Ложь);
		Элементы.ДекорацияЗаголовокЗаменаПрав.Заголовок = НСтр("ru='Для удаления товара позовите администратора'");
		Элементы.ДекорацияТекстЗаменаПрав.Заголовок = НСтр("ru='и отсканируйте его карту или введите персональный код'");
		ТекущаяОперация = НСтр("ru='УдалитьСтрокуРМК'");
		ЭтаФорма.ТекущийЭлемент = Элементы.КодДляЗаменыПрав;
		
	ИначеЕсли НеобходимоеПраво = НСтр("ru='ПравоУдалитьЧекРМК'") Тогда
		
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаЗаменаПрав);
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Ложь);
		Элементы.ДекорацияЗаголовокЗаменаПрав.Заголовок = НСтр("ru='Для удаления чека позовите администратора'");
		Элементы.ДекорацияТекстЗаменаПрав.Заголовок = НСтр("ru='и отсканируйте его карту или введите персональный код'");
		ТекущаяОперация = НСтр("ru='УдалитьЧекРМК'");
		ЭтаФорма.ТекущийЭлемент = Элементы.КодДляЗаменыПрав;
		
	ИначеЕсли НеобходимоеПраво = НСтр("ru='ПравоЧекНаВозвратРМК'") Тогда
		
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаВводКассира);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОперации, Ложь);
		Элементы.ДекорацияЗаголовокВводКассира.Заголовок = 
			НСтр("ru='Для возврата отсканируйте карту администратора или введите его персональный код'");
		Элементы.ДекорацияЗаголовокЗаменаПрав.Заголовок = НСтр("ru='Для возврата позовите администратора'");
		Элементы.ДекорацияТекстЗаменаПрав.Заголовок = НСтр("ru='и отсканируйте его карту или введите персональный код'");
		ТекущаяОперация = НСтр("ru='ЧекНаВозвратРМК'");
		
	ИначеЕсли НеобходимоеПраво = НСтр("ru='ПравоЧекКоррекцииРМК'") Тогда
		
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаВводКассира);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОперации, Ложь);
		Элементы.ДекорацияЗаголовокВводКассира.Заголовок = 
			НСтр("ru='Для коррекции отсканируйте карту администратора или введите его персональный код'");
		Элементы.ДекорацияЗаголовокЗаменаПрав.Заголовок = НСтр("ru='Для коррекции позовите администратора'");
		Элементы.ДекорацияТекстЗаменаПрав.Заголовок = НСтр("ru='и отсканируйте его карту или введите персональный код'");
		ТекущаяОперация = НСтр("ru='ЧекКоррекцииРМК'");
		
	ИначеЕсли НеобходимоеПраво = НСтр("ru='ПравоРедактироватьКартуРМК'") Тогда
		
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаЗаменаПрав);
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Ложь);
		Элементы.ДекорацияЗаголовокЗаменаПрав.Заголовок =
			НСтр("ru='Для редактирования данных карты позовите администратора'");
		Элементы.ДекорацияТекстЗаменаПрав.Заголовок = НСтр("ru='и отсканируйте его карту или введите персональный код'");
		ТекущаяОперация = НСтр("ru='РедактироватьКартуРМК'");
		ЭтаФорма.ТекущийЭлемент = Элементы.КодДляЗаменыПрав;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьФормуПослеЗаменыПрав()
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Истина);
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОплата);
	
	Если ТекущаяОперация = НСтр("ru='УдалитьСтрокуРМК'") Тогда
		
		ОграничитьДоступностьЭлементовПриОжиданииМарки(Ложь);
		ПересчитатьСуммыПослеУдаленияСтроки();
		
	ИначеЕсли ТекущаяОперация = НСтр("ru='УдалитьЧекРМК'") Тогда
		
		ОграничитьДоступностьЭлементовПриОжиданииМарки(Ложь);
		СформироватьЗаголовок(НСтр("ru='Продажа'"));
		НастроитьЭлементыВРежимеПродажа();
		РазблокироватьОбъектСервисаЛояльности("clientbonuses");
		СписатьРазблокироватьПодарочныеСертификаты();
		
	ИначеЕсли ТекущаяОперация = НСтр("ru='РедактироватьКартуРМК'") Тогда
		
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПравоДанныеПокупателя);
		
	КонецЕсли;
	
	ТекущаяОперация = НСтр("ru = ''");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбщуюСтраницу(ЭтоВозврат = Ложь)
	
	НоваяСтраница = Элементы.СтраницаПустая;
	Если Объект.Товары.Количество() > 0 Тогда
		НоваяСтраница = Элементы.СтраницаОбщая;
	КонецЕсли;
	
	Если ЭтоВозврат Тогда
		
		Элементы.ДекорацияТекстПустойСтраницы.Заголовок =
			НСтр("ru='Начните возврат, добавив товар сканером, из избранного или каталога'");
		Элементы.ДекорацияПустойЧекПродажа.Картинка = БиблиотекаКартинок.РМКЗаставкаВозврат;
		
	КонецЕсли;
	
	НастроитьФормуПоТекущемуПользователю();
	НастроитьНачальнуюСтраницу(НоваяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаголовокВводКассира()
	
	КодКассира = НСтр("ru = ''");
	
	Если ЗначениеЗаполнено(ОсобыйЗаголовокВводаКассира) Тогда
		Элементы.ДекорацияЗаголовокВводКассира.Заголовок = ОсобыйЗаголовокВводаКассира;
	Иначе
		Элементы.ДекорацияЗаголовокВводКассира.Заголовок =
			НСтр("ru='Для входа отсканируйте персональный код или задействуйте магнитную карту'");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НастроитьФормуВРежимВозвратБезЧека()
	
	НастроитьЭлементыФормы(Элементы.СтраницаПустая, Истина);
	
	Элементы.ГруппаИнфо.ЦветФона = Новый Цвет(253, 236, 236);
	
	ПравоИзменятьЦену = НЕ СписокРолейПользователя.НайтиПоЗначению(НСтр("ru='ПравоИзменятьЦенуРМК'")) = Неопределено;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварЦенаИзКарточки, ПравоИзменятьЦену);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаРучнаяСкидкаНаТовар, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаНаЧек, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаНаличными, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаКартой, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаКоманднаяПанельКарта, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварСкидка, Ложь);
	
	ЭтоВозвратБезОснования = Истина;
	
	НастроитьВидимостьОплатыQRКодом();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьНаСтраницуСозданиеКарты()
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаСозданиеКарты);
	
	Элементы.ДекорацияСозданиеКартыКартинка.Картинка = БиблиотекаКартинок.СозданиеКартыЗеленый;
	Элементы.ДекорацияСозданиеКартыТекст.ЦветТекста = Новый Цвет(0, 163, 88);
	Элементы.ДекорацияСозданиеКартыТекст.Гиперссылка = Ложь;
	Элементы.ДекорацияСозданиеКартыЛиния.Картинка = БиблиотекаКартинок.ЛинияВыделения;
	
	Элементы.ДекорацияПоискКартыКартинка.Картинка = БиблиотекаКартинок.ПоискКартыЧерный;
	Элементы.ДекорацияПоискКартыТекст.ЦветТекста = Новый Цвет(51, 51, 51);
	Элементы.ДекорацияПоискКартыТекст.Гиперссылка = Истина;
	Элементы.ДекорацияПоискКартыЛиния.Картинка = БиблиотекаКартинок.ЛинияПоУмолчанию;
	
	Элементы.ДекорацияОтправкаЧекаКартинка.Картинка = БиблиотекаКартинок.ОтправкаЧекаЧерный;
	Элементы.ДекорацияОтправкаЧекаТекст.ЦветТекста = Новый Цвет(51, 51, 51);
	Элементы.ДекорацияОтправкаЧекаТекст.Гиперссылка = Истина;
	Элементы.ДекорацияОтправкаЧекаЛиния.Картинка = БиблиотекаКартинок.ЛинияПоУмолчанию;
	
	ТекущийЭлемент = Элементы.НоваяКартаНомер;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьНаСтраницуПоискКарты()
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПоискКарты);
	ЭтаФорма.ТекущийЭлемент = Элементы.СтрокаПоискаКарты;
	
	Элементы.ДекорацияПоискКартыКартинка.Картинка = БиблиотекаКартинок.ПоискКартыЗеленый;
	Элементы.ДекорацияПоискКартыТекст.ЦветТекста = Новый Цвет(0, 163, 88);
	Элементы.ДекорацияПоискКартыТекст.Гиперссылка = Ложь;
	Элементы.ДекорацияПоискКартыЛиния.Картинка = БиблиотекаКартинок.ЛинияВыделения;
	
	Элементы.ДекорацияОтправкаЧекаКартинка.Картинка = БиблиотекаКартинок.ОтправкаЧекаЧерный;
	Элементы.ДекорацияОтправкаЧекаТекст.ЦветТекста = Новый Цвет(51, 51, 51);
	Элементы.ДекорацияОтправкаЧекаТекст.Гиперссылка = Истина;
	Элементы.ДекорацияОтправкаЧекаЛиния.Картинка = БиблиотекаКартинок.ЛинияПоУмолчанию;
	
	Элементы.ДекорацияСозданиеКартыКартинка.Картинка = БиблиотекаКартинок.СозданиеКартыЧерный;
	Элементы.ДекорацияСозданиеКартыТекст.ЦветТекста = Новый Цвет(51, 51, 51);
	Элементы.ДекорацияСозданиеКартыТекст.Гиперссылка = Истина;
	Элементы.ДекорацияСозданиеКартыЛиния.Картинка = БиблиотекаКартинок.ЛинияПоУмолчанию;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьНаСтраницуОтправкаЧека()
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОтправкаЧека);
	
	Элементы.ДекорацияОтправкаЧекаКартинка.Картинка = БиблиотекаКартинок.ОтправкаЧекаЗеленый;
	Элементы.ДекорацияОтправкаЧекаТекст.ЦветТекста = Новый Цвет(0, 163, 88);
	Элементы.ДекорацияОтправкаЧекаТекст.Гиперссылка = Ложь;
	Элементы.ДекорацияОтправкаЧекаЛиния.Картинка = БиблиотекаКартинок.ЛинияВыделения;
	
	Элементы.ДекорацияПоискКартыКартинка.Картинка = БиблиотекаКартинок.ПоискКартыЧерный;
	Элементы.ДекорацияПоискКартыТекст.ЦветТекста = Новый Цвет(51, 51, 51);
	Элементы.ДекорацияПоискКартыТекст.Гиперссылка = Истина;
	Элементы.ДекорацияПоискКартыЛиния.Картинка = БиблиотекаКартинок.ЛинияПоУмолчанию;
	
	Элементы.ДекорацияСозданиеКартыКартинка.Картинка = БиблиотекаКартинок.СозданиеКартыЧерный;
	Элементы.ДекорацияСозданиеКартыТекст.ЦветТекста = Новый Цвет(51, 51, 51);
	Элементы.ДекорацияСозданиеКартыТекст.Гиперссылка = Истина;
	Элементы.ДекорацияСозданиеКартыЛиния.Картинка = БиблиотекаКартинок.ЛинияПоУмолчанию;
	
	ТекущийЭлемент = Элементы.ОтправкаЧекаПочта;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьНаСтраницуВводаОплаты()
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПравоОбщая);
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОплата);
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиВЧекеНажатие()
	
	Если Элементы.СтраницыСтаканПраво.ТекущаяСтраница = Элементы.СтраницаПравоНайтиВЧеке Тогда
		
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Истина);
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОплата);
		
	Иначе
		
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Ложь);
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПравоНайтиВЧеке);
		ТекущийЭлемент = Элементы.ШтрихкодДляПоиска;
		ШтрихкодДляПоиска = НСтр("ru = ''");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка = "", ТекстОшибки = "")
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаИнфоОшибка);
	
	Элементы.ТекстПредупреждениеЗаголовок.Заголовок = ТекстЗаголовка;
	Элементы.ТекстПредупреждениеОшибка.Заголовок = ТекстОшибки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтраницуОтменаОплатыПоКарте(ТекстОшибки)
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.СменитьКассира, Ложь);
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОтменаОплатыПоКарте);
	Элементы.ДекорацияНадписьЭквайрингОшибка.Заголовок =
		СтрЗаменить(Элементы.ДекорацияНадписьЭквайрингОшибка.Заголовок, "%1", ТекстОшибки);
	Элементы.ДекорацияНадписьЭквайрингОшибка.Заголовок =
		СтрЗаменить(Элементы.ДекорацияНадписьЭквайрингОшибка.Заголовок, "%2", Строка(СуммаОплаченоБН));
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуОтправкиЭлектронногоЧека()
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПравоДанныеПокупателя);
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОтправкаЧека);
	ПереключитьНаСтраницуОтправкаЧека();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтраницуВнесение()
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		ПоказатьПредупреждение(,
			НСтр("ru='Перед сменой режима необходимо пробить, удалить или отложить текущий чек.'"));
		ВывестиИнформациюНаДисплейПокупателя("НачалоРаботы");
		Возврат;
		
	КонецЕсли;
	
	Если ТаблицаКассККМОрганизаций.Количество() > 1 И ТекущаяОперация = НСтр("ru=''") Тогда
		
		ТекущаяОперация = НСтр("ru='Внесение'");
		ПереключитьНаСтраницуВыбораКассыККМ();
		Возврат;
		
	КонецЕсли;
	
	ТекущаяОперация = НСтр("ru=''");
	ВывестиИнформациюНаДисплейПокупателя("Сервис");
	СуммаВнесение = 0;
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПравоВнесение);
	
	УстановитьВидимостьЭлементаФормы(Элементы.СтраницыЛево, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаИнфоВнесение, Истина);
	
	УстановитьДоступностьЭлементаФормы(Элементы.СтраницыЛево, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Ложь);
	
	ВывестиИнформациюНаДисплейПокупателя("НачалоРаботы");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтраницуВнесенияДенежныхСредств()
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='Перед началом операции внесения необходимо пробить,
			|удалить или отложить текущий чек.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		ВывестиИнформациюНаДисплейПокупателя("НачалоРаботы");
		Возврат;
		
	КонецЕсли;
	
	Если ОбщегоНазначенияРМККлиентПереопределяемый.ИспользоватьСтандартныйИнтерфейсВнесения() Тогда
		ОткрытьСтраницуВнесение();
	Иначе
		ОбщегоНазначенияРМККлиентПереопределяемый.ВыполнитьОперациюВнесение(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтраницуВыемкиДенежныхСредств()
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		ПоказатьПредупреждение(,
			НСтр("ru='Перед началом операции выемки необходимо пробить, удалить или отложить текущий чек.'"));
		ВывестиИнформациюНаДисплейПокупателя("НачалоРаботы");
		Возврат;
		
	КонецЕсли;
	
	Если ТаблицаКассККМОрганизаций.Количество() > 1 И ТекущаяОперация = НСтр("ru=''") Тогда
		
		ТекущаяОперация = НСтр("ru='Выемка'");
		ПереключитьНаСтраницуВыбораКассыККМ();
		Возврат;
		
	КонецЕсли;
	
	ТекущаяОперация = НСтр("ru=''");
	ВывестиИнформациюНаДисплейПокупателя("Сервис");
	СуммаВыемка = 0;
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПравоВыемка);
	
	УстановитьВидимостьЭлементаФормы(Элементы.СтраницыЛево, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаИнфоВыемка, Истина);
	
	УстановитьДоступностьЭлементаФормы(Элементы.СтраницыЛево, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Ложь);
	
	ВывестиИнформациюНаДисплейПокупателя("НачалоРаботы");

КонецПроцедуры

&НаКлиенте
Процедура НастроитьФормуДляРучногоСопоставленияТовара(ПараметрыШтрихкода)
	
	Если ОжидатьВводМарки И Лев(ПараметрыШтрихкода.EAN, 2) = "29" Тогда
		
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		
		Если НЕ ТекущаяСтрока = Неопределено Тогда
		
			ДанныеДляРучногоСопоставления = ПараметрыШтрихкода;
			
			СопоставитьСТекущейСтрокой();
			КонтекстПроверкиКонтрольнойМарки = КонтекстПроверкиКонтрольнойМарки();
			ЗаполнитьЗначенияСвойств(КонтекстПроверкиКонтрольнойМарки, ТекущаяСтрока);
			ЭтоОбработкаСопоставленияТовара = Истина;
			КонтекстПроверкиКонтрольнойМарки.ЭтоОбработкаСопоставленияТовара = ЭтоОбработкаСопоставленияТовара;
			ЗавершитьВводШтрихкодаМаркаВведена(КонтекстПроверкиКонтрольнойМарки);
			ДанныеДляРучногоСопоставления = Неопределено;
			Возврат;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПустая Тогда
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
	КонецЕсли;
	
	Если ПараметрыШтрихкода.Свойство("ТоварНеНайденПоМарке") Тогда
		ТекстЗаголовкаСопоставления = НСтр("ru = 'Мы не нашли товара по этой марке'");
	ИначеЕсли ПараметрыШтрихкода.Свойство("ПодтвердитьВыборАлкоголя") Тогда
		ТекстЗаголовкаСопоставления = НСтр("ru = 'Мы не нашли товара по этой марке'");
	Иначе
		ТекстЗаголовкаСопоставления = НСтр("ru = 'Мы не нашли товар по этому штрихкоду'");
	КонецЕсли;
	
	Если ОжидатьВводМарки Тогда
		ТекстСопоставления = НСтр("ru = 'Можете сопоставить с текущим товаром или ввести другую марку'");
	Иначе
		ТекстСопоставления = НСтр("ru = 'Можете сопоставить вручную с помощью каталога или предложить другой товар'");
	КонецЕсли;
		
	Элементы.ДекорацияЗаголовокСопоставлениеТовара.Заголовок = ТекстЗаголовкаСопоставления;
	Элементы.ДекорацияТекстСопоставлениеТовара.Заголовок = ТекстСопоставления;
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаРучноеСопоставлениеТовара);
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Ложь);
	
	ДанныеДляРучногоСопоставления = ПараметрыШтрихкода;
	
КонецПроцедуры

&НаКлиенте
Процедура УточнитьПравильностьНоменклатуры(ПараметрыШтрихкода)
	
	Если НЕ ПараметрыШтрихкода = Неопределено И ЕстьСвойство(ПараметрыШтрихкода, "ТекущаяНоменклатура") Тогда
		
		ОповещениеЗавершения = Новый ОписаниеОповещения("УточнитьПравильностьНоменклатурыЗавершение",
				ЭтотОбъект, ПараметрыШтрихкода);
				
		Если ОбщегоНазначенияРМККлиентПереопределяемый.ДобавлятьМаркуАлкоголяБезПодтверждения() = Истина Тогда
			
			ВыполнитьОбработкуОповещения(ОповещениеЗавершения, КодВозвратаДиалога.Да);
			
		Иначе
			
			ТекстЗаголовка = НСтр("ru = 'Подтверждение ввода марки алкоголя.'");
			ТекстВопроса = СтрШаблон(НСтр("ru = 'Марка для товара ""%1"" указана верно?'"),
				Строка(ПараметрыШтрихкода.ТекущаяНоменклатура));
			
			ПоказатьВопрос(ОповещениеЗавершения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,
				КодВозвратаДиалога.Да, ТекстЗаголовка);
				
		КонецЕсли;
	Иначе
		НастроитьФормуДляРучногоСопоставленияТовара(ПараметрыШтрихкода);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКаталогКлиент()
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОперации, Ложь);
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПоискТовара);
	ЭтаФорма.ТекущийЭлемент = Элементы.ДополнениеСтрокаПоиска;
	
	ОбщегоНазначенияРМККлиентПереопределяемый.ПриОткрытииКаталогаТоваров(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПоискТоваровКлиент()
	
	НастроитьЭлементыФормы(Элементы.СтраницаОбщая, Истина);
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОперации, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Истина);
	
	Если Объект.Товары.Количество() = 0 Тогда 
		
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПустая);
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОплата);
		УстановитьДоступностьЭлементаФормы(Элементы.НайтиВЧеке, Ложь);
		
	КонецЕсли;
	
	СписокТоваров.Отбор.Элементы.Очистить();
	
	Если НЕ ЗакрыватьПодборПриВыбореТовара Тогда
		Отказ = ЕстьНезаполненныеДанные();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьФормуРабочегоМестаКассира()

	ИдентификаторЗамераПробитияЧека		= НСтр("ru = ''");
	ИдентификаторЗамераВремениПоиска	= НСтр("ru = ''");
	ЭлектронныеВесыЗаняты				= Ложь;
	ДанныеКПередачеВДисплейПокупателя	= БуферОбменаДисплеяПокупателя();
	
	ВременныйКонтекстПроверкиМарки = Неопределено;
	
	СформироватьЗаголовок(НСтр("ru ='Продажа'"));
	ВывестиИнформациюНаДисплейПокупателя("НачалоРаботы");
	УстановитьДоступностьЭлементаФормы(Элементы.НайтиВЧеке, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.УдалитьЧек, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ОтложитьЧек, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ОплатаСертификатомНСПК, ИспользоватьОплатуСертификатамиНСПК);
	УстановитьВидимостьЭлементаФормы(Элементы.ЗаменаТоваров, Ложь);

	НастроитьВидимостьОплатыQRКодом(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьРежимНаЧекКоррекции()
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='Перед сменой режима необходимо пробить, удалить или отложить текущий чек.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	ПользовательДоЗаменыПрав = Объект.ПользовательБД;
	КассирДоЗаменыПрав = Объект.Кассир;
	
	НеобходимоеПраво = НСтр("ru='ПравоЧекКоррекцииРМК'");
	
	Если ЕстьПравоНаДействие(НеобходимоеПраво) Тогда
		ВыбратьЧекКоррекции();
	Иначе
		ПредложитьЗаменитьПраваКассира(НеобходимоеПраво);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЧекКоррекции()
	
	ВывестиИнформациюНаДисплейПокупателя("Коррекция");
	СформироватьЗаголовок(НСтр("ru='Коррекция'"));
	
	КассыККМИОрганизации = ПодключенныеКассыККМИОрганизации();
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("МассивКассККМ", КассыККМИОрганизации.МассивКассККМ);
	ПараметрыОткрытия.Вставить("МассивОрганизаций", КассыККМИОрганизации.МассивОрганизаций);
	ПараметрыОткрытия.Вставить("ТорговыйОбъект", Объект.ТорговыйОбъект);
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru='Выбор чека для коррекции'"));
	ПараметрыОткрытия.Вставить("ЧекКоррекции", Истина);
	
	ЭтоЧекКоррекции = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборЧекаЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.РабочееМестоКассира.Форма.ФормаВыбораЧека",
		ПараметрыОткрытия, ЭтотОбъект,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокТоваровВыборПродолжение(ЭтоФормаРучногоПодбора = Ложь)
	
	Если СписокДобавленныхСтрокТоваров.Количество() > 0 Тогда
		
		СписокДобавленныхСтрокТоваров.Очистить();
		Возврат;
		
	КонецЕсли;
	
	Если ИспользоватьЗапретПродаж Тогда
		
		ЗапретыПродаж = Новый Структура();
		ОбработатьВыборТовара(ДанныеДобавляемогоТовара, ЗапретыПродаж);
		
		Если ЗапретыПродаж.Количество() > 0 Тогда
			
			ОткрытьСтраницуЗапретаПродажиПоВремени(ЗапретыПродаж.ВидНоменклатуры,
				ЗапретыПродаж.ВремяНачалаЗапрета, ЗапретыПродаж.ВремяОкончанияЗапрета);
			Возврат;
			
		КонецЕсли;
		
	Иначе
		ОбработатьВыборТовара(ДанныеДобавляемогоТовара, Ложь);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВременныйКонтекстПроверкиМарки) Тогда
		
		ОбновитьИнформациюНаДисплееПокупателя("ДобавлениеТовара");
		
		Если ((Не ЭтоФормаРучногоПодбора)
			ИЛИ (ЭтоФормаРучногоПодбора И ИспользоватьНовыйПодборТоваров И ЗакрыватьПодборПриВыбореТовара)
			ИЛИ (ЭтоФормаРучногоПодбора И НЕ ИспользоватьНовыйПодборТоваров)) Тогда
			
				Если Объект.Товары.Количество() > 0 Тогда
					НастроитьЭлементыФормы(Элементы.СтраницаОбщая, Истина);
				КонецЕсли;
			
		КонецЕсли;
		
		РассчитатьСуммуВСтрокеТабличнойЧасти();
		РассчитатьСуммуОплатыБонусами();
		
		РучноеСопоставлениеТовара = Ложь;
		ДанныеДляРучногоСопоставления = Неопределено;
		КодМаркиВРаботе = НСтр("ru = ''");
		
		Если ЗапрашиватьПодтверждениеВозраста18Плюс Тогда
			
			Если СостояниеПодтвержденияВозраста = "" ИЛИ СостояниеПодтвержденияВозраста = "Нет18" Тогда
				
				Если ТоварСВозрастнымОграничением() Тогда
					ПереключитьНаСтраницуПодтвержденияВозраста();
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СписокДобавленныхСтрокТоваров.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьНаСтраницуПодтвержденияВозраста(ВыбранОтложенныйЧек = Ложь)
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПодтверждениеВозраста);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Ложь);
	
	Если НЕ СостояниеПодтвержденияВозраста = "Нет18" Тогда
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПодтверждениеВозрастаПервая);
	Иначе
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПодтверждениеВозрастаПовторная);
	КонецЕсли;
	
	СостояниеПодтвержденияВозраста = ?(ВыбранОтложенныйЧек, "ВыбранОтложенныйЧек", "Выбор");
	
	ПредельнаяДатаВозраста = Формат(ДобавитьМесяц(КонецДня(ТекущаяДата()), -12*18)+1, "ДФ=dd.MM.yyyy");
	Элементы.ДекорацияТекстВозрастноеОграничение.Заголовок =
		СтрШаблон(НСтр("ru = 'Покупателю уже исполнилось 18 лет?
			|(Дата рождения раньше %1 г.)?'"), ПредельнаяДатаВозраста);

КонецПроцедуры

&НаКлиенте
Функция ТоварСВозрастнымОграничением(ОсобенностьУчетаТовара = Неопределено)
	
	МассивОсобеностейУчета = Новый Массив;
	ОбщегоНазначенияРМККлиентПереопределяемый.ЗаполнитьМассивДляПроверкиВозраста(МассивОсобеностейУчета);
	
	ЕстьТоварСВозрастнымОграничением = Ложь;
	
	Если ОсобенностьУчетаТовара = Неопределено Тогда
		
		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			
			Если Не МассивОсобеностейУчета.Найти(СтрокаТовары.ОсобенностьУчета) = Неопределено Тогда
				ЕстьТоварСВозрастнымОграничением = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		ЕстьТоварСВозрастнымОграничением = Не МассивОсобеностейУчета.Найти(ОсобенностьУчетаТовара) = Неопределено;
	КонецЕсли;
	
	Возврат ЕстьТоварСВозрастнымОграничением;
	
Конецфункции

&НаКлиенте
Процедура ОграничитьДоступностьЭлементовПриОжиданииМарки(ОжидатьМарку)
	
	УстановитьДоступностьЭлементаФормы(Элементы.Каталог, НЕ ОжидатьМарку);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаРядовКнопокБыстрыхТоваров, НЕ ОжидатьМарку);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаТовары, НЕ ОжидатьМарку);
	ОжидатьВводМарки = ОжидатьМарку;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСтраницуВыбораКассККМ()
	
	СписокКассККМ = Элементы.КассаККМДляОперации.СписокВыбора;
	СписокКассККМ.Очистить();
	Дата = ТекущаяДата();
	ЕстьАктуальныеСмены = Ложь;
	
	Для Каждого СтрокаКассККМ Из ТаблицаКассККМОрганизаций Цикл
		
		ТекстСмены = ?(НЕ ЗначениеЗаполнено(СтрокаКассККМ.НачалоКассовойСмены),
				НСтр("ru = 'Смена закрыта'"), НСтр("ru = 'Смена открыта: '")
				+ Формат(СтрокаКассККМ.НачалоКассовойСмены, "ДЛФ=DT"));
				
		ТекстИстекшейСмены = "";
		
		Если ЗначениеЗаполнено(СтрокаКассККМ.НачалоКассовойСмены) Тогда
			
			Если Дата - СтрокаКассККМ.НачалоКассовойСмены >= 60*60*24 Тогда
				ТекстИстекшейСмены = НСтр("ru = 'Прошло более 24ч. Требуется закрытие!'");
			Иначе
				ЕстьАктуальныеСмены = Истина;
			Конецесли;
			
		КонецЕсли;
		
		ПредставлениеКнопкиКассы = СтрШаблон(НСтр("ru = 'Касса: %1
				| Организация: %2
				| %3
				| %4
				|
				|
				|'"), СтрокаКассККМ.КассаККМ, СтрокаКассККМ.Организация, ТекстСмены, ТекстИстекшейСмены);
		
		СписокКассККМ.Добавить(СтрокаКассККМ.КассаККМ, ПредставлениеКнопкиКассы);
		
	КонецЦикла;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ВыходИзРежимаВыбораКассы, ЕстьАктуальныеСмены);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьНаСтраницуВыбораКассыККМ()
	
	НастроитьСтраницуВыбораКассККМ();
	
	КассаККМДляОперации = Неопределено;
	
	ВидимостьКнопокОткрытияЗакрытия = (ТекущаяОперация = НСтр("ru=''"));
	УстановитьВидимостьЭлементаФормы(Элементы.ОткрытьСменуИзРежимаВыбораКассы, ВидимостьКнопокОткрытияЗакрытия);
	УстановитьВидимостьЭлементаФормы(Элементы.ЗакрытьСменуИзРежимаВыбораКассы, ВидимостьКнопокОткрытияЗакрытия);
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Ложь);
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаВыборКассыККМ);
	
	Если ТекущаяОперация = НСтр("ru=''") Тогда
		
		Если НЕ ЗначениеЗаполнено(КассаККМДляОперации) Тогда
			КассаККМДляОперации = ТаблицаКассККМОрганизаций[0].КассаККМ;
		КонецЕсли;
	
		ПриПереключенииКассыККМ();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПереключенииКассыККМ()
	
	Отбор = Новый Структура("КассаККМ", КассаККМДляОперации);
	СтрокаКассы = ТаблицаКассККМОрганизаций.НайтиСтроки(Отбор)[0];
	
	ПодключаемоеОборудование = СтрокаКассы.ИдентификаторУстройства;
	КассоваяСмена = СтрокаКассы.КассоваяСмена;
	Объект.Организация = СтрокаКассы.Организация;
	Объект.КассаККМ = КассаККМДляОперации;
	ККМПоддерживаетПроверкуКодовМаркировки = СтрокаКассы.ПоддерживаетПроверкуКодовМаркировки;
	
	СменаПоКассеОткрыта = ЗначениеЗаполнено(СтрокаКассы.НачалоКассовойСмены);
	УстановитьДоступностьЭлементаФормы(Элементы.ЗакрытьСменуИзРежимаВыбораКассы, СменаПоКассеОткрыта);
	УстановитьДоступностьЭлементаФормы(Элементы.ОткрытьСменуИзРежимаВыбораКассы, НЕ СменаПоКассеОткрыта);
	
	Если ТекущаяОперация = НСтр("ru='ОтчетБезГашения'") Тогда
		СнятьОтчетБезГашенияКлиент();
	ИначеЕсли ТекущаяОперация = НСтр("ru='Выемка'") Тогда
		ОткрытьСтраницуВыемкиДенежныхСредств();
	ИначеЕсли ТекущаяОперация = НСтр("ru='Внесение'") Тогда
		ОткрытьСтраницуВнесение();
	КонецЕсли;
	
	Если НЕ ТекущаяОперация = НСтр("ru=''") Тогда
		
		ТекущаяОперация = НСтр("ru=''");
		КассаККМДляОперации = Неопределено;
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПустая);
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПравоОбщая);
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьНаСледующийЧек(ИмяКоманды = "")
	
	СистемыНалогообложенияТоваровВКорзине = РазличныеСНОВСпискеПокупок();
	
	СписокОрганизаций = Новый СписокЗначений;
	НомерПП = 0;
	НомерНажатойКнопкиОрганизации = "";
	ИмяСНО = "";
	НаСледующийЧек = Ложь;
	
	Если ИмяКоманды = "НаСледующий" Тогда
		НаСледующийЧек = Истина;
	ИначеЕсли ИмяКоманды = "ПереключитьЧекОрганизация1" ИЛИ ИмяКоманды = "ПереключитьЧекОрганизация2" Тогда
		
		НаСледующийЧек = Истина;
		НомерНажатойКнопкиОрганизации = СтрЗаменить(ИмяКоманды, "ПереключитьЧекОрганизация", "");
		
	Иначе
		ИмяСНО = СтрЗаменить(ИмяКоманды, "ПереключитьЧекСНО", "");
	КонецЕсли;
	
	Для Каждого ОрганизацияИСНОЧека Из СистемыНалогообложенияТоваровВКорзине Цикл
		
		Если СписокОрганизаций.НайтиПоЗначению(ОрганизацияИСНОЧека.Организация) = Неопределено Тогда
			
			НомерПП = НомерПП + 1;
			СписокОрганизаций.Добавить(ОрганизацияИСНОЧека.Организация, НомерПП);
			Если НомерНажатойКнопкиОрганизации = Строка(НомерПП) Тогда
				ВыбраннаяОрганизация = ОрганизацияИСНОЧека.Организация;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СписокОрганизаций.СортироватьПоЗначению();
	
	Если НаСледующийЧек Тогда
		
		Для Каждого ОрганизацияИСНОЧека Из СистемыНалогообложенияТоваровВКорзине Цикл
			
			Если НЕ НомерНажатойКнопкиОрганизации = "" И НЕ ВыбраннаяОрганизация = ОрганизацияИСНОЧека.Организация Тогда
				Продолжить;
			КонецЕсли;
			
			Элементы.ПереключитьЧекОрганизация1.Пометка = Ложь;
			Элементы.ПереключитьЧекОрганизация2.Пометка = Ложь;
			Элементы.ПереключитьЧекСНООСН.Пометка = Ложь;
			Элементы.ПереключитьЧекСНОУСНДоход.Пометка = Ложь;
			Элементы.ПереключитьЧекСНОУСНДоходРасход.Пометка = Ложь;
			Элементы.ПереключитьЧекСНОЕСН.Пометка = Ложь;
			Элементы.ПереключитьЧекСНОПатент.Пометка = Ложь;
			
			ПробитыйЧек = ПробитыеЧеки.НайтиСтроки(ОрганизацияИСНОЧека);
			
			ОрганизацияВСписке = СписокОрганизаций.НайтиПоЗначению(ОрганизацияИСНОЧека.Организация);
			ВыбраннаяОрганизация = ОрганизацияИСНОЧека.Организация;
			ВыбраннаяСистемаНалогообложения = ОрганизацияИСНОЧека.СистемаНалогообложения;
			Элементы["ПереключитьЧекОрганизация" + ОрганизацияВСписке.Представление].Пометка = Истина;
			ИмяПеречисления = СтрЗаменить(ПолучитьПолноеИмяПредопределенногоЗначения(ВыбраннаяСистемаНалогообложения),
				"Перечисление.ТипыСистемНалогообложенияККТ.", "");
			Элементы["ПереключитьЧекСНО" + ИмяПеречисления].Пометка = Истина;
				
			Если ПробитыйЧек.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// Раскраска и видимость кнопок
	Элементы.ГруппаСписокОрганизацийПоКорзине.Видимость = (СписокОрганизаций.Количество() > 1);
	
	Элементы.ПереключитьЧекСНООСН.Видимость = Ложь;
	Элементы.ПереключитьЧекСНОУСНДоход.Видимость = Ложь;
	Элементы.ПереключитьЧекСНОУСНДоходРасход.Видимость = Ложь;
	Элементы.ПереключитьЧекСНОЕСН.Видимость = Ложь;
	Элементы.ПереключитьЧекСНОПатент.Видимость = Ложь;
	
	КоличествоСНОПоОрганизации = 0;
	
	Для Каждого ОрганизацияИзСписка Из СписокОрганизаций Цикл
		
		ПоОрганизацииПробитыНеВсеЧеки = Ложь;
		
		Для Каждого ОрганизацияИСНОЧека Из СистемыНалогообложенияТоваровВКорзине Цикл
			
			Если ОрганизацияИзСписка.Значение = ОрганизацияИСНОЧека.Организация Тогда
				
				ПробитыйЧек = ПробитыеЧеки.НайтиСтроки(ОрганизацияИСНОЧека);
				
				Если ПробитыйЧек.Количество() = 0 Тогда
					ПоОрганизацииПробитыНеВсеЧеки = Истина;
				КонецЕсли;
				
				Если ОрганизацияИзСписка.Значение = ВыбраннаяОрганизация Тогда
					
					ИмяПеречисления =
						СтрЗаменить(ПолучитьПолноеИмяПредопределенногоЗначения(ОрганизацияИСНОЧека.СистемаНалогообложения),
						"Перечисление.ТипыСистемНалогообложенияККТ.", "");
					
					ЦветФонаКнопки = ?(ПробитыйЧек.Количество() = 0, Новый Цвет(), Новый Цвет(200, 230, 200));
					Элементы["ПереключитьЧекСНО" + ИмяПеречисления].ЦветФона = ЦветФонаКнопки;
					Элементы["ПереключитьЧекСНО" + ИмяПеречисления].Видимость = Истина;
					
					Если ИмяПеречисления = ИмяСНО Тогда
						ВыбраннаяСистемаНалогообложения = ОрганизацияИСНОЧека.СистемаНалогообложения;
					КонецЕсли;
					
					КоличествоСНОПоОрганизации = КоличествоСНОПоОрганизации + 1;
					
				КонецЕсли;
			
			КонецЕсли;
		
		КонецЦикла;
		
		ЦветФонаКнопки = ?(ПоОрганизацииПробитыНеВсеЧеки, Новый Цвет(), Новый Цвет(200, 230, 200));
		Элементы["ПереключитьЧекОрганизация" + ОрганизацияИзСписка.Представление].ЦветФона = ЦветФонаКнопки;
		Элементы["ПереключитьЧекОрганизация" + ОрганизацияИзСписка.Представление].Заголовок =
			СокрЛП(ОрганизацияИзСписка.Значение);
		
	КонецЦикла;
	
	Элементы.ГруппаСписокСНОПоОрганизации.Видимость = (КоличествоСНОПоОрганизации > 1);
	
	СтрокаКассы = ТаблицаКассККМОрганизаций.НайтиСтроки(Новый Структура("Организация", ВыбраннаяОрганизация))[0];
	ПодключаемоеОборудование = СтрокаКассы.ИдентификаторУстройства;
	КассоваяСмена = СтрокаКассы.КассоваяСмена;
	Объект.Организация = СтрокаКассы.Организация; 
	Объект.КассаККМ = СтрокаКассы.КассаККМ;
	ККМПоддерживаетПроверкуКодовМаркировки = СтрокаКассы.ПоддерживаетПроверкуКодовМаркировки;
	
	ОтборСтрок = Неопределено;
	Если НЕ ВыбраннаяОрганизация = Неопределено И НЕ ВыбраннаяСистемаНалогообложения = Неопределено Тогда
		ОтборСтрок = Новый ФиксированнаяСтруктура(ВыбраннаяОрганизацияИСНО());
	КонецЕсли;
	
	Элементы.Товары.ОтборСтрок = ОтборСтрок;
	ПересчитатьИтогиТабличнойЧастиТовары();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьКнопкиОрганизацийИСНО()
	
	ЦветАктивнойКнопки = Новый Цвет(224, 224, 224);
	ЦветНеАктивнойКнопки = Новый Цвет();
	
	МассивИмен = Новый Массив;
	МассивИмен.Добавить("ПереключитьЧекОрганизация1");
	МассивИмен.Добавить("ПереключитьЧекОрганизация2");
	МассивИмен.Добавить("ПереключитьЧекСНОЕСН");
	МассивИмен.Добавить("ПереключитьЧекСНООСН");
	МассивИмен.Добавить("ПереключитьЧекСНОПатент");
	МассивИмен.Добавить("ПереключитьЧекСНОУСНДоход");
	МассивИмен.Добавить("ПереключитьЧекСНОУСНДоходРасход");
	
	Для Каждого ЭлементКнопка Из МассивИмен Цикл
		
		Если Элементы[ЭлементКнопка].ЦветФона = Новый Цвет(200, 230, 200) Тогда
			Продолжить;
		КонецЕсли;
			
		Элементы[ЭлементКнопка].ЦветФона = ?(Элементы[ЭлементКнопка].Пометка, ЦветАктивнойКнопки, ЦветНеАктивнойКнопки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФокусНаЭлементеФормыПриВводеОплаты(СуммаПоВидуОплаты = 0, ИмяПоляВвода = "")

	Если ТипЗнч(СуммаПоВидуОплаты) = Тип("Строка") Тогда
		
		Попытка
			СуммаПоВидуОплаты = Число(СуммаПоВидуОплаты);
		Исключение
			
			ЛокализованноеСообщение =
				НСтр("ru = 'Ошибка преобразования строки к числу.'");
			ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ЛокализованноеСообщение,НСтр("ru = 'Ошибка'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
		КонецПопытки;
		
	КонецЕсли;
	
	Если ИмяПоляВвода = "СуммаОплаченоБонусами" Тогда
		СуммаВнесенныхОплат = СуммаОплаченоQRКодом + СуммаОплаченоБН + СуммаПоВидуОплаты
			+ СуммаОплаченоВРассрочку + СуммаОплаченоЗачетАванса + СуммаОплаченоНал + СуммаОплаченоСертификатами;
	ИначеЕсли ИмяПоляВвода = "СуммаОплаченоНал" Тогда
		СуммаВнесенныхОплат = СуммаОплаченоQRКодом + СуммаОплаченоБН + СуммаОплаченоБонусами
			+ СуммаОплаченоВРассрочку + СуммаОплаченоЗачетАванса + СуммаПоВидуОплаты + СуммаОплаченоСертификатами;
	ИначеЕсли ИмяПоляВвода = "СуммаОплаченоБН" Тогда
		СуммаВнесенныхОплат = СуммаОплаченоQRКодом + СуммаПоВидуОплаты + СуммаОплаченоБонусами
			+ СуммаОплаченоВРассрочку + СуммаОплаченоЗачетАванса + СуммаОплаченоНал + СуммаОплаченоСертификатами;
	ИначеЕсли ИмяПоляВвода = "СуммаОплаченоВРассрочку" Тогда
		СуммаВнесенныхОплат = СуммаОплаченоQRКодом + СуммаОплаченоБН + СуммаОплаченоБонусами
			+ СуммаПоВидуОплаты + СуммаОплаченоЗачетАванса + СуммаОплаченоНал + СуммаОплаченоСертификатами;
	ИначеЕсли ИмяПоляВвода = "СуммаОплаченоЗачетАванса" Тогда
		СуммаВнесенныхОплат = СуммаОплаченоQRКодом + СуммаОплаченоБН + СуммаОплаченоБонусами
			+ СуммаОплаченоВРассрочку + СуммаПоВидуОплаты + СуммаОплаченоНал + СуммаОплаченоСертификатами;
	ИначеЕсли ИмяПоляВвода = "СуммаОплатаСертификатами" Тогда
		СуммаВнесенныхОплат = СуммаОплаченоQRКодом + СуммаОплаченоБН + СуммаОплаченоБонусами
			+ СуммаОплаченоВРассрочку + СуммаОплаченоЗачетАванса + СуммаОплаченоНал + СуммаПоВидуОплаты;
	ИначеЕсли ИмяПоляВвода = "СуммаОплаченоQRКодом" Тогда
		СуммаВнесенныхОплат = СуммаПоВидуОплаты + СуммаОплаченоБН + СуммаОплаченоБонусами
			+ СуммаОплаченоВРассрочку + СуммаОплаченоЗачетАванса + СуммаОплаченоНал + СуммаОплаченоСертификатами;
	Иначе
		СуммаВнесенныхОплат = СуммаОплаченоQRКодом + СуммаОплаченоБН + СуммаОплаченоБонусами
			+ СуммаОплаченоВРассрочку + СуммаОплаченоЗачетАванса + СуммаОплаченоНал + СуммаОплаченоСертификатами + СуммаОплаченоСертификатамиНСПК;
	КонецЕсли;
	
	ОткрытыСообщенияОбОшибках =(Элементы.СтраницыСтаканПраво.ТекущаяСтраница = Элементы.СтраницаИнфоОшибка);
	
	Если НЕ (ОжидатьВводМарки ИЛИ ОткрытыСообщенияОбОшибках) Тогда

		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОплата);
		ТекущийЭлемент = ?(СуммаИтого <= СуммаВнесенныхОплат, Элементы.ПробитьЧек, Элементы.ОплатаНаличными);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьИнтерфейсКВозвратуМаркируемогоТовараБезКонтрольнойМарки(СтрокаТовара)
	
	Если НЕ СтрокаТовара = Неопределено Тогда
		
		ЭтоОперацияВозврата = НЕ ОбщегоНазначенияРМККлиентПереопределяемый.ВидОперацииПродажа(Объект.ВидОперации)
			ИЛИ ЭтоВозвратБезОснования;
			
		ОсобенностиУчетаТоваровДопускающиеВозвратМаркированныхТоваровБезКМ =
			ОсобенностиУчетаМаркированныхТоваровДопускающиеВозвратБезМарки();
			
		ТоварДопускаетсяКВозвратуБезМарки = ОсобенностиУчетаТоваровДопускающиеВозвратМаркированныхТоваровБезКМ.Найти(
				СтрокаТовара.ОсобенностьУчета) <> Неопределено;
				
		ОткрытыСообщенияОбОшибках =(Элементы.СтраницыСтаканПраво.ТекущаяСтраница = Элементы.СтраницаИнфоОшибка);
		
		Если НЕ ОткрытыСообщенияОбОшибках Тогда
			
			ВидимостьГруппыВозвратаМаркированногоТовараБезМарки = ЭтоОперацияВозврата
				И СтрокаТовара.НеобходимостьВводаКодаМаркировки
				И НЕ ЗначениеЗаполнено(СтрокаТовара.КодМаркировки)
				И ТоварДопускаетсяКВозвратуБезМарки;
			
			УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВыполненияВозвратаБезМаркиПослеОшибкиВводаМарки,
			ВидимостьГруппыВозвратаМаркированногоТовараБезМарки);
			УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВыполненияВозвратаБезМарки,
			ВидимостьГруппыВозвратаМаркированногоТовараБезМарки);
			
			Если (Элементы.СтраницыСтаканПраво.ТекущаяСтраница = Элементы.СтраницаОтсканироватьМарку
				ИЛИ Элементы.СтраницыСтаканПраво.ТекущаяСтраница = Элементы.СтраницаНеверноОтсканированныйШтрихкод) Тогда
				
				ТекущийЭлемент = ?((Элементы.СтраницыСтаканПраво.ТекущаяСтраница = Элементы.СтраницаОтсканироватьМарку),
					Элементы.ВернутьПозициюБезМарки,
					Элементы.ВернутьПозициюБезМаркиПослеОшибкиРазбораМарки);
				
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПодготовитьИнтерфейсКВозвратуМаркируемогоТовараБезКонтрольнойМаркиНаСервере(СтрокаТовара)
	
	Если НЕ СтрокаТовара = Неопределено Тогда
		
		ЭтоОперацияВозврата = НЕ ОбщегоНазначенияРМКПереопределяемый.ВидОперацииПродажа(Объект.ВидОперации)
			ИЛИ ЭтоВозвратБезОснования;
			
		ОсобенностиУчетаТоваровДопускающиеВозвратМаркированныхТоваровБезКМ =
			ОсобенностиУчетаМаркированныхТоваровДопускающиеВозвратБезМаркиНаСервере();
		ТоварДопускаетсяКВозвратуБезМарки = ОсобенностиУчетаТоваровДопускающиеВозвратМаркированныхТоваровБезКМ.Найти(
				СтрокаТовара.ОсобенностьУчета) <> Неопределено;
			
		ОткрытыСообщенияОбОшибках =(Элементы.СтраницыСтаканПраво.ТекущаяСтраница = Элементы.СтраницаИнфоОшибка);
			
		Если НЕ ОткрытыСообщенияОбОшибках Тогда
			
			ВидимостьГруппыВозвратаМаркированногоТовараБезМарки = ЭтоОперацияВозврата
				И СтрокаТовара.НеобходимостьВводаКодаМаркировки
				И НЕ ЗначениеЗаполнено(СтрокаТовара.КодМаркировки)
				И ТоварДопускаетсяКВозвратуБезМарки;
			
			УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВыполненияВозвратаБезМаркиПослеОшибкиВводаМарки,
			ВидимостьГруппыВозвратаМаркированногоТовараБезМарки);
			УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВыполненияВозвратаБезМарки,
			ВидимостьГруппыВозвратаМаркированногоТовараБезМарки);
			
			Если (Элементы.СтраницыСтаканПраво.ТекущаяСтраница = Элементы.СтраницаОтсканироватьМарку
				ИЛИ Элементы.СтраницыСтаканПраво.ТекущаяСтраница = Элементы.СтраницаНеверноОтсканированныйШтрихкод) Тогда
				
				ТекущийЭлемент = ?((Элементы.СтраницыСтаканПраво.ТекущаяСтраница = Элементы.СтраницаОтсканироватьМарку),
					Элементы.ВернутьПозициюБезМарки,
					Элементы.ВернутьПозициюБезМаркиПослеОшибкиРазбораМарки);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НастроитьКартинкуУказанияСерийИПартий(ТекущаяСтрока)
	
	СерияЗаполнена = Истина;
	ПартияЗаполнена = Истина;
	
	ТребуетсяУказыватьСерию = ТекущаяСтрока.ПроверятьЗаполнениеСерий;
	Если ТребуетсяУказыватьСерию Тогда
		СерияЗаполнена = ЗначениеЗаполнено(ТекущаяСтрока.Серия);
	КонецЕсли;
	
	ТребуетсяУказыватьПартию = ТекущаяСтрока.ПроверятьЗаполнениеПартий;
	Если ТребуетсяУказыватьПартию Тогда
		ПартияЗаполнена = ЗначениеЗаполнено(ТекущаяСтрока.Партия);
	КонецЕсли;
	
	Если СерияЗаполнена И ПартияЗаполнена Тогда
		Элементы.УказатьСерии.Картинка = БиблиотекаКартинок.СерииУказаны;
	Иначе
		Элементы.УказатьСерии.Картинка = БиблиотекаКартинок.СерииНеУказаны;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьРежимНаВозвратСкупки()
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='Перед сменой режима необходимо пробить, удалить или отложить текущий чек.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	ПользовательДоЗаменыПрав = Объект.ПользовательБД;
	КассирДоЗаменыПрав = Объект.Кассир;
	
	НеобходимоеПраво = НСтр("ru='ПравоЧекНаВозвратРМК'");
	Если ЕстьПравоНаДействие(НеобходимоеПраво) Тогда
		ВыбратьЧекНаВозвратСкупки();
	Иначе
		ПредложитьЗаменитьПраваКассира(НеобходимоеПраво);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЭлементыВРежимеСкупка()
	
	Элементы.ГруппаИнфо.ЦветФона = Новый Цвет(230, 240, 250);
	
	ПравоИзменятьЦену = НЕ СписокРолейПользователя.НайтиПоЗначению(НСтр("ru='ПравоИзменятьЦенуРМК'")) = Неопределено;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварЦенаИзКарточки, ПравоИзменятьЦену);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаРучнаяСкидкаНаТовар, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаНаЧек, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаНаличными, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСертификатом, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСертификатомНСПК, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаКартой, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСБП, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСВИП, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаКоманднаяПанельКарта, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварСкидка, Ложь);
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаQRCode, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЭлементыВРежимеВозвратСкупки()
	
	Элементы.ГруппаИнфо.ЦветФона = Новый Цвет(255, 248, 230);
	
	ПравоИзменятьЦену = НЕ СписокРолейПользователя.НайтиПоЗначению(НСтр("ru='ПравоИзменятьЦенуРМК'")) = Неопределено;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварЦенаИзКарточки, ПравоИзменятьЦену);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаРучнаяСкидкаНаТовар, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаНаЧек, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаНаличными, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСертификатом, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСертификатомНСПК, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаКартой, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСБП, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСВИП, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаКоманднаяПанельКарта, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварСкидка, Ложь);
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаQRCode, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьРежимНаСкупка()
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='Перед сменой режима необходимо пробить, удалить или отложить текущий чек.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	СформироватьЗаголовок(НСтр("ru='Скупка'"));
	Объект.ВидОперации = ОбщегоНазначенияРМККлиентПереопределяемый.ВидОперацииЧекаККМ(, Истина);
	Элементы.ДекорацияТекстПустойСтраницы.Заголовок =
		НСтр("ru='Начните скупку, добавив товар сканером, из избранного или каталога'");
	Элементы.ДекорацияПустойЧекПродажа.Картинка = БиблиотекаКартинок.РМКЗаставкаСкупка;
	
	НачинатьНовыйЧекВРежимеСкупка = Истина;
	
	НастроитьЭлементыВРежимеСкупка();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьФормуВРежимВозвратСкупкиБезЧека()
	
	НастроитьЭлементыФормы(Элементы.СтраницаПустая, Истина);
	
	НастроитьЭлементыВРежимеВозвратСкупки();
	
	ЭтоВозвратБезОснования = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Оборудование

&НаКлиенте
Процедура ВыполнитьПоискШтрихкода(Штрихкод)
	
	Если Элементы.СтраницыСтаканПраво.ТекущаяСтраница = Элементы.СтраницаПравоНайтиВЧеке Тогда
		НайтиТоварВЧеке(Штрихкод);
	ИначеЕсли Штрихкод = ШтрихкодированиеРМККлиент.СлужебныйШтрихкодНетМарки() Тогда
		ДобавитьТоварБезМарки();
	ИначеЕсли Штрихкод = ШтрихкодированиеРМККлиент.СлужебныйШтрихкодОплатаКартой() Тогда
		ОплатитьЧекПлатежнойКартой();
	Иначе
		ОбработатьШтрихкодКлиент(Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗаменуПравКассираКлиент(Штрихкод)
	
	ПользовательДоЗаменыПрав = Объект.ПользовательБД;
	КассирДоЗаменыПрав = Объект.Кассир;
	
	ЗаменитьПраваИВыполнитьТребуемоеДействие(Штрихкод);
	НастроитьФормуПослеЗаменыПрав();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКассовуюСменуИНайтиКассира(Штрихкод = "")
	
	Если ЗначениеЗаполнено(Штрихкод) Тогда
		ВыполнитьПоискКассираКлиент(Штрихкод);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Кассир)Тогда
		Возврат;
	КонецЕсли;
	
	НужноОткрытьСмену = Ложь;
	НужноЗакрытьСмену = Ложь;
	
	Для Каждого СтрокаКасса Из ТаблицаКассККМОрганизаций Цикл
		
		Если ЗначениеЗаполнено(СтрокаКасса.НачалоКассовойСмены) Тогда
			
			Дата = ТекущаяДата();
			
			Если Дата - СтрокаКасса.НачалоКассовойСмены >= 60*60*24 Тогда
				НужноЗакрытьСмену = Истина;
			КонецЕсли;
			
		Иначе
			НужноОткрытьСмену = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НужноОткрытьСмену ИЛИ НужноЗакрытьСмену Тогда
		
		Если ТаблицаКассККМОрганизаций.Количество() > 1 Тогда
			ПереключитьНаСтраницуВыбораКассыККМ();
		Иначе
			
			Если НужноЗакрытьСмену Тогда
				
				ОписаниеОповещения = Новый ОписаниеОповещения("ЗакрытьСменуЗавершение", ЭтотОбъект);
				ТекстВопроса = НСтр("ru = 'С момента открытия кассовой смены истекло более 24 часов.
					|Закрыть кассовую смену?'");
				ТекстЗаголовка = НСтр("ru = 'Кассовая смена закрыта.'");
				
				ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,, ТекстЗаголовка);
				
			ИначеЕсли НужноОткрытьСмену Тогда
				ОткрытьСменуКлиент();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьСтруктуруДляПроверкиКассовойСмены()
	
	СтруктураДляПроверкиКассовойСмены = Новый Структура();
	СтруктураДляПроверкиКассовойСмены.Вставить("Отказ", Ложь);
	СтруктураДляПроверкиКассовойСмены.Вставить("НужноЗакрытьСмену", Ложь);
	СтруктураДляПроверкиКассовойСмены.Вставить("НужноОткрытьСмену", Ложь);
	СтруктураДляПроверкиКассовойСмены.Вставить("ТекстОшибки", НСтр("ru = ''"));
	СтруктураДляПроверкиКассовойСмены.Вставить("ДанныеКассаККМ");
	СтруктураДляПроверкиКассовойСмены.Вставить("ФИОКассира", НСтр("ru = ''"));
	
	Возврат СтруктураДляПроверкиКассовойСмены;
	
КонецФункции

&НаСервере
Процедура НайтиКассираИПерезаполнитьПрава(Штрихкод)
	
	ВыполнитьПоискКассира(Штрихкод);
	ЗаполнитьТаблицуРолейПользователя();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПоискКассира(Штрихкод)
	ШтрихкодированиеРМК.ВыполнитьПоискКассира(Объект, Штрихкод);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкодКлиент(Штрихкод)
	
	ИмяИдентификатора = НСтр("ru = 'Обработка.РабочееМестоКассира.ОбработатьШтрихкодКлиент'");
	ФиксироватьСОшибкой = Ложь;
	АвтозавершениеЗамера = Ложь;
	
	ИдентификаторЗамераВремениПоиска = ОценкаПроизводительностиКлиент.ЗамерВремени(ИмяИдентификатора,
		ФиксироватьСОшибкой, АвтозавершениеЗамера);
	
	ИдентификаторСтроки = 0;
	
	ЗаменитьСимволGS1(Штрихкод);
	
	ПараметрыДляОбработкиШтрихкода = Новый Структура();
	ПараметрыДляОбработкиШтрихкода.Вставить("Штрихкод", Штрихкод);
	ПараметрыДляОбработкиШтрихкода.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
	ПроверитьНеобходимостьВводаМарки(ПараметрыДляОбработкиШтрихкода);
	
	ОбработатьШтрихкод(ПараметрыДляОбработкиШтрихкода);
	ОповещениеПоискаПоШтрихкоду(Штрихкод, ПараметрыДляОбработкиШтрихкода);
	
	ОбработатьШтрихкодЗавершение(ПараметрыДляОбработкиШтрихкода);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкодЗавершение(ПараметрыДляОбработкиШтрихкода)
	
	Если ИспользоватьЗапретПродаж Тогда
		
		ЗапретыПродаж = ПараметрыДляОбработкиШтрихкода.ДействующиеЗапреты;
		
		Если ЗапретыПродаж.Количество() > 0 Тогда
			
			ОткрытьСтраницуЗапретаПродажиПоВремени(ЗапретыПродаж.ВидНоменклатуры,
			ЗапретыПродаж.ВремяНачалаЗапрета, ЗапретыПродаж.ВремяОкончанияЗапрета);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗапрашиватьПодтверждениеВозраста18Плюс И НЕ ОжидатьВводМарки Тогда
		
		Если СостояниеПодтвержденияВозраста = "" ИЛИ СостояниеПодтвержденияВозраста = "Нет18" Тогда
			
			Если Объект.Товары.Количество() > 0 И ЕстьСвойство(ПараметрыДляОбработкиШтрихкода, "СтрокаТовараДобавлена") Тогда
				
				СтрокаПоИдентификатору = Объект.Товары.НайтиПоИдентификатору(ПараметрыДляОбработкиШтрихкода.ИдентификаторСтроки);
				
				Если ТоварСВозрастнымОграничением(СтрокаПоИдентификатору.ОсобенностьУчета) Тогда
					
					ПереключитьНаСтраницуПодтвержденияВозраста();
					ДанныеДобавляемогоТовара = ПараметрыДляОбработкиШтрихкода;
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьСвойство(ПараметрыДляОбработкиШтрихкода, "ТаблицаДляВыбораНоменклатуры") Тогда
		ЗавершитьВводШтрихкодаЗаполнитьТаблицуДляВыбора(ПараметрыДляОбработкиШтрихкода);
	ИначеЕсли ЕстьСвойство(ПараметрыДляОбработкиШтрихкода, "ОшибкаЕГАИС") Тогда
		ОтобразитьОшибкуЕГАИС(ПараметрыДляОбработкиШтрихкода);
	ИначеЕсли ЕстьСвойство(ПараметрыДляОбработкиШтрихкода, "НеверныйКод") Тогда
		ЗавершитьВводШтрихкодаНеверныйКод();
	ИначеЕсли ЕстьСвойство(ПараметрыДляОбработкиШтрихкода, "МаркаВведена") Тогда
		
		ПараметрыОбработки = КонтекстПроверкиКонтрольнойМарки();
		ПараметрыОбработки.КодМаркировки = ПараметрыДляОбработкиШтрихкода.Штрихкод;
		
		ОсобенностьУчета = ОсобенностьУчетаНоменклатуры(ПараметрыДляОбработкиШтрихкода.ТекущаяНоменклатура);
		ПараметрыОбработки.ОсобенностьУчета = ОсобенностьУчета;
		ПараметрыОбработки.Организация = ПараметрыДляОбработкиШтрихкода.Организация;
		
		ЗавершитьВводШтрихкодаМаркаВведена(ПараметрыОбработки);
		
	ИначеЕсли ЕстьСвойство(ПараметрыДляОбработкиШтрихкода, "ТоварНеНайденПоМарке") Тогда
		НастроитьФормуДляРучногоСопоставленияТовара(ПараметрыДляОбработкиШтрихкода);
	ИначеЕсли ЕстьСвойство(ПараметрыДляОбработкиШтрихкода, "ТоварНеНайденПоШтрихкоду") Тогда
		НастроитьФормуДляРучногоСопоставленияТовара(ПараметрыДляОбработкиШтрихкода);
	ИначеЕсли ЕстьСвойство(ПараметрыДляОбработкиШтрихкода, "ПодтвердитьВыборАлкоголя") Тогда
		УточнитьПравильностьНоменклатуры(ПараметрыДляОбработкиШтрихкода);
	ИначеЕсли ЕстьСвойство(ПараметрыДляОбработкиШтрихкода, "УпаковкаНеНайдена") Тогда
		ЗавершитьВводШтрихкодаУпаковкаНеНайдена(ПараметрыДляОбработкиШтрихкода.НоменклатураБезУпаковки);
	ИначеЕсли ЕстьСвойство(ПараметрыДляОбработкиШтрихкода, "СерияВведена") Тогда
		ВыбратьСериюДляТекущейСтроки();
	ИначеЕсли ЕстьСвойство(ПараметрыДляОбработкиШтрихкода, "СтрокаТовараДобавлена") Тогда
		ЗавершитьВводШтрихкода(ПараметрыДляОбработкиШтрихкода);
	ИначеЕсли ЕстьСвойство(ПараметрыДляОбработкиШтрихкода, "ДобавленНабор") Тогда
		ЗавершитьВводШтрихкодаНабора();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторЗамераПробитияЧека) Тогда
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИдентификаторЗамераВремениПоиска, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкод(ПараметрыДляОбработкиШтрихкода)
	
	ПараметрыДляОбработкиШтрихкода.Вставить("Объект", Объект);
	ПараметрыДляОбработкиШтрихкода.Вставить("РозничныйВидЦены", РозничныйВидЦены);
	ПараметрыДляОбработкиШтрихкода.Вставить("ЭтоЧекКоррекции", ЭтоЧекКоррекции);
	ПараметрыДляОбработкиШтрихкода.Вставить("ОжидатьВводМарки", ОжидатьВводМарки);
	ПараметрыДляОбработкиШтрихкода.Вставить("СистемаНалогообложенияПоУмолчанию",
		СистемаНалогообложенияОрганизацииПоУмолчанию);
	ПараметрыДляОбработкиШтрихкода.Вставить("ОсновнаяОрганизация", ОсновнаяОрганизация);
	ПараметрыДляОбработкиШтрихкода.Вставить("КонтролироватьЕМРЦ", КонтролироватьЕМРЦ);
	ПараметрыДляОбработкиШтрихкода.Вставить("УчитыватьМРЦ", УчитыватьМРЦ);
	
	// Запреты
	ПараметрыДляОбработкиШтрихкода.Вставить("КэшЗапретовПродаж", КэшЗапретовПродаж);
	ПараметрыДляОбработкиШтрихкода.Вставить("ИспользоватьЗапретПродаж", ИспользоватьЗапретПродаж);
	ПараметрыДляОбработкиШтрихкода.Вставить("ДействующиеЗапреты", Новый Структура());
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаРучнаяСкидкаНаТовар, ДопускаетсяПрименениеСкидок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоискМагнитнойКарты(МагнитныйКод)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВводКассира Тогда
		ПроверитьКассовуюСменуИНайтиКассира(МагнитныйКод);
	ИначеЕсли Элементы.СтраницыСтаканПраво.ТекущаяСтраница = Элементы.СтраницаЗаменаПрав Тогда
		ВыполнитьЗаменуПравКассираКлиент(МагнитныйКод);
	Иначе
		
		Если НЕ ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
			
			НайтиДисконтнуюКарту(МагнитныйКод);
			ЗапроситьДанныеБонусов();
			ИзменитьКартинкуВводПокупателя();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НайтиДисконтнуюКарту(МагнитныйКод)
	
	ДанныеКарты = ОбщегоНазначенияРМКПереопределяемый.ПолучитьДисконтнуюКарту(МагнитныйКод);
	
	Если НЕ ДанныеКарты = Неопределено Тогда
		
		ОчиститьДанныеПокупателя();
		ШтрихкодированиеРМК.ЗаполнитьФормуПоДисконтнойКарте(ЭтотОбъект, ДанныеКарты);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПодключеноОборудование(ТипОборудования)
	
	Результат = Ложь;
	
	Если ЗначениеЗаполнено(ТипОборудования) Тогда
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("ТипОборудования", ТипОборудования);
		СтруктураПоиска.Вставить("Подключено", 1);
		
		МассивОборудования = Оборудование.НайтиСтроки(СтруктураПоиска);
		
		Если МассивОборудования.Количество() > 0
			И ЗначениеЗаполнено(МассивОборудования[0].Ссылка) Тогда
				Результат = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьПодключениеОборудованияПоИдентификатору(РезультатВыполнения, СтрокаТЧ) Экспорт
	
	Если ЕстьСвойство(РезультатВыполнения, "Результат")Тогда
		
		Если РезультатВыполнения.Результат Тогда
			
			Если СтрокаТЧ.ТипОборудования =
					ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(
						"Перечисление.ТипыПодключаемогоОборудования.ЭлектронныеВесы") Тогда
				ЭлектронныеВесы = СтрокаТЧ.Ссылка;
			ИначеЕсли СтрокаТЧ.ТипОборудования =
					ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(
						"Перечисление.ТипыПодключаемогоОборудования.ДисплейПокупателя") Тогда
				ДисплейПокупателя = СтрокаТЧ.Ссылка;
			ИначеЕсли СтрокаТЧ.ТипОборудования =
					ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(
						"Перечисление.ТипыПодключаемогоОборудования.ПринтерЧеков") Тогда
				ПринтерЧеков = СтрокаТЧ.Ссылка;
			КонецЕсли;
			
		Иначе
			
			ОписаниеОшибки = РезультатВыполнения.ОписаниеОшибки;
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "'", "");
			ТекстПредупреждения = СтрШаблон(НСтр("ru = 'При подключении устройства класса %2 произошла ошибка: "" %1 "".';
				|en = 'An error occurred when connecting the %2 device: "" %1 "".'"), РезультатВыполнения.ОписаниеОшибки,
				СтрокаТЧ.ТипОборудования);
			
			ПоказатьПредупреждение(, ТекстПредупреждения);
			
		КонецЕсли;
		
	СтрокаТЧ.Подключено = РезультатВыполнения.Результат;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоКодМаркировки(ДанныеМаркировки)
	
	Если Не ОбщегоНазначенияРМККлиентСервер.ЕстьСвойство(ДанныеМаркировки, "ТипИдентификатораТовара") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТипИдентификатораТовара = ДанныеМаркировки.ТипИдентификатораТовара;
	
	ТипыШтрихкодовМарок = Новый СписокЗначений;
	ИмяМаркировкиМех = "Перечисление.ТипыИдентификаторовТовараККТ.ИзделияИзНатуральногоМеха";
	ИмяМаркировкиGS1 =	"Перечисление.ТипыИдентификаторовТовараККТ.КодТовараВФорматеDataMatrixGS1";
	ИмяМаркировкиВФорматеЕГАИС2 = "Перечисление.ТипыИдентификаторовТовараККТ.КодТовараВФорматеЕГАИС2";
	ИмяМаркировкиВФорматеЕГАИС3 = "Перечисление.ТипыИдентификаторовТовараККТ.КодТовараВФорматеЕГАИС3";
	
	ТипыШтрихкодовМарок.Добавить(ПредопределенноеЗначение(ИмяМаркировкиМех));
	ТипыШтрихкодовМарок.Добавить(ПредопределенноеЗначение(ИмяМаркировкиGS1));
	ТипыШтрихкодовМарок.Добавить(ПредопределенноеЗначение(ИмяМаркировкиВФорматеЕГАИС2));
	ТипыШтрихкодовМарок.Добавить(ПредопределенноеЗначение(ИмяМаркировкиВФорматеЕГАИС3));
	
	Возврат НЕ ТипыШтрихкодовМарок.НайтиПоЗначению(ТипИдентификатораТовара) = Неопределено;
	
КонецФункции


&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
	
	ШтрихкодПоиска = Штрихкод;
	
	Если НЕ ПустаяСтрока(Штрихкод) Тогда
		
		ПараметрыДляОбработкиШтрихкода = ДополнительныеПараметры;
		
		ФильтрПоискаПоШтрихкоду = Новый Структура;
		ПараметрыСобытийПО = Новый Структура;
		ДобавитьВФильтрМассивУжеДобавленныхСерий = Ложь;
		
		Если Элементы.СтраницыСтаканПраво.ТекущаяСтраница = Элементы.СтраницаОплата
			И Элементы.ГруппаОплатаСертификатами.Видимость Тогда
			
				НомерСертификата = Штрихкод;
				НайтиПодарочныйСертификат();
				Возврат;
			
		ИначеЕсли Элементы.СтраницыСтаканПраво.ТекущаяСтраница = Элементы.СтраницаЗаменаПрав
			ИЛИ Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВводКассира Тогда
			
			ФильтрПоискаПоШтрихкоду.Вставить("Пользователи");
			ФильтрПоискаПоШтрихкоду.Вставить("ФизическиеЛица");
			ФильтрПоискаПоШтрихкоду.Вставить("ИнформационныеКарты");
			
		ИначеЕсли Элементы.СтраницыСтаканПраво.ТекущаяСтраница = Элементы.СтраницаПлатежнаяСистема Тогда
			
			ОбработатьQRКодПлатежнойСистемы(Штрихкод);
			Возврат;
			
		ИначеЕсли Элементы.СтраницыПраво.ТекущаяСтраница = Элементы.СтраницаПравоДанныеПокупателя Тогда
			
			Если Элементы.СтраницыДанныеПокупателя.ТекущаяСтраница = Элементы.СтраницаПоискКарты Тогда
				
				ПоследниеЦифрыТелефона = Сред(Штрихкод, 2);
				Если СтрНачинаетсяС(Штрихкод, "*")
					И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПоследниеЦифрыТелефона) Тогда
					
					ФильтрПоискаПоШтрихкоду.Вставить("ШаблонНомерТелефона");
					ФильтрПоискаПоШтрихкоду.Вставить("ПоследниеЦифрыТелефона");
					ШтрихкодПоиска = "%" + ПоследниеЦифрыТелефона;
					
				Иначе
					ФильтрПоискаПоШтрихкоду.Вставить("ИнформационныеКарты");
				КонецЕсли;
				
			ИначеЕсли Элементы.СтраницыДанныеПокупателя.ТекущаяСтраница = Элементы.СтраницаСозданиеКарты Тогда
				ФильтрПоискаПоШтрихкоду.Вставить("ДобавлятьНеизвестнуюКИ");
			ИначеЕсли Элементы.СтраницыДанныеПокупателя.ТекущаяСтраница = Элементы.СтраницаОтправкаЧека Тогда
				ФильтрПоискаПоШтрихкоду.Вставить("ДобавлятьНеизвестнуюКИ");
			КонецЕсли;
			
		ИначеЕсли Элементы.СтраницыСтаканПраво.ТекущаяСтраница = Элементы.СтраницаСерииИПартии Тогда
			
			ФильтрПоискаПоШтрихкоду.Вставить("СерииНоменклатуры", Элементы.Товары.ТекущиеДанные.Номенклатура);
			ДобавитьВФильтрМассивУжеДобавленныхСерий = Истина;
			
		ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПоискТовара Тогда
			
			ФильтрПоискаПоШтрихкоду.Вставить("Номенклатура");
			ДобавитьВФильтрМассивУжеДобавленныхСерий = Истина;
			
		Иначе
			
			ФильтрПоискаПоШтрихкоду.Вставить("Номенклатура");
			ФильтрПоискаПоШтрихкоду.Вставить("Пользователи");
			ФильтрПоискаПоШтрихкоду.Вставить("ФизическиеЛица");
			ФильтрПоискаПоШтрихкоду.Вставить("ИнформационныеКарты");
			ФильтрПоискаПоШтрихкоду.Вставить("СерииНоменклатуры");
			ФильтрПоискаПоШтрихкоду.Вставить("СерийныеНомера");
			ФильтрПоискаПоШтрихкоду.Вставить("ДобавлятьНеизвестнуюКИ");
			
			Если НЕ Элементы.Товары.ТекущиеДанные = Неопределено Тогда
				
				Если ЗначениеЗаполнено(Элементы.Товары.ТекущиеДанные.Номенклатура) И ОжидатьВводМарки Тогда
					ФильтрПоискаПоШтрихкоду.Вставить("НоменклатураДляВводаМарки", Элементы.Товары.ТекущиеДанные.Номенклатура);
				КонецЕсли;
				
			КонецЕсли;
			
			ДобавитьВФильтрМассивУжеДобавленныхСерий = Истина;
			ПараметрыСобытийПО.Вставить("РегистрацияНовойКарты", Истина);
			
		КонецЕсли;
		
		Если ДобавитьВФильтрМассивУжеДобавленныхСерий Тогда
			
			МассивУжеДобавленныхСерий = Новый Массив;
			Для Каждого СтрокаТовара Из Объект.Товары Цикл
				Если ЗначениеЗаполнено(СтрокаТовара.Серия) Тогда
					МассивУжеДобавленныхСерий.Добавить(СтрокаТовара.Серия);
				КонецЕсли;
			КонецЦикла;
			
			Если МассивУжеДобавленныхСерий.Количество() > 0 Тогда
				ФильтрПоискаПоШтрихкоду.Вставить("МассивУжеДобавленныхСерий", МассивУжеДобавленныхСерий);
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ Элементы.СтраницыСтаканПраво.ТекущаяСтраница = Элементы.СтраницаЗаменаПрав
			И НЕ Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВводКассира Тогда
			
				Если ПараметрыДляОбработкиШтрихкода.Свойство("ОжидатьВводМарки")
					И ПараметрыДляОбработкиШтрихкода.ОжидатьВводМарки Тогда
					
					ДанныеМаркировки = МенеджерОборудованияМаркировкаКлиентСервер.РазобратьШтриховойКодТовара(Штрихкод);
					ЭтоКодМарки = ЭтоКодМаркировки(ДанныеМаркировки);
					
					Если НЕ ЭтоКодМарки Тогда
						
						ПараметрыДляОбработкиШтрихкода.Вставить("НеверныйКод");
						Возврат;
						
					КонецЕсли;
					
				КонецЕсли;
			
		КонецЕсли;
		
		СтруктураПараметровКлиента = ДанныеПоискаПоШтрихкодуСервер(ШтрихкодПоиска);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеПоискаПоШтрихкодуСервер(Штрихкод)
	Возврат РаботаСоШтрихкодамиПереопределяемый.ДанныеПоискаПоШтрихкоду(Штрихкод, ЭтотОбъект);
КонецФункции

&НаКлиенте
Процедура ПродолжитьОбработатьДанныеПоКодуКлиент(СтруктураРезультат) Экспорт
	
	СтрокаРезультата = СтруктураРезультат.ЗначенияПоиска[0];
	
	Если НЕ СтруктураРезультат.Свойство("ДействиеОтменено") Тогда
		
		Если СтрокаРезультата.Свойство("Карта") Тогда
			СтрокаРезультата.Вставить("Владелец", СтрокаРезультата.Карта);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ПараметрыДляОбработкиШтрихкода = Неопределено) Экспорт
	
	ОткрытаБлокирующаяФорма = Ложь;
	РаботаСоШтрихкодамиКлиентПереопределяемый.ОбработатьДанныеПоКоду(ЭтотОбъект, СтруктураПараметровКлиента,
		ОткрытаБлокирующаяФорма);
	
	Если НЕ ОткрытаБлокирующаяФорма Тогда
		
		Если СтруктураПараметровКлиента.ЗначенияПоиска.Количество() > 0 Тогда
			
			СтрокаРезультата = СтруктураПараметровКлиента.ЗначенияПоиска[0];
			
			СтруктураВыбора = Новый Структура;
			
			ПользовательДоЗаменыПрав = Объект.ПользовательБД;
			КассирДоЗаменыПрав = Объект.Кассир;
			
			ЗаполнитьДанныеПоШтрихкоду(СтруктураВыбора, СтрокаРезультата, ПараметрыДляОбработкиШтрихкода);
			
			Если ЕстьСвойство(ПараметрыДляОбработкиШтрихкода, "НайденаКартаЛояльности") Тогда
				ЗавершитьВводШтрихкодаНайденаКарта();
			ИначеЕсли ЕстьСвойство(ПараметрыДляОбработкиШтрихкода, "НайденКассир") Тогда
				
				Если ТекущаяОперация = НСтр("ru='ЧекНаВозвратРМК'") Тогда 
					
					ОткрытьОбщуюСтраницу(Истина);
					ВыбратьЧекНаВозврат();
					СформироватьЗаголовокВводКассира();
					
				ИначеЕсли ТекущаяОперация = НСтр("ru='ЧекКоррекцииРМК'") Тогда 
					
					ОткрытьОбщуюСтраницу(Истина);
					ВыбратьЧекКоррекции();
					СформироватьЗаголовокВводКассира();
					
				ИначеЕсли ЗначениеЗаполнено(ТекущаяОперация) Тогда
					
					НастроитьФормуПослеЗаменыПрав();
					Возврат;
					
				Иначе
					
					ПроверитьКассовуюСменуИНайтиКассира();
					ОткрытьОбщуюСтраницу();
					СформироватьЗаголовокВводКассира();
					
				КонецЕсли; 
				
				СформироватьЗаголовок();
				
			КонецЕсли;
			
		Иначе
			
			Если Элементы.СтраницыДанныеПокупателя.ТекущаяСтраница = Элементы.СтраницаСозданиеКарты Тогда
				
				ДанныеМаркировки =
					МенеджерОборудованияМаркировкаКлиентСервер.РазобратьШтриховойКодТовара(ПараметрыДляОбработкиШтрихкода.Штрихкод);
				ЭтоКодМарки = ЭтоКодМаркировки(ДанныеМаркировки);
				
				Если НЕ ЭтоКодМарки Тогда
					НоваяКартаНомер = ПараметрыДляОбработкиШтрихкода.Штрихкод;
				КонецЕсли;
				
			ИначеЕсли Элементы.СтраницыПраво.ТекущаяСтраница = Элементы.СтраницаПравоДанныеПокупателя
				И Элементы.СтраницыДанныеПокупателя.ТекущаяСтраница = Элементы.СтраницаПоискКарты Тогда
				
				УстановитьВидимостьЭлементаФормы(Элементы.ГруппаПоискКартыКартаНеНайдена, Истина);
				УстановитьВидимостьЭлементаФормы(Элементы.ГруппаПоискКартыПоиск, Ложь);
				УстановитьВидимостьЭлементаФормы(Элементы.ГруппаПоискКартыКартаНайдена, Ложь);
				
				ТекущийЭлемент = Элементы.СтрокаПовторныйПоискКарты;
				
			ИначеЕсли ЭтотОбъект.ФильтрПоискаПоШтрихкоду = Неопределено
				ИЛИ ЭтотОбъект.ФильтрПоискаПоШтрихкоду.Свойство("Номенклатура") Тогда
				
					СтрокаРезультата = Неопределено;
					СтруктураВыбора = Неопределено;
					ЗаполнитьДанныеПоШтрихкоду(СтруктураВыбора, СтрокаРезультата, ПараметрыДляОбработкиШтрихкода);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПоискТовара Тогда
		ЗакрытьПоискТоваровКлиент();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоШтрихкоду(СтруктураВыбора, СтрокаРезультата, ПараметрыДляОбработкиШтрихкода)
	
	Если ПараметрыДляОбработкиШтрихкода = Неопределено Тогда
		
		ПараметрыДляОбработкиШтрихкода = Новый Структура();
		ПараметрыДляОбработкиШтрихкода.Вставить("Штрихкод", СтрокаРезультата.ДанныеПО);
		ПараметрыДляОбработкиШтрихкода.Вставить("ИдентификаторСтроки", 0);
		
		ОбработатьШтрихкод(ПараметрыДляОбработкиШтрихкода);
		
		Если ОжидатьВводМарки Тогда
			
			ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
			
			Если НЕ ТекущаяСтрока = Неопределено Тогда
				
				ПараметрыДляОбработкиШтрихкода.Вставить("ТекущаяНоменклатура", ТекущаяСтрока.Номенклатура);
				ПараметрыДляОбработкиШтрихкода.Вставить("НомерСтроки", ТекущаяСтрока.ПолучитьИдентификатор());
				ПараметрыДляОбработкиШтрихкода.Вставить("НеобходимоВвестиМарку");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыДляОбработкиШтрихкода.Вставить("Объект", Объект);
	
	Если СтрокаРезультата = Неопределено Тогда
		ШтрихкодированиеРМК.ДобавитьСтрокуВТабличнуюЧастьПоШтрихкоду(ПараметрыДляОбработкиШтрихкода, СтрокаРезультата);
	Иначе
		
		ВладелецШтрихкода = СтрокаРезультата.Владелец;
		
		Если ВладелецШтрихкода = Неопределено Тогда
			
			Если СтрокаРезультата.ШаблонШтрихкода = Перечисления.ШаблоныШтрихкодов.Телефон Тогда
				
				Если Элементы.СтраницыДанныеПокупателя.ТекущаяСтраница = Элементы.СтраницаСозданиеКарты Тогда
					НоваяКартаТелефон = СтрокаРезультата.НомерТелефона;
				ИначеЕсли Элементы.СтраницыДанныеПокупателя.ТекущаяСтраница = Элементы.СтраницаОтправкаЧека Тогда
					ОтправкаЧекаТелефон = СтрокаРезультата.НомерТелефона;
				Иначе
					ОтправкаЧекаТелефон = СтрокаРезультата.НомерТелефона;
				КонецЕсли;
				Возврат;
				
			ИначеЕсли СтрокаРезультата.ШаблонШтрихкода = Перечисления.ШаблоныШтрихкодов.АдресЭП Тогда
				
				Если Элементы.СтраницыДанныеПокупателя.ТекущаяСтраница = Элементы.СтраницаСозданиеКарты Тогда
					НоваяКартаПочта = СтрокаРезультата.Штрихкод;
				ИначеЕсли Элементы.СтраницыДанныеПокупателя.ТекущаяСтраница = Элементы.СтраницаОтправкаЧека Тогда
					ОтправкаЧекаПочта = СтрокаРезультата.Штрихкод;
				Иначе
					ОтправкаЧекаПочта = СтрокаРезультата.Штрихкод;
				КонецЕсли;
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
		НайденныйКассир = ШтрихкодированиеРМКПереопределяемый.НайденныйКассир(ВладелецШтрихкода, ЭтотОбъект);
		
		Если НЕ НайденныйКассир = Неопределено Тогда
			
			Объект.Кассир = НайденныйКассир.Кассир;
			Объект.ПользовательБД = НайденныйКассир.ПользовательБД;
			
			ЗаполнитьТаблицуРолейПользователя();
			
			ВосстанавливатьПользователя = ЗначениеЗаполнено(ТекущаяОперация);
			
			Если ТекущаяОперация = НСтр("ru='ЧекНаВозвратРМК'") Тогда
				
				Если СписокРолейПользователя.НайтиПоЗначению(НСтр("ru='ПравоЧекНаВозвратРМК'")) = Неопределено Тогда
					ТекущаяОперация = "";
				КонецЕсли;
				
			ИначеЕсли ТекущаяОперация = НСтр("ru='ЧекКоррекцииРМК'") Тогда 
				
				Если СписокРолейПользователя.НайтиПоЗначению(НСтр("ru='ПравоЧекКоррекцииРМК'")) = Неопределено Тогда
					ТекущаяОперация = "";
				КонецЕсли;
				
			КонецЕсли;
			
			ВыполнитьТекущуюОперацию();
			
			Если ВосстанавливатьПользователя Тогда
				ВыбратьПользователяДоЗаменыПрав();
			КонецЕсли;
			
			ПараметрыДляОбработкиШтрихкода.Вставить("НайденКассир");
			Возврат;
			
		КонецЕсли;
		
		НайденнаяКартаЛояльности = ШтрихкодированиеРМКПереопределяемый.НайденнаяКартаЛояльности(ВладелецШтрихкода);
		
		Если НЕ НайденнаяКартаЛояльности = Неопределено Тогда
			
			ОчиститьДанныеПокупателя();
			ШтрихкодированиеРМК.ЗаполнитьФормуПоДисконтнойКарте(ЭтотОбъект, НайденнаяКартаЛояльности);
			ПараметрыДляОбработкиШтрихкода.Вставить("НайденаКартаЛояльности");
			
			Если ДоступнаОтправкаSMS
				И СтрокаРезультата.Свойство("ШаблонШтрихкода")
				И СтрокаРезультата.ШаблонШтрихкода = Перечисления.ШаблоныШтрихкодов.Телефон
				И ЗначениеЗаполнено(ТекущаяНастройкаРМК.ОтправлятьSMSКодПриПродаже)
				И ОбщегоНазначенияРМКПереопределяемый.ВидОперацииПродажа(Объект.ВидОперации)
				И НЕ ЭтоЧекКоррекции Тогда
				
					ПараметрыВводаКодаSMS = ПараметрыПроверкиПоSMSКоду();
					ПараметрыВводаКодаSMS.Вставить("КартаНайденаПоНомеруТелефона", Истина);
				
				Если ТекущаяНастройкаРМК.ОтправлятьSMSКодПриПродаже = Перечисления.ВариантыОтправкиSMSПриПродаже.ПриВыборе Тогда
					ПараметрыВводаКодаSMS.ВаринатПроверки = "ПриВыборе";
				Иначе
					ПараметрыВводаКодаSMS.ВаринатПроверки = "ПриОплатеБонусами";
					Элементы.ОплатитьБонусами.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
				КонецЕсли;
				
			КонецЕсли;
			Возврат;
			
		КонецЕсли;
		
		НоменклатураДляПоискаСерий = Неопределено;
		Если НЕ ФильтрПоискаПоШтрихкоду = Неопределено Тогда
			ФильтрПоискаПоШтрихкоду.Свойство("СерииНоменклатуры", НоменклатураДляПоискаСерий);
		КонецЕсли;
		
		Если НоменклатураДляПоискаСерий = Неопределено Тогда
			
			НайденнаяНоменклатура = ШтрихкодированиеРМКПереопределяемый.НайденнаяНоменклатура(
				СтрокаРезультата, ЭтотОбъект, ПараметрыДляОбработкиШтрихкода);
			
			Если НЕ НайденнаяНоменклатура = Неопределено Тогда
				
				Если НЕ ЗначениеЗаполнено(НайденнаяНоменклатура.СистемаНалогообложения) Тогда
					НайденнаяНоменклатура.СистемаНалогообложения = СистемаНалогообложенияОрганизацииПоУмолчанию;
				КонецЕсли;
				
				Если НЕ НайденнаяНоменклатура.ЭтоНабор Тогда
					
					ОбщегоНазначенияРМКПереопределяемый.ПереопределитьПараметрыЗаполненияСерийИПартий(
						НайденнаяНоменклатура, ЭтотОбъект);
					ШтрихкодированиеРМК.ДобавитьСтрокуВТабличнуюЧастьПоШтрихкоду(ПараметрыДляОбработкиШтрихкода,
						НайденнаяНоменклатура);
						
				Иначе
					
					СписокДобавленныхСтрокТоваров.Очистить();
					ДобавитьНаборВТабличнуюЧасть(НайденнаяНоменклатура);
					ПараметрыДляОбработкиШтрихкода.Вставить("ДобавленНабор");
					
				КонецЕсли;
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
		НайденнаяСерияНоменклатуры = ШтрихкодированиеРМКПереопределяемый.НайденнаяСерияНоменклатуры(ВладелецШтрихкода);
		
		Если НЕ НайденнаяСерияНоменклатуры = Неопределено Тогда
			
			ПараметрыДляОбработкиШтрихкода.Вставить("СерияВведена");
			ВыборСерии = НайденнаяСерияНоменклатуры;
			Возврат;
			
		КонецЕсли;
		
		НайденнаяПартияНоменклатуры = ШтрихкодированиеРМКПереопределяемый.НайденнаяПартияНоменклатуры(ВладелецШтрихкода);
		
		Если НЕ НайденнаяПартияНоменклатуры = Неопределено Тогда
			
			ПараметрыДляОбработкиШтрихкода.Вставить("СерияВведена");
			ВыборПартии = НайденнаяПартияНоменклатуры;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораДанныхПоиска(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ПараметрыДляОбработкиШтрихкода = Неопределено;
		ОбработатьДанныеПоКодуКлиент(Результат, ПараметрыДляОбработкиШтрихкода);
		ОбработатьШтрихкодЗавершение(ПараметрыДляОбработкиШтрихкода);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПодключениеОборудованиеПоИдентификаторуЗавершение(Данные, СтрокаТЧ) Экспорт
	
	Если ЕстьСвойство(Данные, "Результат") И Не Данные.Результат Тогда
		
		Данные.ОписаниеОшибки = СтрЗаменить(Данные.ОписаниеОшибки, "'", "");

		ТекстПредупреждения = СтрШаблон(НСтр("ru = 'При подключении устройства произошла ошибка:""%1"".';
			|en = 'An error occurred when connecting the device:""%1"".'"), Данные.ОписаниеОшибки);
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
		СтрокаТЧ.Подключено = 0;
		
	Иначе
		
		СтрокаТЧ.Подключено = 1;
		
		Если СтрокаТЧ.ТипОборудования =
			ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(
				"Перечисление.ТипыПодключаемогоОборудования.ЭлектронныеВесы") Тогда
					ЭлектронныеВесы = СтрокаТЧ.Ссылка;
		ИначеЕсли СтрокаТЧ.ТипОборудования =
			ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(
				"Перечисление.ТипыПодключаемогоОборудования.ДисплейПокупателя") Тогда
					ДисплейПокупателя = СтрокаТЧ.Ссылка;
		ИначеЕсли СтрокаТЧ.ТипОборудования =
			ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(
				"Перечисление.ТипыПодключаемогоОборудования.ПринтерЧеков") Тогда
					ПринтерЧеков = СтрокаТЧ.Ссылка;
		КонецЕсли;
		
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Общее

&НаКлиенте
Процедура НачатьПечатьЧека()
	
	Если ПечататьБумажныйЧек Тогда
		ПробитьЧекКлиент();
	Иначе
		ПерейтиНаСтраницуОтправкиЭлектронногоЧека();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекКлиент(БумажныйЧек = Неопределено)
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПравоОбщая);
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ПробитьЧекНаКлиентеЗавершение", ЭтотОбъект);
	
	ИдентификаторУстройстваФР = ПодключаемоеОборудование;
	
	Если ЗначениеЗаполнено(ИдентификаторУстройстваФР) Тогда
		
		ПараметрыПробитияЧека = Новый Структура("ОповещениеОЗавершении, ИдентификаторУстройстваФР, БумажныйЧек",
			ОповещениеПриЗавершении, ИдентификаторУстройстваФР, БумажныйЧек);
			
			Если ОжидаемоеКоличествоЧеков >= 1 Тогда
				ПодготовитьДанныеЧековДляФискализации(ПараметрыПробитияЧека);
			Иначе
				
				ТекстСообщения =
					НСтр("ru = 'Для товаров из списка покупок не удалось определить системы налогообложения.'");
				ОткрытьСтраницуИнфоОшибка(ТекстСообщения);
				
			КонецЕсли;
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Устройство для печати чеков не выбрано.'");
		ОткрытьСтраницуИнфоОшибка(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФискализироватьЧек(Контекст, ДополнительныеДанные, ОповещениеПриЗавершении, СистемаНалогообложения)
	
	ИмяИдентификатора = НСтр("ru = 'Обработка.РабочееМестоКассира.ФискализироватьЧек'");
	ФиксироватьСОшибкой = Ложь;
	АвтозавершениеЗамера = Ложь;
	
	ИдентификаторЗамераПробитияЧека = ОценкаПроизводительностиКлиент.ЗамерВремени(ИмяИдентификатора,
		ФиксироватьСОшибкой, АвтозавершениеЗамера);
		
	ИдентификаторУстройстваФР = ДополнительныеДанные.ИдентификаторУстройстваФР;
	ТранспортныйМодуль = ДополнительныеДанные.ТранспортныйМодуль;
	
	ОбщиеПараметры = ПодготовитьДанныеДляПробитияЧека(Контекст,
		ДополнительныеДанные, СистемаНалогообложения);
	
	Отказ = ДополнительныеДанные.Отказ;
	ТекстОшибки = ДополнительныеДанные.ТекстОшибки;
	ЕстьПродукцияЕГАИС = ДополнительныеДанные.ЕстьПродукцияЕГАИС;
	
	Если Отказ Тогда
		
		Если ПустаяСтрока(ТекстОшибки) Тогда
			ТекстОшибки = НСтр("ru='Ошибка формирования исходных данных для фискализации чека'");
		КонецЕсли;
		
		ДополнительныеДанные.ТекстОшибки = ТекстОшибки;
		
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИдентификаторЗамераПробитияЧека, Ложь);
		
		Доступность = Истина;
		
		Если ТранзакцияПоКартеЗавершена Тогда
			ОбработатьОтменуОплатыПоКарте(, ТекстОшибки);
		Иначе
			
			ТекстЗаголовка = НСтр("ru = 'Ошибка пробития чека.'");
			Если Не ДополнительныеДанные.ПечататьБумажныйЧек Тогда
				Элементы.СтраницыПраво.ТекущаяСтраница = Элементы.СтраницаПравоОбщая;
			КонецЕсли;
			ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки);
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ДополнительныеДанные.ПечататьБумажныйЧек Тогда
		
		Если ЗначениеЗаполнено(ОтправкаЧекаПочта) Тогда
			ОбщиеПараметры.ПокупательEmail = ОтправкаЧекаПочта;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОтправкаЧекаТелефон) И НЕ ЗначениеЗаполнено(ОтправкаЧекаПочта) Тогда
			ОбщиеПараметры.ПокупательНомер = ОтправкаЧекаТелефон;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщиеПараметры.Электронно = НЕ ДополнительныеДанные.ПечататьБумажныйЧек;
	
	Контекст.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	Контекст.Вставить("ЕстьПродукцияЕГАИС", ЕстьПродукцияЕГАИС);
	
	ДополнительныеПараметры = Неопределено;
	
	Если ЕстьПродукцияЕГАИС Тогда
		
		Контекст.Вставить("ТранспортныйМодуль", ТранспортныйМодуль);
		ОбщиеПараметры.Вставить("ЕстьАлкогольнаяПродукцияЕГАИС", ЕстьПродукцияЕГАИС);
		
	КонецЕсли;
	
	ИдентификаторЧекаВОчереди = 
	ОборудованиеЧекопечатающиеУстройстваВызовСервера.ДобавитьЧекВОчередьЧековККТ(ОбщиеПараметры);
	
	РазрешенаАвтоматическаяФискализация = Ложь;
	МенеджерОборудованияКлиент.ФискализацияЧековВОчереди(РазрешенаАвтоматическаяФискализация);
	
	ПодключитьОбработчикОжидания("ПроверитьСтатусЧекаНаКлиенте", 1, Истина);
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьДанныеДляПробитияЧека(Контекст, ИсходныеДанные, СистемаНалогообложения)
	
	ЕстьПродукцияЕГАИС = ИсходныеДанные.ЕстьПродукцияЕГАИС;
	Отказ = ИсходныеДанные.Отказ;
	ТекстОшибки = ИсходныеДанные.ТекстОшибки;
	БумажныйЧек = ИсходныеДанные.ПечататьБумажныйЧек;
	СворачиватьСтрокиПриПечатиЧека = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяНастройкаРМК,
		"СворачиватьСтрокиПриПечатиЧека");
	
	Если Не ККМПоддерживаетПроверкуКодовМаркировки Тогда
		Для Каждого СтрокаТовара Из Объект.Товары Цикл
			СтрокаТовара.КонтрольнаяМарка = СтрокаТовара.КодМаркировки;
		КонецЦикла;
	КонецЕсли;
	
	ЧекККМВОбработке = ОбщегоНазначенияРМКПереопределяемый.ЗаписатьЧекККМПередПробитием(ЭтотОбъект, Отказ,
		ТекстОшибки, СистемаНалогообложения);
	
	Если Отказ Тогда
		
		ИсходныеДанные.Отказ = Отказ;
		ИсходныеДанные.ТекстОшибки = ТекстОшибки;
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Контекст.Вставить("ЧекККМСсылка", ЧекККМВОбработке);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ЕстьПродукцияЕГАИС", ЕстьПродукцияЕГАИС);
	ДополнительныеПараметры.Вставить("ПечататьБумажныйЧек", ПечататьБумажныйЧек);
	ДополнительныеПараметры.Вставить("СистемаНалогообложения", СистемаНалогообложения);
	ДополнительныеПараметры.Вставить("СворачиватьСтрокиПриПечатиЧека", СворачиватьСтрокиПриПечатиЧека);
	ДополнительныеПараметры.Вставить("ОсобенностиУчетаВозвращаемойМаркируемойПродукции",
		ОсобенностиУчетаВозвращаемойМаркируемойПродукции);
	
	ОбщиеПараметры = ОбщегоНазначенияРМКПереопределяемый.ПодготовитьДанныеДляПробитияЧека(ЧекККМВОбработке,
		ДополнительныеПараметры);
		
	Если ЕстьСвойство(ОбщиеПараметры, "ШаблонЧека") И НЕ ЗначениеЗаполнено(ОбщиеПараметры.ШаблонЧека) Тогда
		ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьШаблонЧека(ЧекККМВОбработке, ОбщиеПараметры, ТекущаяНастройкаРМК);
	КонецЕсли;
	
	ИсходныеДанные.ЕстьПродукцияЕГАИС = ДополнительныеПараметры.ЕстьПродукцияЕГАИС;
	
	Если ЕстьСвойство(ОбщиеПараметры, "ПозицииЧека") Тогда
		ДополнитьДаннымиМарок(ОбщиеПараметры.ПозицииЧека);
	КонецЕсли;
	
	Возврат ОбщиеПараметры;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьСтатусЧекаНаКлиенте()
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("Результат", Ложь);
	РезультатВыполнения.Вставить("ОписаниеОшибки", НСтр("ru = ''"));
	
	ПроверитьСтатусЧека(РезультатВыполнения);
	Если ЗначениеЗаполнено(РезультатВыполнения.Результат) Тогда
		ПробитьЧекНаКлиентеЗавершение(РезультатВыполнения, Неопределено);
	Иначе
		ПодключитьОбработчикОжидания("ПроверитьСтатусЧекаНаКлиенте", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСтатусЧека(РезультатВыполнения)
	
	ДанныеСтатусаЧека =
		ОборудованиеЧекопечатающиеУстройстваВызовСервера.ПолучитьСтатусЧекаВОчереди(
			ЧекККМВОбработке.ИдентификаторЧекаВОчереди);
			
	ПараметрыДляЗаписиЧека = Новый Структура;
	ПараметрыДляЗаписиЧека.Вставить("Результат", Неопределено);
	ПараметрыДляЗаписиЧека.Вставить("ЧекККМСсылка", Неопределено);
	
	СтатусЧека = Неопределено;
	
	Если ЕстьСвойство(ДанныеСтатусаЧека, "СтатусЧека") Тогда
		
		СтатусЧека = ДанныеСтатусаЧека.СтатусЧека;
		Если СтатусЧека = Перечисления.СтатусЧекаККТВОчереди.Ошибка Тогда
			ПараметрыДляЗаписиЧека.Результат = Ложь;
		ИначеЕсли СтатусЧека = Перечисления.СтатусЧекаККТВОчереди.Фискализирован Тогда
			ПараметрыДляЗаписиЧека.Результат = Истина;
		Иначе
			ПараметрыДляЗаписиЧека.Результат = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьСвойство(ДанныеСтатусаЧека, "ДокументОснование") Тогда
		ПараметрыДляЗаписиЧека.ЧекККМСсылка = ДанныеСтатусаЧека.ДокументОснование;
	КонецЕсли;
	
	ПробитьЧекЗавершение(ПараметрыДляЗаписиЧека);
	
	
	Если СтатусЧека = Перечисления.СтатусЧекаККТВОчереди.Фискализирован Тогда
		РезультатВыполнения.Результат = Истина;
	ИначеЕсли СтатусЧека = Перечисления.СтатусЧекаККТВОчереди.Ошибка Тогда
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка при пробитии чека на ККТ.'"),
			УровеньЖурналаРегистрации.Ошибка,,, ДанныеСтатусаЧека.ТекстОшибки);
		
		ОборудованиеЧекопечатающиеУстройстваВызовСервера.УдалитьЧекИзОчереди(ДанныеСтатусаЧека.ДокументОснование);
		
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = ДанныеСтатусаЧека.ТекстОшибки;
		
	Иначе
		РезультатВыполнения.Результат = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекНаКлиентеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Доступность = Истина;
	ЭтоПоследнийЧекСписка = Истина;
	
	Если ИспользоватьОплатуСертификатамиНСПК Тогда
		
		Если СуммаОплаченоСертификатамиНСПК > 0 Тогда
			
			Если ЕстьСвойство(РезультатВыполнения, "Результат") И РезультатВыполнения.Результат Тогда
				ПередатьДанныеФискальногоЧекаНСПК();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЧекККМВОбработке = ОбщегоНазначенияРМККлиентПереопределяемый.ПустаяСсылкаНаЧекККМ();
	
	Если ЕстьСвойство(РезультатВыполнения, "Результат") И РезультатВыполнения.Результат Тогда
		
		ТранзакцияПоКартеЗавершена = Ложь;
		
		ОжидаемоеКоличествоЧеков = ОжидаемоеКоличествоЧеков -1;
		
		Если ЗначениеЗаполнено(ОтложенныйЧек) Тогда
			ОтложенныйЧек = ОбщегоНазначенияРМККлиентПереопределяемый.ПустаяСсылкаНаЧекККМ();
		КонецЕсли;
		
		ЭтоПоследнийЧекСписка = ОжидаемоеКоличествоЧеков < 1;
		СписатьБонусныеБаллы();
		СписатьРазблокироватьПодарочныеСертификаты(Истина);
		
		Если ЭтоПоследнийЧекСписка Тогда
			
			НастроитьЭлементыФормы(Элементы.СтраницаПустая, Ложь);
			ИнициализироватьИнтерфейсРабочегоМестаКассира(Ложь);
			
		КонецЕсли;
		
		СформироватьЗаголовок(НСтр("ru='Продажа'"));
		
		Если ЗначениеЗаполнено(ИдентификаторЗамераПробитияЧека) Тогда
			 ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИдентификаторЗамераПробитияЧека, Ложь);
		КонецЕсли;
		
	Иначе
		
		ТекстЗаголовка = НСтр("ru = 'При печати чека произошла ошибка.'");
		ТекстСообщения = РезультатВыполнения.ОписаниеОшибки;
		
		Если СуммаОплаченоQRКодом > 0 Тогда
			Объект.Оплачивается = Истина;
		КонецЕсли;
		
		Если ТранзакцияПоКартеЗавершена Тогда
			ОбработатьОтменуОплатыПоКарте(ТекстЗаголовка, ТекстСообщения);
		Иначе
			
			Если Элементы.СтраницыПраво.ТекущаяСтраница = Элементы.СтраницаПравоДанныеПокупателя Тогда
				ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПравоОбщая);
			КонецЕсли;
			ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстСообщения);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИдентификаторЗамераПробитияЧека) Тогда
			ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИдентификаторЗамераПробитияЧека);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоЧекКоррекции И НЕ ЭтоПоследнийЧекСписка Тогда
		ПробитьЧекКоррекцииПродажи();
	ИначеЕсли ЭтоЗаменаТоваров И НЕ ЭтоПоследнийЧекСписка Тогда
		ПробитьЧекЗаменыТоваровПродажи();
	КонецЕсли;
	
	Если ЕстьСвойство(РезультатВыполнения, "Результат") И РезультатВыполнения.Результат Тогда
		
		Если ПлатежнаяСистема_ОжидаемоеКоличествоЧеков > 0 Тогда
			
			ПлатежнаяСистема_ОжидаемоеКоличествоЧеков = ПлатежнаяСистема_ОжидаемоеКоличествоЧеков  - 1;
			
			Если ПлатежнаяСистема_ОжидаемоеКоличествоЧеков = 0 Тогда
				СанкционироватьЗакрытиеОперацииПлатежнойСистемой(Ложь)
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОжидаемоеКоличествоЧеков > 0 Тогда
		
			ОтобранныеСтроки = Объект.Товары.НайтиСтроки(ВыбраннаяОрганизацияИСНО());
			
			Для Каждого СтрокаКорзины Из ОтобранныеСтроки Цикл
				СтрокаКорзины.Оплачена = Истина;
			КонецЦикла;
		
			ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
			ПараметрыПересчета.ПоКомандеПереключитьЧек = "НаСледующий";
			РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
		
			ПродолжитьОплачиваемыйЧекQRКодом(Истина);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПробитьЧекЗавершение(ВходящиеДанные)
	
	Если НЕ ЕстьСвойство(ВходящиеДанные, "ЧекККМСсылка") Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияРМКПереопределяемый.ПробитьЧекЗавершение(ВходящиеДанные, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаКартойНаКлиенте()
	
	ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
	ПараметрыПересчета.ПоКомандеБН = Истина;
	ПараметрыПересчета.ПриИзмененииБНОплаты = Истина;
	РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаНаличнымиНаКлиенте()
	
	ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
	ПараметрыПересчета.ПоКомандеНал = Истина;
	РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаНаКлиенте()
	
	ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
	ПараметрыПересчета.ПоКомандеПредоплата = Истина;
	
	РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
	Объект.ОперацияСДенежнымиСредствами = НЕ Объект.ОперацияСДенежнымиСредствами;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаВРассрочкуНаКлиенте()
	
	ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
	ПараметрыПересчета.ПоКомандеВРассрочку = Истина;
	РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьСертификатомНСПКНаКлиенте()
	
	Если ЕстьВозможностьОплатыСертификатомНСПК() Тогда
		
		ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
		ПараметрыПересчета.ПоКомандеОплатитьСертификатомНСПК = Истина;
		РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
		
		ЭтоВозврат = ОбщегоНазначенияРМККлиентПереопределяемый.ВидОперацииВозвратПродажи(Объект.ВидОперации);
		НастроитьЭлементыВРежимеПроверкаСертификатаНСПК(Истина, ЭтоВозврат);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗачетАвансаНаКлиенте()
	
	ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
	ПараметрыПересчета.ПоКомандеЗачетАванса = Истина;
	РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
	
КонецПроцедуры

&НаКлиенте
Процедура БезналНаКлиенте()
	
	ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
	ПараметрыПересчета.ПоКомандеБезнал = Истина;
	РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
	
КонецПроцедуры

#КонецОбласти

#Область ПробитиеЧека

#Область ОтправкаПечатьПробитогоЧека

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораЧекаПриПечатиПробитогоЧека(РезультатВыполнения, Параметры) Экспорт
	
	Если ЕстьСвойство(РезультатВыполнения, "ЧекККМ") И ЗначениеЗаполнено(РезультатВыполнения.ЧекККМ) Тогда
		
		ЧекККМ = РезультатВыполнения.ЧекККМ;
		
		Если ЕстьСвойство(РезультатВыполнения, "РежимПечатиЧека")
			И ЗначениеЗаполнено(РезультатВыполнения.РежимПечатиЧека) Тогда
			
				РежимПечатиЧека = РезультатВыполнения.РежимПечатиЧека;
				
				Если РежимПечатиЧека = "ПечатьПробитогоЧека" Тогда
					НапечататьФискальныйЧекБезФискализации(ЧекККМ);
				ИначеЕсли РежимПечатиЧека = "ПечатьТоварногоЧека" Тогда
					НапечататьТоварныйЧекПоФискальномуЧеку(ЧекККМ);
				Иначе
					ПоказатьПредупреждение(, НСтр("ru = 'Нештатное завершение попытки распечатать чек'"));
				КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПовторнуюПечатьФискальногоЧека(РезультатВыполнения, ПараметрДействия) Экспорт
	
	Если ЕстьСвойство(РезультатВыполнения, "Результат") И НЕ РезультатВыполнения.Результат Тогда
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Произошла ошибка при попытке повторной печати фискального чека.
			|Причина: %1'"), РезультатВыполнения.ОписаниеОшибки);
		ПоказатьПредупреждение(, ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеЧекаДляВыведенияНаПринтерЧеков(ЧекККМ, ТекущаяНастройкаРМК,
	ОсобенностиУчетаВозвращаемойМаркируемойПродукции)
	
	ОбщиеПараметры = Новый Структура();
	
	Если ЗначениеЗаполнено(ЧекККМ) Тогда
		
		ПечататьБумажныйЧек = Истина;
		СворачиватьСтрокиПриПечатиЧека = Истина;
		
		Если ЗначениеЗаполнено(ТекущаяНастройкаРМК) Тогда
			
			СворачиватьСтрокиПриПечатиЧека =
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяНастройкаРМК, "СворачиватьСтрокиПриПечатиЧека");
			ПечататьБумажныйЧек = ПроверитьВозможностьПечатиБумажногоЧека(ТекущаяНастройкаРМК);
			
		КонецЕсли;
		
		ОрганизацияПродажи = ЧекККМ.Организация;
		
		СистемаНалогообложения = СистемаНалогообложенияЧека(ЧекККМ);
		ЕстьПродукцияЕГАИС = ПродажиРМК.ЕстьПродукцияЕГАИС(ЧекККМ);
			
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ЕстьПродукцияЕГАИС", ЕстьПродукцияЕГАИС);
		ДополнительныеПараметры.Вставить("ПечататьБумажныйЧек", ПечататьБумажныйЧек);
		ДополнительныеПараметры.Вставить("СистемаНалогообложения", СистемаНалогообложения);
		ДополнительныеПараметры.Вставить("СворачиватьСтрокиПриПечатиЧека", СворачиватьСтрокиПриПечатиЧека);
		ДополнительныеПараметры.Вставить("ОсобенностиУчетаВозвращаемойМаркируемойПродукции",
			ОсобенностиУчетаВозвращаемойМаркируемойПродукции);
		
		ОбщиеПараметры = ОбщегоНазначенияРМКПереопределяемый.ПодготовитьДанныеДляПробитияЧека(ЧекККМ,
			ДополнительныеПараметры);
			
		Если ЕстьСвойство(ОбщиеПараметры, "ШаблонЧека") И НЕ ЗначениеЗаполнено(ОбщиеПараметры.ШаблонЧека) Тогда
			ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьШаблонЧека(ЧекККМ, ОбщиеПараметры, ТекущаяНастройкаРМК);
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат ОбщиеПараметры;
	
КонецФункции

&НаКлиенте
Процедура НапечататьФискальныйЧекБезФискализации(ЧекККМ)
	
	ИдентификаторУстройстваФискальногоРегистратора = ПодключаемоеОборудование;
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ЗавершитьПовторнуюПечатьФискальногоЧека", ЭтотОбъект);
	
	Если ЗначениеЗаполнено(ПринтерЧеков) И ЗначениеЗаполнено(ЧекККМ) Тогда
		
		ПараметрыОперации = ДанныеЧекаДляВыведенияНаПринтерЧеков(ЧекККМ, ТекущаяНастройкаРМК,
			ОсобенностиУчетаВозвращаемойМаркируемойПродукции);
			
		ТекстЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.СформироватьТекстНефискальногоЧека(ПараметрыОперации);
		
		ПараметрыОперации = Новый Структура();
		ПараметрыОперации.Вставить("СтрокиТекста", ТекстЧека);
		ОборудованиеЧекопечатающиеУстройстваКлиент.
			НачатьПечатьТекста(ОповещениеПриЗавершении, УникальныйИдентификатор, ПринтерЧеков, ПараметрыОперации);
		
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторУстройстваФискальногоРегистратора)
		И ЗначениеЗаполнено(ЧекККМ) Тогда
		
		НомерЧека = ОбщегоНазначенияРМКВызовСервера.ЗначениеРеквизитаОбъекта(ЧекККМ, "НомерЧекаККМ");
		
		ПараметрыОперации = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыПечатьКопииЧека(); 
		ПараметрыОперации.Аппаратно = Ложь;
		ПараметрыОперации.НомерЧека = НомерЧека;   
		ПараметрыОперации.Вставить("ДокументСсылка", ЧекККМ);
		
		ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьПечатьКопииЧека(ОповещениеПриЗавершении,
			УникальныйИдентификатор, ИдентификаторУстройстваФискальногоРегистратора, ПараметрыОперации);
			
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Устройство для печати чеков не выбрано.'");
		ОткрытьСтраницуИнфоОшибка(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьВозможностьПечатиБумажногоЧека(ТекущаяНастройкаРМК)
	
	Результат = Истина;
	
	Если ЗначениеЗаполнено(ТекущаяНастройкаРМК) Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	НастройкиРабочегоМестаКассира.ПечататьБумажныйЧек КАК ПечататьБумажныйЧек
		|ИЗ
		|	Справочник.НастройкиРабочегоМестаКассира КАК НастройкиРабочегоМестаКассира
		|ГДЕ
		|	НастройкиРабочегоМестаКассира.Ссылка = &ТекущаяНастройкаРМК");
		
		Запрос.УстановитьПараметр("ТекущаяНастройкаРМК", ТекущаяНастройкаРМК);
		
		ЗначениеНастройки = Запрос.Выполнить().Выбрать();
		
		Если ЗначениеНастройки.Следующий() Тогда
			Результат = ЗначениеНастройки.ПечататьБумажныйЧек;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ФормированиеЧековПоНесколькимСНО

&НаКлиенте
Функция РазличныеСНОВСпискеПокупок()
	
	Корзина = Объект.Товары;
	СНОТоваровВКорзине = Новый Массив;
	
	СписокОрганизаций = Новый СписокЗначений;
	
	Для Каждого СтрокаКорзины Из Корзина Цикл
		
		Если СписокОрганизаций.НайтиПоЗначению(СтрокаКорзины.Организация) = Неопределено Тогда
			СписокОрганизаций.Добавить(СтрокаКорзины.Организация);
		КонецЕсли;
		
	КонецЦикла;
	
	СписокОрганизаций.СортироватьПоЗначению();
	
	Для Каждого ОрганизацияИзСписка Из СписокОрганизаций Цикл
		
		СписокСНО = Новый СписокЗначений;
		
		ОтборПоОрганизации = Новый Структура("Организация", ОрганизацияИзСписка.Значение);
		СтрокиПоОрганизации = Корзина.НайтиСтроки(ОтборПоОрганизации);
		
		Для Каждого СтрокаКорзины Из СтрокиПоОрганизации Цикл
			
			Если СписокСНО.НайтиПоЗначению(СтрокаКорзины.СистемаНалогообложения) = Неопределено Тогда
				СписокСНО.Добавить(СтрокаКорзины.СистемаНалогообложения);
			КонецЕсли;
			
		КонецЦикла;
		
		СписокСНО.СортироватьПоЗначению();
		
		Для Каждого СНОИзСписка Из СписокСНО Цикл
			
			СтруктураОрганизацийИСНО = Новый Структура("Организация, СистемаНалогообложения");
			СтруктураОрганизацийИСНО.Организация = ОрганизацияИзСписка.Значение;
			СтруктураОрганизацийИСНО.СистемаНалогообложения = СНОИзСписка.Значение;
			СНОТоваровВКорзине.Добавить(СтруктураОрганизацийИСНО);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СНОТоваровВКорзине;
	
КонецФункции

&НаСервереБезКонтекста
Функция КассаПоддерживаетОперацииПоСНОИзСпискаПокупок(ИдентификаторУстройства, СНОИзСпискаПокупок)
	
	Результат = Новый Структура("Ошибка,ТекстОшибки", Ложь, "");
	
	Если ЗначениеЗаполнено(ИдентификаторУстройства) И СНОИзСпискаПокупок.Количество() > 0 Тогда
		
		ПараметрыРегистрацииУстройства =
			ОборудованиеЧекопечатающиеУстройстваВызовСервера.ПараметрыРегистрацииУстройства(ИдентификаторУстройства);
			
		Если ПараметрыРегистрацииУстройства.Свойство("КодыСистемыНалогообложения")
			И ЗначениеЗаполнено(ПараметрыРегистрацииУстройства.КодыСистемыНалогообложения) Тогда
			
			ПрименяемыеКодыНалогообложения = ПараметрыРегистрацииУстройства.КодыСистемыНалогообложения;
			
			Если ПустаяСтрока(ПрименяемыеКодыНалогообложения) Тогда
				
				ТекстОшибки = НСтр("ru ='Не заданы коды систем налогообложения в параметрах регистрации кассы'");
				Результат.Вставить("Ошибка", Истина);
				Результат.Вставить("ТекстОшибки", ТекстОшибки);
				Возврат Результат;
				
			КонецЕсли;
			
			ТекстОшибки = НСтр("ru = ''");
			
			Для Каждого СтрокаСписка Из СНОИзСпискаПокупок Цикл
				
				Если НЕ СтрокаСписка.Организация = ИдентификаторУстройства.Организация Тогда
					Продолжить;
				КонецЕсли;
				
				СНО = СтрокаСписка.СистемаНалогообложения;
				КодСНО = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.КодСистемыНалогообложенияККТ(СНО);
				
				Если НЕ КодСНО = Неопределено Тогда
					
					КодСНОСтрокой = Строка(КодСНО);
					
					Если СтрНайти(ПрименяемыеКодыНалогообложения, КодСНОСтрокой) = 0 Тогда
						
						СимволДополнения = ?(ПустаяСтрока(ТекстОшибки), "", НСтр("ru = ' '"));
						ТекстТекущейОшибки = СтрШаблон(НСтр("ru = 'Касса не поддерживает продажу по СНО ""%1"" '"), СНО);
						ТекстОшибки = СтрШаблон("%1%2%3", ТекстОшибки, СимволДополнения, ТекстТекущейОшибки);
						
					КонецЕсли;
					
				Иначе
					
					СимволДополнения = ?(ПустаяСтрока(ТекстОшибки), "", " ");
					ТекстТекущейОшибки = СтрШаблон(НСтр("ru = 'В БПО не найдено подходящего кода для СНО ""%1"" '"), СНО);
					ТекстОшибки = СтрШаблон("%1%2%3", ТекстОшибки, СимволДополнения, ТекстТекущейОшибки);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
				
				ТекстОшибки = СтрШаблон(НСтр("ru = '%1'"), ТекстОшибки);
				Результат.Вставить("Ошибка", Истина);
				Результат.Вставить("ТекстОшибки", ТекстОшибки);
				
			КонецЕсли;
			
		Иначе
			
			Результат.Вставить("ТекстОшибки",
				НСтр("ru = 'Не удалось определить коды систем налогообложения из параметров регистрации кассы'"));
			Результат.Вставить("Ошибка", Истина);
			
		КонецЕсли;
		
	Иначе
		
		Результат.Вставить("ТекстОшибки",
			НСтр("ru = 'Не удалось определить кассу или в списке покупок отсутствуют данные о СНО'"));
		Результат.Вставить("Ошибка", Истина);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПроинформироватьПользователяОКоличествеЧеков()

	СистемыНалогообложенияТоваровВКорзине = РазличныеСНОВСпискеПокупок();
	ОжидаемоеКоличествоЧеков = СистемыНалогообложенияТоваровВКорзине.Количество();
	
	Если ОжидаемоеКоличествоЧеков > 1 Тогда
		
		ТекстУведомления = НСтр("ru='Продажа товаров из списка покупок будет оформлена
									|согласно закону №54-ФЗ.%2Ожидаемое количество чеков: %1'");
		ТекстУведомления = СтрШаблон(ТекстУведомления, ОжидаемоеКоличествоЧеков, Символы.ПС);
		Элементы.ДекорацияКоличествоЧеков.Заголовок = ТекстУведомления;
		
	КонецЕсли;
	
	УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияКоличествоЧеков, ОжидаемоеКоличествоЧеков > 1);
	
КонецПроцедуры

#КонецОбласти

#Область ПринятиеОплат

&НаКлиенте
Процедура ПерерасчитатьСуммыОплаты(ПараметрыПересчета = Неопределено)
	
	Если ПараметрыПересчета = Неопределено Тогда
		ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
	КонецЕсли;
	
	РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗачестьОплатуКартой()
	
	ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
	ПараметрыПересчета.ПриИзмененииБНОплаты = Истина;
	РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗачестьОплатуНаличными()
	ПерерасчитатьСуммыОплаты();
КонецПроцедуры

&НаКлиенте
Процедура ЗачестьОплатуВРассрочку()
	ПерерасчитатьСуммыОплаты();
КонецПроцедуры

&НаКлиенте
Процедура ЗачестьОплатуЗачетАванса()
	ПерерасчитатьСуммыОплаты();
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммыОплатыАванса()
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СуммаБезСкидки = СуммаОплаченоНал + СуммаОплаченоБН + СуммаОплаченоБезнал;
	
	ТекущаяСтрока.Цена = СуммаБезСкидки;
	ТекущаяСтрока.Сумма = СуммаБезСкидки;
	
	РассчитатьСуммыОплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета)
	
	Если ЕстьНезаполненныеДанные() Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = "";
	
	ЭтоОперацияПродажи = ОбщегоНазначенияРМККлиентПереопределяемый.ВидОперацииПродажа(Объект.ВидОперации);
	
	Если (ЭтоОперацияПродажи ИЛИ ЭтоЗаменаТоваров) И НЕ КонтрольОстатковПройден(ТекстОшибки) Тогда
		
		ТекстЗаголовка = НСтр("ru = 'Контроль остатков.
			|Измените количество или удалите товар.'");
		ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки);
		Возврат;
		
	КонецЕсли;
	
	ПоКомандеНал = ПараметрыПересчета.ПоКомандеНал;
	ПоКомандеБН = ПараметрыПересчета.ПоКомандеБН;
	ПоКомандеБезнал = ПараметрыПересчета.ПоКомандеБезнал;
	ПоКомандеВРассрочку = ПараметрыПересчета.ПоКомандеВРассрочку;
	ПоКомандеЗачетАванса = ПараметрыПересчета.ПоКомандеЗачетАванса;
	ПриИзмененииБНОплаты = ПараметрыПересчета.ПриИзмененииБНОплаты;
	ПересчитыватьОкругление = ПараметрыПересчета.ПересчитыватьОкругление;
	ПоКомандеПредоплата = ПараметрыПересчета.ПоКомандеПредоплата;
	ПоКомандеПереключитьЧек = ПараметрыПересчета.ПоКомандеПереключитьЧек;
	ПоКомандеОплатитьСертификатом = ПараметрыПересчета.ПоКомандеОплатитьСертификатом;
	ПоКомандеОтменитьОплатуСертификатом = ПараметрыПересчета.ПоКомандеОтменитьОплатуСертификатом;
	ПриИзмененииСуммыОплатыСертификатом = ПараметрыПересчета.ПриИзмененииСуммыОплатыСертификатом;
	ПоКомандеОплатаQRКодом = ПараметрыПересчета.ПоКомандеОплатаQRКодом;
	ПоКомандеОтменитьОплатуQRКодом = ПараметрыПересчета.ПоКомандеОтменитьОплатуQRКодом;
	ПоКомандеОплатитьСертификатомНСПК = ПараметрыПересчета.ПоКомандеОплатитьСертификатомНСПК;
	ПоКомандеОтменитьОплатуСертификатомНСПК = ПараметрыПересчета.ПоКомандеОтменитьОплатуСертификатомНСПК;
	ПоКомандеЗаменаТоваров = ПараметрыПересчета.ПоКомандеЗаменаТоваров;
	ПоКомандеОплатитьВсюСуммуБонусами = ПараметрыПересчета.ПоКомандеОплатитьВсюСуммуБонусами;
	
	Если Объект.Товары.Количество() = 0 И НЕ ПриемАванса Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПоКомандеПереключитьЧек = "" Тогда
		
		ПереключитьНаСледующийЧек(ПоКомандеПереключитьЧек);
		
		Если Элементы.ГруппаСуммаОплатаСертификатами.Видимость Тогда
			
			ПоКомандеОплатитьСертификатом = Истина;
			Элементы.ГруппаОплатаНал.Видимость = Ложь;
			Элементы.ГруппаОплатаКартой.Видимость = Ложь;
			
		ИначеЕсли Элементы.ГруппаОплатаНал.Видимость Тогда
			
			Элементы.ГруппаОплатаНал.Видимость = Ложь;
			Элементы.ГруппаОплатаКартой.Видимость = Ложь;
			ПоКомандеНал = Истина;
			
		ИначеЕсли Элементы.ГруппаОплатаКартой.Видимость Тогда
			
			Элементы.ГруппаОплатаКартой.Видимость = Ложь;
			ПоКомандеБН = Истина;
			ПриИзмененииБНОплаты = Истина;
			
		КонецЕсли;
		
	Иначе
		
		ПереходВРежимОплаты = НЕ Элементы.ГруппаОплатаНал.Видимость
			И НЕ Элементы.ГруппаОплатаКартой.Видимость И НЕ Элементы.ГруппаСуммаОплатаСертификатами.Видимость
			И НЕ Элементы.ГруппаСуммаОплатаСертификатамиНСПК.Видимость
			И НЕ Элементы.ГруппаОплатаЗачетАванса.Видимость И НЕ Элементы.ГруппаОплатаБезнал.Видимость
			И НЕ ЭтоЗаменаТоваров
			И (ПоКомандеНал ИЛИ ПоКомандеБН ИЛИ ПоКомандеОплатитьСертификатом ИЛИ ПоКомандеОплатаQRКодом
			ИЛИ ПоКомандеОплатитьСертификатомНСПК ИЛИ ПоКомандеВРассрочку ИЛИ ПоКомандеПредоплата
			ИЛИ ПоКомандеЗачетАванса ИЛИ ПоКомандеБезнал)
			ИЛИ (ПоКомандеОплатитьВсюСуммуБонусами И СуммаОплаченоБонусами > 0
				И СуммаКОплате = 0 И (СуммаОплаченоБонусами = СуммаБонусов));
		
		ВыходИзРежимаОплаты = ((ПоКомандеНал И Элементы.ГруппаОплатаНал.Видимость И НЕ Элементы.ГруппаОплатаКартой.Видимость
			И НЕ Элементы.ГруппаСуммаОплатаСертификатами.Видимость И НЕ Элементы.ГруппаСуммаОплатаСертификатамиНСПК.Видимость
			И НЕ Элементы.ГруппаОплатаЗачетАванса.Видимость И НЕ Элементы.ГруппаОплатаБезнал.Видимость)
			ИЛИ (ПоКомандеБН И Элементы.ГруппаОплатаКартой.Видимость И НЕ Элементы.ГруппаОплатаНал.Видимость
			И НЕ Элементы.ГруппаСуммаОплатаСертификатами.Видимость И НЕ Элементы.ГруппаСуммаОплатаСертификатамиНСПК.Видимость
			И НЕ Элементы.ГруппаОплатаЗачетАванса.Видимость И НЕ Элементы.ГруппаОплатаБезнал.Видимость)
			ИЛИ (ПоКомандеОтменитьОплатуСертификатом И НЕ Элементы.ГруппаОплатаНал.Видимость
			И НЕ Элементы.ГруппаОплатаКартой.Видимость)
			ИЛИ ПоКомандеОтменитьОплатуQRКодом
			ИЛИ ПоКомандеОтменитьОплатуСертификатомНСПК) И НЕ ЭтоЗаменаТоваров
			ИЛИ (ПоКомандеОплатитьВсюСуммуБонусами И СуммаКОплате > 0 И (СуммаОплаченоБонусами < СуммаКОплате));
		
		Если ПереходВРежимОплаты Тогда
			
			ПереключитьНаСледующийЧек("НаСледующий");
			УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСписокЧековПродажи, Истина);
			
		КонецЕсли;
		
		Если ВыходИзРежимаОплаты И НЕ ЭтоЗаменаТоваров Тогда
			
			ВыбраннаяОрганизация = Неопределено;
			ВыбраннаяСистемаНалогообложения = Неопределено;
			УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСписокЧековПродажи, Ложь);
			Элементы.Товары.ОтборСтрок = Неопределено;
			ПересчитатьИтогиТабличнойЧастиТовары();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПриемАванса Тогда
		РассчитатьСуммыОплатыАванса();
	КонецЕсли;
	
	СуммаОкругления = 0;
	Если Не ИспользоватьАвтоматическиеСкидки Тогда
		ОтобранныеСтроки = Объект.Товары.НайтиСтроки(ВыбраннаяОрганизацияИСНО());
		Для Каждого СтрокаКорзины Из ОтобранныеСтроки Цикл
			СуммаОкругления = СуммаОкругления + СтрокаКорзины.СуммаАвтоматическойСкидки;
		КонецЦикла;
	КонецЕсли;
	
	СуммаБезОкругления = СуммаИтого + СуммаОкругления;
	
	Если ПоКомандеНал Тогда
		
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаНал, НЕ Элементы.ГруппаОплатаНал.Видимость);
		ТекущийЭлемент = Элементы.СуммаОплаченоНал;
		
	ИначеЕсли ПоКомандеБН Тогда
		
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаКартой, НЕ Элементы.ГруппаОплатаКартой.Видимость);
		ТекущийЭлемент = Элементы.СуммаОплаченоБН;
		СуммаОплаченоБН = СуммаБезОкругления - СуммаОплаченоНал - СуммаОплаченоБезнал
			- СуммаОплаченоВРассрочку - СуммаОплаченоЗачетАванса - СуммаОплаченоСертификатами - СуммаОплаченоСертификатамиНСПК - СуммаТоваровКЗамене;
		
	ИначеЕсли ПоКомандеВРассрочку Тогда
		
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаВРассрочку, НЕ Элементы.ГруппаОплатаВРассрочку.Видимость);
		Если НЕ ЗначениеЗаполнено(Объект.ДокументРасчета) Тогда
			УстановитьДоступностьЭлементаФормы(Элементы.Предоплата, НЕ Элементы.Предоплата.Доступность);
		КонецЕсли;
		ТекущийЭлемент = Элементы.СуммаОплаченоВРассрочку;
		СуммаОплаченоВРассрочку = СуммаБезОкругления - СуммаОплаченоНал - СуммаОплаченоБН
			- СуммаОплаченоБезнал - СуммаОплаченоЗачетАванса;
		НастроитьПолеВводаСуммыВРассрочку();
		
	ИначеЕсли ПоКомандеЗачетАванса Тогда
		
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаЗачетАванса, НЕ Элементы.ГруппаОплатаЗачетАванса.Видимость);
		ТекущийЭлемент = Элементы.СуммаОплаченоЗачетАванса;
		СуммаОплаченоЗачетАванса = СуммаБезОкругления - СуммаОплаченоНал - СуммаОплаченоБН
			- СуммаОплаченоБезнал - СуммаОплаченоВРассрочку - СуммаОплаченоСертификатами;
		
	ИначеЕсли ПоКомандеБезнал Тогда
		
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаБезнал, НЕ Элементы.ГруппаОплатаБезнал.Видимость);
		ТекущийЭлемент = Элементы.СуммаОплаченоБезнал;
		СуммаОплаченоБезнал = СуммаБезОкругления - СуммаОплаченоНал - СуммаОплаченоБН
			- СуммаОплаченоЗачетАванса - СуммаОплаченоВРассрочку - СуммаОплаченоСертификатами;
		
	ИначеЕсли ПоКомандеПредоплата Тогда
		
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаВРассрочку, НЕ Элементы.ОплатаВРассрочку.Доступность);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаВРассрочку, НЕ Элементы.ГруппаОплатаВРассрочку.Видимость);
		ТекущийЭлемент = Элементы.СуммаОплаченоВРассрочку;
		СуммаОплаченоВРассрочку = СуммаБезОкругления - СуммаОплаченоНал - СуммаОплаченоБН
			- СуммаОплаченоБезнал - СуммаОплаченоЗачетАванса - СуммаОплаченоСертификатами;
		НастроитьПолеВводаСуммыВРассрочку();
		
	ИначеЕсли ПоКомандеОплатитьСертификатом Тогда
		
		СуммаИтогоОсталосьОплатить = СуммаБезОкругления - СуммаОплаченоНал - СуммаОплаченоБН - СуммаОплаченоБезнал
			- СуммаОплаченоВРассрочку - СуммаОплаченоЗачетАванса;
			
		РассчитатьСуммуОплатыСертификатами(СуммаИтогоОсталосьОплатить, СуммаБезОкругления);
		
	ИначеЕсли ПоКомандеОплатитьСертификатомНСПК Тогда
		
		УстановитьЗаголовкиОплаты();
		ПодготовитьПредварительноеОдобрениеНСПК();
		
	ИначеЕсли ПоКомандеОтменитьОплатуСертификатомНСПК Тогда
		
		ТаблицаТоваровФСС.Очистить();
		СуммаОплаченоСертификатамиНСПК = 0;
		СуммаОплаченоНал = 0;
		СуммаОплаченоБН = 0;
		ТабличныйДокументСертифиактНСПК = Неопределено;
		ПредварительноеОдобрениеНСПКПолучено = Ложь;
		
	ИначеЕсли ПоКомандеЗаменаТоваров Тогда
		
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСуммаТоваровКЗамене, НЕ Элементы.ГруппаСуммаТоваровКЗамене.Видимость);
		СуммаТоваровКЗамене = СуммаБезОкругления;
		СуммаБезОкругления = 0;
		СуммаБезСкидки = 0;
		СуммаИтого = 0;
		
	КонецЕсли;
	
	Если НЕ Элементы.ГруппаОплатаНал.Видимость Тогда
		СуммаОплаченоНал = 0;
	КонецЕсли;
	
	Если НЕ Элементы.ГруппаОплатаКартой.Видимость Тогда
		СуммаОплаченоБН = 0;
	КонецЕсли;
	
	Если НЕ Элементы.ГруппаОплатаВРассрочку.Видимость Тогда
		СуммаОплаченоВРассрочку = 0;
	КонецЕсли;
	
	Если НЕ Элементы.ГруппаОплатаЗачетАванса.Видимость Тогда
		СуммаОплаченоЗачетАванса = 0;
	КонецЕсли;
	
	Если НЕ Элементы.ГруппаОплатаБезнал.Видимость Тогда
		СуммаОплаченоБезнал = 0;
	КонецЕсли;
	
	Если НЕ Элементы.ГруппаСуммаТоваровКЗамене.Видимость Тогда
		СуммаТоваровКЗамене = 0;
	КонецЕсли;
	
	НетПробитыхЧеков = ПробитыеЧеки.Количество() = 0;
	
	ДоступностьЭлементов = (НЕ Элементы.ГруппаОплатаНал.Видимость И НЕ Элементы.ГруппаОплатаКартой.Видимость
								И НЕ Элементы.ГруппаОплатаВРассрочку.Видимость И НЕ Элементы.ГруппаСуммаОплатаСертификатами.Видимость
								И НЕ Элементы.ГруппаСуммаОплатаСертификатамиНСПК.Видимость
								И НЕ ПоКомандеОплатитьСертификатом
								И НЕ ПоКомандеОплатаQRКодом)
							ИЛИ ПоКомандеОтменитьОплатуQRКодом
							ИЛИ ПоКомандеОтменитьОплатуСертификатомНСПК
							ИЛИ ПоКомандеЗаменаТоваров
							ИЛИ ПоКомандеОтменитьОплатуСертификатом;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, ДоступностьЭлементов);
	УстановитьДоступностьЭлементаФормы(Элементы.СменитьКассира, ДоступностьЭлементов);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОплатаБонусами, ДоступностьЭлементов И НетПробитыхЧеков);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, ДоступностьЭлементов И НетПробитыхЧеков);
	УстановитьДоступностьЭлементаФормы(Элементы.РассчитатьСкидки, ДоступностьЭлементов);
	УстановитьДоступностьЭлементаФормы(Элементы.ОтменаРасчетаСкидок, ДоступностьЭлементов И СкидкиРассчитаны);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатитьБонусами, КоличествоБонусов > 0 И ДоступностьЭлементов
		И НетПробитыхЧеков);
	
	Если НетПробитыхЧеков Тогда
		НастроитьЭлементыФормы(Элементы.Страницы.ТекущаяСтраница, Истина);
	Иначе
		
		Для Каждого ЭлементГруппы Из Элементы.ГруппаОперации.ПодчиненныеЭлементы Цикл
			
			Если НЕ ЭлементГруппы = Элементы.УдалитьЧек И НЕ ЭлементГруппы = Элементы.ОтложитьЧек Тогда
				УстановитьДоступностьЭлементаФормы(ЭлементГруппы, Ложь);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПриИзмененииСуммыОплатыСертификатом Тогда
		
		СуммаИтогоОсталосьОплатить = СуммаБезОкругления - СуммаОплаченоНал - СуммаОплаченоБН - СуммаОплаченоБезнал
			- СуммаОплаченоВРассрочку - СуммаОплаченоЗачетАванса - СуммаТоваровКЗамене;
			
		РассчитатьСуммуОплатыСертификатами(СуммаИтогоОсталосьОплатить, СуммаБезОкругления);
		
	КонецЕсли;
	
	Если ПриИзмененииБНОплаты Тогда
		
		СуммаОплаченоБН = Мин(СуммаБезОкругления, СуммаОплаченоБН);
		СуммаОплаченоБН = Макс(0, СуммаОплаченоБН);
		
		Если ЗначениеЗаполнено(ЧекККМПродажа) И НЕ ЭтоОперацияПродажи Тогда
			
			СуммаБНОплатыПоЭквайрингуВЧекеПродажи = СуммаБНОплатыСПодключеннымЭквайрингом(ЧекККМПродажа);
			
			Если СуммаБНОплатыПоЭквайрингуВЧекеПродажи > 0 И НЕ ЕстьОплатаВстречнымПредоставлением И НЕ ЭтоЗаменаТоваров Тогда
				СуммаОплаченоБН = Мин(СуммаОплаченоБН, СуммаБНОплатыПоЭквайрингуВЧекеПродажи);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПоКомандеНал И Элементы.ГруппаОплатаНал.Видимость Тогда
		СуммаОплаченоНал = СуммаИтого - СуммаОплаченоБН - СуммаОплаченоБезнал
		- СуммаОплаченоВРассрочку - СуммаОплаченоСертификатамиНСПК - СуммаТоваровКЗамене;
	КонецЕсли;
	
	СуммаОплаченоНал = Макс(0, СуммаОплаченоНал);
	
	Если ПоКомандеВРассрочку И Элементы.ГруппаОплатаВРассрочку.Видимость Тогда
		СуммаОплаченоВРассрочку = СуммаИтого - СуммаОплаченоБН - СуммаОплаченоБезнал
			- СуммаОплаченоНал - СуммаОплаченоЗачетАванса - СуммаОплаченоСертификатами
			- СуммаОплаченоСертификатамиНСПК - СуммаТоваровКЗамене;
	КонецЕсли;
	
	Если ПоКомандеЗачетАванса И Элементы.ГруппаОплатаЗачетАванса.Видимость Тогда
		СуммаОплаченоЗачетАванса = СуммаИтого - СуммаОплаченоБН - СуммаОплаченоБезнал
			- СуммаОплаченоНал - СуммаОплаченоВРассрочку - СуммаОплаченоСертификатами
			- СуммаОплаченоСертификатамиНСПК - СуммаТоваровКЗамене;
	КонецЕсли;
	
	Если ПоКомандеБезнал И Элементы.ГруппаОплатаБезнал.Видимость Тогда
		СуммаОплаченоБезнал = СуммаИтого - СуммаОплаченоБН - СуммаОплаченоНал
			- СуммаОплаченоЗачетАванса - СуммаОплаченоВРассрочку - СуммаОплаченоСертификатами
			- СуммаОплаченоСертификатамиНСПК - СуммаТоваровКЗамене;
	КонецЕсли;
	
	ЭтоОперацияПродажи = ОбщегоНазначенияРМККлиентПереопределяемый.ВидОперацииПродажа(Объект.ВидОперации);
	
	Если ЭтоОперацияПродажи И Не ИспользоватьАвтоматическиеСкидки Тогда
		
		Если ОкруглятьПриПроизвольномВидеОплаты Тогда
			ОкруглитьСуммуЧекаВПользуПокупателя();
		Иначе
			
			Если СуммаОплаченоБН = 0 И СуммаОплаченоСертификатами = 0 И НЕ СуммаОплаченоНал = 0 Тогда
				ОкруглитьСуммуЧекаВПользуПокупателя();
			Иначе
				ОтменитьОкругление(Ложь);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПоКомандеНал И Элементы.ГруппаОплатаНал.Видимость Тогда
		СуммаОплаченоНал = СуммаИтого - СуммаОплаченоБН - СуммаОплаченоБезнал
			- СуммаОплаченоВРассрочку - СуммаОплаченоЗачетАванса - СуммаОплаченоСертификатами
			- СуммаОплаченоСертификатамиНСПК - СуммаТоваровКЗамене;
	КонецЕсли;
	СуммаОплаченоНал = Макс(0, СуммаОплаченоНал);
	
	Если Элементы.Предоплата.Доступность И НЕ Элементы.ОплатаВРассрочку.Доступность Тогда
		СуммаОплаченоВРассрочку = СуммаИтого - СуммаОплаченоНал - СуммаОплаченоБН
			- СуммаОплаченоБезнал - СуммаОплаченоЗачетАванса - СуммаОплаченоСертификатамиНСПК - СуммаТоваровКЗамене;
	КонецЕсли;
	
	ПроинформироватьПользователяОКоличествеЧеков();
	РассчитатьСуммыОплаты();
	НастроитьДоступностьПробитьЧек();
	ЗаполнитьТаблицуОплат();
	ВывестиИнформациюНаДисплейПокупателяОВнесеннойСуммеОплаты();
	ОтобразитьКнопкиОрганизацийИСНО();
	
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСертификатом, СуммаКОплате > 0);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаДобавитьСертификат, СуммаКОплате > 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПревышениеСуммыЗачетаАванса()
	
	ИспользуютсяДокументыРасчета = Элементы.ДокументРасчета.Видимость;
	
	Если ИспользуютсяДокументыРасчета И СуммаОплаченоЗачетАванса > СуммаОстаткаДокументаРасчета Тогда
		СуммаОплаченоЗачетАванса = СуммаОстаткаДокументаРасчета;
	КонецЕсли;
	
	Если СуммаОплаченоЗачетАванса <> СуммаИтого И НЕ СуммаИтого = 0 Тогда
		СуммаОплаченоЗачетАванса = СуммаИтого;
	КонецЕсли;
	
	Если ИспользуютсяДокументыРасчета И СуммаИтого >= СуммаОстаткаДокументаРасчета Тогда
		СуммаОплаченоЗачетАванса = СуммаОстаткаДокументаРасчета;
	КонецЕсли;
	
	Если ЭтоОплатаРассрочки Тогда
		СуммаОплаченоЗачетАванса = СуммаИтого - СуммаОстаткаДокументаРасчета;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаЗачетАвансаКлиент()
	
	ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
	ПараметрыПересчета.ПоКомандеЗачетАванса = Истина;
	
	РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
	ПроверитьПревышениеСуммыЗачетаАванса();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗачестьОплатуБезналом()
	ПерерасчитатьСуммыОплаты();
КонецПроцедуры

#КонецОбласти

#Область ФормированиеОтчетаБезГашения

&НаКлиенте
Процедура СнятьОтчетБезГашенияКлиент()

	Если Объект.Товары.Количество() > 0 Тогда
		
		ТекстПредупреждения =
			НСтр("ru='Перед снятием отчета без гашения необходимо пробить, удалить или отложить текущий чек.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
			
	КонецЕсли;
	
	Если ТаблицаКассККМОрганизаций.Количество() > 1 И ТекущаяОперация = НСтр("ru=''") Тогда
		
		ТекущаяОперация = НСтр("ru='ОтчетБезГашения'");
		ПереключитьНаСтраницуВыбораКассыККМ();
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СнятиеОтчетаБезГашенияЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Уверены, что хотите снять отчет без гашения (X - отчет)?'");
	ЗаголовокВопроса = НСтр("ru='Отчет без гашения'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,, ЗаголовокВопроса);

КонецПроцедуры

&НаКлиенте
Процедура СнятиеОтчетаБезГашенияЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПроизвестиСнятиеОтчетаБезГашения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвестиСнятиеОтчетаБезГашения()

	ОповещениеОФормированияОтчетаБезГашения = Новый ОписаниеОповещения("ЗавершитьФормированиеОтчетаБезГашения",
		ЭтотОбъект);
		
	ПараметрыОперации = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОткрытияЗакрытияСмены();
	ЗаполнитьПараметрыКассираДляПечати(ПараметрыОперации, Объект.ПользовательБД, Объект.Кассир);
	
	Доступность = Ложь;
	ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьФормированиеОтчетаБезГашения(
		ОповещениеОФормированияОтчетаБезГашения,
		УникальныйИдентификатор,
		ПодключаемоеОборудование,
		ПараметрыОперации);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьФормированиеОтчетаБезГашения(Результат, Параметры) Экспорт
	
	Доступность = Истина;
	
	Если ЕстьСвойство(Результат, "Результат") И НЕ Результат.Результат Тогда
		
		ТекстОшибки = НСтр("ru = 'При снятии отчета на фискальном регистраторе произошла ошибка.
		|%1
		|Отчет на фискальном регистраторе не сформирован.'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, Результат.ОписаниеОшибки);
		
		ЗаголовокОшибки = НСтр("ru = 'Ошибка печати отчета без гашения'");
		
		ПоказатьПредупреждение(, ТекстОшибки,, ЗаголовокОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаверешениеФормированияОтчетаБезГашения(Результат, Параметры) Экспорт
	
	Доступность = Истина;
	
	Если ЕстьСвойство(Результат, "Результат") И НЕ Результат.Результат Тогда
		
		ТекстОшибки = НСтр("ru = 'При снятии отчета на фискальном регистраторе произошла ошибка.
		|%1
		|Отчет на фискальном регистраторе не сформирован.'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, Результат.ОписаниеОшибки);
		
		ЗаголовокОшибки = НСтр("ru = 'Ошибка печати отчета без гашения'");
		
		ПоказатьПредупреждение(, ТекстОшибки,, ЗаголовокОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

&НаКлиенте
Процедура ПодготовитьДанныеЧековДляФискализации(ИсходныеДанные)
	
	ОповещениеПриЗавершении = ИсходныеДанные.ОповещениеОЗавершении;
	ИдентификаторУстройстваФР = ИсходныеДанные.ИдентификаторУстройстваФР;
	БумажныйЧек = ИсходныеДанные.БумажныйЧек;
	
	Доступность = Ложь;
	
	ДополнительныеДанные = ДополнительныеДанныеДляФискализации(БумажныйЧек);
	
	Если НЕ ЭтоЧекКоррекции Тогда
		
		ПробитыеЧекиПоСНО = ПробитыеЧеки.НайтиСтроки(ВыбраннаяОрганизацияИСНО());
		
		Если ПробитыеЧекиПоСНО.Количество() = 0 И ОжидаемоеКоличествоЧеков > 0 Тогда
			
			Контекст = Новый Структура();
			ФискализироватьЧек(Контекст, ДополнительныеДанные, ОповещениеПриЗавершении, ВыбраннаяСистемаНалогообложения);
			
		КонецЕсли;
		
	Иначе
		
		ОтборПоВидуОперации = Новый Структура("Возврат", Истина);
		ПробитыеЧекиПоВидуОперации = ПробитыеЧеки.НайтиСтроки(ОтборПоВидуОперации);
		
		Если ПробитыеЧекиПоВидуОперации.Количество() = 0 И ОжидаемоеКоличествоЧеков > 0 Тогда
			
			СистемаНалогообложения = СистемаНалогообложенияЧека(ЧекККМПродажа);
			Объект.ВидОперации = ОбщегоНазначенияРМККлиентПереопределяемый.ВидОперацииЧекаККМ(Истина);
			Контекст = Новый Структура();
			ФискализироватьЧек(Контекст, ДополнительныеДанные, ОповещениеПриЗавершении, СистемаНалогообложения);
			
			Если ДополнительныеДанные.Отказ Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекКоррекцииПродажи()
	
	Доступность = Ложь;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ПробитьЧекНаКлиентеЗавершение", ЭтотОбъект);
	ДополнительныеДанные = ДополнительныеДанныеДляФискализации();
	
	ОтборПоВидуОперации = Новый Структура("Возврат", Ложь);
	ПробитыеЧекиПоВидуОперации = ПробитыеЧеки.НайтиСтроки(ОтборПоВидуОперации);
	
	Если ПробитыеЧекиПоВидуОперации.Количество() = 0 И ОжидаемоеКоличествоЧеков > 0 Тогда
		
		Объект.ВидОперации = ОбщегоНазначенияРМККлиентПереопределяемый.ВидОперацииЧекаККМ();
		СтавкаБезНДС = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.СтавкиНДС.БезНДС");
		Корзина = Объект.Товары;
		ЭтоОбщаяСНО = СистемаНалогообложенияЧекаКоррекции = 
		ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ТипыСистемНалогообложенияККТ.ОСН");
		
		Для Каждого СтрокаКорзины Из Корзина Цикл
			
			СтрокаКорзины.СистемаНалогообложения = СистемаНалогообложенияЧекаКоррекции;
			
			Если НЕ ЭтоОбщаяСНО Тогда
				
				СтрокаКорзины.СтавкаНДС = СтавкаБезНДС;
				СтрокаКорзины.СуммаНДС = 0;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Контекст = Новый Структура();
		ФискализироватьЧек(Контекст, ДополнительныеДанные, ОповещениеПриЗавершении,
		СистемаНалогообложенияЧекаКоррекции);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекЗаменыТоваровПродажи()
	
	Доступность = Ложь;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ПробитьЧекНаКлиентеЗавершение", ЭтотОбъект);
	ДополнительныеДанные = ДополнительныеДанныеДляФискализации();
	
	ОтборПоВидуОперации = Новый Структура("Возврат", Ложь);
	ПробитыеЧекиПоВидуОперации = ПробитыеЧеки.НайтиСтроки(ОтборПоВидуОперации);
	
	Если ПробитыеЧекиПоВидуОперации.Количество() = 0 И ОжидаемоеКоличествоЧеков > 0 Тогда
		
		Объект.ВидОперации = ОбщегоНазначенияРМККлиентПереопределяемый.ВидОперацииЧекаККМ(Ложь, Ложь);
		СтруктураОтбора = Новый Структура("ТоварКЗамене", Истина);
		ТоварыКЗамене = Объект.Товары.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого ТоварКЗамене Из ТоварыКЗамене Цикл
			Объект.Товары.Удалить(ТоварКЗамене);
		КонецЦикла;
		
		Контекст = Новый Структура();
		ФискализироватьЧек(Контекст, ДополнительныеДанные, ОповещениеПриЗавершении,
			ВыбраннаяСистемаНалогообложения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПечатьНефискальныхДокументов

&НаКлиенте
Процедура РаспечататьТоварныйЧекКлиент()
	
	КассыККМИОрганизации = ПодключенныеКассыККМИОрганизации();
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("МассивКассККМ", КассыККМИОрганизации.МассивКассККМ);
	ПараметрыОткрытия.Вставить("МассивОрганизаций", КассыККМИОрганизации.МассивОрганизаций);
	ПараметрыОткрытия.Вставить("ТорговыйОбъект", Объект.ТорговыйОбъект);
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru='Выбор чека для печати товарного чека'"));
	ПараметрыОткрытия.Вставить("РежимПечатиЧека", "ПечатьТоварногоЧека");
	
	ОбработчикОповещенияОткрытияФормыВыбора = Новый ОписаниеОповещения(
		"ОповещениеОткрытьФормуВыбораЧекаПриПечатиПробитогоЧека", ЭтотОбъект);
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	
	ОткрытьФорму("Обработка.РабочееМестоКассира.Форма.ФормаВыбораЧека",
		ПараметрыОткрытия, ЭтотОбъект,,,, ОбработчикОповещенияОткрытияФормыВыбора, Режим)
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьТоварныйЧекПоФискальномуЧеку(ЧекККМ)
	
	Если ЗначениеЗаполнено(ПринтерЧеков) И ЗначениеЗаполнено(ЧекККМ) Тогда
		
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ЗавершитьПовторнуюПечатьФискальногоЧека", ЭтотОбъект);
		МассивДокументов = Новый Массив;
		МассивДокументов.Добавить(ЧекККМ);
		ТекстЧека = ПодготовитьТекстТоварногоЧека(МассивДокументов);
		
		ПараметрыОперации = Новый Структура();
		ПараметрыОперации.Вставить("СтрокиТекста", ТекстЧека);
		ОборудованиеЧекопечатающиеУстройстваКлиент.
			НачатьПечатьТекста(ОповещениеПриЗавершении, УникальныйИдентификатор, ПринтерЧеков, ПараметрыОперации);
		
	Иначе
		
		ТекстЗаголовка = НСтр("ru = 'Ошибка печати товарного чека'");
		ТекстСообщения = НСтр("ru = 'Не удалось распечатать товарный чек на принтере чеков.'");
		ПоказатьПредупреждение(, ТекстСообщения,, ТекстЗаголовка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодготовитьТекстТоварногоЧека(ЧекиККМ)

	Результат = НСтр("ru = ''");
	
	Если ТипЗнч(ЧекиККМ) = Тип("Массив") И ЧекиККМ.Количество() > 0 Тогда
		Результат = ОбщегоНазначенияРМКПереопределяемый.СтрокаПечатиНаФР(ЧекиККМ);
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура НастроитьСтраницыВыбораПродавца(ТекущаяСтрока)
	
	УказанОтветственныйЗаПродажу = ЗначениеЗаполнено(ТекущаяСтрока.Продавец);
	
	Если УказанОтветственныйЗаПродажу Тогда
		
		АктивнаяСтраница = Элементы.СтраницаПродавецВыбран;
		ТекущийПродавец = СтрШаблон("%1 %2", НСтр("ru = 'Продавец:'"), ТекущаяСтрока.Продавец);
		
	Иначе
		
		АктивнаяСтраница = Элементы.СтраницаДобавлениеПродавца;
		ТекущийПродавец = "";
		
	КонецЕсли;
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(АктивнаяСтраница);
	УстановитьВидимостьЭлементаФормы(Элементы.СтраницаПродавецВыбран, УказанОтветственныйЗаПродажу);
	УстановитьВидимостьЭлементаФормы(Элементы.СтраницаДобавлениеПродавца, НЕ УказанОтветственныйЗаПродажу);

КонецПроцедуры

&НаКлиенте
Процедура ВыборПродавцаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЕстьСвойство(Результат, "Продавец") И ЗначениеЗаполнено(Результат.Продавец) Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Продавец = Результат.Продавец;
		Если ТекущиеДанные.ЭтоНабор Тогда
			НомерНабора = ТекущиеДанные.НомерНабора;
			ЗаполнитьПродавцаВНаборе(Продавец, НомерНабора);
		Иначе
			ТекущиеДанные.Продавец = Продавец;
		КонецЕсли;
		
		УстановитьВидимостьЭлементаФормы(Элементы.СтраницаПродавецВыбран, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.СтраницаДобавлениеПродавца, Ложь);
		ТекущийПродавец = СтрШаблон("%1 %2", НСтр("ru = 'Продавец:'"), Результат.Продавец);
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПродавецВыбран);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПродавцаВНаборе(Продавец, НомерНабора)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НомерНабора", НомерНабора);
	МассивТоваров = Объект.Товары.НайтиСтроки(СтруктураПоиска);
	Если МассивТоваров.Количество() > 0 Тогда
		Для Каждого СтрокаМассива Из МассивТоваров Цикл
			СтрокаМассива.Продавец = Продавец;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуОплат()
	ОбщегоНазначенияРМККлиентПереопределяемый.ЗаполнитьТаблицуОплат(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммыОплаты()
	
	СуммаИтого = СуммаБезСкидки - СуммаСкидки - СуммаБонусов;
	СуммаКОплатеВсего = СуммаИтого - СуммаОплаченоНал - СуммаОплаченоБН
		- СуммаОплаченоБезнал - СуммаОплаченоВРассрочку - СуммаОплаченоЗачетАванса - СуммаОплаченоСертификатами
		- СуммаОплаченоQRКодом - СуммаОплаченоСертификатамиНСПК - СуммаТоваровКЗамене;
	
	СуммаКОплате = СуммаКОплатеВсего;
	Сдача = ?(СуммаОплаченоНал = 0, 0, ?(СуммаКОплатеВсего >0, 0, -1 * СуммаКОплатеВсего));
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаголовок(ТекстЗаголовка = "")
	ОбщегоНазначенияРМККлиентПереопределяемый.СформироватьЗаголовокПрограммы(ТекстЗаголовка, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ВыборЧекаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВыбратьПользователяДоЗаменыПрав();
	
	Если Результат = Неопределено Тогда
		
		Если НачинатьНовыйЧекВРежимеСкупка Тогда
			
			Элементы.ДекорацияПустойЧекПродажа.Картинка = БиблиотекаКартинок.РМКЗаставкаСкупка;
			Элементы.ДекорацияТекстПустойСтраницы.Заголовок =
				НСтр("ru='Начните скупку, добавив товар сканером, из избранного или каталога'");
			Объект.ВидОперации = ОбщегоНазначенияРМККлиентПереопределяемый.ВидОперацииЧекаККМ(, Истина);
			СформироватьЗаголовок(НСтр("ru='Скупка'"));
			
		Иначе
			
			Элементы.ДекорацияПустойЧекПродажа.Картинка = БиблиотекаКартинок.РМКЗаставкаПродажа;
			Элементы.ДекорацияТекстПустойСтраницы.Заголовок = 
				НСтр("ru='Начните продажу, добавив товар сканером, из избранного или каталога'");
			Объект.ВидОперации = ОбщегоНазначенияРМККлиентПереопределяемый.ВидОперацииЧекаККМ();
			СформироватьЗаголовок(НСтр("ru='Продажа'"));
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	ЭтоВозвратПродажи = ОбщегоНазначенияРМККлиентПереопределяемый.ВидОперацииВозвратПродажи(Объект.ВидОперации);
	ЭтоВозвратСкупки = ОбщегоНазначенияРМККлиентПереопределяемый.ВидОперацииВозвратСкупки(Объект.ВидОперации);
	
	Если ЕстьСвойство(Результат, "ЧекККМ") Тогда
		
		ЗаполнитьНаОснованииЧекаККМ(Результат.ЧекККМ);
		ИзменитьКартинкуВводПокупателя();
		УстановитьАктивностьСтроки();
		ПересчитатьИтогиТабличнойЧастиТовары(Ложь);
		НастроитьЭлементыФормы(Элементы.СтраницаОбщая, Истина);
		Если ЭтоВозвратПродажи Тогда
			НастроитьЭлементыВРежимеВозврат();
		ИначеЕсли ЭтоВозвратСкупки Тогда
			НастроитьЭлементыВРежимеВозвратСкупки();
		КонецЕсли;
		РассчитатьСуммыОплаты();
		НастроитьДоступностьПробитьЧек();
		
	Иначе
		
		Если ЭтоВозвратПродажи Тогда
			НастроитьФормуВРежимВозвратБезЧека();
		ИначеЕсли ЭтоВозвратСкупки Тогда
			НастроитьФормуВРежимВозвратСкупкиБезЧека();
		КонецЕсли;
		
	КонецЕсли;
	
	СформироватьЗаголовок();
	ТекущаяОперация = НСтр("ru = ''");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаОснованииЧекаККМ(ЧекПродажи)
	
	ВыбраннаяСистемаНалогообложения = ОбщегоНазначенияРМКПереопределяемый.СистемаНалогообложенияЧека(ЧекПродажи);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЧекПродажи, "Организация") Тогда
		ВыбраннаяОрганизация = ЧекПродажи.Организация;
	Иначе
		ВыбраннаяОрганизация = ОсновнаяОрганизация;
	КонецЕсли;
	
	Отбор = Новый Структура("Организация", ВыбраннаяОрганизация);
	СтрокаКассы = ТаблицаКассККМОрганизаций.НайтиСтроки(Отбор)[0];
	
	ПодключаемоеОборудование = СтрокаКассы.ИдентификаторУстройства;
	Объект.Организация = СтрокаКассы.Организация;
	Объект.КассаККМ = СтрокаКассы.КассаККМ;
	КассоваяСмена = СтрокаКассы.КассоваяСмена;
	ККМПоддерживаетПроверкуКодовМаркировки = СтрокаКассы.ПоддерживаетПроверкуКодовМаркировки;
	
	Если ЭтоЧекКоррекции тогда
		
		СистемаНалогообложенияЧекаКоррекции = ОбщегоНазначенияРМКПереопределяемый.СистемаНалогообложенияЧека(ЧекПродажи);
		СНОКассы = СистемыНалогообложенияДоступныеВКассеККМ(ПодключаемоеОборудование);
		СписокВыборкаСНО = Элементы.СистемаНалогообложенияЧекаКоррекции.СписокВыбора;
		СписокВыборкаСНО.Очистить();
		СписокВыборкаСНО.ЗагрузитьЗначения(СНОКассы);
		ОднаСНО = СНОКассы.Количество() = 1;
		УстановитьВидимостьЭлементаФормы(Элементы.СистемаНалогообложенияЧекаКоррекции, НЕ ОднаСНО);
		ЭтоОбщаяСНО = СистемаНалогообложенияЧекаКоррекции = ОбщегоНазначения.ПредопределенныйЭлемент(
			"Перечисление.ТипыСистемНалогообложенияККТ.ОСН");
		УстановитьВидимостьЭлементаФормы(Элементы.ТоварыСтавкаНДС, ЭтоОбщаяСНО);
		УстановитьВидимостьЭлементаФормы(Элементы.ТоварыСтавкаНДСПереключатель, ЭтоОбщаяСНО);
		
	КонецЕсли;
	
	ЗаполнитьДанныеНаОснованииЧекаККМ(ЧекПродажи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьИтогиТабличнойЧастиТовары(ОбнулитьСуммыОплат = Истина)
	
	СуммаБезСкидки = 0;
	СуммаСкидки = 0;
	СуммаБонусов = 0;
	
	Если ЗначениеЗаполнено(ВыбраннаяОрганизация) И НЕ ЭтоЗаменаТоваров Тогда
		
		СтруктураОрганизацияИСНО = ВыбраннаяОрганизацияИСНО();
		СтрокиТоваров = Объект.Товары.НайтиСтроки(СтруктураОрганизацияИСНО);
		
	Иначе
		СтрокиТоваров = Объект.Товары;
	КонецЕсли;
	
	Для Каждого СтрокаТовары Из СтрокиТоваров Цикл
		
		Если СтрокаТовары.ТоварКЗамене Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаБезСкидки = СуммаБезСкидки + СтрокаТовары.СуммаБезСкидки;
		СуммаСкидки = СуммаСкидки +
			СтрокаТовары.СуммаАвтоматическойСкидки +
			СтрокаТовары.СуммаСкидкиНаценки;
			
		СуммаБонусов = СуммаБонусов + СтрокаТовары.СуммаСкидкиОплатыБонусом;
		
		СтрокаТовары.СуммаСкидокОбщая = СтрокаТовары.СуммаСкидкиНаценки
			+ СтрокаТовары.СуммаАвтоматическойСкидки
			+ СтрокаТовары.СуммаСкидкиОплатыБонусом;
		
	КонецЦикла;
	
	СуммаКОплате = СуммаБезСкидки - СуммаСкидки - СуммаБонусов;
	
	СуммаИтого = СуммаКОплате;
	
	Если ОбнулитьСуммыОплат Тогда
		
		СуммаОплаченоНал = 0;
		СуммаОплаченоБН = 0;
		СуммаОплаченоБезнал = 0;
		СуммаОплаченоВРассрочку = 0;
		СуммаОплаченоQRКодом = 0;
		СуммаОплаченоСертификатамиНСПК = 0;
		
	КонецЕсли;
	
	ПроверитьПревышениеСуммыЗачетаАванса();
	НастроитьДоступностьПробитьЧек();
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчетКоличестваТовара(ТекущаяСтрока)
	
	ТекущаяСтрока.Количество = ТекущийТоварКоличество;
	ТекущаяСтрока.КоличествоУпаковок = ТекущийТоварКоличество;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(ИдентификаторСтроки = Неопределено)
	
	ТекущаяСтрока = ?((ИдентификаторСтроки <> Неопределено),
		Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки),
		Элементы.Товары.ТекущиеДанные);
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийТоварЦенаИзКарточки = ТекущаяСтрока.Цена;
	
	ПересчитатьСуммы(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДанныеПриИзмененииКоличества(УвеличитьКоличество = Ложь)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("УвеличитьКоличество", УвеличитьКоличество);
	
	Если СкидкиРассчитаны Тогда 
		ЗадатьВопросПоРасчетуСкидок("ПересчитатьДанныеПриИзмененииКоличестваЗавершение", ДополнительныеПараметры);
	Иначе 
		ПересчитатьДанныеПриИзмененииКоличестваЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОтложитьЧекЗавершение(Результат) Экспорт 
	
	Если НЕ ЗначениеЗаполнено(ОтложенныйЧек) Тогда
		Возврат;
	КонецЕсли;
	
	ПродолжитьЧекКлиент();
	
КонецПроцедуры

&НаКлиенте
Функция ПримененыСкидки()

	Возврат СкидкиРассчитаны ИЛИ
		(Элементы.Товары.ТекущиеДанные <> Неопределено И Элементы.Товары.ТекущиеДанные.РассчитанаСкидка);

КонецФункции

&НаСервере
Процедура ПродолжитьЧек()
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьДанныеИзОтложенногоЧека(ЭтотОбъект, ОтложенныйЧек);
	ДополнитьСведенияОНоменклатуре();
	
	ОтложенныйЧекОбъект = ОтложенныйЧек.ПолучитьОбъект();
	ДокументЗаблокирован = Истина;
	
	Попытка
		ОтложенныйЧекОбъект.Заблокировать();
	Исключение
		
		ДокументЗаблокирован = Ложь;
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка блокировки документа.'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,,
			ОтложенныйЧекОбъект,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
	КонецПопытки;
	
	Если ДокументЗаблокирован Тогда
		
		ОбщегоНазначенияРМКПереопределяемый.УстановитьСтатусЧека(ОтложенныйЧекОбъект);
		ОтложенныйЧекОбъект.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьСведенияОНоменклатуре()
	ОбщегоНазначенияРМКПереопределяемый.ДополнитьСведенияОТоварах(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОтложитьЧекСервер()
	
	ЧекСоздан = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.СоздатьОтложенныйЧек(ЭтотОбъект, ЧекСоздан);
	
	Если ЧекСоздан Тогда
		СоздатьНовыйНабор();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьНовыйНабор()
	
	Элементы.ГруппаИнфо.ЦветФона = Новый Цвет(229, 247, 238);
	
	Объект.ВидОперации = ОбщегоНазначенияРМКПереопределяемый.ВидОперацииЧекаККМ();;
	Объект.Контрагент = ОбщегоНазначенияРМКПереопределяемый.ПустаяСсылкаНаКонтрагента();
	Объект.СуммаДокумента = 0;
	Объект.ОперацияСДенежнымиСредствами = Ложь;
	Объект.ДокументРасчета = Неопределено;
	Объект.ЗаказПокупателя = Неопределено;
	
	Объект.Товары.Очистить();
	Объект.Оплата.Очистить();
	
	ТекущийТоварИдентификатор = 0;
	ТекущийТоварКоличество = 0;
	ТекущийТоварСкидка = 0;
	ТекущийТоварСуммаСкидки = 0;
	ТекущийТоварЦенаИзКарточки = 0;
	
	Сдача = 0;
	СуммаБезСкидки = 0;
	СуммаИтого = 0;
	СуммаОплаченоБН = 0;
	СуммаОплаченоНал = 0;
	СуммаОплаченоВРассрочку = 0;
	СуммаОплаченоЗачетАванса = 0;
	СуммаОплаченоСертификатами = 0;
	СуммаОстаткаСертификатов = 0;
	СуммаСертификата = 0;
	СуммаОплаченоСертификатамиНСПК = 0;
	СуммаТоваровКЗамене = 0;
	ПредварительноеОдобрениеНСПКПолучено = Ложь;
	
	СуммаОплаченоБезнал = 0;
	СуммаОплаченоБонусами = 0;
	СуммаСкидки = 0;
	СуммаБонусов = 0;
	
	#Область ОплатаQRКодом_ОбнулениеПараметров
	Объект.Оплачивается = Ложь;
	СуммаОплаченоQRКодом 						= 0;
	ДокументОплаты 		 						= Неопределено;
	ДокументВозврата 	 						= Неопределено;
	ПлатежнаяСистема_ИдентификаторПС			= "";
	ПлатежнаяСистема_ВидОплаты  				= Неопределено;
	ПлатежнаяСистема_БанкКлиента    			= "";
	ПлатежнаяСистема_ВозможенВозврат    		= Ложь;
	ПлатежнаяСистема_ИдентификаторОплаты		= "";
	ПлатежнаяСистема_ОжидаемоеКоличествоЧеков   = 0;
	#КонецОбласти
	
	СуммаОстаткаДокументаРасчета = 0;
	ЭтоАванс = Ложь;
	ЭтоВозвратАванса = Ложь;
	ЭтоЗачетАванса = Ложь;
	ЭтоОплатаРассрочки = Ложь;
	СкидкиРассчитаны = Ложь;
	ЭтоЗаменаТоваров = Ложь;

	ЭтоЧекКоррекции = Ложь;
	СуммаКОплате = 0;
	
	НомерСертификата = "";
	ПодарочныйСертификат = Неопределено;
	СостояниеПодтвержденияВозраста = "";
	ИдентификаторТекущейСессииПроверкиМарок = "";
	ДанныеДобавляемогоТовара = Неопределено;
	
	ВыбраннаяОрганизация = Неопределено;
	ВыбраннаяСистемаНалогообложения = Неопределено;
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСписокЧековПродажи, Ложь);
	Элементы.Товары.ОтборСтрок = Неопределено;
	
	Элементы.ТекущийТоварСерияПартия.Заголовок = НСтр("ru = ''");
	Элементы.УказатьСерии.Картинка = Новый Картинка();
	
	Для Каждого ЭлементГруппы из Элементы.ГруппаОперации.ПодчиненныеЭлементы Цикл
		УстановитьДоступностьЭлементаФормы(ЭлементГруппы, Истина);
	КонецЦикла;
	
	ЭквайринговыйТерминалВыполненияОперации = Неопределено;
	
	УстановитьВидимостьЭлементаФормы(Элементы.ТоварыСтавкаНДС, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ТоварыСтавкаНДСПереключатель, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.СистемаНалогообложенияЧекаКоррекции, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ОтложитьЧек, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.ОтложенныеЧеки, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаQRCode, НЕ ИспользоватьОплатуПлатежнымиСистемами);
	УстановитьВидимостьЭлементаФормы(Элементы.ОтменитьИзмененияЧека, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВыборВидаОплаты, Истина);
	
	УстановитьВидимостьЭлементаФормы(Элементы.УказатьСерии, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ТекущийТоварСерияПартия, Ложь);
	
	РазрешеноИзменятьЦену = НЕ (СписокРолейПользователя.НайтиПоЗначению("ПравоИзменятьЦенуРМК") = Неопределено);
	УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварЦенаИзКарточки, РазрешеноИзменятьЦену);
	
	#Область ОплатаQRКодом_ОбнулениеПараметров
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСБП, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСВИП, Истина);
	#КонецОбласти
	
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСертификатомНСПК, ИспользоватьОплатуСертификатамиНСПК);
	УстановитьДоступностьЭлементаФормы(Элементы.ПроверитьСертификатНСПК, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.ОплатаСертификатомНСПК, ИспользоватьОплатуСертификатамиНСПК);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаПроверитьСертификатНСПК, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ПробитьЧекНСПК, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ПробитьЧек, Истина);
	
	УстановитьВидимостьЭлементаФормы(Элементы.ЗаменаТоваров, Ложь);
	
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаКартой, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаКоманднаяПанельКарта, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаНаличными, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаВРассрочку, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.Предоплата, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСертификатом, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ЗачетАванса, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.Безнал, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОплатаКартой, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОплатаБезнал, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОплатаНал, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОплатаБонусами, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ПробитьЧек, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.Каталог, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.НайтиВЧеке, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.УдалитьЧек, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ОтложитьЧек, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаРедактированияСтрокиКорзины, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ПанельИзбранныхТоваров, Истина);
	
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаНаЧек, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварСкидка, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаТекущийТоварСумма, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаТекущийТоварПроцент, Истина);
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.СменитьКассира, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.РассчитатьСкидки, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОтменаРасчетаСкидок, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаВыборОплаты, Истина);
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаКартой, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаНал, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаБезнал, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаВРассрочку, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаЗачетАванса, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСуммаОплатаСертификатамиНСПК, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОперации, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСуммаТоваровКЗамене, Ложь);
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаСертификатами, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСуммаОплатаСертификатами, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСуммаСертификата, Ложь);
	
	УстановитьВидимостьЭлементаФормы(Элементы.СтраницаДобавлениеПродавца, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.СтраницаПродавецВыбран, Ложь);
	
	ТекущийПродавец = "";
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПустая);
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОплата);
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаЛевоОбщая);
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПравоОбщая);
	
	Элементы.ДекорацияПустойЧекПродажа.Картинка = БиблиотекаКартинок.РМКЗаставкаПродажа;
	Элементы.ДекорацияТекстПустойСтраницы.Заголовок = 
		НСтр("ru='Начните продажу, добавив товар сканером, из избранного или каталога'");
	Элементы.ТекущийТоварНаименование.Заголовок = "";
	Элементы.СуммаОплаченоНал.Подсказка = НСтр("ru = 'Наличные'");
	Элементы.СуммаОплаченоБН.Подсказка = НСтр("ru = 'Карта'");
	Элементы.СуммаОплаченоБонусами.Подсказка = НСтр("ru = 'Бонусы'");
	Элементы.ВвестиДанныеПокупателя.Картинка = БиблиотекаКартинок.ВвестиДанныеПокупателя;
	
	Элементы.ДекорацияКоличествоЧеков.Заголовок = НСтр("ru = ''");
	ПробитыеЧеки.Очистить();
	ОжидаемоеКоличествоЧеков = 0;
	ЭтоВозвратБезОснования = Ложь;
	ВыбранБанковскийПлатеж = Ложь;
	ЭтоОплатаВстречнымПредоставлением = Ложь;
	ЕстьОплатаВстречнымПредоставлением = Ложь;
	ПриемАванса = Ложь;
	ЧекККМВОбработке = ОбщегоНазначенияРМКПереопределяемый.ПустаяСсылкаНаЧекККМ();
	ЧекККМПродажа = ОбщегоНазначенияРМКПереопределяемый.ПустаяСсылкаНаЧекККМ();
	ВыборСерии = ОбщегоНазначенияРМКПереопределяемый.ПустаяСсылкаНаСериюНоменклатуры();
	ОбщегоНазначенияРМКПереопределяемый.УстановитьПустойСтатусВОтложенныйЧек(ОтложенныйЧек);
	ОсобенностиУчетаВозвращаемойМаркируемойПродукции = Новый СписокЗначений;
	
	ОчиститьДанныеПокупателя();
	ОчиститьТаблицуПодарочныхСертификатов();
	ОбновитьКалендарныеОграниченияПродаж();
	ЗаполнитьКэшДействующихЗапретовПродаж();
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВводКодаSMS, Ложь);
	ПараметрыВводаКодаSMS = Неопределено;
	Элементы.ОплатитьБонусами.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	СписокДобавленныхСтрокТоваров.Очистить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьКоличествоОтложенныхЧеков(СтруктураПараметров, ОтложенныйЧек)
	Возврат ОбщегоНазначенияРМКПереопределяемый.ПроверитьКоличествоОтложенныхЧеков(СтруктураПараметров,
		ОтложенныйЧек);
КонецФункции

&НаКлиенте
Процедура ВыборОтложенногоЧекаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЕстьСвойство(Результат, "ЧекККМ") Тогда
		
		ОтложенныйЧек = Результат.ЧекККМ;
		ПродолжитьЧекКлиент();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьЧекКлиент()
	
	Если ЗапрашиватьПодтверждениеВозраста18Плюс Тогда
		
		Если ЕстьТоварыСВозрастнымОграничением(ОтложенныйЧек) Тогда
			
			ПереключитьНаСтраницуПодтвержденияВозраста(Истина);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
		
	ПродолжитьЧекКлиентЗавершение();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьТоварыСВозрастнымОграничением(ЧекККМ)
	
	Если НЕ ОбщегоНазначенияРМКПереопределяемый.ЭтоЧекПродажи(ЧекККМ) Тогда
		
		СостояниеПодтвержденияВозраста = "Есть18";
		Возврат Ложь;
		
	КонецЕсли;
	
	ЕстьТоварыСОграничениемВЧекеККМ = ОбщегоНазначенияРМКПереопределяемый.ЕстьТоварыСВозрастнымОграничением(ЧекККМ);
	Возврат ЕстьТоварыСОграничениемВЧекеККМ;
	
КонецФункции

&НаКлиенте
Процедура ПродолжитьЧекКлиентЗавершение()
	
	ПродолжитьЧек();
	УстановитьАктивностьСтроки();
	
	УдалитьКодыМаркировки();
	
	ОтменитьПримененныеБонусы();
	ПересчитатьИтогиТабличнойЧастиТовары();
	НастроитьЭлементыФормы(Элементы.СтраницаОбщая, Истина);
	
	Если ОбщегоНазначенияРМККлиентПереопределяемый.ВидОперацииВозвратПродажи(Объект.ВидОперации) Тогда
		НастроитьЭлементыВРежимеВозврат();
	ИначеЕсли ОбщегоНазначенияРМККлиентПереопределяемый.ВидОперацииСкупка(Объект.ВидОперации) Тогда
		НастроитьЭлементыВРежимеСкупка();
	ИначеЕсли ОбщегоНазначенияРМККлиентПереопределяемый.ВидОперацииВозвратСкупки(Объект.ВидОперации) Тогда
		НастроитьЭлементыВРежимеВозвратСкупки();
	КонецЕсли;
	
	Если ВыбранБанковскийПлатеж Тогда
		
		НастроитьФормуВРежимБанковскогоПлатежа();
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаБезнал, Истина);
		СуммаОплаченоБезнал = СуммаИтого;
		РассчитатьСуммыОплаты();
		НастроитьДоступностьПробитьЧек();
		
	КонецЕсли;
	
	ПродолжитьОплачиваемыйЧекQRКодом();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуРолейПользователя()
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьТаблицуРолейПользователя(ЭтотОбъект);
	ИнтеграцияСПлатежнымиСистемамиРМКПереопределяемый.ЗаполнитьТаблицуРолейПользователя(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Функция ЕстьПравоНаДействие(НаименованиеРоли = "")
	Возврат НЕ СписокРолейПользователя.НайтиПоЗначению(НаименованиеРоли) = Неопределено;
КонецФункции

&НаСервере
Процедура ЗаменитьПраваИВыполнитьТребуемоеДействие(Штрихкод)
	
	ВыполнитьПоискКассира(Штрихкод);
	ЗаполнитьТаблицуРолейПользователя();
	ВыполнитьТекущуюОперацию();
	ВыбратьПользователяДоЗаменыПрав();
	
КонецПроцедуры

&НаСервере
Процедура ВыбратьПользователяДоЗаменыПрав()
	
	Объект.ПользовательБД = ?(ЗначениеЗаполнено(ПользовательДоЗаменыПрав),
		ПользовательДоЗаменыПрав,
		Объект.ПользовательБД);
		
	Объект.Кассир = ?(ЗначениеЗаполнено(КассирДоЗаменыПрав),
		КассирДоЗаменыПрав,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ПользовательБД, "ФизическоеЛицо"));
		
	ЗаполнитьТаблицуРолейПользователя();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьТекущуюОперацию()
	
	Если ТекущаяОперация = НСтр("ru = ''") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяОперация = НСтр("ru='УдалитьСтрокуРМК'") Тогда
		
		Если НЕ СписокРолейПользователя.НайтиПоЗначению(НСтр("ru='ПравоУдалитьСтрокуРМК'")) = Неопределено Тогда
			
			Строка = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
			УдалитьСтрокуТовара(Строка, Объект.Товары);
			
		КонецЕсли;
		
	ИначеЕсли ТекущаяОперация = НСтр("ru='УдалитьЧекРМК'") Тогда
		
		Если НЕ СписокРолейПользователя.НайтиПоЗначению(НСтр("ru='ПравоУдалитьЧекРМК'")) = Неопределено Тогда
			
			Если ЗначениеЗаполнено(ОтложенныйЧек) Тогда
				АннулироватьЧек(ОтложенныйЧек);
			КонецЕсли;
			
			СоздатьНовыйНабор();
			
		КонецЕсли;
		
	ИначеЕсли ТекущаяОперация = НСтр("ru='РедактироватьКартуРМК'") Тогда
		
		Если НЕ СписокРолейПользователя.НайтиПоЗначению(НСтр("ru='ПравоРедактироватьКартуРМК'")) = Неопределено Тогда
			
			НомерКартыДоИзменения = НайденнаяКартаНомер;
			ИзменитьДоступностьПолейНайденнойКарты();
			
		КонецЕсли;
		
	ИначеЕсли ТекущаяОперация = НСтр("ru='ПодтвержитьОплатуПлатежнойСистемой'") Тогда
		
		Если НЕ СписокРолейПользователя.
			НайтиПоЗначению("РазрешитьОплатуВозвратБезПодтвержденияОтПлатежнойСистемы") = Неопределено Тогда
				ПлатежнаяСистема_НоваяЗаявка.БылоПодтверждениеКодомАдминистратора = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммыПослеУдаленияСтроки()
	
	ПересчитатьИтогиТабличнойЧастиТовары();
	РассчитатьСуммуОплатыБонусами();
	
	Если Объект.Товары.Количество() = 0 И НЕ ЭтоЧекКоррекции Тогда
		
		Если ЗначениеЗаполнено(ОтложенныйЧек) Тогда
			АннулироватьЧек(ОтложенныйЧек);
		КонецЕсли;
		
		НастроитьЭлементыФормы(Элементы.СтраницаПустая, Ложь);
		СформироватьЗаголовок(НСтр("ru='Продажа'"));
		РазблокироватьОбъектСервисаЛояльности("clientbonuses");
		СписатьРазблокироватьПодарочныеСертификаты();
		ИнициализироватьИнтерфейсРабочегоМестаКассира();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЧекНаВозврат()
	
	ВывестиИнформациюНаДисплейПокупателя("ВозвратТовара");
	СформироватьЗаголовок(НСтр("ru='Возврат'"));
	
	КассыККМИОрганизации = ПодключенныеКассыККМИОрганизации();
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("МассивКассККМ", КассыККМИОрганизации.МассивКассККМ);
	ПараметрыОткрытия.Вставить("МассивОрганизаций", КассыККМИОрганизации.МассивОрганизаций);
	ПараметрыОткрытия.Вставить("ТорговыйОбъект", Объект.ТорговыйОбъект);
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru='Выбор чека для возврата'"));
	ПараметрыОткрытия.Вставить("ВозвратПродажи", Истина);
	
	Объект.ВидОперации = ОбщегоНазначенияРМККлиентПереопределяемый.ВидОперацииЧекаККМ(Истина);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборЧекаЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.РабочееМестоКассира.Форма.ФормаВыбораЧека",
		ПараметрыОткрытия, ЭтотОбъект,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Функция ПодключенныеКассыККМИОрганизации()
	
	МассивКассККМ = Новый Массив;
	МассивОрганизаций = Новый Массив;
	
	Для Каждого СтрокаКасс Из ТаблицаКассККМОрганизаций Цикл
		
		МассивКассККМ.Добавить(СтрокаКасс.КассаККМ);
		МассивОрганизаций.Добавить(СтрокаКасс.Организация);
		
	КонецЦикла;
	
	СтруктураКассККМИОрганизаций = Новый Структура();
	СтруктураКассККМИОрганизаций.Вставить("МассивКассККМ", МассивКассККМ);
	СтруктураКассККМИОрганизаций.Вставить("МассивОрганизаций", МассивОрганизаций);
	
	Возврат СтруктураКассККМИОрганизаций;
	
КонецФункции

&НаКлиенте
Процедура НайтиТоварВЧеке(Штрихкод)
	
	Если НЕ ЗначениеЗаполнено(Штрихкод) Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтрокиТоваров = Элементы.Товары.ВыделенныеСтроки;
	ВыделенныеСтрокиТоваров.Очистить();
	
	
	МассивСтрокШтрихкод = Объект.Товары.НайтиСтроки(Новый Структура("Штрихкод", Штрихкод));
	Если МассивСтрокШтрихкод.Количество() > 0 Тогда
		
		Для Каждого НайденнаяСтрока Из МассивСтрокШтрихкод Цикл
			
			ИдентификаторНайденнойСтроки = НайденнаяСтрока.ПолучитьИдентификатор();
			Если ВыделенныеСтрокиТоваров.Количество() = 0 Тогда
				Элементы.Товары.ТекущаяСтрока = ИдентификаторНайденнойСтроки;
			КонецЕсли;
			ВыделенныеСтрокиТоваров.Добавить(ИдентификаторНайденнойСтроки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	МассивСтрокКодМаркировки = Объект.Товары.НайтиСтроки(Новый Структура("КодМаркировки", Штрихкод));
	Если МассивСтрокКодМаркировки.Количество() > 0 Тогда
		
		Для Каждого НайденнаяСтрока Из МассивСтрокКодМаркировки Цикл
			
			ИдентификаторНайденнойСтроки = НайденнаяСтрока.ПолучитьИдентификатор();
			Если ВыделенныеСтрокиТоваров.Количество() = 0 Тогда
				Элементы.Товары.ТекущаяСтрока = ИдентификаторНайденнойСтроки;
			КонецЕсли;
			ВыделенныеСтрокиТоваров.Добавить(ИдентификаторНайденнойСтроки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОплата);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Истина);
	ШтрихкодДляПоиска = НСтр("ru = ''");
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьТекстВводМарки()
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока.ЭтоНабор Тогда
		ПредставлениеТовара = ТекущаяСтрока.ПредставлениеНоменклатураХарактеристика;
	Иначе
		ПредставлениеТовара = Элементы.ТекущийТоварНаименование.Заголовок;
	КонецЕсли;
	
	Если СтрНайти(Элементы.ДекорацияТекстВводМарки.Заголовок, ПредставлениеТовара) > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ДекорацияТекстВводМарки.Заголовок = СтрШаблон("%1%2%3",
		НСтр("ru='Отсканируйте марку'"),
		Символы.ПС,
		ПредставлениеТовара);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеобходимостьВводаМарки(ПараметрыДляОбработкиШтрихкода)
	
	Если Элементы.СтраницыСтаканПраво.ТекущаяСтраница = Элементы.СтраницаОтсканироватьМарку
		ИЛИ Элементы.СтраницыСтаканПраво.ТекущаяСтраница = Элементы.СтраницаНеверноОтсканированныйШтрихкод Тогда
		
		Если НЕ Элементы.Товары.ТекущиеДанные = Неопределено Тогда
			
			ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
			ПараметрыДляОбработкиШтрихкода.Вставить("ТекущаяНоменклатура", ТекущаяСтрока.Номенклатура);
			ПараметрыДляОбработкиШтрихкода.Вставить("НомерСтроки", ТекущаяСтрока.ПолучитьИдентификатор());
			ПараметрыДляОбработкиШтрихкода.Вставить("НеобходимоВвестиМарку");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТоварБезМарки()
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.НеобходимостьВводаКодаМаркировки = Ложь;
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОплата);
	ОжидатьВводМарки = ТекущиеДанные.НеобходимостьВводаКодаМаркировки;
	ОграничитьДоступностьЭлементовПриОжиданииМарки(ОжидатьВводМарки);
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ОсобенностьУчета)
		И (ОсобенностиУчетаВозвращаемойМаркируемойПродукции.НайтиПоЗначению(ТекущиеДанные.ОсобенностьУчета)
			= Неопределено) Тогда
				ОсобенностиУчетаВозвращаемойМаркируемойПродукции.Добавить(ТекущиеДанные.ОсобенностьУчета);
	КонецЕсли;
	
	УстановитьФокусНаТовареТребующемВводаМарки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьСменуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ЗакрытиеСменыПереопределено = Ложь;
		ОбщегоНазначенияРМККлиентПереопределяемый.ЗакрытьСмену(ЭтотОбъект, ЗакрытиеСменыПереопределено);
		
		Если ЗакрытиеСменыПереопределено Тогда
			
			Если ТаблицаКассККМОрганизаций.Количество() = 1 Тогда
				
				ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаВводКассира);
				УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОперации, Ложь);
				
			КонецЕсли;
			
			Возврат;
			
		КонецЕсли;
		
		ВыполнитьСверкуИтогов();
		
		СтруктураДляПроверкиКассовойСмены = СформироватьСтруктуруДляПроверкиКассовойСмены();
		ЗаархивироватьЧекиККМ(СтруктураДляПроверкиКассовойСмены);
		
		Если СтруктураДляПроверкиКассовойСмены.Отказ Тогда
			
			ПоказатьПредупреждение(, СтруктураДляПроверкиКассовойСмены.ТекстОшибки);
			Возврат;
			
		КонецЕсли;
		
		ПараметрыОперации = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОткрытияЗакрытияСмены();
		ЗаполнитьПараметрыКассираДляПечати(ПараметрыОперации, Объект.ПользовательБД, Объект.Кассир);
		
		Оповещение = Новый ОписаниеОповещения("ПродолжитьЗакрытиеСменыОкончаниеФискальныйОтчетПечатьЗавершение",
			ЭтотОбъект);
			
		ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьЗакрытиеСменыНаФискальномУстройстве(Оповещение,
			УникальныйИдентификатор, ПодключаемоеОборудование, ПараметрыОперации);
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаархивироватьЧекиККМ(СтруктураПараметров)
	
	// Раз в сутки смену нужно закрывать, следовательно, уместно обновить кэш запретов
	ЗаполнитьКэшДействующихЗапретовПродаж();
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаархивироватьЧекиККМ(ЭтотОбъект, СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьБумажногоЧекаВместоЭлектронногоЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ПробитьЧекКлиент(Истина);
		ПереключитьНаСтраницуВводаОплаты();
		
	Иначе
		
		ТекстПредупреждения =НСтр("ru = 'Чек не был пробит. Пожалуйста, повторите пробитие чека.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоискКассираКлиент(Штрихкод)
	
	НайтиКассираИПерезаполнитьПрава(Штрихкод);
	
	Если ТекущаяОперация = НСтр("ru='ЧекНаВозвратРМК'") Тогда 
		
		Если НЕ СписокРолейПользователя.НайтиПоЗначению(НСтр("ru='ПравоЧекНаВозвратРМК'")) = Неопределено Тогда
			
			ОткрытьОбщуюСтраницу(Истина);
			ВыбратьЧекНаВозврат();
			СформироватьЗаголовокВводКассира();
			
		КонецЕсли;
		
	ИначеЕсли ТекущаяОперация = НСтр("ru='ЧекКоррекцииРМК'") Тогда 
		
		Если НЕ СписокРолейПользователя.НайтиПоЗначению(НСтр("ru='ПравоЧекКоррекцииРМК'")) = Неопределено Тогда
			
			ОткрытьОбщуюСтраницу(Истина);
			ВыбратьЧекКоррекции();
			СформироватьЗаголовокВводКассира();
			
		КонецЕсли;
		
	Иначе
		НастроитьНачальнуюСтраницу(Элементы.СтраницаПустая);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьДокументКассоваяСмена(Отказ)
	
	Попытка
		
		НоваяКассоваяСмена = Документы.КассоваяСмена.СоздатьДокумент();
		РеквизитыКассыККМ = ПродажиРМК.РеквизитыКассыККМ(Объект.КассаККМ, РабочееМесто);
		ЗаполнитьЗначенияСвойств(НоваяКассоваяСмена, РеквизитыКассыККМ);
		
		ДатаОткрытияКассовойСмены = ТекущаяДатаСеанса();
		
		НоваяКассоваяСмена.Дата = ДатаОткрытияКассовойСмены;
		НоваяКассоваяСмена.Статус = Перечисления.СтатусыКассовойСмены.Открыта;
		НоваяКассоваяСмена.НачалоКассовойСмены = ДатаОткрытияКассовойСмены;
		НоваяКассоваяСмена.ОкончаниеКассовойСмены = '00010101';
		
		Если НоваяКассоваяСмена.ПроверитьЗаполнение() Тогда
			
			НоваяКассоваяСмена.Записать(РежимЗаписиДокумента.Проведение);
			КассоваяСмена = НоваяКассоваяСмена.Ссылка;
			
		КонецЕсли;
		
	Исключение
		
		Отказ = Истина;
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка при записи документа ""Кассовая смена"".'"),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьЗакрытиеСменыОкончаниеФискальныйОтчетПечатьЗавершение(РезультатВыполнения,
	ПараметрыВыполнения) Экспорт
	
	Если ЕстьСвойство(РезультатВыполнения, "Результат") И НЕ РезультатВыполнения.Результат Тогда
		
		ТекстЗаголовка = НСтр("ru = 'При снятии отчета на фискальном регистраторе произошла ошибка.'");
		ТекстСообщения =
			СтрШаблон(НСтр("ru = '""%1""
				|Отчет на фискальном регистраторе не сформирован.'"), РезультатВыполнения.ОписаниеОшибки);
		
		ПоказатьПредупреждение(, ТекстСообщения,, ТекстЗаголовка);
		
	Иначе
		ИзменитьСостояниеКассовойСмены();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСостояниеКассовойСмены()
	
	ПроверитьВозможностьРаботы();
	НастроитьСтраницуВыбораКассККМ();
	
	Если ТаблицаКассККМОрганизаций.Количество() > 1 Тогда
		ПриПереключенииКассыККМ();
	Иначе
		
		СменаОткрыта = Ложь;
		Если ТаблицаКассККМОрганизаций.Количество() = 1 Тогда
			СменаОткрыта = ЗначениеЗаполнено(ТаблицаКассККМОрганизаций[0].НачалоКассовойСмены);
		КонецЕсли;
		
		Если Не СменаОткрыта Тогда
			Объект.Кассир = Неопределено;
			ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаВводКассира);
			УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОперации, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьЧекПлатежнойКартой()
	
	Если Объект.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаКартой, НЕ Элементы.ГруппаОплатаКартой.Видимость);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, НЕ Элементы.ГруппаЛево.Доступность);
	УстановитьДоступностьЭлементаФормы(Элементы.НайтиВЧеке, НЕ Элементы.НайтиВЧеке.Доступность);
	УстановитьДоступностьЭлементаФормы(Элементы.Каталог, НЕ Элементы.Каталог.Доступность);
	
	ТекущийЭлемент = Элементы.СуммаОплаченоБН;
	
	Если СуммаОплаченоБН = 0 Тогда
		
		СуммаОплаченоБН = СуммаИтого - СуммаОплаченоНал - СуммаОплаченоБезнал
			- СуммаОплаченоБонусами - СуммаОплаченоВРассрочку - СуммаОплаченоЗачетАванса;
		
	КонецЕсли;
	
	ЗаполнитьТаблицуОплат();
	РассчитатьСуммыОплаты();
	НастроитьДоступностьПробитьЧек();
	
	ПровестиОплатуПоКарте();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуВТабличнуюЧасть(ДанныеТовара, ТекущийВыбор, НеобходимВводМаркировки = Ложь)
	
	НоваяСтрока = Объект.Товары.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеТовара);
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущийВыбор);
	
	НоваяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор;
	НоваяСтрока.НеобходимостьВводаКодаМаркировки = НеобходимВводМаркировки;
	
	Если НоваяСтрока.ПоштучноеВыбытие Тогда
		
		НоваяСтрока.ЧастичноеВыбытиеВариантУчета = ДанныеТовара.ВариантЧастичногоВыбытия;
		НоваяСтрока.ЧастичноеВыбытиеНоменклатура = НоваяСтрока.Номенклатура;
		НоваяСтрока.ЧастичноеВыбытиеХарактеристика = НоваяСтрока.Характеристика;
		НоваяСтрока.ЧастичноеВыбытиеКоличество = НоваяСтрока.Количество;
		
	КонецЕсли;
	
	Отказ = Ложь;
	Если РучноеСопоставлениеТовара И ЗначениеЗаполнено(ДанныеДляРучногоСопоставления) Тогда
		ЗаполнитьДанныеРучногоСопоставления(НоваяСтрока, ДанныеТовара.ОсобенностьУчета, Отказ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КодМаркиВРаботе) Тогда
		НоваяСтрока.КодМаркировки = КодМаркиВРаботе;
	КонецЕсли;
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьОрганизациюПродажи(НоваяСтрока, ЭтотОбъект);
	Если НЕ ЗначениеЗаполнено(НоваяСтрока.Организация) Тогда
		НоваяСтрока.Организация = ОсновнаяОрганизация;
	Иначе
		
		ОтборПоОрганизации = Новый Структура("Организация", НоваяСтрока.Организация);
		КассыККМПоОрганизации = ТаблицаКассККМОрганизаций.НайтиСтроки(ОтборПоОрганизации);
		Если КассыККМПоОрганизации.Количество() = 0 Тогда
			НоваяСтрока.Организация = ОсновнаяОрганизация;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НоваяСтрока.СистемаНалогообложения) Тогда
		
		ОсновнаяСНОПоОрганизации = ОбщегоНазначенияРМКПереопределяемый.СНОККТДляОрганизации(Объект, НоваяСтрока);
		НоваяСтрока.СистемаНалогообложения = ОсновнаяСНОПоОрганизации;
		
	КонецЕсли;
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьВозможностьОплатыЭС(НоваяСтрока, ЭтотОбъект);
	
	СтавкаНДС = ПродажиРМК.АктуальнаяСтавкаНДСДляТовара(Объект, НоваяСтрока, НоваяСтрока.СистемаНалогообложения);
	НоваяСтрока.СтавкаНДС = СтавкаНДС;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ПолучитьВес, НоваяСтрока.Весовой);
	
	Если НЕ Отказ Тогда
		
		ПредставлениеХарактеристики = "";
		Если ТекущийВыбор.Свойство("Характеристика") Тогда
			
			Если ЗначениеЗаполнено(ТекущийВыбор.Характеристика) Тогда
				ПредставлениеХарактеристики = " (" + Строка(ТекущийВыбор.Характеристика) + ")";
			КонецЕсли;
			
		КонецЕсли;
		
		ПредставлениеТовара = СтрШаблон("%1%2", ДанныеТовара.Наименование, ПредставлениеХарактеристики);
		НоваяСтрока.ПредставлениеНоменклатураХарактеристика = ПредставлениеТовара;
		ШтрихкодированиеРМК.ЗаполнитьПредставлениеЕдиницыИзмерения(НоваяСтрока);
		
		ТекущийТоварКоличество = НоваяСтрока.КоличествоУпаковок;
		
		Элементы.Товары.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		
		ДоступныРучныеСкидки = ДопускаетсяПрименениеСкидок И (Объект.Товары.Количество() > 0);
		
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаРучнаяСкидкаНаТовар, ДоступныРучныеСкидки);
		УстановитьДоступностьЭлементаФормы(Элементы.СкидкаНаЧек, ДоступныРучныеСкидки);
		ПодготовитьИнтерфейсКВозвратуМаркируемогоТовараБезКонтрольнойМаркиНаСервере(НоваяСтрока);
		
		ДобавленаНоваяСтрокаКорзины = Истина;
		
		ОбщегоНазначенияРМКПереопределяемый.ПереопределитьПараметрыЗаполненияСерийИПартий(НоваяСтрока, ЭтотОбъект);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ИзменитьСтрокуВТабличнойЧасти(НайденнаяСтрока, ТекущийВыбор)
	
	Если НЕ ЗначениеЗаполнено(НайденнаяСтрока.ИдентификаторСтроки) Тогда
		НайденнаяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	Если РучноеСопоставлениеТовара И ЗначениеЗаполнено(ДанныеДляРучногоСопоставления) Тогда
		
		Отказ = Ложь;
		ЗаполнитьДанныеРучногоСопоставления(НайденнаяСтрока, НайденнаяСтрока.ОсобенностьУчета, Отказ);
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОплата);
		
	КонецЕсли;
	
	НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + 1;
	НайденнаяСтрока.КоличествоУпаковок = НайденнаяСтрока.КоличествоУпаковок + 1;
	ШтрихкодированиеРМК.ЗаполнитьПредставлениеЕдиницыИзмерения(НайденнаяСтрока);
	
	ТекущийТоварКоличество = НайденнаяСтрока.КоличествоУпаковок;
	
	Элементы.Товары.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТекущуюНастройкуРМК()
	
	Если НЕ ЗначениеЗаполнено(РабочееМесто)Тогда
		РабочееМесто = ПараметрыСеанса.РабочееМестоКлиента;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	НастройкиРабочегоМестаКассира.Ссылка КАК Ссылка,
	|	НастройкиРабочегоМестаКассира.ПечататьБумажныйЧек КАК ПечататьБумажныйЧек,
	|	НастройкиРабочегоМестаКассира.МаксимальныйПроцентРучнойСкидки КАК МаксимальныйПроцентРучнойСкидки,
	|	НастройкиРабочегоМестаКассира.ТочностьОкругления КАК ТочностьОкругления,
	|	НастройкиРабочегоМестаКассира.ОкруглятьПриПроизвольномВидеОплаты КАК ОкруглятьПриПроизвольномВидеОплаты,
	|	НастройкиРабочегоМестаКассира.ОкруглятьЧекВПользуПокупателяПострочно КАК ОкруглятьЧекВПользуПокупателяПострочно,
	|	НастройкиРабочегоМестаКассира.ЗапрашиватьПодтверждениеВозраста18Плюс КАК ЗапрашиватьПодтверждениеВозраста18Плюс,
	|	НастройкиРабочегоМестаКассира.ОжидатьРезультатПроверкиМарок КАК ОжидатьРезультатПроверкиМарок,
	|	НастройкиРабочегоМестаКассира.ИспользоватьНовыйПодборТоваров КАК ИспользоватьНовыйПодборТоваров,
	|	НастройкиРабочегоМестаКассира.ЗакрыватьПодборПриВыбореТовара КАК ЗакрыватьПодборПриВыбореТовара,
	|	НастройкиРабочегоМестаКассира.ПоказыватьАртикулНоменклатуры КАК ПоказыватьАртикулНоменклатуры,
	|	НастройкиРабочегоМестаКассира.ПоказыватьКодНоменклатуры КАК ПоказыватьКодНоменклатуры,
	|	НастройкиРабочегоМестаКассира.ОтправлятьSMSКодПриЗаведенииКарты КАК ОтправлятьSMSКодПриЗаведенииКарты,
	|	НастройкиРабочегоМестаКассира.КонтролироватьЕМРЦ КАК КонтролироватьЕМРЦ,
	|	НастройкиРабочегоМестаКассира.ИспользоватьРежимСкупки КАК ИспользоватьРежимСкупки,
	|	НастройкиРабочегоМестаКассира.ВопросПоРасчетуСкидок КАК ВопросПоРасчетуСкидок
	|ИЗ
	|	Справочник.НастройкиРабочегоМестаКассира КАК НастройкиРабочегоМестаКассира
	|ГДЕ
	|	НЕ НастройкиРабочегоМестаКассира.ПометкаУдаления
	|	И НастройкиРабочегоМестаКассира.РабочееМесто = &РабочееМесто");
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	
	ВыборкаНастроек = Запрос.Выполнить().Выбрать();
	КоличествоНастроек = ВыборкаНастроек.Количество();
	
	Если КоличествоНастроек = 1 И ВыборкаНастроек.Следующий() Тогда
		
		ТекущаяНастройкаРМК = ВыборкаНастроек.Ссылка;
		МаксимальныйПроцентРучнойСкидки = ВыборкаНастроек.МаксимальныйПроцентРучнойСкидки;
		
		ТекстПодсказки = СтрШаблон(НСтр("ru = 'Максимальная ручная скидка: %1%%'", МаксимальныйПроцентРучнойСкидки));
		
		Элементы.ТекущийТоварСкидка.Подсказка = ТекстПодсказки;
		Элементы.ЗначениеСкидкиНаЧек.Подсказка = ТекстПодсказки;
		
		ТочностьОкругления = 0;
		
		Если ЗначениеЗаполнено(ВыборкаНастроек.ТочностьОкругления) Тогда
			ТочностьОкругления = Число(Строка(ВыборкаНастроек.ТочностьОкругления));
		КонецЕсли;
		
		ОкруглятьПриПроизвольномВидеОплаты = ВыборкаНастроек.ОкруглятьПриПроизвольномВидеОплаты;
		ОкруглятьЧекВПользуПокупателяПострочно = ВыборкаНастроек.ОкруглятьЧекВПользуПокупателяПострочно;
		ЗапрашиватьПодтверждениеВозраста18Плюс = ВыборкаНастроек.ЗапрашиватьПодтверждениеВозраста18Плюс;
		ИспользоватьНовыйПодборТоваров = ВыборкаНастроек.ИспользоватьНовыйПодборТоваров;
		ЗакрыватьПодборПриВыбореТовара = ВыборкаНастроек.ЗакрыватьПодборПриВыбореТовара;
		ОжидатьПолученияОтветаИСМП = ВыборкаНастроек.ОжидатьРезультатПроверкиМарок;
		КонтролироватьЕМРЦ = ВыборкаНастроек.КонтролироватьЕМРЦ;
		ПечататьБумажныйЧек = ВыборкаНастроек.ПечататьБумажныйЧек;
		ВопросПоРасчетуСкидок = ВыборкаНастроек.ВопросПоРасчетуСкидок;
		
		УстановитьВидимостьЭлементаФормы(Элементы.СписокТоваровАртикул, ВыборкаНастроек.ПоказыватьАртикулНоменклатуры);
		УстановитьВидимостьЭлементаФормы(Элементы.СписокТоваровКод, ВыборкаНастроек.ПоказыватьКодНоменклатуры);
		
		УстановитьВидимостьЭлементаФормы(Элементы.Скупка, ВыборкаНастроек.ИспользоватьРежимСкупки);
		УстановитьВидимостьЭлементаФормы(Элементы.ВозвратСкупки, ВыборкаНастроек.ИспользоватьРежимСкупки);
		
		ДоступнаОтправкаSMS = ОбщегоНазначенияРМКПереопределяемый.НастройкаОтправкиSMSВыполнена();
		ОтправлятьSMSКодПриЗаведенииКарты = ВыборкаНастроек.ОтправлятьSMSКодПриЗаведенииКарты И ДоступнаОтправкаSMS;
		
		Если ОтправлятьSMSКодПриЗаведенииКарты Тогда
			Элементы.СоздатьКарту.Заголовок = НСтр("ru = 'К подтверждению номера'");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьОбщуюВозможностьРаботы(Отказ, ТекстЗаголовка, ТекстСообщения)
	
	Если НЕ ЗначениеЗаполнено(РабочееМесто) Тогда
		
		ТекстЗаголовка = НСтр("ru = 'Ошибка определения рабочего места'");
		ТекстСообщения = НСтр("ru = 'Не смогли определить рабочее место.
									|Обратитесь к администратору системы.'");
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	ТекстЗапроса = ОбщегоНазначенияРМКПереопределяемый.ТекстЗапросаДанныеКассыККМ();
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТорговыйОбъект", Объект.ТорговыйОбъект);
	Запрос.УстановитьПараметр("РабочееМестоККМ", РабочееМесто);
	Запрос.УстановитьПараметр("ККТОнлайн", Перечисления.ТипыПодключаемогоОборудования.ККТ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 2 Тогда
		
		ТекстЗаголовка = НСтр("ru = 'Ошибка определения доступных касс ККМ'");
		ТекстСообщения = НСтр("ru = 'Нельзя подключить более 2-х касс ККМ.
			|Обратитесь к администратору системы.'");
		Отказ = Истина;
		Возврат;

	ИначеЕсли Выборка.Количество() = 2 И НЕ ТекущаяНастройкаРМК.ПродажиСНесколькихКассККМ Тогда
		
		ТекстЗаголовка = НСтр("ru = 'Ошибка определения доступных касс ККМ'");
		ТекстСообщения = СтрШаблон("%1%2",
			НСтр("ru = 'Настроено два элемента подключаемого оборудования для касс ККМ '"),
			НСтр("ru = 'при отключенной возможность использования двух касс.
			|Обратитесь к администратору.'"));
		Отказ = Истина;
		Возврат;
		
	ИначеЕсли Выборка.Количество() > 0 Тогда
		
		ТаблицаКассККМОрганизаций.Очистить();
		#Область ОплатаQRКодом_ПараметрыОрганизации
		ПлатежнаяСистема_ВидыОплат.Очистить();
		#КонецОбласти
		
		Пока Выборка.Следующий() Цикл
			
			ОсновнаяОрганизация = Выборка.Организация;
			
			ОписаниеПоследнейКассовойСмены =
				КассовыеСменыВызовСервера.ОписаниеПоследнейКассовойСмены(Выборка.ПодключаемоеОборудование);
			
			Объект.КассаККМ = Выборка.КассаККМ;
			Объект.Организация = Выборка.Организация;
			ПодключаемоеОборудование = Выборка.ПодключаемоеОборудование;
			
			ККМПоддерживаетПроверкуКодовМаркировки = ОбщегоНазначенияРМКПереопределяемый.ПроверятьМаркированныйТоварНаККТ(
				Выборка);
			
			ТекущаяОрганизация = Объект.Организация;
			Объект.НалогообложениеНДС = ОбщегоНазначенияРМКПереопределяемый.СНОНДСДляОрганизации(ТекущаяОрганизация);
			СистемаНалогообложенияОрганизацииПоУмолчанию = ОбщегоНазначенияРМКПереопределяемый.
				СНОККТДляОрганизации(Объект);
			
			СтрокаКассККМ = ТаблицаКассККМОрганизаций.Добавить();
			СтрокаКассККМ.КассаККМ                             = Объект.КассаККМ;
			СтрокаКассККМ.ПоддерживаетПроверкуКодовМаркировки  = ККМПоддерживаетПроверкуКодовМаркировки;
			СтрокаКассККМ.ИдентификаторУстройства              = ПодключаемоеОборудование;
			СтрокаКассККМ.Организация                          = Объект.Организация;
			
			#Область ОплатаQRКодом_ПараметрыОрганизации
			НастройкиИнтеграцииОрганизации =
				РегистрыСведений.СоответствиеНастроекИнтеграции.НастройкиИнтеграции(СтрокаКассККМ.Организация,
					Объект.ТорговыйОбъект);
			
			Если ЗначениеЗаполнено(НастройкиИнтеграцииОрганизации) Тогда
				
				СтрокаКассККМ.ВозможнаОплатаQRКодом = Истина;
				
				Для Каждого Настройка Из НастройкиИнтеграцииОрганизации Цикл
					ЗаполнитьЗначенияСвойств(ПлатежнаяСистема_ВидыОплат.Добавить(), Настройка);
				КонецЦикла;
				
			Иначе
				СтрокаКассККМ.ВозможнаОплатаQRКодом = Ложь;
			КонецЕсли;
			#КонецОбласти
			
			Если НЕ ОписаниеПоследнейКассовойСмены = Неопределено Тогда
				
				КассоваяСмена                     = ОписаниеПоследнейКассовойСмены.КассоваяСмена;
				СтрокаКассККМ.КассоваяСмена       = ОписаниеПоследнейКассовойСмены.КассоваяСмена;
				СтрокаКассККМ.НачалоКассовойСмены = ОписаниеПоследнейКассовойСмены.НачалоКассовойСмены;
				
				Если ОписаниеПоследнейКассовойСмены.Статус = Перечисления.СтатусыКассовойСмены.Закрыта Тогда
					СтрокаКассККМ.НачалоКассовойСмены = Неопределено;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ТекущаяНастройкаРМК.ПродажиСНесколькихКассККМ Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Выборка.Количество() > 1 И ТекущаяНастройкаРМК.ПродажиСНесколькихКассККМ Тогда
			
			ОрганизацияИзНастройки = ОбщегоНазначенияРМКПереопределяемый.ОсновнаяОрганизацияПоНастройке(ТекущаяНастройкаРМК);
			ОтборПоОрганизации = Новый Структура("Организация", ОрганизацияИзНастройки);
			
			Если ЗначениеЗаполнено(ОрганизацияИзНастройки) Тогда
				
				Если ТаблицаКассККМОрганизаций.НайтиСтроки(ОтборПоОрганизации).Количество() = 0 Тогда
				
					ТекстЗаголовка = НСтр("ru = 'Ошибка определения доступных касс ККМ'");
					ТекстСообщения = НСтр("ru = 'Нет подключенной кассы ККМ по основной организации.
						|Обратитесь к администратору системы.'");
					Отказ = Истина;
					Возврат;
					
				Иначе
					ОсновнаяОрганизация = ОрганизацияИзНастройки;
					Объект.Организация = ОсновнаяОрганизация;
					СистемаНалогообложенияОрганизацииПоУмолчанию = ОбщегоНазначенияРМКПереопределяемый.СНОККТДляОрганизации(Объект);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьЭквайринговыеТерминалы();
		
	Иначе
		
		ТекстЗаголовка = НСтр("ru = 'Ошибка определения доступных касс ККМ'");
		
		ТекстСообщенияОбОшибкеОпределенияКассыПоУмолчанию = НСтр("ru = 'Не смогли определить доступные кассы ККМ.
			|Обратитесь к администратору системы для проверки настройки кассы ККМ текущего рабочего места.'");
		ПереопределенныйТекстСообщенияОбОшибкеОпределенияКассы =
			ОбщегоНазначенияРМККлиентСерверПереопределяемый.ТекстСообщенияОбОшибкеОпределенияКассы();
		ТекстСообщения = ?(ЗначениеЗаполнено(ПереопределенныйТекстСообщенияОбОшибкеОпределенияКассы),
			ПереопределенныйТекстСообщенияОбОшибкеОпределенияКассы,
			ТекстСообщенияОбОшибкеОпределенияКассыПоУмолчанию);
			
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущаяНастройкаРМК) Тогда
		
		ТекстЗаголовка = НСтр("ru = 'Ошибка определения настроек РМК'");
		ТекстСообщенияОбОшибкеОпределенияТекущейНастройкиРМКПоУмолчанию =
			НСтр("ru = 'Не удалось определить настройки РМК.
			|Обратитесь к администратору системы.'");
		ПереопределенныйТекстСообщенияОбОшибкеОпределенияТекущейНастройкиРМК =
			ОбщегоНазначенияРМККлиентСерверПереопределяемый.ТекстСообщенияОбОшибкеОпределенияНастройкиРМК();
		ТекстСообщения = ?(ЗначениеЗаполнено(ПереопределенныйТекстСообщенияОбОшибкеОпределенияТекущейНастройкиРМК),
			ПереопределенныйТекстСообщенияОбОшибкеОпределенияТекущейНастройкиРМК,
			ТекстСообщенияОбОшибкеОпределенияТекущейНастройкиРМКПоУмолчанию);
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	ПроверитьНастройкиПользователя(Отказ, ТекстЗаголовка, ТекстСообщения);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНастройкиПользователя(Отказ, ТекстЗаголовка, ТекстСообщения)
	
	ОбщегоНазначенияРМКПереопределяемый.ПроверитьНастройкиПользователя(Отказ, ТекстЗаголовка, ТекстСообщения);

	Если НЕ Отказ Тогда
		ПроверитьНастройкиПользователяПоУмолчанию(Отказ, ТекстЗаголовка, ТекстСообщения); 
	КонецЕсли;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	КодДоступаУказан = КодДоступаПользователяУказан(ТекущийПользователь);
	УстановитьДоступностьЭлементаФормы(Элементы.ДекорацияПоясненияКАвторизации, НЕ КодДоступаУказан);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНастройкиПользователяПоУмолчанию(Отказ, ТекстЗаголовка, ТекстСообщения)

	ТекстЗапроса = ТекстЗапросаПроверкиНаличияФизлицаУПользователя();
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
	
	Выборка = Запрос.Выполнить().Выбрать();

	// АПК:1036-выкл не является стандартным обработчиком
	Отказ = Выборка.Количество() = 0
		ИЛИ (Выборка.Следующий() И НЕ ЗначениеЗаполнено(Выборка.ФизическоеЛицо));
	// АПК:1036-вкл
	
	Если Отказ Тогда

		ТекстЗаголовка = НСтр("ru = 'Ошибка определения физ.лица для текущего пользователя'");
		ТекстСообщения = НСтр("ru = 'Для текущего пользователя не указано физическое лицо.
			|Обратитесь к администратору системы.'");
		Возврат;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция КодДоступаПользователяУказан(ТекущийПользователь)

	Результат = Ложь;
	
	Запрос = ЗапросПолученияКодовДоступаПользователя();
	
	Если Запрос <> Неопределено
		И ТипЗнч(Запрос) = Тип("Запрос") Тогда
		
		Выборка = Запрос.Выполнить().Выбрать();
		КоличествоПаролейПользователя = Выборка.Количество();
		Результат = (КоличествоПаролейПользователя > 0);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗапросПолученияКодовДоступаПользователя()
	
	ЗапросПоУмолчанию = Новый Запрос("ВЫБРАТЬ
	|	"""" КАК Поле1
	|ГДЕ
	|	ЛОЖЬ");

	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ПереопределенныйЗапрос =
		ОбщегоНазначенияРМКПереопределяемый.ЗапросПолученияКодовДоступаПользователя(ТекущийПользователь);
	
	Возврат ?(ПереопределенныйЗапрос = Неопределено,ЗапросПоУмолчанию, ПереопределенныйЗапрос);
	
КонецФункции

&НаСервере
Функция ТекстЗапросаПроверкиНаличияФизлицаУПользователя()

	ТекстЗапросаПоУмолчанию = "ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Ссылка,
	|	Пользователи.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Ссылка = &ТекущийПользователь
	|	И НЕ Пользователи.Недействителен
	|	И НЕ Пользователи.ПометкаУдаления";
	
	ПереопределяемыйТекстЗапроса =
		ОбщегоНазначенияРМКПереопределяемый.ТекстЗапросаПроверкиНаличияФизлицаУПользователя();

	Возврат ?(ЗначениеЗаполнено(ПереопределяемыйТекстЗапроса), ПереопределяемыйТекстЗапроса, ТекстЗапросаПоУмолчанию);
	
КонецФункции

&НаСервере
Процедура ПроверитьВозможностьРаботы()
	
	Отказ = Ложь;
	ТекстЗаголовка = НСтр("ru = ''");
	ТекстСообщения = НСтр("ru = ''");
	
	ПроверитьОбщуюВозможностьРаботы(Отказ, ТекстЗаголовка, ТекстСообщения);
	
	Если Отказ Тогда
		
		ПараметрыОткрытияФормы = Новый Структура();
		ПараметрыОткрытияФормы.Вставить("ТекстЗаголовка", ТекстЗаголовка);
		ПараметрыОткрытияФормы.Вставить("ТекстСообщения", ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСменуКлиент(ДанныеДляОткрытияСмены = неопределено)
	
	ИдентификаторУстройства = ПодключаемоеОборудование;
	ИспользоватьКассуККМБезПодключенияОборудования = Ложь;
	
	СохранятьПодключение = Истина;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("КассаККМ", Объект.КассаККМ);
	ДополнительныеПараметры.Вставить("Магазин", Объект.ТорговыйОбъект);
	ДополнительныеПараметры.Вставить("Организация", Объект.Организация);
	ДополнительныеПараметры.Вставить("ОставитьПодключенным", СохранятьПодключение);
	
	Если ИспользоватьПодключаемоеОборудование
		И НЕ ИспользоватьКассуККМБезПодключенияОборудования
		И ЗначениеЗаполнено(ИдентификаторУстройства) Тогда
		
		Доступность = Ложь;
		
		ПараметрыОперации = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОткрытияЗакрытияСмены();
		ЗаполнитьПараметрыКассираДляПечати(ПараметрыОперации, Объект.ПользовательБД, Объект.Кассир);
		
		Контекст = Новый Структура("КассаККМ", Объект.КассаККМ);
		Оповещение = Новый ОписаниеОповещения("ОткрытьСменуЗавершение", ЭтотОбъект, Контекст);
			
		ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьОткрытиеСменыНаФискальномУстройстве(Оповещение,
			УникальныйИдентификатор, ИдентификаторУстройства, ПараметрыОперации, ДополнительныеПараметры);
			
	Иначе
		
		Отказ = Ложь;
		ТекстЗаголовка = НСтр("ru = 'Открытие смены'");
		ТекстСообщения = НСтр("ru = 'Кассовая смена в системе открыта'");
		
		СоздатьДокументКассоваяСмена(Отказ);
		
		Если Отказ Тогда
			
			ТекстЗаголовка = НСтр("ru = 'Ошибка открытия смены'");
			ТекстСообщения = НСтр("ru = 'При открытии смены произошла ошибка. Смена не открыта.'");
			
		КонецЕсли;
		
		ПоказатьПредупреждение(, ТекстСообщения,, ТекстЗаголовка);
		Оповестить("ИзменениеСостоянияКассовойСмены", Объект.КассаККМ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСменуЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Доступность = Истина;
	
	Если ЕстьСвойство(РезультатВыполнения, "Результат") И РезультатВыполнения.Результат Тогда
		
		ОписаниеПоследнейКассовойСмены = КассовыеСменыВызовСервера.ОписаниеПоследнейКассовойСмены(ПодключаемоеОборудование);
		
		Если ЕстьСвойство(ОписаниеПоследнейКассовойСмены, "КассоваяСмена") Тогда
			КассоваяСмена = ОписаниеПоследнейКассовойСмены.КассоваяСмена;
		КонецЕсли;
		
		ТекстСообщения = НСтр("ru = 'Кассовая смена в системе открыта'");
		ПоказатьПредупреждение(, ТекстСообщения);
		
		Оповестить("ИзменениеСостоянияКассовойСмены", Параметры.КассаККМ);
		
	Иначе
		
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаВводКассира);
		
		ТекстЗаголовка = НСтр("ru = 'Ошибка открытия смены'");
		
		ЛокализованныйТекстСообщения = СтрШаблон(НСтр("ru = 'При открытии смены произошла ошибка.
			|%1
			|Смена не открыта на фискальном устройстве.'"), РезультатВыполнения.ОписаниеОшибки);
		ПоказатьПредупреждение(, ЛокализованныйТекстСообщения,, ТекстЗаголовка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОперациюВыемкаЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПустая);
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПравоОбщая);
	
	УстановитьВидимостьЭлементаФормы(Элементы.СтраницыЛево, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаИнфоВыемка, Ложь);
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
	
	Если ЕстьСвойство(РезультатВыполнения, "Результат") И РезультатВыполнения.Результат Тогда
		
		ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Произведена выемка в размере %1 руб.'"), СуммаВыемка);
		ПоказатьОповещениеПользователя(НСтр("ru='Выемка'"),, ТекстПояснения, БиблиотекаКартинок.РМКВыемка);
		
	Иначе
		
		ТекстОшибки = НСтр("ru='Ошибка выемки'");
		Если ЕстьСвойство(РезультатВыполнения, "ТекстСообщения") Тогда
			ТекстОшибки = РезультатВыполнения.ТекстСообщения;
		КонецЕсли;
		Если ЕстьСвойство(РезультатВыполнения, "ОписаниеОшибки") Тогда
			ТекстОшибки = РезультатВыполнения.ОписаниеОшибки;
		КонецЕсли;
		
		ПоказатьПредупреждение(, ТекстОшибки,, НСтр("ru='Ошибка выемки ДС.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОперациюВнесениеЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПустая);
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПравоОбщая);
	
	УстановитьВидимостьЭлементаФормы(Элементы.СтраницыЛево, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаИнфоВнесение, Ложь);
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
	
	Если ЕстьСвойство(РезультатВыполнения, "Результат") И РезультатВыполнения.Результат Тогда
		
		Если СуммаВнесение = 0 Тогда
			
			Если ЕстьСвойство(РезультатВыполнения, "СуммаВнесения") Тогда
				СуммаВнесение = РезультатВыполнения.СуммаВнесения;
			КонецЕсли;
			
		КонецЕсли;
		
		ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Произведено внесение в размере %1 руб.'"), СуммаВнесение);
		ПоказатьОповещениеПользователя(НСтр("ru='Внесение'"),, ТекстПояснения, БиблиотекаКартинок.РМКВнесение);
		
	Иначе
		
		ТекстОшибки = НСтр("ru='Ошибка выемки'");
		
		Если ЕстьСвойство(РезультатВыполнения, "ТекстСообщения") Тогда
			ТекстОшибки = РезультатВыполнения.ТекстСообщения;
		КонецЕсли;
		Если ЕстьСвойство(РезультатВыполнения, "ОписаниеОшибки") Тогда
			ТекстОшибки = РезультатВыполнения.ОписаниеОшибки;
		КонецЕсли;
		
		ПоказатьПредупреждение(, ТекстОшибки,, НСтр("ru='Ошибка внесения'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеРучногоСопоставления(ТекущаяСтрока, ОсобенностьУчета, Отказ)
	
	ПараметрыШтрихкодирования = Новый Структура();
	ПараметрыШтрихкодирования.Вставить("Объект", Объект);
	ПараметрыШтрихкодирования.Вставить("КонтролироватьЕМРЦ", КонтролироватьЕМРЦ);
	ПараметрыШтрихкодирования.Вставить("УчитыватьМРЦ", УчитыватьМРЦ);
	
	Если ЕстьСвойство(ДанныеДляРучногоСопоставления, "КодМарки") Тогда
		
		ШтрихкодированиеРМК.РазобратьМаркуИЗаполнитьДанные(ТекущаяСтрока,
			ДанныеДляРучногоСопоставления.КодМарки,
			ОсобенностьУчета,
			ПараметрыШтрихкодирования);
			
	КонецЕсли;
	
	Если ЕстьСвойство(ПараметрыШтрихкодирования, "УпаковкаНеНайдена") Тогда
		
		Отказ = Истина;
		ДанныеДляРучногоСопоставления = Неопределено;
		ЗавершитьВводШтрихкодаУпаковкаНеНайдена(ПараметрыШтрихкодирования.НоменклатураБезУпаковки);
		
	Иначе
		
		Если ЕстьСвойство(ДанныеДляРучногоСопоставления, "EAN") Тогда
			ТекущаяСтрока.Штрихкод = ДанныеДляРучногоСопоставления.EAN;
		КонецЕсли;
		
		Если ЕстьСвойство(ДанныеДляРучногоСопоставления, "Штрихкод") 
			И ЕстьСвойство(ДанныеДляРучногоСопоставления, "ТоварНеНайденПоШтрихкоду")
			И НЕ ЗначениеЗаполнено(ТекущаяСтрока.Штрихкод) Тогда
				ТекущаяСтрока.Штрихкод = ДанныеДляРучногоСопоставления.Штрихкод;
		КонецЕсли;
			
		Если ЕстьСвойство(ДанныеДляРучногоСопоставления, "КодМарки") Тогда
			ТекущаяСтрока.КодМаркировки = ДанныеДляРучногоСопоставления.КодМарки;
		КонецЕсли;
		
		СоздатьЗаписьВШтрихкоды(ТекущаяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЗаписьВШтрихкоды(ТекущаяСтрока)
	ОбщегоНазначенияРМКПереопределяемый.ЗаписатьШтрихкод(ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВводШтрихкодаНеверныйКод()
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаНеверноОтсканированныйШтрихкод);
	Если ТекущаяСтрока.ЭтоНабор Тогда
		ПредставлениеТовара = ТекущаяСтрока.ПредставлениеНоменклатураХарактеристика;
	Иначе
		ПредставлениеТовара = Элементы.ТекущийТоварНаименование.Заголовок;
	КонецЕсли;
	
	Элементы.ДекорацияТекстНеправильныйШтрихкод.Заголовок = СтрШаблон("%1%2%3",
		НСтр("ru='Отсканируйте марку'"),
		Символы.ПС,
		ПредставлениеТовара);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВводШтрихкодаМаркаВведена(КонтекстПроверкиКонтрольнойМарки)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		
		НастроитьТекущееКоличество(ТекущаяСтрока);
		НастроитьДоступностьКомандИзмененияКоличества(ТекущаяСтрока);
		
	КонецЕсли;
	
	ЭтоОбработкаСопоставленияТовара = КонтекстПроверкиКонтрольнойМарки.ЭтоОбработкаСопоставленияТовара;
	
	Если ПроверкаМаркиВозможна(КонтекстПроверкиКонтрольнойМарки.КодМаркировки,
			КонтекстПроверкиКонтрольнойМарки.ОсобенностьУчета, КонтекстПроверкиКонтрольнойМарки.Организация) Тогда
		
		КонтекстПроверкиКонтрольнойМарки.КонтекстВызова = "ЗавершитьВводШтрихкодаМаркаВведена";
		ОбработатьКонтрольнуюМарку(КонтекстПроверкиКонтрольнойМарки);
		
	Иначе
		ДобавитьТоварПоДаннымМарки(ЭтоОбработкаСопоставленияТовара);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьВводШтрихкодаУпаковкаНеНайдена(ТекущаяНоменклатура)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПустая
		ИЛИ Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПоискТовара Тогда
			ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
	КонецЕсли;
	
	Если Объект.Товары.Количество() = 0 Тогда
		Элементы.ТекущийТоварНаименование.Заголовок = НСтр("ru = ''");
	КонецЕсли;
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаИнфоОшибка);
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Ложь);
	
	ТекстЗаголовка = НСтр("ru='Сообщите администратору.
								|Не найдена упаковка'");
	ТекстОшибки = СтрЗаменить(НСтр("ru='Для товара %1 не найдена упаковка'"), "%1", ТекущаяНоменклатура.Наименование);
	
	Элементы.ТекстПредупреждениеЗаголовок.Заголовок = ТекстЗаголовка;
	Элементы.ТекстПредупреждениеОшибка.Заголовок = ТекстОшибки;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВводШтрихкода(ПараметрыДляОбработкиШтрихкода)
	
	Если НЕ ОжидатьВводМарки Тогда
		Элементы.Товары.ТекущаяСтрока = ПараметрыДляОбработкиШтрихкода.ИдентификаторСтроки;
	КонецЕсли;
	
	Если НЕ Элементы.Товары.ТекущаяСтрока = Неопределено Тогда
		
		ДанныеСтроки = Элементы.Товары.ТекущиеДанные;
		
		КодМаркировки = ДанныеСтроки.КодМаркировки;
		ОсобенностьУчета = ДанныеСтроки.ОсобенностьУчета;
		Организация = ДанныеСтроки.Организация;
		
		Если ПроверкаМаркиВозможна(КодМаркировки, ОсобенностьУчета, Организация) Тогда
			
			КонтекстПроверкиКонтрольнойМарки = КонтекстПроверкиКонтрольнойМарки();
			ЗаполнитьЗначенияСвойств(КонтекстПроверкиКонтрольнойМарки, ДанныеСтроки);
			КонтекстПроверкиКонтрольнойМарки.КонтекстВызова = "ЗавершитьВводШтрихкода";
			ОбработатьКонтрольнуюМарку(КонтекстПроверкиКонтрольнойМарки);
			
		Иначе
			
			ТекущийТоварКоличество = ДанныеСтроки.КоличествоУпаковок;
			РассчитатьСуммуВСтрокеТабличнойЧасти();
			РассчитатьСуммуОплатыБонусами();
			НастроитьЭлементыФормы(Элементы.СтраницаОбщая, Истина);
			
			Если (ДанныеСтроки.ПроверятьЗаполнениеСерий И НЕ ЗначениеЗаполнено(ДанныеСтроки.Серия))
				ИЛИ (ДанныеСтроки.ПроверятьЗаполнениеПартий И НЕ ЗначениеЗаполнено(ДанныеСтроки.Партия)) Тогда
				ОткрытьСтраницуСерии();
			Иначе
				ТекущийЭлемент = Элементы.ТекущийТоварКоличество;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВводШтрихкодаНабора()
	
	ЕстьНезаполненныеДанные();
	
	Если НЕ ЗначениеЗаполнено(ВременныйКонтекстПроверкиМарки) Тогда
	
		ОбновитьИнформациюНаДисплееПокупателя("ДобавлениеТовара");
		
		Если Объект.Товары.Количество() > 0 Тогда
			НастроитьЭлементыФормы(Элементы.СтраницаОбщая, Истина);
		КонецЕсли;
			
		РассчитатьСуммуВСтрокеТабличнойЧасти();
		РассчитатьСуммуОплатыБонусами();
		
		РучноеСопоставлениеТовара = Ложь;
		ДанныеДляРучногоСопоставления = Неопределено;
		КодМаркиВРаботе = НСтр("ru = ''");
		
		Если ЗапрашиватьПодтверждениеВозраста18Плюс Тогда
			
			Если СостояниеПодтвержденияВозраста = "" ИЛИ СостояниеПодтвержденияВозраста = "Нет18" Тогда
				
				Если ТоварСВозрастнымОграничением() Тогда
					ДанныеДобавляемогоТовара = Новый Структура;
					ДанныеДобавляемогоТовара.Вставить("ВыборТовараВручную");
					ПереключитьНаСтраницуПодтвержденияВозраста();
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СписокДобавленныхСтрокТоваров.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВводШтрихкодаЗаполнитьТаблицуДляВыбора(ПараметрыШтрихкода)
	
	Адрес = ПараметрыШтрихкода.ТаблицаДляВыбораНоменклатуры;
	
	Если ЕстьСвойство(ПараметрыШтрихкода, "КодМарки") Тогда
		КодМаркиВРаботе = ПараметрыШтрихкода.КодМарки;
	КонецЕсли;
	
	ОткрытьКаталогКлиент();
	ЗаполнитьДанныеТаблицыДляВыбораНоменклатуры(Адрес);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьОшибкуЕГАИС(ПараметрыШтрихкода)
	
	ТекстЗаголовка = НСтр("ru = 'Ошибка ЕГАИС.'");
	ТекстОшибки = ПараметрыШтрихкода.ОшибкаЕГАИС;
	
	Если Объект.Товары.Количество() = 0 Тогда
		ПоказатьПредупреждение(, ТекстОшибки,, ТекстЗаголовка);
	Иначе
		ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеТаблицыДляВыбораНоменклатуры(Адрес)
	
	ТаблицаДляВыбора = ПолучитьИзВременногоХранилища(Адрес);
	
	СписокНоменклатуры = Новый СписокЗначений;
	СписокХарактеристик = Новый СписокЗначений;
	
	Для Каждого СтрокаТаблицы Из ТаблицаДляВыбора Цикл
		
		СписокНоменклатуры.Добавить(СтрокаТаблицы.Номенклатура);
		СписокХарактеристик.Добавить(СтрокаТаблицы.Характеристика);
		
	КонецЦикла;
	
	ЭлементОтбора = СписокТоваров.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ПравоеЗначение = СписокНоменклатуры;
	
	ЭлементОтбора = СписокТоваров.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Характеристика");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ПравоеЗначение = СписокХарактеристик;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКоличествоВесовогоТовара(ТекущаяСтрока, УвеличитьКоличество)
	
	Если УвеличитьКоличество Тогда
		
		ЭтаФорма.ТекущийЭлемент = Элементы.ТекущийТоварКоличество;
		УстановитьТолькоПросмотрЭлементаФормы(Элементы.ТекущийТоварКоличество, Ложь);
		
	Иначе
		
		ТекущийТоварКоличество = 0;
		ТекущаяСтрока.Количество = 0;
		ТекущаяСтрока.КоличествоУпаковок = 0;
		
	КонецЕсли;
	
	ПересчитатьСуммы(ТекущаяСтрока);
	ПересчетКоличестваТовара(ТекущаяСтрока);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьГорячиеКлавиши()
	
	Если НЕ ЗначениеЗаполнено(ТекущаяНастройкаРМК) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Команда Из ТекущаяНастройкаРМК.ГорячиеКлавиши Цикл
		
		КомандаНаФорме = Элементы.Найти(Команда.ИмяКнопки);
		
		Если НЕ КомандаНаФорме = Неопределено Тогда
			
			СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша[Команда.Клавиша],
				Команда.АкселераторAlt,
				Команда.АкселераторCtrl,
				Команда.АкселераторShift);
				
			КомандаНаФорме.СочетаниеКлавиш = СочетаниеКлавиш;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьСменуКлиент()
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		ПоказатьПредупреждение(,
			НСтр("ru='Перед закрытием смены необходимо пробить, удалить или отложить текущий чек.'"));
		Возврат;
		
	КонецЕсли;
	
	Если ТаблицаКассККМОрганизаций.Количество() > 1 Тогда
		
		ПереключитьНаСтраницуВыбораКассыККМ();
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗакрытьСменуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Вы уверены, что хотите закрыть смену?'");
	ЗаголовокВопроса = НСтр("ru='Закрытие смены'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,, ЗаголовокВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура СверкаИтоговКлиент()
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		ПоказатьПредупреждение(,
			НСтр("ru='Перед сверкой итогов необходимо пробить, удалить или отложить текущий чек.'"));
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СверкаИтоговЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Вы уверены, что хотите выполнить сверку итогов?'");
	ЗаголовокВопроса = НСтр("ru='Сверка итогов'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,, ЗаголовокВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторнаяПечатьЧекаКлиент()
	
	КассыККМИОрганизации = ПодключенныеКассыККМИОрганизации();
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("МассивКассККМ", КассыККМИОрганизации.МассивКассККМ);
	ПараметрыОткрытия.Вставить("МассивОрганизаций", КассыККМИОрганизации.МассивОрганизаций);
	ПараметрыОткрытия.Вставить("ТорговыйОбъект", Объект.ТорговыйОбъект);
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru='Выбор чека для повторной печати'"));
	ПараметрыОткрытия.Вставить("РежимПечатиЧека", "ПечатьПробитогоЧека");
	
	ОбработчикОповещенияОткрытияФормыВыбора = Новый ОписаниеОповещения(
		"ОповещениеОткрытьФормуВыбораЧекаПриПечатиПробитогоЧека", ЭтотОбъект);
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	
	ОткрытьФорму("Обработка.РабочееМестоКассира.Форма.ФормаВыбораЧека",
		ПараметрыОткрытия, ЭтотОбъект,,,, ОбработчикОповещенияОткрытияФормыВыбора, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммы(ТекущаяСтрока)
	
	ОбщегоНазначенияРМККлиентСервер.ПересчитатьСуммуВСтроке(ЭтотОбъект, ТекущаяСтрока);
	ОбщегоНазначенияРМККлиентСервер.РассчитатьСуммуНДС(Объект, ТекущаяСтрока);
	ОбщегоНазначенияРМККлиентСервер.СуммаДокумента(Объект);
	ПересчитатьИтогиТабличнойЧастиТовары(Ложь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьСвойство(Объект, ИмяРеквизита)
	Возврат ОбщегоНазначенияРМККлиентСервер.ЕстьСвойство(Объект, ИмяРеквизита);
КонецФункции

&НаСервере
Процедура ОчиститьДанныеПокупателя()
	
	РассчитыватьБонусы = Ложь;
	Объект.ДисконтнаяКарта = ОбщегоНазначенияРМКПереопределяемый.ПустаяСсылкаНаДисконтнуюКарту();
	Объект.Контрагент = ОбщегоНазначенияРМКПереопределяемый.ПустаяСсылкаНаКонтрагента();
	ЛитералПустойСтроки = НСтр("ru = ''");
	
	Если НЕ ИспользоватьСервисЛояльности Тогда
		
		НайденнаяКартаДатаРождения = ЛитералПустойСтроки;
		НайденнаяКартаНомер = ЛитералПустойСтроки;
		НайденнаяКартаПочта = ЛитералПустойСтроки;
		НайденнаяКартаТелефон = ЛитералПустойСтроки;
		НайденнаяКартаФИО = ЛитералПустойСтроки;
		
	КонецЕсли;
	
	ОтправкаЧекаПочта = ЛитералПустойСтроки;
	ОтправкаЧекаТелефон = ЛитералПустойСтроки;
	
	КоличествоБонусов = 0;
	БонусыДоступноКОплате = 0;
	ПроцентОплатыБонусами = 0;
	Элементы.СуммаОплаченоБонусами.МаксимальноеЗначение = 0;
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаБонусами, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаБонусыКартыЛояльности, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСуммаБонусов, Ложь);
	
	УстановитьДоступностьЭлементаФормы(Элементы.ОтправкаЧекаПочта, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОтправкаЧекаТелефон, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаПоискКартыКартаНайдена, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаПоискКартыПоиск, Истина);
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЗаголовок, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаВыборМеню, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаБонусыКартыЛояльности, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.СтраницаСозданиеКарты, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВводКодаSMS, Ложь);
	ПараметрыВводаКодаSMS = Неопределено;
	Элементы.ОплатитьБонусами.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеКартыСервер()
	
	КартаЛояльности = Объект.ДисконтнаяКарта;
	ИсходныеДанные = Новый Структура();
	ИсходныеДанные.Вставить("НомерКартыДоИзменения", НомерКартыДоИзменения);
	ИсходныеДанные.Вставить("МагнитныйКодКартыЛояльности", НайденнаяКартаНомер);
	ИсходныеДанные.Вставить("НовыйEmailКлиента", НайденнаяКартаПочта);
	ИсходныеДанные.Вставить("НовыйНомерТелефонаКлиента", НайденнаяКартаТелефон);
	ОбщегоНазначенияРМКПереопределяемый.СохранитьДанныеКартыЛояльности(КартаЛояльности, ИсходныеДанные);
	
	ИзменитьДоступностьПолейНайденнойКарты();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьСимволGS1(Штрихкод)
	
	СимволGS1 = МенеджерОборудованияМаркировкаКлиентСервер.РазделительGS1();
	Разделитель = МенеджерОборудованияМаркировкаКлиентСервер.ЭкранированныйСимволGS1();
	
	Штрихкод = СтрЗаменить(Штрихкод, СимволGS1, Разделитель);
	
КонецПроцедуры

&НаКлиенте
Процедура УточнитьПравильностьНоменклатурыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		
		Если НЕ ТекущаяСтрока = Неопределено Тогда
			
			ТекущаяСтрока.КодМаркировки = ДополнительныеПараметры.Штрихкод;
			
			КонтекстПроверкиКонтрольнойМарки = КонтекстПроверкиКонтрольнойМарки();
			ЗаполнитьЗначенияСвойств(КонтекстПроверкиКонтрольнойМарки, ТекущаяСтрока);
			
			ЗавершитьВводШтрихкодаМаркаВведена(КонтекстПроверкиКонтрольнойМарки);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьИнтерфейсРабочегоМестаКассира(ОчисткаДисплеяПокупателя = Истина)
	
	Интервал = ?(ОчисткаДисплеяПокупателя, 0.5, 15); 
	ПодключитьОбработчикОжидания("ОбработкаПростояДисплеяПокупателя", Интервал, Истина);
	СоздатьНовыйНабор();
	ОграничитьДоступностьЭлементовПриОжиданииМарки(Ложь);
	Если НачинатьНовыйЧекВРежимеСкупка Тогда
		ПереключитьРежимНаСкупка();
	Иначе
		СформироватьЗаголовок();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыРучногоПодбораТоваров()
	СписокТоваров.Параметры.УстановитьЗначениеПараметра("ВидЦены", РозничныйВидЦены);
КонецПроцедуры

&НаСервереБезКонтекста
Функция СистемыНалогообложенияДоступныеВКассеККМ(ИдентификаторУстройства)
	
	СистемыНалогообложения = Новый Массив();
	
	Если ЗначениеЗаполнено(ИдентификаторУстройства) Тогда
		
		ПараметрыРегистрацииУстройства =
			ОборудованиеЧекопечатающиеУстройстваВызовСервера.ПараметрыРегистрацииУстройства(ИдентификаторУстройства);
		
		Если ПараметрыРегистрацииУстройства.Свойство("КодыСистемыНалогообложения")
			И ЗначениеЗаполнено(ПараметрыРегистрацииУстройства.КодыСистемыНалогообложения) Тогда
			
			ПрименяемыеКодыНалогообложения = ПараметрыРегистрацииУстройства.КодыСистемыНалогообложения;
			
			МассивКодовСНО = СтрРазделить(ПрименяемыеКодыНалогообложения, ",");
			
			Для Каждого КодСНО Из МассивКодовСНО Цикл
				
				СНО = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.СистемаНалогообложенияККТПоКоду(Число(КодСНО));
				СистемыНалогообложения.Добавить(СНО);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СистемыНалогообложения;
	
КонецФункции

&НаСервереБезКонтекста
Функция СуммаБНОплатыСПодключеннымЭквайрингом(ЧекККМ)
	Возврат ОбщегоНазначенияРМКПереопределяемый.СуммаОплатНаПодключенномЭТ(ЧекККМ);
КонецФункции

&НаСервереБезКонтекста
Функция СистемаНалогообложенияЧека(ЧекККМ)
	Возврат ОбщегоНазначенияРМКПереопределяемый.СистемаНалогообложенияЧека(ЧекККМ);
КонецФункции

&НаСервере
Процедура СопоставитьСТекущейСтрокой()
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
	Отказ = Ложь;
	ЗаполнитьДанныеРучногоСопоставления(ТекущаяСтрока, ТекущаяСтрока.ОсобенностьУчета, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораЗаказаПокупателя(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		
		Элементы.ДекорацияПустойЧекПродажа.Картинка = БиблиотекаКартинок.РМКЗаставкаПродажа;
		Элементы.ДекорацияТекстПустойСтраницы.Заголовок =
			НСтр("ru='Начните продажу, добавив товар сканером, из избранного или каталога'");
		СформироватьЗаголовок(НСтр("ru='Продажа'"));
		Объект.ВидОперации = ОбщегоНазначенияРМККлиентПереопределяемый.ВидОперацииЧекаККМ();
		Возврат;
		
	КонецЕсли;
	
	Отказ = Ложь;
	ОписаниеОшибки = "";
	ЗаполнитьДанныеИзЗаказаПокупателя(Результат, Отказ, ОписаниеОшибки);
	
	Если НЕ Отказ Тогда
		
		СформироватьЗаголовок();
		УстановитьАктивностьСтроки();
		ПересчитатьИтогиТабличнойЧастиТовары(Ложь);
		НастроитьФормуВРежимПродажаПоЗаказу();
		
		Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
			ЗавершитьВводШтрихкодаНайденаКарта();
		КонецЕсли;
		
		ЭтоВозврат = ОбщегоНазначенияРМККлиентПереопределяемый.ВидОперацииВозвратПродажи(Объект.ВидОперации);
		
		Если ЭтоВозврат Тогда
			Элементы.ГруппаИнфо.ЦветФона = Новый Цвет(253, 236, 236);
		КонецЕсли;
		
		Если СуммаОплаченоВРассрочку > 0 Тогда
			
			ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
			ПараметрыПересчета.ПоКомандеПредоплата = Истина;
			РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
			
		КонецЕсли;
		
	Иначе
		
		Элементы.ДекорацияПустойЧекПродажа.Картинка = БиблиотекаКартинок.РМКЗаставкаПродажа;
		Элементы.ДекорацияТекстПустойСтраницы.Заголовок =
			НСтр("ru='Начните продажу, добавив товар сканером, из избранного или каталога'");;
		СформироватьЗаголовок(НСтр("ru='Продажа'"));
		Объект.ВидОперации = ОбщегоНазначенияРМККлиентПереопределяемый.ВидОперацииЧекаККМ();
		
		ПоказатьПредупреждение(, ОписаниеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВыборДокументаБезналичнойОплаты(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		
		Элементы.ДекорацияПустойЧекПродажа.Картинка = БиблиотекаКартинок.РМКЗаставкаПродажа;
		Элементы.ДекорацияТекстПустойСтраницы.Заголовок =
			НСтр("ru='Начните продажу, добавив товар сканером, из избранного или каталога'");
		СформироватьЗаголовок(НСтр("ru='Продажа'"));
		Объект.ВидОперации = ОбщегоНазначенияРМККлиентПереопределяемый.ВидОперацииЧекаККМ();
		Возврат;
		
	КонецЕсли;
	
	Если ЕстьСвойство(Результат, "ДокументРасчета")
		И ОбщегоНазначенияРМККлиентПереопределяемый.ЭтоДокументБезналичнойОплаты(Результат.ДокументРасчета) Тогда
		
		ЗаполнитьДанныеПоДокументуБезналичнойОплаты(Результат);
		СформироватьЗаголовок();
		УстановитьАктивностьСтроки();
		ПересчитатьИтогиТабличнойЧастиТовары(Ложь);
		РассчитатьСуммыОплаты();
		НастроитьФормуВРежимБанковскогоПлатежа();
		НастроитьДоступностьПробитьЧек();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВыборДокументаРасчета(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		
		Элементы.ДекорацияПустойЧекПродажа.Картинка = БиблиотекаКартинок.РМКЗаставкаПродажа;
		Элементы.ДекорацияТекстПустойСтраницы.Заголовок =
			НСтр("ru='Начните продажу, добавив товар сканером, из избранного или каталога'");
		СформироватьЗаголовок(НСтр("ru='Продажа'"));
		Объект.ВидОперации = ОбщегоНазначенияРМККлиентПереопределяемый.ВидОперацииЧекаККМ();
		ЭтоЗачетАванса = Ложь;
		ЭтоОплатаРассрочки = Ложь;
		Возврат;
		
	КонецЕсли;
	
	ОбработатьВыборДокументаРасчета(Результат);
	СформироватьЗаголовок();
	УстановитьАктивностьСтроки();
	ПересчитатьИтогиТабличнойЧастиТовары(Ложь);
	РассчитатьСуммыОплаты();
	НастроитьФормуВРежимДокументРасчета();
	НастроитьДоступностьПробитьЧек();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыборДокументаРасчета(Результат)
	
	ОбщегоНазначенияРМКПереопределяемый.ОбработатьВыборДокументаРасчета(Результат, ЭтотОбъект);
	ДополнитьСведенияОНоменклатуре();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьФормуВРежимБанковскогоПлатежа()
	
	ВыбранБанковскийПлатеж = Истина;
	
	НастроитьЭлементыФормы(Элементы.СтраницаОбщая, Истина);
	
	УстановитьДоступностьЭлементаФормы(Элементы.Каталог, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаНаЧек, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаРедактированияСтрокиКорзины, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ПанельИзбранныхТоваров, Ложь);
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВыборВидаОплаты, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаБонусами, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьФормуВРежимДокументРасчета()
	
	ТекущаяСтраница = Элементы.СтраницаПустая;
	
	Если Объект.Товары.Количество() > 0 Тогда
		ТекущаяСтраница = Элементы.СтраницаОбщая;
	КонецЕсли;
	
	НастроитьЭлементыФормы(ТекущаяСтраница, Истина);
	
	Если ЭтоЗачетАванса ИЛИ ЭтоОплатаРассрочки Тогда
		
		СуммаОплаченоЗачетАванса = СуммаОстаткаДокументаРасчета;
		ОплатаЗачетАвансаКлиент();
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОплатаЗачетАванса, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаЗачетАванса, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.Предоплата, Ложь);
		ЗаполнитьТаблицуОплат();
		
	КонецЕсли;
	
	Если ЭтоОплатаРассрочки И СуммаОплаченоЗачетАванса = 0 Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаЗачетАванса, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьФормуВРежимПродажаПоЗаказу()
	
	Элементы.ГруппаИнфо.ЦветФона = Новый Цвет(229, 247, 238);
	
	НастроитьЭлементыФормы(Элементы.СтраницаОбщая, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаВРассрочку, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.Предоплата, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаРучнаяСкидкаНаТовар, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаНаЧек, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеИзЗаказаПокупателя(ЗаказПокупателя, Отказ, ОписаниеОшибки)
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПоЗаказу(ЗаказПокупателя, ЭтотОбъект, Отказ, ОписаниеОшибки);
	ДополнитьСведенияОНоменклатуре();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоДокументуБезналичнойОплаты(ДанныеВыбора)
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПоДокументуБезналичнойОплаты(ДанныеВыбора, ЭтотОбъект);
	ДополнитьСведенияОНоменклатуре();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеНаОснованииЧекаККМ(ЧекККМ)
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьНаОснованииЧекаККМ(ЭтотОбъект, ЧекККМ);
	ДополнитьСведенияОНоменклатуре();
	
	Для Каждого ТекущаяСтрока Из Объект.Товары Цикл
		
		ТекущаяСтрока.ОтображаетсяСкидкаПроцентом = ЗначениеЗаполнено(ТекущаяСтрока.ПроцентСкидкиНаценки);
		ТекущаяСтрока.ОтображаетсяСкидкаСуммой =
			НЕ ТекущаяСтрока.ОтображаетсяСкидкаПроцентом И ЗначениеЗаполнено(ТекущаяСтрока.СуммаСкидкиНаценки);
			
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		НайденнаяКартаЛояльности = ШтрихкодированиеРМКПереопределяемый.НайденнаяКартаЛояльности(Объект.ДисконтнаяКарта);
		ШтрихкодированиеРМК.ЗаполнитьФормуПоДисконтнойКарте(ЭтотОбъект, НайденнаяКартаЛояльности);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СекундыВЧасыИМинуты(Секунды)
	
	Результат = Формат(Дата(1, 1, 1) + Секунды, "ДФ=HH:mm");
	
	Если ПустаяСтрока(Результат) Тогда
		Результат = "0:00";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция СтруктураПараметровПересчетаСуммОплаты()
	
	ПараметрыПересчета = Новый Структура;
	ПараметрыПересчета.Вставить("ПоКомандеНал", Ложь);
	ПараметрыПересчета.Вставить("ПоКомандеБН", Ложь);
	ПараметрыПересчета.Вставить("ПоКомандеБезнал", Ложь);
	ПараметрыПересчета.Вставить("ПоКомандеВРассрочку", Ложь);
	ПараметрыПересчета.Вставить("ПоКомандеЗачетАванса", Ложь);
	ПараметрыПересчета.Вставить("ПриИзмененииБНОплаты", Ложь);
	ПараметрыПересчета.Вставить("ПересчитыватьОкругление", Ложь);
	ПараметрыПересчета.Вставить("ПоКомандеПредоплата", Ложь);
	ПараметрыПересчета.Вставить("ПоКомандеПереключитьЧек", "");
	ПараметрыПересчета.Вставить("ПоКомандеОплатитьСертификатом", Ложь);
	ПараметрыПересчета.Вставить("ПоКомандеОтменитьОплатуСертификатом", Ложь);
	ПараметрыПересчета.Вставить("ПриИзмененииСуммыОплатыСертификатом", Ложь);
	ПараметрыПересчета.Вставить("ПоКомандеОплатаQRКодом", Ложь);
	ПараметрыПересчета.Вставить("ПоКомандеОтменитьОплатуQRКодом", Ложь);
	ПараметрыПересчета.Вставить("ПоКомандеОплатитьСертификатомНСПК", Ложь);
	ПараметрыПересчета.Вставить("ПоКомандеОтменитьОплатуСертификатомНСПК", Ложь);
	ПараметрыПересчета.Вставить("ПоКомандеЗаменаТоваров", Ложь);
	ПараметрыПересчета.Вставить("ПоКомандеОплатитьВсюСуммуБонусами", Ложь);
	
	Возврат ПараметрыПересчета;
	
КонецФункции

&НаКлиенте
Процедура СписокТоваровВыборКлиент(ДанныеВыбора)
	
	ДанныеДобавляемогоТовара = Новый Структура();
	ДанныеДобавляемогоТовара.Вставить("Номенклатура", ДанныеВыбора.Номенклатура);
	ДанныеДобавляемогоТовара.Вставить("Цена", ДанныеВыбора.Цена);
	ДанныеДобавляемогоТовара.Вставить("ВыборТовараВручную", Истина);
	
	Если ДанныеВыбора.Свойство("Характеристика") Тогда
		ДанныеДобавляемогоТовара.Вставить("Характеристика", ДанныеВыбора.Характеристика);
	КонецЕсли;
	Если ДанныеВыбора.Свойство("Упаковка") Тогда
		ДанныеДобавляемогоТовара.Вставить("Упаковка", ДанныеВыбора.Упаковка);
	КонецЕсли;
	
	Если ДанныеВыбора.Свойство("ОсобенностьУчета") Тогда
		ДанныеДобавляемогоТовара.Вставить("ОсобенностьУчета", ДанныеВыбора.ОсобенностьУчета);
	КонецЕсли;
	
	Если ДанныеВыбора.Свойство("ВидНоменклатуры") Тогда
		ДанныеДобавляемогоТовара.Вставить("ВидНоменклатуры", ДанныеВыбора.ВидНоменклатуры);
	КонецЕсли;
	
	Если ДанныеВыбора.Свойство("Организация") Тогда
		ДанныеДобавляемогоТовара.Вставить("Организация", ДанныеВыбора.Организация);
	КонецЕсли;
	
	ЭтоОбработкаСопоставленияТовара = Ложь;
	Если ЗначениеЗаполнено(ВременныйКонтекстПроверкиМарки) Тогда
		Если ЕстьСвойство(ВременныйКонтекстПроверкиМарки, "ЭтоОбработкаСопоставленияТовара") 
			И ВременныйКонтекстПроверкиМарки.ЭтоОбработкаСопоставленияТовара Тогда
			ЭтоОбработкаСопоставленияТовара = Истина;
		КонецЕсли;
	Иначе
		Если НЕ ДанныеДляРучногоСопоставления = Неопределено Тогда
			ЭтоОбработкаСопоставленияТовара = Истина;
		КонецЕсли;
	КонецЕсли;
		
	Если ИспользоватьНовыйПодборТоваров И (ЗакрыватьПодборПриВыбореТовара ИЛИ ЭтоОбработкаСопоставленияТовара) Тогда
		
		ЗакрытьПоискТоваровКлиент();
		Если ЭтоОбработкаСопоставленияТовара Тогда
			ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗапрашиватьПодтверждениеВозраста18Плюс Тогда
		
		Если СостояниеПодтвержденияВозраста = "" ИЛИ СостояниеПодтвержденияВозраста = "Нет18" Тогда
			
			Если ТоварСВозрастнымОграничением(ДанныеДобавляемогоТовара.ОсобенностьУчета) Тогда
				
				ПереключитьНаСтраницуПодтвержденияВозраста();
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СписокТоваровВыборПродолжение(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПолеВводаСуммыВРассрочку()
	
	ЭтоОперацияПродажи = ОбщегоНазначенияРМККлиентПереопределяемый.ВидОперацииПродажа(Объект.ВидОперации);
	
	Если ЭтоОперацияПродажи Тогда
		
		Если Элементы.Предоплата.Доступность Тогда
			Элементы.СуммаОплаченоВРассрочку.Заголовок = НСтр("ru = 'Потом'");
			Элементы.СуммаОплаченоВРассрочку.Подсказка = НСтр("ru = 'Потом'");
			Элементы.СуммаОплаченоВРассрочку.Доступность = Ложь;
		КонецЕсли;
		
		Если Элементы.ОплатаВРассрочку.Доступность Тогда
			Элементы.СуммаОплаченоВРассрочку.Заголовок = НСтр("ru = 'Рассрочка'");
			Элементы.СуммаОплаченоВРассрочку.Подсказка = НСтр("ru = 'Рассрочка'");
			Элементы.СуммаОплаченоВРассрочку.Доступность = Истина;
		КонецЕсли;
		
	Иначе
		
		Если Элементы.Предоплата.Доступность Тогда
			Элементы.СуммаОплаченоВРассрочку.Заголовок = НСтр("ru = 'Возврат предоплаты'");
			Элементы.СуммаОплаченоВРассрочку.Подсказка = НСтр("ru = 'Возврат предоплаты'");
			Элементы.СуммаОплаченоВРассрочку.Доступность = Ложь;
		КонецЕсли;
		
		Если Элементы.ОплатаВРассрочку.Доступность Тогда
			Элементы.СуммаОплаченоВРассрочку.Заголовок = НСтр("ru = 'Возврат рассрочки'");
			Элементы.СуммаОплаченоВРассрочку.Подсказка = НСтр("ru = 'Возврат рассрочки'");
			Элементы.СуммаОплаченоВРассрочку.Доступность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуДанныеПокупателя()
	
	Если ОбщегоНазначенияРМККлиентПереопределяемый.ЗапрещенаПредоплатаБезКонтрагента() И
		ПриемАванса И НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Для приема аванса необходимо указать контрагента'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПравоОбщая);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.СтраницыСтаканПраво.ТекущаяСтраница, Истина);
	
	Если Элементы.СтраницыСтаканПраво.ТекущаяСтраница = Элементы.СтраницаОплата Тогда
		УстановитьФокусНаЭлементеФормыПриВводеОплаты();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВводШтрихкодаНайденаКарта()
	
	ЗапроситьДанныеБонусов();
	ИзменитьКартинкуВводПокупателя();
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаПоискКартыКартаНайдена, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаПоискКартыПоиск, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаПоискКартыКартаНеНайдена, Ложь);
	УстановитьТекущийЭлементПослеВводаКарты();
	ПереключитьНаСтраницуВводаКодаSMS();
	
	Если ЭтоЗачетАванса
		И Объект.Товары.Количество() = 0
		И ОбщегоНазначенияРМККлиентПереопределяемый.ЗапрещенаПредоплатаБезКонтрагента() Тогда
		
		ОбщегоНазначенияРМККлиентПереопределяемый.ВыбратьДокументРасчета(ЭтотОбъект);
		
	ИначеЕсли ЭтоОплатаРассрочки
		И Объект.Товары.Количество() = 0
		И ОбщегоНазначенияРМККлиентПереопределяемый.ЗапрещенаПредоплатаБезКонтрагента() Тогда
		
		ВыбратьДокументОплатыРассрочки();
		
	КонецЕсли;
	
	ОбщегоНазначенияРМККлиентПереопределяемый.ПровестиОпросВладельцаКарты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОпросПоДисконтнойКарте(РезультатВыполнения, ПараметрыВыполнения) Экспорт
	
	ЗаполнитьФормуПоДисконтнойКарте();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФормуПоДисконтнойКарте()
	
	НайденнаяКартаЛояльности = ШтрихкодированиеРМКПереопределяемый.НайденнаяКартаЛояльности(Объект.ДисконтнаяКарта);
	Если НЕ НайденнаяКартаЛояльности = Неопределено Тогда
		ШтрихкодированиеРМК.ЗаполнитьФормуПоДисконтнойКарте(ЭтотОбъект, НайденнаяКартаЛояльности);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементПослеВводаКарты()
	
	Если Элементы.СтраницыПраво.ТекущаяСтраница = Элементы.СтраницаПравоДанныеПокупателя Тогда
		
		Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
			
			Если Не КоличествоБонусов = 0 Тогда
				ТекущийЭлемент = Элементы.ОплатитьБонусами;
			Иначе
				ТекущийЭлемент = Элементы.ДекорацияЗакрытьФормуДанныеПокупателя;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РучнойВводШтрихкодаПослеВвода(ДанныеШтрихкода, ДополнительныеПараметры) Экспорт
	
	Если ДанныеШтрихкода = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьПоискШтрихкода(ДанныеШтрихкода);
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьНезаполненныеДанные()
	
	ЕстьНезаполненныеДанные = Ложь;
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		
		НеЗаполненаСерия = Ложь;
		НеЗаполненаМарка = Ложь;
		НеЗаполненаПартия = Ложь;
		Если СтрокаТовары.ПроверятьЗаполнениеСерий И Не ЗначениеЗаполнено(СтрокаТовары.Серия) Тогда
			НеЗаполненаСерия = Истина;
			ОткрытьСтраницуСерии(СтрокаТовары);
		КонецЕсли;
		
		Если СтрокаТовары.НеобходимостьВводаКодаМаркировки И Не ЗначениеЗаполнено(СтрокаТовары.КодМаркировки) Тогда
			НеЗаполненаМарка = Истина;
		КонецЕсли;
		
		Если СтрокаТовары.ПроверятьЗаполнениеПартий И Не ЗначениеЗаполнено(СтрокаТовары.Партия) Тогда
			
			НеЗаполненаПартия = Истина;
			ОткрытьСтраницуСерии(СтрокаТовары);
			
		КонецЕсли;
		
		Если НеЗаполненаМарка Или НеЗаполненаСерия Или НеЗаполненаПартия Тогда
			
			Элементы.Товары.ТекущаяСтрока = СтрокаТовары.ПолучитьИдентификатор();
			ЕстьНезаполненныеДанные = Истина;
			Прервать;
			
		КонецЕсли;
		
		Если СтрокаТовары.Количество = 0 Тогда
			
			ЕстьНезаполненныеДанные = Истина;
			Элементы.Товары.ТекущаяСтрока = СтрокаТовары.ПолучитьИдентификатор();
			ТекстЗаголовка = НСтр("ru = 'Ошибка.'");
			ТекстОшибки = НСтр("ru = 'В строке не указано количество.'");
			ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки);
			
		КонецЕсли;
		
		Если Не ПриемАванса Тогда
			
			Если СтрокаТовары.Цена = 0 Тогда
				ЕстьНезаполненныеДанные = Истина;
				Элементы.Товары.ТекущаяСтрока = СтрокаТовары.ПолучитьИдентификатор();
				ТекстЗаголовка = НСтр("ru = 'Ошибка.'");
				ТекстОшибки = НСтр("ru = 'В строке не указана цена.'");
				ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЕстьНезаполненныеДанные Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьНезаполненныеДанные;
	
КонецФункции

&НаСервере
Процедура СоздатьЛокальноКартуЛояльности(СтруктураРезультат)
	ОбщегоНазначенияРМКПереопределяемый.СоздатьЛокальноКартуЛояльности(СтруктураРезультат, ЭтотОбъект);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСертификатПоГУИД(ГУИД)
	
	Попытка
		
		ПодарочныйСертификат = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
		Если ПодарочныйСертификат.Наименование = "" Тогда 
			ПодарочныйСертификат = Неопределено;	
		КонецЕсли;
		
	Исключение
		ПодарочныйСертификат = Неопределено	
	КонецПопытки;
	
	Возврат ПодарочныйСертификат;
	
КонецФункции

&НаКлиенте
Процедура ОчиститьДанныеПодарочногоСертификата(РазблокироватьСертификат = Ложь)
	
	Если РазблокироватьСертификат Тогда 
		РазблокироватьОбъектСервисаЛояльности("giftcard");
	КонецЕсли;
	
	НомерСертификата = "";
	ПодарочныйСертификат = Неопределено;
	СуммаОстаткаСертификатов = 0;
	СуммаСертификата = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВидимостьОплатыПодарочнымиСертификатами(ОтменитьОплатуСертификатами = Ложь,
	ОплатитьСертификатом = Ложь)
	
	Если Элементы.НайтиСертификат.Видимость Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаСертификатами, Ложь);
	Иначе
		
		УстановитьВидимостьЭлементаФормы(Элементы.НайтиСертификат, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияОплатаСертификатами, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.НомерСертификата, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияСуммаСертификата, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ОплатитьСертификатом, Ложь);
		
	КонецЕсли;
	
	Если ОтменитьОплатуСертификатами Тогда
		
		ЕстьСертификаты = (ТаблицаПодарочныхСертификатов.Количество() > 0);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаСертификатами, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСуммаОплатаСертификатами, ЕстьСертификаты);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСуммаСертификата, ЕстьСертификаты);
		
	КонецЕсли;
	
	Если ОплатитьСертификатом Тогда
		
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСуммаОплатаСертификатами, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСуммаСертификата, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаСертификатами, Ложь);
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаВыборОплаты, Не Элементы.ГруппаОплатаСертификатами.Видимость);
	
КонецПроцедуры

&НаКлиенте
Функция ВыбраннаяОрганизацияИСНО()
	
	СтруктураОранизацииИСНО = Новый Структура();
	СтруктураОранизацииИСНО.Вставить("Организация", ВыбраннаяОрганизация);
	СтруктураОранизацииИСНО.Вставить("СистемаНалогообложения", ВыбраннаяСистемаНалогообложения);
	
	Возврат СтруктураОранизацииИСНО;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Оплаченые товары
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Товары.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.ТоварыОплачена.ПутьКДанным);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(200, 230, 200));
	
	// Замена товара
	Если ИспользоватьЗаменуТоваров Тогда
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Товары.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.ТоварыТоварКЗамене.ПутьКДанным);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(253, 236, 236));
		Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПриложениеПриОшибке(Результат) Экспорт
	
	РежимОсновногоОкна = КлиентскоеПриложение.ПолучитьРежимОсновногоОкна();
	
	Если РежимОсновногоОкна = РежимОсновногоОкнаКлиентскогоПриложения.РабочееМесто Тогда
		ЗавершитьРаботуСистемы(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРеквизиты(ТекущийНомерСертификата)
	
	// Добавляем реквизиты на форму
	ДобавляемыеРеквизиты = Новый Массив;
	
	ТипРеквизита  = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2));
	ИмяРеквизита  = "СуммаСертификата_" + ТекущийНомерСертификата;
	РеквизитФормы = Новый РеквизитФормы(ИмяРеквизита, ТипРеквизита);
	
	ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
	ИмяГруппы = "ГруппаСуммаОплатаСертификатом_"+ТекущийНомерСертификата;
	ИмяЭлемента = "СуммаСертификата_" + ТекущийНомерСертификата;
	ИмяДекорации = "ДекорацияУдалитьСертификат_" + ТекущийНомерСертификата;
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	ЭтаФорма[ИмяРеквизита] = СуммаСертификата;
	
	// Добавляем поля ввода для новых реквизитов
	ГруппаЭлементов = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Элементы.ГруппаСуммаОплатаСертификатами);
	ГруппаЭлементов.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаЭлементов.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаЭлементов.ОтображатьЗаголовок = Ложь;
	Элементы.Переместить(ГруппаЭлементов, ГруппаЭлементов.Родитель, Элементы.ГруппаДобавитьСертификат);
	
	ПолеСуммаСертификата = ЭтаФорма.Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), Элементы[ИмяГруппы]);
	ПолеСуммаСертификата.ПутьКДанным = ИмяРеквизита;
	ПолеСуммаСертификата.Вид = ВидПоляФормы.ПолеВвода;
	ПолеСуммаСертификата.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеСуммаСертификата.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСлева;
	ПолеСуммаСертификата.КнопкаВыбора = Ложь;
	ПолеСуммаСертификата.Ширина = 9;
	ПолеСуммаСертификата.Шрифт = Новый Шрифт("Arial", 12, Истина);
	ПолеСуммаСертификата.РастягиватьПоГоризонтали = Ложь;
	ПолеСуммаСертификата.РасширеннаяПодсказка.Ширина = 12;
	ПолеСуммаСертификата.РасширеннаяПодсказка.Шрифт = ПолеСуммаСертификата.Шрифт;
	ПолеСуммаСертификата.МаксимальноеЗначение = ЭтаФорма[ИмяРеквизита];
	ПолеСуммаСертификата.УстановитьДействие("ПриИзменении", "СуммаОплатаСертификатамиПриИзменении");
	
	ЧастиСтроки = Новый Массив;
	ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Сертификат'") + Символы.ПС,
		Новый Шрифт("Arial", 10, Истина)));
	
	СтрокаПодсказки = Новый ФорматированнаяСтрока(СтрШаблон(НСтр("ru = '*%1, не более %2 р.'"),
		Прав(ТекущийНомерСертификата, 4),
		Формат(ЭтаФорма[ИмяРеквизита], "ЧЦ=10; ЧДЦ=2; ЧГ=0")), 
		Новый Шрифт("Arial", 8, Ложь,,,, 85));
	
	ЧастиСтроки.Добавить(СтрокаПодсказки);
	ТекстПодсказки = Новый ФорматированнаяСтрока(ЧастиСтроки);
	ПолеСуммаСертификата.РасширеннаяПодсказка.Заголовок = ТекстПодсказки;
	
	ДекорацияУдалить = Элементы.Добавить(ИмяДекорации, Тип("ДекорацияФормы"), Элементы[ИмяГруппы]);
	ДекорацияУдалить.Вид = ВидДекорацииФормы.Картинка;
	ДекорацияУдалить.Картинка = БиблиотекаКартинок.УдалитьТовар;	
	ДекорацияУдалить.УстановитьДействие("Нажатие", "ДекорацияУдалитьСертификатНажатие");
	ДекорацияУдалить.Гиперссылка = Истина;
	ДекорацияУдалить.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
		
КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементФормы(ИмяЭлемента)
	
	ЭлементФормы = Элементы.Найти(ИмяЭлемента);
	
	Если ЭлементФормы <> Неопределено Тогда 
		Элементы.Удалить(ЭлементФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция КонтрольОстатковПройден(ТекстОшибки)
	
	КонтрольОстатковПройден = Истина;
	КонтролироватьОстаткиДляПользователя = ОбщегоНазначенияРМКПереопределяемый.ТребуетсяКонтрольОстатков(ЭтотОбъект);
	
	Если КонтролироватьОстаткиДляПользователя Тогда
		ОбщегоНазначенияРМКПереопределяемый.ПроверитьНаличиеТоваров(ЭтотОбъект, КонтрольОстатковПройден, ТекстОшибки);
	КонецЕсли;
	
	Возврат КонтрольОстатковПройден;
	
КонецФункции

&НаСервереБезКонтекста
Процедура АннулироватьЧек(ОтложенныйЧек)
	ОбщегоНазначенияРМКПереопределяемый.АннулироватьЧек(ОтложенныйЧек);
КонецПроцедуры

&НаСервере
Процедура ОчиститьТаблицуПодарочныхСертификатов()
	
	Для Каждого СтрокаТаблицы Из ТаблицаПодарочныхСертификатов Цикл
		УдалитьПодарочныйСертификат(СтрокаТаблицы.НомерСертификата);
	КонецЦикла;
	
	ТаблицаПодарочныхСертификатов.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьБонусамиКлиент()
	
	РассчитыватьБонусы = Истина;
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПравоОбщая);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаБонусами, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСуммаБонусов, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Истина);
	
	РассчитатьСуммуОплатыБонусами();
	
	Если СуммаОплаченоБонусами > 0 И СуммаБонусов = СуммаОплаченоБонусами
		И СуммаКОплате = 0 Тогда
	
		ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
		ПараметрыПересчета.ПоКомандеОплатитьВсюСуммуБонусами = Истина;
		РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКартуКлиент()
	
	Если ОбщегоНазначенияРМККлиентПереопределяемый.СоздаватьЛокальноКартуЛояльности() Тогда
		
		СтруктураРезультат = СтруктураРезультатСервисаЛояльности();
		СоздатьЛокальноКартуЛояльности(СтруктураРезультат);
		Если СтруктураРезультат.ЕстьОшибки Тогда
			ПоказатьОповещениеПользователя(СтруктураРезультат.ТекстОшибки,,, БиблиотекаКартинок.Ошибка32);
		ИначеЕсли СтруктураРезультат.Свойство("ТекстСообщения") И СтруктураРезультат.Свойство("КартинкаСообщения") Тогда
			ПоказатьОповещениеПользователя(СтруктураРезультат.ТекстСообщения,,, СтруктураРезультат.КартинкаСообщения);
		КонецЕсли;
		ИзменитьКартинкуВводПокупателя();
		Возврат;
		
	Иначе
		
		ПараметрыМетода = ПараметрыМетодовБонуснойПодсистемы(Истина);
		ПараметрыЗапроса = ПараметрыЗапросаКСервисуЛояльности();
		ПараметрыЗапроса.Ресурс = "issueclientcard";
		ПараметрыЗапроса.ПараметрыМетода = ПараметрыМетода;
		СтруктураРезультат = ВыполнитьЗапросКСервисуЛояльности(ПараметрыЗапроса);
		
	КонецЕсли;
	
	Если НЕ СтруктураРезультат.ЕстьОшибки Тогда
		
		ДанныеОтвета = Неопределено;
		
		#Если ВебКлиент Тогда
			ПрочитатьJSONСервер(СтруктураРезультат.ДанныеОтвета, ДанныеОтвета);
		#Иначе
			ПрочитатьJSONКлиент(СтруктураРезультат.ДанныеОтвета, ДанныеОтвета);
		#КонецЕсли
		
		Если ТипЗнч(ДанныеОтвета) = Тип("Структура") И ДанныеОтвета.Свойство("ExistingCard")
			И ДанныеОтвета.ExistingCard Тогда
			
			ТекстСообщения = НСтр("ru = 'Карта уже существует'");
			КартинкаСообщения = БиблиотекаКартинок.Предупреждение32;
			
			Если ДанныеОтвета.Свойство("CardID") Тогда
				НоваяКартаНомер = ДанныеОтвета.CardID;
			КонецЕсли;
			
			Если ДанныеОтвета.Свойство("Client") Тогда
				НоваяКартаФИО = ДанныеОтвета.Client;
			КонецЕсли;
			
			Если ДанныеОтвета.Свойство("PhoneNumber") Тогда
				НоваяКартаТелефон = ДанныеОтвета.PhoneNumber;
			КонецЕсли;
			
			Если ДанныеОтвета.Свойство("Email") Тогда
				НоваяКартаПочта = ДанныеОтвета.Email;
				КартинкаСообщения = БиблиотекаКартинок.Успешно32;
			КонецЕсли;
			
		Иначе
			ТекстСообщения = НСтр("ru = 'Карта успешно создана'");
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(ТекстСообщения,,, КартинкаСообщения);
		
	Иначе
		
		ДополнительноеПояснение = НСтр("ru = ''");
		
		Если ЕстьСвойство(СтруктураРезультат, "ТекстОшибки") Тогда
			ДополнительноеПояснение = СтрШаблон(НСтр("ru = 'по причине: %1'"), СтруктураРезультат.ТекстОшибки);
		КонецЕсли;
		
		ТекстПредупреждения = СтрШаблон("%1 %2", НСтр("ru = 'Не удалось создать карту'"), ДополнительноеПояснение);
		ПоказатьПредупреждение(, ТекстПредупреждения);

	КонецЕсли;
	
	УстановитьДоступностьЭлементаФормы(Элементы.НоваяКартаНомер, СтруктураРезультат.ЕстьОшибки);
	УстановитьДоступностьЭлементаФормы(Элементы.НоваяКартаФИО, СтруктураРезультат.ЕстьОшибки);
	УстановитьДоступностьЭлементаФормы(Элементы.НоваяКартаТелефон, СтруктураРезультат.ЕстьОшибки);
	УстановитьДоступностьЭлементаФормы(Элементы.НоваяКартаПочта, СтруктураРезультат.ЕстьОшибки);
	УстановитьДоступностьЭлементаФормы(Элементы.СоздатьКарту, СтруктураРезультат.ЕстьОшибки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиДанныеПокупателяКлиент()
	
	СтрокаПоискаКарты = НСтр("ru = ''");
	НоваяКартаНомер = НСтр("ru = ''");
	НоваяКартаТелефон = НСтр("ru = ''");
	НоваяКартаПочта = НСтр("ru = ''");
	НоваяКартаФИО = НСтр("ru = ''");
	НоваяКартаДатаРождения = НСтр("ru = ''");
	ОтправлятьРассылкиПоПочте = Ложь;
	
	УстановитьДоступностьЭлементаФормы(Элементы.НоваяКартаНомер, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.НоваяКартаФИО, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.НоваяКартаТелефон, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.НоваяКартаПочта, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.СоздатьКарту, Истина);
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПравоДанныеПокупателя);
	
	Если Элементы.ГруппаПоискКарты.Видимость Тогда
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПоискКарты);
	Иначе
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОтправкаЧека);
	КонецЕсли;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Ложь);
	
	ДанныеЗаполнены = ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Или ЗначениеЗаполнено(Объект.Контрагент);
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаПоискКартыПоиск, НЕ ДанныеЗаполнены);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаПоискКартыКартаНайдена, ДанныеЗаполнены);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаПоискКартыКартаНеНайдена, Ложь);
	
	Если Элементы.ГруппаПоискКарты.Видимость Тогда
		ПереключитьНаСтраницуПоискКарты();
	Иначе
		ПереключитьНаСтраницуОтправкаЧека();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ДополнительныеДанныеДляФискализации(БумажныйЧек = Неопределено)
	
	ИдентификаторУстройстваФР = ПодключаемоеОборудование;
	
	ЕстьПродукцияЕГАИС = Ложь;
	ТранспортныйМодуль = Неопределено;
	Отказ = Ложь;
	ТекстОшибки = НСтр("ru = ''");
	
	ДополнительныеДанные = Новый Структура;
	ДополнительныеДанные.Вставить("ЕстьПродукцияЕГАИС", ЕстьПродукцияЕГАИС);
	ДополнительныеДанные.Вставить("Отказ", Отказ);
	ДополнительныеДанные.Вставить("ТекстОшибки", ТекстОшибки);
	ДополнительныеДанные.Вставить("ТранспортныйМодуль", ТранспортныйМодуль);
	ДополнительныеДанные.Вставить("ИдентификаторУстройстваФР", ИдентификаторУстройстваФР);
	ДополнительныеДанные.Вставить("ПечататьБумажныйЧек", ?(БумажныйЧек = Неопределено,
		ПечататьБумажныйЧек, БумажныйЧек));
	
	Возврат ДополнительныеДанные;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокСерийИПартий()
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивСерий = Новый Массив;
	МассивУжеДобавленныхСерий = Объект.Товары.Выгрузить().ВыгрузитьКолонку("Серия");
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьСписокВыбораСерийНоменклатуры(
		ТекущаяСтрока.Номенклатура,
		МассивСерий,
		МассивУжеДобавленныхСерий);
	
	Элементы.ВыборСерии.СписокВыбора.ЗагрузитьЗначения(МассивСерий);
	
	Если МассивСерий.Количество() > 0 Тогда
		
		МассивТипов = Новый Массив();
		МассивТипов.Добавить(ТипЗнч(МассивСерий[0]));
		ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
		Элементы.ВыборСерии.ОграничениеТипа = ОписаниеТипа;
		
	КонецЕсли;
	
	МассивПартий = Новый Массив;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьСписокВыбораПартийНоменклатуры(
		ТекущаяСтрока.Номенклатура,
		МассивПартий);
	
	Элементы.ВыборПартии.СписокВыбора.ЗагрузитьЗначения(МассивПартий);
	
	ОбщегоНазначенияРМКПереопределяемый.ПереопределитьПараметрыЗаполненияСерийИПартий(ТекущаяСтрока, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьСтрокуТовара(ТекущаяСтрока, ТаблицаТовары)
	
	Если ТекущаяСтрока.ЭтоНабор Тогда
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НомерНабора", ТекущаяСтрока.НомерНабора);
		МассивСтрокНабора = ТаблицаТовары.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаМассива Из МассивСтрокНабора Цикл
			ТаблицаТовары.Удалить(СтрокаМассива);
		КонецЦикла;
		
	Иначе
		ТаблицаТовары.Удалить(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЧекНаВозвратСкупки()
	
	СформироватьЗаголовок(НСтр("ru='Возврат скупки'"));
	
	КассыККМИОрганизации = ПодключенныеКассыККМИОрганизации();
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("МассивКассККМ", КассыККМИОрганизации.МассивКассККМ);
	ПараметрыОткрытия.Вставить("МассивОрганизаций", КассыККМИОрганизации.МассивОрганизаций);
	ПараметрыОткрытия.Вставить("ТорговыйОбъект", Объект.ТорговыйОбъект);
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru='Выбор чека для возврата скупки'"));
	ПараметрыОткрытия.Вставить("ВозвратСкупки", Истина);
	
	Объект.ВидОперации = ОбщегоНазначенияРМККлиентПереопределяемый.ВидОперацииЧекаККМ(Истина, Истина);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборЧекаЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.РабочееМестоКассира.Форма.ФормаВыбораЧека",
		ПараметрыОткрытия, ЭтотОбъект,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДокументОплатыРассрочки()

	СформироватьЗаголовок(НСтр("ru='Оплата рассрочки'"));
	
	КассыККМИОрганизации = ПодключенныеКассыККМИОрганизации();
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("МассивКассККМ", КассыККМИОрганизации.МассивКассККМ);
	ПараметрыОткрытия.Вставить("МассивОрганизаций", КассыККМИОрганизации.МассивОрганизаций);
	ПараметрыОткрытия.Вставить("ТорговыйОбъект", Объект.ТорговыйОбъект);
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru='Выбор чека для оплаты рассрочки'"));
	ПараметрыОткрытия.Вставить("ВыборДокументаРассрочки", Истина);
	ПараметрыОткрытия.Вставить("Контрагент", Объект.Контрагент);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеВыборДокументаРасчета", ЭтотОбъект);
	ОткрытьФорму("Обработка.РабочееМестоКассира.Форма.ФормаВыбораЧека",
		ПараметрыОткрытия, ЭтотОбъект,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияНаСервере(ИмяСобытия, Параметр, Источник)
	ОбщегоНазначенияРМКПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
КонецПроцедуры

#КонецОбласти

#Область РучныеСкидкиИОкругление

&НаКлиенте
Функция СуммаРучнойСкидкиНаПозицию(СтрокаЧека)
	
	Результат = 0;
	
	Если ТипЗнч(СтрокаЧека) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		
		Если ЭтоСоставляющаяНабора(СтрокаЧека) Тогда
			
			СоставНабора = СоставНабораПоЭлементуНабора(СтрокаЧека, Объект.Товары);
			
			Для Каждого ПозицияНабора Из СоставНабора Цикл
				Результат = Результат + ПозицияНабора.СуммаСкидкиНаценки;
			КонецЦикла;
			
		Иначе
			Результат = СтрокаЧека.СуммаСкидкиНаценки;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Устанавливает текущей заданную страницу, меняет активность элементов формы.
//
// Параметры:
//  АктивнаяСтраница - ЭлементФормы - страница для установки текущей;
//  АктивностьЭлементовУправленияФормы - Булево - новое значение элементов формы.
//
&НаКлиенте
Процедура НастроитьИнтерфейсПримененияСкидкиНаЧек(АктивнаяСтраница, АктивностьЭлементовУправленияФормы)

	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(АктивнаяСтраница);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаПраво, АктивностьЭлементовУправленияФормы);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, АктивностьЭлементовУправленияФормы);
	УстановитьДоступностьЭлементаФормы(Элементы.ПанельИзбранныхТоваров , АктивностьЭлементовУправленияФормы);
	
КонецПроцедуры

&НаКлиенте
Функция ДопускаетсяПрименениеСкидокНаТовар(СтрокаКорзины)

	ДопускаетсяПрименениеСкидки = СтрокаКорзины.ТипНоменклатуры <>
			ОбщегоНазначенияРМККлиентПереопределяемый.ТипНоменклатурыПодарочныйСертификат();
			
	Если ДопускаетсяПрименениеСкидки Тогда
				
		КатегорииБезПредоставленияСкидок = Новый Массив;
		КатегорииБезПредоставленияСкидок.Добавить(ОбщегоНазначенияРМККлиентПереопределяемый.ОсобенностьУчетаАлкоголь());
		КатегорииБезПредоставленияСкидок.Добавить(ОбщегоНазначенияРМККлиентПереопределяемый.ОсобенностьУчетаТабак());
		
		РезультатПоиска = КатегорииБезПредоставленияСкидок.Найти(СтрокаКорзины.ОсобенностьУчета);
		
		ДопускаетсяПрименениеСкидки = ДопускаетсяПрименениеСкидки И (РезультатПоиска = Неопределено);
		
	КонецЕсли;
		
	Возврат ДопускаетсяПрименениеСкидки;
	
КонецФункции

&НаКлиенте
Процедура УстановитьЗначенияСкидкиВСтрокеКорзины(СтрокаКорзины, ЗначениеСкидки, ЭтоСкидкаПроцентом = Истина)
	
	ЭтоПрименениеСкидки = (ЗначениеСкидки > 0);
	
	СтрокаКорзины.РассчитанаСкидка = ЭтоПрименениеСкидки;
	
	Если ЭтоПрименениеСкидки Тогда
		
		Если ЭтоСкидкаПроцентом Тогда
			
			СтрокаКорзины.ПроцентСкидкиНаценки = ЗначениеСкидки;
			СтрокаКорзины.СуммаСкидкиНаценки = 0;
			
		Иначе
			
			СтрокаКорзины.СуммаСкидкиНаценки = ЗначениеСкидки;
			СтрокаКорзины.ПроцентСкидкиНаценки = 0;
			
		КонецЕсли;
			
	Иначе
		
		СтрокаКорзины.СуммаСкидкиНаценки = ЗначениеСкидки;
		СтрокаКорзины.ПроцентСкидкиНаценки = ЗначениеСкидки;
		
	КонецЕсли;
		
КонецПроцедуры

// Вычисляет сумму округления и распределяет ее между позициями корзины.
//
&НаКлиенте
Процедура ОкруглитьСуммуЧекаВПользуПокупателя()
	
	Если ТочностьОкругления > 0.01 Тогда
		
		СуммаОкругленийВЧеке = Объект.Товары.Итог("СуммаАвтоматическойСкидки");
		
		Если СуммаОкругленийВЧеке > 0 Тогда
			ОтменитьОкругление(Ложь);
		КонецЕсли; 
		
		Если ОкруглятьЧекВПользуПокупателяПострочно Тогда
			РассчитатьСуммуОкругленияПострочно();
		Иначе
			РассчитатьСуммуОкругленияСРаспределениемНаЧек();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОкругление(ОбнулитьСуммыОплат = Истина)
	
	Если Объект.Товары.Итог("СуммаАвтоматическойСкидки") <> 0 Тогда
		
		Для Каждого СтрокаКорзины Из Объект.Товары Цикл
			
			Если СтрокаКорзины.Оплачена Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаКорзины.Сумма = СтрокаКорзины.Сумма + СтрокаКорзины.СуммаАвтоматическойСкидки;
			СтрокаКорзины.СуммаАвтоматическойСкидки = 0;
			
			// Пересчет НДС
			Если СтрокаКорзины.СуммаНДС > 0 Тогда
				РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаКорзины.ПолучитьИдентификатор());
			КонецЕсли;
			
		КонецЦикла;
		
		ПересчитатьИтогиТабличнойЧастиТовары(ОбнулитьСуммыОплат);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуОкругленияПострочно()
	
	СуммаПослеОкругления = 0;
	ПозицииССуммойНижеОкругления = Новый Массив;
	
	Для каждого СтрокаКорзины Из Объект.Товары Цикл
		
		Если НЕ ДопускаетсяПрименениеСкидокНаТовар(СтрокаКорзины) Тогда
			Продолжить;
		КонецЕсли;
		
		ОкругленнаяСумма = Цел(СтрокаКорзины.Сумма / ТочностьОкругления) * ТочностьОкругления;
		СуммаОкругления = СтрокаКорзины.Сумма - ОкругленнаяСумма;
		
		Если СтрокаКорзины.Сумма <= СуммаОкругления Тогда
			
			ПозицииССуммойНижеОкругления.Добавить(СтрокаКорзины);
			Продолжить;
			
		Иначе
			
			СтрокаКорзины.СуммаАвтоматическойСкидки = СуммаОкругления;
			ОбщегоНазначенияРМККлиентСервер.РассчитатьСуммуНДС(Объект, СтрокаКорзины);
			
		КонецЕсли;
		
		ПересчитатьСуммы(СтрокаКорзины);
		СуммаПослеОкругления = СуммаПослеОкругления + СтрокаКорзины.Сумма;
		
	КонецЦикла;
	
	Если СуммаПослеОкругления > 0 Тогда
		
		Для каждого СтрокаКорзины Из ПозицииССуммойНижеОкругления Цикл
			
			РезультатОкругления = Цел(СтрокаКорзины.Сумма / ТочностьОкругления) * ТочностьОкругления;
			СуммаОкругления = СтрокаКорзины.Сумма - РезультатОкругления;
			
			Если СуммаОкругления > 0 Тогда
				СтрокаКорзины.СуммаАвтоматическойСкидки = СуммаОкругления;
			КонецЕсли;
			
			ПересчитатьСуммы(СтрокаКорзины);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуОкругленияСРаспределениемНаЧек()
	
	СуммаДоОкругления					= 0;
	СуммаТоваровБезСкидок				= 0;
	МассивКоэффициентов					= Новый Массив;
	ТочностьОкругленияПриРаспределении	= 2;
	РаспределенныеОкругления			= Новый Массив;
	
	ОтборСтрок = ВыбраннаяОрганизацияИСНО();
	ОтборСтрок.Вставить("Оплачена", Ложь);
	СтрокиСОтбором = Объект.Товары.НайтиСтроки(ОтборСтрок);
	
	Для каждого СтрокаКорзины Из СтрокиСОтбором Цикл
		
		Если ДопускаетсяПрименениеСкидокНаТовар(СтрокаКорзины) Тогда
			
			СуммаДоОкругления = СуммаДоОкругления + СтрокаКорзины.Сумма;
			МассивКоэффициентов.Добавить(СтрокаКорзины.Сумма);
			
		Иначе
			СуммаТоваровБезСкидок = СуммаТоваровБезСкидок + СтрокаКорзины.Сумма;
		КонецЕсли;
		
	КонецЦикла;
	
	СуммаПослеОкругления = Цел(СуммаДоОкругления / ТочностьОкругления) * ТочностьОкругления;
	СуммаОкругленийВЧеке = СуммаДоОкругления - СуммаПослеОкругления;
	
	Если СуммаОкругленийВЧеке > 0 И СуммаПослеОкругления > 0 Тогда
		
		ИндексСтрокиДляРаспределенияПогрешностиОкругления = -1;
		СуммаСтрокиДляРаспределенияПогрешностиОкругления = 0;
		Итератор = 0;
		
		РаспределенныеОкругления =
			ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(СуммаОкругленийВЧеке,
				МассивКоэффициентов, ТочностьОкругленияПриРаспределении);
			
		ДоступныДанныеРаспределения = (РаспределенныеОкругления.Количество() > 0);
			
		ИдентификаторТекущейСтрокиДоРасчетаОкруглений = ТекущийТоварИдентификатор;
		
		СуммаПоСтрокам = 0;
		Для Каждого СтрокаКорзины Из СтрокиСОтбором Цикл
			
			ТекущийТоварИдентификатор = СтрокаКорзины.ПолучитьИдентификатор();
			
			Если НЕ ДопускаетсяПрименениеСкидокНаТовар(СтрокаКорзины) Тогда
				
				СуммаПоСтрокам = СуммаПоСтрокам + СтрокаКорзины.Сумма;
				Продолжить;
				
			КонецЕсли;
			
			Если ДоступныДанныеРаспределения Тогда
				
				Если СтрокаКорзины.Сумма > СуммаСтрокиДляРаспределенияПогрешностиОкругления Тогда
					
					СуммаСтрокиДляРаспределенияПогрешностиОкругления = СтрокаКорзины.Сумма;
					ИндексСтрокиДляРаспределенияПогрешностиОкругления = Итератор;
					
				КонецЕсли;
				
				ЗначениеСкидкиОкруглением = РаспределенныеОкругления[Итератор];
				СтрокаКорзины.СуммаАвтоматическойСкидки = ЗначениеСкидкиОкруглением;
				
				Итератор = Итератор + 1;
				
			КонецЕсли;
			
			РассчитатьСуммуВСтрокеТабличнойЧасти(ТекущийТоварИдентификатор);
			
			СуммаПоСтрокам = СуммаПоСтрокам + СтрокаКорзины.Сумма;
			
		КонецЦикла;
		
		Погрешность = СуммаПослеОкругления + СуммаТоваровБезСкидок - СуммаПоСтрокам;
		
		Если Погрешность <> 0 И ИндексСтрокиДляРаспределенияПогрешностиОкругления >= 0 Тогда
			
			СтрокаКорзины = Объект.Товары.Получить(ИндексСтрокиДляРаспределенияПогрешностиОкругления);
			СтрокаКорзины.СуммаАвтоматическойСкидки = СтрокаКорзины.СуммаАвтоматическойСкидки - Погрешность;
			СтрокаКорзины.Сумма = СтрокаКорзины.Сумма + Погрешность;
			ПересчитатьСуммы(СтрокаКорзины);
			
		КонецЕсли;
		
		ТекущийТоварИдентификатор = ИдентификаторТекущейСтрокиДоРасчетаОкруглений;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФФД12

&НаКлиенте
Процедура ДобавитьТоварПоДаннымМарки(ЭтоОбработкаСопоставленияТовара)

	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОплата);
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	НастроитьДоступностьПробитьЧек();
	ОграничитьДоступностьЭлементовПриОжиданииМарки(Ложь);

	Если ЭтоОбработкаСопоставленияТовара Тогда
		
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
		ДанныеДляРучногоСопоставления = Неопределено;
		
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Функция КонтекстПроверкиКонтрольнойМарки()
	
	КонтекстПроверкиКонтрольнойМарки = Новый Структура();
	КонтекстПроверкиКонтрольнойМарки.Вставить("КодМаркировки", "");
	КонтекстПроверкиКонтрольнойМарки.Вставить("ОсобенностьУчета",
		ОбщегоНазначенияРМККлиентПереопределяемый.ПустаяСсылкаНаОсобенностьУчетаНоменклатуры());
	КонтекстПроверкиКонтрольнойМарки.Вставить("КонтекстВызова", "");
	КонтекстПроверкиКонтрольнойМарки.Вставить("РезультатЛокальнойПроверки", РезультатЛокальнойПроверки());
	КонтекстПроверкиКонтрольнойМарки.Вставить("РезультатУдаленнойПроверки", РезультатУдаленнойПроверки());
	КонтекстПроверкиКонтрольнойМарки.Вставить("ИдентификаторЗапроса", "");
	КонтекстПроверкиКонтрольнойМарки.Вставить("ЭтоОбработкаСопоставленияТовара", Ложь);
	КонтекстПроверкиКонтрольнойМарки.Вставить("Организация", Неопределено);

	
	Возврат КонтекстПроверкиКонтрольнойМарки;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьКонтрольнуюМарку(КонтекстПроверкиКонтрольнойМарки)
	
	Если ЕстьСвойство(КонтекстПроверкиКонтрольнойМарки, "КодМаркировки")
		И ЗначениеЗаполнено(КонтекстПроверкиКонтрольнойМарки.КодМаркировки) Тогда

		РассчитатьСуммуВСтрокеТабличнойЧасти(ТекущийТоварИдентификатор);
		
		ОтборПоКодуМарки = Новый Структура();
		ОтборПоКодуМарки.Вставить("КодМаркировки", КонтекстПроверкиКонтрольнойМарки.КодМаркировки);
		РезультатПоиска = Объект.Товары.НайтиСтроки(ОтборПоКодуМарки);
		
		Если (РезультатПоиска.Количество() = 1 
			И НЕ ЗначениеЗаполнено(РезультатПоиска[0].КонтрольнаяМарка))
			ИЛИ РезультатПоиска.Количество() = 0 Тогда
		
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПодтвержденияКонтрольнойМарки);
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.ПодтверждениеПродажиОжиданиеПроверки);
		УстановитьДоступностьЭлементовРабочейОбластиФормы(Ложь);
		
		ВременныйКонтекстПроверкиМарки = КонтекстПроверкиКонтрольнойМарки;
		
		Отбор = Новый Структура("Организация", ВременныйКонтекстПроверкиМарки.Организация);
		СтрокаКассы = ТаблицаКассККМОрганизаций.НайтиСтроки(Отбор)[0];
		ПодключаемоеОборудованиеДляПроверкиМарки = СтрокаКассы.ИдентификаторУстройства;
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПолучениеТекущегоСостоянияККТЗавершение", ЭтотОбъект);
		ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьПолучениеТекущегоСостоянияФискальногоУстройства(
			ОповещениеОЗавершении, УникальныйИдентификатор, ПодключаемоеОборудованиеДляПроверкиМарки);
		
		Иначе
			
			Если РезультатПоиска.Количество() > 0 Тогда
				Элементы.Товары.ТекущаяСтрока = РезультатПоиска[0].ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеТекущегоСостоянияККТЗавершение(РезультатВыполнения, Контекст) Экспорт
	
	Если РезультатВыполнения.Результат И РезультатВыполнения.СтатусСмены = 2 Тогда
		
		// Замедление до секунды, чтобы касса успевала отработать
		ПодключитьОбработчикОжидания("ЗапроситьКонтрольныеМарки", 1, Истина);
		
	Иначе
		
		ОтборДляПоискаПоМарке = Новый Структура("КодМаркировки",
			ВременныйКонтекстПроверкиМарки.КодМаркировки);
		
		СтрокиКУдалению = Объект.Товары.НайтиСтроки(ОтборДляПоискаПоМарке);
		
		Если СтрокиКУдалению.Количество() > 0 Тогда
			Объект.Товары.Удалить(СтрокиКУдалению[0]);
		КонецЕсли;
		
		ПересчитатьИтогиТабличнойЧастиТовары();
		РассчитатьСуммуОплатыБонусами();
		
		Если Объект.Товары.Количество() = 0 Тогда
			СоздатьНовыйНабор();
		КонецЕсли;
		
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОплата);
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
		
		ВременныйКонтекстПроверкиМарки = Неопределено;
		ОжидатьВводМарки = Ложь;
		ДанныеДляРучногоСопоставления = Неопределено;
		УстановитьДоступностьЭлементовРабочейОбластиФормы(Истина);
		
		ТекстЗаголовка = НСтр("ru = 'Ошибка добавления маркированного товара.'");
		ТекстСообщения = НСтр("ru = 'Кассовая смена закрыта или истекла.'");;
		ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстСообщения);
		
	КонецЕсли; 
	
КонецПроцедуры


&НаКлиенте
Процедура ЗавершитьЗапросКонтрольныхМарок(РезультатВыполнения, Контекст) Экспорт
	
	Если ЕстьСвойство(РезультатВыполнения, "Результат") И РезультатВыполнения.Результат Тогда
		
		ДанныеПроверки = ДанныеПроверкиКодаМаркировки(РезультатВыполнения);
		
		Если ЗначениеЗаполнено(ДанныеПроверки) И ТипЗнч(ДанныеПроверки) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(Контекст.РезультатЛокальнойПроверки, ДанныеПроверки);
		КонецЕсли;
		
	КонецЕсли;
	
	// Замедление до секунды, чтобы касса успевала отработать
	ЗаполнитьЗначенияСвойств(ВременныйКонтекстПроверкиМарки, Контекст);
	ВременныйКонтекстПроверкиМарки = Контекст;
	ПодключитьОбработчикОжидания("ПолучитьРезультатыЗапросаКМ", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПолучениеРезультатовЗапросаПроверкиКодаМаркировкиОтИСМП(РезультатВыполнения, Контекст) Экспорт
	
	Если ЕстьСвойство(РезультатВыполнения, "Результат") И РезультатВыполнения.Результат Тогда
		
		ДанныеРезультатаПроверки = ДанныеПроверкиКодаМаркировки(РезультатВыполнения);
		
		Если ЗначениеЗаполнено(ДанныеРезультатаПроверки) Тогда
			
			ЗаполнитьРезультатУдаленнойПроверки(Контекст.РезультатУдаленнойПроверки, ДанныеРезультатаПроверки);
			ЗаполнитьЗначенияСвойств(ВременныйКонтекстПроверкиМарки, Контекст);
			
			РезультатПроверкиККМ = Контекст.РезультатЛокальнойПроверки;
			РезультатПроверкиИСМП = Контекст.РезультатУдаленнойПроверки;
			
			ТребуетсяПовторнаяУдаленнаяПроверка = ТребуетсяПовторныйЗапросВОИСМ(РезультатПроверкиИСМП);
			ПроведенаПроверкаОИСМ = ?(ЕстьСвойство(РезультатВыполнения, "РезультатПроверкиОИСМ"),
				РезультатВыполнения.РезультатПроверкиОИСМ, Ложь);
			
			Если ТребуетсяПовторнаяУдаленнаяПроверка Тогда
			
				Контекст.РезультатУдаленнойПроверки = РезультатУдаленнойПроверки();
				ВременныйКонтекстПроверкиМарки = Контекст;
				// Замедление до секунды, чтобы касса успевала отработать
				ПодключитьОбработчикОжидания("ПолучитьРезультатыЗапросаКМ", 1, Истина);

			ИначеЕсли ПроведенаПроверкаОИСМ Тогда
				НачатьПодтверждениеМарки(Контекст);
			Иначе
				
				СтраницаДиалога = Элементы.ПодтверждениеПродажиБезПроверкиМарки;
				ОбработатьОшибкуПроверкиМарки(Контекст, СтраницаДиалога);
				
			КонецЕсли;
			
		Иначе
			
			ТекстЗаголовка = НСтр("ru = 'Не удалось получить данные ответа проверки кода маркировки в ИСМП.'");
			ТекстСообщения = РезультатВыполнения.ОписаниеОшибки;
			ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстСообщения);
			
		КонецЕсли;
		
	Иначе
		
		СтраницаДиалога = Элементы.ПодтверждениеПродажиБезПроверкиМарки;
		ОбработатьОшибкуПроверкиМарки(Контекст, СтраницаДиалога);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборТовара(ТекущийВыбор, ДействующиеЗапретыПродаж = Неопределено)
	
	Если ИспользоватьЗапретПродаж И ЗначениеЗаполнено(ТекущийВыбор.Номенклатура) Тогда
		
		ТекущийКэшЗапретов = КэшЗапретовПродаж;
		ДействующиеЗапретыПродаж = ОбщегоНазначенияРМККлиент.НаличиеЗапретовПродажи(ТекущийВыбор.ВидНоменклатуры,
			ТекущийВыбор.ОсобенностьУчета,ТекущийКэшЗапретов);
		
		Если ДействующиеЗапретыПродаж.Количество() Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	КодМарки = ?(ЕстьСвойство( ДанныеДляРучногоСопоставления, "КодМарки"),
			ДанныеДляРучногоСопоставления.КодМарки, "");
			
	ОсобенностьУчета = ОбщегоНазначенияРМККлиентПереопределяемый.ПустаяСсылкаНаОсобенностьУчетаНоменклатуры();
	Если ТекущийВыбор.Свойство("ОсобенностьУчета") Тогда
		ОсобенностьУчета = ТекущийВыбор.ОсобенностьУчета;
	КонецЕсли;
	
	ПсевдоСтрока = Новый Структура;
	ПсевдоСтрока.Вставить("Номенклатура", ТекущийВыбор.Номенклатура);
	ПсевдоСтрока.Вставить("Организация");
	
	Если ТекущийВыбор.Свойство("Организация") Тогда
		ПсевдоСтрока.Организация = ТекущийВыбор.Организация;
	КонецЕсли;
	
	ЗаполнитьОрганизациюПродажи(ПсевдоСтрока);
	
	Если НЕ ЗначениеЗаполнено(ПсевдоСтрока.Организация) Тогда
		ПсевдоСтрока.Организация = ОсновнаяОрганизация;
	Иначе
		
		ОтборПоОрганизации = Новый Структура("Организация", ПсевдоСтрока.Организация);
		КассыККМПоОрганизации = ТаблицаКассККМОрганизаций.НайтиСтроки(ОтборПоОрганизации);
		Если КассыККМПоОрганизации.Количество() = 0 Тогда
			ПсевдоСтрока.Организация = ОсновнаяОрганизация;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПроверкаМаркиВозможна(КодМарки, ОсобенностьУчета, ПсевдоСтрока.Организация) Тогда
		
		КонтекстПроверкиКонтрольнойМарки = КонтекстПроверкиКонтрольнойМарки();
		ЗаполнитьЗначенияСвойств(КонтекстПроверкиКонтрольнойМарки, ТекущийВыбор);
		КонтекстПроверкиКонтрольнойМарки.Организация = ПсевдоСтрока.Организация;
		КонтекстПроверкиКонтрольнойМарки.КодМаркировки = КодМарки;
		КонтекстПроверкиКонтрольнойМарки.КонтекстВызова = "ОбработатьВыборТовара";
		
		КонтекстПроверкиКонтрольнойМарки.Вставить("ТекущийВыбор", ТекущийВыбор);
		КонтекстПроверкиКонтрольнойМарки.Вставить("ДействующиеЗапретыПродаж", ДействующиеЗапретыПродаж);
		
		ОбработатьКонтрольнуюМарку(КонтекстПроверкиКонтрольнойМарки);
		
	Иначе
		ОбработатьВыборТовараСервер(ТекущийВыбор, ДействующиеЗапретыПродаж);
	КонецЕсли;
	
	ЕстьНезаполненныеДанные();
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеЗапросаКМ(ПроверяемыйКодМарки, Количество = 1)
	
	ПараметрыЗапроса = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыЗапросКМ();
	ЭтоВозврат = ОбщегоНазначенияРМККлиентПереопределяемый.ВидОперацииВозвратПродажи(Объект.ВидОперации);

	ПланируемыйСтатусТовара = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(
			"Перечисление.ПланируемыйСтатусМаркируемогоТовара.ШтучныйТоварРеализован");
	
	Если ЭтоВозврат Тогда
		ПланируемыйСтатусТовара = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(
			"Перечисление.ПланируемыйСтатусМаркируемогоТовара.ШтучныйТоварВозвращен");
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если Не ТекущаяСтрока = Неопределено Тогда
		
		Если ТекущаяСтрока.ПоштучноеВыбытие Тогда
			
			ПланируемыйСтатусТовара = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(
					"Перечисление.ПланируемыйСтатусМаркируемогоТовара.МерныйТоварВСтадииРеализации");
			
			Если ЭтоВозврат Тогда
				ПланируемыйСтатусТовара = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(
					"Перечисление.ПланируемыйСтатусМаркируемогоТовара.ЧастьТовараВозвращена");
			КонецЕсли;
			
			ПараметрыЗапроса.ДробноеКоличество.Числитель = ТекущаяСтрока.ЧастичноеВыбытиеКоличество;
			ПараметрыЗапроса.ДробноеКоличество.Знаменатель = ТекущаяСтрока.КоличествоВПотребительскойУпаковке;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИдентификаторТекущейСессииПроверкиМарок		= Строка(Новый УникальныйИдентификатор);
	ПараметрыЗапроса.ИдентификаторЗапроса		= ИдентификаторТекущейСессииПроверкиМарок;
	ПараметрыЗапроса.ПланируемыйСтатусТовара	= ПланируемыйСтатусТовара;
	ПараметрыЗапроса.КонтрольнаяМарка			= ПроверяемыйКодМарки;
	ПараметрыЗапроса.ОжидатьПолучениеОтветаОИСМ	= ОжидатьПолученияОтветаИСМП;
	ПараметрыЗапроса.Количество					= Количество;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПривестиКодМаркировкиКBase64(КодМаркировки)
	
	СимволGS1 = МенеджерОборудованияМаркировкаКлиентСервер.РазделительGS1();
	Разделитель = МенеджерОборудованияМаркировкаКлиентСервер.ЭкранированныйСимволGS1();
	КодМаркировкиОригинал = СтрЗаменить(КодМаркировки, Разделитель, СимволGS1);
	
	Возврат МенеджерОборудованияКлиентСервер.ШтрихкодВBase64(КодМаркировкиОригинал);
	
КонецФункции

&НаКлиенте
Функция ПроверкаМаркиВозможна(КодМарки, ОсобенностьУчета, Организация)
	
	Результат = Ложь;
	
	Если НЕ ЗначениеЗаполнено(КодМарки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Отбор = Новый Структура("Организация", Организация);
	СтрокиКасс = ТаблицаКассККМОрганизаций.НайтиСтроки(Отбор);
	
	Если СтрокиКасс.Количество() = 0 Тогда
		
		Отбор = Новый Структура("Организация", ОсновнаяОрганизация);
		СтрокаКассы = ТаблицаКассККМОрганизаций.НайтиСтроки(Отбор)[0];
		
	Иначе
		СтрокаКассы = СтрокиКасс[0];
	КонецЕсли;
	
	ПоддерживаетПроверкуКодовМаркировки = СтрокаКассы.ПоддерживаетПроверкуКодовМаркировки;
	
	Если НЕ ПоддерживаетПроверкуКодовМаркировки Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЭтоАлкогольнаяМаркированнаяПродукция =
		(ОсобенностьУчета = ОбщегоНазначенияРМККлиентПереопределяемый.ОсобенностьУчетаАлкоголь());
	ЭтоИзделиеИзНатуральногоМеха =
		(ОсобенностьУчета = ОбщегоНазначенияРМККлиентПереопределяемый.ОсобенностьУчетаГИСМ());
		
	Результат = НЕ(ЭтоАлкогольнаяМаркированнаяПродукция ИЛИ ЭтоИзделиеИзНатуральногоМеха);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ОсобенностьУчетаНоменклатуры(Номенклатура)

	ОтборПоТовару = Новый Структура("Номенклатура", Номенклатура);
	СтрокиКорзины = Объект.Товары.НайтиСтроки(ОтборПоТовару);
	Результат = ?(СтрокиКорзины.Количество() > 0,
		СтрокиКорзины[0].ОсобенностьУчета,
		ОбщегоНазначенияРМККлиентПереопределяемый.ПустаяСсылкаНаОсобенностьУчетаНоменклатуры());
	
	Возврат Результат;


КонецФункции

&НаКлиенте
Функция РезультатЛокальнойПроверки()

	Результат = Новый Структура();
	Результат.Вставить("КодМаркировкиПроверен", Ложь);
	Результат.Вставить("РезультатПроверки", Ложь);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция РезультатУдаленнойПроверки()

	Результат = Новый Структура();
	Результат.Вставить("РезультатПроверкиОИСМ", Ложь);
	Результат.Вставить("КодОбработкиЗапроса", -1);
	Результат.Вставить("КодРезультатаПроверкиОИСМ", -1);
	Результат.Вставить("РезультатПроверкиСведенийОТоваре", "");
	Результат.Вставить("РезультатПроверкиСведенийОТовареПФ", "");
	Результат.Вставить("РезультатОбработкиЗапроса",
		НСтр("ru = 'Ответ из ""Честного знака"" не получен'"));
	Результат.Вставить("РезультатПроверкиОИСМПредставление", "");
	Результат.Вставить("СтатусОбработкиЗапроса",
		ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.СтатусОбработкиЗапросаКМ.ПустаяСсылка"));
	Результат.Вставить("СтатусРезультата",
		ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.СтатусРезультатаЗапросаКМ.ПустаяСсылка"));
	Результат.Вставить("СтатусТовара",
		ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ОтветОИСМОСтатусеТовара.ПустаяСсылка"));
			
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ДанныеПроверкиКодаМаркировки(ИсходныеДанные)

	Результат = Неопределено;
	
	Если ТипЗнч(ИсходныеДанные) = Тип("Структура")
		И ЗначениеЗаполнено(ИсходныеДанные) Тогда
			Результат = ИсходныеДанные;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ЗаполнитьРезультатУдаленнойПроверки(РезультатПроверки, ИсходныеДанные)

	ЗаполнитьЗначенияСвойств(РезультатПроверки, ИсходныеДанные);
	
	Если ЕстьСвойство(ИсходныеДанные, "КодОбработкиЗапроса")
		И ТипЗнч(ИсходныеДанные.КодОбработкиЗапроса) = Тип("Число") Тогда
		
			КодОбработкиЗапроса = ИсходныеДанные.КодОбработкиЗапроса;
			
			Если КодОбработкиЗапроса = 0 Тогда
				РезультатОбработкиЗапроса = НСтр("ru = 'Формат запроса и кода маркировки корректны'");
			ИначеЕсли КодОбработкиЗапроса = 1 Тогда
				РезультатОбработкиЗапроса = НСтр("ru = 'Некорректный формат запроса'");
			ИначеЕсли КодОбработкиЗапроса = 2 Тогда
				РезультатОбработкиЗапроса = НСтр("ru = 'Некорректный формат кода маркировки'");
			Иначе
				РезультатОбработкиЗапроса = НСтр("ru = 'Ответ из ""Честного знака"" не распознан'");
			КонецЕсли;
			
			РезультатПроверки.РезультатОбработкиЗапроса = РезультатОбработкиЗапроса;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ТребуетсяПовторныйЗапросВОИСМ(ДанныеОИСМ)

	Результат = Ложь;
	
	Если ЕстьСвойство(ДанныеОИСМ, "СтатусРезультата") Тогда
		
		Результат =(ДанныеОИСМ.СтатусРезультата =
			ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.СтатусРезультатаЗапросаКМ.Ожидается"));
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура НачатьПодтверждениеМарки(Контекст)
	
	ИдентификаторЗапроса = Контекст.ИдентификаторЗапроса;
	ПараметрыПодтвержденияКМ = МенеджерОборудованияКлиентСервер.ПараметрыПодтверждениеКМ();
	ПараметрыПодтвержденияКМ.ИдентификаторЗапроса = ИдентификаторЗапроса;
	ПараметрыПодтвержденияКМ.Выбытие = Истина;
	
	Отбор = Новый Структура("Организация", Контекст.Организация);
	СтрокаКассы = ТаблицаКассККМОрганизаций.НайтиСтроки(Отбор)[0];
	ПодключаемоеОборудованиеДляПроверкиМарки = СтрокаКассы.ИдентификаторУстройства;
		
	ОповещениеОЗавершенииПодтвержденияКМ = Новый ОписаниеОповещения("ЗавершитьПодтверждениеКонтрольнойМарки",
		ЭтотОбъект, Контекст);
	ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьПодтверждениеКМ(ОповещениеОЗавершенииПодтвержденияКМ,
		УникальныйИдентификатор, ПодключаемоеОборудованиеДляПроверкиМарки, ПараметрыПодтвержденияКМ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПодтверждениеКонтрольнойМарки(РезультатВыполнения, Контекст) Экспорт
	
	Если ЕстьСвойство(РезультатВыполнения, "Результат") И (РезультатВыполнения.Результат) Тогда
		ОбработатьУспешноеДобавлениеМарки(Контекст);
	Иначе
		
		ДанныеПроверки = ДанныеПроверкиКодаМаркировки(РезультатВыполнения);
		СтраницаДиалога = Элементы.ПодтверждениеПродажиБезПроверкиМарки;
		ОбработатьОшибкуПроверкиМарки(Контекст, СтраницаДиалога);
		
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЗакрытиеСессииПроверкиКонтрольныхМарок(РезультатВыполнения, ПараметрыВыполнения) Экспорт

	Если ЕстьСвойство(РезультатВыполнения, "Результат") И НЕ РезультатВыполнения.Результат Тогда
		
		ТекстСообщения = НСтр("ru = 'Не удалось закрыть сессию проверки кода маркировки'");
		
		Если ЕстьСвойство(РезультатВыполнения, "ОписаниеОшибки") Тогда
			ТекстСообщения= СтрШаблон("%1: %2", ТекстСообщения, РезультатВыполнения.ОписаниеОшибки);
		КонецЕсли;
		
		ТекстЗаголовка = НСтр("ru = 'Ошибка закрытия сессии проверки кода маркировки'");
		ПоказатьПредупреждение(, ТекстСообщения,, ТекстЗаголовка);
		
	КонецЕсли;

	ВременныйКонтекстПроверкиМарки = Неопределено;

КонецПроцедуры

&НаСервере
Процедура ДополнитьДаннымиМарок(ПозицииЧека)
	
	ТаблицаТоваров = Объект.Товары;
	ОтборДляПоиска = Новый Структура();
	
	Для Каждого Строка Из ПозицииЧека Цикл
		
		Если НЕ Строка.Свойство("КонтрольнаяМарка") Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка.Свойство("Штрихкод") И ЗначениеЗаполнено(Строка.Штрихкод) Тогда
			
			ОтборДляПоиска.Вставить("КодМаркировки", Строка.Штрихкод);
			Результат = ТаблицаТоваров.НайтиСтроки(ОтборДляПоиска);
			
			Если Результат.Количество() = 1 Тогда
				Строка.КонтрольнаяМарка = ПривестиКодМаркировкиКBase64(Результат[0].КонтрольнаяМарка);
				
				Если НЕ ККМПоддерживаетПроверкуКодовМаркировки И ЗначениеЗаполнено(Строка.КонтрольнаяМарка) Тогда
					Строка.ШтрихкодBase64 = Строка.КонтрольнаяМарка;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыборТовараСервер(ТекущийВыбор, ДействующиеЗапретыПродаж = Неопределено)
	
	МассивТоваров = Новый Массив;
	МассивТоваров.Добавить(ТекущийВыбор.Номенклатура);
	ТаблицаДанных = ОбщегоНазначенияРМКПереопределяемый.ТаблицаДанныхОТоварах(МассивТоваров);
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		Если СтрокаТаблицы.Маркируемый Тогда
			
			Если ЭтоЧекКоррекции Тогда
				Возврат;
			КонецЕсли;
			ДобавитьСтрокуВТабличнуюЧасть(СтрокаТаблицы, ТекущийВыбор, Истина);
			Возврат;
			
		ИначеЕсли СтрокаТаблицы.НеобходимоДобавитьСтроку Тогда
			
			ДобавитьСтрокуВТабличнуюЧасть(СтрокаТаблицы, ТекущийВыбор);
			Возврат;
			
		ИначеЕсли СтрокаТаблицы.ЭтоНабор Тогда
			
			ДобавитьНаборВТабличнуюЧасть(ТекущийВыбор);
			Возврат;
			
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("Номенклатура", ТекущийВыбор.Номенклатура);
		Если ТекущийВыбор.Свойство("Характеристика") Тогда
			СтруктураПоиска.Вставить("Характеристика", ТекущийВыбор.Характеристика);
		КонецЕсли;
		СтруктураПоиска.Вставить("ЭтоНабор", Ложь);
		СтруктураПоиска.Вставить("ТоварКЗамене", Ложь);
		
		МассивСтрок = Объект.Товары.НайтиСтроки(СтруктураПоиска);
		
		Если МассивСтрок.Количество() = 0 Тогда
			ДобавитьСтрокуВТабличнуюЧасть(СтрокаТаблицы, ТекущийВыбор);
		Иначе
			ИзменитьСтрокуВТабличнойЧасти(МассивСтрок[0], ТекущийВыбор);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПодтверждениеНевыбытияКонтрольнойМарки(РезультатВыполнения, Контекст) Экспорт
	
	Если ЕстьСвойство(РезультатВыполнения, "Результат") И РезультатВыполнения.Результат Тогда
		
		ОтборДляПоискаПоМарке = Новый Структура("КодМаркировки",
		Контекст.КодМаркировки);
		
		СтрокиКУдалению = Объект.Товары.НайтиСтроки(ОтборДляПоискаПоМарке);
		
		Если СтрокиКУдалению.Количество() > 0 Тогда
			
			Если ККМПоддерживаетПроверкуКодовМаркировки
				И ЗначениеЗаполнено(СтрокиКУдалению[0].КодМаркировки)
				И ЗначениеЗаполнено(ИдентификаторТекущейСессииПроверкиМарок)
				И ВозможноЗакрытьСессиюРегистрацииМарок() Тогда
					ЗакрытьСессиюРегистрацииМарок();
			КонецЕсли;
				
			Объект.Товары.Удалить(СтрокиКУдалению[0]);
			
		КонецЕсли;
		
		ПересчитатьИтогиТабличнойЧастиТовары();
		РассчитатьСуммуОплатыБонусами();
		
		Если Объект.Товары.Количество() > 0 Тогда
			ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОплата);
		Иначе
			СоздатьНовыйНабор();
		КонецЕсли;
		
		
		ВременныйКонтекстПроверкиМарки = Неопределено;
		
	Иначе
		
		Если ЕстьСвойство(РезультатВыполнения, "ОписаниеОшибки") Тогда
			
			ТекстЗаголовка = НСтр("ru = 'Подтверждение невыбития контрольной марки завершено с ошибкой.'");
			ТекстСообщения = РезультатВыполнения.ОписаниеОшибки;
			ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстСообщения);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ВозможноЗакрытьСессиюРегистрацииМарок()

	ОтборСтрок = Новый Структура;
	ОтборСтрок.Вставить("Оплачена", Ложь);
	НеоплаченныеПозиции = Объект.Товары.НайтиСтроки(ОтборСтрок);
	
	ОтборСтрок.Вставить("КодМаркировки", "");
	НеоплаченныеПозицииБезМарок = Объект.Товары.НайтиСтроки(ОтборСтрок);
	
	КоличествоНеоплаченныхПозицийСМарками =
	НеоплаченныеПозиции.Количество() - НеоплаченныеПозицииБезМарок.Количество();
	
	Возврат КоличествоНеоплаченныхПозицийСМарками <= 1;

КонецФункции

&НаКлиенте
Функция ОсобенностиУчетаМаркированныхТоваровДопускающиеВозвратБезМарки()

	Результат = Новый Массив();
	ДанныеПереопределения = 
			ОбщегоНазначенияРМККлиентПереопределяемый.ОсобенностиУчетаДопускающиеВозвратБезМарки();
	Если ЗначениеЗаполнено(ДанныеПереопределения) Тогда
		Результат = ДанныеПереопределения;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОсобенностиУчетаМаркированныхТоваровДопускающиеВозвратБезМаркиНаСервере()

	Результат = Новый Массив();
	ДанныеПереопределения = 
			ОбщегоНазначенияРМКПереопределяемый.ОсобенностиУчетаДопускающиеВозвратБезМарки();
	Если ЗначениеЗаполнено(ДанныеПереопределения) Тогда
		Результат = ДанныеПереопределения;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьОрганизациюПродажи(НоваяСтрока)
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьОрганизациюПродажи(НоваяСтрока, ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область Эквайринг

&НаСервере
Процедура ЗаполнитьЭквайринговыеТерминалы()
	
	Если ИспользоватьОплатуПлатежнымиКартами Тогда
		
		МассивКассККМ = ТаблицаКассККМОрганизаций.Выгрузить().ВыгрузитьКолонку("КассаККМ");
		
		ТекстЗапроса = ОбщегоНазначенияРМКПереопределяемый.ТекстЗапросаДанныеЭквайринговогоТерминала();
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ТорговыйОбъект", Объект.ТорговыйОбъект);
		Запрос.УстановитьПараметр("КассаККМ", МассивКассККМ);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		ТаблицаТерминалы.Очистить();
		
		Пока Выборка.Следующий() Цикл
			
			НовыйТерминал = ТаблицаТерминалы.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйТерминал, Выборка);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТаблицаТерминалы.Количество() = 0 Или Не ИспользоватьОплатуПлатежнымиКартами Тогда
		
		УстановитьВидимостьЭлементаФормы(Элементы.ОплатаКартой, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ПодменюКарта, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаQRCode, Ложь);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПровестиОплатуПоКарте()
	
	ДанныеТерминалов = ОбщегоНазначенияРМККлиентПереопределяемый.ТекущиеЭквайринговыеТерминалы(ЭтотОбъект);
	
	КоличествоАктивныхТерминаловПоОрганизации = ДанныеТерминалов.Количество();
	
	Если КоличествоАктивныхТерминаловПоОрганизации = 0 Тогда
		
		ТекстЗаголовка = НСтр("ru = 'При выполнении операции возникла ошибка'");
		ТекстСообщения = НСтр("ru = 'Не удалось определить эквайринговый терминал.
		|Оплата по карте не была произведена.'");
		СброситьОплатуПриОшибке();
		ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстСообщения);
		Возврат;
		
	ИначеЕсли КоличествоАктивныхТерминаловПоОрганизации = 1 Тогда
		ВыполнитьОплатуПоКарте(ДанныеТерминалов[0]);
	Иначе
		
		Если НЕ ЭтоСторноОплатыПоКарте(ЧекККМПродажа, СуммаИтого, КассоваяСмена) Тогда
			ПерейтиКВыборуТерминала(ДанныеТерминалов);
		Иначе
			
			Если ЗначениеЗаполнено(ЭквайринговыйТерминалВыполненияОперации) Тогда
				
				ЭквайринговыйТерминалПродажи = ЭквайринговыйТерминалВыполненияОперации;
				ОтборПоиска = Новый Структура();
				ОтборПоиска.Вставить("ЭквайринговыйТерминал", ЭквайринговыйТерминалПродажи);
				Результат = ТаблицаТерминалы.НайтиСтроки(ОтборПоиска);
				
				Если Результат.Количество() > 0 Тогда
					
					ДанныеТерминалов = Результат[0];
					ВыполнитьОплатуПоКарте(ДанныеТерминалов);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОплатуПоКарте(ДанныеТерминала)
	
	Если ДанныеТерминала.ИспользоватьБезПодключенияОборудования
		И НЕ ЗначениеЗаполнено(ДанныеТерминала.ПодключаемоеОборудование) Тогда
			ПерейтиНаСтраницуВопросЭквайринговаяОперация(ДанныеТерминала);
	Иначе
		ПровестиОплатуПоКартеПродолжение(ДанныеТерминала);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКВыборуТерминала(ДанныеТерминалов)
	
	ДанныеТерминалов = ОбщегоНазначенияРМККлиентПереопределяемый.ТекущиеЭквайринговыеТерминалы(ЭтотОбъект);
	
	ДанныеДляЗагрузки = Новый Массив();
	
	Для каждого Строка Из ДанныеТерминалов Цикл
		ДанныеДляЗагрузки.Добавить(Строка.ЭквайринговыйТерминал);
	КонецЦикла;
	
	ЭлементПереключателя = Элементы.ЭквайринговыйТерминалВыполненияОперации;
	ЭлементПереключателя.СписокВыбора.Очистить();
	ЭлементПереключателя.СписокВыбора.ЗагрузитьЗначения(ДанныеДляЗагрузки);
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаВыборЭквайринговогоТерминала);
	ТекущийЭлемент = Элементы.ЭквайринговыйТерминалВыполненияОперации;
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиОплатуПоКартеПродолжение(ДанныеЭТ)
	
	ПерейтиНаСтраницуЭквайринговаяОперация();
	
	Если ОбщегоНазначенияРМККлиентПереопределяемый.ВидОперацииПродажа(Объект.ВидОперации) 
		ИЛИ ЭтоЗаменаТоваров Тогда
		ОплатитьКартой(ДанныеЭТ);
	Иначе
		
		Если ЭтоСторноОплатыПоКарте(ЧекККМПродажа, СуммаИтого, КассоваяСмена) Тогда
			ВыполнитьСторноОплатыПоКарте(ДанныеЭТ, Истина);
		Иначе
			ВернутьОплатуПоКарте(ДанныеЭТ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуВопросЭквайринговаяОперация(ДанныеЭТ)
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("ВидОплаты", ДанныеЭТ.ВидОплаты);
	
	МассивОплат = Объект.Оплата.НайтиСтроки(ПараметрыПоиска);
	Если МассивОплат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОплаты = МассивОплат[0];
	СтрокаОплаты.ЭквайринговыйТерминал = ДанныеЭТ.ЭквайринговыйТерминал;
	СтрокаОплаты.ПроцентКомиссии = ДанныеЭТ.ПроцентКомиссииПриПродаже;
	СтрокаОплаты.СуммаКомиссии = СтрокаОплаты.Сумма * СтрокаОплаты.ПроцентКомиссии / 100;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.СменитьКассира, Ложь);
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаВопросЭквайринговаяОперация);
	ТекущийЭлемент = Элементы.ОтветДа;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуЭквайринговаяОперация()
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.СменитьКассира, Ложь);
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаЭквайринговаяОперация);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуСторноЭквайринг(ТекстЗаголовка, ТекстСообщения)
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.СменитьКассира, Ложь);
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаСторноЭквайринг);
	
	Элементы.ЗаголовокСторноЭквайринг.Заголовок = ТекстЗаголовка;
	Элементы.ТекстСторноЭквайринг.Заголовок = ТекстСообщения;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьКартой(ТекущийТерминал)
	
	ПараметрыОперации = ОборудованиеПлатежныеСистемыКлиентСервер.ПараметрыВыполненияЭквайринговойОперации();
	ПараметрыОперации.ТипТранзакции = НСтр("ru = 'AuthorizeSales'");
	ПараметрыОперации.СуммаОперации = СуммаОплаченоБН;
	ПараметрыОперации.НомерЧека = НСтр("ru = ' '");
	
	ПараметрыДействия = Новый Структура();
	ПараметрыДействия.Вставить("ДанныеТерминала", ТекущийТерминал);
	
	Доступность = Ложь;
	
	ЭквайринговыйТерминал = ТекущийТерминал.ПодключаемоеОборудование;
	Оповещение = Новый ОписаниеОповещения("ОплатитьКартойЗавершение", ЭтотОбъект, ПараметрыДействия);
	ОборудованиеПлатежныеСистемыКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(Оповещение,
		УникальныйИдентификатор,
		ЭквайринговыйТерминал,
		ПараметрыОперации,,
		ПодключаемоеОборудование);
		
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьКартойЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт 
	
	Доступность = Истина;
	
	ДанныеТерминала = ДополнительныеПараметры.ДанныеТерминала;
	
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("ВидОплаты", ДанныеТерминала.ВидОплаты);
	Если ЕстьСвойство(РезультатВыполнения, "СуммаОперации") Тогда
		СтруктураПоиска.Вставить("Сумма", РезультатВыполнения.СуммаОперации);
	КонецЕсли;
	
	МассивОплат = Объект.Оплата.НайтиСтроки(СтруктураПоиска);
	
	Если МассивОплат.Количество() > 0 Тогда
		
		СтрокаОплаты = МассивОплат[0];
		СтрокаОплаты.ЭквайринговыйТерминал = ДанныеТерминала.ЭквайринговыйТерминал;
		СтрокаОплаты.ПроцентКомиссии = ДанныеТерминала.ПроцентКомиссииПриПродаже;
		СтрокаОплаты.СуммаКомиссии = СтрокаОплаты.Сумма * СтрокаОплаты.ПроцентКомиссии / 100;
		
		Если ЕстьСвойство(РезультатВыполнения, "НомерКарты") Тогда
			СтрокаОплаты.НомерПлатежнойКарты = РезультатВыполнения.НомерКарты;
		КонецЕсли;
		
		Если ЕстьСвойство(РезультатВыполнения, "НомерЧекаЭТ") Тогда
			СтрокаОплаты.НомерЧекаЭТ = РезультатВыполнения.НомерЧекаЭТ;
		КонецЕсли;
		
		Если ЕстьСвойство(РезультатВыполнения, "СсылочныйНомер") Тогда
			СтрокаОплаты.СсылочныйНомер = РезультатВыполнения.СсылочныйНомер;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьСвойство(РезультатВыполнения, "Результат") И РезультатВыполнения.Результат Тогда
		
		ТранзакцияПоКартеЗавершена = Истина;
		НачатьПечатьЧека();
		
	Иначе
		
		ТранзакцияПоКартеЗавершена = Ложь;
		
		ТекстЗаголовка = НСтр("ru = 'При выполнении операции возникла ошибка'");
		ТекстСообщения = НСтр("ru = '""%ОписаниеОшибки%"".
			|Оплата по карте не была произведена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		
		СброситьОплатуПриОшибке();
		ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораВидаПлатежнойКарты(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураКоманды = Новый Структура;
	СтруктураКоманды.Вставить("Имя", Результат.Значение);
	
	Если ИспользоватьАвтоматическиеСкидки И Не СкидкиРассчитаны И ВопросПоРасчетуСкидок Тогда
		ЗадатьВопросПоРасчетуСкидок("ОплатаКартойЗавершение", СтруктураКоманды, Истина);
	Иначе
		ОплатаКартойЗавершение(?(ВопросПоРасчетуСкидок Или СкидкиРассчитаны, КодВозвратаДиалога.Нет, КодВозвратаДиалога.Да), СтруктураКоманды);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоСторноОплатыПоКарте(ЧекККМПродажа, СуммаИтого, ТекущаяКассоваяСмена)
	
	Результат = ОбщегоНазначенияРМКПереопределяемый.ЭтоСторноОплаты(ЧекККМПродажа, СуммаИтого, ТекущаяКассоваяСмена);
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьСторноОплатыПоКарте(ДанныеТерминала, ПечататьЧекНаВозврат = Ложь, ДанныеОшибки = Неопределено)
	
	Доступность = Ложь;
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("Сумма", СуммаОплаченоБН);
	СтруктураПоиска.Вставить("ВидОплаты", ДанныеТерминала.ВидОплаты);
	
	МассивОплат = Объект.Оплата.НайтиСтроки(СтруктураПоиска);
	Если МассивОплат.Количество() > 0 Тогда
		
		СтрокаОплаты = МассивОплат[0];
		
		ПараметрыОперации = ОборудованиеПлатежныеСистемыКлиентСервер.ПараметрыВыполненияЭквайринговойОперации();
		ПараметрыОперации.ТипТранзакции = НСтр("ru = 'AuthorizeVoid'");
		ПараметрыОперации.СуммаОперации = СтрокаОплаты.Сумма;
		ПараметрыОперации.НомерЧекаЭТ = СтрокаОплаты.НомерЧекаЭТ;
		ПараметрыОперации.СсылочныйНомер = СтрокаОплаты.СсылочныйНомер;
		
		СтруктураПоискаТерминала = Новый Структура();
		СтруктураПоискаТерминала.Вставить("ЭквайринговыйТерминал", ДанныеТерминала.ЭквайринговыйТерминал);
		
		Терминал = Неопределено;
		МассивТерминалов = ТаблицаТерминалы.НайтиСтроки(СтруктураПоискаТерминала);
		
		КоличествоТерминалов = МассивТерминалов.Количество();
		
		Если КоличествоТерминалов > 0 Тогда
			
			Терминал = МассивТерминалов[0].ПодключаемоеОборудование;
			
			ПараметрДействия = Новый Структура();
			ПараметрДействия.Вставить("ПечататьЧекНаВозврат", ПечататьЧекНаВозврат);
			ПараметрДействия.Вставить("СтрокаОплаты", СтрокаОплаты);
			ПараметрДействия.Вставить("ТекущийТерминал", МассивТерминалов[0]);
			ПараметрДействия.Вставить("ДанныеОшибки", ДанныеОшибки);
			
			Оповещение = Новый ОписаниеОповещения("ВыполнитьСторноОплатыПоКартеЗавершение", ЭтотОбъект, ПараметрДействия);
			ОборудованиеПлатежныеСистемыКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(Оповещение,
				УникальныйИдентификатор, Терминал, ПараметрыОперации,, ПодключаемоеОборудование);
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСторноОплатыПоКартеЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт 
	
	Доступность = Истина;
	
	ПечататьЧекНаВозврат = ДополнительныеПараметры.ПечататьЧекНаВозврат;
	СтрокаОплаты = ДополнительныеПараметры.СтрокаОплаты;
	ДанныеТерминала = ДополнительныеПараметры.ТекущийТерминал;
	
	Если ЕстьСвойство(РезультатВыполнения, "Результат") И РезультатВыполнения.Результат Тогда
		
		Если ПечататьЧекНаВозврат Тогда
		
			ТранзакцияПоКартеЗавершена = Истина;
			
			СтрокаОплаты.ЭквайринговыйТерминал = ДанныеТерминала.ЭквайринговыйТерминал;
			СтрокаОплаты.ПроцентКомиссии = ДанныеТерминала.ПроцентКомиссииПриОтмене;
			СтрокаОплаты.СуммаКомиссии = СтрокаОплаты.Сумма * СтрокаОплаты.ПроцентКомиссии / 100;
			
			НачатьПечатьЧека();
			
		Иначе
			
			ТранзакцияПоКартеЗавершена = Ложь;
			
			Если ЕстьСвойство(ДополнительныеПараметры, "ДанныеОшибки")
				И ЗначениеЗаполнено(ДополнительныеПараметры.ДанныеОшибки) Тогда
				
				ДанныеОшибки = ДополнительныеПараметры.ДанныеОшибки;
				ОткрытьСтраницуИнфоОшибка(ДанныеОшибки.ТекстЗаголовка, ДанныеОшибки.ТекстСообщения);
				
			Иначе
				
				СброситьОплатуПриОшибке();
				РассчитатьСуммыОплаты();
				НастроитьДоступностьПробитьЧек();
				ПерейтиНаСтраницуОплата();
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ТранзакцияПоКартеЗавершена = Ложь;
		
		ТекстЗаголовка = НСтр("ru = 'При выполнении операции возникла ошибка'");
		ТекстСообщения = НСтр("ru = '""%ОписаниеОшибки%"".
									|Отмена платежа по карте не была произведена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
			
		СброситьОплатуПриОшибке();
		ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьОплатуПоКарте(ТекущийЭквайринговыйТерминал)
	
	Доступность = Ложь;
	
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("Сумма", СуммаОплаченоБН);
	СтруктураПоиска.Вставить("ВидОплаты", ТекущийЭквайринговыйТерминал.ВидОплаты);
	
	МассивОплат = Объект.Оплата.НайтиСтроки(СтруктураПоиска);
	Если МассивОплат.Количество() > 0 Тогда
		
		СтрокаОплаты = МассивОплат[0];
		
		ПараметрыОперации = ОборудованиеПлатежныеСистемыКлиентСервер.ПараметрыВыполненияЭквайринговойОперации();
		ПараметрыОперации.ТипТранзакции = НСтр("ru = 'AuthorizeRefund'");
		ПараметрыОперации.СуммаОперации = СуммаОплаченоБН;
		ПараметрыОперации.НомерЧека = НСтр("ru = ' '");
		
		ЭквайринговыйТерминал = Неопределено;
		ТекущийТерминал = Неопределено;
		
		Если ЭтоВозвратБезОснования Тогда
			
			ТекущийТерминал = ТекущийЭквайринговыйТерминал;
			ЭквайринговыйТерминал = ТекущийЭквайринговыйТерминал.ПодключаемоеОборудование;
			
		Иначе
			
			СтруктураПоискаТерминала = Новый Структура();
			СтруктураПоискаТерминала.Вставить("ЭквайринговыйТерминал", СтрокаОплаты.ЭквайринговыйТерминал);
			
			МассивТерминалов = ТаблицаТерминалы.НайтиСтроки(СтруктураПоискаТерминала);
			Если МассивТерминалов.Количество() > 0 Тогда
				
				ТекущийТерминал = МассивТерминалов[0];
				ЭквайринговыйТерминал = ТекущийТерминал.ПодключаемоеОборудование;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПараметрДействия = Новый Структура();
		ПараметрДействия.Вставить("СтрокаОплаты", СтрокаОплаты);
		ПараметрДействия.Вставить("ТекущийТерминал", ТекущийТерминал);
		ЗаполнитьЗначенияСвойств(ПараметрыОперации, СтрокаОплаты);
		
		Оповещение = Новый ОписаниеОповещения("ВернутьОплатуПоКартеЗавершение", ЭтотОбъект, ПараметрДействия);
		ОборудованиеПлатежныеСистемыКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(Оповещение,
			УникальныйИдентификатор, ЭквайринговыйТерминал, ПараметрыОперации,, ПодключаемоеОборудование);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьОплатуПоКартеЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт 
	
	Доступность = Истина;
	
	СтрокаОплаты = ДополнительныеПараметры.СтрокаОплаты;
	ТекущийТерминал = ДополнительныеПараметры.ТекущийТерминал;
	
	Если ТекущийТерминал = Неопределено Тогда
		
		ТранзакцияПоКартеЗавершена = Ложь;
		
		ТекстЗаголовка = НСтр("ru = 'При выполнении операции возникла ошибка'");
		ТекстСообщения = НСтр("ru = 'Не удалось определить эквайринговый терминал.'");
		
		ПерейтиНаСтраницуСторноЭквайринг(ТекстЗаголовка, ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	СтрокаОплаты.ЭквайринговыйТерминал = ТекущийТерминал.ЭквайринговыйТерминал;
	СтрокаОплаты.ПроцентКомиссии = ТекущийТерминал.ПроцентКомиссииПриВозврате;
	СтрокаОплаты.СуммаКомиссии = СтрокаОплаты.Сумма * СтрокаОплаты.ПроцентКомиссии / 100;
	
	Если ЕстьСвойство(РезультатВыполнения, "НомерКарты") Тогда
		СтрокаОплаты.НомерПлатежнойКарты = РезультатВыполнения.НомерКарты;
	КонецЕсли;
	Если ЕстьСвойство(РезультатВыполнения, "НомерЧекаЭТ") Тогда
		СтрокаОплаты.НомерЧекаЭТ = РезультатВыполнения.НомерЧекаЭТ;
	КонецЕсли;
	Если ЕстьСвойство(РезультатВыполнения, "СсылочныйНомер") Тогда
		СтрокаОплаты.СсылочныйНомер = РезультатВыполнения.СсылочныйНомер;
	КонецЕсли;

	Если ЕстьСвойство(РезультатВыполнения, "Результат") И РезультатВыполнения.Результат Тогда
		
		ТранзакцияПоКартеЗавершена = Истина;
		НачатьПечатьЧека();
		
	Иначе
		
		ТранзакцияПоКартеЗавершена = Ложь;
		
		ТекстЗаголовка = НСтр("ru = 'При выполнении операции возникла ошибка'");
		ТекстСообщения = НСтр("ru = '""%ОписаниеОшибки%"".
			|Оплата по карте не была произведена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		
		ПерейтиНаСтраницуСторноЭквайринг(ТекстЗаголовка, ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтменуОплатыПоКарте(ТекстЗаголовка, ТекстСообщения)
	
	Для Каждого Терминал Из ТаблицаТерминалы Цикл
		
		Если Терминал.ИспользоватьБезПодключенияОборудования
			И НЕ ЗначениеЗаполнено(Терминал.ПодключаемоеОборудование) Тогда
				ОткрытьСтраницуОтменаОплатыПоКарте(ТекстСообщения);
		Иначе
			ПерейтиНаСтраницуСторноЭквайринг(ТекстЗаголовка, ТекстСообщения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СверкаИтоговЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ВыполнитьСверкуИтогов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСверкуИтогов()
	
	Для Каждого Терминал Из ТаблицаТерминалы Цикл
		
		Если НЕ Терминал.ИспользоватьБезПодключенияОборудования
			И ЗначениеЗаполнено(Терминал.ПодключаемоеОборудование) Тогда
			
			Доступность = Ложь;
			
			Оповещение = Новый ОписаниеОповещения("ВыполнитьСверкуИтоговЗавершение", ЭтотОбъект);

			ЭквайринговыйТерминал = Терминал.ПодключаемоеОборудование;
			ПараметрыОперации = Новый Структура();
			ОборудованиеПлатежныеСистемыКлиент.НачатьВыполнениеСверкиИтоговНаЭквайринговомТерминале(Оповещение,
				УникальныйИдентификатор, ЭквайринговыйТерминал, ПараметрыОперации,, ПодключаемоеОборудование);
				
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСверкуИтоговЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт 
	
	Доступность = Истина;
	
	Если ЕстьСвойство(РезультатВыполнения, "Результат") И НЕ РезультатВыполнения.Результат Тогда
		
		ТекстЗаголовка = НСтр("ru = 'При выполнении операции произошла ошибка'");
		ТекстСообщения = НСтр("ru = '""%ОписаниеОшибки%"".
										|Операция сверки итогов не была проведена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		
		ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьОплатуПриОшибке()
	
	СуммаОплаченоНал = 0;
	СуммаОплаченоБН = 0;
	СуммаОплаченоQRКодом = 0;
	СуммаОплаченоБезнал = 0;
	СуммаОплаченоВРассрочку = 0;
	СуммаОплаченоЗачетАванса = 0;
	СуммаОплаченоСертификатамиНСПК = 0;
	Сдача = 0;
	
	Объект.Оплата.Очистить();
	ПодключитьОбработчикОжидания("ОбработкаВыводаОжиданияОплатыНаДисплейПокупателя", 5, Истина);

	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаНал, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаКартой, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСверткуИтоговЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт 
	
	Доступность = Истина;
	
	Если ЕстьСвойство(РезультатВыполнения, "Результат") И Не РезультатВыполнения.Результат Тогда
		
		ТекстЗаголовка = НСтр("ru = 'При выполнении операции произошла ошибка'");
		ТекстСообщения = НСтр("ru = '""%ОписаниеОшибки%"".
										|Операция сверки итогов не была проведена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		
		ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЭлектронныеПрикассовыеВесы

&НаКлиенте
Функция ЭлектронныеВесыДоступны()
	Возврат ЗначениеЗаполнено(ЭлектронныеВесы) И НЕ ЭлектронныеВесыЗаняты;
КонецФункции

&НаКлиенте
Процедура ВесТекущегоТовара()
	
	Если ЭлектронныеВесыДоступны() Тогда
		
		ЭлектронныеВесыЗаняты = Истина;
		
		ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
		
		Если ТекущаяСтрока = Неопределено Тогда
			
			ЭлектронныеВесыЗаняты = Ложь;
			Возврат;
			
		КонецЕсли;
		
		Товар = ТекущаяСтрока.Номенклатура;
		
		Если ЗначениеЗаполнено(Товар) Тогда
			
			ПараметрыВзвешивания = Новый Структура();
			ПараметрыВзвешивания.Вставить("Товар", Товар);
			ПараметрыОперации = Новый Структура();
			
			ОповещениеЗавершенияВзвешивания = Новый ОписаниеОповещения("ПолучитьВесСЭлектронныхВесовЗавершение",
				ЭтотОбъект, ПараметрыВзвешивания);
				
			ОборудованиеВесовоеОборудованиеКлиент.НачатьПолученияВесаСЭлектронныхВесов(ОповещениеЗавершенияВзвешивания,
				УникальныйИдентификатор, ЭлектронныеВесы, ПараметрыОперации);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВесСЭлектронныхВесовЗавершение(Результат, ПараметрыВзвешивания) Экспорт
	
	ЭлектронныеВесыЗаняты = Ложь;
	
	Если ЕстьСвойство(Результат, "Результат") И Результат.Результат Тогда
		
		ВесТовара = Результат.Вес;
		
		Если ЕстьСвойство(ПараметрыВзвешивания, "Товар") Тогда
			
			Если ВесТовара = 0 Тогда
				
				ТекстОповещенияПользователя = НСтр("ru = 'Электронные весы вернули нулевой вес'");
				ПоказатьПредупреждение(, ТекстОповещенияПользователя);
				
			КонецЕсли;
			
			ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
			
			Если ТекущаяСтрока <> Неопределено И
				ТекущаяСтрока.Свойство("Количество") И ВесТовара > 0 Тогда
				
				ТекущаяСтрока.Количество = ТекущаяСтрока.Количество + ВесТовара;
				ТекущийТоварКоличество = ТекущийТоварКоличество + ВесТовара;
				ПересчетКоличестваТовара(ТекущаяСтрока);
				ПересчитатьСуммы(ТекущаяСтрока);
				
				РассчитатьСуммуОплатыБонусами();
				
				ОбновитьИнформациюНаДисплееПокупателя("ИзменениеКоличества");
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ТекстПредупреждения = НСтр("ru = 'При взвешивании товара произошла ошибка.Пожалуйста, повторите попытку.'");
		
		Если ЕстьСвойство(Результат, "ОписаниеОшибки") И ЗначениеЗаполнено(Результат.ОписаниеОшибки) Тогда
			ТекстПредупреждения = Результат.ОписаниеОшибки;
		КонецЕсли;
		
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКПараметрамТарирования()

	Если ЭлектронныеВесыДоступны() Тогда
		
		ПараметрыОткрытия = Новый Структура("ВесТары,ЭлектронныеВесы,ЭлектронныеВесыЗаняты",
			ВесТары, ЭлектронныеВесы, ЭлектронныеВесыЗаняты);
			
		ОповещениеОЗавершенииРаботыСПараметрамиТарирования =
			Новый ОписаниеОповещения("ЗавершениеРаботыСПараметрамиТарирования", ЭтотОбъект);
		
		ОткрытьФорму("Обработка.РабочееМестоКассира.Форма.ФормаТарированияЭлектронныхВесов",
			ПараметрыОткрытия, ЭтотОбъект,,,, ОповещениеОЗавершенииРаботыСПараметрамиТарирования,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеРаботыСПараметрамиТарирования(РезультатВыполнения, Параметры) Экспорт
	
	Если ЕстьСвойство(РезультатВыполнения, "ВесТары")
		И ЕстьСвойство(РезультатВыполнения, "ЭлектронныеВесыЗаняты") Тогда
		
			ВесТары = РезультатВыполнения.ВесТары;
			ЭлектронныеВесыЗаняты = РезультатВыполнения.ЭлектронныеВесыЗаняты;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУдалитьОплатуВРассрочкуНажатие(Элемент)
	
	Если Элементы.Предоплата.Доступность Тогда
		ПредоплатаНаКлиенте();
	Иначе
		ОплатаВРассрочкуНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Наборы

&НаКлиенте
Функция ЭтоСоставляющаяНабора(СтрокаТаблицыТовары)
	Возврат ?(СтрокаТаблицыТовары = Неопределено, Ложь, СтрокаТаблицыТовары.НомерНабора > 0);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СоставНабораПоЭлементуНабора(СтрокаТаблицыТовары, ТаблицаТовары)

	Результат = Новый Массив();
	
	Если Не СтрокаТаблицыТовары = Неопределено
		И ТипЗнч(СтрокаТаблицыТовары) = Тип("ДанныеФормыЭлементКоллекции")
		И ТипЗнч(ТаблицаТовары) = Тип("ДанныеФормыКоллекция") Тогда
		
		ИдентификаторНабора = СтрокаТаблицыТовары.НомерНабора;
		ОтборДляПоиска = Новый Структура();
		ОтборДляПоиска.Вставить("НомерНабора", ИдентификаторНабора);
		
		Результат = ТаблицаТовары.НайтиСтроки(ОтборДляПоиска);
		
	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МаксимальныйНомерНабора(ТаблицаТовары)
	
	МаксимальныйНомерНабора = 0;
	
	Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
		
		ТекущийНомерНабора = СтрокаТовары.НомерНабора;
		Если ТекущийНомерНабора > МаксимальныйНомерНабора Тогда
			МаксимальныйНомерНабора = ТекущийНомерНабора;
		КонецЕсли;
		
	КонецЦикла;
	
	МаксимальныйНомерНабора = МаксимальныйНомерНабора + 1;
	
	Возврат МаксимальныйНомерНабора;
	
КонецФункции

&НаСервере
Процедура ДобавитьНаборВТабличнуюЧасть(ТекущийВыбор)
	
	ТаблицаСоставНабора = Новый ТаблицаЗначений;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьСоставНабора(ТекущийВыбор, ТаблицаСоставНабора, ЭтотОбъект);
	
	МаксимальныйНомерНабора = МаксимальныйНомерНабора(Объект.Товары);
	ВНабореЕстьПострочныйТовар = ВНабореЕстьПострочныйТовар(ТаблицаСоставНабора);
	
	Если ВНабореЕстьПострочныйТовар Тогда
		
		Для Каждого СтрокаТаблицы Из ТаблицаСоставНабора Цикл
			ДобавитьКомплектующуюНабораВТабличнуюЧасть(СтрокаТаблицы, МаксимальныйНомерНабора);
		КонецЦикла;
		
	Иначе
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НоменклатураНабора", ТекущийВыбор.Номенклатура);
		Если ТекущийВыбор.Свойство("Характеристика") Тогда
			СтруктураПоиска.Вставить("ХарактеристикаНабора", ТекущийВыбор.Характеристика);
		КонецЕсли;
		
		МассивСтрокТоваров = Объект.Товары.НайтиСтроки(СтруктураПоиска);
		
		Если МассивСтрокТоваров.Количество() = 0 Тогда
			
			Для Каждого СтрокаТаблицы Из ТаблицаСоставНабора Цикл
				ДобавитьКомплектующуюНабораВТабличнуюЧасть(СтрокаТаблицы, МаксимальныйНомерНабора);
			КонецЦикла;
			
		Иначе
			
			Для Каждого СтрокаМассива Из МассивСтрокТоваров Цикл
				
				СтароеКоличествоНаборов = СтрокаМассива.КоличествоНаборов;
				НовоеКоличествоНаборов = СтароеКоличествоНаборов + 1;
				КоэффициентПересчета = НовоеКоличествоНаборов / СтароеКоличествоНаборов;
				СтрокаМассива.КоличествоНаборов = НовоеКоличествоНаборов;
				СтрокаМассива.Количество = СтрокаМассива.Количество * КоэффициентПересчета;
				СтрокаМассива.КоличествоУпаковок = СтрокаМассива.КоличествоУпаковок * КоэффициентПересчета;
				
				ОбщегоНазначенияРМККлиентСервер.ПересчитатьСуммуВСтроке(ЭтотОбъект, СтрокаМассива);
				ОбщегоНазначенияРМККлиентСервер.РассчитатьСуммуНДС(Объект, СтрокаМассива);
				ОбщегоНазначенияРМККлиентСервер.СуммаДокумента(Объект);
				
				ТекущийТоварКоличество = НовоеКоличествоНаборов; 
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомплектующуюНабораВТабличнуюЧасть(СтрокаКомплектующая, НомерНабора)

	НоваяСтрока = Объект.Товары.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКомплектующая);
	НоваяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор;
	НоваяСтрока.НеобходимостьВводаКодаМаркировки = СтрокаКомплектующая.Маркируемый;
	НоваяСтрока.НомерНабора = НомерНабора;
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьОрганизациюПродажи(НоваяСтрока, ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(НоваяСтрока.Организация) Тогда
		НоваяСтрока.Организация = ОсновнаяОрганизация;
	Иначе
		
		ОтборПоОрганизации = Новый Структура("Организация", НоваяСтрока.Организация);
		КассыККМПоОрганизации = ТаблицаКассККМОрганизаций.НайтиСтроки(ОтборПоОрганизации);
		
		Если КассыККМПоОрганизации.Количество() = 0 Тогда
			НоваяСтрока.Организация = ОсновнаяОрганизация;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НоваяСтрока.СистемаНалогообложения) Тогда
		
		ОсновнаяСНОПоОрганизации = ОбщегоНазначенияРМКПереопределяемый.СНОККТДляОрганизации(Объект, НоваяСтрока);
		НоваяСтрока.СистемаНалогообложения = ОсновнаяСНОПоОрганизации;
		
	КонецЕсли;
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьВозможностьОплатыЭС(НоваяСтрока, ЭтотОбъект);
	
	СтавкаНДС = ПродажиРМК.АктуальнаяСтавкаНДСДляТовара(Объект, НоваяСтрока, НоваяСтрока.СистемаНалогообложения);
	НоваяСтрока.СтавкаНДС = СтавкаНДС;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ПолучитьВес, НоваяСтрока.Весовой);
	
	ПредставлениеХарактеристики = "";
	
	Если ЗначениеЗаполнено(СтрокаКомплектующая.Характеристика) Тогда
		ПредставлениеХарактеристики = " (" + Строка(СтрокаКомплектующая.Характеристика) + ")";
	КонецЕсли;
	
	ПредставлениеТовара = СтрШаблон("%1%2", СтрокаКомплектующая.Наименование, ПредставлениеХарактеристики);
	НоваяСтрока.ПредставлениеНоменклатураХарактеристика = ПредставлениеТовара;
	ШтрихкодированиеРМК.ЗаполнитьПредставлениеЕдиницыИзмерения(НоваяСтрока);
	
	ТекущийТоварКоличество = НоваяСтрока.КоличествоУпаковок;
	Элементы.Товары.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
	ДоступныРучныеСкидки = ДопускаетсяПрименениеСкидок И (Объект.Товары.Количество() > 0);
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаРучнаяСкидкаНаТовар, ДоступныРучныеСкидки);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаНаЧек, ДоступныРучныеСкидки);
	ПодготовитьИнтерфейсКВозвратуМаркируемогоТовараБезКонтрольнойМаркиНаСервере(НоваяСтрока);
	
	ДобавленаНоваяСтрокаКорзины = Истина;
	
	СписокДобавленныхСтрокТоваров.Добавить(НоваяСтрока.ПолучитьИдентификатор());
	
	ОбщегоНазначенияРМККлиентСервер.ПересчитатьСуммуВСтроке(ЭтотОбъект, НоваяСтрока);
	ОбщегоНазначенияРМККлиентСервер.РассчитатьСуммуНДС(Объект, НоваяСтрока);
	ОбщегоНазначенияРМККлиентСервер.СуммаДокумента(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВНабореЕстьПострочныйТовар(СписокТоваров)
	
	ВНабореЕстьПострочныйТовар = Ложь;
	
	Для Каждого СтрокаТовара Из СписокТоваров Цикл
		
		Если СтрокаТовара.НеобходимостьВводаСерии Или СтрокаТовара.НеобходимостьВводаКодаМаркировки Тогда
			
			ВНабореЕстьПострочныйТовар = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВНабореЕстьПострочныйТовар;
	
КонецФункции

&НаКлиенте
Процедура ИзменитьКоличествоНабора(ТекущаяСтрока, УвеличитьКоличество)
	
	МаксимальныйНомерНабора = МаксимальныйНомерНабора(Объект.Товары);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НомерНабора", ТекущаяСтрока.НомерНабора);
	МассивСтрокНабора = Объект.Товары.НайтиСтроки(СтруктураПоиска);
	
	ВНабореЕстьПострочныйТовар = ВНабореЕстьПострочныйТовар(МассивСтрокНабора);
	
	Если ВНабореЕстьПострочныйТовар Тогда
		
		Если УвеличитьКоличество Тогда
			
			Для Каждого СтрокаМассива Из МассивСтрокНабора Цикл
				
				НоваяСтрока = Объект.Товары.Добавить();
				ИсключаяСвойства = "Серия, Партия, КодМаркировки, ПроцентАвтоматическойСкидки, ПроцентСкидкиНаценки,
					|СуммаАвтоматическойСкидки, СуммаСкидкиНаценки, СуммаСкидкиОплатыБонусом, Продавец, РассчитанаСкидка,
					|КонтрольнаяМарка, КонтрольнаяМаркаОбработана, Оплачена, СуммаСкидокОбщая";
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМассива,, ИсключаяСвойства);
				НоваяСтрока.НомерНабора = МаксимальныйНомерНабора;
				НоваяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор;
				
				ПересчитатьСуммы(НоваяСтрока);
				
			КонецЦикла;
			
		Иначе
			
			Для Каждого СтрокаМассива Из МассивСтрокНабора Цикл
				Объект.Товары.Удалить(СтрокаМассива);
			КонецЦикла;
			ПересчитатьИтогиТабличнойЧастиТовары();
			
		КонецЕсли;
		
	Иначе
		
		Для Каждого СтрокаМассива Из МассивСтрокНабора Цикл
			ИзменитьКоличествоКомплектующихНабора(СтрокаМассива, УвеличитьКоличество);
		КонецЦикла;
		
	КонецЕсли;
	
	Если Объект.Товары.Количество() = 0 И Не ЭтоЧекКоррекции Тогда
		ИнициализироватьИнтерфейсРабочегоМестаКассира();
	КонецЕсли;
	
	ОбновитьИнформациюНаДисплееПокупателя("ИзменениеКоличества");
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКоличествоКомплектующихНабора(ТекущаяСтрока, УвеличитьКоличество)
	
	СтароеКоличествоНаборов = ТекущаяСтрока.КоличествоНаборов;
	
	Если УвеличитьКоличество Тогда
		НовоеКоличествоНаборов = СтароеКоличествоНаборов + 1;
	Иначе
		
		НовоеКоличествоНаборов = СтароеКоличествоНаборов - 1;
		
		Если Не ТекущаяСтрока.Весовой И НовоеКоличествоНаборов = 0 Тогда
			
			Объект.Товары.Удалить(ТекущаяСтрока);
			ПересчитатьИтогиТабличнойЧастиТовары();
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	КоэффициентПересчета = НовоеКоличествоНаборов / СтароеКоличествоНаборов;
	ТекущаяСтрока.Количество = ТекущаяСтрока.Количество * КоэффициентПересчета;
	ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.КоличествоУпаковок * КоэффициентПересчета;
	ТекущаяСтрока.КоличествоНаборов = НовоеКоличествоНаборов;
	ТекущийТоварКоличество = НовоеКоличествоНаборов;
	ПересчитатьСуммы(ТекущаяСтрока);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ЗапроситьДанныеБонусов()
	
	Если Не ОбщегоНазначенияРМККлиентПереопределяемый.НуженЗапросБонусов() Тогда 
		
		ЗапроситьДанныеБонусовЛокально();
		Возврат;
		
	КонецЕсли;
	
	Если ИспользоватьСервисЛояльности Тогда
		
		ПараметрыЗапроса = ПараметрыЗапросаКСервисуЛояльности();
		ПараметрыЗапроса.ТипЗапроса = "GET";
		ПараметрыЗапроса.Ресурс = "getclientbonuses";
		ПараметрыЗапроса.ПараметрыМетода = ПараметрыМетодовБонуснойПодсистемы();
		
		Результат = ВыполнитьЗапросКСервисуЛояльности(ПараметрыЗапроса);
		
		Если Результат.ЕстьОшибки Тогда
			
			ДополнительноеПояснение = НСтр("ru = ''");
			
			Если ЕстьСвойство(Результат, "ТекстОшибки") Тогда
				ДополнительноеПояснение = СтрШаблон(НСтр("ru = ' по причине: %1'"), Результат.ТекстОшибки);
			КонецЕсли;
			
			ТекстПредупреждения = СтрШаблон("%1 %2",
				НСтр("ru = 'Не удалось получить сведения о бонусном балансе клиента'"),
					ДополнительноеПояснение);
			ПоказатьПредупреждение(, ТекстПредупреждения);
		
			Возврат;
			
		КонецЕсли;
		
		СтрокаJSON = Результат.ДанныеОтвета;
		
		Если НЕ СтрНачинаетсяС(СокрЛ(СтрокаJSON), "{") Тогда
			
			Элементы.ДекорацияВозможноОплатитьБонусами.Заголовок = СтрокаJSON;
			УстановитьВидимостьЭлементаФормы(Элементы.ГруппаБонусыКартыЛояльности, Истина);
			Возврат;
			
		КонецЕсли;
		
		ДанныеОтвета = Неопределено;
		
		#Если ВебКлиент Тогда
			ПрочитатьJSONСервер(СтрокаJSON, ДанныеОтвета);
		#Иначе
			ПрочитатьJSONКлиент(СтрокаJSON, ДанныеОтвета);
		#КонецЕсли
		
		Если НЕ ДанныеОтвета = Неопределено И ДанныеОтвета.Свойство("ClientNotFound") 
			И НЕ ДанныеОтвета.ClientNotFound Тогда
			
				УстановитьВидимостьЭлементаФормы(Элементы.ГруппаБонусыКартыЛояльности, Истина);
				
				КоличествоБонусов = ДанныеОтвета.BonusCount;
				БонусыДоступноКОплате = КоличествоБонусов * ?(ДанныеОтвета.BonusRate = 0, 1, ДанныеОтвета.BonusRate);
				ПроцентОплатыБонусами = ДанныеОтвета.PaymentPercent;
				
				УстановитьДоступностьЭлементаФормы(Элементы.ОплатитьБонусами,
					КоличествоБонусов > 0 И Элементы.ГруппаОплатаБонусами.Доступность);
				
				ТекстСообщения =
					СтрШаблон(НСтр("ru = 'Бонусами можно оплатить до %1%% от суммы чека'"), ПроцентОплатыБонусами);
				Элементы.ДекорацияВозможноОплатитьБонусами.Заголовок = ТекстСообщения;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗапроситьДанныеБонусовЛокально()
	
	ОбщегоНазначенияРМКПереопределяемый.НайтиБонусыЛокально(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьБонусыПоТоварам()
	
	Если Объект.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивКоэффициентов = Новый Массив;

	Если Объект.Товары.Количество() = 1 Тогда 
		МассивКоэффициентов.Добавить(Объект.Товары.Количество());
	Иначе
		
		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			
			Если НЕ ДопускаетсяПрименениеСкидокНаТовар(СтрокаТовары) Тогда
				Продолжить;
			КонецЕсли;
			
			ВозможноОплатитьБонусами = СтрокаТовары.СуммаБезСкидки
				- СтрокаТовары.СуммаАвтоматическойСкидки - СтрокаТовары.СуммаСкидкиНаценки;
			МассивКоэффициентов.Добавить(ВозможноОплатитьБонусами);
			
		КонецЦикла;
		
	КонецЕсли;
	
	РаспределенныеБонусы = 
		ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(СуммаОплаченоБонусами,
			МассивКоэффициентов, 2);
	
	БонусыРаспределены = ЗначениеЗаполнено(РаспределенныеБонусы);
	
	Индекс						= 0;
	СуммаБонусов				= 0;
	СуммаРаспределенияБонусов	= 0;
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		
		Если НЕ ДопускаетсяПрименениеСкидокНаТовар(СтрокаТовары) Тогда
			Продолжить;
		КонецЕсли;
		
		Если БонусыРаспределены Тогда 
			
			ВозможноОплатитьБонусами = СтрокаТовары.СуммаБезСкидки
				- СтрокаТовары.СуммаАвтоматическойСкидки - СтрокаТовары.СуммаСкидкиНаценки;
				
			СуммаРаспределенияБонусов = ?(СтрокаТовары.Сумма > 0,
				Мин(ВозможноОплатитьБонусами, РаспределенныеБонусы[Индекс]),
				РаспределенныеБонусы[Индекс]);
				
			Индекс = Индекс + 1;
			
		КонецЕсли;
		
		СтрокаТовары.СуммаСкидкиОплатыБонусом = СуммаРаспределенияБонусов;
		СуммаБонусов = СуммаБонусов + СуммаРаспределенияБонусов;
		
		ОбщегоНазначенияРМККлиентСервер.ПересчитатьСуммуВСтроке(ЭтотОбъект, СтрокаТовары);
		ОбщегоНазначенияРМККлиентСервер.РассчитатьСуммуНДС(Объект, СтрокаТовары);
		
	КонецЦикла;
	
	СуммаОплаченоБонусами = СуммаБонусов;
	ЭтоОплатаВстречнымПредоставлением = (СуммаИтого = СуммаБонусов);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПрочитатьJSONСервер(СтрокаJSON, ДанныеОтвета)
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(СтрокаJSON);
	
	Попытка
		ДанныеОтвета = ПрочитатьJSON(ЧтениеОтвета);
	Исключение
		
		ЛокализованноеСообщение = 
			НСтр("ru = 'Ошибка разбора JSON, возможно, получено служебное сообщение о недоступности сервера лояльности.'",
				ОбщегоНазначения.КодОсновногоЯзыка());
					
		ИмяСобытия = НСтр("ru = 'Попытка чтения JSON.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
					
		ЗаписьЖурналаРегистрации(ИмяСобытия,
			УровеньЖурналаРегистрации.Ошибка,,, ЛокализованноеСообщение);
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьJSONКлиент(СтрокаJSON, ДанныеОтвета)
	
	Попытка
		
		#Если ВебКлиент Тогда
			ПрочитатьJSONСервер(СтрокаJSON, ДанныеОтвета);
		#Иначе
			ЧтениеОтвета = Новый ЧтениеJSON;
			ЧтениеОтвета.УстановитьСтроку(СтрокаJSON);
			ДанныеОтвета = ПрочитатьJSON(ЧтениеОтвета);
		#КонецЕсли
		
	Исключение
		
		ЛокализованноеСообщение =
			НСтр("ru = 'Ошибка разбора JSON, возможно, получено служебное сообщение о недоступности сервера лояльности.'");
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ЛокализованноеСообщение,НСтр("ru = 'Ошибка'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
		
КонецПроцедуры

#Область ОплатаQRКодом

&НаКлиенте
Процедура НачатьОплатуВозвратПлатежнойСистемой(ПлатежнаяСистемаККТ)
	
	Элементы.СтраницаПлатежнаяСистема.Доступность = Истина;
	
	СтруктураОрганизацияИСНО = ВыбраннаяОрганизацияИСНО();
	Если ПробитыеЧеки.НайтиСтроки(СтруктураОрганизацияИСНО).Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаголовокОшибки = НСтр("ru = 'Ошибки оплаты'");
	
	Элементы.ПлатежнаяСистема_ИдентификаторПС.СписокВыбора.Очистить();
	
	ОтборДляПоиска = Новый Структура("Организация, ПлатежнаяСистема", ВыбраннаяОрганизация, ПлатежнаяСистемаККТ);
	
	Для Каждого СтрокаВидОплаты Из ПлатежнаяСистема_ВидыОплат.НайтиСтроки(ОтборДляПоиска) Цикл
		Элементы.ПлатежнаяСистема_ИдентификаторПС.СписокВыбора.Добавить(СтрокаВидОплаты.ИдентификаторПС, СтрокаВидОплаты.Представление);
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ВыбраннаяОрганизация) Тогда
		
		ТекстОшибки 	= НСтр("ru = 'Есть ошибки заполнения табличной части!'");
		
	ИначеЕсли РазличныеСНОВСпискеПокупок().Количество() > 1 
		И Не ОбщегоНазначенияРМККлиентПереопределяемый.ВидОперацииПродажа(Объект.ВидОперации) Тогда
		ТекстОшибки = НСтр("ru = 'В корзине покупателя товары по нескольким организациям. Оплата QR-кодом недоступна!'");
	ИначеЕсли СуммаКОплате <> СуммаИтого Тогда 
		ТекстОшибки = НСтр("ru = 'Совместное использование с другими видами оплат не поддерживается!'");
	ИначеЕсли Элементы.ПлатежнаяСистема_ИдентификаторПС.СписокВыбора.Количество()=0 Тогда
		
		Если Объект.Товары.Количество()>0 Тогда

			Если ПлатежнаяСистемаККТ = ПредопределенноеЗначение("Перечисление.ТипыПлатежнойСистемыККТ.SWiP") Тогда
				ТекстОшибки = НСтр("ru = 'В корзине покупателя товары организации, к которой не подключена оплата SWIP!'");
			ИначеЕсли ПлатежнаяСистемаККТ
					= ПредопределенноеЗначение("Перечисление.ТипыПлатежнойСистемыККТ.СистемаБыстрыхПлатежей") Тогда
				ТекстОшибки =
					НСтр("ru = 'В корзине покупателя товары организации, к которой не подключена оплата Сервисом быстрых платежей!'");
			Иначе
				ТекстОшибки = НСтр("ru = 'В корзине покупателя товары организации, к которой не подключена выбранная оплата!'");
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если Не ОбщегоНазначенияРМККлиентПереопределяемый.ВидОперацииПродажа(Объект.ВидОперации) Тогда
			
			Если ЗначениеЗаполнено(ЧекККМПродажа) Тогда
				
				Если ЗначениеЗаполнено(ЧекККМПродажа)
					И НЕ ПлатежнаяСистема_ВозможенВозврат Тогда
					ТекстОшибки = НСтр("ru = 'По выбранному чеку нельзя провести оплату.'");
				ИначеЕсли ЗначениеЗаполнено(ПлатежнаяСистема_ИдентификаторПС) Тогда
					
					Элементы.ПлатежнаяСистема_ИдентификаторПС.СписокВыбора.Очистить();
					Элементы.ПлатежнаяСистема_ИдентификаторПС.СписокВыбора.Добавить(ПлатежнаяСистема_ИдентификаторПС);
					
				КонецЕсли;
	
			КонецЕсли;
			
		Иначе
			
			Если Объект.Оплачивается
				И ЗначениеЗаполнено(ПлатежнаяСистема_ИдентификаторПС) Тогда
					
				Элементы.ПлатежнаяСистема_ИдентификаторПС.СписокВыбора.Очистить();
				Элементы.ПлатежнаяСистема_ИдентификаторПС.СписокВыбора.Добавить(ПлатежнаяСистема_ИдентификаторПС);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		ОткрытьСтраницуИнфоОшибка(ЗаголовокОшибки, ТекстОшибки);
		
	ИначеЕсли Элементы.ПлатежнаяСистема_ИдентификаторПС.СписокВыбора.Количество() > 0 Тогда
		
		Если Элементы.ПлатежнаяСистема_ИдентификаторПС.СписокВыбора.Количество() = 1 Тогда
			ИнициализацияПанелиДействий(Элементы.ПлатежнаяСистема_ИдентификаторПС.СписокВыбора[0].Значение);
		Иначе
			
			ТекущаяОперация = НСтр("ru = 'Оплата QR-кодом'");
		
			ИнтеграцияСПлатежнымиСистемамиРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПлатежнаяСистема);
			ИнтеграцияСПлатежнымиСистемамиРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.ГруппаВыборПлатежнойСистемы);
			
			ВариантыВыбора = Элементы.ПлатежнаяСистема_ИдентификаторПС.СписокВыбора.ВыгрузитьЗначения();
			КоличествоКнопок = Мин(ВариантыВыбора.Количество(), 4);
			
			Для Ном =1 По 4 Цикл
				Элементы["КомандаВыборВидаОплаты" + Ном].Видимость = Ложь;
			КонецЦикла;
			
			Ном = 0;
			
			Для Каждого ЭлементЗначение ИЗ Элементы.ПлатежнаяСистема_ИдентификаторПС.СписокВыбора Цикл
				
				Ном = Ном + 1;
				
				Если Ном <=4 Тогда
				
					Элементы["КомандаВыборВидаОплаты" + Ном].Заголовок = ЭлементЗначение.Представление;
					Элементы["КомандаВыборВидаОплаты" + Ном].Видимость = Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;	

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЭтапОплатыПлатежнойСистемой()
	
	ОповещениеЗавершитьОплату = Новый ОписаниеОповещения("ЗавершитьОплатуВозвратПлатежнойСистемой", ЭтотОбъект);
	
	Если ИнтеграцияСПлатежнымиСистемамиРМККлиентСервер.ТекущаяСтраница(Элементы.ГруппаОсновнаяСтраница) Тогда
		
		Если ПлатежнаяСистема_НоваяЗаявка.ВидОперацииПродажа Тогда
		
			Если ПлатежнаяСистема_НоваяЗаявка.Оплачивается Тогда
				ПодключитьОбработчикОжидания("ОпределитьСтатусОплаты", 0.1, Истина);
			Иначе
				ПодключитьОбработчикОжидания("ПолучитьИдентификаторОплаты", 0.1, Истина);
			КонецЕсли;
			
		Иначе
			
			Если ПлатежнаяСистема_НоваяЗаявка.Оплачивается Тогда
				ПодключитьОбработчикОжидания("ОпределитьСтатусВозврата", 0.1, Истина);
			ИначеЕсли ЗначениеЗаполнено(ПлатежнаяСистема_НоваяЗаявка.ДокументОплаты)
				И Не ЗначениеЗаполнено(ПлатежнаяСистема_ИдентификаторОплаты) Тогда
				ПодключитьОбработчикОжидания("ОпределитьСтатусОплаты", 0.1, Истина);
			Иначе
				ПодключитьОбработчикОжидания("ВыполнитьВозвратПлатежнойСистемой", 0.1, Истина);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИнтеграцияСПлатежнымиСистемамиРМККлиентСервер.ТекущаяСтраница(Элементы.ГруппаПодтверждение) Тогда
		ИнтеграцияСПлатежнымиСистемамиРМККлиент.ПодтвердитьВозврат(ЭтотОбъект, ОповещениеЗавершитьОплату);
	ИначеЕсли ИнтеграцияСПлатежнымиСистемамиРМККлиентСервер.ТекущаяСтраница(Элементы.ГруппаQRКод) Тогда
		ИнтеграцияСПлатежнымиСистемамиРМККлиент.ПечатьПречека(ЭтотОбъект, Истина, ПлатежнаяСистема_НоваяЗаявка.ПодключаемоеОборудование);
	ИначеЕсли ИнтеграцияСПлатежнымиСистемамиРМККлиентСервер.ТекущаяСтраница(Элементы.ГруппаВыполняется)
		ИЛИ ИнтеграцияСПлатежнымиСистемамиРМККлиентСервер.ТекущаяСтраница(Элементы.ГруппаОшибкаПолученияСтатуса) Тогда
		
		Если ПлатежнаяСистема_НоваяЗаявка.ВидОперацииПродажа Тогда
			ПодключитьОбработчикОжидания("ОпределитьСтатусОплаты", 0.1, Истина);
		Иначе
			ПодключитьОбработчикОжидания("ОпределитьСтатусВозврата", 0.1, Истина);
		КонецЕсли;
		
	ИначеЕсли ИнтеграцияСПлатежнымиСистемамиРМККлиентСервер.ТекущаяСтраница(Элементы.ГруппаОшибка) Тогда
		СанкционироватьЗакрытиеОперацииПлатежнойСистемой();
	Иначе
		ВыполнитьОбработкуОповещения(ОповещениеЗавершитьОплату, "ЗакрытьЧек");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОплатуПринудительно()
	
	ОповещениеЗавершитьОплату = Новый ОписаниеОповещения("ЗавершитьОплатуВозвратПлатежнойСистемой", ЭтотОбъект);
	ТребуетсяПодтверждениеАдминистратором = Не ЕстьПравоНаДействие("РазрешитьОплатуВозвратБезПодтвержденияОтПлатежнойСистемы");
	
	Если ИнтеграцияСПлатежнымиСистемамиРМККлиентСервер.ТекущаяСтраница(Элементы.ГруппаПодтверждениеОплаты) Тогда
		
		Если ТребуетсяПодтверждениеАдминистратором Тогда
			
			Если НЕ ЗначениеЗаполнено(КодДляЗаменыПрав) Тогда
				Возврат;
			КонецЕсли;
	
			ПлатежнаяСистема_НоваяЗаявка.БылоПодтверждениеКодомАдминистратора = Ложь;
			ПользовательДоЗаменыПрав = Объект.ПользовательБД;
			КассирДоЗаменыПрав = Объект.Кассир;
	
			ЗаменитьПраваИВыполнитьТребуемоеДействие(КодДляЗаменыПрав);
			
			Если ПлатежнаяСистема_НоваяЗаявка.БылоПодтверждениеКодомАдминистратора Тогда
				ВыполнитьОбработкуОповещения(ОповещениеЗавершитьОплату, "Да");
			Иначе
				
				УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияТекстПодтверждениеОплатыОшибка, Истина);
				ПодключитьОбработчикОжидания("СкрытьОшибкиПлатежнойСистемы", 5, Истина);
				
			КонецЕсли;
		
		Иначе
			ВыполнитьОбработкуОповещения(ОповещениеЗавершитьОплату, "Да");
		КонецЕсли;
		
	ИначеЕсли ПлатежнаяСистема_НоваяЗаявка.ВидОперацииПродажа Тогда
		
		ТекущаяОперация  = НСтр("ru='ПодтвержитьОплатуПлатежнойСистемой'");
		КодДляЗаменыПрав = "";
		
		ТекстИнформации  = НСтр("ru = 'Проверьте выполнение операции оплаты платежной системы.'") + Символы.ПС;
		ТекстИнформации  = ТекстИнформации + НСтр("ru = 'Сумма операции:'")
			+ " "+ ПлатежнаяСистема_НоваяЗаявка.ИтогПоОрганизации + Символы.ПС;
		
		Если ТребуетсяПодтверждениеАдминистратором Тогда
			
			ИнтеграцияСПлатежнымиСистемамиРМККлиент.ВывестиИнформацию(ЭтотОбъект,
				НСтр("ru = 'Попросите администратора подтвердить оплату'"),
				ТекстИнформации,
				"ПодтверждениеОплаты");
																
			Элементы.КодДляПодтвержденияОплаты.Видимость = Истина;
			ЭтаФорма.ТекущийЭлемент = Элементы.КодДляПодтвержденияОплаты;
			
		Иначе
			
			Элементы.КодДляПодтвержденияОплаты.Видимость = Ложь;
			
			ИнтеграцияСПлатежнымиСистемамиРМККлиент.ВывестиИнформацию(ЭтотОбъект,
				НСтр("ru = 'Операция оплаты прошла успешно?'"),
				ТекстИнформации,
				"ПодтверждениеОплаты");
				
		КонецЕсли;
		
	Иначе
		
		КодДляЗаменыПрав = "";
		ТекущаяОперация  = НСтр("ru='ПодтвержитьОплатуПлатежнойСистемой'");
		
		ТекстИнформации  = НСтр("ru = 'Проверьте выполнение операции возврата платежной системы.'") + Символы.ПС;
		ТекстИнформации  = ТекстИнформации + НСтр("ru = 'Сумма операции:'")
			+ " "+ ПлатежнаяСистема_НоваяЗаявка.ИтогПоОрганизации + Символы.ПС;
		
		Если ТребуетсяПодтверждениеАдминистратором Тогда
			
			ИнтеграцияСПлатежнымиСистемамиРМККлиент.ВывестиИнформацию(ЭтотОбъект,
				НСтр("ru = 'Попросите администратора подтвердить возврат'"),
				ТекстИнформации,
				"ПодтверждениеОплаты");
			
			Элементы.КодДляПодтвержденияОплаты.Видимость = Истина;
			ЭтаФорма.ТекущийЭлемент = Элементы.КодДляПодтвержденияОплаты;
			
		Иначе
			
			Элементы.КодДляПодтвержденияОплаты.Видимость = Ложь;
			
			ИнтеграцияСПлатежнымиСистемамиРМККлиент.ВывестиИнформацию(ЭтотОбъект, 
				НСтр("ru = 'Операция возврата прошла успешно?'"),
				ТекстИнформации,
				"ПодтверждениеОплаты");
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОплатуВозвратПлатежнойСистемой(Действие, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Действие = "ЗакрытьЧек"
		ИЛИ Действие = "Да" 
		ИЛИ Действие = "ДобавитьВидОплаты" Тогда
		
		Если Действие = "ДобавитьВидОплаты" Тогда
			ПлатежнаяСистема_НоваяЗаявка.БылоПодтверждениеПлатежнойСистемы = Истина;
		КонецЕсли;
		
		#Область ПробитиеЧека
		
			СуммаОплаченоQRКодом 		= ПлатежнаяСистема_НоваяЗаявка.ИтогПоОрганизации;
			
			Если ПлатежнаяСистема_НоваяЗаявка.ВидОперацииПродажа Тогда
				
				ЧекККМВОбработке = ПлатежнаяСистема_НоваяЗаявка.ДокументОплаты;
				ОтложенныйЧек	 = ПлатежнаяСистема_НоваяЗаявка.ДокументОплаты;
				
			Иначе
				
				ЧекККМВОбработке = ПлатежнаяСистема_НоваяЗаявка.ДокументВозврата;
				ОтложенныйЧек	 = ПлатежнаяСистема_НоваяЗаявка.ДокументВозврата;
				
			КонецЕсли;
		
			Если ПлатежнаяСистема_НоваяЗаявка.БылоПодтверждениеПлатежнойСистемы
				И ПлатежнаяСистема_НоваяЗаявка.ВидОперацииПродажа Тогда
				ПлатежнаяСистема_НоваяЗаявка.СсылочныйНомер =
					ИнтеграцияСПлатежнымиСистемамиРМКВызовСервера.ИдентификаторыОперацииОплаты(
						ПлатежнаяСистема_НоваяЗаявка.Интеграция,
						ПлатежнаяСистема_НоваяЗаявка.ДокументОплаты);
			Иначе
				ПлатежнаяСистема_НоваяЗаявка.СсылочныйНомер = "";
			КонецЕсли;
		
			ЗаполнитьТаблицуОплат();
			РассчитатьСуммыОплаты();
			НастроитьДоступностьПробитьЧек();
			
			ИнтеграцияСПлатежнымиСистемамиРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.ГруппаЗавершение);
			ИнтеграцияСПлатежнымиСистемамиРМККлиентСервер.НастроитьФормуПоИнтеграции(ЭтотОбъект);
			
			НачатьПечатьЧека();
		
		#КонецОбласти
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИдентификаторОплаты()
	
	ОповещениеЗавершитьОплату = Новый ОписаниеОповещения("ЗавершитьОплатуВозвратПлатежнойСистемой", ЭтотОбъект);
	ИнтеграцияСПлатежнымиСистемамиРМККлиент.ПолучитьИдентификаторОплаты(ЭтотОбъект, ОповещениеЗавершитьОплату);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВозвратПлатежнойСистемой()
	
	ОповещениеЗавершитьОплату = Новый ОписаниеОповещения("ЗавершитьОплатуВозвратПлатежнойСистемой", ЭтотОбъект);
	ИнтеграцияСПлатежнымиСистемамиРМККлиент.ВозвратОплаты(ЭтотОбъект, ОповещениеЗавершитьОплату);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьСтатусОплаты()
	
	Если Элементы.ГруппаРазделПлатежнаяСистема.ТекущаяСтраница <> Элементы.ГруппаПанельДействий Тогда
		
		ПлатежнаяСистема_НоваяЗаявка.ОпределитьСтатусОплатыПозже = Истина;
		Возврат;
		
	КонецЕсли;
	
	ОповещениеЗавершитьОплату = Новый ОписаниеОповещения("ЗавершитьОплатуВозвратПлатежнойСистемой", ЭтотОбъект);
	ИнтеграцияСПлатежнымиСистемамиРМККлиент.ОпределитьСтатусОплаты(ЭтотОбъект, ОповещениеЗавершитьОплату);
	ПлатежнаяСистема_НоваяЗаявка.ОпределитьСтатусОплатыПозже = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьСтатусВозврата()
	
	Если Элементы.ГруппаРазделПлатежнаяСистема.ТекущаяСтраница <> Элементы.ГруппаПанельДействий Тогда
		
		ПлатежнаяСистема_НоваяЗаявка.ОпределитьСтатусВозвратаПозже = Истина;
		Возврат;
		
	КонецЕсли;
	
	ОповещениеЗавершитьОплату = Новый ОписаниеОповещения("ЗавершитьОплатуВозвратПлатежнойСистемой", ЭтотОбъект);
	
	ИнтеграцияСПлатежнымиСистемамиРМККлиент.ОпределитьСтатусВозврата(ЭтотОбъект, ОповещениеЗавершитьОплату);
	
	ПлатежнаяСистема_НоваяЗаявка.ОпределитьСтатусВозвратаПозже = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВидимостьОплатыQRКодом(ИнициализацияФормы = Ложь)
	
	КлючПоискаОплатаСБП = Новый Структура("ПлатежнаяСистема",
		ПредопределенноеЗначение("Перечисление.ТипыПлатежнойСистемыККТ.СистемаБыстрыхПлатежей"));
	КлючПоискаОплатаSWiP = Новый Структура("ПлатежнаяСистема",
		ПредопределенноеЗначение("Перечисление.ТипыПлатежнойСистемыККТ.SWiP"));
	
	ПлатежнаяСистема_ИдентификаторОплаты	= "";
	ПлатежнаяСистема_ИдентификаторПС		= "";
	
	Если ОбщегоНазначенияРМККлиентПереопределяемый.ВидОперацииВозвратПродажи(Объект.ВидОперации) Тогда
		
		Если ЗначениеЗаполнено(ЧекККМПродажа) Тогда
			
			ПараметрыВозврата =
				ИнтеграцияСПлатежнымиСистемамиРМКВызовСервера.ПолучитьПараметрыДокументаОплаты(ЧекККМПродажа);
			ПлатежнаяСистема_ВозможенВозврат = ЗначениеЗаполнено(ПараметрыВозврата.ВидОплатыВозврата);
			
			Если ПлатежнаяСистема_ВозможенВозврат Тогда
				
				Если ПлатежнаяСистема_ВидыОплат.НайтиСтроки(Новый Структура("ИдентификаторПС, Организация",
						ПараметрыВозврата.ИдентификаторПС, ПараметрыВозврата.Организация)).Количество() Тогда
					
					КлючПоискаОплатаСБП.Вставить("ИдентификаторПС", 	ПараметрыВозврата.ИдентификаторПС);
					КлючПоискаОплатаСБП.Вставить("Организация", 		ПараметрыВозврата.Организация);
					
					КлючПоискаОплатаSWiP.Вставить("ИдентификаторПС", 	ПараметрыВозврата.ИдентификаторПС);
					КлючПоискаОплатаSWiP.Вставить("Организация",		ПараметрыВозврата.Организация);
					
					ПлатежнаяСистема_ИдентификаторОплаты = ПараметрыВозврата.ИдентификаторОплаты;
					ПлатежнаяСистема_ИдентификаторПС = ПараметрыВозврата.ИдентификаторПС;
					ПлатежнаяСистема_ВидОплаты = ИнтеграцияСПлатежнымиСистемамиРМККлиент.ОпределитьВидОплаты(ЭтотОбъект,
						ПлатежнаяСистема_ВидыОплат);
					
				КонецЕсли;
				
			Иначе
				
				КлючПоискаОплатаСБП 	= Неопределено;
				КлючПоискаОплатаSWiP 	= Неопределено;
				
			КонецЕсли;
			
		Иначе
			ПлатежнаяСистема_ВозможенВозврат = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ИспользоватьОплатуСПБ = КлючПоискаОплатаСБП <> Неопределено
		И ПлатежнаяСистема_ВидыОплат.НайтиСтроки(КлючПоискаОплатаСБП).Количество() > 0;
	ИспользоватьОплатуSWiP = КлючПоискаОплатаSWiP <> Неопределено
		И ПлатежнаяСистема_ВидыОплат.НайтиСтроки(КлючПоискаОплатаSWiP).Количество() > 0;
	
	Если ИнициализацияФормы Тогда
		
		УстановитьВидимостьЭлементаФормы(Элементы.ОплатаСБП,  ИспользоватьОплатуСПБ);
		УстановитьВидимостьЭлементаФормы(Элементы.ОплатаСВИП, ИспользоватьОплатуSWiP);
		
	Иначе
		
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСБП,  ИспользоватьОплатуСПБ);
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСВИП, ИспользоватьОплатуSWiP);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияПанелиДействий(ВыбранныйИдентификаторПС = Неопределено)
	
	Если ВыбранныйИдентификаторПС <> Неопределено Тогда
		
		ПлатежнаяСистема_ИдентификаторПС = ВыбранныйИдентификаторПС;
		ПлатежнаяСистема_ВидОплаты = ИнтеграцияСПлатежнымиСистемамиРМККлиент.ОпределитьВидОплаты(ЭтотОбъект,
			ПлатежнаяСистема_ВидыОплат);
		ПлатежнаяСистема_СпособОплаты = ИнтеграцияСПлатежнымиСистемамиРМККлиент.ОпределитьСпособОплаты(ЭтотОбъект,
			ПлатежнаяСистема_ВидыОплат, ВыбраннаяОрганизация);
		
	КонецЕсли;
	
	ТекущаяОперация = НСтр("ru = 'Оплата QR-кодом'");
		
	ИнтеграцияСПлатежнымиСистемамиРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПлатежнаяСистема);
	ИнтеграцияСПлатежнымиСистемамиРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.ГруппаПанельДействий);
	
	ПереданныеПараметры = ИнтеграцияСПлатежнымиСистемамиРМККлиентСервер.ПараметрыИнициализации();
	
	// Заполнение параметров
	ДокументОплачивается = ЗначениеЗаполнено(ОтложенныйЧек) И Объект.Оплачивается;
	
	Если ОбщегоНазначенияРМККлиентПереопределяемый.ВидОперацииПродажа(Объект.ВидОперации) Тогда
		ПереданныеПараметры.ДокументОплаты = ?(ДокументОплачивается, ОтложенныйЧек, ЧекККМВОбработке);
	Иначе
		
		ПереданныеПараметры.ДокументВозврата = ?(ДокументОплачивается, ОтложенныйЧек, ЧекККМВОбработке);
		ПереданныеПараметры.ДокументОплаты = ЧекККМПродажа;
		ПереданныеПараметры.ИдентификаторОплаты = ПлатежнаяСистема_ИдентификаторОплаты;
		
	КонецЕсли;
	
	ПереданныеПараметры.ИтогПоОрганизации = СуммаКОплате;
	ПереданныеПараметры.НомерДокумента = 1;
	ПереданныеПараметры.ВидОперации = Объект.ВидОперации;
	ПереданныеПараметры.Оплачивается = ДокументОплачивается;
	ПереданныеПараметры.ИдентификаторПС = ПлатежнаяСистема_ИдентификаторПС;
	ПереданныеПараметры.ВидОплатыПлатежнойСистемы = ПлатежнаяСистема_ВидОплаты;
	ПереданныеПараметры.СпособОплатыПлатежнойСистемы = ПлатежнаяСистема_СпособОплаты;
	ПереданныеПараметры.Магазин = Объект.ТорговыйОбъект;
	ПереданныеПараметры.Организация = ВыбраннаяОрганизация;
	ПереданныеПараметры.КассаККМ = КассаККМДляОперации;
	ПереданныеПараметры.ВидОперацииПродажа =
		ОбщегоНазначенияРМККлиентПереопределяемый.ВидОперацииПродажа(Объект.ВидОперации);
	ПереданныеПараметры.ПодключаемоеОборудование = ПодключаемоеОборудование;
	
	// Обрабатывается отдельным правом
	ПереданныеПараметры.РазрешитьОплатуВозвратБезПодтвержденияОтПлатежнойСистемы = Истина;
	
	Для Каждого СтрокаТоваров ИЗ Объект.Товары Цикл
		
		Если СтрокаТоваров.Организация = ВыбраннаяОрганизация Тогда
		
			НоваяСтрока = ИнтеграцияСПлатежнымиСистемамиРМККлиентСервер.СтрокаТоваров();
		
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоваров);
		
			НоваяСтрока.Наименование = СтрокаТоваров.ПредставлениеНоменклатураХарактеристика;
			НоваяСтрока.ЕдиницаИзмерения = СтрокаТоваров.ПредставлениеЕдиницыИзмерения;
			НоваяСтрока.СуммаСкидки = СтрокаТоваров.СуммаСкидкиНаценки;
		
			ПереданныеПараметры.Товары.Добавить(НоваяСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИнтеграцияСПлатежнымиСистемамиРМККлиентСервер.ИнициализироватьПараметры(ЭтотОбъект,
		ПереданныеПараметры, ПлатежнаяСистема_ВидыОплат);
	ИнтеграцияСПлатежнымиСистемамиРМККлиент.ЗапуститьФоновыеЗадания(ЭтотОБъект);
	
	Элементы.ГруппаСписокОрганизацийПоКорзине.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьОплачиваемыйЧекQRКодом(СледующийЧек = Ложь)
	
 	Если СледующийЧек 
		И ПлатежнаяСистема_ОжидаемоеКоличествоЧеков > 0 Тогда
		
		Если ЗначениеЗаполнено(ПлатежнаяСистема_ИдентификаторПС) 
			И ЗначениеЗаполнено(ВыбраннаяОрганизация) Тогда
			
			ПлатежнаяСистема = ИнтеграцияСПлатежнымиСистемамиРМККлиент.ОпределитьПлатежнуюСистему(ЭтотОбъект,
				ПлатежнаяСистема_ВидыОплат);
			
			Ключ 				= Новый Структура("ПлатежнаяСистема, Организация", ПлатежнаяСистема, ВыбраннаяОрганизация);
			СтрокиОплаты 		= ПлатежнаяСистема_ВидыОплат.НайтиСтроки(Ключ);
		
			Если СтрокиОплаты.Количество() Тогда
				
				ПлатежнаяСистема_СанкционированноеЗакрытие = Ложь;
				ЧекККМВОбработке = Неопределено;
				
				ПробитьЧек(СтрокиОплаты[0].ПлатежнаяСистема);
			
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Объект.Оплачивается Тогда
		
		СтруктураОплаты =
			ИнтеграцияСПлатежнымиСистемамиРМККлиент.ОпределитьПараметрыОплатыПоОперациямДокумента(ЭтотОбъект,
				ПлатежнаяСистема_ВидыОплат, ОтложенныйЧек);
		ПлатежнаяСистема_ИдентификаторПС = СтруктураОплаты.ИдентификаторПС;
		ПлатежнаяСистема_ВидОплаты = СтруктураОплаты.ВидОплаты;
		ПлатежнаяСистемаККТ = СтруктураОплаты.ПлатежнаяСистема;
		
		Если ЗначениеЗаполнено(ПлатежнаяСистема_ИдентификаторПС) Тогда
			ОплатаQRКодом(ПлатежнаяСистемаККТ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СанкционироватьЗакрытиеОперацииПлатежнойСистемой(ОтменитьОплатуQRКодом = Истина)
	
	ОтключитьОбработчикОжидания("ОпределитьСтатусВозврата");
	ОтключитьОбработчикОжидания("ОпределитьСтатусОплаты");
	ОтключитьОбработчикОжидания("ПолучитьИдентификаторОплаты");
	ОтключитьОбработчикОжидания("ВыполнитьВозвратПлатежнойСистемой");
	
	ТекущаяОперация = "";
	ПлатежнаяСистема_СанкционированноеЗакрытие = Ложь;
	ПлатежнаяСистема_ОжидаемоеКоличествоЧеков = 0;
	
	Элементы.ГруппаСписокОрганизацийПоКорзине.Доступность = Истина;
	
	Если ОтменитьОплатуQRКодом Тогда 
		
		ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
		ПараметрыПересчета.ПоКомандеОтменитьОплатуQRКодом = Истина;
		РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
		
	КонецЕсли;
	
	ИнтеграцияСПлатежнымиСистемамиРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОплата);
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьОшибкиПлатежнойСистемы()
	УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияТекстПодтверждениеОплатыОшибка, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОплатаQRКодом(ПлатежнаяСистемаККТ)
	
	ПлатежнаяСистема_СанкционированноеЗакрытие = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ВыбраннаяОрганизация) Тогда
		
		ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
		ПараметрыПересчета.ПоКомандеОплатаQRКодом = Истина;
		
		РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
		
		ПлатежнаяСистема_ОжидаемоеКоличествоЧеков = ОжидаемоеКоличествоЧеков - ПробитыеЧеки.Количество();
		
		Если ПлатежнаяСистема_ОжидаемоеКоличествоЧеков > 1
			И ПлатежнаяСистема_ВидыОплат.
				НайтиСтроки(Новый Структура("Организация, ПлатежнаяСистема",
					ВыбраннаяОрганизация, ПлатежнаяСистемаККТ)).Количество()=0 Тогда
			
				ПлатежнаяСистема_ОжидаемоеКоличествоЧеков = ПлатежнаяСистема_ОжидаемоеКоличествоЧеков - 1;
				ПереключитьЧекПродажи(Команды.ПереключитьЧекОрганизация2);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СуммаКОплате = 0
		И СуммаОплаченоQRКодом > 0 Тогда
		ПробитьЧек(Команды.ПробитьЧек);
	Иначе
		ПробитьЧек(ПлатежнаяСистемаККТ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьQRКодПлатежнойСистемы(ШтрихКод)
	
	Если ИнтеграцияСПлатежнымиСистемамиРМККлиентСервер.ТекущаяСтраница(Элементы.ГруппаОсновнаяСтраница)
		И Элементы.ИдентификаторОплаты.Видимость Тогда
		
		ПлатежнаяСистема_ИдентификаторОплаты = ШтрихКод;
		ПриИзмененииИдентификатораОплаты();
		
	ИначеЕсли ИнтеграцияСПлатежнымиСистемамиРМККлиентСервер.ТекущаяСтраница(Элементы.ГруппаПодтверждениеОплаты)
		И Элементы.КодДляПодтвержденияОплаты.Видимость Тогда
		
		КодДляЗаменыПрав = ШтрихКод;
		ЗавершитьОплатуПринудительно();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииИдентификатораОплаты()
	ПлатежнаяСистема_НоваяЗаявка.ИдентификаторОплаты = ПлатежнаяСистема_ИдентификаторОплаты;
КонецПроцедуры

#КонецОбласти

#Область ОплатаСертификатомНСПК

&НаКлиенте
Процедура ОплатитьЭлектроннымСертификатом(СледующаяОперация)
	
	ПараметрыОперации = ОборудованиеПлатежныеСистемыКлиентСервер.ПараметрыВыполненияЭквайринговойОперации();
	ПараметрыОперации.ТипТранзакции  = "PayElectronicCertificate";
	ПараметрыОперации.ИдентификаторКорзины = ИдентификаторКорзиныНСПК;
	ПараметрыОперации.СуммаЭлектронногоСертификата = СуммаОплаченоСертификатамиНСПК;
	ПараметрыОперации.СуммаСобственныхСредств = СуммаОплаченоБН;
	
	ПараметрыОперации.Вставить("СледующаяОперация", СледующаяОперация);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьОперациюНСПКЗавершение", ЭтотОбъект, ПараметрыОперации);
	ОборудованиеПлатежныеСистемыКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(
		ОписаниеОповещения,
		УникальныйИдентификатор,
		Неопределено,
		ПараметрыОперации,
		Неопределено,
		Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьЭлектронныйСертификат(СледующаяОперация)
	
	ПараметрыОперации = ОборудованиеПлатежныеСистемыКлиентСервер.ПараметрыВыполненияЭквайринговойОперации();
	ПараметрыОперации.ТипТранзакции  = "ReturnElectronicCertificate";
	ПараметрыОперации.ИдентификаторКорзины = ИдентификаторКорзиныНСПК;
	ПараметрыОперации.СуммаЭлектронногоСертификата = СуммаОплаченоСертификатамиНСПК;
	ПараметрыОперации.СуммаСобственныхСредств = СуммаОплаченоБН;
	
	ПараметрыОперации.Вставить("СледующаяОперация", СледующаяОперация);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьОперациюНСПКЗавершение", ЭтотОбъект, ПараметрыОперации);
	ОборудованиеПлатежныеСистемыКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(
		ОписаниеОповещения,
		УникальныйИдентификатор,
		Неопределено,
		ПараметрыОперации,
		Неопределено,
		Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОперациюНСПКЗавершение(РезультатВыполнения, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		Если РезультатВыполнения.Свойство("ХешНомерКарты") Тогда
			ХешНомерКарты = РезультатВыполнения.ХешНомерКарты;
		КонецЕсли;
		
		Если РезультатВыполнения.Свойство("НомерКарты") Тогда
			НомерКарты = РезультатВыполнения.НомерКарты;
		КонецЕсли;
		
		Если НЕ ДополнительныеПараметры = Неопределено И ДополнительныеПараметры.Свойство("СледующаяОперация") Тогда
			
			Если ДополнительныеПараметры.СледующаяОперация = "ПредварительноеОдобрениеИспользования" Тогда
				СогласоватьЭСНСПК(ДополнительныеПараметры.ТоварныеПозиции, ХешНомерКарты);
			ИначеЕсли ДополнительныеПараметры.СледующаяОперация = "ПредварительноеОдобрениеВозврата" Тогда
				СогласоватьВозвратЭСНСПК(ДополнительныеПараметры.ТоварныеПозиции, ХешНомерКарты);
			Иначе
				
				ДанныеЭТ = ОбщегоНазначенияРМККлиентПереопределяемый.ДанныеТекущегоЭТ(ЭтотОбъект);
				СтруктураПоискаПК = Новый Структура();
				СтруктураПоискаПК.Вставить("ВидОплаты", 
					ОбщегоНазначенияРМККлиентПереопределяемый.ВидОплатыПлатежнаяКартаНСПК());
				Если ЕстьСвойство(РезультатВыполнения, "СуммаОперации") Тогда
					СтруктураПоискаПК.Вставить("Сумма", РезультатВыполнения.СуммаСобственныхСредств);
				КонецЕсли;
				МассивОплатПК = Объект.Оплата.НайтиСтроки(СтруктураПоискаПК);
				
				Если МассивОплатПК.Количество() > 0 Тогда
					
					СтрокаОплаты = МассивОплатПК[0];
					СтрокаОплаты.ЭквайринговыйТерминал = ДанныеЭТ.ЭквайринговыйТерминал;
					СтрокаОплаты.НомерПлатежнойКарты = РезультатВыполнения.НомерКарты;
					СтрокаОплаты.НомерЧекаЭТ = РезультатВыполнения.НомерЧекаЭТ;
					СтрокаОплаты.СсылочныйНомер = РезультатВыполнения.СсылочныйНомер;
					
				КонецЕсли;
				
				СтруктураПоискаЭС = Новый Структура();
				СтруктураПоискаЭС.Вставить("ВидОплаты", ВидОплатыНСПК);
				
				Если ЕстьСвойство(РезультатВыполнения, "СуммаЭлектронногоСертификата") Тогда
					СтруктураПоискаПК.Вставить("Сумма", РезультатВыполнения.СуммаЭлектронногоСертификата);
				КонецЕсли;
				МассивОплатЭС = Объект.Оплата.НайтиСтроки(СтруктураПоискаЭС);
				
				Если МассивОплатЭС.Количество() > 0 Тогда
					
					СтрокаОплаты = МассивОплатЭС[0];
					СтрокаОплаты.ВидОплаты = ВидОплатыНСПК;
					СтрокаОплаты.ЭквайринговыйТерминал = ДанныеЭТ.ЭквайринговыйТерминал;
					СтрокаОплаты.НомерПлатежнойКарты = РезультатВыполнения.НомерКарты;
					СтрокаОплаты.НомерЧекаЭТ = РезультатВыполнения.НомерЧекаЭТ;
					СтрокаОплаты.СсылочныйНомер = РезультатВыполнения.ИдентификаторКорзины;
					
				КонецЕсли;
				
				ТранзакцияПоКартеЗавершена = Истина;
				НачатьПечатьЧека();
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ЗаголовокОшибки = НСтр("ru='Оплата НСПК'");
		ТекстСообщения = РезультатВыполнения.ОписаниеОшибки;
		ОткрытьСтраницуИнфоОшибка(ЗаголовокОшибки, ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьЭСНСПК(ТоварныеПозиции, ХешНомерКарты)
	
	ПараметрыОперации = ПолучичитьПараметрыОперацииНСПКНаСервере(Объект.КассаККМ, "");
	
	ПараметрыОперации.ХешНомерКарты = ХешНомерКарты;
	ПараметрыОперации.ТоварныеПозиции = ТоварныеПозиции;
	
	ПредварительноеОдобрениеНСПКПолучено = Ложь;
	ОповещениеМетода = Новый ОписаниеОповещения("ПредварительноеОдобрениеНСПКЗавершение", ЭтотОбъект, ПараметрыОперации);
	ЭлектронныеСертификатыНСПККлиент.НачатьПредварительноеОдобрениеИспользования(ОповещениеМетода, ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьВозвратЭСНСПК(ТоварныеПозиции, ХешНомерКарты)
	
	ПараметрыОперации = ПолучичитьПараметрыОперацииНСПКНаСервере(Объект.КассаККМ, ИдентификаторКорзиныНСПК);
	
	ПараметрыОперации.ХешНомерКарты = ХешНомерКарты;
	
	ДополнительныеПараметры = Новый Структура("ПараметрыОперации, ТоварныеПозиции", ПараметрыОперации, ТоварныеПозиции);
	ПредварительноеОдобрениеНСПКПолучено = Ложь;
	ОповещениеМетода = Новый ОписаниеОповещения("ПолучениеСоставаКорзиныНСПКЗавершение",
		ЭтотОбъект, ДополнительныеПараметры);
	ЭлектронныеСертификатыНСПККлиент.НачатьПолучениеСоставаКорзины(ОповещениеМетода, ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительноеОдобрениеНСПКЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт 
	
	Если РезультатВыполнения.Результат Тогда
		
		ПредварительноеОдобрениеНСПКПолучено = Истина;
		ОбработатьРезультатНСПКНаСервере(РезультатВыполнения,
			ДополнительныеПараметры.Свойство("СохранитьИдентификаторКорзиныНСПК"));
			
	Иначе
		
		ЗаголовокОшибки = НСтр("ru='Оплата НСПК'");
		ТекстСообщения =
			СтрШаблон(НСтр("ru='Ошибка: (%1) %2'"), РезультатВыполнения.КодРезультата, РезультатВыполнения.ОписаниеОшибки);
		ОткрытьСтраницуИнфоОшибка(ЗаголовокОшибки, ТекстСообщения);
		
	КонецЕсли;
	
	Если ПредварительноеОдобрениеНСПКПолучено 
		И НЕ Элементы.СтраницыСтаканПраво.ТекущаяСтраница = Элементы.СтраницаСторноЭквайринг
		И НЕ Элементы.СтраницыСтаканПраво.ТекущаяСтраница = Элементы.СтраницаИнфоОшибка Тогда
		
			РассчитатьСуммыОплаты();
		
			ЭтоВозврат = ОбщегоНазначенияРМККлиентПереопределяемый.ВидОперацииВозвратПродажи(Объект.ВидОперации);
			Если НЕ ЭтоВозврат Тогда
				
				УстановитьДоступностьЭлементаФормы(Элементы.ОплатаНаличными, Истина);
				УстановитьДоступностьЭлементаФормы(Элементы.ОплатаКартой, Истина);
				
			КонецЕсли;
			
			УстановитьДоступностьЭлементаФормы(Элементы.ПроверитьСертификатНСПК, Ложь);
			УстановитьДоступностьЭлементаФормы(Элементы.ПробитьЧекНСПК, Истина);
			
			ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
			ПараметрыПересчета.ПоКомандеБН = НЕ Элементы.ГруппаОплатаКартой.Видимость И НЕ ЭтоВозврат;
			ПараметрыПересчета.ПриИзмененииБНОплаты = Истина;
			РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
			
	КонецЕсли;
	
	УстановитьЗаголовкиОплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеСоставаКорзиныНСПКЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
	
		РезультатВыполнения.Вставить("ПредыдущаяПокупка", Истина);
		
		ОбработатьРезультатНСПКНаСервере(РезультатВыполнения, Истина);
		
		РезультатВыполнения.Удалить("ПредыдущаяПокупка");
		
		Если НЕ РезультатВыполнения.Результат Тогда
			Возврат;
		КонецЕсли;
		
		ТоварныеПозиции = ДополнительныеПараметры.ТоварныеПозиции;
		// Удаление строк, которых не было в оригинальной продаже ЭС.
		СтрокиНеИзВозврата = ТаблицаТоваровФСС.НайтиСтроки(Новый Структура("НомерПозицииВозврата", 999));
		
		Для каждого СтрокаНеИзВозврата Из СтрокиНеИзВозврата Цикл
			КоличествоТоварныхПозиций = ТоварныеПозиции.Количество();
			Для Индекс = 1 По КоличествоТоварныхПозиций Цикл
				СтрокаТовара = ТоварныеПозиции[КоличествоТоварныхПозиций - Индекс];
				Если СтрокаТовара.Артикул = СтрокаНеИзВозврата.Артикул Тогда
					ТоварныеПозиции.Удалить(КоличествоТоварныхПозиций - Индекс);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Заполнение номера позиции в оригинальной продаже ЭС.
		Для Каждого СтрокаПодтверждения Из ТоварныеПозиции Цикл
			
			СтрокаФСС = ТаблицаТоваровФСС.НайтиПоИдентификатору(СтрокаПодтверждения.НомерПозиции);
			Если НЕ СтрокаФСС = Неопределено Тогда
				СтрокаПодтверждения.НомерПозицииВозврата = СтрокаФСС.НомерПозицииВозврата;
			КонецЕсли;
			
		КонецЦикла;
		
		ПараметрыОперации = ДополнительныеПараметры.ПараметрыОперации;
		ПараметрыОперации.ТоварныеПозиции = ТоварныеПозиции;
		
		ПредварительноеОдобрениеНСПКПолучено = Ложь;
		ОповещениеМетода = Новый ОписаниеОповещения("ПредварительноеОдобрениеНСПКЗавершение", ЭтотОбъект, ПараметрыОперации);
		ЭлектронныеСертификатыНСПККлиент.НачатьПредварительноеОдобрениеВозврата(ОповещениеМетода, ПараметрыОперации);
		
	Иначе
		
		ЗаголовокОшибки = НСтр("ru='Оплата НСПК'");
		ТекстСообщения =
			СтрШаблон(НСтр("ru='Ошибка: (%1) %2'"), РезультатВыполнения.КодРезультата, РезультатВыполнения.ОписаниеОшибки);
		ОткрытьСтраницуИнфоОшибка(ЗаголовокОшибки, ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучичитьПараметрыОперацииНСПКНаСервере(КассаККМ, ИдентификаторКорзиныНСПК)
	
	Возврат ЭлектронныеСертификатыНСПКРМКПереопределяемый.ПараметрыОперацииНСПКПоКассеККМ(КассаККМ, ИдентификаторКорзиныНСПК);
	
КонецФункции

&НаСервере
Процедура ОбработатьРезультатНСПКНаСервере(РезультатВыполнения, СохранитьИдентификаторКорзиныНСПК = Ложь);
	
	Если РезультатВыполнения.Свойство("ИдентификаторКорзины") И НЕ ПустаяСтрока(РезультатВыполнения.ИдентификаторКорзины)
		И НЕ СохранитьИдентификаторКорзиныНСПК Тогда
		ИдентификаторКорзиныНСПК = РезультатВыполнения.ИдентификаторКорзины;
	КонецЕсли;
	
	Если РезультатВыполнения.Свойство("СуммаСертификатами") Тогда
		СуммаОплаченоСертификатамиНСПК = РезультатВыполнения.СуммаСертификатами;
	КонецЕсли;
	
	Если РезультатВыполнения.Свойство("ТоварныеПозиции") И РезультатВыполнения.ТоварныеПозиции.Количество() > 0 Тогда
		
		Для Каждого ТоварнаяПозиция Из РезультатВыполнения.ТоварныеПозиции Цикл
			
			СтрокаТовара = Неопределено;
			
			Если РезультатВыполнения.Свойство("ПредыдущаяПокупка") Тогда
				
				СтрокиТоваров = ТаблицаТоваровФСС.НайтиСтроки(Новый Структура("Артикул", ТоварнаяПозиция.Артикул));
				Если СтрокиТоваров.Количество()>0 Тогда
					СтрокаТовара = СтрокиТоваров[0];
				КонецЕсли;
				
			Иначе
				СтрокаТовара = ТаблицаТоваровФСС.НайтиПоИдентификатору(ТоварнаяПозиция.НомерПозиции);
			КонецЕсли;
			
			Если СтрокаТовара = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если РезультатВыполнения.Свойство("ПредыдущаяПокупка") Тогда
				СтрокаТовара.НомерПозицииВозврата = ТоварнаяПозиция.НомерПозиции;
			КонецЕсли;
			
			СтрокаТовара.КоличествоФСС = ТоварнаяПозиция.Количество;
			СтрокаТовара.ЦенаФСС = ТоварнаяПозиция.Цена;
			СтрокаТовара.СуммаФСС = СтрокаТовара.КоличествоФСС*СтрокаТовара.ЦенаФСС;
			
			Если ТоварнаяПозиция.Свойство("Сертификаты") И ТоварнаяПозиция.Сертификаты.Количество() > 0 Тогда
				
				КоличествоПоСертификату = 0;
				СуммаПоСертификату = 0;
				МаксимальнаяЦена = 0;
				
				Для Каждого Сертификат Из ТоварнаяПозиция.Сертификаты Цикл
					
					СтрокаСертификата = СтрокаТовара.Сертификаты.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаСертификата, Сертификат);
					КоличествоПоСертификату = КоличествоПоСертификату + СтрокаСертификата.Количество;
					СуммаПоСертификату = СуммаПоСертификату + (СтрокаСертификата.Количество * СтрокаСертификата.Цена);
					МаксимальнаяЦена = Макс(МаксимальнаяЦена, СтрокаСертификата.МаксимальнаяЦена);
					
				КонецЦикла;
				
				СтрокаТовара.МаксимальнаяЦена = МаксимальнаяЦена;
				СтрокаТовара.КоличествоФСС = КоличествоПоСертификату;
				СтрокаТовара.СуммаФСС = СуммаПоСертификату;
				СтрокаТовара.ЦенаФСС =
					?(КоличествоПоСертификату = 0, СуммаПоСертификату, Окр(СуммаПоСертификату/КоличествоПоСертификату, 2));
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ВывестиПредварительноеОдобрениеНСПКНаПечать();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовкиОплаты()
	
	ЭтоВозврат = ОбщегоНазначенияРМККлиентПереопределяемый.ВидОперацииВозвратПродажи(Объект.ВидОперации);
	
	Если ЭтоВозврат Тогда
		ЗаголовокОплаты = НСтр("ru = 'Вернуть'");
	Иначе
		ЗаголовокОплаты = НСтр("ru = 'Пробить чек'");
	КонецЕсли;
	
	Элементы.ПробитьЧекНСПК.Заголовок = ЗаголовокОплаты;

КонецПроцедуры

&НаКлиенте
Функция ЕстьВозможностьОплатыСертификатомНСПК()
	
	ЗаголовокОшибки = НСтр("ru = 'Оплата электронным сертификатом НСПК'");
	
	Если Объект.Оплата.Количество() Тогда
		ТекстОшибки =
			НСтр("ru = 'Удалите другие виды оплаты из документа.
			|Совместное использование с другими видами оплат не поддерживается.'");
		ОткрытьСтраницуИнфоОшибка(ЗаголовокОшибки, ТекстОшибки);
		Возврат Ложь;
		
	КонецЕсли;
	
	СтрокиДляОплатыЭС = Объект.Товары.НайтиСтроки(Новый Структура("ВозможнаОплатаЭС", Истина));
	Если СтрокиДляОплатыЭС.Количество() = 0 Тогда
		
		ТекстОшибки =
			НСтр("ru = 'В документе не выбраны товары из классификатора ФСС, либо у товаров не указан код ТРУ ФСС.'");
		ОткрытьСтраницуИнфоОшибка(ЗаголовокОшибки, ТекстОшибки);
		Возврат Ложь;
		
	КонецЕсли;
	
	ТекстОшибки = ПроверитьВозможностьОплатыНСПКНаСервере();
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		ОткрытьСтраницуИнфоОшибка(ЗаголовокОшибки, ТекстОшибки);
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура НастроитьЭлементыВРежимеПроверкаСертификатаНСПК(РежимОплаты = Истина, ЭтоВозврат = Ложь)
	
	Если РежимОплаты Тогда
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПодтверждениеНСПК);
		
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСуммаОплатаСертификатамиНСПК, Истина);
		Если Не ЭтоВозврат Тогда
			УстановитьДоступностьЭлементаФормы(Элементы.ОплатаНаличными, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ОплатаКартой, Истина);
		КонецЕсли;
		УстановитьДоступностьЭлементаФормы(Элементы.Предоплата, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСертификатом, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаВРассрочку, Ложь);
		
		УстановитьВидимостьЭлементаФормы(Элементы.ОплатаСертификатомНСПК, НЕ ЭтоВозврат И НЕ РежимОплаты);
	
		УстановитьВидимостьЭлементаФормы(Элементы.ОплатаСБП, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ОплатаСВИП, Ложь);
		
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаПроверитьСертификатНСПК, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаQRCode, Ложь);
		
		УстановитьВидимостьЭлементаФормы(Элементы.ПробитьЧек, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ПробитьЧекНСПК, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.ПробитьЧекНСПК, Ложь);
		
	Иначе
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаЛевоОбщая);
		
		Если Не ЭтоВозврат Тогда
			
			УстановитьДоступностьЭлементаФормы(Элементы.ОплатаНаличными, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ОплатаКартой, Истина);
			НастроитьВидимостьОплатыQRКодом(Истина);
			УстановитьВидимостьЭлементаФормы(Элементы.ГруппаQRCode, Истина);
			
			УстановитьДоступностьЭлементаФормы(Элементы.Предоплата, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСертификатом, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ОплатаВРассрочку, Истина);
			
		КонецЕсли;
		
		УстановитьВидимостьЭлементаФормы(Элементы.ОплатаСертификатомНСПК, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаПроверитьСертификатНСПК, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаНал, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаКартой, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСуммаОплатаСертификатамиНСПК, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ПробитьЧек, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.ПробитьЧекНСПК, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСертификатомНСПК, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.ПроверитьСертификатНСПК, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьПредварительноеОдобрениеНСПК()
	
	ТаблицаТоваровФСС.Очистить();
	ЗаполнитьТаблицуТоваровФСС(Объект.Товары);
	ВывестиПредварительноеОдобрениеНСПКНаПечать();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуТоваровФСС(Товары)
	
	Если ЗначениеЗаполнено(ВыбраннаяОрганизация) Тогда
		ТоварныеПозиции = Товары.НайтиСтроки(
			Новый Структура("ВозможнаОплатаЭС, Организация", Истина, ВыбраннаяОрганизация));
	Иначе
		ТоварныеПозиции = Товары.НайтиСтроки(Новый Структура("ВозможнаОплатаЭС", Истина));
	КонецЕсли;
	
	Для Каждого СтрокаТовара Из ТоварныеПозиции Цикл
		
		ТоварныеСтроки = ТаблицаТоваровФСС.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТовара.Номенклатура));
		Если ТоварныеСтроки.Количество() = 0 Тогда
			
			НоваяСтрока = ТаблицаТоваровФСС.Добавить();
			НоваяСтрока.НомерПозиции = НоваяСтрока.ПолучитьИдентификатор();
			НоваяСтрока.НомерПозицииВозврата = 999;
			НоваяСтрока.Артикул = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТовара.Номенклатура, "Код");
			НоваяСтрока.КодТРУ = СтрокаТовара.КодТРУ;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовара);
			
		Иначе
			
			НоваяСтрока = ТоварныеСтроки[0];
			НоваяСтрока.Количество = НоваяСтрока.Количество + СтрокаТовара.Количество;
			НоваяСтрока.Сумма = НоваяСтрока.Сумма + СтрокаТовара.Сумма;
			НоваяСтрока.Цена =
				?(НоваяСтрока.Количество = 0, НоваяСтрока.СуммаВсего, Окр(НоваяСтрока.СуммаВсего/НоваяСтрока.Количество, 2));
				
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиПредварительноеОдобрениеНСПКНаПечать()
	
	Таб = Новый ТабличныйДокумент();
	
	Макет = ПолучитьОбщийМакет("ПФ_MXL_ДанныеПроверкиТоваровФСС");
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	
	ЭтоОперацияВозврат = ОбщегоНазначенияРМКПереопределяемый.ВидОперацииЧекаККМ(Истина) = Объект.ВидОперации;
	
	Если ЭтоОперацияВозврат Тогда
		ЗаголовокТаблицы = НСтр("ru = 'Товары к возврату на электронный сертификат НСПК'");
	Иначе
		ЗаголовокТаблицы = НСтр("ru = 'Товары к оплате электронным сертификатом НСПК'");
	КонецЕсли;
	
	УстановитьПараметрМакетаНСПК(ОбластьЗаголовок, "ЗаголовокТаблицы", ЗаголовокТаблицы);
	
	Таб.Вывести(ОбластьЗаголовок);
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	Таб.Вывести(ОбластьШапка);
	
	СуммаЧекФСС = 0;
	
	Для Каждого СтрокаТоваров Из ТаблицаТоваровФСС Цикл
		
		ОбластьДанныхСтроки = Макет.ПолучитьОбласть("Строка");
		УстановитьПараметрМакетаНСПК(
			ОбластьДанныхСтроки,
			"Наименование",
			СтрШаблон("%1, %2", СтрокаТоваров.Артикул, СокрЛП(СтрокаТоваров.Номенклатура)));
		ОбластьДанныхСтроки.Параметры.Заполнить(СтрокаТоваров);
		Таб.Вывести(ОбластьДанныхСтроки);
		
		СуммаЧекФСС = СуммаЧекФСС + СтрокаТоваров.Сумма;
		
	КонецЦикла;
	
	ОбластПодвалФСС = Макет.ПолучитьОбласть("ПодвалФСС");
	УстановитьПараметрМакетаНСПК(ОбластПодвалФСС, "Сумма", СуммаЧекФСС);
	УстановитьПараметрМакетаНСПК(ОбластПодвалФСС, "СуммаФСС", СуммаОплаченоСертификатамиНСПК);
	Таб.Вывести(ОбластПодвалФСС);
	
	Если НЕ ЭтоОперацияВозврат Тогда
		
		ОбластПрочиеТовары = Макет.ПолучитьОбласть("ПрочиеТовары");
		УстановитьПараметрМакетаНСПК(ОбластПрочиеТовары, "Сумма", СуммаИтого - СуммаЧекФСС);
		Таб.Вывести(ОбластПрочиеТовары);
		
		ОбластПодвал = Макет.ПолучитьОбласть("Подвал");
		УстановитьПараметрМакетаНСПК(ОбластПодвал, "Сумма", СуммаИтого);
		Таб.Вывести(ОбластПодвал);
		
	КонецЕсли;
	
	ТабличныйДокументСертифиактНСПК.Очистить();
	ТабличныйДокументСертифиактНСПК = Таб;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьПараметрМакетаНСПК(ОбластьМакета, ИмяПараметра, ЗначениеПараметра)
	ОбластьМакета.Параметры.Заполнить(Новый Структура(ИмяПараметра, ЗначениеПараметра));
КонецПроцедуры

&НаСервере
Функция ПроверитьВозможностьОплатыНСПКНаСервере()
	
	ТекстОшибки = ЭлектронныеСертификатыНСПКРМКПереопределяемый.ПроверитьВозможностьОплатыНСПК(ЭтотОбъект);
	Возврат ТекстОшибки;
	
КонецФункции

&НаКлиенте
Функция ПередатьДанныеФискальногоЧекаНСПК()
	
	ПараметрыОперации = ПолучитьПараметрыФискальнойОперацииНСПКНаСервере(ЧекККМВОбработке);
	
	Если ПараметрыОперации = Неопределено Тогда
		
		Сообщение = СтрШаблон(НСтр("ru = 'Отсутствуют данные о фискализации чека: %1'"), СокрЛП(ЧекККМВОбработке));
		ПоказатьПредупреждение(,Сообщение,, "Оплата сертификатом НСПК");
		
	Иначе
		
		ОповещениеМетода = Новый ОписаниеОповещения("ПередатьДанныеФискальногоЧекаНСПКЗавершение", ЭтотОбъект, ПараметрыОперации);
		ЭлектронныеСертификатыНСПККлиент.НачатьПередачуДанныхФискальногоЧека(ОповещениеМетода, ПараметрыОперации);
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПараметрыФискальнойОперацииНСПКНаСервере(ЧекККМ)
	Возврат ЭлектронныеСертификатыНСПКРМКПереопределяемый.ПолучитьПараметрыФискальнойОперацииНСПК(ЧекККМ);
КонецФункции

&НаКлиенте
Процедура ПередатьДанныеФискальногоЧекаНСПКЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт 
	
	РезультатПередачи = Новый Структура("Результат, КодРезультата, ОписаниеОшибки", Ложь, 999, "");
	ЗаполнитьЗначенияСвойств(РезультатПередачи, РезультатВыполнения);
	
	Если Не РезультатПередачи.Результат Тогда
		
		Сообщение = СтрШаблон(
			НСтр("ru = 'При отправке подтверждения операции %1 на сервер НСПК произошла ошибка (код %2):
			|%3'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка()),
			ДополнительныеПараметры.ИдентификаторКорзины,
			Строка(РезультатПередачи.КодРезультата),
			РезультатПередачи.ОписаниеОшибки);
			
			ПоказатьПредупреждение(,Сообщение,, "Оплата сертификатом НСПК");
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Процедура ЗаполнитьПараметрыКассираДляПечати(ПараметрыОперации, Пользователь, Кассир)
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПараметрыКассираДляПечати(ПараметрыОперации, Пользователь, Кассир);
КонецПроцедуры

#Область SMSПодтверждениеНомераТелефона

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыПроверкиПоSMSКоду()
	
	ПараметрыПроверкиПоSMS = Новый Структура();
	ПараметрыПроверкиПоSMS.Вставить("КодПодтверждения", "");
	ПараметрыПроверкиПоSMS.Вставить("ВаринатПроверки", "");
	ПараметрыПроверкиПоSMS.Вставить("ПопытокВвода", 0);
	
	Возврат ПараметрыПроверкиПоSMS;
	
КонецФункции

&НаКлиенте
Процедура ПереключитьНаСтраницуВводаКодаSMS(ПриОплатеБонусами = Ложь, ПриЗаведенииКарты = Ложь)
	
	Если ПриЗаведенииКарты Тогда
		
		ПараметрыВводаКодаSMS = ПараметрыПроверкиПоSMSКоду();
		ПараметрыВводаКодаSMS.ВаринатПроверки = "ПриЗаведенииКарты";
		
	Иначе
		
		Если ПараметрыВводаКодаSMS = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПустая Тогда
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
	КонецЕсли;
	
	УстановитьВидимостьЭлементаФормы(Элементы.ОтменитьЗаведениеКарты, ПриЗаведенииКарты);
	
	Если ПараметрыВводаКодаSMS.ВаринатПроверки = "ПриВыборе" Тогда
		ВвестиДанныеПокупателяКлиент();
	ИначеЕсли ПараметрыВводаКодаSMS.ВаринатПроверки = "ПриОплатеБонусами"
		И НЕ ПриОплатеБонусами Тогда
			Возврат;
	КонецЕсли;
		
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВводКодаSMS, Истина);
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЗаголовок, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаВыборМеню, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаБонусыКартыЛояльности, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.СтраницаСозданиеКарты, Ложь);
	
	СформироватьСообщениеИОтправитьSMS();
	
КонецПроцедуры

&НаКлиенте
Процедура КодПодтвержденияВведеныйИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Введено4Цифры = СтрДлина(СокрЛП(Текст)) = 4;
	
	Если Введено4Цифры Тогда
		
		ТекущийЭлемент = Элементы.ОтправитьSMSСКодомПроверки;
		КодПроверкиИзSMS = Текст;
		ПроверитьВведеныйКодИзSMS();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВведеныйКодИзSMS();
	
	Если ПараметрыВводаКодаSMS = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если КодПроверкиИзSMS = ПараметрыВводаКодаSMS.КодПодтверждения Тогда
		
		ЗаголовокСообщения = НСтр("ru='Верный код.'");
		ТекстПояснения = НСтр("ru='Номер телефона подтвержден.'");
		КартинкаСообщения = БиблиотекаКартинок.Успешно32;
		ПоказатьОповещениеПользователя(ЗаголовокСообщения, ,ТекстПояснения , КартинкаСообщения);
		
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЗаголовок, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаВыборМеню, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаБонусыКартыЛояльности, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.СтраницаСозданиеКарты, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВводКодаSMS, Ложь);
		
		Если ПараметрыВводаКодаSMS.ВаринатПроверки = "ПриЗаведенииКарты" Тогда
			СоздатьКартуКлиент();
		ИначеЕсли ПараметрыВводаКодаSMS.ВаринатПроверки = "ПриОплатеБонусами" Тогда
			ОплатитьБонусамиКлиент();
		КонецЕсли;
		
		ПараметрыВводаКодаSMS = Неопределено;
		Элементы.ОплатитьБонусами.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		
	Иначе
		
		ЗаголовокСообщения = НСтр("ru='Неверный код.'");
		ТекстПояснения = НСтр("ru='Повторите ввод кода или отправьте SMS повторно или отмените ввод карты.'");
		КартинкаСообщения = БиблиотекаКартинок.Ошибка32;
		ПоказатьОповещениеПользователя(ЗаголовокСообщения, ,ТекстПояснения , КартинкаСообщения);
		
		Попыток = ПараметрыВводаКодаSMS.ПопытокВвода;
		Попыток = Попыток + 1;
		ПараметрыВводаКодаSMS.ПопытокВвода = Попыток;
		
		ПодсказкаПоляВводаКода = Элементы.КодПроверкиИзSMSРасширеннаяПодсказка;
		ПодсказкаПоляВводаКода.Заголовок = НСтр("ru='Неверный код'");
		ПодсказкаПоляВводаКода.ЦветТекста = Новый Цвет(255, 0, 0);
		
		ТекущийЭлемент = Элементы.КодПроверкиИзSMS;
		КодПроверкиИзSMS = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСообщениеИОтправитьSMS()
	
	ПодсказкаПоляВводаКода = Элементы.КодПроверкиИзSMSРасширеннаяПодсказка;
	ПодсказкаПоляВводаКода.Заголовок = НСтр("ru='Введите код из SMS'");
	ПодсказкаПоляВводаКода.ЦветТекста = Новый Цвет();
	
	РезультатОтправкиSMS = СформироватьСообщениеИОтправитьSMSСервер();
	
	Если РезультатОтправкиSMS.Результат Тогда
		
		ТекстПояснения = НСтр("ru='Введите код из SMS для подтверждения'");
		ЗаголовокСообщения = СтрШаблон(НСтр("ru='SMS с кодом отправлено на номер %1'"), РезультатОтправкиSMS.НомерТелефона);
		КартинкаСообщения = БиблиотекаКартинок.ОтправитьSMS;
		
	Иначе
		
		ТекстПояснения = РезультатОтправкиSMS.ОписаниеОшибки;
		ЗаголовокСообщения = СтрШаблон(НСтр("ru='Ошибка отправки SMS на номер %1'"), РезультатОтправкиSMS.НомерТелефона);
		КартинкаСообщения = БиблиотекаКартинок.Ошибка32;
		
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(ЗаголовокСообщения,, ТекстПояснения, КартинкаСообщения);
	КодПроверкиИзSMS = "";
	ТекущийЭлемент = Элементы.КодПроверкиИзSMS;
	
КонецПроцедуры

&НаСервере
Функция СформироватьСообщениеИОтправитьSMSСервер()
	
	КодПодтверждения = СлучайноеЧетырехзначноеЧисло();
	
	ПараметрыВводаКодаSMS.КодПодтверждения = КодПодтверждения;
	ПараметрыВводаКодаSMS.ПопытокВвода = 0;

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КодПодтверждения", КодПодтверждения);
	
	Если ПараметрыВводаКодаSMS.ВаринатПроверки = "ПриЗаведенииКарты" Тогда
		
		ШаблонСообщения = ТекущаяНастройкаРМК.ШаблонSMSПриЗаведенииКарты;
		НомерТелефонаПолучателя = НоваяКартаТелефон;
		
	Иначе
		
		ШаблонСообщения = ТекущаяНастройкаРМК.ШаблонSMSПриПродаже;
		НомерТелефонаПолучателя = НайденнаяКартаТелефон;
		
	КонецЕсли;
	
	ТекстСообщения = ОбщегоНазначенияРМКПереопределяемый.СформироватьТекстСообщения(ШаблонСообщения,
		ДополнительныеПараметры);
	
	РезультатОтправки = ОтправитьSMS(ТекстСообщения, НомерТелефонаПолучателя);
	
	Возврат РезультатОтправки;
	
Конецфункции

// Отправляет SMS сообщение на указанный номер телефона.
//
// Параметры:
//  ТекстСообщения - Строка - Текст SMS.
//  НомерТелефона - Строка - Номер телефона получателя.
//
// Возвращаемое значение:
//  РезультатОтправки - Структура со свойствами:
//   Результат - Булево - Истина при успешной отправке.
//   ОписаниеОшибки - Строка - Текст ошибки.
//   НомерТелефона - Строка - Номер телефона получателя.
//
&НаСервереБезКонтекста
Функция ОтправитьSMS(ТекстСообщения, НомерТелефона)
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатОтправки = Новый Структура;
	РезультатОтправки.Вставить("Результат", Ложь);
	РезультатОтправки.Вставить("ОписаниеОшибки", "");
	РезультатОтправки.Вставить("НомерТелефона", НомерТелефона);
	
	Если ЗначениеЗаполнено(НомерТелефона) Тогда
		
		МассивНомеров = Новый Массив;
		МассивНомеров.Добавить(НомерТелефона);
		РезультатОтправкиБСП = ОбщегоНазначенияРМКПереопределяемый.ОтправитьSMS(МассивНомеров, ТекстСообщения);
		
		Если РезультатОтправкиБСП.ОтправленныеСообщения.Количество() = 0 Тогда
			
			Если РезультатОтправкиБСП.Свойство("ОписаниеОшибки") Тогда
				РезультатОтправки.ОписаниеОшибки = РезультатОтправкиБСП.ОписаниеОшибки;
			КонецЕсли;
			
		Иначе
			РезультатОтправки.Результат = Истина;
		КонецЕсли;
		
	Иначе
		РезультатОтправки.ОписаниеОшибки =
			НСтр("ru = 'Для владельца карты не задан номер телефона. Выслать код подтверждения не удалось'");
	КонецЕсли;
	
	Возврат РезультатОтправки;
	
КонецФункции

// Возвращает случайное число.
//
// Возвращаемое значение:
//  Строка - число в формате от 0 до 9999.
//
&НаСервереБезКонтекста
Функция СлучайноеЧетырехзначноеЧисло() Экспорт
	
	Генератор = Новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());
	СлучайноеЧисло = Генератор.СлучайноеЧисло(0, 9999);
	
	Если СлучайноеЧисло < 1000 Тогда
		СлучайноеЧислоСтрокой = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Строка(СлучайноеЧисло), 4, "0");
	Иначе
		СлучайноеЧислоСтрокой = Формат(СлучайноеЧисло, "ЧГ=0");
	КонецЕсли;
	
	Возврат СлучайноеЧислоСтрокой;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура НастроитьПредставлениеТовара(ТекущаяСтрока)
	
	ПредставлениеТовара = "";
	Если ТекущаяСтрока.ЭтоНабор Тогда
		
		ПредставлениеХарактеристики = "";
		Если ЗначениеЗаполнено(ТекущаяСтрока.ХарактеристикаНабора) Тогда
			ПредставлениеХарактеристики = " (" + Строка(ТекущаяСтрока.ХарактеристикаНабора) + ")";
		КонецЕсли;
		ПредставлениеТовара = СтрШаблон("%1%2", ТекущаяСтрока.НоменклатураНабора, ПредставлениеХарактеристики);
		
	Иначе
		ПредставлениеТовара = ТекущаяСтрока.ПредставлениеНоменклатураХарактеристика;
	КонецЕсли;
	
	Элементы.ТекущийТоварНаименование.Заголовок = ПредставлениеТовара;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьТекущуюЦену(ТекущаяСтрока)
	
	РазрешеноРедактироватьЦену = Ложь;
	Если ТекущаяСтрока.ЭтоНабор И Не ТекущаяСтрока.РазрешеноРедактироватьЦенуНабора Тогда
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НоменклатураНабора", ТекущаяСтрока.НоменклатураНабора);
		СтруктураПоиска.Вставить("ХарактеристикаНабора", ТекущаяСтрока.ХарактеристикаНабора);
		МассивТоваровНабора = Объект.Товары.НайтиСтроки(СтруктураПоиска);
		ЦенаИтого = 0;
		Для Каждого СтрокаМассива Из МассивТоваровНабора Цикл
			ЦенаИтого = ЦенаИтого + СтрокаМассива.Цена * СтрокаМассива.Количество / СтрокаМассива.КоличествоНаборов;
		КонецЦикла;
		ТекущийТоварЦенаИзКарточки = ЦенаИтого;
		
	Иначе
		
		ТекущийТоварЦенаИзКарточки = ТекущаяСтрока.Цена;
		
		Если (ОбщегоНазначенияРМККлиентПереопределяемый.ВидОперацииПродажа(Объект.ВидОперации) И НЕ ПриемАванса)
				ИЛИ ОбщегоНазначенияРМККлиентПереопределяемый.ВидОперацииСкупка(Объект.ВидОперации)
				ИЛИ ЭтоЗаменаТоваров Тогда
			РазрешеноРедактироватьЦену = НЕ (СписокРолейПользователя.НайтиПоЗначению("ПравоИзменятьЦенуРМК") = Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварЦенаИзКарточки, РазрешеноРедактироватьЦену);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьТекущееКоличество(ТекущаяСтрока)
	
	Если ТекущаяСтрока.ЭтоНабор Тогда
		ТекущийТоварКоличество = ТекущаяСтрока.КоличествоНаборов;
	Иначе
		ТекущийТоварКоличество = ТекущаяСтрока.КоличествоУпаковок;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПодсказкуДляВыбораСерийИПартий(ТекущаяСтрока)
	
	ТекстПодсказки = "";
	
	Если ТекущаяСтрока.НеобходимостьВводаСерии И ТекущаяСтрока.ИспользоватьПартии Тогда
		ТекстПодсказки = НСтр("ru = 'Указать серию и партию.'");
	ИначеЕсли ТекущаяСтрока.НеобходимостьВводаСерии Тогда
		ТекстПодсказки = НСтр("ru = 'Указать серию.'");
	ИначеЕсли ТекущаяСтрока.ИспользоватьПартии Тогда
		ТекстПодсказки = НСтр("ru = 'Указать партию.'");
	КонецЕсли;
	
	Элементы.УказатьСерии.РасширеннаяПодсказка.Заголовок = ТекстПодсказки;
	
КонецПроцедуры

#Область ЗаменаТоваров

&НаКлиенте
Процедура НастроитьЭлементыВРежимеЗаменаТоваров()
	
	СформироватьЗаголовок(НСтр("ru='Замена товаров'"));
	
	ПереключитьНаСледующийЧек("НаСледующий");
	Элементы.Товары.ОтборСтрок = Неопределено;
	
	СуммаОплаченоНал = 0;
	СуммаОплаченоБН = 0;
	
	СуммаОплаченоЗачетАванса = 0;
	СуммаОплаченоБезнал = 0;
	
	Элементы.СуммаОплаченоНал.Подсказка = НСтр("ru = 'Наличные'");
	Элементы.СуммаОплаченоБН.Подсказка = НСтр("ru = 'Карта'");
	Элементы.СуммаОплаченоБонусами.Подсказка = НСтр("ru = 'Бонусы'");
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаНал, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаКартой, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаВРассрочку, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаЗачетАванса, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаБезнал, Ложь);
	
	Для Каждого СтрокаТоваров Из Объект.Товары Цикл
		СтрокаТоваров.ТоварКЗамене = Истина;
	КонецЦикла;
	
	Если СуммаОплаченоВРассрочку > 0 Тогда
		
		УстановитьВидимостьЭлементаФормы(Элементы.ОплатаНаличными, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ОплатаКартой, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ОплатаСБП, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ОплатаСВИП, Ложь);
		СуммаОплаченоВРассрочку = 0;
		
	КонецЕсли;
	
	НастроитьЭлементыВРежимеПродажа();
	УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварЦенаИзКарточки, Истина);
	
	УстановитьВидимостьЭлементаФормы(Элементы.ЗаменаТоваров, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ОплатаСертификатомНСПК, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.РассчитатьСкидки, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ОтменаРасчетаСкидок, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСертификатом, Ложь);
	
	УстановитьВидимостьЭлементаФормы(Элементы.ОтложитьЧек, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаQRCode, Ложь);
	
	ЭтоЗаменаТоваров = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ПодборТоваровПрикладнаяФорма

&НаКлиенте
Процедура ОбработкаПодбораТоваров(РезультатПодбора, ДополнительныПараметры) Экспорт
	
	Если ТипЗнч(РезультатПодбора) = Тип("Структура")
		И РезультатПодбора.Свойство("АдресКорзиныВХранилище")
		И ЗначениеЗаполнено(РезультатПодбора.АдресКорзиныВХранилище) Тогда
		
		ОбработкаПодбораТоваровНаСервере(РезультатПодбора);
		СформироватьЗаголовок();
		УстановитьАктивностьСтроки();
		ПересчитатьИтогиТабличнойЧастиТовары();
		НастроитьЭлементыФормы(Элементы.СтраницаОбщая, Истина);
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработкаПодбораТоваровНаСервере(РезультатПодбора)
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПоПодборуТоваров(РезультатПодбора, ЭтотОбъект);
	ДополнитьСведенияОНоменклатуре();
	ОбработкаПодбораНаборов();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПодбораНаборов()
	
	СтрокиНаборов = Объект.Товары.НайтиСтроки(Новый Структура("ЭтоНабор, НомерНабора", Истина, 0));
	
	Для Каждого СтрокаТовара Из СтрокиНаборов Цикл
		
		Если СтрокаТовара.ЭтоНабор Тогда
			
			ДанныеНабора = Новый Структура();
			ДанныеНабора.Вставить("Номенклатура", СтрокаТовара.Номенклатура);
			ДанныеНабора.Вставить("Характеристика", СтрокаТовара.Характеристика);
			ДанныеНабора.Вставить("Цена", СтрокаТовара.Цена);
			
			Для к = 1 по СтрокаТовара.КоличествоУпаковок Цикл
				ДобавитьНаборВТабличнуюЧасть(ДанныеНабора);
			КонецЦикла;
			
		КонецЕсли;
		
		Объект.Товары.Удалить(СтрокаТовара);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемы_ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
	МодульПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	
	МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
	МодульПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
	МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры
#КонецОбласти

&НаКлиенте
Процедура СкорректироватьТекущееКоличество(ТекущаяСтрока)
	
	Если ТекущаяСтрока.ПоштучноеВыбытие Тогда
		
		НовоеКоличество = Окр(ТекущийТоварКоличество);
		
		Если Не ТекущаяСтрока.КоличествоВПотребительскойУпаковке = 0
			И ТекущаяСтрока.КоличествоВПотребительскойУпаковке < ТекущийТоварКоличество Тогда
			НовоеКоличество = ТекущаяСтрока.КоличествоВПотребительскойУпаковке;
		КонецЕсли;
		
		ТекущийТоварКоличество = НовоеКоличество;
		ТекущаяСтрока.Количество = НовоеКоличество;
		ТекущаяСтрока.КоличествоУпаковок = НовоеКоличество;
		ТекущаяСтрока.ЧастичноеВыбытиеКоличество = НовоеКоличество;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

