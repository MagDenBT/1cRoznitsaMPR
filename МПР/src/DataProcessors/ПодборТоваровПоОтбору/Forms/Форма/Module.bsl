#Область ПрограммныйИнтерфейс

&НаКлиенте
Перем КэшированныеЗначения;

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Обрабатывает ответ на вопрос
// о подтверждении перезаполнения таблицы товаров
// вызывается в результате немодального вопроса 
// при обработке команды ЗаполнитьТаблицуТоваров.
//
// Параметры:
//  Результат - КодВозвратаДиалога - структура результата выполнения операции.
//  ДополнительныеПараметры - Структура - структура дополнительных параметров.
//
&НаКлиенте
Процедура ЗаполнитьТаблицуТоваровОбработкаВопроса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьТаблицуТоваровНаСервере();
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает создание и выбор новой характеристики.
//
// Параметры:
//  Результат - Структура - структура результата выполнения операции.
//  ДополнительныеПараметры - Структура - структура дополнительных параметров.
//
&НаКлиенте
Процедура ОбработатьСозданиеИВыборНовойХарактеристики(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторТекущейСтроки);
	ТекущаяСтрока.Характеристика = Результат;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	ДополнительныеКолонкиНоменклатуры = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ДополнительнаяКолонкаПриОтображенииНоменклатуры");
	
	ЗагрузитьНастройкиОтбораПоУмолчанию();
	
	Если Параметры.Свойство("Заголовок") Тогда
		ЭтаФорма.Заголовок = Параметры.Заголовок;
		ЭтаФорма.АвтоЗаголовок = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;  
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(
		Объект.Товары,
		ТекущаяСтрока,
		СтруктураДействий,
		КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьХарактеристикуНоменклатуры(
		ЭтаФорма,
		Элемент,
		СтандартнаяОбработка,
		Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаСоздание(Элемент, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.СоздатьХарактеристикуНоменклатуры(ЭтотОбъект, Элемент, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)
	
	Закрыть(ПоместитьВоВременноеХранилищеНаСервере());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуТоваров(Команда)
	
	Если Объект.Товары.Количество() = 0 Тогда
		ЗаполнитьТаблицуТоваровНаСервере();
	Иначе
		ТекстВопроса = НСтр("ru = 'Таблица товаров будет перезаполнена.'") + Символы.ПС + НСтр("ru = 'Продолжить?'");
		ДополнительныеПараметры = Новый Структура;
		ОбработчикОповещения = Новый ОписаниеОповещения(
										"ЗаполнитьТаблицуТоваровОбработкаВопроса",
										ЭтотОбъект,
										ДополнительныеПараметры);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет загрузку настроек отбора из настроек по умолчанию.
//
&НаСервере
Процедура ЗагрузитьНастройкиОтбораПоУмолчанию()
	
	ИспользоватьАссортимент = ПолучитьФункциональнуюОпцию("ИспользоватьАссортимент");
	Если ИспользоватьАссортимент Тогда
		СхемаКомпоновкиДанных = Обработки.ПодборТоваровПоОтбору.ПолучитьМакет("МакетАссортимент");
	Иначе
		//{ds-11.08.2020-#31
		//СхемаКомпоновкиДанных = Обработки.ПодборТоваровПоОтбору.ПолучитьМакет("Макет");
		СхемаКомпоновкиДанных = Обработки.ПодборТоваровПоОтбору.ПолучитьМакет("ds_Макет");
		//}
	КонецЕсли;
	КомпоновщикНастроек.Инициализировать(
		Новый ИсточникДоступныхНастроекКомпоновкиДанных(
				ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, ЭтаФорма.УникальныйИдентификатор)));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
КонецПроцедуры

// Процедура выполняет заполнение табличной части "Товары".
//
&НаСервере
Процедура ЗаполнитьТаблицуТоваровНаСервере(ПроверятьЗаполнение = Истина)
	
	// Поля необходимые для вывода в таблицу товаров на форме.
	СтруктураНастроек = Обработки.ПодборТоваровПоОтбору.ПолучитьПустуюСтруктуруНастроек();
	
	СтруктураНастроек.ОбязательныеПоля.Добавить("Номенклатура");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		СтруктураНастроек.ОбязательныеПоля.Добавить("Характеристика");
	КонецЕсли;
	
	СтруктураНастроек.КомпоновщикНастроек = КомпоновщикНастроек;
	ИспользоватьАссортимент = ПолучитьФункциональнуюОпцию("ИспользоватьАссортимент");
	Если ИспользоватьАссортимент Тогда
		СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "МакетАссортимент";
	Иначе
		//{ds-11.08.2020-#31
		//СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "Макет";
		СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ds_Макет";
		//}
	КонецЕсли;
	
	Объект.Товары.Очистить();
	
	// Загрузка сформированного списка товаров.
	СтруктураРезультата = Обработки.ПодборТоваровПоОтбору.ПодготовитьСтруктуруДанных(СтруктураНастроек);
	Для Каждого СтрокаТЧ Из СтруктураРезультата.ТаблицаТоваров Цикл
		
		НоваяСтрока = Объект.Товары.Добавить();
		НоваяСтрока.Номенклатура         = СтрокаТЧ.Номенклатура;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
			НоваяСтрока.Характеристика       = СтрокаТЧ.Характеристика;
		КонецЕсли;
	КонецЦикла;
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	
	Элементы.Товары.Обновить();
	
КонецПроцедуры

&НаСервере
Функция ПоместитьВоВременноеХранилищеНаСервере()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить());
	
КонецФункции

#КонецОбласти

#Область ds

//{ds-21.10.2021
&НаКлиенте
Процедура ds_ПолучитьНоменклатуруИзБуфера(Команда)
	
	ТекстБуфера = ds_ОбщегоНазначенияКлиент.ПолучитьТекстБуфераОбмена();
	
	МассивНоменклатуры = ds_ОбщегоНазначенияВызовСервера.МассивНоменклатурыИзБуфераОбмена(ТекстБуфера);

	СписокНоменклатуры = Новый СписокЗначений;
	Для Каждого Стр Из МассивНоменклатуры Цикл 
		СписокНоменклатуры.Добавить(Стр.Номенклатура);	
	КонецЦикла;	
	
	ПолеНоменклатура = КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Номенклатура"));
	
	Если ПолеНоменклатура <> Неопределено Тогда
		НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ЛевоеЗначение = ?(ПолеНоменклатура <> Неопределено, ПолеНоменклатура.Поле, Новый ПолеКомпоновкиДанных("ЧекККМ.Товары.Номенклатура"));
		НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		НовыйЭлементОтбора.ПравоеЗначение = СписокНоменклатуры;	
	КонецЕсли;

КонецПроцедуры
//}

//{ds-21.10.2021
&НаКлиенте
Процедура ЗагрузитьИзТабличногоДокумента(Команда)
	
	ДополнительныеПараметры = Новый Структура();
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьФайлНаСервереЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	НачатьПомещениеФайлаНаСервер(ОповещениеОЗавершении,,, "",, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьФайлНаСервереЗавершение(ОписаниеПомещенногоФайла, ДополнительныеПараметры) Экспорт
	
	Если ОписаниеПомещенногоФайла <> Неопределено Тогда
		ПрочитатьФайлНаСервере(ОписаниеПомещенногоФайла.Адрес, ОписаниеПомещенногоФайла.СсылкаНаФайл.Имя, ДополнительныеПараметры);	
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Процедура ПрочитатьФайлНаСервере(Адрес, ИмяФайла, ДополнительныеПараметры)
	
	ТЗ = ТаблицаДанных(Адрес, ИмяФайла);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЗ.Код КАК ПолеПоиска
	|ПОМЕСТИТЬ ТЗ
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура
	|ИЗ
	|	ТЗ КАК ТЗ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО ТЗ.ПолеПоиска = Номенклатура.Код";
	Запрос.УстановитьПараметр("ТЗ", ТЗ);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	СписокНоменклатуры = Новый СписокЗначений;
	Для Каждого Стр Из Результат Цикл 
		СписокНоменклатуры.Добавить(Стр.Номенклатура);	
	КонецЦикла;	
	
	ПолеНоменклатура = КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Номенклатура"));
	
	Если ПолеНоменклатура <> Неопределено Тогда
		НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ЛевоеЗначение = ?(ПолеНоменклатура <> Неопределено, ПолеНоменклатура.Поле, Новый ПолеКомпоновкиДанных("ЧекККМ.Товары.Номенклатура"));
		НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		НовыйЭлементОтбора.ПравоеЗначение = СписокНоменклатуры;	
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Функция ТаблицаДанных(Адрес, ИмяФайла)

	Настройки_НомерЛиста = 1;
	Настройки_НомерКолонкиКод = 1;
	Настройки_НомерПервойСтроки = 1;
	
	Данные = ПолучитьИзВременногоХранилища(Адрес);
	ПутьКФайлу = КаталогВременныхФайлов() + ИмяФайла;
	Данные.Записать(ПутьКФайлу);
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.Прочитать(ПутьКФайлу, СпособЧтенияЗначенийТабличногоДокумента.Значение);
	
	ОбластьЛиста = ТабДок.ПолучитьОбласть(ТабДок.Области[1 - Настройки_НомерЛиста].Имя);
	КоличествоСтрок = ОбластьЛиста.ПолучитьРазмерОбластиДанныхПоВертикали();
	КоличествоКолонок = ОбластьЛиста.ПолучитьРазмерОбластиДанныхПоГоризонтали();
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Код", ОбщегоНазначения.ОписаниеТипаСтрока(11));
		
	Для НомерСтроки = Настройки_НомерПервойСтроки По КоличествоСтрок Цикл 
		НовСтр = ТЗ.Добавить();
		НовСтр.Код = ПрочитатьЯчейку(ТабДок.Область("R" + Формат(НомерСтроки, "ЧГ=") + "C" + Формат(Настройки_НомерКолонкиКод, "ЧГ=")), "Текст");
	КонецЦикла;	
	
	Возврат ТЗ;
	
КонецФункции	

&НаСервере
Функция ПрочитатьЯчейку(Область, ЗначениеТекст)
	
	Если ЗначениеТекст = "Значение" Тогда 
		Если Область.СодержитЗначение Тогда 
			Значение = Область.Значение;
		Иначе
			Попытка
				Значение = Число(Область.Текст);
			Исключение
				Значение = 0;	
			КонецПопытки;	
		КонецЕсли;
	Иначе
		Значение = СокрЛП(СтрЗаменить(Область.Текст, Символ(160), ""));		
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции
//}

#КонецОбласти
