#Область ПеременныеМодуля

&НаКлиенте
Перем КэшированныеЗначения;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Инициализируем реквизиты формы.
	ИмяКонфигурации = Метаданные.Имя;
	ВерсияКонфигурации = Метаданные.Версия;
	РазделениеВключено = РаботаВМоделиСервиса.РазделениеВключено();
	Если НЕ ЗначениеЗаполнено(ПорядковыйНомерПерехода) Тогда
		ПорядковыйНомерПерехода = 1;
	КонецЕсли;
	ДатаОстатков = ТекущаяДатаСеанса();
	ЧасовойПояс = ЧасовойПоясСеанса();
	АдресСервиса = "1cfresh.com";
	Если РазделениеВключено Тогда
		Логин = ИмяПользователя();
	КонецЕсли;
	
	КодКонфигурацииДляПерехода = "sbm";
	ИмяКонфигурацииДляПерехода = "УправлениеНебольшойФирмой";
	СинонимКонфигурацииДляПерехода = НСтр("ru = 'Управление нашей фирмой'");
	НаименованиеПриложения = СинонимКонфигурацииДляПерехода + СтрШаблон(НСтр("ru = ' (Перенос данных из %1)'"), ИмяКонфигурации);
	
	// Установим свойства элементов формы.
	УправлениеЭлементамиФормыСервер();
	
	ЗаполнитьТаблицуПереходов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	КэшированныеЗначения = Новый Соответствие;
	
	УправлениеЭлементамиФормыКлиент();
	
	// При переходе в сервис продолжаем со страницы авторизации.
	Если СпособПерехода = 0 И ПорядковыйНомерПерехода > 0 Тогда
		СтрокаПереходаВходВСервис = СтрокаТаблицыПереходов(0, "СтраницаВходВСервис");
		ПорядковыйНомерПерехода = Мин(ПорядковыйНомерПерехода, СтрокаПереходаВходВСервис.ПорядковыйНомерПерехода);
	КонецЕсли;
	
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьФормуВыбораОрганизации" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуВыбораЗначений("Организации");
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "УдалитьПомеченныеОбъекты" Тогда
		СтандартнаяОбработка = Ложь;
		
		ОткрытьФорму("Обработка.УдалениеПомеченныхОбъектов.Форма");
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ЗакрытьКассовыеСмены" Тогда
		СтандартнаяОбработка = Ложь;
		
		ОткрытьФорму("Обработка.ЗакрытиеКассовойСмены.Форма");
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ВыполнитьСинхронизацию" Тогда
		СтандартнаяОбработка = Ложь;
		
		ОткрытьФорму("ОбщаяФорма.СинхронизацияДанных");
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОбменЕГАИС" Тогда
		СтандартнаяОбработка = Ложь;
		
		ОткрытьФорму("Обработка.ПанельОбменЕГАИС.Форма.Форма");
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОбменИСМП" Тогда
		СтандартнаяОбработка = Ложь;
		
		ОткрытьФорму("Обработка.ПанельОбменИСМП.Форма.Форма");
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОбменВЕТИС" Тогда
		СтандартнаяОбработка = Ложь;
		
		ОткрытьФорму("Обработка.ПанельОбменВЕТИС.Форма.Форма");
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОбновитьВерсиюПрограммы" Тогда
		СтандартнаяОбработка = Ложь;
		
		МодульПолучениеОбновленийПрограммыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПолучениеОбновленийПрограммыКлиент");
		МодульПолучениеОбновленийПрограммыКлиент.ОбновитьПрограмму();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ИсточникВыбора) = Тип("ФормаКлиентскогоПриложения")
		И ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ФормаВыбораДополнительныхУсловий" Тогда
		
		ОбработатьДанныеВыбораДополнительныхУсловий(ВыбранноеЗначение);
		
		Если ВыбранноеЗначение.ИмяТаблицыДляЗаполнения = "Организации" Тогда
			УстановитьЗаголовокДекорацииОрганизацииКПереносу();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СпособПереходаПриИзменении(Элемент)
	
	УправлениеЭлементамиФормыПоСпособуПерехода();
	
КонецПроцедуры

&НаКлиенте
Процедура АдресСервисаПриИзменении(Элемент)
	
	УстановитьВидимостьЭлементовПоАдресуСервиса();
	
КонецПроцедуры

&НаКлиенте
Процедура АдресПриложенияПриИзменении(Элемент)
	
	АдресПриложенияПриИзмененииНаКлиенте();
	
	УстановитьВидимостьЭлементовПоАдресуПриложения();
	
КонецПроцедуры

&НаКлиенте
Процедура АдресПриложенияПриИзмененииНаКлиенте()
	
	Если ЗначениеЗаполнено(АдресПриложения) Тогда
		СтрокаПриложения = Приложения.НайтиСтроки(Новый Структура("АдресПриложения", АдресПриложения))[0];
		НомерОбласти = СтрокаПриложения.НомерОбласти;
		СтатусОбласти = СтрокаПриложения.СтатусОбласти;
	Иначе
		НомерОбласти = 0;
		СтатусОбласти = "";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Далее(Команда)
	ИзменитьПорядковыйНомерПерехода(+1);
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	ИзменитьПорядковыйНомерПерехода(-1);
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	ОбработатьРезультатДлительнойОперации(Неопределено, Неопределено);
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОтменитьДлительнуюОперацию();
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОбменВУниверсальномФормате(Команда)
	
	ОбменДаннымиКлиент.ОткрытьПомощникНастройкиОбменаДанными("СинхронизацияДанныхЧерезУниверсальныйФормат", "Двухсторонний");
	
КонецПроцедуры

#КонецОбласти


#Область СценарииРаботыПомощника

&НаСервере
Функция ДобавитьСтрокуТаблицыПереходов(ИмяОсновнойСтраницы, ИмяСтраницыНавигации, ИмяСтраницыДекорации = "")
	
	СтрокаПереходов = ТаблицаПереходов.Добавить();
	СтрокаПереходов.ПорядковыйНомерПерехода = ТаблицаПереходов.Количество();
	СтрокаПереходов.ИмяОсновнойСтраницы  = ИмяОсновнойСтраницы;
	СтрокаПереходов.ИмяСтраницыНавигации = ИмяСтраницыНавигации;
	СтрокаПереходов.ИмяСтраницыДекорации = ИмяСтраницыДекорации;
	
	Возврат СтрокаПереходов;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуПереходов()
	
	ТаблицаПереходов.Очистить();
	
	НовыйПереход = ДобавитьСтрокуТаблицыПереходов("СтраницаПриветствие", "СтраницаНавигацияНачало");
	НовыйПереход.ИмяОбработчикаПриОткрытии                  = "СтраницаПриветствие_ПриОткрытии";
	
	НовыйПереход = ДобавитьСтрокуТаблицыПереходов("СтраницаСпособыПерехода", "СтраницаНавигацияПродолжение");
	
	НовыйПереход = ДобавитьСтрокуТаблицыПереходов("СтраницаВходВСервис", "СтраницаНавигацияПродолжение");
	НовыйПереход.ИмяОбработчикаПриОткрытии                  = "СтраницаВходВСервис_ПриОткрытии";
	НовыйПереход.ИмяОбработчикаДлительнойОперации           = "СтраницаВходВСервис_ДлительнаяОперация";
	НовыйПереход.ИмяОбработчикаРезультатаДлительнойОперации = "СтраницаВходВСервис_РезультатДлительнойОперации";
	
	НовыйПереход = ДобавитьСтрокуТаблицыПереходов("СтраницаВыборАбонента", "СтраницаНавигацияПродолжение");
	НовыйПереход.ИмяОбработчикаПриОткрытии                  = "СтраницаВыборАбонента_ПриОткрытии";
	НовыйПереход.ИмяОбработчикаДлительнойОперации           = "СтраницаВыборАбонента_ДлительнаяОперация";
	НовыйПереход.ИмяОбработчикаРезультатаДлительнойОперации = "СтраницаВыборАбонента_РезультатДлительнойОперации";
	
	// Техническая страница.
	НовыйПереход = ДобавитьСтрокуТаблицыПереходов("СтраницаДоступныеКонфигурации", "СтраницаНавигацияПродолжение");
	НовыйПереход.ИмяОбработчикаПриОткрытии                  = "СтраницаДоступныеКонфигурации_ПриОткрытии";
	НовыйПереход.ИмяОбработчикаДлительнойОперации           = "СтраницаДоступныеКонфигурации_ДлительнаяОперация";
	НовыйПереход.ИмяОбработчикаРезультатаДлительнойОперации = "СтраницаДоступныеКонфигурации_РезультатДлительнойОперации";
	
	НовыйПереход = ДобавитьСтрокуТаблицыПереходов("СтраницаВыборПриложения", "СтраницаНавигацияПродолжение");
	НовыйПереход.ИмяОбработчикаПриОткрытии                  = "СтраницаВыборПриложения_ПриОткрытии";
	НовыйПереход.ИмяОбработчикаПриПереходеДалее             = "СтраницаВыборПриложения_ПриПереходеДалее";
	НовыйПереход.ИмяОбработчикаДлительнойОперации           = "СтраницаВыборПриложения_ДлительнаяОперация";
	НовыйПереход.ИмяОбработчикаРезультатаДлительнойОперации = "СтраницаВыборПриложения_РезультатДлительнойОперации";
	
	// Техническая страница.
	НовыйПереход = ДобавитьСтрокуТаблицыПереходов("СтраницаСтатусПриложения", "СтраницаНавигацияПродолжение");
	НовыйПереход.ИмяОбработчикаПриОткрытии                  = "СтраницаСтатусПриложения_ПриОткрытии";
	НовыйПереход.ИмяОбработчикаДлительнойОперации           = "СтраницаСтатусПриложения_ДлительнаяОперация";
	НовыйПереход.ИмяОбработчикаРезультатаДлительнойОперации = "СтраницаСтатусПриложения_РезультатДлительнойОперации";
	
	НовыйПереход = ДобавитьСтрокуТаблицыПереходов("СтраницаВыгрузкаСправочнойИнформации", "СтраницаНавигацияВыгрузкаДанных");
	НовыйПереход.ИмяОбработчикаПриОткрытии                  = "СтраницаВыгрузкаСправочнойИнформации_ПриОткрытии";
	НовыйПереход.ИмяОбработчикаПриПереходеДалее             = "СтраницаВыгрузкаСправочнойИнформации_ПриПереходеДалее";
	НовыйПереход.ИмяОбработчикаДлительнойОперации           = "СтраницаВыгрузкаСправочнойИнформации_ДлительнаяОперация";
	НовыйПереход.ИмяОбработчикаРезультатаДлительнойОперации = "СтраницаВыгрузкаСправочнойИнформации_РезультатДлительнойОперации";
	
	// Техническая страница.
	НовыйПереход = ДобавитьСтрокуТаблицыПереходов("СтраницаПередачаДанныхНаСервис", "СтраницаНавигацияПродолжение");
	НовыйПереход.ИмяОбработчикаПриОткрытии                  = "СтраницаПередачаДанныхНаСервис_ПриОткрытии";
	НовыйПереход.ИмяОбработчикаДлительнойОперации           = "СтраницаПередачаДанныхНаСервис_ДлительнаяОперация";
	НовыйПереход.ИмяОбработчикаРезультатаДлительнойОперации = "СтраницаПередачаДанныхНаСервис_РезультатДлительнойОперации";
	
	// Техническая страница.
	НовыйПереход = ДобавитьСтрокуТаблицыПереходов("СтраницаПроверкаСостоянияЗагрузки", "СтраницаНавигацияПродолжение");
	НовыйПереход.ИмяОбработчикаПриОткрытии                  = "СтраницаПроверкаСостоянияЗагрузки_ПриОткрытии";
	НовыйПереход.ИмяОбработчикаДлительнойОперации           = "СтраницаПроверкаСостоянияЗагрузки_ДлительнаяОперация";
	НовыйПереход.ИмяОбработчикаРезультатаДлительнойОперации = "СтраницаПроверкаСостоянияЗагрузки_РезультатДлительнойОперации";
	
	НовыйПереход = ДобавитьСтрокуТаблицыПереходов("СтраницаИнформацияПослеВыгрузки", "СтраницаНавигацияПродолжение");
	НовыйПереход.ИмяОбработчикаПриОткрытии        = "СтраницаИнформацияПослеВыгрузки_ПриОткрытии";
	
	НовыйПереход = ДобавитьСтрокуТаблицыПереходов("СтраницаВыгрузкаОстатков", "СтраницаНавигацияВыгрузкаДанных");
	НовыйПереход.ИмяОбработчикаПриОткрытии                  = "СтраницаВыгрузкаОстатков_ПриОткрытии";
	НовыйПереход.ИмяОбработчикаПриПереходеДалее             = "СтраницаВыгрузкаОстатков_ПриПереходеДалее";
	НовыйПереход.ИмяОбработчикаДлительнойОперации           = "СтраницаВыгрузкаОстатков_ДлительнаяОперация";
	НовыйПереход.ИмяОбработчикаРезультатаДлительнойОперации = "СтраницаВыгрузкаОстатков_РезультатДлительнойОперации";
	
	// Техническая страница.
	НовыйПереход = ДобавитьСтрокуТаблицыПереходов("СтраницаПередачаДанныхНаСервис", "СтраницаНавигацияПродолжение");
	НовыйПереход.ИмяОбработчикаПриОткрытии                  = "СтраницаПередачаДанныхНаСервис_ПриОткрытии";
	НовыйПереход.ИмяОбработчикаДлительнойОперации           = "СтраницаПередачаДанныхНаСервис_ДлительнаяОперация";
	НовыйПереход.ИмяОбработчикаРезультатаДлительнойОперации = "СтраницаПередачаДанныхНаСервис_РезультатДлительнойОперации";
	
	// Техническая страница.
	НовыйПереход = ДобавитьСтрокуТаблицыПереходов("СтраницаПроверкаСостоянияЗагрузки", "СтраницаНавигацияПродолжение");
	НовыйПереход.ИмяОбработчикаПриОткрытии                  = "СтраницаПроверкаСостоянияЗагрузки_ПриОткрытии";
	НовыйПереход.ИмяОбработчикаДлительнойОперации           = "СтраницаПроверкаСостоянияЗагрузки_ДлительнаяОперация";
	НовыйПереход.ИмяОбработчикаРезультатаДлительнойОперации = "СтраницаПроверкаСостоянияЗагрузки_РезультатДлительнойОперации";
	
	НовыйПереход = ДобавитьСтрокуТаблицыПереходов("СтраницаИнформацияПослеВыгрузкиОстатков", "СтраницаНавигацияПродолжение");
	НовыйПереход.ИмяОбработчикаПриОткрытии        = "СтраницаИнформацияПослеВыгрузкиОстатков_ПриОткрытии";
	
	НовыйПереход = ДобавитьСтрокуТаблицыПереходов("СтраницаНастройкаСинхронизации", "СтраницаНавигацияОкончание");
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиПереходов

////////////////////////////////////////////////////////////////////////////////
// Поставляемая часть.

&НаКлиенте
Процедура ИзменитьПорядковыйНомерПерехода(Итератор, ПропуститьДлительнуюОперацию = Ложь)
	
	ОчиститьСообщения();
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + Итератор, ПропуститьДлительнуюОперацию);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПорядковыйНомерПерехода(Знач Значение, ПропуститьДлительнуюОперацию = Ложь)
	
	КэшированныеЗначения.Вставить("НовыйНомерПерехода", Значение);
	
	Если ВыполнитьОбработчикиСобытийПередПереходом(Значение, ПропуститьДлительнуюОперацию) Тогда
		ПродолжитьУстановлениеПорядковогоНомераПерехода(Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьУстановлениеПорядковогоНомераПерехода(НовыйНомерПерехода)
	
	ПропуститьСтраницу = Ложь;
	
	ЭтоПереходДалее = (НовыйНомерПерехода > ПорядковыйНомерПерехода);
	ЭтоПереходНазад = (НовыйНомерПерехода <= ПорядковыйНомерПерехода);
	
	КэшированныеЗначения.Вставить("Заголовок", Заголовок);
	
	Если ВыполнитьОбработчикиСобытийПриПереходе(НовыйНомерПерехода, ПропуститьСтраницу) Тогда
		ПорядковыйНомерПерехода = Макс(НовыйНомерПерехода, 0);
		
		Если ПропуститьСтраницу Тогда
			Если ЭтоПереходДалее Тогда
				ИзменитьПорядковыйНомерПерехода(1);
			Иначе
				ИзменитьПорядковыйНомерПерехода(-1);
			КонецЕсли;
		Иначе
			ПорядковыйНомерПереходаПриИзменении();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВыполнитьОбработчикиСобытийПередПереходом(НовыйНомерПерехода, ПропуститьДлительнуюОперацию)
	
	ПродолжитьПереход = Истина;
	
	ЭтоПереходДалее = (НовыйНомерПерехода > ПорядковыйНомерПерехода);
	ЭтоПереходНазад = (НовыйНомерПерехода < ПорядковыйНомерПерехода);
	
	СтрокаПерехода = СтрокаТаблицыПереходов(ПорядковыйНомерПерехода);
	
	// Обработчики событий переходов.
	Если ЭтоПереходДалее Тогда
		
		// Обработчик ПриПереходеДалее.
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеДалее) Тогда
			
			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика]()";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеДалее);
			
			ПродолжитьПереход = Вычислить(ИмяПроцедуры);
			
		КонецЕсли;
		
		// Обработчик ДлительнойОперации.
		Если ПродолжитьПереход 
			И НЕ (ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаДлительнойОперации) ИЛИ ПропуститьДлительнуюОперацию) Тогда
			ПродолжитьПереход = Ложь;
			ВыполнитьОбработчикДлительнойОперации();
		КонецЕсли;
		
	ИначеЕсли ЭтоПереходНазад Тогда
			
		// Обработчик ПриПереходеНазад.
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеНазад) Тогда
			
			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика]()";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеНазад);
			
			ПродолжитьПереход = Вычислить(ИмяПроцедуры);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПродолжитьПереход;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьОбработчикДлительнойОперации()
	
	НовыйНомерПерехода = КэшированныеЗначения.Получить("НовыйНомерПерехода");
	
	СтрокаПерехода = СтрокаТаблицыПереходов(ПорядковыйНомерПерехода);
	
	ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](ДлительнаяОперация)";
	ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаДлительнойОперации);
	
	ДлительнаяОперация = Неопределено;
	
	ПродолжитьПереход = Вычислить(ИмяПроцедуры);
	
	Если ПродолжитьПереход Тогда
		
		Если ДлительнаяОперация = Неопределено Тогда
			ПродолжитьУстановлениеПорядковогоНомераПерехода(НовыйНомерПерехода);
		Иначе
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("НовыйНомерПерехода", НовыйНомерПерехода);
			
			// Установим страницу ожидания.
			Элементы.ПанельОсновная.ТекущаяСтраница  = Элементы.СтраницаОжидание;
			Элементы.ПанельНавигации.ТекущаяСтраница = Элементы.СтраницаНавигацияОжидание;
			
			ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьРезультатДлительнойОперации", ЭтотОбъект, ДополнительныеПараметры);
			ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
			ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
			ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
			
			ИдентификаторЗадания = ДлительнаяОперация.ИдентификаторЗадания;
			
		КонецЕсли;
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатДлительнойОперации(Результат, ДополнительныеПараметры) Экспорт
	
	СообщениеОбОшибке = "";
	Если Результат = Неопределено Тогда
		СообщениеОбОшибке = НСтр("ru = 'Операция отменена'");
	ИначеЕсли Результат.Статус = "Отменено" Тогда
		СообщениеОбОшибке = НСтр("ru = 'Операция отменена'");
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		
		СтрокаПерехода = СтрокаТаблицыПереходов(ПорядковыйНомерПерехода);
		
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаРезультатаДлительнойОперации) Тогда
			
			АдресРезультата = Результат.АдресРезультата;
			
			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](АдресРезультата, СообщениеОбОшибке)";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаРезультатаДлительнойОперации);
			
			ПродолжитьПереход = Вычислить(ИмяПроцедуры);
			
		Иначе
			ПродолжитьПереход = Истина;
		КонецЕсли;
		
	Иначе
		СообщениеОбОшибке = Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		ОбработатьОшибкуДлительнойОпераци(СообщениеОбОшибке);
	ИначеЕсли ПродолжитьПереход Тогда
		ПродолжитьУстановлениеПорядковогоНомераПерехода(ДополнительныеПараметры.НовыйНомерПерехода);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОшибкуДлительнойОпераци(СообщениеОбОшибке)
	
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибке);
	КонецЕсли;
	
	ПродолжитьУстановлениеПорядковогоНомераПерехода(ПорядковыйНомерПерехода);
	
КонецПроцедуры

&НаКлиенте
Функция ВыполнитьОбработчикиСобытийПриПереходе(НовыйНомерПерехода, ПропуститьСтраницу)
	
	ПродолжитьПереход = Истина;
	
	ЭтоПереходДалее = (НовыйНомерПерехода > ПорядковыйНомерПерехода);
	ЭтоПереходНазад = (НовыйНомерПерехода < ПорядковыйНомерПерехода);
	
	СтрокаПерехода = СтрокаТаблицыПереходов(НовыйНомерПерехода);
	
	// Обработчик ПриОткрытии.
	Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриОткрытии) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](ПропуститьСтраницу, ЭтоПереходДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриОткрытии);
		
		ПродолжитьПереход = Вычислить(ИмяПроцедуры);
		
	КонецЕсли;
	
	Возврат ПродолжитьПереход;
	
КонецФункции

&НаКлиенте
Процедура ПорядковыйНомерПереходаПриИзменении()
	
	СтрокаПерехода = СтрокаТаблицыПереходов(ПорядковыйНомерПерехода);
	
	// Устанавливаем отображение страниц.
	Элементы.ПанельОсновная.ТекущаяСтраница  = Элементы[СтрокаПерехода.ИмяОсновнойСтраницы];
	Элементы.ПанельНавигации.ТекущаяСтраница = Элементы[СтрокаПерехода.ИмяСтраницыНавигации];
	
	// Устанавливаем заголовок.
	КэшированныйЗаголовок = КэшированныеЗначения.Получить("Заголовок"); 
	Если НЕ КэшированныйЗаголовок = Неопределено И КэшированныйЗаголовок = Заголовок Тогда
		Заголовок = Элементы.ПанельОсновная.ТекущаяСтраница.Заголовок;
	КонецЕсли;
	
	// Устанавливаем текущую кнопку по умолчанию.
	КнопкаВыгрузитьДанные = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "ВыгрузитьДанные");
	КнопкаДалее           = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "Далее");
	Если КнопкаВыгрузитьДанные <> Неопределено Тогда
		КнопкаВыгрузитьДанные.КнопкаПоУмолчанию = Истина;
	ИначеЕсли КнопкаДалее <> Неопределено Тогда
		КнопкаДалее.КнопкаПоУмолчанию = Истина;
	Иначе
		КнопкаГотово = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаГотово");
		Если КнопкаГотово <> Неопределено Тогда
			КнопкаГотово.КнопкаПоУмолчанию = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СтрокаТаблицыПереходов(НомерПерехода = 0, ИмяОсновнойСтраницы = "")
	
	Если ЗначениеЗаполнено(НомерПерехода) Тогда
		ПараметрыПоиска = Новый Структура("ПорядковыйНомерПерехода", НомерПерехода);
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Не найдена страница таблицы переходов под номером %1'"), НомерПерехода);
	Иначе
		ПараметрыПоиска = Новый Структура("ИмяОсновнойСтраницы", ИмяОсновнойСтраницы);
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Не найдена страница таблицы переходов с именем %1'"), ИмяОсновнойСтраницы);
	КонецЕсли; 
	
	СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(ПараметрыПоиска);
	
	Если СтрокиПерехода.Количество() = 0 Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Возврат СтрокиПерехода[0];
	
КонецФункции

&НаКлиенте
Функция ПолучитьКнопкуФормыПоИмениКоманды(ЭлементФормы, ИмяКоманды)
	
	Для Каждого Элемент Из ЭлементФормы.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			
			ЭлементФормыПоИмениКоманды = ПолучитьКнопкуФормыПоИмениКоманды(Элемент, ИмяКоманды);
			
			Если ЭлементФормыПоИмениКоманды <> Неопределено Тогда
				
				Возврат ЭлементФормыПоИмениКоманды;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("КнопкаФормы")
			И СтрНайти(Элемент.ИмяКоманды, ИмяКоманды) > 0 Тогда
			
			Возврат Элемент;
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти


#Область ОбработчикиСобытийПереходов

////////////////////////////////////////////////////////////////////////////////
// Переопределяемая часть - Обработчики событий переходов.

#Область СтраницаПриветствие

&НаКлиенте
Функция Подключаемый_СтраницаПриветствие_ПриОткрытии(ПропуститьСтраницу, ЭтоПереходДалее)
	
	ПродолжитьПереход = Истина;
	
	Заголовок = НСтр("ru = 'Помощник перехода в УНФ'");
	
	Возврат ПродолжитьПереход;
	
КонецФункции

#КонецОбласти

#Область СтраницаВходВСервис

&НаКлиенте
Функция Подключаемый_СтраницаВходВСервис_ПриОткрытии(ПропуститьСтраницу, ЭтоПереходДалее)
	
	ПродолжитьПереход = Истина;
	
	Если НЕ СпособПерехода = 0 Тогда
		ПропуститьСтраницу = Истина;
	Иначе
		УстановитьВидимостьЭлементовПоАдресуСервиса();
	КонецЕсли;
	
	Возврат ПродолжитьПереход;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаВходВСервис_ДлительнаяОперация(ДлительнаяОперация)
	
	ПродолжитьПереход = Истина;
	
	Если СпособПерехода = 0 Тогда
		Заголовок = НСтр("ru = 'Проверка подключения к сервису'");
		Элементы.ПанельАвторизацияНаСервисе.ТекущаяСтраница            = Элементы.СтраницаАвторизациюНаСервисеВыполняется;
		Элементы.ПанельПроверкаДоступныхКонфигураций.ТекущаяСтраница   = Элементы.СтраницаПроверкаДоступныхКонфигурацийОжидание;
		Элементы.ПанельПодготовкаПриложенияДляПерехода.ТекущаяСтраница = Элементы.СтраницаПодготовкаПриложенияДляПереходаОжидание;
		Элементы.ПанельПереносСправочнойИнформации.ТекущаяСтраница     = Элементы.СтраницаПереносСправочнойИнформацииОжидание;
		Элементы.ПанельПереносОстатков.ТекущаяСтраница                 = Элементы.СтраницаПереносОстатковОжидание;
		
		ДлительнаяОперация = ЗапуститьАвторизациюНаСервисеНаСервере();
	КонецЕсли;
	
	Возврат ПродолжитьПереход;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаВходВСервис_РезультатДлительнойОперации(АдресРезультата, СообщениеОбОшибке)
	
	ПродолжитьПереход = Истина;
	
	ОбработатьРезультатАвторизацииНаСервере(АдресРезультата, СообщениеОбОшибке);
	
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		Возврат ПродолжитьПереход;
	КонецЕсли;
	
	СписокАбонентов = Элементы.АбонентКод.СписокВыбора;
	Если СписокАбонентов.Количество() = 0 Тогда
		СообщениеОбОшибке = НСтр("ru = 'Не обнаружены доступные абоненты по введенным учетным данным'");
	Иначе
		Если СписокАбонентов.НайтиПоЗначению(КодАбонента) = Неопределено Тогда
			КодАбонента = СписокАбонентов.Получить(0).Значение;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПродолжитьПереход;
	
КонецФункции

#КонецОбласти

#Область СтраницаВыборАбонента

&НаКлиенте
Функция Подключаемый_СтраницаВыборАбонента_ПриОткрытии(ПропуститьСтраницу, ЭтоПереходДалее)
	
	ПродолжитьПереход = Истина;
	
	КоличествоАбонентов = Элементы.АбонентКод.СписокВыбора.Количество();
	Если НЕ СпособПерехода = 0 ИЛИ КоличествоАбонентов = 1 Тогда
		ПропуститьСтраницу = Истина;
	КонецЕсли;
	
	Возврат ПродолжитьПереход;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаВыборАбонента_ДлительнаяОперация(ДлительнаяОперация)
	
	ПродолжитьПереход = Истина;
	
	Если СпособПерехода = 0 Тогда
		Заголовок = НСтр("ru = 'Проверка доступных конфигураций'");
		Элементы.ПанельАвторизацияНаСервисе.ТекущаяСтраница            = Элементы.СтраницаАвторизациюНаСервисеВыполнено;
		Элементы.ПанельПроверкаДоступныхКонфигураций.ТекущаяСтраница   = Элементы.СтраницаПроверкаДоступныхКонфигурацийВыполняется;
		Элементы.ПанельПодготовкаПриложенияДляПерехода.ТекущаяСтраница = Элементы.СтраницаПодготовкаПриложенияДляПереходаОжидание;
		Элементы.ПанельПереносСправочнойИнформации.ТекущаяСтраница     = Элементы.СтраницаПереносСправочнойИнформацииОжидание;
		Элементы.ПанельПереносОстатков.ТекущаяСтраница                 = Элементы.СтраницаПереносОстатковОжидание;
		
		ДлительнаяОперация = ЗапуститьПроверкуДоступныхКонфигурацийНаСервере();
	КонецЕсли;
	
	Возврат ПродолжитьПереход;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаВыборАбонента_РезультатДлительнойОперации(АдресРезультата, СообщениеОбОшибке)
	
	ПродолжитьПереход = Истина;
	
	ОбработатьРезультатПолученияДоступныхКонфигурацийНаСервере(АдресРезультата, СообщениеОбОшибке);
	
	Возврат ПродолжитьПереход;
	
КонецФункции

#КонецОбласти

#Область СтраницаДоступныеКонфигурации

&НаКлиенте
Функция Подключаемый_СтраницаДоступныеКонфигурации_ПриОткрытии(ПропуститьСтраницу, ЭтоПереходДалее)
	
	ПродолжитьПереход = Истина;
	ПропуститьСтраницу = Истина;
	
	Возврат ПродолжитьПереход;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаДоступныеКонфигурации_ДлительнаяОперация(ДлительнаяОперация)
	
	ПродолжитьПереход = Истина;
	
	Если СпособПерехода = 0 Тогда
		Заголовок = НСтр("ru = 'Подготовка приложения для перехода'");
		Элементы.ПанельАвторизацияНаСервисе.ТекущаяСтраница            = Элементы.СтраницаАвторизациюНаСервисеВыполнено;
		Элементы.ПанельПроверкаДоступныхКонфигураций.ТекущаяСтраница   = Элементы.СтраницаПроверкаДоступныхКонфигурацийВыполнено;
		Элементы.ПанельПодготовкаПриложенияДляПерехода.ТекущаяСтраница = Элементы.СтраницаПолучениеСпискаДоступныхПриложенийВыполняется;
		Элементы.ПанельПереносСправочнойИнформации.ТекущаяСтраница     = Элементы.СтраницаПереносСправочнойИнформацииОжидание;
		Элементы.ПанельПереносОстатков.ТекущаяСтраница                 = Элементы.СтраницаПереносОстатковОжидание;
		
		ДлительнаяОперация = ЗапуститьПолучениеСпискаПриложенийНаСервере();
	КонецЕсли;
	
	Возврат ПродолжитьПереход;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаДоступныеКонфигурации_РезультатДлительнойОперации(АдресРезультата, СообщениеОбОшибке)
	
	ПродолжитьПереход = Истина;
	
	ОбработатьРезультатПолученияСпискаПриложенийНаСервере(АдресРезультата, СообщениеОбОшибке);
	
	СписокПриложений = Элементы.АдресПриложения.СписокВыбора;
	Если СписокПриложений.НайтиПоЗначению(АдресПриложения) = Неопределено Тогда
		АдресПриложения = СписокПриложений.Получить(0).Значение;
	КонецЕсли;
	АдресПриложенияПриИзмененииНаКлиенте();
	
	Возврат ПродолжитьПереход;
	
КонецФункции

#КонецОбласти

#Область СтраницаВыборПриложения

&НаКлиенте
Функция Подключаемый_СтраницаВыборПриложения_ПриОткрытии(ПропуститьСтраницу, ЭтоПереходДалее)
	
	ПродолжитьПереход = Истина;
	
	КоличествоПриложений = Элементы.АдресПриложения.СписокВыбора.Количество();
	
	Если НЕ СпособПерехода = 0 Тогда
		ПропуститьСтраницу = Истина;
	Иначе
		УстановитьВидимостьЭлементовПоАдресуПриложения();
	КонецЕсли;
	
	Возврат ПродолжитьПереход;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаВыборПриложения_ПриПереходеДалее()
	
	ПродолжитьПереход = Истина;
	
	Если СпособПерехода = 0 И НЕ ЗначениеЗаполнено(АдресПриложения)
		И НЕ ЗначениеЗаполнено(НаименованиеПриложения) Тогда
		ПродолжитьПереход = Ложь;
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Заполните наименование приложения'"));
	КонецЕсли;
	
	Возврат ПродолжитьПереход;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаВыборПриложения_ДлительнаяОперация(ДлительнаяОперация)
	
	ПродолжитьПереход = Истина;
	
	Если СпособПерехода = 0 И АдресПриложения = "" Тогда
		Заголовок = НСтр("ru = 'Подготовка приложения для перехода'");
		Элементы.ПанельАвторизацияНаСервисе.ТекущаяСтраница            = Элементы.СтраницаАвторизациюНаСервисеВыполнено;
		Элементы.ПанельПроверкаДоступныхКонфигураций.ТекущаяСтраница   = Элементы.СтраницаПроверкаДоступныхКонфигурацийВыполнено;
		Элементы.ПанельПодготовкаПриложенияДляПерехода.ТекущаяСтраница = Элементы.СтраницаСозданиеПриложенияВыполняется;
		Элементы.ПанельПереносСправочнойИнформации.ТекущаяСтраница     = Элементы.СтраницаПереносСправочнойИнформацииОжидание;
		Элементы.ПанельПереносОстатков.ТекущаяСтраница                 = Элементы.СтраницаПереносОстатковОжидание;
		
		ДлительнаяОперация = ЗапуститьСозданиеПриложенияНаСервере();
	КонецЕсли;
	
	Возврат ПродолжитьПереход;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаВыборПриложения_РезультатДлительнойОперации(АдресРезультата, СообщениеОбОшибке)
	
	ПродолжитьПереход = Истина;
	
	ОбработатьРезультатСозданияПриложенияНаСервере(АдресРезультата, СообщениеОбОшибке);
	
	Возврат ПродолжитьПереход;
	
КонецФункции

#КонецОбласти

#Область СтраницаСтатусПриложения

&НаКлиенте
Функция Подключаемый_СтраницаСтатусПриложения_ПриОткрытии(ПропуститьСтраницу, ЭтоПереходДалее)
	
	ПродолжитьПереход = Истина;
	ПропуститьСтраницу = Истина;
	
	Возврат ПродолжитьПереход;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаСтатусПриложения_ДлительнаяОперация(ДлительнаяОперация)
	
	ПродолжитьПереход = Истина;
	
	Если СпособПерехода = 0 И НЕ ПриложениеГотовоКИспользоанию(СтатусОбласти) Тогда
		Заголовок = НСтр("ru = 'Подготовка приложения для перехода'");
		Элементы.ПанельАвторизацияНаСервисе.ТекущаяСтраница            = Элементы.СтраницаАвторизациюНаСервисеВыполнено;
		Элементы.ПанельПроверкаДоступныхКонфигураций.ТекущаяСтраница   = Элементы.СтраницаПроверкаДоступныхКонфигурацийВыполнено;
		Элементы.ПанельПодготовкаПриложенияДляПерехода.ТекущаяСтраница = Элементы.СтраницаПроверкаСтатусаПриложенияВыполняется;
		Элементы.ПанельПереносСправочнойИнформации.ТекущаяСтраница     = Элементы.СтраницаПереносСправочнойИнформацииОжидание;
		Элементы.ПанельПереносОстатков.ТекущаяСтраница                 = Элементы.СтраницаПереносОстатковОжидание;
		
		ДлительнаяОперация = ЗапуститьПроверкуСтатусаПриложенияНаСервере();
	КонецЕсли;
	
	Возврат ПродолжитьПереход;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаСтатусПриложения_РезультатДлительнойОперации(АдресРезультата, СообщениеОбОшибке)
	
	ПродолжитьПереход = Истина;
	
	ОбработатьРезультатПроверкиСтатусаПриложенияНаСервере(АдресРезультата, СообщениеОбОшибке);
	
	Если НЕ ПриложениеГотовоКИспользоанию(СтатусОбласти) Тогда
		ПродолжитьПереход = Ложь;
		ПодключитьОбработчикОжидания("ВыполнитьОбработчикДлительнойОперации", 5, Истина);
	КонецЕсли;
	
	Возврат ПродолжитьПереход;
	
КонецФункции

#КонецОбласти

#Область СтраницаВыгрузкаСправочнойИнформации

&НаКлиенте
Функция Подключаемый_СтраницаВыгрузкаСправочнойИнформации_ПриОткрытии(ПропуститьСтраницу, ЭтоПереходДалее)
	
	ПропуститьСтраницу = Истина;
	ПродолжитьПереход  = Истина;
	
	Возврат ПродолжитьПереход;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаВыгрузкаСправочнойИнформации_ПриПереходеДалее()
	
	Если СпособПерехода = 0 Тогда
		ПродолжитьПереход = Истина;
	Иначе
		ПродолжитьПереход = Ложь;
		ПодключитьРасширениеДляРаботыСФайлами();
	КонецЕсли;
	
	Возврат ПродолжитьПереход;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаВыгрузкаСправочнойИнформации_ДлительнаяОперация(ДлительнаяОперация)
	
	ПродолжитьПереход = Истина;
	
	Заголовок = НСтр("ru = 'Перенос справочной информации'");
	
	Если СпособПерехода = 0 Тогда
		Элементы.ПанельАвторизацияНаСервисе.ТекущаяСтраница            = Элементы.СтраницаАвторизациюНаСервисеВыполнено;
		Элементы.ПанельПроверкаДоступныхКонфигураций.ТекущаяСтраница   = Элементы.СтраницаПроверкаДоступныхКонфигурацийВыполнено;
		Элементы.ПанельПодготовкаПриложенияДляПерехода.ТекущаяСтраница = Элементы.СтраницаПодготовкаПриложенияДляПереходаВыполнено;
		Элементы.ПанельПереносСправочнойИнформации.ТекущаяСтраница     = Элементы.СтраницаВыгрузкаСправочнойИнформацииВыполняется;
		Элементы.ПанельПереносОстатков.ТекущаяСтраница                 = Элементы.СтраницаПереносОстатковОжидание;
	Иначе
		Элементы.ПанельПереносСправочнойИнформацииФайл.ТекущаяСтраница = Элементы.СтраницаВыгрузкаСправочнойИнформацииФайлВыполняется;
		Элементы.ПанельПереносОстатковФайл.ТекущаяСтраница             = Элементы.СтраницаПереносОстатковФайлОжидание;
	КонецЕсли;
	
	ДлительнаяОперация = ЗапуститьВыгрузкуДанныхНаСервере("СправочнаяИнформация");
	
	Возврат ПродолжитьПереход;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаВыгрузкаСправочнойИнформации_РезультатДлительнойОперации(АдресРезультата, СообщениеОбОшибке)
	
	ПродолжитьПереход = Ложь;
	
	ОбработатьРезультатВыгрузкиДанных(АдресРезультата, СообщениеОбОшибке);
	
	Возврат ПродолжитьПереход;
	
КонецФункции

#КонецОбласти

#Область СтраницаПередачаДанныхНаСервис

&НаКлиенте
Функция Подключаемый_СтраницаПередачаДанныхНаСервис_ПриОткрытии(ПропуститьСтраницу, ЭтоПереходДалее)
	
	ПродолжитьПереход = Истина;
	ПропуститьСтраницу = Истина;
	
	Возврат ПродолжитьПереход;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаПередачаДанныхНаСервис_ДлительнаяОперация(ДлительнаяОперация)
	
	ПродолжитьПереход = Истина;
	
	Если СпособПерехода = 0 Тогда
		Элементы.ПанельАвторизацияНаСервисе.ТекущаяСтраница            = Элементы.СтраницаАвторизациюНаСервисеВыполнено;
		Элементы.ПанельПроверкаДоступныхКонфигураций.ТекущаяСтраница   = Элементы.СтраницаПроверкаДоступныхКонфигурацийВыполнено;
		Элементы.ПанельПодготовкаПриложенияДляПерехода.ТекущаяСтраница = Элементы.СтраницаПодготовкаПриложенияДляПереходаВыполнено;
		
		СтрокаПереходаВыгрузкаОстатков = СтрокаТаблицыПереходов(0, "СтраницаВыгрузкаОстатков");
		ЭтоПереносОстатков = ПорядковыйНомерПерехода >= СтрокаПереходаВыгрузкаОстатков.ПорядковыйНомерПерехода;
		
		Если ЭтоПереносОстатков Тогда
			Заголовок = НСтр("ru = 'Перенос остатков'");
			Элементы.ПанельПереносСправочнойИнформации.ТекущаяСтраница     = Элементы.СтраницаПереносСправочнойИнформацииВыполнено;
			Элементы.ПанельПереносОстатков.ТекущаяСтраница                 = Элементы.СтраницаПередачаОстатковВыполняется;
		Иначе
			Заголовок = НСтр("ru = 'Перенос справочной информации'");
			Элементы.ПанельПереносСправочнойИнформации.ТекущаяСтраница     = Элементы.СтраницаПередачаСправочнойИнформацииВыполняется;
			Элементы.ПанельПереносОстатков.ТекущаяСтраница                 = Элементы.СтраницаПереносОстатковОжидание;
		КонецЕсли;
		
		ДлительнаяОперация = ЗапуститьПередачуДанныхНаСервисНаСервере();
	КонецЕсли;
	
	Возврат ПродолжитьПереход;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаПередачаДанныхНаСервис_РезультатДлительнойОперации(АдресРезультата, СообщениеОбОшибке)
	
	ПродолжитьПереход = Истина;
	
	ОбработатьРезультатПередачиДанныхНаСервисНаСервере(АдресРезультата, СообщениеОбОшибке);
	
	Возврат ПродолжитьПереход;
	
КонецФункции

#КонецОбласти

#Область СтраницаПроверкаСостоянияЗагрузки

&НаКлиенте
Функция Подключаемый_СтраницаПроверкаСостоянияЗагрузки_ПриОткрытии(ПропуститьСтраницу, ЭтоПереходДалее)
	
	ПродолжитьПереход = Истина;
	ПропуститьСтраницу = Истина;
	
	Возврат ПродолжитьПереход;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаПроверкаСостоянияЗагрузки_ДлительнаяОперация(ДлительнаяОперация)
	
	ПродолжитьПереход = Истина;
	
	Если СпособПерехода = 0 Тогда
		Элементы.ПанельАвторизацияНаСервисе.ТекущаяСтраница            = Элементы.СтраницаАвторизациюНаСервисеВыполнено;
		Элементы.ПанельПроверкаДоступныхКонфигураций.ТекущаяСтраница   = Элементы.СтраницаПроверкаДоступныхКонфигурацийВыполнено;
		Элементы.ПанельПодготовкаПриложенияДляПерехода.ТекущаяСтраница = Элементы.СтраницаПодготовкаПриложенияДляПереходаВыполнено;
		
		СтрокаПереходаВыгрузкаОстатков = СтрокаТаблицыПереходов(0, "СтраницаВыгрузкаОстатков");
		ЭтоПереносОстатков = ПорядковыйНомерПерехода >= СтрокаПереходаВыгрузкаОстатков.ПорядковыйНомерПерехода;
		
		Если ЭтоПереносОстатков Тогда
			Заголовок = НСтр("ru = 'Перенос остатков'");
			Элементы.ПанельПереносСправочнойИнформации.ТекущаяСтраница     = Элементы.СтраницаПереносСправочнойИнформацииВыполнено;
			Элементы.ПанельПереносОстатков.ТекущаяСтраница                 = Элементы.СтраницаЗагрузкаОстатковВыполняется;
		Иначе
			Заголовок = НСтр("ru = 'Перенос справочной информации'");
			Элементы.ПанельПереносСправочнойИнформации.ТекущаяСтраница     = Элементы.СтраницаЗагрузкаСправочнойИнформацииВыполняется;
			Элементы.ПанельПереносОстатков.ТекущаяСтраница                 = Элементы.СтраницаПереносОстатковОжидание;
		КонецЕсли;
		
		ДлительнаяОперация = ЗапуститьПроверкуСостоянияЗагрузкиНаСервере();
	КонецЕсли;
	
	Возврат ПродолжитьПереход;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаПроверкаСостоянияЗагрузки_РезультатДлительнойОперации(АдресРезультата, СообщениеОбОшибке)
	
	ПродолжитьПереход = Истина;
	
	СостояниеЗагрузки = ОбработатьРезультатПроверкиСостоянияЗагрузкиНаСервере(АдресРезультата, СообщениеОбОшибке);
	
	Если СостояниеЗагрузки = "Active" Тогда
		ПродолжитьПереход = Ложь;
		ПодключитьОбработчикОжидания("ВыполнитьОбработчикДлительнойОперации", 5, Истина);
	ИначеЕсли СостояниеЗагрузки = "Failed" Тогда
		СообщениеОбОшибке = НСтр("ru = 'Загрузка данных на сервисе завершилась с ошибкой'");
	ИначеЕсли СостояниеЗагрузки = "Canceled" Тогда
		СообщениеОбОшибке = НСтр("ru = 'Загрузка данных на сервисе отменена'");
	ИначеЕсли НЕ СостояниеЗагрузки = "Completed" Тогда
		СообщениеОбОшибке = НСтр("ru = 'Не удалось выполнить передачу данных на сервис'");
	КонецЕсли;
	
	
	Возврат ПродолжитьПереход;
	
КонецФункции

#КонецОбласти

#Область СтраницаИнформацияПослеВыгрузки

&НаКлиенте
Функция Подключаемый_СтраницаИнформацияПослеВыгрузки_ПриОткрытии(ПропуститьСтраницу, ЭтоПереходДалее)
	
	ПродолжитьПереход = Истина;
	
	Если СпособПерехода = 0 Тогда
		Элементы.ПанельИнформацияПослеВыгрузки.ТекущаяСтраница = Элементы.СтраницаИнформацияПослеВыгрузкиСервис;
		
		Элементы.ДекорацияПерейтиКПриложению.Заголовок = СтроковыеФункцииКлиент.ФорматированнаяСтрока("<a href = %1>%2</a>",
			АдресПриложения,
			НСтр("ru='Перейти к приложению'"));
		
	Иначе
		Элементы.ПанельИнформацияПослеВыгрузки.ТекущаяСтраница = Элементы.СтраницаИнформацияПослеВыгрузкиФайл;
	КонецЕсли;
	
	Возврат ПродолжитьПереход;
	
КонецФункции

#КонецОбласти

#Область СтраницаВыгрузкаОстатков

&НаКлиенте
Функция Подключаемый_СтраницаВыгрузкаОстатков_ПриОткрытии(ПропуститьСтраницу, ЭтоПереходДалее)
	
	ПродолжитьПереход = Истина;
	
	Возврат ПродолжитьПереход;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаВыгрузкаОстатков_ПриПереходеДалее()
	
	Если СпособПерехода = 0 Тогда
		ПродолжитьПереход = Истина;
	Иначе
		ПродолжитьПереход = Ложь;
		ПодключитьРасширениеДляРаботыСФайлами();
	КонецЕсли;
	
	Возврат ПродолжитьПереход;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаВыгрузкаОстатков_ДлительнаяОперация(ДлительнаяОперация)
	
	ПродолжитьПереход = Истина;
	
	Заголовок = НСтр("ru = 'Перенос остатков'");
	
	Если СпособПерехода = 0 Тогда
		Элементы.ПанельАвторизацияНаСервисе.ТекущаяСтраница            = Элементы.СтраницаАвторизациюНаСервисеВыполнено;
		Элементы.ПанельПроверкаДоступныхКонфигураций.ТекущаяСтраница   = Элементы.СтраницаПроверкаДоступныхКонфигурацийВыполнено;
		Элементы.ПанельПодготовкаПриложенияДляПерехода.ТекущаяСтраница = Элементы.СтраницаПодготовкаПриложенияДляПереходаВыполнено;
		Элементы.ПанельПереносСправочнойИнформации.ТекущаяСтраница     = Элементы.СтраницаПереносСправочнойИнформацииВыполнено;
		Элементы.ПанельПереносОстатков.ТекущаяСтраница                 = Элементы.СтраницаВыгрузкаОстатковВыполняется;
	Иначе
		Элементы.ПанельПереносСправочнойИнформацииФайл.ТекущаяСтраница = Элементы.СтраницаПереносСправочнойИнформацииФайлВыполнено;
		Элементы.ПанельПереносОстатковФайл.ТекущаяСтраница             = Элементы.СтраницаВыгрузкаОстатковФайлВыполняется;
	КонецЕсли;
	
	ДлительнаяОперация = ЗапуститьВыгрузкуДанныхНаСервере("Остатки");
	
	Возврат ПродолжитьПереход;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаВыгрузкаОстатков_РезультатДлительнойОперации(АдресРезультата, СообщениеОбОшибке)
	
	ПродолжитьПереход = Ложь;
	
	ОбработатьРезультатВыгрузкиДанных(АдресРезультата, СообщениеОбОшибке);
	
	Возврат ПродолжитьПереход;
	
КонецФункции

#КонецОбласти

#Область СтраницаИнформацияПослеВыгрузки

&НаКлиенте
Функция Подключаемый_СтраницаИнформацияПослеВыгрузкиОстатков_ПриОткрытии(ПропуститьСтраницу, ЭтоПереходДалее)
	
	ПродолжитьПереход = Истина;
	
	Если СпособПерехода = 0 Тогда
		ПропуститьСтраницу = Истина;
	КонецЕсли;
	
	Возврат ПродолжитьПереход;
	
КонецФункции

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область ВыборДополнительныхУсловий

&НаКлиенте
Процедура ОткрытьФормуВыбораЗначений(ВыбираемоеЗначение)
	
	ПараметрыФормы = Новый Структура;
	Если ВыбираемоеЗначение = "Организации" Тогда
		ПараметрыФормы.Вставить("ИмяЭлементаФормыДляЗаполнения",          "Организации");
		ПараметрыФормы.Вставить("ИмяРеквизитаЭлементаФормыДляЗаполнения", "Организация");
		ПараметрыФормы.Вставить("ИмяТаблицыВыбора",                       "Справочник.Организации");
		ПараметрыФормы.Вставить("ЗаголовокФормыВыбора",                   НСтр("ru = 'Выберите организации для переноса:'"));
		ПараметрыФормы.Вставить("МассивВыбранныхЗначений",                Организации.ВыгрузитьЗначения());
		ПараметрыФормы.Вставить("ПараметрыВнешнегоСоединения",            Неопределено);
		ПараметрыФормы.Вставить("КоллекцияФильтров",                      Неопределено);
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораДополнительныхУсловий",
		ПараметрыФормы,
		ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьДанныеВыбораДополнительныхУсловий(ВыбранноеЗначение)
	
	ТаблицаВыбранныхЗначений = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТаблицыВоВременномХранилище);
	
	ЭтотОбъект[ВыбранноеЗначение.ИмяТаблицыДляЗаполнения].ЗагрузитьЗначения(ТаблицаВыбранныхЗначений.ВыгрузитьКолонку("Представление"));
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеЭлементымиФормы

&НаКлиенте
Процедура УправлениеЭлементамиФормыКлиент()
	
	УстановитьСтраницуПриветствия();
	УправлениеЭлементамиФормыПоСпособуПерехода();
	УстановитьЗаголовокДекорацииОрганизацииКПереносу();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормыСервер()
	
	Элементы.КартинкаКоробкаОблако.Видимость = Не РазделениеВключено;
	Элементы.КартинкаКоробкаФайл.Видимость   = Не РазделениеВключено;
	Элементы.ДекорацияРегистрация.Видимость  = Не РазделениеВключено;
	Элементы.КартинкаОблакоОблако.Видимость  = РазделениеВключено;
	Элементы.КартинкаОблакоФайл.Видимость    = РазделениеВключено;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтраницуПриветствия()
	
	Элементы.КомандаНавигацияНачалоДалее.Доступность = Ложь;
	
	ИнформацияОДоступномОбновлении = ПолучениеОбновленийПрограммыКлиент.ИнформацияОДоступномОбновлении();
	Если ИнформацияОДоступномОбновлении.ДоступноОбновление И ТипЗнч(ИнформацияОДоступномОбновлении.Конфигурация) = Тип("Структура")
		И ЗначениеЗаполнено(ИнформацияОДоступномОбновлении.Конфигурация.Версия) Тогда
		Элементы.ПанельПриветствие.ТекущаяСтраница = Элементы.СтраницаПриветствиеТребуетсяОбновление;
	Иначе
		Элементы.ПанельПриветствие.ТекущаяСтраница = Элементы.СтраницаПриветствиеОжидание;
		ЗапуститьАнализГотовностиКПереходу();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеЭлементамиФормыПоСпособуПерехода()
	
	ЭтоПереходВСервис = СпособПерехода = 0;
	
	Элементы.ДекорацияПерейтиКПриложению.Видимость = ЭтоПереходВСервис;
	Элементы.ГруппаФайлВыгрузки.Видимость          = НЕ ЭтоПереходВСервис;
	Элементы.ДекорацияПереносЗавершенПерейтиКПриложению.Видимость = ЭтоПереходВСервис;
	
	Если ЭтоПереходВСервис Тогда
		Элементы.ВизуализацииПерехода.ТекущаяСтраница = Элементы.СтраницаОблако;
		Элементы.ПанельОжидания.ТекущаяСтраница       = Элементы.СтраницаОжиданияПереходВСервис;
	Иначе
		Элементы.ВизуализацииПерехода.ТекущаяСтраница = Элементы.СтраницаФайл;
		Элементы.ПанельОжидания.ТекущаяСтраница       = Элементы.СтраницаОжиданияПереходВФайл;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокДекорацииОрганизацииКПереносу()
	
	Если Организации.Количество() > 0 Тогда
		ТекстГиперссылкаОткрытьОрганизации = НСтр("ru='по организациям:'");
		ТекстОрганизации = Символы.ПС + СтрСоединить(Организации.ВыгрузитьЗначения(), Символы.ПС);
	Иначе
		ТекстГиперссылкаОткрытьОрганизации = НСтр("ru='по всем организациям.'");
		ТекстОрганизации = "";
	КонецЕсли;
	
	Элементы.ДекорацияОрганизацииКПереносу.Заголовок = СтроковыеФункцииКлиент.ФорматированнаяСтрока(НСтр("ru='Будут перенесены данные <a href = ""ОткрытьФормуВыбораОрганизации"">%1</a>%2'"),
		ТекстГиперссылкаОткрытьОрганизации,
		ТекстОрганизации);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьЭлементовПоАдресуСервиса()
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресСервиса);
	
	ЭтоПереходНаСервис1С = СтруктураURI.Хост = "1cfresh.com";
	
	Элементы.ДекорацияВосстановлениеПароля.Видимость = ЭтоПереходНаСервис1С;
	Элементы.ДекорацияРегистрация.Видимость = ЭтоПереходНаСервис1С;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьЭлементовПоАдресуПриложения()
	
	Элементы.НаименованиеПриложения.Видимость = НЕ ЗначениеЗаполнено(АдресПриложения);
	
КонецПроцедуры

#КонецОбласти

#Область ДлительныеОперации

#Область АнализГотовностиКПереходу

&НаКлиенте
Процедура ЗапуститьАнализГотовностиКПереходу()
	
	ДлительнаяОперация = ЗапуститьАнализГотовностиКПереходуНаСервере();
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("АнализГотовностиКПереходуЗавершение", ЭтотОбъект);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьАнализГотовностиКПереходуНаСервере()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, "Обработки.ПомощникПереходаВУНФ.АнализГотовностиКПереходу");
	
КонецФункции

&НаКлиенте
Процедура АнализГотовностиКПереходуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.КраткоеПредставлениеОшибки);
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		АнализИнформационнойБазыЗавершениеНаСервере(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура АнализИнформационнойБазыЗавершениеНаСервере(Результат)
	
	РезультатАнализа = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	ГотоваКПереходу = Истина;
	Для Каждого Результат Из РезультатАнализа Цикл
		Если Результат.Значение Тогда
			ГотоваКПереходу = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ГотоваКПереходу Тогда
		Элементы.ПанельПриветствие.ТекущаяСтраница = Элементы.СтраницаПриветствиеГотоваКПереходу;
	Иначе
		Элементы.ПанельПриветствие.ТекущаяСтраница = Элементы.СтраницаПриветствиеТребуютсяДействия;
		
		Элементы.ДекорацияПриветствиеЗакрытьКассовыеСмены.Видимость     = РезультатАнализа.ОткрытыКассовыеСмены;
		Элементы.ДекорацияПриветствиеВыполнитьСинхронизацию.Видимость   = РезультатАнализа.ЗарегистрированыИзмененияОбмена;
		Элементы.ДекорацияПриветствиеУдалитьПомеченныеОбъекты.Видимость = РезультатАнализа.ПомеченыНаУдалениеОбъекты;
		Элементы.ДекорацияПриветствиеОбменЕГАИС.Видимость               = РезультатАнализа.ИспользуетсяЕГАИС;
		Элементы.ДекорацияПриветствиеОбменИСМП.Видимость                = РезультатАнализа.ИспользуетсяИСМП;
		Элементы.ДекорацияПриветствиеОбменВЕТИС.Видимость               = РезультатАнализа.ИспользуетсяВЕТИС;
	КонецЕсли;
	
	Элементы.КомандаНавигацияНачалоДалее.Доступность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область АвторизацияНаСервисе

&НаСервере
Функция ЗапуститьАвторизациюНаСервисеНаСервере()
	
	АдресПрограммногоИнтерфейса = СтрШаблон("%1/a/adm/hs/ext_api", АдресСервиса);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, "Обработки.ПомощникПереходаВУНФ.ВыполнитьМетодВнешнегоИнтерфейса",
		АдресПрограммногоИнтерфейса, ПараметрыАвторизации(), "usr/account/list");
	
КонецФункции

&НаСервере
Процедура ОбработатьРезультатАвторизацииНаСервере(АдресРезультата, СообщениеОбОшибке)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	СписокВыбора = Элементы.АбонентКод.СписокВыбора;
	СписокВыбора.Очистить();
	
	Если ОшибкаМетодаВнешнегоИнтерфейса(Результат, СообщениеОбОшибке) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Элемент Из Результат.Данные.account Цикл
		СписокВыбора.Добавить(Элемент.id, Элемент.name);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаДоступныхКонфигураций

&НаСервере
Функция ЗапуститьПроверкуДоступныхКонфигурацийНаСервере()
	
	АдресПрограммногоИнтерфейса = СтрШаблон("%1/a/adm/hs/ext_api", АдресСервиса);
	
	ДанныеЗапроса = Новый Структура;
	ДанныеЗапроса.Вставить("account", КодАбонента);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, "Обработки.ПомощникПереходаВУНФ.ВыполнитьМетодВнешнегоИнтерфейса",
		АдресПрограммногоИнтерфейса, ПараметрыАвторизации(), "usr/application/list", ДанныеЗапроса);
	
КонецФункции

&НаСервере
Процедура ОбработатьРезультатПолученияДоступныхКонфигурацийНаСервере(АдресРезультата, СообщениеОбОшибке)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ОшибкаМетодаВнешнегоИнтерфейса(Результат, СообщениеОбОшибке) Тогда
		Возврат;
	КонецЕсли;
	
	ДоступнаУНФ = Ложь;
	Для Каждого Элемент Из Результат.Данные.application Цикл
		Если Элемент.Sysname = ИмяКонфигурацииДляПерехода Тогда
			ДоступнаУНФ = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ДоступнаУНФ Тогда
		СообщениеОбОшибке = СтрШаблон(НСтр("ru = 'В доступных абоненту конфигурациях не обнаружена: ""%1""'"), СинонимКонфигурацииДляПерехода);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеСпискаПриложений

&НаСервере
Функция ЗапуститьПолучениеСпискаПриложенийНаСервере()
	
	АдресПрограммногоИнтерфейса = СтрШаблон("%1/a/adm/hs/ext_api", АдресСервиса);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, "Обработки.ПомощникПереходаВУНФ.ВыполнитьМетодВнешнегоИнтерфейса",
		АдресПрограммногоИнтерфейса, ПараметрыАвторизации(), "usr/tenant/list");
	
КонецФункции

&НаСервере
Процедура ОбработатьРезультатПолученияСпискаПриложенийНаСервере(АдресРезультата, СообщениеОбОшибке)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	СписокВыбора = Элементы.АдресПриложения.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("", НСтр("ru = 'Создать новое'"));
	
	Приложения.Очистить();
	
	Если ОшибкаМетодаВнешнегоИнтерфейса(Результат, СообщениеОбОшибке) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Элемент Из Результат.Данные.tenant Цикл
		Если Элемент.application = КодКонфигурацииДляПерехода
			И ПриложениеГотовоКИспользоанию(Элемент.status) Тогда
			
			СписокВыбора.Добавить(Элемент.url, Элемент.name);
			
			СтрокаПриложений = Приложения.Добавить();
			СтрокаПриложений.АдресПриложения = Элемент.url;
			СтрокаПриложений.НомерОбласти = Элемент.id;
			СтрокаПриложений.СтатусОбласти = Элемент.status;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеПриложения

&НаСервере
Функция ЗапуститьСозданиеПриложенияНаСервере()
	
	АдресПрограммногоИнтерфейса = СтрШаблон("%1/a/adm/hs/ext_api", АдресСервиса);
	
	ДанныеЗапроса = Новый Структура;
	ДанныеЗапроса.Вставить("application", КодКонфигурацииДляПерехода);
	ДанныеЗапроса.Вставить("name", НаименованиеПриложения);
	ДанныеЗапроса.Вставить("timezone", ЧасовойПояс);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, "Обработки.ПомощникПереходаВУНФ.ВыполнитьМетодВнешнегоИнтерфейса",
		АдресПрограммногоИнтерфейса, ПараметрыАвторизации(), "usr/tenant/create", ДанныеЗапроса);
	
КонецФункции

&НаСервере
Процедура ОбработатьРезультатСозданияПриложенияНаСервере(АдресРезультата, СообщениеОбОшибке)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ОшибкаМетодаВнешнегоИнтерфейса(Результат, СообщениеОбОшибке) Тогда
		Возврат;
	КонецЕсли;
	
	АдресПриложения = Результат.Данные.tenant.url;
	НомерОбласти    = Результат.Данные.tenant.id;
	СтатусОбласти   = Результат.Данные.tenant.status;
	
	СписокВыбора = Элементы.АдресПриложения.СписокВыбора;
	СписокВыбора.Добавить(АдресПриложения, НаименованиеПриложения);
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаСтатусаПриложения

&НаСервере
Функция ЗапуститьПроверкуСтатусаПриложенияНаСервере()
	
	АдресПрограммногоИнтерфейса = СтрШаблон("%1/a/adm/hs/ext_api", АдресСервиса);
	
	ДанныеЗапроса = Новый Структура;
	ДанныеЗапроса.Вставить("id", НомерОбласти);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, "Обработки.ПомощникПереходаВУНФ.ВыполнитьМетодВнешнегоИнтерфейса",
		АдресПрограммногоИнтерфейса, ПараметрыАвторизации(), "usr/tenant/info", ДанныеЗапроса);
	
КонецФункции

&НаСервере
Процедура ОбработатьРезультатПроверкиСтатусаПриложенияНаСервере(АдресРезультата, СообщениеОбОшибке)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ОшибкаМетодаВнешнегоИнтерфейса(Результат, СообщениеОбОшибке) Тогда
		Возврат;
	КонецЕсли;
	
	СтатусОбласти = Результат.Данные.tenant.status;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПриложениеГотовоКИспользоанию(СтатусОбласти)
	
	ПриложениеГотовоКИспользоанию = Ложь;
	
	Если СтатусОбласти = "ready" ИЛИ СтатусОбласти = "used" Тогда
		ПриложениеГотовоКИспользоанию = Истина;
	КонецЕсли;
	
	Возврат ПриложениеГотовоКИспользоанию;
	
КонецФункции

#КонецОбласти

#Область ВыгрузкаДанных

&НаКлиенте
Процедура ПодключитьРасширениеДляРаботыСФайлами()
	
	ТекстПредложения = НСтр("ru = 'Файл выгрузки может оказаться большим. В этом случае потребуется расширение для работы с 1С:Предприятием.
							|С этим расширением работа в веб-клиенте станет удобней не только при работе с большими файлами.'");
	
	Оповещение = Новый ОписаниеОповещения("ЗапуститьВыгрузкуДанныхПослеУстановкиРасширения", ЭтотОбъект);
	ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(Оповещение, ТекстПредложения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьВыгрузкуДанныхПослеУстановкиРасширения(Подключено, ДополнительныеПараметры) Экспорт
	
	ВыполнитьОбработчикДлительнойОперации();
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьВыгрузкуДанныхНаСервере(Этап)
	
	Если СпособПерехода = 0 Тогда
		ПутьКФайлуВыгрузки = ПолучитьИмяВременногоФайла("xml");
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, "Обработки.ПомощникПереходаВУНФ.ВыгрузитьДанные",
		СпособПерехода, Этап, Организации.ВыгрузитьЗначения(), ДатаОстатков);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьРезультатВыгрузкиДанных(АдресРезультата, СообщениеОбОшибке)
	
	Если СпособПерехода = 0 Тогда
		// Сохраним выгрузку во временный файл для передачи в сервис.
		ЗаписатьРезультатВыгрузкиВФайл(АдресРезультата);
	Иначе
		// Откроем диалоговое меню с выбором файла для сохранения.
		ВыбратьФайлДляВыгрузкиНаКлиенте(Истина, АдресРезультата);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайлДляВыгрузкиНаКлиенте(ВыгружатьПослеВыбора = Ложь, АдресХраненияРезультата = "")
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.Заголовок = НСтр("ru = 'Укажите путь для сохранения файла с данными'");
	ДиалогВыбораФайла.Фильтр = НСтр("ru = 'Данные выгрузки'")+ "(*.xml)|*.xml";
	Если ЗначениеЗаполнено(ПутьКФайлуВыгрузки) Тогда
		ДиалогВыбораФайла.ПолноеИмяФайла = ПутьКФайлуВыгрузки;
	КонецЕсли;
	ОповещениеВыбора = Новый ОписаниеОповещения("ПослеВыбораФайлаДляВыгрузки", ЭтотОбъект,
		Новый Структура("ВыгружатьПослеВыбора, АдресХраненияРезультата", ВыгружатьПослеВыбора, АдресХраненияРезультата));
	ДиалогВыбораФайла.Показать(ОповещениеВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораФайлаДляВыгрузки(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		ОбработатьОшибкуДлительнойОпераци(НСтр("ru = 'Необходимо выбрать файл для продолжения'"));
		Возврат;
	КонецЕсли;
	
	ПутьКФайлуВыгрузки = ВыбранныеФайлы[0];
	Если ДополнительныеПараметры.ВыгружатьПослеВыбора Тогда
		ЗаписатьРезультатВыгрузкиВФайл(ДополнительныеПараметры.АдресХраненияРезультата);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьРезультатВыгрузкиВФайл(АдресХраненияРезультата)
	
	ОповещениеПолученФайл = Новый ОписаниеОповещения("ПослеПолученияФайловССервера", ЭтотОбъект);
	ПолучаемыеФайлы = Новый Массив;
	ФайлВыгрузки = Новый ОписаниеПередаваемогоФайла(ПутьКФайлуВыгрузки, АдресХраненияРезультата);
	ПолучаемыеФайлы.Добавить(ФайлВыгрузки);
	НачатьПолучениеФайловССервера(ОповещениеПолученФайл, ПолучаемыеФайлы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияФайловССервера(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПолученныеФайлы = Неопределено Тогда
		ОбработатьОшибкуДлительнойОпераци(НСтр("ru = 'Не удалось сохранить файл выгрузки'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПутьКФайлуВыгрузки) Тогда
		ПутьКФайлуВыгрузки = ПолученныеФайлы[0].Имя;
	КонецЕсли;
	
	НовыйНомерПерехода = КэшированныеЗначения.Получить("НовыйНомерПерехода");
	ПродолжитьУстановлениеПорядковогоНомераПерехода(НовыйНомерПерехода);
	
КонецПроцедуры

#КонецОбласти

#Область ПередачаДанныхНаСервис

&НаСервере
Функция ЗапуститьПередачуДанныхНаСервисНаСервере()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	
	Если РазделениеВключено Тогда
		
		ПараметрыВызова = Новый Структура("Код, Тело", "100", "");
		
		СведенияОбОперации = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, "Обработки.ПомощникПереходаВУНФ.ПередатьДанныеСервис",
			НомерОбласти, ПутьКФайлуВыгрузки, ПараметрыВызова);
	Иначе
		СведенияОбОперации = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, "Обработки.ПомощникПереходаВУНФ.ПередатьДанные",
			ПараметрыПодключенияWS(), ПутьКФайлуВыгрузки);
	КонецЕсли;
	
	Возврат СведенияОбОперации;
	
КонецФункции

&НаСервере
Процедура ОбработатьРезультатПередачиДанныхНаСервисНаСервере(АдресРезультата, СообщениеОбОшибке)
	
	ИдентификаторОперацииНаСервисе = ПолучитьИзВременногоХранилища(АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаСостоянияЗагрузки

&НаСервере
Функция ЗапуститьПроверкуСостоянияЗагрузкиНаСервере()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	
	Если РазделениеВключено Тогда
		Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, "Обработки.ПомощникПереходаВУНФ.ПроверитьСостояниеЗагрузкиСервис",
			ИдентификаторОперацииНаСервисе);
	Иначе
		Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, "Обработки.ПомощникПереходаВУНФ.ПроверитьСостояниеЗагрузки",
			ПараметрыПодключенияWS(), ИдентификаторОперацииНаСервисе);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ОбработатьРезультатПроверкиСостоянияЗагрузкиНаСервере(АдресРезультата, СообщениеОбОшибке)
	
	СостояниеЗагрузки = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Возврат СостояниеЗагрузки;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаСервереБезКонтекста
Функция ОшибкаМетодаВнешнегоИнтерфейса(Результат, СообщениеОбОшибке)
	
	ОшибкаМетодаВнешнегоИнтерфейса = Ложь;
	
	Если Результат.Ошибка Тогда
		СообщениеОбОшибке = Результат.СообщениеОбОшибке;
		ОшибкаМетодаВнешнегоИнтерфейса = Истина;
	ИначеЕсли Результат.Данные.general.error Тогда
		СообщениеОбОшибке = Результат.Данные.general.message;
		ОшибкаМетодаВнешнегоИнтерфейса = Истина;
	КонецЕсли;
	
	Возврат ОшибкаМетодаВнешнегоИнтерфейса;
	
КонецФункции

&НаСервере
Функция ПараметрыАвторизации()
	
	ПараметрыАвторизации = Новый Структура;
	ПараметрыАвторизации.Вставить("Логин", Логин);
	ПараметрыАвторизации.Вставить("Пароль", Пароль);
	Если ЗначениеЗаполнено(КодАбонента) Тогда
		ПараметрыАвторизации.Вставить("КодАбонента", КодАбонента);
	КонецЕсли; 
	
	Возврат ПараметрыАвторизации;
	
КонецФункции

&НаСервере
Функция ПараметрыПодключенияWS()
	
	ИмяСервиса = "EnterpriseDataUpload_1_0_1_1";
	URIПространстваИмен = "http://www.1c.ru/SSL/EnterpriseDataUpload_1_0_1_1";
	
	МестоположениеWSDL = СтрШаблон("%1/ws/%2?wsdl", АдресПриложения, ИмяСервиса);
	
	ПараметрыПодключения = ОбщегоНазначения.ПараметрыПодключенияWSПрокси();
	ПараметрыПодключения.АдресWSDL              = МестоположениеWSDL;
	ПараметрыПодключения.URIПространстваИмен    = URIПространстваИмен;
	ПараметрыПодключения.ИмяСервиса             = ИмяСервиса;
	ПараметрыПодключения.ИмяПользователя        = Логин;
	ПараметрыПодключения.Пароль                 = Пароль;
	ПараметрыПодключения.Таймаут                = 600;
	ПараметрыПодключения.ДелатьКонтрольныйВызов = Истина;
	
	Возврат ПараметрыПодключения;
	
КонецФункции

&НаСервере
Процедура ОтменитьДлительнуюОперацию()
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти