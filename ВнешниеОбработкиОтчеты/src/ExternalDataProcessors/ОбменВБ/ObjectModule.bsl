#Область СлужебныеНастройкиОбработки

Функция СведенияОВнешнейОбработке() Экспорт

	РегистрационныеДанные = Новый Структура;
	РегистрационныеДанные.Вставить("Наименование", "Рабочее место Wildberries");
	РегистрационныеДанные.Вставить("БезопасныйРежим", Ложь);
	РегистрационныеДанные.Вставить("Версия", "1.0.0");
	РегистрационныеДанные.Вставить("Публикация", "Используется");

	РегистрационныеДанные.Вставить("Вид", "ДополнительнаяОбработка");
	РегистрационныеДанные.Вставить("Информация", "Модуль обмена данными с Wildberries");

	ТЗКоманд = Новый ТаблицаЗначений;
	ТЗКоманд.Колонки.Добавить("Идентификатор");
	ТЗКоманд.Колонки.Добавить("Представление");
	ТЗКоманд.Колонки.Добавить("Модификатор");
	ТЗКоманд.Колонки.Добавить("ПоказыватьОповещение");
	ТЗКоманд.Колонки.Добавить("Использование");

	СтрокаКоманды = тзКоманд.Добавить();
	СтрокаКоманды.Идентификатор = "ОткрытиеФормыWildberries";
	СтрокаКоманды.Представление = "Рабочее место Wildberries";
	СтрокаКоманды.ПоказыватьОповещение = Истина;
	СтрокаКоманды.Использование = "ОткрытиеФормы";
	//Тест ветвления Git

	РегистрационныеДанные.Вставить("Команды", ТЗКоманд);

	Возврат РегистрационныеДанные;
КонецФункции//СведенияОВнешнейОбработке()

Процедура ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыВыполненияКоманды = Неопределено) Экспорт

	Если Не ИдентификаторКоманды = "ОткрытиеФормыWildberries" Тогда
		ВосстановитьНастройкиВМодуле();
	КонецЕсли;

КонецПроцедуры

Процедура ВосстановитьНастройкиВМодуле() Экспорт

	КлючОбъекта  = "РабочееМестоWBДеловыеСистемы";
	МассивИменНастроек = ПолучитьМассивИменНастроек();

	Для Каждого ИмяНастройки Из МассивИменНастроек Цикл

		Попытка

			ЗначениеИзХранилища = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, ИмяНастройки);
			Если Не ЗначениеИзХранилища = Неопределено Тогда
				ЭтотОбъект[ИмяНастройки] = ЗначениеИзХранилища;
			КонецЕсли;

		Исключение

		КонецПопытки;
	КонецЦикла;

	Если Не ЗначениеЗаполнено(АдресСервисаAPIv1) Тогда
		АдресСервисаAPIv1 = "suppliers-stats.wildberries.ru";
	КонецЕсли;

	Если Не ЗначениеЗаполнено(АдресСервисаAPIv2) Тогда
		АдресСервисаAPIv2 = "suppliers-api.wildberries.ru";
	КонецЕсли;

	ДатаПоГлубинеОтбораДней();

	ВремяОтлежкиЗаказа = 15;

КонецПроцедуры

Процедура СохранитьНастройкиВМодуле() Экспорт

	КлючОбъекта  = "РабочееМестоWBДеловыеСистемы";
	МассивИменНастроек = ПолучитьМассивИменНастроек();

	Для Каждого ИмяНастройки Из МассивИменНастроек Цикл
		ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, ИмяНастройки, ЭтотОбъект[ИмяНастройки]);
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьМассивИменНастроек()

	Массив = Новый Массив;

	Массив.Добавить("АдресСервисаAPIv2");
	Массив.Добавить("АдресСервисаAPIv1");
	Массив.Добавить("ТокенAPIv2");
	Массив.Добавить("ТокенAPIv1");
	Массив.Добавить("КонтрагентДляПривязкиТоваров");
	Массив.Добавить("ГлубинаОтбораДней");
	Массив.Добавить("СкладОстатков");

	Возврат Массив;

КонецФункции // ()

#КонецОбласти

#Область РаботаСДаннымиФормы

Процедура ЗаполнитьСопоставлениеНоменклатуры() Экспорт

	Если Не ЗначениеЗаполнено(КонтрагентДляПривязкиТоваров) Тогда
		ПоказатьОшибку("В настройках не указан контрагент для привязки товаров. Привязка невозможна");
		Возврат;
	КонецЕсли;

	СтруктураТовары = ПолучитьТоварыНаWB();

	Если СтруктураТовары.УспехЗапроса Тогда
		
		//Подготовим запросы
		ЗапросНомКонтрагентов =	ЗапросПоНоменклатуреКонтрагентов();
		ЗапросНомКонтрагентов.УстановитьПараметр("Владелец", КонтрагентДляПривязкиТоваров);
		ЗапросВсеТовары = ЗапросПоВсейНоменклатуре();

		СопоставлениеНоменклатуры.Очистить();
		Для Каждого стрWB Из СтруктураТовары.Результат.stocks Цикл

			тчСтрока = СопоставлениеНоменклатуры.Добавить();
			тчСтрока.АртикулWB = стрWB.article;
			тчСтрока.НаименованиеWB = стрWB.name;
			тчСтрока.ШтрихкодWB = стрWB.barcode;
			тчСтрока.БрендWB = стрWB.brand;
			тчСтрока.КатегорияWB = стрWB.subject;
			тчСтрока.IDНоменклатурыWB = Формат(стрWB.nmId, "ЧГ="); 
			
			// Сначала поищем среди уже привязанных товаров
			ЗапросНомКонтрагентов.УстановитьПараметр("Идентификатор", тчСтрока.IDНоменклатурыWB);
			ЗапросНомКонтрагентов.УстановитьПараметр("ШтрихкодКомбинации", стрWB.barcode);
			//@skip-check query-in-loop
			Выборка = ЗапросНомКонтрагентов.Выполнить().Выбрать();

			Если Выборка.Следующий() Тогда
				тчСтрока.Привязано = Истина;
				тчСтрока.Номенклатура = Выборка.Номенклатура;
				тчСтрока.Артикул1с = Выборка.Номенклатура.Артикул;
				Продолжить;
			КонецЕсли;
			
			//Не нашли? Тогда ищем по артикулу среди непривязанных
			Артикул = стрWB.article;

				//Дополнение дефисом
			Если СтрНайти(Артикул, "-", , 4, 1) = 0 Тогда
				Артикул = Лев(Артикул, 3) + "-" + Прав(Артикул, СтрДлина(Артикул) - 3);
			КонецЕсли;

			ЗапросВсеТовары.УстановитьПараметр("Артикул", Артикул);
			
			//@skip-check query-in-loop
			Выборка = ЗапросВсеТовары.Выполнить().Выбрать();

			Если Выборка.Следующий() Тогда
				тчСтрока.Номенклатура = Выборка.Номенклатура;
				тчСтрока.Артикул1с = Выборка.Номенклатура.Артикул;
			КонецЕсли;

		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьТаблицуЗаказов() Экспорт

	Если Не ЗначениеЗаполнено(НачальнаяДата) Тогда
		ПоказатьОшибку("Не указана дата начала выборки заказов с Wildberries");
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(КонтрагентДляПривязкиТоваров) Тогда
		ПоказатьОшибку("В настройках не указан контрагент для привязки товаров. Привязка невозможна");
		Возврат;
	КонецЕсли;

	СтруктураЗаказы = ПолучитьЗаказыНаWBv2();

	Если СтруктураЗаказы.УспехЗапроса Тогда

		ЗаказыWB.Очистить();
			
		//Чуток производительности
		ПоследнийШтрихкод = "";
		ПоследняяНоменклатура = Неопределено;
		ЗапросПривязНомен = ЗапросПоНоменклатуреКонтрагентов();
		ЗапросПривязНомен.УстановитьПараметр("Владелец", КонтрагентДляПривязкиТоваров);
		Для Каждого Заказ Из СтруктураЗаказы.Результат.Orders Цикл
			
			//УДАЛИТЬ. ДЛЯ ТЕСТА
//			Если Не Заказ.status = 1  Тогда
//					Продолжить;
//			КонецЕсли;
			//УДАЛИТЬ. ДЛЯ ТЕСТА

			ДатаЗаказа = ДатаИзRFC3339(Заказ.dateCreated);

			Если ДатаЗаказа + ВремяОтлежкиЗаказа * 60 > ТекущаяДатаСеанса() Тогда
				Продолжить;
			КонецЕсли;
			стрТЧ = ЗаказыWB.Добавить();
			стрТЧ.ДатаЗаказаWB = ДатаИзRFC3339(Заказ.dateCreated);
			стрТЧ.IdЗаказаWB = Заказ.orderId;
			стрТЧ.IdПозицииWB = Заказ.rid;
			стрТЧ.Заказ1с = НайтиЗаказВ1с(стрТЧ.IdЗаказаWB);
			стрТЧ.СуммаТовараWB = Заказ.convertedPrice / 100;
			стрТЧ.IdСкладаWB = Заказ.wbWhId;
			стрТЧ.ШтрихкодWB = Заказ.barcode;
			стрТЧ.СтатусЗаказаWB = Заказ.status;
			стрТЧ.СостояниеЗаказаWB = Заказ.userStatus;
			Если ПоследнийШтрихкод = Заказ.barcode Тогда
				стрТЧ.Номенклатура = ПоследняяНоменклатура;
			Иначе
				ЗапросПривязНомен.УстановитьПараметр("ШтрихкодКомбинации", Заказ.barcode);
				Выборка = ЗапросПривязНомен.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					стрТЧ.Номенклатура =   Выборка.Номенклатура;
					ПоследняяНоменклатура = Выборка.Номенклатура;
					ПоследнийШтрихкод = Заказ.barcode;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		ЗаказыWB.Сортировать("Номенклатура,ДатаЗаказаWB");

	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьТаблицуПоставок() Экспорт

	Если Не ЗначениеЗаполнено(НачальнаяДата) Тогда
		ПоказатьОшибку("Не указана дата начала выборки заказов с Wildberries");
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(КонтрагентДляПривязкиТоваров) Тогда
		ПоказатьОшибку("В настройках не указан контрагент для привязки товаров. Привязка невозможна");
		Возврат;
	КонецЕсли;

	СтруктураПоставки = ПолучитьПоставкиНаWBv2();

	Если СтруктураПоставки.УспехЗапроса Тогда
		Поставки.Очистить();

		Для Каждого стр Из СтруктураПоставки.Результаты Цикл
			статусWB = стр.СтатусПоставки;

			Для Каждого поставка Из стр.Результат.supplies Цикл
				новаяСтрока = Поставки.Добавить();
				новаяСтрока.IdПоставки = поставка.supplyId;
				новаяСтрока.СтатусWB = статусWB;
				новаяСтрока.Поставка1с = НайтиПоставкуВ1с(поставка.supplyId);
				новаяСтрока.ШтрихкодПоставкиWBBase64 = ПолучитьШтрихкодПоставкиBase64НаWBv2(поставка.supplyId);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьТаблицуОстаткамиWB() Экспорт

	Если Не ЗначениеЗаполнено(СкладОстатков) Тогда
		ПоказатьОшибку("В настройках не указан склад для выгрузки остатков товара");
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(КонтрагентДляПривязкиТоваров) Тогда
		ПоказатьОшибку("В настройках не указан контрагент для привязки товаров");
		Возврат;
	КонецЕсли;
	ОстаткиТоваров.Очистить();
	ЗагрузитьОстатки1сВТЧ();

	СтруктураТовары = ПолучитьТоварыНаWB();

	Если СтруктураТовары.УспехЗапроса Тогда
		
		//Подготовим запросы
		ЗапросНомКонтрагентов =	ЗапросПоНоменклатуреКонтрагентов();
		ЗапросНомКонтрагентов.УстановитьПараметр("Владелец", КонтрагентДляПривязкиТоваров);

		Для Каждого стрWB Из СтруктураТовары.Результат.stocks Цикл

			ЗапросНомКонтрагентов.УстановитьПараметр("Идентификатор", Формат(стрWB.nmId, "ЧГ="));
			ЗапросНомКонтрагентов.УстановитьПараметр("ШтрихкодКомбинации", стрWB.barcode);
			//@skip-check query-in-loop
			Выборка = ЗапросНомКонтрагентов.Выполнить().Выбрать();
			Если Не Выборка.Следующий() Тогда
				ПоказатьОшибку("Обнаружен товар с WB без привязки в базе. " + стрWB.brand + ", " + стрWB.name
					+ "; ш-код " + стрWB.barcode);
				Продолжить;
			КонецЕсли;

			тчСтрока = ОстаткиТоваров.Найти(Выборка.Номенклатура, "Номенклатура");
			Если Не ЗначениеЗаполнено(тчСтрока) Тогда
				Если стрWB.stock = 0 Тогда
					Продолжить;
				КонецЕсли;
				тчСтрока = ОстаткиТоваров.Добавить();
				тчСтрока.Номенклатура = Выборка.Номенклатура;
				тчСтрока.ШтрихкодWB = стрWB.barcode;
				тчСтрока.Остаток1с = 0;
			КонецЕсли;

			тчСтрока.ОстатокWB = стрWB.stock;
			тчСтрока.Разница = тчСтрока.Остаток1с - тчСтрока.ОстатокWB;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура СоздатьЗаказыПоТЧ() Экспорт

	Если Не ЗначениеЗаполнено(КонтрагентДляПривязкиТоваров) Тогда
		ПоказатьОшибку("Не указан контрагент для привязки");
		Возврат;
	КонецЕсли; 
	  
		//Группируем заказы по складу WB

	СгруппированныеЗаказы = ЗаказыWB.Выгрузить( , "IdСкладаWB");
	СгруппированныеЗаказы.Свернуть("IdСкладаWB");

	Для Каждого ЗаказWB Из СгруппированныеЗаказы Цикл
		ЗаказСсылка = СоздатьЗаказ(ЗаказWB.IdСкладаWB);

		ОбработанныеСтрокиТЧ = ЗаказыWB.НайтиСтроки(Новый Структура("IdСкладаWB", ЗаказWB.IdСкладаWB));
		
		//Добавим новый заказ в ТЧ
		Если ЗначениеЗаполнено(ЗаказСсылка) Тогда
			Для Каждого стр Из ОбработанныеСтрокиТЧ Цикл
				Если стр.Заказ1сСоздан Тогда
					стр.Заказ1с = ЗаказСсылка;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура СвязатьТовары() Экспорт

	Если СопоставлениеНоменклатуры.Количество() = 0 Тогда
		ПоказатьОшибку("Таблица товаров пуста. Сначала заполните ее");
		Возврат;
	КонецЕсли;
	Для Каждого стр Из СопоставлениеНоменклатуры Цикл

		Если Стр.Привязано Или Не ЗначениеЗаполнено(Стр.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;

		МенеджерЗаписи = РегистрыСведений.НоменклатураКонтрагентовБЭД.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Владелец = КонтрагентДляПривязкиТоваров;
		МенеджерЗаписи.Артикул = стр.АртикулWB;
		МенеджерЗаписи.Идентификатор = стр.IDНоменклатурыWB;
		МенеджерЗаписи.ШтрихкодКомбинации = стр.ШтрихкодWB;
		МенеджерЗаписи.Наименование = стр.НаименованиеWB;
		МенеджерЗаписи.ЕдиницаИзмерения = "нд";
		МенеджерЗаписи.Номенклатура = стр.Номенклатура;

		МенеджерЗаписи.Записать(Истина);
		Стр.Привязано = Истина;

	КонецЦикла;

КонецПроцедуры

Функция ЗапросПоВсейНоменклатуре()
	Перем Запрос;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Товары.Ссылка КАК Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураКонтрагентовБЭД КАК НоменклатураКонтрагентовБЭД
	|		ПО (НоменклатураКонтрагентовБЭД.Номенклатура = Товары.Ссылка)
	|ГДЕ
	|	НоменклатураКонтрагентовБЭД.Номенклатура ЕСТЬ NULL
	|	И Товары.Артикул = &Артикул";
	Возврат Запрос
КонецФункции

Функция ЗапросПоНоменклатуреКонтрагентов()
	Перем Запрос;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НоменклатураКонтрагентовБЭД.Идентификатор КАК Идентификатор,
	|	НоменклатураКонтрагентовБЭД.ШтрихкодКомбинации КАК ШтрихкодКомбинации,
	|	НоменклатураКонтрагентовБЭД.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.НоменклатураКонтрагентовБЭД КАК НоменклатураКонтрагентовБЭД
	|ГДЕ
	|	НоменклатураКонтрагентовБЭД.Владелец = &Владелец
	|	И ВЫБОР
	|		КОГДА НЕ &Идентификатор = НЕОПРЕДЕЛЕНО
	|			ТОГДА НоменклатураКонтрагентовБЭД.Идентификатор = &Идентификатор
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|	И ВЫБОР
	|		КОГДА НЕ &ШтрихкодКомбинации = НЕОПРЕДЕЛЕНО
	|			ТОГДА НоменклатураКонтрагентовБЭД.ШтрихкодКомбинации = &ШтрихкодКомбинации
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|	И ВЫБОР
	|		КОГДА &ШтрихкодКомбинации = НЕОПРЕДЕЛЕНО
	|		И &Идентификатор = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ";

	Запрос.УстановитьПараметр("Идентификатор", Неопределено);
	Запрос.УстановитьПараметр("ШтрихкодКомбинации", Неопределено);

	Возврат Запрос
КонецФункции

Процедура ДатаПоГлубинеОтбораДней() Экспорт
	НачальнаяДата = НачалоДня(ТекущаяДатаСеанса()) - ГлубинаОтбораДней * 60 * 60 * 24;
КонецПроцедуры

Функция ПолучитьКартинкуBase64Тест(ИДЗаказа) Экспорт
	МассивИДЗаказа = Новый Массив;
	МассивИДЗаказа.Добавить(Число(ИДЗаказа));
	Ответ =	ПолучитьСтикерыНаWB(МассивИДЗаказа);
	Возврат Ответ.Результат.data[0].sticker.wbStickerSvgBase64;
КонецФункции

Процедура СоздатьПоставкиВ1сПоТЧ() Экспорт

	Если Не ЗначениеЗаполнено(КонтрагентДляПривязкиТоваров) Тогда
		ПоказатьОшибку("Не указан контрагент для привязки");
		Возврат;
	КонецЕсли;

	Для Каждого стрПоставка Из Поставки Цикл

		Если ЗначениеЗаполнено(стрПоставка.Поставка1с) Тогда
			Продолжить;
		КонецЕсли;

		СтуктураЗаказыСТоварами = ПрикрепленныеЗаказыПоПоставкеWBv2(стрПоставка.IdПоставки);
		стрПоставка.Поставка1с = СоздатьПоставкуВ1с(стрПоставка, СтуктураЗаказыСТоварами.Результат.Orders);

	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ПоставкиWB

Функция НайтиПоставкуВ1с(IdПоставки)

	Результат = Документы.РеализацияТоваров.ПустаяСсылка();

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Продажи.ДокументПродажи КАК Поставка
	|ИЗ
	|	РегистрНакопления.Продажи КАК Продажи
	|ГДЕ
	|	Продажи.ДокументПродажи.ds_IdПоставкиWB = &IdПоставки";

	Запрос.УстановитьПараметр("IdПоставки", IdПоставки);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Найдено = Истина;
		Результат = ВыборкаДетальныеЗаписи.Поставка;
	Иначе
		Найдено = Ложь;
	КонецЕсли;

	Если Не Найдено Тогда
		ДатаНачала = НачалоДня(ТекущаяДатаСеанса() - 86400 * 30);
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РеализацияТоваров.Ссылка КАК Поставка
		|ИЗ
		|	Документ.РеализацияТоваров КАК РеализацияТоваров
		|ГДЕ
		|	РеализацияТоваров.ds_IdПоставкиWB = &IdПоставки
		|	И НЕ РеализацияТоваров.ПометкаУдаления
		|	И НЕ РеализацияТоваров.Проведен
		|	И РеализацияТоваров.Дата >= &ДатаНачала";

		Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);//Поищем за последние 30 дней
		Запрос.УстановитьПараметр("IdПоставки", IdПоставки);

		РезультатЗапроса = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Результат = ВыборкаДетальныеЗаписи.Поставка;
		КонецЕсли;

	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция СоздатьПоставкуВ1с(стрПоставка, МассивЗаказовСТоварами)

	ПроводитьДокументы = МассивЗаказовСТоварами.Количество() > 0;

	СтрОшибки = "";
	НачатьТранзакцию();
	СсылкаНаДок = Документы.РеализацияТоваров.ПустаяСсылка();

	Попытка
		Док=Документы.РеализацияТоваров.СоздатьДокумент();
		ЗаполнитьРеквизитыНакладной(Док, стрПоставка, МассивЗаказовСТоварами);
		Если ПроводитьДокументы Тогда
			Док.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			Док.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		ЗафиксироватьТранзакцию();
		СсылкаНаДок = Док.Ссылка;

	Исключение
		стрОшибка = ПолучитьОшибку(ИнформацияОбОшибке(), ОписаниеОшибки());
		ПоказатьОшибку(стрОшибка);

		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
	КонецПопытки;

	Возврат СсылкаНаДок;
КонецФункции

Процедура ЗаполнитьРеквизитыНакладной(Док, стрПоставка, МассивЗаказовСТоварами)

	Док.Дата					= ТекущаяДатаСеанса();
	Док.Контрагент				= КонтрагентДляПривязкиТоваров;

	Док.Организация				= ПолучитьОрганизациюПоИД();
	Док.Склад = ПолучитьСклад();

	Док.Магазин = Док.Склад.Магазин;
	Док.ds_ЭтоПоставкаWB = 	Истина;
	Док.ds_IdПоставкиWB = стрПоставка.IdПоставки;
	Док.ds_СтатусПоставки = СтатусыПоставок().Найти(стрПоставка.СтатусWB).Статус1с;
	Док.ЦенаВключаетНДС	= Истина;
	Док.УчитыватьНДС = 	Истина;
	Док.АдресДоставки = Строка(ПолучитьСкладWBПоИД(МассивЗаказовСТоварами[0].wbWhId));
	Док.Ответственный = Пользователи.ТекущийПользователь();
	Док.Продавец = док.Ответственный.ФизическоеЛицо;
	ОшибкиТоварнойЧасти = "";
	Заказы1сПоТЧ = ЗаполнитьСтрокиНакладной( Док, МассивЗаказовСТоварами);
	Для Каждого заказ1с Из Заказы1сПоТЧ Цикл
		Док.ЗаказПокупателя = заказ1с.ключ; //ТОДО Добавить множественные заказы в функционал дока Реализация
	КонецЦикла;

	Если ОшибкиТоварнойЧасти = "" Тогда
	Иначе
		ВызватьИсключение "Невозможно создать документ: " + СокрЛП(ОшибкиТоварнойЧасти);
	КонецЕсли;
	Док.СуммаДокумента = Док.Товары.Итог("СуммаНДС");
	Док.СкидкиРассчитаны = Истина;
КонецПроцедуры

Функция ЗаполнитьСтрокиНакладной(Док, МассивЗаказовСТоварами)
	НесохраненныеЗаказыWB = Новый Массив;
	Заказы1с = Новый Соответствие;

	ПоследнийШтрихкод = "";
	ПоследняяНоменклатура = Неопределено;
	ЗапросПривязНомен = ЗапросПоНоменклатуреКонтрагентов();
	ЗапросПривязНомен.УстановитьПараметр("Владелец", КонтрагентДляПривязкиТоваров);

	Для Каждого стрТовар Из МассивЗаказовСТоварами Цикл
		Штрихкод = стрТовар.barcodes[0];
		Если ПоследнийШтрихкод = Штрихкод Тогда
			Товар1с= ПоследняяНоменклатура;
		Иначе
			ЗапросПривязНомен.УстановитьПараметр("ШтрихкодКомбинации", Штрихкод);
			Выборка = ЗапросПривязНомен.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Товар1с =   Выборка.Номенклатура;
				ПоследняяНоменклатура = Выборка.Номенклатура;
				ПоследнийШтрихкод = Штрихкод;
			Иначе
				ТекстОшибки = "Товар со штрихкодом Wilberries " + Штрихкод + " по заказу WB №" + Строка(
					стрТовар.orderId) + " не найден в 1с. Невозможно создать в 1с Поставку №" + Док.ds_IdПоставкиWB;
				ПоказатьОшибку(ТекстОшибки);
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
		КонецЕсли;
		Заказ1с = НайтиЗаказВ1с(стрТовар.orderId);
		Если Не ЗначениеЗаполнено(Заказ1с) Тогда
			НесохраненныеЗаказыWB.Добавить(стрТовар);
			Продолжить;
		КонецЕсли;
		Заказы1с.Вставить(Заказ1с);

		СтрДок 								= Док.Товары.Добавить();
		СтрДок.Номенклатура 				= Товар1с;
		СтрДок.Упаковка 					= Товар1с.ЕдиницаИзмерения;
		СтрДок.КоличествоУпаковок 			= 1;
		коэффициентУпаковок					= ПолучитьКоэффициентУпаковкиОтБазовойЕдиницы(СтрДок.Номенклатура,
			СтрДок.Упаковка);
		СтрДок.Количество 					= СтрДок.КоличествоУпаковок * коэффициентУпаковок;

		СтрДок.Продавец = док.Ответственный.ФизическоеЛицо;
		ЗаполнитьСтавкуНДСВСтрокеТЧ(СтрДок, Док.Дата);
		Цена = стрТовар.totalPrice;
		СтрДок.Цена 						= ?(Док.ЦенаВключаетНДС, Цена, Цена / (1 + ПолучитьСтавкуНДС(
			СтрДок.СтавкаНДС) / 100));

		СтрДок.ПроцентАвтоматическойСкидки 	= 0;
		СтрДок.СуммаАвтоматическойСкидки 	= 0;

		стрСумма  = Цена;

		Если СтрДок.КоличествоУпаковок > 0 Тогда
			СтрДок.Цена		= ?(Док.ЦенаВключаетНДС, СтрСумма, СтрСумма / (1 + ПолучитьСтавкуНДС(СтрДок.СтавкаНДС)
				/ 100)) / СтрДок.КоличествоУпаковок;
		Иначе
			СтрДок.Цена = 0;
		КонецЕсли;
		СтрДок.СуммаРучнойСкидки = СтрСумма * стрДок.ПроцентРучнойСкидки / 100;

		СтрДок.Сумма = стрСумма - СтрДок.СуммаРучнойСкидки;
		СтрДок.СуммаНДС = РассчитатьСуммуНДС(СтрДок.Сумма, СтрДок.СтавкаНДС);
		СтрДок.Сумма	= ?(Док.ЦенаВключаетНДС, СтрДок.Сумма, СтрДок.Сумма - СтрДок.СуммаНДС);
		Если СтрДок.Упаковка = СтрДок.Номенклатура.ЕдиницаИзмерения Тогда
			СтрДок.Упаковка = Неопределено;
		КонецЕсли;

	КонецЦикла;

	Если НесохраненныеЗаказыWB.Количество() > 0 Тогда
		тзЗаказыWB =	ПолучитьВиртуальнуюТЧЗаказыWB(НесохраненныеЗаказыWB);
			
			//Группируем заказы по складу WB

		СгруппированныеЗаказы = тзЗаказыWB.Скопировать( , "IdСкладаWB");
		СгруппированныеЗаказы.Свернуть("IdСкладаWB");

		Для Каждого ЗаказWB Из СгруппированныеЗаказы Цикл
			СоздатьЗаказ(ЗаказWB.IdСкладаWB, тзЗаказыWB);
		КонецЦикла;

		НеУдалосьСоздатьЗаказы1с = тзЗаказыWB.НайтиСтроки(Новый Структура("Заказ1сСоздан", Ложь));
		ТекстОшибки = "";

		Для Каждого ЗаказWB Из НеУдалосьСоздатьЗаказы1с Цикл
			ТекстОшибки = ТекстОшибки + "Не удалось создать заказ 1с по заказу WB №" + ЗаказWB.IdЗаказаWB + " от "
				+ Строка(ЗаказWB.ДатаЗаказаWB) + ", сумма " + Строка(ЗаказWB.СуммаТовараWB) + ".Штрихкод WB - "
				+ ЗаказWB.ШтрихкодWB + Символы.ПС;
		КонецЦикла;
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			//ПоказатьОшибку(ТекстОшибки);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		Заказы1сРекурсия = 	ЗаполнитьСтрокиНакладной(Док, НесохраненныеЗаказыWB);
		Для Каждого рекурсия Из Заказы1сРекурсия Цикл
			Заказы1с.Вставить(рекурсия.Ключ);
		КонецЦикла;

	КонецЕсли;

	Возврат Заказы1с;
КонецФункции

#КонецОбласти

#Область Заказы1с

Функция НайтиЗаказВ1с(ИдентификаторЗаказа)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказыПокупателей.Заказ
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей КАК ЗаказыПокупателей
	|ГДЕ
	|	ЗаказыПокупателей.Заказ.Товары.ds_ИдентификаторЗаказа = &ИдентификаторЗаказа";

	Запрос.УстановитьПараметр("ИдентификаторЗаказа", ИдентификаторЗаказа);

//Версия для стандартной конфы
	//|	ЗаказыПокупателей.Заказ.Комментарий ПОДОБНО &ИдентификаторЗаказа";

	//Запрос.УстановитьПараметр("ИдентификаторЗаказа", "%" + ИдентификаторЗаказа + "%");
//Версия для стандартной конфы

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Заказ;
	Иначе
		Возврат Документы.ЗаказПокупателя.ПустаяСсылка();
	КонецЕсли;

КонецФункции

Функция СоздатьЗаказ(IdСкладаWB, ТоварыПоЗаказу = Неопределено)

	ПроводитьДокументы = True;     //ToDo
	СсылкаНаЗаказ = Документы.ЗаказПокупателя.ПустаяСсылка();
	НачатьТранзакцию();
	Попытка

		Док = Документы.ЗаказПокупателя.СоздатьДокумент();

		Отбор = Новый Структура("IdСкладаWB,Заказ1с", IdСкладаWB, Документы.ЗаказПокупателя.ПустаяСсылка());
		Если ТоварыПоЗаказу = Неопределено Тогда
			ТоварыПоЗаказу = ЗаказыWB.НайтиСтроки(Отбор);
		КонецЕсли;

		ЗаполнитьРеквизитыЗаказа(Док, ТоварыПоЗаказу[0]);

		Для Каждого стрДанных Из ТоварыПоЗаказу Цикл
			стрДанных.Заказ1сСоздан =	ЗаполнитьСтрокиЗаказа(Док, стрДанных);
		КонецЦикла;
		док.СуммаДокумента = ПолучитьСуммуЗаказанныхСтрок(Док);

		Если ПроводитьДокументы Тогда
			Док.Записать(РежимЗаписиДокумента.Проведение, ?(НачалоДня(Док.Дата) = НачалоДня(ТекущаяДата()),
				РежимПроведенияДокумента.Оперативный, РежимПроведенияДокумента.Неоперативный));
		Иначе
			Док.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;

		ЗафиксироватьТранзакцию();
		СсылкаНаЗаказ = Док.Ссылка;
	Исключение
		ПоказатьОшибку(ОписаниеОшибки());
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
	КонецПопытки;

	Возврат СсылкаНаЗаказ;

КонецФункции

Процедура ЗаполнитьРеквизитыЗаказа(Док, Шапка)

	Док.Дата = ?(Док.ЭтоНовый(), ТекущаяДатаСеанса(), Док.Дата);

	Док.Контрагент			 = КонтрагентДляПривязкиТоваров;

	Док.ЖелаемаяДатаПродажи    = ТекущаяДатаСеанса();     //ToDo
	док.Статус = 	Перечисления.СтатусыЗаказовПокупателей.Согласован;
	док.ИнтернетЗаказ = Истина;
	док.ds_ЗаказСWildberries = Истина;

	Док.АдресДоставки	= ПолучитьСкладWBПоИД(Шапка.IdСкладаWB);
	Док.Склад	= ПолучитьСклад();
	Док.Магазин = Док.Склад.Магазин;

	Док.Организация				= ПолучитьОрганизациюПоИД(); ////Пока нет привязки по ИД, поэтому берется первая организация
	Док.ЦенаВключаетНДС			= Истина;
	Док.УчитыватьНДС = Истина;

	док.Ответственный = Пользователи.ТекущийПользователь();
	док.Продавец = док.Ответственный.ФизическоеЛицо;

КонецПроцедуры

Функция ПолучитьСуммуЗаказанныхСтрок(Док)
	//функция скопирована из общего модуля конфигурации, во избежании
	//проблем связанных с переименованием общего модуля.	
	СуммаЗаказанныхСтрок = 0;
	НайденныеСтроки = Док.Товары.НайтиСтроки(Новый Структура("Отменено", Ложь));
	Если НайденныеСтроки.Количество() <> 0 Тогда
		Строки = Док.Товары.Выгрузить(НайденныеСтроки, "Сумма");
		Строки.Свернуть( , "Сумма");
		СуммаЗаказанныхСтрок = Строки[0].Сумма;
	КонецЕсли;
	Возврат СуммаЗаказанныхСтрок;
КонецФункции

Функция ЗаполнитьСтрокиЗаказа(Док, стрДанных)
	Если Не ЗначениеЗаполнено(стрДанных.Номенклатура) Тогда
		ПоказатьОшибку("Cтрока " + стрДанных.НомерСтроки + ". Штрихкод Wilberries " + стрДанных.ШтрихкодWB
			+ " пропущен,т.к. нет привязки");
		Возврат Ложь;
	КонецЕсли;

	СтрДок 								= Док.Товары.Добавить();
	СтрДок.Номенклатура 				= стрДанных.Номенклатура;
	СтрДок.Упаковка 					= стрДанных.Номенклатура.ЕдиницаИзмерения;
	СтрДок.КоличествоУпаковок 			= 1;
	СтрДок.Количество 					= СтрДок.КоличествоУпаковок * ПолучитьКоэффициентУпаковкиОтБазовойЕдиницы(
			СтрДок.Номенклатура, СтрДок.Упаковка);  //ToDo	

	СтрДок.Продавец = док.Ответственный.ФизическоеЛицо;
	ЗаполнитьСтавкуНДСВСтрокеТЧ(СтрДок, Док.Дата);

	СтрДок.Цена 						= ?(Док.ЦенаВключаетНДС, стрДанных.СуммаТовараWB, стрДанных.СуммаТовараWB / (1
		+ ПолучитьСтавкуНДС(СтрДок.СтавкаНДС) / 100));

	СтрДок.ПроцентАвтоматическойСкидки 	= 0;
	СтрДок.СуммаАвтоматическойСкидки 	= 0;
	Если стрДанных.СтатусЗаказаWB = 3 Тогда
		СтрДок.Отменено = Истина;
	КонецЕсли;

	СтрДок.Резервировать = Истина;

	СтрДок.Сумма = стрДанных.СуммаТовараWB;
	СтрДок.СуммаНДС = РассчитатьСуммуНДС(СтрДок.Сумма, СтрДок.СтавкаНДС);
	СтрДок.Сумма	= ?(Док.ЦенаВключаетНДС, СтрДок.Сумма, СтрДок.Сумма - СтрДок.СуммаНДС);

	Если СтрДок.Упаковка = СтрДок.Номенклатура.ЕдиницаИзмерения Тогда
		СтрДок.Упаковка = Неопределено;
	КонецЕсли;

	СтрДок.ds_ИдентификаторЗаказа = стрДанных.IdЗаказаWB;
	СтрДок.ds_IdПозицииWB = стрДанных.IdПозицииWB;
	СтрДок.ds_ДатаЗаказаНаWB = стрДанных.ДатаЗаказаWB;
//Версия для стандартной конфы
	//Док.Комментарий  = Док.Комментарий + стрДанных.IdЗаказаWB + ",";
//Версия для стандартной конфы
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область API

Процедура ОбновитьОстаткиВWB() Экспорт
	
	Если ОстаткиТоваров.Количество() = 0 Тогда
		ПоказатьОшибку("Таблица остатков не заполнена. Обновление остатков не выполнено");
		Возврат;
	КонецЕсли;

	idСкладаПоставщика = ПолучитьIDСкладаПоставщика();
	УдаляемыеОстатки = новый Массив();
	ОбновляемыеОстатки = новый Массив();
	
	Для Каждого стр Из ОстаткиТоваров Цикл
	
		Если стр.Разница = 0 Тогда
			Продолжить;
		Иначе
			
			Структ = новый Структура("barcode,warehouseId", стр.ШтрихкодWB,idСкладаПоставщика);
			
			Если стр.Остаток1с = 0 И НЕ стр.ОстатокWB = 0 Тогда //На складе нет,а в ВБ есть.Значит на удаление
				УдаляемыеОстатки.Добавить(Структ);
			Иначе 												////На складе есть и остаток не сходится с ВБ.Значит на обновление	
				Структ.Вставить("stock", стр.Остаток1с);
				ОбновляемыеОстатки.Добавить(Структ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Заголовки = ЗаголовкиПоУмолчанию(2);
	АдресРесурса = "/api/v2/stocks";
	
	Если УдаляемыеОстатки.Количество()>0 Тогда
		ВОЗВРАТ; //ВРЕМЕННО
		ОтветПоУдаляемым = ЗапросНаСерверWB("DELETE", АдресСервисаAPIv2, АдресРесурса, Заголовки, УдаляемыеОстатки);
		ПроверитьОтветНаОшибки(ОтветПоУдаляемым);
		ОбработатьТЧОстаткиПоОтветуWB(Истина, УдаляемыеОстатки,ОтветПоУдаляемым);
	КонецЕсли;
	
	Если ОбновляемыеОстатки.Количество()>0 Тогда
		ВОЗВРАТ; //ВРЕМЕННО
		ОтветПоОбновляемым = ЗапросНаСерверWB("POST", АдресСервисаAPIv2, АдресРесурса, Заголовки, ОбновляемыеОстатки);
		ПроверитьОтветНаОшибки(ОтветПоОбновляемым);	
		ОбработатьТЧОстаткиПоОтветуWB(Ложь, ОбновляемыеОстатки,ОтветПоОбновляемым);
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ОбработатьТЧОстаткиПоОтветуWB(ЗапросНаУдаление, ТоварыЗапроса, ОтветСервера)
		
		ОбработанныеТовары = новый Массив();
		СтатусОбновления = "";
		
		Если ОтветСервера.КодСостояния = 500 Тогда
			СтатусОбновления = "Внутренняя ошибка Wildberries";
		КонецЕсли;
		
		Если ОтветСервера.КодСостояния = 400 Тогда
			СтатусОбновления = "Все остатки неверно указаны или у поставщика нет ни одного склада";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтатусОбновления) Тогда
			Для Каждого стрЗапроса Из ТоварыЗапроса Цикл
				строкаТЧ = ОстаткиТоваров.Найти(стрЗапроса.barcode,"ШтрихкодWB" );
				строкаТЧ.Успех = Ложь;
				строкаТЧ.СтатусОбновления = СтатусОбновления;
			КонецЦикла;
			Возврат;
		КонецЕсли;
		
		Если НЕ ОтветСервера.УспехЗапроса Тогда
			Для Каждого стрЗапроса Из ОтветСервера.Результат.data.errors Цикл
				строкаТЧ = ОстаткиТоваров.Найти(стрЗапроса.barcode,"ШтрихкодWB" );
				строкаТЧ.Успех = Ложь;
				строкаТЧ.СтатусОбновления = стрЗапроса.err;
				ОбработанныеТовары.Добавить(стрЗапроса.barcode);
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого строкаТЧ Из ОстаткиТоваров Цикл
			Если ЗначениеЗаполнено(ОбработанныеТовары.Найти(строкаТЧ.ШтрихкодWB)) Тогда
				Продолжить;
			КонецЕсли;
			строкаТЧ.ОстатокWB = строкаТЧ.Остаток1с;
			строкаТЧ.Разница = 0;
			строкаТЧ.Успех = Истина;
			строкаТЧ.СтатусОбновления = "Успешно";
		КонецЦикла;
		
		
КонецПроцедуры

Функция ПолучитьСтикерыНаWB(МассивИДЗаказа)

	Заголовки = ЗаголовкиПоУмолчанию(2);
	Заголовки.Вставить("Content-Type", "application/json");
	АдресРесурса = "/api/v2/orders/stickers";
	
	//Разобьем массив ИД на массивы по-меньше. Ограничение API
	Порция = 1000;
	ВсеПорции = Новый Массив;
	ПорцияМассив = Новый Массив;

	Для Индекс = 0 По МассивИДЗаказа.ВГраница() Цикл
		Если ПорцияМассив.Количество() = Порция Тогда
			ВсеПорции.Добавить(ПорцияМассив);
			ПорцияМассив = Новый Массив;
		КонецЕсли;

		ПорцияМассив.Добавить(МассивИДЗаказа.Получить(Индекс));
	КонецЦикла;

	Если ПорцияМассив.Количество() > 0 Тогда
		ВсеПорции.Добавить(ПорцияМассив);
	КонецЕсли;

	ДанныеДляJSON = Новый Структура("orderIds,type", ВсеПорции[0], "code128");
	ГлавныйОтвет = ЗапросНаСерверWB("POST", АдресСервисаAPIv2, АдресРесурса, Заголовки, ДанныеДляJSON);

	Если ГлавныйОтвет.УспехЗапроса Тогда
		Для Индекс = 1 По ВсеПорции.ВГраница() Цикл
			ДанныеДляJSON.orderIds = ВсеПорции.Получить(Индекс);

			Ответ = ЗапросНаСерверWB("POST", АдресСервисаAPIv2, АдресРесурса, Заголовки, ДанныеДляJSON);

			Если Ответ.УспехЗапроса Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ГлавныйОтвет.Результат.data, Ответ.Результат.data, Истина);
			Иначе
				ПоказатьОшибку(Ответ.Результат.errorText);
				ГлавныйОтвет.Результат.Вставить("errorText", Ответ.Результат.errorText);
				ГлавныйОтвет.УспехЗапроса = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;

	Иначе
		ПоказатьОшибку(ГлавныйОтвет.Результат.errorText);
	КонецЕсли;

	ПроверитьОтветНаОшибки(ГлавныйОтвет);
	Возврат ГлавныйОтвет;

КонецФункции

Функция ПолучитьТоварыНаWB()

	ЗаготовкаАдресРесурса = "/api/v2/stocks?";
	Ответ = ОтправитьЗапросСПагинацией("GET", ЗаготовкаАдресРесурса, "stocks", 100);
	ПроверитьОтветНаОшибки(Ответ);
	Возврат Ответ;

КонецФункции

Функция ПолучитьЗаказыНаWBv2()

	ДатаНачало = ДатаRFC3339Кодированная(НачальнаяДата);
	ЗаготовкаАдресРесурса = "/api/v2/orders?date_start=" + ДатаНачало + "&";
	Ответ = ОтправитьЗапросСПагинацией("GET", ЗаготовкаАдресРесурса, "orders", 1000);
	ПроверитьОтветНаОшибки(Ответ);
	Возврат Ответ;

КонецФункции

Функция ПолучитьЗаказыНаWBv1()
	Заголовки = ЗаголовкиПоУмолчанию(1);
	ДатаНачало = ДатаRFC3339Кодированная(НачальнаяДата);
	АдресРесурса = "/api/v1/supplier/orders?key=" + ТокенAPIv1 + "&dateFrom=" + ДатаНачало;
	Ответ = ЗапросНаСерверWB("GET", АдресСервисаAPIv1, АдресРесурса, Заголовки);
	ПроверитьОтветНаОшибки(Ответ);
	Возврат Ответ;
КонецФункции

Функция ПолучитьПоставкиНаWBv1()
	Заголовки = ЗаголовкиПоУмолчанию(1);
	ДатаНачало = ДатаRFC3339Кодированная(НачальнаяДата);
	АдресРесурса = "/api/v1/supplier/incomes?key=" + ТокенAPIv1 + "&dateFrom=" + ДатаНачало;
	Ответ = ЗапросНаСерверWB("GET", АдресСервисаAPIv1, АдресРесурса, Заголовки);
	ПроверитьОтветНаОшибки(Ответ);
	Возврат Ответ;
КонецФункции

Функция ПолучитьПоставкиНаWBv2()

	Заголовки = ЗаголовкиПоУмолчанию(2);
	ГлавныйОтвет = Новый Структура("УспехЗапроса,Результаты", Истина, Новый Массив);

	СтатусыПоставок = СтатусыПоставок();
	Для Каждого статус Из СтатусыПоставок Цикл

		АдресРесурса = "/api/v2/supplies?status=" + статус.СтатусWB;
		Ответ = ЗапросНаСерверWB("GET", АдресСервисаAPIv2, АдресРесурса, Заголовки);
		Ответ.Вставить("СтатусПоставки", статус.СтатусWBРасшифровка);
		ГлавныйОтвет.УспехЗапроса = ГлавныйОтвет.УспехЗапроса И Ответ.УспехЗапроса;
		ПроверитьОтветНаОшибки(Ответ);
		ГлавныйОтвет.Результаты.Добавить(Ответ);
		Если Не Ответ.УспехЗапроса Тогда
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Возврат ГлавныйОтвет;

КонецФункции

Функция ПолучитьШтрихкодПоставкиBase64НаWBv2(IdПоставки)

	Заголовки = ЗаголовкиПоУмолчанию(2);
	АдресРесурса = "/api/v2/supplies/" + IdПоставки + "/barcode?type=svg";
	Ответ = ЗапросНаСерверWB("GET", АдресСервисаAPIv2, АдресРесурса, Заголовки);

	Если Не Ответ.УспехЗапроса Тогда
		ПоказатьОшибку("Для поставки №" + IdПоставки + " не удалось получить штрихкод");
		Возврат "";
	КонецЕсли;

	Возврат Ответ.Результат.file;
КонецФункции

Функция ПрикрепленныеЗаказыПоПоставкеWBv2(IdПоставки)

	Заголовки = ЗаголовкиПоУмолчанию(2);
	АдресРесурса = "/api/v2/supplies/" + IdПоставки + "/orders";
	Ответ = ЗапросНаСерверWB("GET", АдресСервисаAPIv2, АдресРесурса, Заголовки);

	Если Не Ответ.УспехЗапроса Тогда
		ПоказатьОшибку("Для поставки №" + IdПоставки + " не удалось получить прикрепленные заказы");
	КонецЕсли;

	Возврат Ответ;
КонецФункции

Функция ОтправитьЗапросСПагинацией(Метод, ЗаготовкаАдресРесурса, ИмяСтруктурыОтвета, Порция = 100)
	
	//Определим версию API 
	Если СтрНайти(ЗаготовкаАдресРесурса, "/api/v2/") > 0 Тогда
		ВерсияAPI = 2;
		АдресСервера = АдресСервисаAPIv2;
	Иначе
		ВерсияAPI = 1;
		АдресСервера = АдресСервисаAPIv1;
	КонецЕсли;

	Заголовки = ЗаголовкиПоУмолчанию(ВерсияAPI);

	Получено = 0;
	Добрать = 1;
	АдресРесурса = ЗаготовкаАдресРесурса + "skip=" + Получено + "&take=" + Добрать;
	ГлавныйОтвет = ЗапросНаСерверWB("GET", АдресСервера, АдресРесурса, Заголовки);

	Если ГлавныйОтвет.УспехЗапроса Тогда

		Получено = Добрать;
		ВсегоДанных = 	ГлавныйОтвет.Результат.Total;
		Добрать = ?(ВсегоДанных < Порция, ВсегоДанных - Получено, Порция);

		Пока Добрать > 0 Цикл

			АдресРесурса = ЗаготовкаАдресРесурса + "skip=" + XMLСтрока(Получено) + "&take=" + XMLСтрока(Добрать);
			Ответ = ЗапросНаСерверWB("GET", АдресСервера, АдресРесурса, Заголовки);

			Если Ответ.УспехЗапроса Тогда
				Получено = Получено + Добрать;
				ОстатокКДобору = ВсегоДанных - Получено;
				Добрать = ?(ОстатокКДобору < Добрать, ОстатокКДобору, Добрать);
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ГлавныйОтвет.Результат[ИмяСтруктурыОтвета],
					Ответ.Результат[ИмяСтруктурыОтвета], Истина);
			Иначе
				ГлавныйОтвет.Результат.Вставить("errorText", Ответ.Результат.errorText);
				ГлавныйОтвет.УспехЗапроса = Ложь;
				Прервать;
			КонецЕсли;

		КонецЦикла;
	КонецЕсли;

	Возврат ГлавныйОтвет;
КонецФункции

#КонецОбласти

#Область ВспомогательныеФункции

Процедура ПроверитьОтветНаОшибки(Ответ)
	Если Не Ответ.УспехЗапроса Тогда
		ПоказатьОшибку(Ответ.Результат.errorText);
	КонецЕсли;
КонецПроцедуры

Функция ДатаИзRFC3339(ДатаСтрока)
	ДатаСтрока = СтрЗаменить(ДатаСтрока, "T", "");
	ДатаСтрока = СтрЗаменить(ДатаСтрока, "-", "");
	ДатаСтрока = СтрЗаменить(ДатаСтрока, ":", "");
	НачПозицияМС = СтрНайти(ДатаСтрока, ".");
	Если НачПозицияМС > 0 Тогда
		ДатаСтрока = Лев(ДатаСтрока, НачПозицияМС - 1);
	КонецЕсли;
	Возврат Дата(ДатаСтрока);
КонецФункции

Функция ДатаRFC3339Кодированная(Дата)
	ДатаСтрока = Формат(Дата, "ДФ=yyyy-MM-ddTчч:мм:сс+03:00;");
	Возврат КодироватьСтроку(ДатаСтрока, СпособКодированияСтроки.КодировкаURL);
КонецФункции

Процедура ПоказатьОшибку(Текст)
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Текст;
	Сообщение.УстановитьДанные(ЭтотОбъект);
	Сообщение.Сообщить();
КонецПроцедуры

Процедура ИнициализацияКартыСтатусовWB_1с()
	ТипЧисло = Новый ОписаниеТипов("Число");
	ТипСтрока = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(200));

	КартаСтатусовWB_1с.Колонки.Добавить("СтатусWB", ТипЧисло);
	КартаСтатусовWB_1с.Колонки.Добавить("СтатусWBРасшифровка", ТипСтрока);
	КартаСтатусовWB_1с.Колонки.Добавить("Статус1с", Новый ОписаниеТипов("ПеречислениеСсылка.ds_СтатусыИнтернетЗаказов"));

	КартаСтатусовWB_1с.Добавить().СтатусWB = 0;
	КартаСтатусовWB_1с.Добавить().СтатусWBРасшифровка = "Новый заказ";
	КартаСтатусовWB_1с.Добавить().СтатусWB = Перечисления.ds_СтатусыИнтернетЗаказов.ВПути;

	КартаСтатусовWB_1с.Добавить().СтатусWB = 1;
	КартаСтатусовWB_1с.Добавить().СтатусWBРасшифровка = "Принял заказ";
	КартаСтатусовWB_1с.Добавить().СтатусWB = Перечисления.ds_СтатусыИнтернетЗаказов.ВПути;

	КартаСтатусовWB_1с.Добавить().СтатусWB = 2;
	КартаСтатусовWB_1с.Добавить().СтатусWBРасшифровка = "Сборочное задание завершено";
	КартаСтатусовWB_1с.Добавить().СтатусWB = Перечисления.ds_СтатусыИнтернетЗаказов.ВПути;

	КартаСтатусовWB_1с.Добавить().СтатусWB = 3;
	КартаСтатусовWB_1с.Добавить().СтатусWBРасшифровка = "Сборочное задание отклонено";
	КартаСтатусовWB_1с.Добавить().СтатусWB = Перечисления.ds_СтатусыИнтернетЗаказов.ВПути;

	КартаСтатусовWB_1с.Добавить().СтатусWB = 5;
	КартаСтатусовWB_1с.Добавить().СтатусWBРасшифровка = "На доставке курьером";
	КартаСтатусовWB_1с.Добавить().СтатусWB = Перечисления.ds_СтатусыИнтернетЗаказов.ВПути;

	КартаСтатусовWB_1с.Добавить().СтатусWB = 6;
	КартаСтатусовWB_1с.Добавить().СтатусWBРасшифровка = "Курьер довез и клиент принял товар";
	КартаСтатусовWB_1с.Добавить().СтатусWB = Перечисления.ds_СтатусыИнтернетЗаказов.ВПути;

	КартаСтатусовWB_1с.Добавить().СтатусWB = 7;
	КартаСтатусовWB_1с.Добавить().СтатусWBРасшифровка = "Клиент не принял товар";
	КартаСтатусовWB_1с.Добавить().СтатусWB = Перечисления.ds_СтатусыИнтернетЗаказов.ВПути;

	КартаСтатусовWB_1с.Добавить().СтатусWB = 8;
	КартаСтатусовWB_1с.Добавить().СтатусWBРасшифровка = "Товар для самовывоза из магазина принят к работе";
	КартаСтатусовWB_1с.Добавить().СтатусWB = Перечисления.ds_СтатусыИнтернетЗаказов.ВПути;

	КартаСтатусовWB_1с.Добавить().СтатусWB = 9;
	КартаСтатусовWB_1с.Добавить().СтатусWBРасшифровка = "Товар для самовывоза из магазина готов к выдаче";
	КартаСтатусовWB_1с.Добавить().СтатусWB = Перечисления.ds_СтатусыИнтернетЗаказов.ВПути;
КонецПроцедуры

Функция МассивСтруктурВТЗ(Данные)
	тзДанные = Новый ТаблицаЗначений;

	Для Каждого ЭлементМассива Из Данные Цикл
		Для Каждого Элемент Из ЭлементМассива Цикл
			тзДанные.Колонки.Добавить(СокрЛП(Элемент.Ключ));
		КонецЦикла;
		Прервать;
	КонецЦикла;

	Для Каждого ЭлементМассива Из Данные Цикл
		Строка = тзДанные.Добавить();
		Для Каждого Элемент Из ЭлементМассива Цикл
			Строка[СокрЛП(Элемент.Ключ)] = СокрЛП(Элемент.Значение);
		КонецЦикла;
	КонецЦикла;

	Возврат тзДанные;
КонецФункции

Функция СтатусыПоставок()

	СтатусыПоставок = Новый ТаблицаЗначений;
	ТипСтрока = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(200));

	СтатусыПоставок.Колонки.Добавить("СтатусWB", ТипСтрока);
	СтатусыПоставок.Колонки.Добавить("СтатусWBРасшифровка", ТипСтрока);
	СтатусыПоставок.Колонки.Добавить("Статус1с", Новый ОписаниеТипов("ПеречислениеСсылка.ds_СтатусыПоставокWB"));

	НоваяСтрока = СтатусыПоставок.Добавить();
	НоваяСтрока.СтатусWB = "ACTIVE";
	НоваяСтрока.СтатусWBРасшифровка = "Активная";
	НоваяСтрока.Статус1с = Перечисления.ds_СтатусыПоставокWB.Собирается;

	НоваяСтрока = СтатусыПоставок.Добавить();
	НоваяСтрока.СтатусWB = "ON_DELIVERY";
	НоваяСтрока.СтатусWBРасшифровка = "В пути";
	НоваяСтрока.Статус1с = Перечисления.ds_СтатусыПоставокWB.Завершена;
	Возврат СтатусыПоставок;
КонецФункции

Функция ПолучитьОшибку(ИО, ОО)
	текстОшибки = СформироватьОписаниеОшибки(ИО);
	глПоследняяОшибкаПроведения = ?(текстОшибки = "", ОО, текстОшибки);
	СообщенияПользователю = ПолучитьСообщенияПользователю();
	Если Не ПустаяСтрока(глПоследняяОшибкаПроведения) И СообщенияПользователю.Количество() > 0 Тогда
		глПоследняяОшибкаПроведения = глПоследняяОшибкаПроведения + ": ";
	КонецЕсли;
	Для Каждого сообщение Из СообщенияПользователю Цикл
		глПоследняяОшибкаПроведения = глПоследняяОшибкаПроведения + сообщение.Текст + "; ";
	КонецЦикла;
	Если ПустаяСтрока(глПоследняяОшибкаПроведения) Тогда
		глПоследняяОшибкаПроведения="Неизвестная ошибка";
	КонецЕсли;
	Возврат глПоследняяОшибкаПроведения;
КонецФункции

Функция СформироватьОписаниеОшибки(Ошибка, Уровень = 0)
	Если Ошибка = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	описание = СокрЛП(Ошибка.Описание + ?(ПустаяСтрока(Ошибка.ИмяМодуля) И ПустаяСтрока(Ошибка.ИсходнаяСтрока), "",
		Символы.ПС + ?(ПустаяСтрока(Ошибка.ИмяМодуля), "", " в " + Ошибка.ИмяМодуля + " (" + Ошибка.НомерСтроки + ")"
		+ Символы.ПС + ?(ПустаяСтрока(Ошибка.ИсходнаяСтрока), "", " в " + СокрЛП(Ошибка.ИсходнаяСтрока) + Символы.ПС))));
	Если Уровень < 10 Тогда
		причина = СформироватьОписаниеОшибки(Ошибка.Причина, Уровень + 1);
		Если Не ПустаяСтрока(причина) Тогда
			описание = описание + " по причине " + Символы.ПС + причина;
		КонецЕсли;
	КонецЕсли;
	Возврат описание;
КонецФункции

//Убирает из строки символы с кодами 0-31 (до кода пробела), 
//чтобы исключить запрещенные символы в базе данных на КПК
//при установленном флаге - разрешает символы разделителя и перевода строк
Процедура УбратьНедопустимыеСимволыСтараяСистема(ИсхСтр, ОставлятьРазделители = Ложь, ДлинаРезСтроки = -1,
	ОставлятьСимвол15 = Ложь, ОставлятьСимволВТаб = Ложь)
	//в один цикл не собирать, так работает быстрее
	Для й = 0 По 8 Цикл
		ИсхСтр = СтрЗаменить(ИсхСтр, Символ(й), " ");
	КонецЦикла;

	Если ОставлятьРазделители Тогда
	Иначе
		ИсхСтр = СтрЗаменить(ИсхСтр, Символы.Таб, " ");//9
		ИсхСтр = СтрЗаменить(ИсхСтр, Символы.ПС, " ");//10
		ИсхСтр = СтрЗаменить(ИсхСтр, Символы.ВК, " ");//13
	КонецЕсли;

	Если ОставлятьСимволВТаб Тогда
	Иначе
		ИсхСтр = СтрЗаменить(ИсхСтр, Символы.ВТаб, " ");//11
	КонецЕсли;

	ИсхСтр = СтрЗаменить(ИсхСтр, Символ(12), " ");
	ИсхСтр = СтрЗаменить(ИсхСтр, Символ(14), " ");

	Если ОставлятьСимвол15 Тогда
	Иначе
		ИсхСтр = СтрЗаменить(ИсхСтр, Символ(15), " ");//15
	КонецЕсли;

	Для й = 16 По 31 Цикл
		ИсхСтр = СтрЗаменить(ИсхСтр, Символ(й), " ");
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьВиртуальнуюТЧЗаказыWB(НесохраненныеЗаказыWB)
	тз = ЗаказыWB.Выгрузить(Новый Структура("номерСтроки", 1), ); //нужно убедиться в том, что ТЗ корректно создается
	тз.Очистить();
	тз.Очистить();
			
		//Чуток производительности
	ПоследнийШтрихкод = "";
	ПоследняяНоменклатура = Неопределено;
	ЗапросПривязНомен = ЗапросПоНоменклатуреКонтрагентов();
	ЗапросПривязНомен.УстановитьПараметр("Владелец", КонтрагентДляПривязкиТоваров);
	Для Каждого Заказ Из НесохраненныеЗаказыWB Цикл
		стрТЧ = тз.Добавить();
		Штрихкод = Заказ.barcodes[0];
		Если ПоследнийШтрихкод = Штрихкод Тогда
			стрТЧ.Номенклатура = ПоследняяНоменклатура;
		Иначе
			ЗапросПривязНомен.УстановитьПараметр("ШтрихкодКомбинации", Штрихкод);
			Выборка = ЗапросПривязНомен.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				стрТЧ.Номенклатура =   Выборка.Номенклатура;
				ПоследняяНоменклатура = Выборка.Номенклатура;
				ПоследнийШтрихкод = Штрихкод;
			Иначе
				Продолжить; //Наша задача - всего лишь создать недостающие заказы в текущей транзакции для процедуры создания Поставки в 1с
					//и функция проверки на наличие привязки товара в базе 1с уже есть в выше упомянутой процедуре
			КонецЕсли;
		КонецЕсли;

		стрТЧ.ДатаЗаказаWB = ДатаИзRFC3339(Заказ.dateCreated);
		стрТЧ.IdЗаказаWB = Заказ.orderId;
		стрТЧ.IdПозицииWB = Заказ.rid;
		стрТЧ.СуммаТовараWB = Заказ.totalPrice;
		стрТЧ.IdСкладаWB = Заказ.wbWhId;
		стрТЧ.ШтрихкодWB = Штрихкод;
		стрТЧ.СтатусЗаказаWB = Заказ.status;
		стрТЧ.СостояниеЗаказаWB = Заказ.userStatus;

	КонецЦикла;

	тз.Сортировать("Номенклатура,ДатаЗаказаWB");

	Возврат тз;
КонецФункции

Функция ЭтоБуква(СимволДляПроверки)
	СимволДляПроверки = НРег(СимволДляПроверки);
	Алфавит = "йцукенгшщзхъфывапролджэячсмитьбюёqwertyuiopasdfghjklzxcvbnm";
	Возврат СтрНайти(Алфавит, СимволДляПроверки) > 0;
КонецФункции

Процедура ЗагрузитьОстатки1сВТЧ()
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НоменклатураКонтрагентовБЭД.Номенклатура,
	|	НоменклатураКонтрагентовБЭД.ШтрихкодКомбинации КАК ШтрихкодWB
	|ПОМЕСТИТЬ НоменклатураКонтрагентовБЭД
	|ИЗ
	|	РегистрСведений.НоменклатураКонтрагентовБЭД КАК НоменклатураКонтрагентовБЭД
	|ГДЕ
	|	НоменклатураКонтрагентовБЭД.Владелец = &Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.КоличествоОстаток - ТоварыНаСкладахОстатки.РезервОстаток КАК СвободныйОстаток,
	|	НоменклатураКонтрагентовБЭД.Номенклатура,
	|	НоменклатураКонтрагентовБЭД.ШтрихкодWB
	|ПОМЕСТИТЬ Заготовка
	|ИЗ
	|	НоменклатураКонтрагентовБЭД КАК НоменклатураКонтрагентовБЭД
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(, Склад = &Склад) КАК ТоварыНаСкладахОстатки
	|		ПО НоменклатураКонтрагентовБЭД.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Заготовка.Номенклатура,
	|	Заготовка.СвободныйОстаток КАК Остаток1с,
	|	Заготовка.ШтрихкодWB
	|ИЗ
	|	Заготовка КАК Заготовка
	|ГДЕ
	|	Заготовка.СвободныйОстаток > 0";

	Запрос.УстановитьПараметр("Склад", СкладОстатков);
	Запрос.УстановитьПараметр("Владелец", КонтрагентДляПривязкиТоваров);

	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	ОстаткиТоваров.Загрузить(РезультатЗапроса);
КонецПроцедуры

Функция ПолучитьIDСкладаПоставщика()
	//TODO: Требуется полноценная реализация функции
	Возврат "106154";
КонецФункции

Функция ПолучитьСкладWBПоИД(IdСкладаWB)
	Возврат IdСкладаWB;

КонецФункции

Функция ПолучитьСклад()

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Склады.Ссылка КАК Склад
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	НЕ Склады.ЭтоГруппа
	|	И НЕ Склады.ПометкаУдаления";

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Склад;
	КонецЕсли;
	Возврат Справочники.Склады.ПустаяСсылка();

КонецФункции // ПолучитьСкладПоИД()

Функция ПолучитьОрганизациюПоИД()
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления";

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Организация;
	КонецЕсли;
	Возврат Справочники.Организации.ПустаяСсылка();
КонецФункции // ПолучитьОрганизациюПоИД()

Функция ПолучитьКоэффициентУпаковкиОтБазовойЕдиницы(Номенклатура, Упаковка)
	//товар продан в Упаковка, которая может быть либо упаковкой, либо одной из единиц
	//необходимо вернуть коэффициент сколько единиц хранения включено в Упаковку	
	Коэффициент = 1;	
	//у номенклатуры только единица хранения и упаковки,
	Если Упаковка = Номенклатура.ЕдиницаИзмерения Тогда
	Иначе
		Коэффициент = ?(Упаковка.Пустая(), 1, Упаковка.Коэффициент);
	КонецЕсли;

	Возврат Коэффициент;

КонецФункции

Процедура ЗаполнитьСтавкуНДСВСтрокеТЧ(ТекущаяСтрока, ДатаДокумента)

	СтавкаНДС = ТекущаяСтрока.Номенклатура.СтавкаНДС;
	СкорректироватьСтавкуНДС(СтавкаНДС, ДатаДокумента);
	ТекущаяСтрока.СтавкаНДС = СтавкаНДС;

КонецПроцедуры

// Заменяет переданную ставку НДС на актуальную на указанную дату.
//
// Параметры:
//  СтавкаНДС - ПеречислениеСсылка.СтавкиНДС - значение ставки НДС, которое необходимо скорректировать
//  Дата - Дата - дата на которую необходимо получить актуальную ставку НДС.
//
// Возвращаемое значение:
//  Булево - Истина, если значение ставки НДС было заменено.
//
Функция СкорректироватьСтавкуНДС(СтавкаНДС, Дата)

	Результат = Ложь;

	Если Метаданные.Перечисления.СтавкиНДС.ЗначенияПеречисления.Найти("НДС20") <> Неопределено Тогда
		Если СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Или СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Или СтавкаНДС
			= Перечисления.СтавкиНДС.НДС20 Или СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120 Тогда
			СтавкаНДСПоУмолчанию = СтавкаНДСПоУмолчанию(Дата, СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118
				Или СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120);
			Если СтавкаНДС <> СтавкаНДСПоУмолчанию Тогда
				СтавкаНДС = СтавкаНДСПоУмолчанию;
				Результат = Истина;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Или СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
			СтавкаНДСПоУмолчанию = СтавкаНДСПоУмолчанию(Дата, СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118);
			Если СтавкаНДС <> СтавкаНДСПоУмолчанию Тогда
				СтавкаНДС = СтавкаНДСПоУмолчанию;
				Результат = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция РассчитатьСуммуНДС(Сумма, СтавкаНДС, ЦенаВключаетНДС = Истина)
	ПроцентНДС = ПолучитьСтавкуНДС(СтавкаНДС) / 100;
	Если ЦенаВключаетНДС Тогда
		СуммаНДС = Сумма * ПроцентНДС / (ПроцентНДС + 1);
	Иначе
		СуммаНДС = Сумма * ПроцентНДС;
	КонецЕсли;
	Возврат СуммаНДС;
КонецФункции

Функция ПолучитьСтавкуНДС(СтавкаНДС)
	Если СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Или СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
		Возврат 10;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Или СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
		Возврат 18;
	ИначеЕсли Метаданные.Перечисления.СтавкиНДС.ЗначенияПеречисления.Найти("НДС20") <> Неопределено И (СтавкаНДС
		= Перечисления.СтавкиНДС.НДС20 Или СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120) Тогда
		Возврат 20;
	КонецЕсли;
	Возврат 0;
КонецФункции

// Возвращает значение ставки НДС по умолчанию.
//
// Параметры:
//  Дата - Дата - дата на которую необходимо получить ставку НДС по умолчанию,
//               если дата пустая, то будет получена ставка НДС на текущую дату
//  РасчетнаяСтавка - Булево - указывает необходимость получения расчетной ставки НДС X/(100 + X).
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтавкиНДС - значение ставки НДС.
//
Функция СтавкаНДСПоУмолчанию(Дата = Неопределено, РасчетнаяСтавка = Ложь) Экспорт

	ДатаПолучения = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());

	Если ДатаПолучения >= '20190101' И Метаданные.Перечисления.СтавкиНДС.ЗначенияПеречисления.Найти("НДС20")
		<> Неопределено Тогда
		Возврат ?(РасчетнаяСтавка, Перечисления.СтавкиНДС.НДС20_120, Перечисления.СтавкиНДС.НДС20);
	Иначе
		Возврат ?(РасчетнаяСтавка, Перечисления.СтавкиНДС.НДС18_118, Перечисления.СтавкиНДС.НДС18);
	КонецЕсли;

КонецФункции

#КонецОбласти

#Область ПостроительHTTPЗапроса

Функция ЗапросНаСерверWB(Метод, АдресСервиса, АдресРесурса, Заголовки, ДанныеДляJSON = Неопределено)

	Соединение = Новый HTTPСоединение(АдресСервиса, , , , , Истина);

	Запрос = Новый HTTPЗапрос;
	Запрос.АдресРесурса = АдресРесурса;
	Запрос.Заголовки = Заголовки;

	Если ЗначениеЗаполнено(ДанныеДляJSON) Тогда
		// формирование запроса
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, ДанныеДляJSON);
		ТекстТелаЗапроса = ЗаписьJSON.Закрыть();
		Запрос.УстановитьТелоИзСтроки(ТекстТелаЗапроса);
	КонецЕсли;
	ОтветСтруктурой = ВызватьМетодЗапроса(Запрос, Соединение, Метод);
	Возврат ОтветСтруктурой;

КонецФункции

Функция ВызватьМетодЗапроса(Запрос, Соединение, Метод)

	Попытка
		Если Метод = "DELETE" Тогда
			РезультатЗапрос = Соединение.Удалить(Запрос);
		Иначе
			РезультатЗапрос = Соединение.ВызватьHTTPМетод(Метод, Запрос);
		КонецЕсли;
		РезультатСтрокой = РезультатЗапрос.ПолучитьТелоКакСтроку();

		Если Не РезультатЗапрос.КодСостояния = 200 Тогда
			Результат = Новый Структура("errorText", РезультатСтрокой);
			Ошибка = Истина;
		Иначе

			Чтение = Новый ЧтениеJSON;

			Чтение.УстановитьСтроку(РезультатСтрокой);
			Результат = ПрочитатьJSON(Чтение);
			Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("error") Тогда
				Ошибка = Результат.error;
			Иначе
				Ошибка = Ложь;
			КонецЕсли;
		КонецЕсли;

	Исключение
		Инфо = ИнформацияОбОшибке();
		Результат = Новый Структура("errorText", Инфо.Описание);
		Ошибка = Истина;
	КонецПопытки;
	ОтветСтруктурой = Новый Структура("Результат,УспехЗапроса,КодСостояния", Результат, Не Ошибка,
		РезультатЗапрос.КодСостояния);

	Возврат ОтветСтруктурой;

КонецФункции

Функция ЗаголовкиПоУмолчанию(ВерсияAPI)

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Accept", "application/json");
	
		//Определим версию API 
	Если ВерсияAPI = 2 Тогда
		ХедерПоляТокен = "Authorization";
		Токен = ТокенAPIv2;
	ИначеЕсли ВерсияAPI = 1 Тогда
		ХедерПоляТокен = "ApiKey";
		Токен = ТокенAPIv1;
	КонецЕсли;
	
	Заголовки.Вставить(ХедерПоляТокен, Токен);
	
	Возврат Заголовки;
КонецФункции

#КонецОбласти